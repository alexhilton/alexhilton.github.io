<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Miscellaneous | 稀有猿诉]]></title>
  <link href="http://toughcoder.net/blog/categories/miscellaneous/atom.xml" rel="self"/>
  <link href="http://toughcoder.net/"/>
  <updated>2015-12-11T13:38:14+08:00</updated>
  <id>http://toughcoder.net/</id>
  <author>
    <name><![CDATA[Alex Hilton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用Octopress和Github Pages搭建博客的高级技巧]]></title>
    <link href="http://toughcoder.net/blog/2015/04/22/advanced-tricks-of-github-pages-with-octopress/"/>
    <updated>2015-04-22T23:40:13+08:00</updated>
    <id>http://toughcoder.net/blog/2015/04/22/advanced-tricks-of-github-pages-with-octopress</id>
    <content type="html"><![CDATA[<p>如何果还不知道如何使用Octopress和Github Pages搭建的同学可以参考<a href="http://toughcoder.net/blog/2014/10/16/blogging-like-a-hacker-with-github-pages/">码农的救赎：使用Github Pages搭建博客</a></p>

<p><a href=""><img src="http://blog.robinchutaux.com/images/blog/octopress-logo.png" title="auto auto" ></a></p>

<!-- more -->


<h2>提升速度</h2>

<p>按照教程搭建好的博客，访问起来总是很慢很慢，即使把什么Google Plus和Google Analyze之类的都关闭掉后，仍然很慢。原因就是在HTML中的某些资源，比如脚本或者字体什么的是使用Google提供的，所以就会慢，那么怎么解决呢？就是用国内的替代品。<a href="http://libs.useso.com/">360</a>提供了几个Google的替代库，跟Google是一样的，只需要找到代码，把链接替换360的就可以了。至此发现360还真是一个良心企业。
具体的就是把source/<em>include/head.html和source/</em>include/custom/head.html中的fonts.google.com和ajax.google.com都替换成userso.com然后就Okay，速度哗哗的。</p>

<h2>为图片选择存储</h2>

<p>Github为我们的博客提供免费的存储空间，其实也可以把图片直接在我们博客的源码里，这样就会传到Github上面去。但是这样子会有问题，一是增加博客占用的空间，虽然Github免费，且没有限制，但是天长是久以后就不好说了； 另外就是Github访问速度要慢一些，至少对于我大天朝是如此。所以选择国内的云存储就显得百分有必要了。
推荐使用<a href="http://www.qiniu.com/">七牛</a>，原因是：</p>

<ol>
<li>有免费空间</li>
<li>可以对每个文件进行公开，且有稳定链接，即使文件后来编辑过</li>
<li>有命令行工具可以进行批处理</li>
</ol>


<p>使用方法的话看官方的<a href="http://developer.qiniu.com/docs/v6/tools/qrsync.html">文档</a>就可以了，安装下它的命令行工具，把图片放到要同步的目录，然后同步。创建一个公开的Bucket，然后放图片于其中，同步上传后就可以得到链接了。</p>

<h2>Mac下的优质Markdown编辑器</h2>

<p><a href="http://25.io/mou/">Mou</a>是我先前推荐的，但是最近发现Mou总是莫名的卡顿，总是会卡上个几秒钟，无论做什么操作，很是让人难以忍受。
于是<a href="http://macdown.uranusjr.com/">MacDown</a>就出现了，它免费而且开源，与Mou的体验类似，其实它是参考了Mou也是受Mou启发而开发的。速度相当不错。</p>

<h2>One more thing&hellip;</h2>

<p>Octopress的<a href="http://octopress.org/">新版本</a>正在紧锣密鼓的开发，相传会有质的改变，喜欢像写代码一样写作的人可以期待与关注。</p>

<h2>参考</h2>

<ul>
<li><a href="http://diufanshu.github.io/blog/2015/01/03/you-guan-bo-ke-dao-jia-zai-su-du/">有关博客的加载速度</a></li>
<li><a href="http://www.jianshu.com/p/6c157af09e84">Mac 下两款 Markdown 编辑器 Mou/MacDown 大 PK</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从手机丢失看数据安全]]></title>
    <link href="http://toughcoder.net/blog/2015/01/30/security-concerns-after-phone-stollen/"/>
    <updated>2015-01-30T21:30:39+08:00</updated>
    <id>http://toughcoder.net/blog/2015/01/30/security-concerns-after-phone-stollen</id>
    <content type="html"><![CDATA[<p>手机在现代生活中扮演重要角色，里面有大量的隐私和数据，手机银行，支付宝等都能操作个人的财产，所以手机的安全也越来越重要，一旦手机丢失，造成的不仅仅是一部手机的损失，还可能造成隐私的泄露，重要数据的丢失以及财产的损失。</p>

<h2>手机丢失后应该做的事情</h2>

<p>2015年1月28日下班，晚上七点左右在挤公交车，可能上车时，手机（红米Note）被偷，由于平日里都是骑自行车上下班，只是偶尔遇到不好的天气才会坐公交，刚好那天是2015年的第一场雪，下了一天多没停，不方便骑车，所以就坐公交，正值下班时人又多又挤，估计是上车时被小偷钻了空子。</p>

<p><a href=""><img src="http://cdn.techpatio.com/wp-content/uploads/2012/12/cellphone-lock-safety-security.jpg" title="auto auto" ></a></p>

<p>先是打了个电话，确认手机的状态，因为也有可能是忘在公司了。电话关机，可以确认被偷。然后马上采取安全补救措施：</p>

<!-- more -->


<ol>
<li>先冻结支付宝
   这个是最关键的一个，因为支付宝有钱，支付宝也关联了很多银行卡，所以要第一时间处理它。具体策略就是：

<ol>
<li>先取消无线支付功能，这个会关闭手机平板等支付功能，方法是登录网页支付宝，支付方式，关闭无线支付</li>
<li>修改登录密码，并且修改支付密码</li>
</ol>
</li>
<li>再冻结微信
   微信也很关键进入到110.qq.com冻结微信帐号，如果已关联QQ，可以用QQ号来冻结，如果手机卡已重新办理，可以用手机号冻结。不过这里要说一下，手机刚丢失，肯定没有办法用手机来冻结，所以一般是用QQ号。但是也有一些情况：1. 你要把QQ号关联到微信。2. 就是新版本的QQ有移动锁定功能，而且默认开启，也就是说你在电脑上还无法登录QQ。这时就相当被动了。从这里也可以看出移动QQ锁定电脑登录这个功能是多么的不好。相对来说手机要比电脑容易丢失，一旦丢失，电脑上就无法登录QQ，这是多么悲剧的事情。</li>
<li>冻结QQ
   先要改密码，不过改QQ密码要手机短信验证，对于手机丢失，这又是一个大悲剧。不光是QQ，很多帐户都要有手机短信验证来修改密码。</li>
<li>打电话给运营商让号码停机
   这个也要越快越好，打10086（我是移动的号码），按指引停掉手机，无需人工，自动可完成。</li>
<li>修改所有的手机上安装应用的密码
   首先是跟钱有关的应用，如银行客户端，股票，基金 等等，优先处理。
 然后是重要社交帐户，然后是笔记帐户，因为笔记里可能有重要的信息</li>
<li>发消息给亲人朋友同事，注意安全
   通过其他方式了，比如QQ或者用别的电话</li>
<li>查找手机
   比如苹果或者小米之类的用户可以用查找手机来找手机，不过希望不大。如果是聪明的小偷，得手后第一件事就是关机，扔SIM卡，扣掉电池。偷我手机的小偷应该 就是惯贼。找不到，确定被偷了，就擦除数据,但是查找手机与擦除数据都需要手机处于可用状态，因为小米的方式就是向手机发送特殊内容的短信，查找以及擦除数据的指令就是短信内容。</li>
</ol>


<p>以上安全措施都做完后，就报警。不指望能找回手机，只求能惩治一下猖狂的小偷。不过一般都没什么用处。只能是自己多加小心，保护好自己的财产。</p>

<h2>评价各大重量级应用对安全的保护</h2>

<h3>支付宝</h3>

<p>支付宝做的还蛮赞的，在网页版本能控制手机端的支付，这个很重要，而且也合理。毕竟手机可能丢，而网页在哪里都能登录，无所谓丢与不丢的问题，所以网页应该 是最根本最保险的，并且能控制无线的支付方式。另外，支付宝也有手势密码功能，这个也能在一定程度上防止财产受损，为补救争取更多时间。</p>

<h3>腾讯</h3>

<p>腾讯做的就不太好，首先它鼓励手机QQ锁定PC和WEB的登录，所谓的安全，让手机QQ扫二维码来登录PC，这个太弱了，而且有问题，一旦手机丢失PC端都无法登录，也就很难修改密码和冻结帐户。这会让人很被动。很不幸的是新版本QQ还在鼓励启用这个功能。
微信也是如此，提供的冻结功能，必须要QQ或者手机验证来辅助，这也会影响冻结帐户的速度，手机刚丢，手机验证用不了，有上面的问题QQ也用不了，这就叫天天不应，叫地地不灵了。另外，QQ和微信都没有启动密码，或者进入客户端的密码，这也会让QQ和微信更容易产生损失。</p>

<h3>其他应用：淘宝，百度等</h3>

<p>另外还有很多的帐户比如百度帐户，银行客户端帐户和淘宝帐户等，修改密码也需要手机验证，只能等手机卡重新办理后才能修改。</p>

<h3>应用的安全策略</h3>

<p>可以看出业务的发起点对安全的依赖也不一样，支付宝起源于PC网页，后有支付宝钱包，所以，最后的防线，或者说最高级的控制中心是在PC网页，因此，一旦手机丢了，没关系，上PC在网页可以关掉无线支付，所以安全性较高。</p>

<p>而微信则不一样，它起源于手机，后有PC端和WEB端，所以最高级的控制中心是在手机应用上，这样就不方便了，一旦手机丢失很难把帐户锁定，于是腾讯专门有<a href="http://110.qq.com">110.qq.com</a>来处理帐户的冻结。如上面说微信的PC上是弱端，所以微信的冻结必须依赖于外部帐号，这会让一部分用户无法进行冻结，假如用户没有绑定QQ号，那就只能等死。</p>

<p>而QQ的做法却很让人难受，手机丢失，无法立即通过手机号来冻结微信，那么只剩下QQ号，前提是要绑定QQ号（这是一个坑），所以你必须在PC上登录PC上的QQ，但手机QQ有一个非常二的功能就是锁定PC的登录，话说为了安全，但这种情况下就会造成PC上无法登录QQ。这个功能太二了，QQ起源于PC，所以应该PC上有最高控制权，不应试让后者（手机端）有最高的控制权。更加二的是，解冻微信需要修改QQ密码，而修改QQ密码又需要手机短信验证码，所以直到手机卡补办前，很多密码还是改不了。</p>

<p>这次手机被盗，由于小偷目的在于手机，且是惯贼，补救也及时，没有造成额外的财产损失和其他损失。</p>

<h3>移动应用如何设计安全措施</h3>

<p>常规的帐户补救措施比如手机验证码，等方法就目前来讲都还可以接受，但是必须要为手机丢失这种情况做相应的替代措施。
如果太依赖于手机短信验证码，那么安全隐患也大，一旦手机丢失，用户就只能等死。所以必须要有替代方案，就是一定要有PC端的登录方式和PC端的冻结和解救帐户的方式，比如邮箱验证，密保问题等方式。这是一个相互依赖的过程。PC端可能需要手机短信验证码来做身份验证，但是反过来，手机上的帐户在PC的帮忙下也必须能够解救。</p>

<h2>提高安全意识，加强对数据的保护</h2>

<p>但是为了防止再次损失，要提高安全意识：</p>

<ul>
<li>要保护好手机，尽量放在裤子前面，不要放在外衣的口袋中。人多的时候比如公交站地铁等，最好把手机放手里。但有时提东西，没办法。</li>
<li><p>手机要做好安全防范，简单来说就是多设密码：</p>

<p>  # 解锁一定要开，最好用图案，Android手机都支持图案，设置的不要太简单</p>

<p>  # 重要应用，比如支付宝等要开启应用启动密码，为了安全，所有支持进入 密码的应用都要把它开启，不要怕麻烦，因为手机一旦丢失，麻烦更大。</p>

<p>  # 另外，各种银行的客户端最好不要安装，因为银行客户端的安全措施可能没那么好，所以一旦丢失，很容易造成损失。</p></li>
<li>还有，手机里不要存放重要文件，重要文件还是用电脑来存放。手机里的文件，也最好备份到云端，以防止丢失。重要的帐户和密码也最好不要使用手机短信，微信或者起手机QQ之类的来存放。</li>
<li>联系人尽量用名字，不要用老爸，老妈，老婆，老公之类的，反正这些人你也分得清。试想小偷得手后给老爸发一短信要五千块，这怎么办？</li>
<li>另外，就是要定期更新所有网络帐户的密码。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[训服你的Mac]]></title>
    <link href="http://toughcoder.net/blog/2014/11/13/tame-mac/"/>
    <updated>2014-11-13T22:15:58+08:00</updated>
    <id>http://toughcoder.net/blog/2014/11/13/tame-mac</id>
    <content type="html"><![CDATA[<p>天下武功唯快不破，提升效率是提升战斗力的唯一途径，而一个舒适且高效的开发环境是保证效率的重要方面，对于习惯了Windows和Linux的人来说，习惯使用Mac还是需要一定的时间的，这是就总结一些，如何配置并习惯Mac。</p>

<p><a href=""><img src="http://applethis.com/wp-content/uploads/2012/06/Apple-OS-X.jpg"></a></p>

<!-- more -->


<h2>Mac上面的常用快捷键</h2>

<p>在Windows上面有一些常用的快捷键，比如像Ctrl+W, Ctrl+F等等，还是非常有用的。在Mac上很多快捷键都是CMD键加上其他键组合的（如果是虚拟机的话，就是Windows的那个键）。</p>

<ul>
<li>CMD+R（先按CMD，再按r键）&ndash; 刷新Safari当前页，与Windows上的F5一样</li>
<li>CMD+UP或者HOME&ndash;滚动网面到最上端</li>
<li>CMD+DOWN或者END&ndash;滚动网页到最下面</li>
<li>CMD + LEFT &ndash; 把光标跳到行首，这个在编辑时常用</li>
<li>CMD + RIGHT &ndash; 把光标跳到行尾</li>
<li>CMD + W &ndash; 关闭当前的TAB</li>
<li>CMD + S &ndash; 保存文档</li>
<li>但是经终端里面的快捷键是跟Linux是一样的，比如Ctrl+W是删除掉一个字, Ctrl+C终止一个进程</li>
</ul>


<h2>配置终端</h2>

<p>对于开发者来讲，命令行始终都是一个非常好的工具，无论是什么平台，虽然苹果以GUI著称，但是命令行还是很有用处。Mac的Shell默认是bash，因为它是Unix的一个分支，所以使用起来跟Ubuntu几乎一样，常用的命令，常见的配置完全一样。</p>

<p>但是默认的终端很难看，也不好用，需要一些配置，打开终端的Preferences，选择一个Profile，然后进行一些颜色，字体，大小可以按照自己的风格来，在Shell一栏的“When the shell exits:”选择Close if the shell exited cleanly。然后，Prompt before closing选择Only if there are processes other than the login shell and …</p>

<p>安装XCode时，一定要把命令行工具集也都安装上。</p>

<h3>给终端配色</h3>

<p>在$HOME目录下，编辑.bash_profile文件，如果没有就自己创建一个，在里面最下面输入：</p>

<pre><code class="bash">export CLICOLOR=1
export LSCOLORS=GxFxCxDxBxegedabagaced
</code></pre>

<p>具体这是啥意思，可以参考<a href="http://osxdaily.com/2012/02/21/add-color-to-the-terminal-in-mac-os-x/">这篇文章</a></p>

<h3>添加alias</h3>

<p>同样，在.bash_profile文件中添加一些自己喜欢的alias</p>

<pre><code class="bash">alias grep='grep -rnIE'
</code></pre>

<h2>配置vim</h2>

<p>默认的Mac带有vim，但是还需要一些配置：</p>

<p>在$HOME下面创建一个.vimrc文件，并在里面输入：</p>

<pre><code class="bash">" An example for a vimrc file.
"
" Maintainer:   Bram Moolenaar &lt;Bram@vim.org&gt;
" Last change:  2011 Apr 15
"
" To use it, copy it to
"     for Unix and OS/2:  ~/.vimrc
"         for Amiga:  s:.vimrc
"  for MS-DOS and Win32:  $VIM\_vimrc
"       for OpenVMS:  sys$login:.vimrc

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

if has("vms")
  set nobackup      " do not keep a backup file, use versions instead
else
  set backup        " keep a backup file
endif
set history=50      " keep 50 lines of command line history
set ruler       " show the cursor position all the time
set showcmd     " display incomplete commands
set incsearch       " do incremental searching

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &amp;guioptions = substitute(&amp;guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap &lt;C-U&gt; &lt;C-G&gt;u&lt;C-U&gt;

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &amp;t_Co &gt; 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") &gt; 1 &amp;&amp; line("'\"") &lt;= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

else

  set autoindent        " always set autoindenting on

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
          \ | wincmd p | diffthis
endif

set nu
set sm
set si
set cindent
set smarttab
set ts=4
set shiftwidth=4
set expandtab
set mouse=a
set nobackup
let g:neocomplcache_enable_at_startup = 1
colorscheme desert
</code></pre>

<p>如果对自带的vim不满意，可以使用<a href="http://code.google.com/p/macvim/">MacVim</a>，这个功能更为强大，且支持GUI操作。</p>

<h2>配置git</h2>

<p>这个就是配置常用的git属性：</p>

<pre><code class="bash">[color]
    diff = true
    status = true
    interactive = auto
    branch = true
[core]
    editor = /usr/bin/vim
    autocrlf = false
    filemode = false
[merge]
    tool = vimdiff
[alias]
    co = checkout
    ci = commit
    st = status
    br = branch
[push]
    default = upstream
</code></pre>

<p>如果你也有使用Mac的一些技巧，请与我分享。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[码农的救赎：使用Github Pages搭建博客]]></title>
    <link href="http://toughcoder.net/blog/2014/10/16/blogging-like-a-hacker-with-github-pages/"/>
    <updated>2014-10-16T22:18:36+08:00</updated>
    <id>http://toughcoder.net/blog/2014/10/16/blogging-like-a-hacker-with-github-pages</id>
    <content type="html"><![CDATA[<p><a href=""><img src="http://pikipity.github.com/images/post/octopress.jpg" title="auto 200px" ></a></p>

<h2>人生若只如初见，都恨太晚</h2>

<p>据说有博客的人比没博客人的薪水要高很多，相传写博客也是一个高手的标配，虽然之前一直有在写（在<a href="http://blog.csdn.net/hitlion2008/">这里</a>），但是孤既不是高手，薪水还比别人少。之前一直在CSDN上面写博客，那是一个不错的社区，里面有些牛人，博客也有不错的流量，也没少参与CSDN举办的活动，获得了几本过时的技术书，但是仍感觉不爽，最痛苦的就是编辑，CSDN的在线编辑器做的不咋地，不太好用，而且经常写着写着就不动了，再刷新就啥都没了，试想下写了一下午的代码，突然死机，再打开什么都没了会是什么心情。后来就在本地写，然后粘到编辑器中，但是格式化又是一个很头疼的事情，经常是写完后要花个把小时来搞格式。再后来就用HTML写，然后把源码粘到编辑框里，也还是有格式的问题。再后来，去年一年都没怎么写，主要的原因还是一直感觉写出来的东西没有太多的干货，一心想憋出个高质量的东西来，但是肺都憋炸了，也没憋出来。</p>

<p>直到，后来发现了Github Pages，大有，人生若只如初见，都恨太晚的感觉。正如有些牛人推荐的那样，像写代码一样写博客，这感觉错不了。再有Markdown虽不如在线编辑器那样直观，但却可以手不离键盘，不动鼠标，正如命令行与GUI的对比那样，这真的是用心为码农准备的良心工具啊（此处省略感慨10000字）。</p>

<!-- more -->


<h2>手把手搭建Github Pages博客</h2>

<p>说了这么多废话，来点实际的吧，下面说说如何一步步的用Github Pages搭建博客。其实这里的东西没有原创，部分是实践中的血和泪，本人不材，用了三四天才发出第一个博客，大部分都是源自网络，如有雷同，纯属拷贝。</p>

<p><strong>Note</strong>：<em>这里的默认平台是指Linux/Unix或者Mac</em></p>

<h3>必备的技术</h3>

<p>别害怕，听起来挺高大上啊，你妹啊，写个博客还需要技术，老子写代码也不过是Google+Copy+Paste。是的，用现成的博客托管，是没有门槛，但是用Github Pages就不一样了。</p>

<ol>
<li>git</li>
<li>markdown</li>
<li>平台命令行的使用，其实就是安装和配置软件包</li>
</ol>


<p>这些都听起来很熟悉吧，是不是天天都用。所以对于码农，玩Github Pages完全不在话下。</p>

<h3>安装基本设施</h3>

<h4>git</h4>

<p>git我就不想说了，我想对于一个码农，如果没有安装git的，请自行Google吧，Linux默认都带有的，对于Mac，安装了XCode后，也会带有。</p>

<h4>Ruby</h4>

<p>我们即将用到的工具都是用Ruby实现的，如果你跟我一样只会些Python，不会Ruby，那么了没有关系，我们只需要安装Ruby，不用写代码。</p>

<ul>
<li>Mac</li>
</ul>


<p>Mac本身带有Ruby，但是版本过低，需要重新安装一个新版本</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install ruby</span></code></pre></td></tr></table></div></figure>
这会安装最版本的Ruby，但还需要手动配置，把新版本的Ruby加入到PATH当中去，用</p>

<pre><code>ruby --version
</code></pre>

<p>来验证，如果输出的是1.9.3以上的版本就Okay了。之后就可以用<em>gem</em>来安装Ruby的包了，gem是跟Python的pip很类似的一个包管理器。安装bundle和bundler:</p>

<pre><code>gem install bundle
gem install bundler
</code></pre>

<p><strong>Note:</strong> <em>安装配置完新版本的Ruby后，一定要重新安装bundle和bundler，否则bundle仍会bundler指向旧版本的Ruby，后面安装会因Ruby的版本不够而失败。</em>
另外，当用gem安装包的时候有时候会出现这个错误：</p>

<blockquote><p>ERROR: While executing gem &hellip; (Gem::RemoteFetcher::FetchError)
Errno::ETIMEDOUT: Operation timed out - connect(2) for &ldquo;s3.amazonaws.com&rdquo; port 443 (<a href="https://api.rubygems.org/specs.4.8.gz">https://api.rubygems.org/specs.4.8.gz</a>)</p></blockquote>

<p>不用多说，你懂得，这是只有在伟大的天朝才会发生的，错误就是连接不上软件库，解决之法就是使用国内的Ruby   gem镜像，详细在<a href="https://ruby.taobao.org/">这里</a></p>

<ul>
<li>Linux(Ubuntu)
同样Ubuntu也带有Ruby但是它的版本也很低，可以用<em>rbenv</em>来安装和配置版本的Ruby:</li>
</ul>


<pre><code>cd
git clone git://github.com/sstephenson/rbenv.git .rbenv
echo 'export PATH="$HOME/.rbenv/bin:$PATH"' &gt;&gt; ~/.bash_profile
echo 'eval "$(rbenv init -)"' &gt;&gt; ~/.bash_profile
git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
source ~/.bash_profile
</code></pre>

<p>之后安装新版的Ruby：</p>

<pre><code>rbenv install 2.1.3
rbenv local 2.1.3
rbenv rehash
</code></pre>

<p>同样，也需要安装新版本的bundle和bundler，如果在安装过程中又出现ruby版本不对（用ruby -v验证）就运行下<strong>rbenv local 2.1.3</strong></p>

<p>到此为止，基础设施就已经有了，可以安装关键的东西了，</p>

<h4>Octopress</h4>

<p>这个就是我们要使用的框架，它是基于<a href="https://jekyllrb.com/">Jekyll</a>的一个静态博客生成框架，Jekyll是一个静态网站生成框架，它有很多功能，也可以直接使用，但是就麻烦得多，很多东西要配置和从头写。<em>Octopress</em>就是基于Jekyll，帮我们把重复性的脏活累活全都干了，把创造性的事情（写博客）留给了我们。</p>

<pre><code>git clone git://github.com/imathis/octopress.git octopress
cd octopress
bundle install
rake install
</code></pre>

<h4>创建Github帐号和Github Pages</h4>

<p>我相信大多数人都已经有了Github帐号了，访问<a href="https://github.com/">Github</a>来注册帐号，然后访问<a href="https://github.io/">Github Pages</a>来创建博客空间，唯一需要注意的是Repo必须是<em>Github帐号</em>.github.io，否则不会起作用。
然后，运行：</p>

<pre><code>rake setup_github_pages
</code></pre>

<p>过程中会要求你输入Github Pages的Repo地址，比如<em>git@github.com:username/username.github.io.git</em>
到此，你的博客就建立好了，运行下:</p>

<pre><code>rake generate
rake preview
</code></pre>

<p>后用浏览器访问<a href="http://localhost:4000">http://localhost:4000</a>。就会看到你的博客了，只不过都是Octopress的默认配置。</p>

<h4>配置你的博客</h4>

<p>用<em>vim</em>或者任意一个文本编辑器打开octopress根目录下的_config.yml文件，把title,subtitle,author都改成你自己的配置，再次preview，看到你的博客了吧。</p>

<h4>添加社交分享</h4>

<p>博客必须要带有社交分享功能，否则会很令人沮丧，这会影响博客的传播。Octopress默认是带有社交分享功能的，比如Twitter, Facebook, Google Plus等，但这些全世界都通用的东西在我大天朝就是不好使。而且我相信多数小牛们还是用中文写，且面向国内猿，所以用国内的社交还是靠谱些，当然对于大牛来说，常写英文，或者面向老外的，可以考虑使用默认的。</p>

<p>网站页的分享有很多第三方的库，这里用<a href="http://www.jiathis.com">jiathis</a></p>

<ol>
<li>在_config.yml中加入<strong>social_share: true</strong></li>
<li>修改sources/_includes/post/sharing.html，增加：</li>
</ol>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{&#37; if site.social_share &#37;}
</span><span class='line'>    {&#37; include post/social_media.html &#37;}
</span><span class='line'>{&#37; endif &#37;}</span></code></pre></td></tr></table></div></figure>
3. 访问<a href="http://www.jiathis.com/">http://www.jiathis.com</a>获取分享的代码，放入新建的文件<strong>source/_includes/post/social_media.html</strong></p>

<h4>添加文章评论功能</h4>

<p>同样，Octopress也默认集成有评论系统<a href="http://disqus.com/">Disqus</a>，这个是国外最大的第三方评论平台，世界都在用，除了我大天朝。这种评论平台的主要功能是帐号不再局限在某一个网站内，同样评论也局限在一个网站内，评论平台提供帐号的管理和评论内容的管理，换句话说，即使不是你的网站的注册用户，只要有评论平台的帐号就能评论你的文章，且评论的内容是保存在评论平台中的。评论平台都可以使用流行的社交账号进行评论，评论还可以转发，回复等。一句话就是评论也变成了一个以用户为中心的社区，而不再是孤立的存在于某个网站之中。</p>

<p>我天朝人民是聪明的，这么好的东西国内肯定有替代品，那就是<a href="http://www.duoshuo.com/">多说</a>。使用多说也很简单：</p>

<ol>
<li>先到多说注册，获取用户名，也就是在多说上添的<em>youname</em>.duoshuo.com中的yourname</li>
<li>在_config.yml中添加</li>
</ol>


<pre><code>duoshuo_comments: true
duoshuo_short_name: yourname
</code></pre>

<ol>
<li>在source/_layouts/post.html中把评论模板加入到你的网页中去</li>
</ol>


<pre><code>｛&amp;#37; if site.duoshuo_short_name and site.duoshuo_comments == true and page.comments == true &amp;#37;｝
  &amp;lt;section&amp;gt;
    &amp;lt;h1&amp;gt;Comments&amp;lt;/h1&amp;gt;
    &amp;lt;div id="comments" aria-live="polite"&amp;gt;｛&amp;#37; include post/duoshuo.html &amp;#37;｝&amp;lt;/div&amp;gt;
  &amp;lt;/section&amp;gt;
｛&amp;#37; endif &amp;#37;｝
</code></pre>

<ol>
<li>创建多说评论代码模板</li>
</ol>


<pre><code>&amp;lt;!-- Duoshuo COMMENT BEGIN --&amp;gt;
&amp;lt;div class="ds-thread"&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;script type="text/javascript"&amp;gt;
    var duoshuoQuery = {short_name: "yourname"};
    (function() {
        var ds = document.createElement('script');
        ds.type = 'text/javascript';
        ds.async = true;
        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';
        ds.charset = 'utf-8';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ds);
    })();
&amp;lt;/script&amp;gt;
&amp;lt;!-- Duoshuo COMMENT END --&amp;gt;
</code></pre>

<h4>写博客</h4>

<ul>
<li>rake new_post[&ldquo;Blog Title&rdquo;]
生成一篇新的博客，用文本编辑器打开生成的文件就可以写博客了</li>
<li>rake generate
生成静态的博客文件，生成的文件在_deploy中</li>
<li>rake preview
在本地预览博客，这与发布到Github Pages后的效果是一样的</li>
<li>rake deploy
这是最后一步，就是把Octopress生成的文件（在_deploy）发布到Github上面去。这里的实际是Octopress根据你的配置用sources中的模板，生成网页（HTML，JavaScript, CSS和资源），再把这些资源推送到yourname.github.io这个Repo中去，然后访问<a href="https://*yourname*.github.io">https://*yourname*.github.io</a> 就能看到你的博客了。</li>
</ul>


<h2>配置独立的域名</h2>

<p>如果你有自己的域名的话，没有话可以去<a href="http://godaddy.com/">godaddy.com</a>或者<a href="http://www.net.cn/">万网（阿里云）</a>去买一个，也就60多块钱，不到一顿酒钱，就能有一个属于你自己的独立的域名，多酷啊！
配置方法也很简单，就是1.告诉Github你的域名是啥； 2. 在你的域名解析时指向Github，具体的：</p>

<ul>
<li> 在sources/下面新建一个叫CNAME的文件，里面只有一行，就是你的域名，如toughcoder.net</li>
<li> 到你的域名管理，新建二个域名解析，A类型，分别指向192.30.252.153和192.30.252.154</li>
<li> 再建一个ANAME解析，指向yourname.github.io</li>
</ul>


<p>过个个把小时就会生效了。</p>

<h2>保存你的代码</h2>

<p>如前所述，rake deploy只是把生成的静态网页推送到了Github的Repo上去，但是你的博客的源码，就是这个octopress文件夹还需要地方保存，所以你可以新建一个Repo来保存源码：</p>

<pre><code>git add .
git ci -s -m "Setup and config blogs for Github Pages"
git remote add myrepo *some public or private repo*
git push myrepo source
</code></pre>

<h2>Markdown编辑器</h2>

<p>因为博客都是用Markdown语法来写的，所以你需要一个良好的Markdown本地编辑器。</p>

<ul>
<li>Linux</li>
</ul>


<p><a href="http://sourceforge.net/p/retext/home/ReText/">retext</a>，用sudo apt-get install retext来安装</p>

<ul>
<li>Mac</li>
</ul>


<p><a href="http://25.io/mou">mou</a></p>

<p>为啥木Windows，孤认为用一堆开源软件搭建博客的你，不应该用Windows。</p>

<h2>Markdown参考</h2>

<p><a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet">Markdown cheat sheet</a></p>

<p><a href="https://daringfireball.net/projects/markdown/">Markdown Tutorial</a></p>

<p>还有些事情需要注意，就是因为你所写的Markdown，同时也会被当作模板被处理，因为要添加和扩展一些其他的模块，比如代码，分享评论等，所以，如果你的文章中有HTML的Tag&lt;>或者模板的符号%（现代的Web开发框架比如Django和Ruby on Rails，都使用此类型的模板用以生成HTML），最好使用HTML的Entity来替代，以免生成最终HTML时出错，比如上面分享和评论的代码块必须把其中的%用&amp;#37;来代替，否则会出错。详细的HTML Entities表格可以参考<a href="http://www.freeformatter.com/html-entities.html">这里</a></p>

<h2>添加About页</h2>

<p>作为一个标准的博客，还是应该有一个About页，来简单的介绍下作者。</p>

<pre><code>rake new_page["about"]
</code></pre>

<p>这会生成一个新文件source/about/index.markdown，这个页面就是介绍页，编辑它，填入你想要的内容。
然后再把它加到导航栏上(navigation bar):</p>

<p>编辑source/_includes/custom/navigation.html，添加一行</p>

<pre><code>  &amp;lt;li&amp;gt;&amp;lt;a href="/about"&amp;gt;About&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
</code></pre>

<p>在侧边栏增加About me：</p>

<ul>
<li>先是在_config.yml中，把custom/aside/about.html添加到<strong>post_asides</strong>中去。</li>
<li>然后再，编辑文件source/_includes/custom/asides/about.html即可，可以发现这是默认就支持的，注意这是HTML而非Markdown</li>
</ul>


<p>从这里可以看出添加一个侧边栏荐并不难，只需要创建一个HTML文件，然后再配置到post_asides中去就可以了。</p>

<h2>SEO</h2>

<p>为了能让搜索引挚更容易的找到你的文章，就需要做一些SEO。其实并不难，Octopress已经提供支持，我们只需要填入一些内容就可以了。主要就是<strong>keywords</strong>和<strong>description</strong>。在生成代码时，这二个字段的内容会被写在HTML的head中的meta里，这里也是搜索引挚抓取的都方。</p>

<p>首先配置网站的keywords和description，编辑_config.yml文件，在最上面填入description和keywords，像这样</p>

<pre><code>keywords: anroid, android development, ios
description: Insights about mobile development
</code></pre>

<p>在每个博客post的头，也填入keywords和description:</p>

<pre><code>---
layout: post
title: "码农的救赎：使用Github Pages搭建博客"
date: 2014-10-16 22:18:36 +0800
comments: true
categories: miscellaneous
keywords: Github IO, octopress, jekyll, ruby, github
description: 使用Github来搭建博客，像写代码一样写博客，用版本控制来管理博客
---
</code></pre>

<h2>把Category加到侧边栏</h2>

<p>先创建Category列表的文件：</p>

<pre><code>&amp;lt;section&amp;gt;
    &amp;lt;h1&amp;gt;Categories&lt;/h1&amp;gt;
    &amp;lt;ul id="categories"&amp;gt;
        {&amp;#37; for category in site.categories &amp;#37;}
            &amp;lt;li class="category"&amp;gt;
                {&amp;#37; capture category_url &amp;#37;}/blog/categories//index.html{&amp;#37; endcapture &amp;#37;}
                &amp;lt;a class="list-group-item {&amp;#37; if category_url == page.url &amp;#37;}active{&amp;#37; endif &amp;#37;}" href=""&amp;gt;&lt;/a&amp;gt;
            &amp;lt;/li&amp;gt;
        {&amp;#37; endfor &amp;#37;}
    &amp;lt;/ul&amp;gt;
&amp;lt;/section&amp;gt;
</code></pre>

<p>然后再在_config.yml中加到post_aside和page_aside中去，就可以了。</p>

<h2>参考文章：</h2>

<ul>
<li><a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/">http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/</a></li>
<li><a href="http://beyondvincent.com/blog/2013/07/27/107-hello-page-of-github/">http://beyondvincent.com/blog/2013/07/27/107-hello-page-of-github/</a></li>
<li><a href="http://havee.me/internet/2013-01/octopress-seo.html">Octopress 的 SEO 优化</a></li>
<li><a href="http://asaf.github.io/blog/2013/07/08/blogging-with-octopress-add-about-page/">Blogging With Octopress: Add About Page</a></li>
<li><a href="http://kaworu.github.io/octostrap3/blog/2013/10/03/category-list-aside/">Category List Aside</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
