<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Effectivejava | 稀有猿诉]]></title>
  <link href="http://toughcoder.net/blog/categories/effectivejava/atom.xml" rel="self"/>
  <link href="http://toughcoder.net/"/>
  <updated>2022-01-19T22:45:38+08:00</updated>
  <id>http://toughcoder.net/</id>
  <author>
    <name><![CDATA[Alex Hilton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[理解Java ThreadLocal]]></title>
    <link href="http://toughcoder.net/blog/2016/11/14/understanding-java-threadlocal/"/>
    <updated>2016-11-14T22:05:18+08:00</updated>
    <id>http://toughcoder.net/blog/2016/11/14/understanding-java-threadlocal</id>
    <content type="html"><![CDATA[<p>ThreadLocal是Java提供的为每个线程存储线程独立的数据的存储方式，也就是说用ThreadLocal来保存的数据，只能被当前线程所访问，其他线程无法访问，因为只有（一个线程）当前线程能够访问，所以它是线程安全的，可以用来存储一些不能被共享的数据。</p>

<p><a href=""><img src="https://img.alicdn.com/imgextra/i1/715978679/TB2htRYbKNOdeFjSZFBXXctzXXa_!!715978679.jpg"></a></p>

<!-- more -->


<h3>基本使用方法</h3>

<p>ThreadLocal使用起来非常的简单，它支持泛型，可以把任意类型的数据放进ThreadLocal，一个ThreadLocal对象只能放一个对象：</p>

<pre><code class="java">ThreadLocal&lt;String&gt; mLocalCEOHolder = new ThreadLocal&lt;&gt;();
ThreadLocal&lt;Integer&gt; mOrdersCountHolder = new ThreadLocal&lt;&gt;();

mLocalCEOHolder.set("Alex Hilton");

String ceo = mLocalCEOHolder.get();

mOrdersCountHolder.set(30249);

int order = mOrdersCountHolder.get();
</code></pre>

<h3>实现原理解析</h3>

<p>就按上面的例子来解析它的实现原理：</p>

<ul>
<li><p>创建ThreadLocal对象</p>

<p> 先来看看它的构造方法：</p></li>
</ul>


<pre><code class="java">/**
 * Creates a thread local variable.
 * @see #withInitial(java.util.function.Supplier)
 */
public ThreadLocal() {
}
</code></pre>

<p>   很不幸，它的构造方法是空的，啥也没干。</p>

<ul>
<li>set方法
再来看下它的set方法:</li>
</ul>


<pre><code class="java">/**
 * Sets the current thread's copy of this thread-local variable
 * to the specified value.  Most subclasses will have no need to
 * override this method, relying solely on the {@link #initialValue}
 * method to set the values of thread-locals.
 *
 * @param value the value to be stored in the current thread's copy of
 *        this thread-local.
 */
public void set(T value) {
    Thread t = Thread.currentThread();
    ThreadLocalMap map = getMap(t);
    if (map != null)
        map.set(this, value);
    else
        createMap(t, value);
}
</code></pre>

<p>这里先获取当前的调用线程，从其中获取一个叫做ThreadLocalMap的东西，如果它不为空就把当前对象this（ThreadLocal对象）作为key，把要存放的值作为value，放到这个ThreadLocalMap里面，如果map为空就先创建再存放。由此可以猜出ThreadLocalMap是一个Map型的数据结构，接着研究getMap和createMap，后面再详细说ThreadLocalMap。</p>

<pre><code class="java">/**
 * Get the map associated with a ThreadLocal. Overridden in
 * InheritableThreadLocal.
 *
 * @param  t the current thread
 * @return the map
 */
ThreadLocalMap getMap(Thread t) {
    return t.threadLocals;
}


/**
 * Create the map associated with a ThreadLocal. Overridden in
 * InheritableThreadLocal.
 *
 * @param t the current thread
 * @param firstValue value for the initial entry of the map
 */
void createMap(Thread t, T firstValue) {
    t.threadLocals = new ThreadLocalMap(this, firstValue);
}
</code></pre>

<p>getMap比较简单，它返回Thread对象的域对象threadLocal。createMap也很简单创建一个ThreadLocalMap对象，然后把它赋值给Thread对象的域变量。</p>

<ul>
<li>get方法
再来看看get方法：</li>
</ul>


<pre><code class="java">/**
 * Returns the value in the current thread's copy of this
 * thread-local variable.  If the variable has no value for the
 * current thread, it is first initialized to the value returned
 * by an invocation of the {@link #initialValue} method.
 *
 * @return the current thread's value of this thread-local
 */
public T get() {
    Thread t = Thread.currentThread();
    ThreadLocalMap map = getMap(t);
    if (map != null) {
        ThreadLocalMap.Entry e = map.getEntry(this);
        if (e != null) {
            @SuppressWarnings("unchecked")
            T result = (T)e.value;
            return result;
         }
    }
    return setInitialValue();
}

/**
 * Variant of set() to establish initialValue. Used instead
 * of set() in case user has overridden the set() method.
 *
 * @return the initial value
 */
private T setInitialValue() {
    T value = initialValue();
    Thread t = Thread.currentThread();
    ThreadLocalMap map = getMap(t);
    if (map != null)
        map.set(this, value);
    else
        createMap(t, value);
    return value;
}
</code></pre>

<p>get方法与set方法类似，同样是从当前线程取其map，从其中以当前TheadLocal对象为key来查找值，如果找到了，就返回。如果map为空，或者没找到怎么办。就用setInitialValue来初始化线程的map对象，这个与set方法是一样的，只不过用空值(null)。</p>

<ul>
<li>ThreadLocalMap对象</li>
</ul>


<pre><code class="java">/**
 * ThreadLocalMap is a customized hash map suitable only for
 * maintaining thread local values. No operations are exported
 * outside of the ThreadLocal class. The class is package private to
 * allow declaration of fields in class Thread.  To help deal with
 * very large and long-lived usages, the hash table entries use
 * WeakReferences for keys. However, since reference queues are not
 * used, stale entries are guaranteed to be removed only when
 * the table starts running out of space.
 */
static class ThreadLocalMap {

    /**
     * The entries in this hash map extend WeakReference, using
     * its main ref field as the key (which is always a
     * ThreadLocal object).  Note that null keys (i.e. entry.get()
     * == null) mean that the key is no longer referenced, so the
     * entry can be expunged from table.  Such entries are referred to
     * as "stale entries" in the code that follows.
     */
    static class Entry extends WeakReference&lt;ThreadLocal&lt;?&gt;&gt; {
        /** The value associated with this ThreadLocal. */
        Object value;

        Entry(ThreadLocal&lt;?&gt; k, Object v) {
            super(k);
            value = v;
        }
    }

    /**
     * The initial capacity -- MUST be a power of two.
     */
    private static final int INITIAL_CAPACITY = 16;

    /**
     * The table, resized as necessary.
     * table.length MUST always be a power of two.
     */
    private Entry[] table;

    /* other codes ... */
}
</code></pre>

<p>完整的就不贴了，大家可以自己去查看。简单来理解，其实它就是一个HashMap，key是对ThreadLocal对象的WeakReference，value是我们放入ThreadLocal的对象。</p>

<p>到这里可以总结一下ThreadLocal的原理了：数据结构是存储在线程对象里的一个Map对象中，key是ThreadLocal对象的WeakReference，值就是我们想要存放的对象。</p>

<p><strong>注意</strong>：下面提到的Map的意思是Thread#threadLocals，也就是ThreadLocalMap对象</p>

<h3>核心所在</h3>

<p>网上面很多关于ThreadLocal的文章（如<a href="http://droidyue.com/blog/2016/03/13/learning-threadlocal-in-java/">这个</a>和<a href="http://www.cnblogs.com/dolphin0520/p/3920407.html">这个</a>）都没有讲清楚，到底它是用什么方法来保证只有当前线程才能访问，它们说的是都是它的数据结构，这个上面已经说了。但是光有一个Map，就够了吗？Thread对象有一个Map用来存储ThreadLocal数据，但是假如Thread有公开获取此Map的方法，那跟我们使用的共享变量有什么区别？</p>

<p>ThreadLocal的真正核心在于它取的<strong>当前线程</strong>的Map：</p>

<ul>
<li>每次从ThreadLocal取数据也好，放数据也好，目标的Map都是当前的线程的Map</li>
<li>线程的Map是包访问权限</li>
<li>放数据也好，取数据也好都是从当前线程的Map里存和取</li>
</ul>


<p>所以，ThreadLocal最关键的就是由Thread.currentThread()来保证当前线程的。线程到底是什么?线程简单来理解就是一个run方法，或者说一堆方法调用，它是一个时序的概念，是一堆按某种顺序运行的指令的集合。所以，当你调用ThreadLocal#set或者ThreadLocal#get时，在set和get方法实现里面会调用Thread.currentThread来取得调用栈所在的线程&mdash;也就是当前线程，这也就保证了，一个线程只能获取自己的Map。</p>

<p>另外，Map必须得与每个线程对象绑定，但又由于这个域是package作用域，只有同一个package的才能访问，所以只能从ThreadLocal里操作此Map也是相对安全的，也就是说想操作此Map只能通过ThreadLocal。当然了，如果能Hack一下，生成一个与Thread在同一个package的对象，就能够直接操作Map，也就能打破ThreadLocal的封装了，这时Map就变成可共享的了，也就失去了线程独有的特性。</p>

<h3>典型应用</h3>

<p>最典型的应用要数<a href="https://developer.android.com/reference/android/os/Looper.html">Looper</a>类的实现。</p>

<p>Looper的作用是帮助线程创建并运行一个消息循环（MessageQueue），很显然，一个线程有且只能有一个，那么ThreadLocal是最佳的方案。</p>

<h3>Android当中的实现</h3>

<p>与标准的Java的实现原理是一样的，都是把Map当作Thread的一个域，package作用域，ThreadLocal作为key, 里面的值作value。</p>

<p>只不过Map的具体实现略有不同。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[理解 Java 关键字 Final]]></title>
    <link href="http://toughcoder.net/blog/2016/11/12/understanding-java-keyword-final/"/>
    <updated>2016-11-12T14:40:51+08:00</updated>
    <id>http://toughcoder.net/blog/2016/11/12/understanding-java-keyword-final</id>
    <content type="html"><![CDATA[<h2>final可以用来干什么</h2>

<p>final是Java中非常常见的一个关键字，可以说每天都在使用它，虽然常见，但却也不见得都那么显而易见，今天就来研究一下final，以加深对它的理解和更合理的运用。</p>

<p><a href=""><img src="https://img.alicdn.com/imgextra/i1/715978679/TB2FJBGdyGO.eBjSZFEXXcy9VXa_!!715978679.jpeg"></a></p>

<!-- more -->


<h3>修饰类</h3>

<p>当一个类不想被继承时，就可以用final来修饰。</p>

<h3>修饰方法</h3>

<p>当一个方法不想被子类覆写(Override)时，可以用final来修饰。另外一方面，把方法用final来修饰也有一定的性能提升上的帮助，因为虚拟机知道它不会被覆写，所以可以以更简单的方式来处理。</p>

<p>private的方法，默认都会被编译器加上final.</p>

<h3>修饰变量</h3>

<p>被final修饰的变量只能赋值一次，之后不能再被修改。如：</p>

<pre><code class="java">final int a = 10;
a = 4; // compilation error
</code></pre>

<p>需要注意的是，这里说的是只能赋值一次，并不意味着，非要在声明变量时直接初始化，比如，下面的代码也是完全合法的：</p>

<pre><code class="java">final int a;
if (foo()) {
    a = 3;
} else {
    a = 4;
}
</code></pre>

<h3>修饰域变量</h3>

<p>域变量也是变量，所以用final来修饰的第一个作用就是赋值后，不能再修改变量的值，比如:</p>

<pre><code class="java">final int a = 10;
final Object b = new Object();
</code></pre>

<p>对于基本类型来说，就是变量值不能再被修改；对于引用来说，就是不能再让其指向其他对象或者null。</p>

<p>但对于域变量，声明为final的域变量必须在声明时初始化，或者在构造方法中初始化，否则会有编译错误。</p>

<p>此外，声明为final的域变量还有内存模型上的语义，下面详细说</p>

<h3>内存模型的作用&ndash;防止<a href="https://shipilev.net/blog/2014/safe-public-construction/">变量从构造方法中逸出</a></h3>

<p>这个主要是针对被final修饰的域变量，虚拟机会有禁止指令重排的保证：</p>

<ul>
<li>在构造方法内对一个final变量的写入，与随后这个被构造对象的引用赋值给一个引用变量，这二个顺序不改变，final变量的写入一定要早于对象引用的赋值。</li>
</ul>


<p>什么意思呢？在多线程环境下，域变量是有可能从构造方法中逸出的，也就是说线程有可能读到还没有被构造方法初始化的域变量的值。比如：</p>

<pre><code class="java">class Foo {
    int a;

    Foo(int v) {
        a = v;
    }
}
</code></pre>

<p>如果是在多线程环境下，一个线程A在创建Foo的对象，另一个线程B在读对象的a的值，则B是有可能读到未正确初始化a的值（默认初始值0）。这就是域变量从构造方法中逸出。</p>

<p>关键字final可以禁止虚拟机指令重排，从而保证了构造方法执行完毕前final修饰的变量一定是初始化过了的。</p>

<p>这部分可以参考<a href="http://www.infoq.com/cn/articles/java-memory-model-6">深入理解Java内存模型（六）——final</a>，讲解的非常详细。</p>

<h3>匿名内部类使用外部变量时为何要强制使用final修饰</h3>

<p>这个大家肯定都习以为常了，比如：</p>

<pre><code class="java">private void initViews() {
    final int a = 3; // Compilation error if remove final
    btn.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(View view) {
            if (a &gt; 1) {
                // volala
            }
        }
    }
}
</code></pre>

<p>那么，有没有想过为什么？而像其他支持完整闭包的语言如JavaScript，Python等，是没有这等限制的。究其原因，是Java对闭包支持不够完整，或者说它并不是像动态语言那样的完整闭包。对于匿名内部类来说，编译器会创建一个命名类(OutClass$1之类的)，然后把匿名类所在的<a href="https://en.wikipedia.org/wiki/Closure_(computer_programming">能捕获的变量</a>)，以构造参数的形式传递给内部类使用，这样一样，外部的变量与内部类看到的变量是不同的，虽然它们的值是相同的，因此，如果再允许外部修改这些变量，或者内部类里面修改这些变量，都会造成数据的不一致性（因为它们是不同的变量），所以Java强制要求匿名内部类访问的外部变量要加上final来修饰。</p>

<p>对于其他语言，匿名内部类，持有的是外部变量的一个包装的引用(wrapper reference)，这可以能看不懂，但是理解起来就是内部类能直接访问外部变量，外部与闭包内部访问的是同一个变量，因此外部修改了，内部能看到变化，内部修改了，外部也能看到变化。</p>

<p>一句话总结就是，Java内部类与外部持有的是值相同的不同的变量；其他支持闭包的语言则持有的是相同的变量。</p>

<h3>建议能使用final的地方就加上final修饰</h3>

<p>最后来聊聊，啥时候应该用final呢？孤的建议(以及众多大师的建议)就是能多用就多用，除非不能用final，否则就用。原因，有这么几条：</p>

<ul>
<li><p>域变量尽可能加上final</p>

<p>这个原因比较明确，前面也提到了，在多线程条件下，会有很大的优势。尽可能加上final来修饰域变量，甚至用<a href="https://en.wikipedia.org/wiki/Immutable_object">Immutable Object</a>，可以省去构造时的多线程同步。</p>

<p>多线程最大的麻烦是状态同步，啥是状态？其实就是共享数据，域变量就是共享数据，所以，如果共享数据都是不可变的(Immutable)，那么自然就没有了同步上的麻烦。</p></li>
<li><p>final类和方法能提升性能</p>

<p>正常的类和方法，虚拟机需要为了继承和方法覆写而做一次准备，如果加上了final，虚拟机知道它不会被继承或者覆写，那么就可以做一些优化。虽然，这并不显著，但是还是可以提升一些性能的。</p></li>
<li><p>final变量能提升可读性</p>

<p>无论是域变量还是本地变量，加上了final修饰，程序的维护者就知道了，这个变量的值不会再改变，这无疑会大大增加可读性。</p></li>
</ul>


<h3>参考资料</h3>

<ul>
<li><a href="http://www.cnblogs.com/dolphin0520/p/3736238.html">浅析Java中的final关键字</a></li>
<li><a href="http://www.infoq.com/cn/articles/java-memory-model-6">深入理解Java内存模型（六）——final</a></li>
<li><a href="http://cuipengfei.me/blog/2013/06/22/why-does-it-have-to-be-final/">为什么必须是final的呢？</a></li>
<li><a href="https://www.zhihu.com/question/21395848">java为什么匿名内部类的参数引用时final？</a></li>
<li><a href="http://www.javamex.com/tutorials/synchronization_final.shtml">Thread-safety with the Java final keyword</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[理解Java关键字volatile]]></title>
    <link href="http://toughcoder.net/blog/2016/10/15/understanding-java-keyword-volatile/"/>
    <updated>2016-10-15T17:40:40+08:00</updated>
    <id>http://toughcoder.net/blog/2016/10/15/understanding-java-keyword-volatile</id>
    <content type="html"><![CDATA[<p>在Java中，关键字<a href="https://en.wikipedia.org/wiki/Volatile_(computer_programming)">volatile</a>是除同步锁以外，另一个同步机制，它使用起来比锁要简单方便，但是却很容易被忽略，或者被误用。这篇文章就来详细讲解一下volatile它的作用，它的原理以及如何正确的使用它。</p>

<p><a href=""><img src="https://img.alicdn.com/imgextra/i4/715978679/TB2lcgxdhaK.eBjSZFAXXczFXXa_!!715978679.jpg"></a></p>

<!-- more -->


<h2>volatile的定义</h2>

<p>这个引用<a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.3.1.4">JSR</a>中的定义：</p>

<blockquote><p>The Java programming language allows threads to access shared variables (§17.1). As a rule, to ensure that shared variables are consistently and reliably updated, a thread should ensure that it has exclusive use of such variables by obtaining a lock that, conventionally, enforces mutual exclusion for those shared variables.</p>

<p>The Java programming language provides a second mechanism, volatile fields, that is more convenient than locking for some purposes.</p>

<p>A field may be declared volatile, in which case the Java Memory Model ensures that all threads see a consistent value for the variable (§17.4).</p></blockquote>

<p>简单的翻译一下：</p>

<blockquote><p>Java编程语言中允许线程访问共享变量。为了确保共享变量能被一致地和可靠的更新，线程必须确保它是排他性的使用此共享变量，通常都是获得对这些共享变量强制排他性的同步锁。</p>

<p>Java编程语言提供了另一种机制，volatile域变量，对于某些场景的使用这要更加的方便。</p>

<p>可以把变量声明为volatile，以让Java内存模型来保证所有线程都能看到这个变量的同一个值。</p></blockquote>

<h2>volatile的作用</h2>

<ul>
<li><p>保证变量的可见性</p>

<p>  volatile关键字的作用就是保证共享变量的<strong>可见性</strong>。什么是可见性呢，就是一个线程读变量，总是能读到它在内存中的最新的值，也就是说不同的线程看到的一个变量的值是相同的。CPU都是有行缓存的，volatile能让行缓存无效，因此能读到内存中最新的值。</p></li>
<li><p>保证赋值操作的原子性</p>

<p>原子性就是不能被线程调度打断的操作，是线程安全的操作，对于原子性操作，即使在多线程环境下，也不用担心线程安全问题或者数据不一致的问题。有些变量的赋值本身就是原子性的，比如对boolean，对int的赋值，但是像对于long或者double则不一定，如果是32位的处理器，对于64位的变量的操作可能会被分解成为二个步骤：高32位和低32位，由此可能会发生线程切换，从而导致线程不安全。如果变量声明为volatile，那么虚拟机会保证赋值是原子的，是不可被打断的。</p></li>
<li><p>禁止指令重排</p>

<p>  正常情况下，虚拟机会对指令进行重排，当然是在不影响程序结果的正确性的前提下。volatile能够在一定程度上禁止虚拟机进行指令重排。还有就是对于volatile变量的写操作，保证是在读操作之前完成，假设线程A来读变量，刚好线程B正在写变量，那么虚拟机会保证写在读之前完成。
  比如：</p></li>
</ul>


<pre><code class="java">private volatile boolean flag;

public void setFlag(boolean flag) {
    this.flag = flag;
}

public void getFlag() {
    return flag;
}
</code></pre>

<p>假设线程A来调用setFlag(true)，线程B同时来调用getFlag，对于一般的变量，是无法保证B能读到A设置的值的，因为它们执行的顺序是未知的。但是像上面，加上volatile修饰以后，虚拟机会保证，线程A的写操作在线程B的读操作之前完成，换句话，B能读到最新的值。当然了，用锁机制也能达到同样的效果，比如在方法前面都加上synchronized关键字，但是性能会远不如使用volatile。</p>

<h2>volatile的典型使用场景</h2>

<h3>多线程情况下的标志位</h3>

<p>基于它的作用，不难找到使用它的理想场景：</p>

<ul>
<li>读操作，多于写操作</li>
<li>写操作，不依赖于变量的当前值，也就是说要是纯赋值操作</li>
<li>只需要读取的值，不需要等待某一特定的值</li>
</ul>


<p>比如，有一个检查新版本的按扭，点击时会发起去检查新版本，因为检查新版本涉及网络请求，可能会比较耗时，所以需要放在单独的线程中去做。为了避免多次同时触发检查请求，做一个限制：上一个请求没有完成时，再次点击无效。这时就可以用volatile来做个标志位，伪代码如下：</p>

<pre><code class="java">private volatile boolean checkUpdateFinished = true;

public void onCheckUpdate(View view) {
    if (!checkUpdateFinished) {
        return;
    }
    checkUpdate();
}

private void checkUpdate() {
    checkUpdateFinished = false;
    new Thread(new Runnable() {
        @Override
        public void run() {
            doCheckUpdate();
            checkUpdateFinished = true;
        }
    }).start();
}
</code></pre>

<h3>CAS无锁同步的变量声明</h3>

<p><a href="https://en.wikipedia.org/wiki/Compare-and-swap">CAS（Compare And Swap）</a>是一种无锁同步的算法，它涉及变量的3个值，当前值，旧的期望值以及新的期望值，它的原理是当且仅当当前值与旧的期望值一致时，才把新值赋给变量，否则什么都不做：</p>

<pre><code class="java">private volatile int a;

do {
   old = 3;
   expected = 5;
} while (compareAndSwap(a, 3, 5);

boolean compareAndSwap(int a, int old, int expected) {
    if (a == old) {
        a = expected;
        return true;
    }
    return false;
}
</code></pre>

<p>当然，具体的compare and swap不是这么实现的，实际是要直接使用处理的指令CMPXCHG(Compare and Exchange)来做具体的CAS。
为了保证可见性，CAS中的变量必须都用volatile来修饰。</p>

<h2>volatile的内存原理</h2>

<p>知道了volatile有什么用，怎么用以后，可以了解的更深一点，以加深理解。但要搞懂，就必须先要搞懂它的背景以及背景的背景：</p>

<h3>并发的基本概念</h3>

<ul>
<li><p>原子性</p>

<p>一个或者多个操作（赋值也好，运算也好）不能被线程调度打断，要么一次性执行完，要么就不执行。</p></li>
<li><p>可见性</p>

<p>现代处理器是多核心的，或者多CPU的，但是主存（通常意义上的操作系统内存，或者物理内存）却是在CPU之间共享的。多核心处理的优势在于，从机器级别支持多线程并发，而且为了弥补主存与CPU核心之间的速度差异，便有了CPU核心缓存，因此，每个CPU核心（或者说每个线程）是有独立的内存的。这样就带来了可见性的问题，同一个变量c，A线程操作的是c在A线程的缓存中的值，B操作的是c在B的缓存中值，也就是说最新的变量的值对于其他线程是不可见的，这就有了可见性的问题。</p></li>
<li><p>有序性</p>

<p>对于单线程来说，程序的执行顺序就是按照代码的书写顺序，从上到下，从左到右(分号分隔写在同一行时)。但是多线程情况就不一定了，线程调度器随时可能打断某一程，执行其他线程。这就导致了，程序并不是按照预期的顺序执行的，导致结果跟预期不一致。
<strong>注意</strong>：这里的顺序，并不是严格的指令执行的顺序，而且从结果正确性的角度来看的，比如：</p></li>
</ul>


<pre><code class="java">  int a = 10;
  int b = a + 1;
</code></pre>

<p>  这段代码的有序性的意思是：当执行到第二条语句，只要a的值是10就可以了，至于a = 10它究竟是否是在下面语句前执行，并不关心。但是，除了a = 10语句外，没有其他的方式能让a变成10，所以，肯定是执行了语句了才能把a变成10。说起来比较绕，这个例子也过于简单。但是可以这么简单的理解为：单线程情况下，程序是按书写的顺序来执行的，更准确的说法是程序员预期的顺序来执行的。但多线程会打破这种有序性。</p>

<p>  <strong>注意</strong>：这里我们不考虑<a href="https://en.wikipedia.org/wiki/ABA_problem">ABA问题</a>。</p>

<h3>内存模型的基本概念</h3>

<h4>对内存模型的理解</h4>

<p>什么是<a href="https://en.wikipedia.org/wiki/Java_memory_model">内存模型</a>呢？就是程序运行起来时，内存里面的样子。程序包括变量，对象，数据，指令等，程序动起来后又包括变量如何赋值，数据如何读取，指令按什么顺序执行等。其实，程序运行时，内存是什么样子，通常取决于操作系统，也就是说是由操作系统决定的。Java是跨平台的语言，其靠着“Compile once, run anywhere&#8221;的大旗，拮杆而起，打下一片天下，如今稳坐头把交椅。那么，想要跨平台，它就要屏蔽各个操作系统平台和硬件平台的差异，因此它有虚拟机，虚拟机实质是一对操作系统的一个抽象，把差异进行屏蔽，从而对语言本身来说，所有操作系统就都是一样的了。内存模型，也就是虚拟机对运行时的一些约定，或者叫做强制规定，比如变量的操作，数据的读取，指令执行顺序等。都做了哪些规定呢？我们分别来说：</p>

<ul>
<li><p>线程模型</p>

<p>  <img class="<a" src="href="https://img.alicdn.com/imgextra/i3/715978679/TB2_LEObhRzc1FjSZFPXXcGAFXa_!!715978679.png">https://img.alicdn.com/imgextra/i3/715978679/TB2_LEObhRzc1FjSZFPXXcGAFXa_!!715978679.png</a>&#8221;></p>

<p>  因为Java天生支持多线程，所以，虚拟机也必须要有线程模型，否则就无法屏蔽操作系统的差异。虚拟机规定，所有的变量都存储在主存中，也就是通常所指的内存，每个线程可以有自己的独立的工作内存，可以理解为每个CPU核心的缓存，线程对变量的操作都只能在自己的工作内存中，不能直接对主存操作，也不能访问其他线程的工作内存。</p></li>
<li><p>原子性操作</p>

<p>  虚拟机保证对基本的基本数据类型的赋值是原子的，比如int，boolean和float。但是像long和double不一定，这取决于CPU的字长，32位下，long和double的赋值不是原子的，因为需要二个指令；而64位CPU则一个指令搞定。</p>

<p>  如何保证原子性呢？方式一是上面提过的用volatile，另外就是用同步锁机制。</p></li>
<li><p>可见性</p>

<p>  前面说到每个CPU可以有自己的工作内存，因此，当一个线程对某一变量操作后，其他线程是没有办法直接拿到最新变化的。</p>

<p>  如何保证可见性呢？方法一就是把变量用volatile修饰，另外就是用同步锁机制。</p></li>
<li><p>指令重排与happens-before原则</p>

<p>  指令重排与happens-before原因，是不同的，也是不冲突的。正常情况下，也就是说单线程情况下，指令的执行顺序是按书写顺序从上到下，但不是严格的，虚拟机会在不影响程序结果正确性的前提下对指令进行重排，比如：</p></li>
</ul>


<pre><code class="java">int a = 1;
int b = 2;
int c = 3;
</code></pre>

<p>这三个指令，哪个先执行，是不会影响程序结果的，这时指令可能重排；而再如：</p>

<pre><code class="java">int a = 1;
int b = a + 1;
int c = a + b;
</code></pre>

<p>这种情况下，是无法重排，不可能把第3句放到前面，那样会得不到正确的结果。</p>

<p>而happens-before是指在多线程情况下，虚拟机来保证某些操作的先后性，或者说前面的操作结果，对后面是可见的。比如上面的第二个例子，在多线程情况下，c = a + b是有可能在a, b赋值前执行的，这也恰 恰是我们需要小心解决的由多线程机制带来的问题。</p>

<p>虚拟机的默认支持的happens-before(先行发生)原则：</p>

<ul>
<li>程序次序规则：一个线程内，按照代码顺序，书写在前面的操作先行发生于书写在后面的操作</li>
<li>锁定规则：一个unLock操作先行发生于后面对同一个锁额lock操作</li>
<li>volatile变量规则：对一个变量的写操作先行发生于后面对这个变量的读操作</li>
<li>传递规则：如果操作A先行发生于操作B，而操作B又先行发生于操作C，则可以得出操作A先行发生于操作C</li>
<li>线程启动规则：Thread对象的start()方法先行发生于此线程的每个一个动作</li>
<li>线程中断规则：对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生</li>
<li>线程终结规则：线程中所有的操作都先行发生于线程的终止检测，我们可以通过Thread.join()方法结束、Thread.isAlive()的返回值手段检测到线程已经终止执行</li>
<li>对象终结规则：一个对象的初始化完成先行发生于他的finalize()方法的开始</li>
</ul>


<p>很多规则显而易见的，或者想一下还是很容易想通的，重点解析一下第2, 3, 4条：</p>

<ul>
<li><p>锁定规则：一个unLock操作先行发生于后面对同一个锁额lock操作</p>

<p>  这里的意思是，同一个锁(lock)，如果处于锁定状态，那么只能先释放锁，然后才能被再次锁定。这么一说就明白了，这是显而易见的，要不然锁不就失去它本身的作用了么。</p>

<p>  <strong>注意</strong>：这里有必要进一步说明一下，对于可重入锁，这里应该指的就是其他线程再次获得锁之前，锁必须被释放。因为对于可重入锁，锁的持有线程，是可以在不释放的前提下，继续获得锁的。</p></li>
<li><p>volatile变量规则：对一个变量的写操作先行发生于后面对这个变量的读操作</p>

<p>  这里其实有二层，一个是前面提过的，读volatile总是能读到最新的值，即使是写线程和读线程同时进行。因为，写操作会被更新到主存，读线程的工作内存会被置为无效，需要重新到主存去读，而读主存的地址，是要等待该地址更新后才能成功读取。</p>

<p>  另外，一个就是对于volatile上下文的变量的读写的影响，也就是说它为什么能禁止指令重排：volatile的准确可见性作用是，当一个线程写一个volatile变量时，写完成后会刷新工作内存到主存，这会把目前这个线程所做过修改的所有变量都刷新到主存。举个例子来说明：</p></li>
</ul>


<pre><code class="java">int a;
int b;
volatile boolean flag;

void write() {
    a = 3;
    b = 4;
    flag = true;
}

void read() {
    print(a);
    print(b);
    print(flag);
}
</code></pre>

<p>如果线程A调用write()，线程B调用read()，那么B能读到a, b和flag的最新值（A所写的值）。</p>

<p>由此，可以引申出一个volatile的高级应用，可以当作同步锁：</p>

<pre><code class="java">private Object object = null;
private volatile hasNewObject = false;

public void put(Object newObject) {
    while (hasNewObject) {
         //wait - do not overwrite existing new object
    }
    object = newObject;
    hasNewObject = true; //volatile write
}

public Object take() {
    while (!hasNewObject) { //volatile read
        //wait - don't take old object (or null)
    }
    Object obj = object;
    hasNewObject = false; //volatile write
    return obj;
}
</code></pre>

<p>因为写hasNewObject时会把object也刷新了，所以取对象的线程，可以在只要hasNewObject为true时就可以读到正确的值。
* 传递规则：如果操作A先行发生于操作B，而操作B又先行发生于操作C，则可以得出操作A先行发生</p>

<p>这个就像某些运行符的传递性一样，具体传递性，从而使整个happens-before规则产生实际作用。</p>

<h3>volatile的实现机制</h3>

<p>计算机科学里面，为了解决复杂性，都会分层。正如一个名人所说：&#8221;计算机的任何问题都可以通过增加一个虚拟层来解决&#8221;(&ldquo;All problems in computer science can be solved by another level of indirection&rdquo;)。volatile虚拟机层引入的，解决语言层面的问题，那么它的实现，必然是靠下一层的支持，也就是需要汇编或者说处理器指令的支持来实现，volatile是靠内存屏障和<a href="https://en.wikipedia.org/wiki/MESI_protocol">MESI</a>（缓存一致性协议）来达成的它的作用的。</p>

<p><a href="https://en.wikipedia.org/wiki/Memory_barrier">内存屏障</a>(Memory Barriers)是处理器提供的一组内存操作指令，它的作用是限制内存操作的顺序，也就是说内存屏障像一个栅栏一样，它前面的指令要在它后面的指令之前完成；还能强制把缓存写入到主存；再有的就是触发缓存一致性，就是当有写变量时，会把其他CPU核心的缓存变为无效。</p>

<h3>总结</h3>

<p>volatile是一个比较复杂的修饰符，想要使用它，就要完全理解它的作用，它能用来做什么，以及不能干什么。如果，不是很确定，要么弄懂，要么就不要使用。事实上，大多数情况下，标志变量，还是非常适合volatile的。</p>

<p>java.util.concurrent.*里面的高级线程安全数据结构像ConcurrentHashMap以及java.util.concurrent.atomic.*等的实现都用到了volatile。可以多看看这些类的实现，以加深对volatile的理解和运用。</p>

<h2>参考资料</h2>

<ul>
<li><a href="http://www.ibm.com/developerworks/cn/java/j-jtp06197.html">Java 理论与实践: 正确使用 Volatile 变量</a></li>
<li><a href="http://www.cnblogs.com/dolphin0520/p/3920373.html">Java并发编程：volatile关键字解析</a></li>
<li><a href="http://www.infoq.com/cn/articles/java-memory-model-4#">深入理解Java内存模型（四）——volatile</a></li>
<li><a href="http://www.infoq.com/cn/articles/ftf-java-volatile">聊聊并发（一）——深入分析Volatile的实现原理</a></li>
<li><a href="http://tutorials.jenkov.com/java-concurrency/volatile.html">Java Volatile Keyword</a></li>
<li><a href="https://en.wikipedia.org/wiki/Volatile_(computer_programming">volatile (computer programming)</a>)</li>
<li><a href="https://en.wikipedia.org/wiki/Java_memory_model">Java Memory Model</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 7和8的新特性以及与Android开发的关系]]></title>
    <link href="http://toughcoder.net/blog/2014/11/12/java-7-and-8-and-android/"/>
    <updated>2014-11-12T21:54:11+08:00</updated>
    <id>http://toughcoder.net/blog/2014/11/12/java-7-and-8-and-android</id>
    <content type="html"><![CDATA[<p>Oracle一直在推动Java的发展，到目前最新的Java SE是Java 8以及JDK8，但是目前貌似很多人还在使用Java 6（JDK6)，于是就花时间小研究了下Java 7与Java 8。</p>

<p><a href=""><img src="https://img.alicdn.com/imgextra/i2/715978679/TB2PTQimVXXXXXTXXXXXXXXXXXX_!!715978679.jpg"></a></p>

<!-- more -->


<h2>Java 7（JDK 7)的语言新特性</h2>

<p>Java SE 7新增的语言特性并不是很多，主要有：</p>

<ul>
<li>try 语句资源管理(The try-with-resources Statement)</li>
<li>同一catch捕获多个异常(Catching Multiple Exception Types)</li>
<li>创建泛型对象时的类型推测(Type inferenes for Generic Instance Creation)</li>
<li>二进制的字面常量(Binary Literals)</li>
<li>数值字面常量里的可以有下划线(Underscores in Numeric Literals)</li>
<li>switch语句支持String(Strings in switch Statements)</li>
</ul>


<p>下面来个实例：</p>

<pre><code class="java">import java.io.*;
import java.net.*;
import java.util.*;

public class Switch {
    // Underscores in numeric literals
    public static int USER_COUNT_LIMIT = 1_000_000_000;
    public static void main(String[] args) {
        // Type inference when creating generics
        List&lt;String&gt; fruits = new ArrayList&lt;&gt;(args.length);
        for (String a : args) {
            fruits.add(a);
        }
        // Strings in switch
        for (String a : fruits) {
            switch (a) {
            case "apple":
                System.out.println("eat an apple a day, the doctors go away");
                break;
            case "orange":
                System.out.println("orange juice");
                break;
            default:
                System.out.println("i do not know what you want");
                break;
            }
        }

        // With 'try-with-resources' no longer need finally to clean up resources.
        try (BufferedReader br = new BufferedReader(new FileReader(args[args.length - 1]))) {
            System.out.println(br.readLine());
            Thread.sleep(1000);
        // Catch multiple exceptions
        } catch (InterruptedException | IOException e) {
            System.out.print(e.getMessage());
        }

        // binary literals
        int userCount = 0b1010101;
        System.out.println("Current we have " + userCount + " users, while limit is " + USER_COUNT_LIMIT);
        if (userCount &lt; USER_COUNT_LIMIT) {
            System.out.println("We are okay, it is under control");
        } else {
            System.out.println("Alert alert alert");
        }
    }
}
</code></pre>

<p>编译并运行：</p>

<pre><code class="bash">[alex:jdk1.7.0_71]$./bin/javac Switch.java -Xlint
[alex:jdk1.7.0_71]$./bin/java Switch apple Switch.java README.html 
eat an apple a day, the doctors go away
i do not know what you want
i do not know what you want
&lt;html&gt;
Current we have 85 users, while limit is 1000000000
We are okay, it is under control
</code></pre>

<p>可以看出，其实Java 7并无太大改进，只是多了些语法糖而已。</p>

<h2>Java 8(JDK 8）的语言新特性</h2>

<p>Java 8最大的改进就是增加了lambda表达式(Lambda Expression)，来看个实例：</p>

<pre><code class="java">import java.util.*;

public class Lambda&lt;T&gt; {
    public void apply(List&lt;T&gt; list, Action&lt;T&gt; action) {
        for (T t : list) {
            action.perform(t);
        }
    }

    public static void main(String[] args) {
        List&lt;String&gt; stuff = new ArrayList&lt;&gt;();
        for (String s : args) {
            stuff.add(s);
        }

        Lambda&lt;String&gt; lambda = new Lambda&lt;&gt;();
        // Use lambda expression to specify action
        lambda.apply(stuff, s -&gt; System.out.println(s));

        // Another example of lambda expression for threading
        new Thread(() -&gt; {
            for (int i = 0; i &lt; 10; i++) {
                System.out.println("working " + i + " seconds");
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {}
            }
        }).start();
    }
}

interface Action&lt;T&gt; {
    public void perform(T t);
}
</code></pre>

<p>编译并运行：</p>

<pre><code class="bash">[alex:jdk1.8.0_25]$./bin/javac Lambda.java -Xlint
[alex:jdk1.8.0_25]$./bin/java Lambda apple orange
apple
orange
working 0 seconds
working 1 seconds
working 2 seconds
working 3 seconds
working 4 seconds
working 5 seconds
working 6 seconds
working 7 seconds
working 8 seconds
working 9 seconds
</code></pre>

<p>在Java 8中，可以比用匿名内部类更加方便的方式来设置回调。</p>

<h2>Android中的Java</h2>

<p>那么，Android到底与Java是什么关系呢？<a href="http://www.vaikan.com/android-java/">有人说</a>它们是一样的。其实没啥关系，Android虽然使用Java语言作为它的主要开发语言，但是它并完全等同于Java SE JDK，JDK中关于UI的AWT和Swing在Android都没有，所以它的API是标准JDK 6的一个子集。Android中的Java是基于<a href="http://www.apache.org/">Apache</a>的<a href="http://harmony.apache.org/">Apache Harmony</a>，与标准Java SE 6语法完全一样，可以看看它们之间的<a href="http://en.wikipedia.org/wiki/Comparison_of_Java_and_Android_API">异同</a>，以及<a href="http://www.zhihu.com/question/20207106">Dalvik与Java VM</a>。</p>

<h2>Java 7和Java 8与Andoid开发</h2>

<p>Java在进步，语法上越来越人性化，那么Android开发能否得益呢？Java 7是可以的，在最新的开发工具（ADT 23和Kitkat）下，可以使用Java 7。但对于Java 8不能直接使用，只能借助第三方工具来翻译bytecode。所以对于Android开发者同学们来说，尝一尝Java最新的语法糖就可以了，想要天天使用，还要慎重考虑哦！</p>

<h2>参考</h2>

<ul>
<li><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/language/enhancements.html">Java Programming Language Enhancements</a></li>
<li><a href="http://stackoverflow.com/questions/16921337/why-apache-harmony-or-how-to-use-java-8-on-android">“Why Apache Harmony” or “How to use Java 8 on Android”</a></li>
<li><a href="http://stackoverflow.com/questions/23318109/is-it-possible-to-use-java-8-for-android-development">Is it possible to use Java 8 for Android development?</a></li>
<li><a href="https://www.oreilly.com/content/java7-features/">A look at Java 7’s new features</a></li>
<li><a href="https://www.oracle.com/java/technologies/javase/jdk7-relnotes.html">Java SE 7 Features and Enhancements</a></li>
<li><a href="https://www.educba.com/java-7-features/">Java 7 Features</a></li>
<li><a href="https://blog.csdn.net/qq_34755766/article/details/82877052">java7新特性（简述八大新特性）</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
