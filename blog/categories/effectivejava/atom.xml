<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Effectivejava | 稀有猿诉]]></title>
  <link href="http://toughcoder.net/blog/categories/effectivejava/atom.xml" rel="self"/>
  <link href="http://toughcoder.net/"/>
  <updated>2016-11-14T21:30:54+08:00</updated>
  <id>http://toughcoder.net/</id>
  <author>
    <name><![CDATA[Alex Hilton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[理解 Java 关键字 Final]]></title>
    <link href="http://toughcoder.net/blog/2016/11/12/understanding-java-keyword-final/"/>
    <updated>2016-11-12T14:40:51+08:00</updated>
    <id>http://toughcoder.net/blog/2016/11/12/understanding-java-keyword-final</id>
    <content type="html"><![CDATA[<h2>final可以用来干什么</h2>

<p>final是Java中非常常见的一个关键字，可以说每天都在使用它，虽然常见，但却也不见得都那么显而易见，今天就来研究一下final，以加深对它的理解和更合理的运用。</p>

<p><a href=""><img src="https://img.alicdn.com/imgextra/i1/715978679/TB2FJBGdyGO.eBjSZFEXXcy9VXa_!!715978679.jpeg"></a></p>

<!-- more -->


<h3>修饰类</h3>

<p>当一个类不想被继承时，就可以用final来修饰。</p>

<h3>修饰方法</h3>

<p>当一个方法不想被子类覆写(Override)时，可以用final来修饰。另外一方面，把方法用final来修饰也有一定的性能提升上的帮助，因为虚拟机知道它不会被覆写，所以可以以更简单的方式来处理。</p>

<p>private的方法，默认都会被编译器加上final.</p>

<h3>修饰变量</h3>

<p>被final修饰的变量只能赋值一次，之后不能再被修改。如：</p>

<pre><code class="java">final int a = 10;
a = 4; // compilation error
</code></pre>

<p>需要注意的是，这里说的是只能赋值一次，并不意味着，非要在声明变量时直接初始化，比如，下面的代码也是完全合法的：</p>

<pre><code class="java">final int a;
if (foo()) {
    a = 3;
} else {
    a = 4;
}
</code></pre>

<h3>修饰域变量</h3>

<p>域变量也是变量，所以用final来修饰的第一个作用就是赋值后，不能再修改变量的值，比如:</p>

<pre><code class="java">final int a = 10;
final Object b = new Object();
</code></pre>

<p>对于基本类型来说，就是变量值不能再被修改；对于引用来说，就是不能再让其指向其他对象或者null。</p>

<p>但对于域变量，声明为final的域变量必须在声明时初始化，或者在构造方法中初始化，否则会有编译错误。</p>

<p>此外，声明为final的域变量还有内存模型上的语义，下面详细说</p>

<h3>内存模型的作用&ndash;防止<a href="https://shipilev.net/blog/2014/safe-public-construction/">变量从构造方法中逸出</a></h3>

<p>这个主要是针对被final修饰的域变量，虚拟机会有禁止指令重排的保证：</p>

<ul>
<li>在构造方法内对一个final变量的写入，与随后这个被构造对象的引用赋值给一个引用变量，这二个顺序不改变，final变量的写入一定要早于对象引用的赋值。</li>
</ul>


<p>什么意思呢？在多线程环境下，域变量是有可能从构造方法中逸出的，也就是说线程有可能读到还没有被构造方法初始化的域变量的值。比如：</p>

<pre><code class="java">class Foo {
    int a;

    Foo(int v) {
        a = v;
    }
}
</code></pre>

<p>如果是在多线程环境下，一个线程A在创建Foo的对象，另一个线程B在读对象的a的值，则B是有可能读到未正确初始化a的值（默认初始值0）。这就是域变量从构造方法中逸出。</p>

<p>关键字final可以禁止虚拟机指令重排，从而保证了构造方法执行完毕前final修饰的变量一定是初始化过了的。</p>

<p>这部分可以参考<a href="http://www.infoq.com/cn/articles/java-memory-model-6">深入理解Java内存模型（六）——final</a>，讲解的非常详细。</p>

<h3>匿名内部类使用外部变量时为何要强制使用final修饰</h3>

<p>这个大家肯定都习以为常了，比如：</p>

<pre><code class="java">private void initViews() {
    final int a = 3; // Compilation error if remove final
    btn.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(View view) {
            if (a &gt; 1) {
                // volala
            }
        }
    }
}
</code></pre>

<p>那么，有没有想过为什么？而像其他支持完整闭包的语言如JavaScript，Python等，是没有这等限制的。究其原因，是Java对闭包支持不够完整，或者说它并不是像动态语言那样的完整闭包。对于匿名内部类来说，编译器会创建一个命名类(OutClass$1之类的)，然后把匿名类所在的<a href="https://en.wikipedia.org/wiki/Closure_(computer_programming">能捕获的变量</a>)，以构造参数的形式传递给内部类使用，这样一样，外部的变量与内部类看到的变量是不同的，虽然它们的值是相同的，因此，如果再允许外部修改这些变量，或者内部类里面修改这些变量，都会造成数据的不一致性（因为它们是不同的变量），所以Java强制要求匿名内部类访问的外部变量要加上final来修饰。</p>

<p>对于其他语言，匿名内部类，持有的是外部变量的一个包装的引用(wrapper reference)，这可以能看不懂，但是理解起来就是内部类能直接访问外部变量，外部与闭包内部访问的是同一个变量，因此外部修改了，内部能看到变化，内部修改了，外部也能看到变化。</p>

<p>一句话总结就是，Java内部类与外部持有的是值相同的不同的变量；其他支持闭包的语言则持有的是相同的变量。</p>

<h3>建议能使用final的地方就加上final修饰</h3>

<p>最后来聊聊，啥时候应该用final呢？孤的建议(以及众多大师的建议)就是能多用就多用，除非不能用final，否则就用。原因，有这么几条：</p>

<ul>
<li><p>域变量尽可能加上final</p>

<p>这个原因比较明确，前面也提到了，在多线程条件下，会有很大的优势。尽可能加上final来修饰域变量，甚至用<a href="https://en.wikipedia.org/wiki/Immutable_object">Immutable Object</a>，可以省去构造时的多线程同步。</p>

<p>多线程最大的麻烦是状态同步，啥是状态？其实就是共享数据，域变量就是共享数据，所以，如果共享数据都是不可变的(Immutable)，那么自然就没有了同步上的麻烦。</p></li>
<li><p>final类和方法能提升性能</p>

<p>正常的类和方法，虚拟机需要为了继承和方法覆写而做一次准备，如果加上了final，虚拟机知道它不会被继承或者覆写，那么就可以做一些优化。虽然，这并不显著，但是还是可以提升一些性能的。</p></li>
<li><p>final变量能提升可读性</p>

<p>无论是域变量还是本地变量，加上了final修饰，程序的维护者就知道了，这个变量的值不会再改变，这无疑会大大增加可读性。</p></li>
</ul>


<h3>参考资料</h3>

<ul>
<li><a href="http://www.cnblogs.com/dolphin0520/p/3736238.html">浅析Java中的final关键字</a></li>
<li><a href="http://www.infoq.com/cn/articles/java-memory-model-6">深入理解Java内存模型（六）——final</a></li>
<li><a href="http://cuipengfei.me/blog/2013/06/22/why-does-it-have-to-be-final/">为什么必须是final的呢？</a></li>
<li><a href="https://www.zhihu.com/question/21395848">java为什么匿名内部类的参数引用时final？</a></li>
<li><a href="http://www.javamex.com/tutorials/synchronization_final.shtml">Thread-safety with the Java final keyword</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
