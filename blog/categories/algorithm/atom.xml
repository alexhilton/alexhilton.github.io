<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Algorithm | 稀有猿诉]]></title>
  <link href="http://toughcoder.net/blog/categories/algorithm/atom.xml" rel="self"/>
  <link href="http://toughcoder.net/"/>
  <updated>2022-03-17T23:43:58+08:00</updated>
  <id>http://toughcoder.net/</id>
  <author>
    <name><![CDATA[Alex Hilton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LeetCode Hot 100 归档]]></title>
    <link href="http://toughcoder.net/blog/2022/03/17/leetcode-hot-100-archives/"/>
    <updated>2022-03-17T23:40:15+08:00</updated>
    <id>http://toughcoder.net/blog/2022/03/17/leetcode-hot-100-archives</id>
    <content type="html"><![CDATA[<p><a href=""><img src="https://img.tukuppt.com/png_preview/00/03/28/I7XmLxWIHx.jpg!/fw/780" title="auto auto" ></a></p>

<!-- more -->


<h3>1 两数之和</h3>

<ul>
<li><a href="https://leetcode-cn.com/problems/two-sum/">两数之和</a></li>
<li><a href="https://leetcode-cn.com/problems/two-sum/solution/liang-shu-zhi-he-by-alexhilton-y3eb/">题解</a></li>
<li><a href="">代码归档</a></li>
</ul>


<p><strong>注意</strong>：题目版权归<a href="https://leetcode-cn.com/">LeetCode</a>所有。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LeetCode刷题计划]]></title>
    <link href="http://toughcoder.net/blog/2022/03/17/leetcode-learning-plans/"/>
    <updated>2022-03-17T23:33:39+08:00</updated>
    <id>http://toughcoder.net/blog/2022/03/17/leetcode-learning-plans</id>
    <content type="html"><![CDATA[<p>多说无益，还是要撸。从<a href="https://leetcode-cn.com/problem-list/2cktkvj/">Hot100</a>开始，这是比较基础的一套题目，非常适合入手。</p>

<p><a href=""><img src="https://pic1.zhimg.com/v2-5efc27df05c686f2496e631f3cd44958_r.jpg" title="auto auto" ></a></p>

<!-- more -->


<h2>在本地编码</h2>

<p>浏览器编辑和调试代码毕竟还是不太方便，所以还需要在本地调试和编码，然后再到网站上面去提交。</p>

<p>创建一个新的module，为leetcode，然后同时创建测试代码。<a href="https://github.com/alexhilton/EffectiveAlgorithm/tree/main/leetcode">完整代码在这里</a>。</p>

<h2>每一道题要尝试多种解法</h2>

<p>一定要自己思考，并尝试多种解法。从直观蛮力法开始，做好效率分析，争取每次提交都有提升。</p>

<p>实在没思路时，先看题目本身的提示，再看题解或者网上其他人的解法。然后写自己的解法，不要照抄。</p>

<h2>做完后要写题解</h2>

<p>把题目的分析，和各种解法写一写。</p>

<h2>引申知识点的学习总结成文</h2>

<p>对于题目中引申出来的知识点要进行学习并另外总结成文，放在博客之中。</p>

<h2>博客之中归档</h2>

<p>博客之中用一篇文章来记录所做的题目，对应的题解和完整代码。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interview Algorithm and LeetCode]]></title>
    <link href="http://toughcoder.net/blog/2022/03/16/algorithms-made-easy/"/>
    <updated>2022-03-16T21:44:25+08:00</updated>
    <id>http://toughcoder.net/blog/2022/03/16/algorithms-made-easy</id>
    <content type="html"><![CDATA[<p>这个是面试的必备技能，而且特别是外企和一线大厂都很喜欢问算法题目，所以这也是一个必须跨跃的门槛。</p>

<p>这东西与当年ACM/ICPC以及中学的信息技术竞赛是同一套东西，核心就是算法和数据结构，目的就是训练逻辑思维能力，建模的能力和问题分析与解决的能力，当然 对于提升解决问题的能力还是很有帮助的。</p>

<p>很惭愧，当年没有学好（ACM/ICPC 2008年亚洲区域赛合肥赛区只拿到优胜奖 Honorable Mention），现在是时候好好补习一下了。</p>

<p><a href=""><img src="https://tse3-mm.cn.bing.net/th/id/OIP-C.57PbuYOIlWq6wvAuK8tp9gHaEK?pid=ImgDet&amp;rs=1" title="auto auto" ></a></p>

<!-- more -->


<h2>优质书籍</h2>

<p>核心的书籍就是算法和数据结构，市面上书籍甚多，比较优质的有如下</p>

<h3>基石</h3>

<p>数据结构与算法是基础中的基础。</p>

<ul>
<li><a href="">数据结构与算法图解</a></li>
<li><a href="">算法图解</a></li>
<li><a href="">编程的修炼</a></li>
<li><a href="">编程玑珠</a></li>
<li><a href="">数学之美</a> 这个更偏数学一些，不过数学更是基石中的基石</li>
</ul>


<h3>以面试题为主线的书</h3>

<p>另外，还有一套书是以面试题为主线，辅助以介绍基础知识的书，非常之实用。</p>

<ul>
<li><a href="">剑指Offer 专项突破版</a></li>
<li><a href="">剑指Offer</a></li>
<li><a href="">编程之美：微软技术面试心得</a></li>
</ul>


<h2>LeetCode</h2>

<p>现在最火的就是刷题，就是在LeetCode（力扣）上面刷题，网上各种攻略以及题解都非常之多。</p>

<ul>
<li><a href="https://books.halfrost.com/leetcode/">LeetCode Cookbook</a></li>
<li><a href="https://www.zhihu.com/question/280279208">大家都是如何刷 LeetCode 的？</a></li>
<li><a href="https://blog.csdn.net/fuxuemingzhu/article/details/105183554">刷完 900 多道算法题的首次总结：LeetCode 应该怎么刷？</a></li>
<li><a href="https://www.zhihu.com/question/36738189">LeetCode按照怎样的顺序来刷题比较好？</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/349940945">Leetcode面试高频题分类刷题总结</a></li>
<li><a href="https://www.cnblogs.com/grandyang/p/4606334.html">LeetCode All in One 题目讲解汇总</a></li>
</ul>


<p>另外，在<a href="https://github.com">GitHub</a>上面，也有大量的优质的LeetCode资源：</p>

<ul>
<li><a href="https://github.com/azl397985856/leetcode">LeetCode Solutions: A Record of My Problem Solving Journey</a></li>
<li><a href="https://github.com/haoel/leetcode">LeetCode Problems&#8217; Solutions</a>.   耗子叔出品的</li>
<li><a href="https://github.com/soulmachine/leetcode">LeetCode题解，151道题完整版</a></li>
<li><a href="https://github.com/doocs/leetcode">LeetCode solutions in any programming language</a></li>
<li><a href="https://github.com/MisterBooo/LeetCodeAnimation">Demonstrate all the questions on LeetCode in the form of animation</a>.  以动画的形式帮助你理解题解，非常棒的项目</li>
<li><a href="https://github.com/youngyangyang04/leetcode-master">《代码随想录》LeetCode 刷题攻略：200道经典题目刷题顺序，共60w字的详细图解，视频难点剖析，50余张思维导图，支持C++，Java，Python，Go，JavaScript等多语言版本，从此算法学习不再迷茫</a></li>
<li><a href="https://github.com/yuanguangxin/LeetCode">LeetCode刷题记录与面试整理</a></li>
<li><a href="https://github.com/qiyuangong/leetcode">Python &amp; JAVA Solutions for Leetcode</a></li>
<li><a href="https://github.com/fishercoder1534/Leetcode">Solutions to LeetCode problems; updated daily. Subscribe to my YouTube channel for more.</a></li>
</ul>


<p>力扣与ACM OJ最大的区别就是在于它对编程语言支持丰富，并且并不限制你使用标准库，比如C++可以用STL，比如Java可以用Collections，除非题目中有特别的限制，这个需要注意，就是在解题的时候思维不能受到局限，比如查询相关的题目，首先能想到的就是Map，但一般在ACM OJ时，通常不会往Map上想，因为是不允许使用现成的库的（起码当年我训练的时候是这样的），但LeetCode上面并没有这样的限制（其实这很符合实际项目），所以思维要打开，另外就是可以多多尝试，有没有限制试过后就知道了。</p>

<h2>更多的练习题</h2>

<p>力扣是以面试为核心，它上面的题集都集中在面试，特别是大厂和外企的常见面试题目。</p>

<p>之外，就是各种OJ了，这是各种信息竞赛算法竞赛和ACM的训练基地，题目也更广泛，难度也相当的高。</p>

<ul>
<li><a href="https://tco21.topcoder.com/">TopCoder</a></li>
<li><a href="http://poj.org/">北大ACM OJ</a></li>
<li><a href="https://acm.hdu.edu.cn/">杭电ACM OJ</a></li>
</ul>


<h2>参考资料</h2>

<ul>
<li><a href="https://www.cnblogs.com/gzshan/p/10910831.html">【剑指Offer】剑指offer题目汇总 </a></li>
<li><a href="https://zhuanlan.zhihu.com/p/56200260">面试必刷-《剑指offer》刷题小结</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
