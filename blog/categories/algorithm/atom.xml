<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Algorithm | 稀有猿诉]]></title>
  <link href="http://toughcoder.net/blog/categories/algorithm/atom.xml" rel="self"/>
  <link href="http://toughcoder.net/"/>
  <updated>2024-09-09T22:26:24+08:00</updated>
  <id>http://toughcoder.net/</id>
  <author>
    <name><![CDATA[Alex Hilton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[贡献法算法总结]]></title>
    <link href="http://toughcoder.net/blog/2024/08/18/credit-algorithm-made-easy/"/>
    <updated>2024-08-18T12:57:52+08:00</updated>
    <id>http://toughcoder.net/blog/2024/08/18/credit-algorithm-made-easy</id>
    <content type="html"><![CDATA[<p>贡献法是一种比较偏门的算法，与贪心类似，并没有固定的范式，思路也非常的清奇。用朴素的方式通常会超时，或者甚至整理不出来思路，无法实现编码。</p>

<p>这类算法题型，更多的还是要靠经验和思维，遇到类似的题目就往贡献法上想。</p>

<p><img src="https://www.investopedia.com/thmb/J33BG-Cf03bW8-O4kXJfuht3gHA=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/algorithm-df9b57e8ea7c494b891da25987643fab.jpg" alt="banner" /></p>

<!-- more -->


<p>总的来说，贡献法就是不直接思考如何做运算，而是运算之后净增量或者净减少量，或者当前元素在运行过后对净增量或者净减量的贡献值是多少，从这个角度去思考。</p>

<h2>典型题目</h2>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/sum-of-subsequence-widths/description/">891. 子序列宽度之和</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/sum-of-subsequence-widths/solutions/2809957/xi-you-yuan-su-891-zi-xu-lie-kuan-du-zhi-igda/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/sum-of-subarray-minimums/description/">907. 子数组的最小值之和</a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/distribute-coins-in-binary-tree/description/">979. 在二叉树中分配硬币</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/distribute-coins-in-binary-tree/solutions/2770062/xi-you-yuan-su-979-zai-er-cha-shu-zhong-xg0ef/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/maximum-subarray-min-product/description/">1856. 子数组最小乘积的最大值</a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/sum-of-subarray-ranges/description/">2104. 子数组范围和</a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/sum-of-total-strength-of-wizards/description/">2281. 巫师的总力量和</a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/power-of-heroes/description/">2681. 英雄的力量</a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h2>参考资料</h2>

<ul>
<li><a href="https://blog.csdn.net/weixin_60033897/article/details/136580127">算法学习系列（四十）：贡献法</a></li>
<li><a href="https://blog.csdn.net/qq_43406895/article/details/131514319">【算法】贡献法相关题目练习</a></li>
<li><a href="https://juejin.cn/post/7350185416652275712">贡献法（总体之和等于个体贡献度之和）（蓝桥杯）</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Principle of Inclusion Exclusion Made Easy]]></title>
    <link href="http://toughcoder.net/blog/2024/06/13/inclusion-exclusion-principle/"/>
    <updated>2024-06-13T20:45:29+08:00</updated>
    <id>http://toughcoder.net/blog/2024/06/13/inclusion-exclusion-principle</id>
    <content type="html"><![CDATA[<p><a href="https://oi-wiki.org/math/combinatorics/inclusion-exclusion-principle/">容斥原理</a>，是指在计数的时候，先不考虑重复问题，先把包含某种对象的统计出来，再把重复的排除掉。</p>

<p><a href=""><img src="https://tse2-mm.cn.bing.net/th/id/OIP-C.oW-5-IkJnUeOjVM7ZBtMAwAAAA?rs=1&amp;pid=ImgDetMain" title="auto auto" ></a></p>

<!-- more -->


<p>比如说，考试，15人数学满分，12人语文满分，并且有4人语文和数学都满分，求至少有一个人满分的同学有多少个？</p>

<p>答案是15 + 12 - 4。</p>

<p>理解起来就是，重复的部分被多加了一次，最后再减去重复的人即可。</p>

<p>再如小于某个数x中，能被3或者5整除的数有多少？答案是 x/3 + x / 5 - x /3x5。同样是重复的计算了两次，减去一次即可。</p>

<p>容斥原理，不复杂，也不能单独用来求解问题，一般都是用于统计计数。</p>

<h3>相关问题</h3>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/nth-magical-number/description/">878. 第 N 个神奇数字</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/nth-magical-number/solutions/2808476/xi-you-yuan-su-878-di-n-ge-shen-qi-shu-z-udgp/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/ugly-number-iii/description/">1201. 丑数 III</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/ugly-number-iii/solutions/2808790/xi-you-yuan-su-1201-chou-shu-iiishu-xue-wha7w/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h2>References</h2>

<ul>
<li><a href="https://brilliant.org/wiki/principle-of-inclusion-and-exclusion-pie/">Principle of Inclusion and Exclusion (PIE)</a></li>
<li><a href="https://mathworld.wolfram.com/Inclusion-ExclusionPrinciple.html">Inclusion-Exclusion Principle</a></li>
<li><a href="https://www.geeksforgeeks.org/inclusion-exclusion-various-applications/">Inclusion-Exclusion and its various Applications</a></li>
<li><a href="https://www.cut-the-knot.org/arithmetic/combinatorics/InclusionExclusion.shtml">The Inclusion-Exclusion Principle</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tree in Graph]]></title>
    <link href="http://toughcoder.net/blog/2024/06/06/tree-in-graph/"/>
    <updated>2024-06-06T22:02:26+08:00</updated>
    <id>http://toughcoder.net/blog/2024/06/06/tree-in-graph</id>
    <content type="html"><![CDATA[<p>树是图的一种特殊形式，图中的树也是比较难的一类问题。</p>

<p><a href=""><img src="https://vivadifferences.com/wp-content/uploads/2019/11/Tree-In-Programming.png" title="auto auto" ></a></p>

<!-- more -->


<h2>树形图</h2>

<p>有一类特殊的图，本质上是树，但是以图的形式给出，通常涉及不同子树的特征值计算。这种图本质上是树，无环。通常顶点是n个，边的个数是n-1个，无环，每个顶点都可以成为树的根，边有权重。通常是求解与顶点连通的子树的特征值。</p>

<p>通常需要用到乘法原理。</p>

<p>第一步，把问题分解为根和子树的问题，需要以每个顶点为根，子树就是与其相邻的顶点为根的子树，这种根+子树的组合就是一个子问题；</p>

<p>第二步，乘法原理。每个「子树」会得到一个数量，子问题的结果就用到乘法原理来求得：</p>

<p><img src="https://pic.leetcode.cn/1709427910-nOCIAc-b125C.png" alt="" /></p>

<p>第三步，对于每个子树，用其他方法得到需要的「数量」值。这个不同的问题不一样。但本质上，要么是连通分量问题（可用并查集），要么是路径问题。因为这是在一个子树上面的问题，相当于树的问题，通常DFS可求得结果。</p>

<h3>典型问题</h3>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/count-valid-paths-in-a-tree/description/">2867. 统计树中的合法路径数目</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/count-valid-paths-in-a-tree/solutions/2777173/xi-you-yuan-su-zhi-shu-ai-shai-fa-bing-c-2rdn/">题解</a> </td>
<td style="text-align:left;"> 并查集 </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/count-pairs-of-connectable-servers-in-a-weighted-tree-network/description/">3067. 在带权树网络中统计可连接服务器对数目</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/count-pairs-of-connectable-servers-in-a-weighted-tree-network/solutions/2802677/xi-you-yuan-su-3067-zai-dai-quan-shu-wan-7ioe/">题解</a> </td>
<td style="text-align:left;"> DFS </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/reorder-routes-to-make-all-paths-lead-to-the-city-zero/description/">1466. 重新规划路线</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/reorder-routes-to-make-all-paths-lead-to-the-city-zero/solutions/2301538/xi-you-yuan-su-1466-zhong-xin-gui-hua-lu-juiu/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding KMP Algorithm]]></title>
    <link href="http://toughcoder.net/blog/2023/12/11/understanding-kmp-algortihm/"/>
    <updated>2023-12-11T22:21:17+08:00</updated>
    <id>http://toughcoder.net/blog/2023/12/11/understanding-kmp-algortihm</id>
    <content type="html"><![CDATA[<p>字符串模式匹配问题是非常重要且基础的问题，它是解决在目标字符串str中搜索模式字符串pattern出现的次数，或者索引位置。这个问题最为高效的方法就是著名的KMP算法，但这个算法不太好理解，毕竟是解决了从O(n<sup>2</sup>)的复杂度提升到线程O(n)的，今天就来学习并理解一下KMP算法。</p>

<p><a href=""><img src="https://www.boardinfinity.com/blog/content/images/2022/10/27c5585ec1e3503400.webp" title="auto auto" ></a></p>

<!-- more -->


<p>字符串模式匹配问题有很多变幻，比如从头匹配就是前缀匹配，从后就是后缀匹配，找出所有匹配的索引，找第一个，看是否有匹配等等。以及其他能转化为模式匹配的问题，比如回文相关问题，但本质都<strong>模式匹配</strong>问题。这里就以寻找模式pattern在str中的第一个索引位置为例题。</p>

<h2>暴力大法</h2>

<p>世上无难题，只要能用暴力不超时。很容易写出一个暴力方法：</p>

<pre><code class="Java">int index(String str, String pattern) {
    int n = str.length();
    int m = str.length();
    for (int i = 0; i &lt;= n - m; i++) {
        int j = 0;
        while (j &lt; m &amp;&amp; str.charAt(i + j) == pattern.charAt(j)) {
            j++;
        }
        if (j == m) {
            return i;
        }
    }
    return -1;
}
</code></pre>

<p>很明显暴力大法的时间复杂度是O(nm)，需要从str中的每一个字符开始尝试去匹配pattern。str的指针在尝试这一次匹配后，只能向前<strong>步进一个</strong>，这是暴力大法最大的问题。假如能有方法让它步进的快一些，那么就能显著 的提升效率，这就是KMP算法的牛逼之处。</p>

<h2><a href="https://en.wikipedia.org/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm">KMP算法</a></h2>

<p>KMP算法的牛逼之处就是利用<strong>预处理</strong>和已做过的<strong>上一次匹配</strong>来<strong>快速步进</strong>str的i指针，使总的匹配次数降到O(n + m)。</p>

<p>无论是否能理解，好在代码不长，就当模板题背下来吧。</p>

<pre><code class="java">    public int index(String str, String pattern) {
        char[] sc = str.toCharArray();
        char[] pc = pattern.toCharArray();
        int n = sc.length;
        int m = pc.length;
        int[] next = calcNext(pc);

        for (int i = 0, j = 0; i &lt; n; i++) {
            while (j &gt; 0 &amp;&amp; sc[i] != pc[j]) {
                j = next[j - 1];
            }
            if (sc[i] == pc[j]) {
                j++;
            }
            if (j == m) {
                return i - m + 1;
            }
        }

        return -1;
    }

    private int[] calcNext(char[] pattern) {
        int m = pattern.length;
        int[] next = new int[m];
        int k = 0;
        for (int i = 1; i &lt; m; i++) {
            while (k &gt; 0 &amp;&amp; pattern[k] != pattern[i]) {
                k = next[k - 1];
            }
            if (pattern[k] == pattern[i]) {
                k++;
            }
            next[i] = k;
        }
        return next;
    }
</code></pre>

<p><strong>next数组</strong>的现实意义是在pattern中当前字符之前的<strong>最长前后缀长度</strong>。前后缀就是即是前缀，又是后缀，比如&#8217;abcddabc&#8217;，这里&#8217;abc&#8217;就是这个字符串的前后缀。next数组长度与pattern长度一致，next[i]的意义是，在pattern中截止到pattern[i]的子串的最长前后缀长度。要牢记next数组的意义，这会是KMP的重点应用范围，比如题214回文问题。</p>

<p>整个KMP算法，匹配过程并不难理解，主串的指针i从不回溯，一直在前进，而模式串的j指针则不断的跳转到其next数组指示的位置。核心仍是next数组的计算方式，有些难于理解，当作模板背下来也行。当涉及<strong>最长前后缀</strong>的题目时，就可以拿出next数组来使用。</p>

<h2>典型题目</h2>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">  <a href="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/description/">28. 找出字符串中第一个匹配项的下标</a>  </td>
<td style="text-align:left;">  <a href="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/solutions/1650934/by-alexhilton-7n6e/">题解</a>  </td>
<td style="text-align:left;"> KMP板子题 </td>
</tr>
<tr>
<td style="text-align:left;">  <a href="https://leetcode.cn/problems/shortest-palindrome/description/">214. 最短回文串</a>  </td>
<td style="text-align:left;">  <a href="https://leetcode.cn/problems/shortest-palindrome/solutions/2562115/xi-you-yuan-su-214-zui-duan-hui-wen-chua-0nac/">题解</a>  </td>
<td style="text-align:left;"> next数组妙用 </td>
</tr>
<tr>
<td style="text-align:left;">  <a href=""></a>  </td>
<td style="text-align:left;">  <a href="">题解</a>  </td>
<td style="text-align:left;">  </td>
</tr>
</tbody>
</table>


<h2>参考资料</h2>

<ul>
<li><a href="https://www.geeksforgeeks.org/kmp-algorithm-for-pattern-searching/">KMP Algorithm for Pattern Searching</a></li>
<li><a href="https://www.javatpoint.com/daa-knuth-morris-pratt-algorithm">The Knuth-Morris-Pratt (KMP)Algorithm</a></li>
<li><a href="https://cp-algorithms.com/string/prefix-function.html">Prefix function. Knuth–Morris–Pratt algorithm</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/83334559">KMP 算法详解</a></li>
<li><a href="https://www.cnblogs.com/dusf/p/kmp.html">KMP算法详解-彻底清楚了(转载+部分原创) </a></li>
<li><a href="http://data.biancheng.net/view/180.html">KMP算法（快速模式匹配算法）C语言详解</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/145536254">全网最通俗的KMP算法图解</a></li>
<li><a href="https://blog.csdn.net/weixin_46007276/article/details/104372119">数据结构KMP算法配图详解（超详细）</a></li>
<li><a href="https://www.cnblogs.com/lin0/p/16252948.html">图解KMP字符串匹配算法+代码实现</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[线性排序算法总结]]></title>
    <link href="http://toughcoder.net/blog/2023/10/26/understanding-linear-sorting-algorithm/"/>
    <updated>2023-10-26T23:04:18+08:00</updated>
    <id>http://toughcoder.net/blog/2023/10/26/understanding-linear-sorting-algorithm</id>
    <content type="html"><![CDATA[<p><strong>排序</strong>是程序设计中的最为基础也是最为重要的算法，从程序设计这一行业开始，便有了对排序的研究，至今到了人工智能大行其道的时代，算法科学家们对排序的探索仍未停止。这是因为计算机是处理信息的最为高效的工具，如何高效的处理信息则是计算机科学的重中之重，而要想高效的处理信息，就必须先对信息进行排序，因为各种高效率的信息检索必须要基于已排序的数据。</p>

<p><a href=""><img src="https://i0.wp.com/www.xamnation.com/wp-content/uploads/2020/07/sorting-algorithms.png?fit=2240%2C1260&amp;ssl=1" title="auto auto" ></a></p>

<!-- more -->


<p>总的来说排序算法分为三大类：</p>

<ol>
<li>常规排序，也称为低效排序，如冒泡排序，插入排序，选择排序等，复杂度是O(n<sup>2</sup>)，空间复杂度都为O(1)</li>
<li>高效排序，如谢尔排序，快速排序，归并排序，堆排序等，复杂度是O(nlogn)，空间复杂度一般为O(logn)</li>
<li>线性排序，或者叫做非比较排序，仅针对特定数据集（有固定范围的整数集合）有效，如计数排序，基数排序，桶排序等，复杂度是O(n)，但至少需要O(n)的空间复杂度</li>
</ol>


<p>排序算法属于编程的基础，相关的文章一大把，集大成者有Yu神的<a href="https://leetcode.cn/circle/discuss/eBo9UB/">十大排序从入门到入赘</a>。今天重点整理一下线性排序算法。</p>

<h2><a href="https://en.wikipedia.org/wiki/Counting_sort">计数排序</a></h2>

<p><img src="https://www.cdn.geeksforgeeks.org/wp-content/uploads/scene02521.jpg" alt="" /></p>

<p>计数排序的核心思想是<strong>统计输入数组每个元素的频次</strong>，然后按照频次表的顺序把原始数据都输出出来。它的输入必须是一组有固定范围的整数，而且范围不应该太大，否则空间浪费严重。具体步骤如下：</p>

<ol>
<li>找出输入数据的范围，即其最大值max，创建一个长度为max + 1的整数数组，这是频次数组freq</li>
<li>遍历输入数组，对其元素进行频次统计，也就是把元素当作频次数组的下标，来统计freq[arr[i]]++</li>
<li>遍历频次数组，按频次输出元素，得到的就是一个有序数组</li>
</ol>


<p>伪码如下：</p>

<pre><code class="python3">def countSort(arr):
    len = max(arr) + 1
    freq = [0] * len
    for x in arr:
        freq[x]++
    res = []
    for i in range(len):
        for k in range(freq[i]):
            res.append(i)
    return res
</code></pre>

<h3>具有稳定特质的计数排序</h3>

<p>默认的方法（上面描述）的<strong>是不稳定的</strong>，所谓排序的稳定性是指对于比较起来相等的两个元素能否在结果数组中保留它们在原数组的先后顺序。一般情况下，不需要稳定时也不用管。但当在其他地方使用计数排序时，如在基数排序中使用计数排序，那么稳定性就相当重要了。</p>

<p>如果想要稳定，就需要额外做些事情：<strong>要保证先放入的数先输出（在前面），后放的后输出（在后面）</strong>，可以对频次数组求前缀和，然后遍历频次时是从后往前遍历，同时更新频次：</p>

<pre><code class="python3">def stableCoutingSort(arr):
    n = len(arr)
    # find max to determine the range of input array
    len = max(arr) + 1
    freq = [0] * len
    # count the frequency
    for x in arr:
        freq[x]++
    # presum the frequency
    for i in range(1, len):
        freq[i] += frq[i - 1]
    # output by iterating backwardly
    out = [0] * n
    for i in range(n - 1, -1, -1):
        out[freq[arr[i]] - 1] = arr[i]
        freq[arr[i]]--
    return out
</code></pre>

<h3>应用条件</h3>

<p>需要十分注意，计数排序可应用的条件很严格，只有数据集是范围不大的正整数时才可以使用，要不然空间浪费严重。最适合应用计数排序的场景是数组数值范围很小，但元素数量很多，也就是说<strong>元素数量远大于数值范围</strong>，比如说基数排序中，针对每一数位排序时，就是典型应用计数排序的地方，这时数值范围只有0~9，元素数量可能很多，非常适合计数排序。</p>

<p>当然，有负数时也可以使用，这时需要把数据加上最小的负数，平移到0以后就可以了，比如最小值（负数）是min，那么转化为arr[i]-min即可。</p>

<h2><a href="https://en.wikipedia.org/wiki/Radix_sort">基数排序</a></h2>

<p><img src="https://image1.slideserve.com/2528167/radix-sort-in-action4-l.jpg" alt="" /></p>

<p>基数排序是以<strong>整数数制的数位为依据</strong>来排序，比如123，一共有3个数位分别是1，2和3。把数组中的每个元素都按照它们的每一个数位进行排序，之后即是结果，可以从低位到位的顺序（右到左），也可以从高位到低位的顺序（左到右）。针对每个数位排元素时可以应用计数排序。但要是<strong>稳定版本的计数排序</strong>，比如{11, 23, 25}三个数，先按最低位排序后是{11, 23, 25}，这时再按十分位排序时，如果不稳定就可能会排出{11, 25, 23}这样的结果，因此 需要稳定版本的排序。具体过程如下：</p>

<ol>
<li>求出最大数位，或者说<strong>最宽的数</strong>，对于整数来说也就是找出最大值，然后求出其数位宽度width</li>
<li>对每个数位进行循环，循环次数就是width，每一轮就是针对 一个数位排序，可以用稳定版本的计数排序</li>
<li>结束后就得到了结果</li>
</ol>


<pre><code class="python3">def radixSort(arr):
    n = len(arr)
    m = max(arr)
    width = 0
    base = 10
    while m != 0:
        width++
        m /= base
    out = [0] * n
    for i in range(width):
        freq = [0] * 10
        for x in arr:
            ridx = (x % base) / (base / 10)
            freq[ridx]++

        for j in range(1, 10):
            freq[j] += freq[j - 1]
        for j in range(n - 1, -1, -1):
            idx = (arr[j] % base) / (base / 10)
            out[freq[idx] - 1] = arr[j]
            freq[idx]--
        arr = out
        base *= 10

    return arr
</code></pre>

<h3>复杂度和应用范围</h3>

<p>跟三个变量有关，输入数组长度n，最大宽度width，以及数制数位的范围d，时间复杂度为O(width * (n + d))，对于常规整数来说d是10，而width顶多也就10左右（整数有范围的），都可忽略，因此时间复杂度是O(n)。空间复杂度也是O(n)。</p>

<p>基数排序可以应用于整数，对于有负数的情况，只需要把数平移到0以右就可以了。</p>

<p>另外，可以拓展到其他数制，比如16进制，8进制，甚至字符串也都可以。</p>

<h2><a href="https://en.wikipedia.org/wiki/Bucket_sort">桶排序</a></h2>

<p><img src="https://www.simplilearn.com/ice9/free_resources_article_thumb/Bucket-Sort-Algorithm-Soni/what-is-bucket-sort-algorithm.png" alt="" /></p>

<p>桶排序其实是<strong>分治</strong>，它的核心思想是把数据以一定的数据范围分成若干个桶，每个桶再应用其他的排序算法，然后再按照桶的顺序把桶里的数据接在一起就是结果了：</p>

<ol>
<li>确定数值范围min, max和桶数量k，然后得到一些区间</li>
<li>以这些区间来把数据进行分桶</li>
<li>每个桶单独排序</li>
<li>以桶的顺序 把结果连接在一起</li>
</ol>


<pre><code class="python3">def bucketSort(arr):
    n = len(arr)
    k = n / 4
    min = min(arr)
    max = max(arr)
    buckets = [[] for _ in range(k)]
    interval = (max - min) / (k - 1)
    for x in arr:
        bidx = int((x - min) / interval)
        buckets[bidx].append(x)

    for b in buckets:
        sort(b)
    out = []
    for b in buckets:
        out.extend(b)
    return out
</code></pre>

<h3>复杂度与适用范围</h3>

<p>复杂度取决 于桶的个数k以及每个桶的排序方法，如果采用O(n<sup>2</sup>)，那么就会是O(n<sup>2</sup> / k)，如果采用O(nlogn)就会是O(nlog(n/k))，空间复杂度是O(n)。</p>

<p>需要注意，<strong>桶排序适用于浮点型</strong>，只要是数就可以。至于稳定性，则要看桶内排序算法的选择。</p>

<p>其实，如果是整数，无论范围是啥样的，都没有必要采用桶排序，因为桶排序 的复杂度不会估于O(nlogn)的。而如果桶内再采用计数或者基数排序的话（假如输入的是整数数组）就相当于脱了裤子放屁，因为本可以不用分桶的，直接采用计数排序或者基数排序。</p>

<p>桶排序适用于<strong>数据在桶中分布较均匀</strong>的场景，这样性能会达到最优。因为如果桶分配的不均匀，假如某一个桶中集中了绝大部分数据，其他桶几乎没有，这跟不分桶有啥区别（就像一个极不平衡的二叉树一样）。</p>

<h3>典型问题</h3>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/contains-duplicate-iii/description/">220. 存在重复元素 III</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/contains-duplicate-iii/solutions/2566509/xi-you-yuan-su-220-cun-zai-zhong-fu-yuan-7zh8/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h2>总结</h2>

<p>今天重点学习了三种非比较排序算法，都是线性复杂度的，但它们并不是普适的算法，都<strong>有着特定的应用场景</strong>。要深刻理解它的原理和适用范围，以在实际运用中能够根据实际的问题灵活选择。</p>

<p>对于整数集合而言，如果元数数量远大于其数值范围，那么就用计数排序；否则就用基数排序。</p>

<p>对于浮点数，可以考虑使用桶排序。</p>

<p>当然 不可以死学，这些算法背后的核心思想也是可以用来解其他的题目的，比如桶的分治思想，以及像基数的以数位来处理问题的思想，可以拓展到字符排序等等。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://leetcode.cn/circle/discuss/eBo9UB/">十大排序从入门到入赘</a></li>
<li><a href="https://www.geeksforgeeks.org/counting-sort/">Counting Sort – Data Structures and Algorithms Tutorials</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1684188">漫画：什么是计数排序？</a></li>
<li><a href="https://oi-wiki.org/basic/counting-sort/">计数排序</a></li>
<li><a href="https://www.geeksforgeeks.org/radix-sort/">Radix sort</a></li>
<li><a href="https://www.cnblogs.com/bigsai/p/13977411.html">八大排序算法—16张图搞懂基数排序</a></li>
<li><a href="https://oi-wiki.org/basic/radix-sort/">基数排序</a></li>
<li><a href="https://www.geeksforgeeks.org/bucket-sort-2/">Bucket sort</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/125737294">【算法】排序算法之桶排序</a></li>
<li><a href="https://oi-wiki.org/basic/bucket-sort/">桶排序</a></li>
<li><a href="http://data.biancheng.net/view/115.html">桶排序（箱排序）原理及其时间复杂度详解</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
