<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Algorithm | 稀有猿诉]]></title>
  <link href="https://alexhilton.github.io/blog/categories/algorithm/atom.xml" rel="self"/>
  <link href="https://alexhilton.github.io/"/>
  <updated>2025-10-14T22:50:03+08:00</updated>
  <id>https://alexhilton.github.io/</id>
  <author>
    <name><![CDATA[Alex Hilton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Shortest Path in Graph]]></title>
    <link href="https://alexhilton.github.io/blog/2025/04/26/shortest-path-in-graph/"/>
    <updated>2025-04-26T21:28:55+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/04/26/shortest-path-in-graph</id>
    <content type="html"><![CDATA[<p>图中的路径问题，特别是最短路径问题是图论中算法的核心，今天 就来总结 一下。</p>

<p><a href=""><img src="https://www.mbloging.com/_next/image?url=https%3A%2F%2Fcdn.sanity.io%2Fimages%2Fyynr1uml%2Fproduction%2F0b7098c6c641f29656d920a12b6a36feade61e38-1024x576.jpg%3Fw%3D1024%26auto%3Dformat&amp;w=1920&amp;q=75" title="auto auto" ></a></p>

<!-- more -->


<h2>BFS求无权最短径</h2>

<p>对于 无权图，用BFS就能找到两个节点之间的最短路径，这是BFS的天然优势。遍历 的时候 要注意 用「圈层式」遍历，也就是说对于 当前节点，把其相邻节点遍历 完，才能算走了一步。</p>

<h2>Dijkstra求有向无环带权图的最短路径</h2>

<p>对于有向无环图DAG，带有权重的最短路径问题可以用Dijkstra算法来求解。具体参见<a href="https://alexhilton.github.io/blog/2022/09/12/understanding-dijkstra-algorithm/">Understanding Dijkstra Algorithm</a>。</p>

<h2>Floyd</h2>

<ul>
<li><p><a href="https://www.programiz.com/dsa/floyd-warshall-algorithm">Floyd-Warshall Algorithm</a></p></li>
<li><p><a href="https://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm">Floyd–Warshall algorithm(Wikipedia)</a></p></li>
<li><a href="https://www.tutorialspoint.com/data_structures_algorithms/floyd_warshall_algorithm.htm">Floyd Warshall Algorithm</a></li>
</ul>


<h2>Bellman Ford</h2>

<p>Bellman Ford算法能处理负权重，这是与其他算法不同之处。</p>

<ul>
<li><a href="https://en.wikipedia.org/wiki/Bellman%E2%80%93Ford_algorithm">Bellman–Ford algorithm(Wikipedia)</a></li>
<li><a href="https://www.programiz.com/dsa/bellman-ford-algorithm">Bellman Ford&rsquo;s Algorithm</a></li>
<li><a href="https://brilliant.org/wiki/bellman-ford-algorithm/">Bellman-Ford Algorithm</a></li>
</ul>


<h2>SPFA</h2>

<p>Shortest Path Faster Algorithm，SPFA，基于Bellman Ford优化出来的更快速的算法。SPFA is an optimization of Bellman Ford algorithm.</p>

<ul>
<li><a href="https://cp-algorithms.com/graph/bellman_ford.html">Bellman-Ford Algorithm</a></li>
<li><a href="https://stackoverflow.com/questions/7710995/shortest-paths-faster-spfa-algorithm">Shortest Paths Faster - SPFA Algorithm?</a></li>
<li><a href="https://www.ultipa.com/document/ultipa-graph-analytics-algorithms/spfa/v5.0">Shortest Path Faster Algorithm (SPFA)</a></li>
</ul>


<h2>典型问题</h2>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/cheapest-flights-within-k-stops/description/">787. K 站中转内最便宜的航班</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/cheapest-flights-within-k-stops/solutions/3637197/xi-you-yuan-su-787-k-zhan-zhong-zhuan-ne-xik1/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/minimum-cost-to-reach-destination-in-time/description/">1928. 规定时间内到达终点的最小花费</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/minimum-cost-to-reach-destination-in-time/solutions/3661240/xi-you-yuan-su-1928-gui-ding-shi-jian-ne-omo5/">题解</a> </td>
<td style="text-align:left;"> 787的变种 </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h2>References</h2>

<ul>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&amp;mid=2247488007&amp;idx=1&amp;sn=9d0dcfdf475168d26a5a4bd6fcd3505d&amp;chksm=fd9cb918caeb300e1c8844583db5c5318a89e60d8d552747ff8c2256910d32acd9013c93058f&amp;token=754098973&amp;lang=zh_CN&amp;poc_token=HBXK_Wej6Ul4b-A49RUuWn8ZDe0YvHMH9w7EGTxA">【最短路/必背模板】涵盖所有的「存图方式」与「最短路算法（详尽注释）」</a></li>
<li><a href="https://leetcode.cn/problems/cheapest-flights-within-k-stops/solutions/955290/gong-shui-san-xie-xiang-jie-bellman-ford-dc94/">【宫水三叶】运用 Bellman Ford 求解有限制的最短路问题</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding Algorithm Tarjan]]></title>
    <link href="https://alexhilton.github.io/blog/2025/03/07/understanding-algorithm-tarjan/"/>
    <updated>2025-03-07T20:45:57+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/03/07/understanding-algorithm-tarjan</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p><a href="https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm">Tarjan算法</a>是用于寻找图中强连通组件的高效算法。通常叫做「割点」或者「割边」，也叫做桥，也就是说如果去掉了某个节点，或者某条边，图中的连通分量数量会增加，那么这样的节点就是割点，这样的边就是桥。</p>

<p>比如说，下面这个图中的节点2就是一个「割点」：</p>

<p><a href=""><img src="https://oi-wiki.org/graph/images/cut1.svg" title="auto auto" ></a></p>

<!-- more -->


<p>而下面这个图中的红色的边就是「桥」：</p>

<p><img src="https://oi-wiki.org/graph/images/bridge1.svg" alt="Cut edge/Bridge" /></p>

<h2>Tarjan&rsquo;s Algorithm</h2>

<p>寻找「割点」和「桥」的朴素方法是，遍历每一个节点，或者边，尝试去掉它，然后查看连通分量的数量有没有增加，显然这样复杂度很高至少是O(n<sup>2</sup>)的，所以要介绍一个常用的算法：Tarjan。</p>

<p>为了简单，假定图的节点为0~n-1，需要两个辅助数组disc[n]用以表示每个节点被访问到的次序，或者说被访问到的时间戳，需要注意，这个对于图中节点来说是唯一的，且与每个节点是一一对应的，代表着遍历过程中访问到每个节点的次序。目的是用于唯一标识每个节点，以及节点在遍历中的次序。</p>

<p>另一个辅助数组是low[n]，它记录的是当前节点所在的子树中被访问到的最早的节点，也就是强连通分量子树的根。也就是说low[u]的值是包含u在内的子树的根，它一定是最早被访问的。原理在于，强连通分量一定有环，那么从当前节点u再往回返回到的u之前的节点时，就形成了环，也即是连通分量，low[u]就记录着这个连通分量的根，也即最早被访问到的节点。显然，当low[u] = u时，就找到了这个根节点，当然也找到了一个强连通分量，如果在遍历过程中记录顶点，那么当low[u] = u时，记录过的顶点就都在一个强连通分量里面。</p>

<p>需要注意的是，这里遍历的方法要用DFS，因为DFS肯定能以最快的方式找到环，回到已遍历过的节点。</p>

<h2>典型题目</h2>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/critical-connections-in-a-network/description/">1192. 查找集群内的关键连接</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/critical-connections-in-a-network/solutions/3599268/xi-you-yuan-su-1192-cha-zhao-ji-qun-nei-8wm0m/">题解</a> </td>
<td style="text-align:left;"> 板子题 </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h2>关联知识</h2>

<p><a href="https://en.wikipedia.org/wiki/Strongly_connected_component">强连通分量</a>，强连通分量是指图中的一组相互均可达的节点组成的子集。注意，强连通分量里面的节点，只需要相互均可达，并不要求直接有边连接。</p>

<p>不同的强连通分量之间的连接（即边或者顶点）即是「割点」和「桥」。</p>

<p>寻找强连通分量的算法，除了Tarjan以外，还有<a href="https://en.wikipedia.org/wiki/Kosaraju%27s_algorithm">Kosaraju算法</a>。</p>

<h2>References</h2>

<ul>
<li><a href="https://www.geeksforgeeks.org/tarjan-algorithm-find-strongly-connected-components/">Tarjan’s Algorithm to find Strongly Connected Components</a></li>
<li><a href="https://www.baeldung.com/cs/scc-tarjans-algorithm">Finding Strongly Connected Components: Tarjan’s Algorithm</a></li>
<li><a href="https://oi-wiki.org/graph/cut/">割点和桥</a></li>
<li><a href="https://leetcode.cn/problems/critical-connections-in-a-network/solutions/2078647/mobanjibie-by-lao-song-2f-1r0d/?envType=study-plan-v2&amp;envId=graph-theory">Tarjan 算法的模板题（Java 版本）</a></li>
<li><a href="https://www.geeksforgeeks.org/strongly-connected-components/">Strongly Connected Components</a></li>
<li><a href="https://www.geeksforgeeks.org/kosarajus-algorithm-in-c/">Kosaraju’s Algorithm in C</a></li>
<li><a href="https://www.baeldung.com/cs/kosaraju-algorithm-scc">Finding Strongly Connected Components: Kosaraju’s Algorithm</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sub Array and Seb Sequences Made Easy]]></title>
    <link href="https://alexhilton.github.io/blog/2024/09/18/sub-array-and-seb-sequences-made-easy/"/>
    <updated>2024-09-18T22:11:15+08:00</updated>
    <id>https://alexhilton.github.io/blog/2024/09/18/sub-array-and-seb-sequences-made-easy</id>
    <content type="html"><![CDATA[<p>子数组和子序列，特别是在一个区间内，或者一个窗口内的子数组个数或者子序列个数问题是非常常见的一类题目，与其他算法结合在一起，求子数组或者子序列数量是非常常见的题目，今天就来总结 一下。</p>

<p><a href=""><img src="https://media.geeksforgeeks.org/wp-content/cdn-uploads/20220620163127/subarray.png" title="auto auto" ></a></p>

<!-- more -->


<h2>如何统计区间内子数组数量</h2>

<p>子数组的数量只与区间长度有关系，对于一个区间长度为n的数组，其非空子数组数量为n * (n+1)/2。</p>

<p>具体计算过程，可以用子数组长度来递推：</p>

<p>1). 长度为1，这时子数组数量为n个
2). 长度为2时，这时子数组数量为n - 1个
3). 长度为n - 1时，这时子数组数量为2
4). 长度为n时，这时子数组数量只有一个1，为1</p>

<p>可以发现， 这是一个等差数列，求和之后就是n*(n+1)/2。</p>

<h2>如何统计区间内子序列数量</h2>

<p>子序列是子数组的特殊形式，它不要求保留在原数组中的顺序。一个长度为k的区间内所有子序列的个数就是一个幂集，每个元素都有「选」和「不选」，因此这个区间所有子序列个数是2<sup>k</sup>个，包括空子序列，如果要求非空，那就再减去一个1。</p>

<p>具体计算过程，需要用到组合数学：</p>

<p>1). 一个都不选C(n, 0) = 1
2). 一个一个的选，C(n, 1) = n
2). 两个选，C(n,2)
3). n - 1个，C(n, n - 1)
4). n个，C(n, n) = 1</p>

<p>求和就是2<sup>n</sup>，如果非空就是2<sup>n</sup> - 1。</p>

<h3>典型题目</h3>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/number-of-subsequences-that-satisfy-the-given-sum-condition/description/">1498. 满足条件的子序列数目</a> </td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h2>References</h2>

<ul>
<li><a href="https://www.geeksforgeeks.org/array-subarray-subsequence-and-subset/">Subarrays, Subsequences, and Subsets in Array</a></li>
<li><a href="https://www.geeksforgeeks.org/count-distinct-subsequences/">Count Distinct Subsequences</a></li>
<li><a href="https://www.geeksforgeeks.org/count-of-subarrays-in-an-array-containing-numbers-from-1-to-the-length-of-subarray/">Count of Subarrays in an array containing numbers from 1 to the length of subarray</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[贡献法算法总结]]></title>
    <link href="https://alexhilton.github.io/blog/2024/08/18/credit-algorithm-made-easy/"/>
    <updated>2024-08-18T12:57:52+08:00</updated>
    <id>https://alexhilton.github.io/blog/2024/08/18/credit-algorithm-made-easy</id>
    <content type="html"><![CDATA[<p>贡献法是一种比较偏门的算法，与贪心类似，并没有固定的范式，思路也非常的清奇。用朴素的方式通常会超时，或者甚至整理不出来思路，无法实现编码。</p>

<p>这类算法题型，更多的还是要靠经验和思维，遇到类似的题目就往贡献法上想。</p>

<p><a href=""><img src="https://www.investopedia.com/thmb/J33BG-Cf03bW8-O4kXJfuht3gHA=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/algorithm-df9b57e8ea7c494b891da25987643fab.jpg" title="auto auto" ></a></p>

<!-- more -->


<p>总的来说，贡献法就是不直接思考如何做运算，而是运算之后净增量或者净减少量，或者当前元素在运行过后对净增量或者净减量的贡献值是多少，从这个角度去思考。</p>

<h2>典型题目</h2>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/sum-of-subsequence-widths/description/">891. 子序列宽度之和</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/sum-of-subsequence-widths/solutions/2809957/xi-you-yuan-su-891-zi-xu-lie-kuan-du-zhi-igda/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/sum-of-subarray-minimums/description/">907. 子数组的最小值之和</a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/distribute-coins-in-binary-tree/description/">979. 在二叉树中分配硬币</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/distribute-coins-in-binary-tree/solutions/2770062/xi-you-yuan-su-979-zai-er-cha-shu-zhong-xg0ef/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/maximum-subarray-min-product/description/">1856. 子数组最小乘积的最大值</a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/sum-of-subarray-ranges/description/">2104. 子数组范围和</a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/sum-of-total-strength-of-wizards/description/">2281. 巫师的总力量和</a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/power-of-heroes/description/">2681. 英雄的力量</a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h2>参考资料</h2>

<ul>
<li><a href="https://blog.csdn.net/weixin_60033897/article/details/136580127">算法学习系列（四十）：贡献法</a></li>
<li><a href="https://blog.csdn.net/qq_43406895/article/details/131514319">【算法】贡献法相关题目练习</a></li>
<li><a href="https://juejin.cn/post/7350185416652275712">贡献法（总体之和等于个体贡献度之和）（蓝桥杯）</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Principle of Inclusion Exclusion Made Easy]]></title>
    <link href="https://alexhilton.github.io/blog/2024/06/13/inclusion-exclusion-principle/"/>
    <updated>2024-06-13T20:45:29+08:00</updated>
    <id>https://alexhilton.github.io/blog/2024/06/13/inclusion-exclusion-principle</id>
    <content type="html"><![CDATA[<p><a href="https://oi-wiki.org/math/combinatorics/inclusion-exclusion-principle/">容斥原理</a>，是指在计数的时候，先不考虑重复问题，先把包含某种对象的统计出来，再把重复的排除掉。</p>

<p><a href=""><img src="https://tse2-mm.cn.bing.net/th/id/OIP-C.oW-5-IkJnUeOjVM7ZBtMAwAAAA?rs=1&amp;pid=ImgDetMain" title="auto auto" ></a></p>

<!-- more -->


<p>比如说，考试，15人数学满分，12人语文满分，并且有4人语文和数学都满分，求至少有一个人满分的同学有多少个？</p>

<p>答案是15 + 12 - 4。</p>

<p>理解起来就是，重复的部分被多加了一次，最后再减去重复的人即可。</p>

<p>再如小于某个数x中，能被3或者5整除的数有多少？答案是 x/3 + x / 5 - x /3x5。同样是重复的计算了两次，减去一次即可。</p>

<p>容斥原理，不复杂，也不能单独用来求解问题，一般都是用于统计计数。</p>

<h3>相关问题</h3>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/nth-magical-number/description/">878. 第 N 个神奇数字</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/nth-magical-number/solutions/2808476/xi-you-yuan-su-878-di-n-ge-shen-qi-shu-z-udgp/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/ugly-number-iii/description/">1201. 丑数 III</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/ugly-number-iii/solutions/2808790/xi-you-yuan-su-1201-chou-shu-iiishu-xue-wha7w/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h2>References</h2>

<ul>
<li><a href="https://brilliant.org/wiki/principle-of-inclusion-and-exclusion-pie/">Principle of Inclusion and Exclusion (PIE)</a></li>
<li><a href="https://mathworld.wolfram.com/Inclusion-ExclusionPrinciple.html">Inclusion-Exclusion Principle</a></li>
<li><a href="https://www.geeksforgeeks.org/inclusion-exclusion-various-applications/">Inclusion-Exclusion and its various Applications</a></li>
<li><a href="https://www.cut-the-knot.org/arithmetic/combinatorics/InclusionExclusion.shtml">The Inclusion-Exclusion Principle</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
