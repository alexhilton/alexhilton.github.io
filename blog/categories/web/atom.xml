<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Web | 稀有猿诉]]></title>
  <link href="http://toughcoder.net/blog/categories/web/atom.xml" rel="self"/>
  <link href="http://toughcoder.net/"/>
  <updated>2024-01-14T21:14:58+08:00</updated>
  <id>http://toughcoder.net/</id>
  <author>
    <name><![CDATA[Alex Hilton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[初级前端的专业的CSS技巧]]></title>
    <link href="http://toughcoder.net/blog/2015/05/22/css-pro-tricks-for-starters/"/>
    <updated>2015-05-22T21:14:26+08:00</updated>
    <id>http://toughcoder.net/blog/2015/05/22/css-pro-tricks-for-starters</id>
    <content type="html"><![CDATA[<p>这篇文章的读者应该是刚开始开发，或者准备开始开发前端的有经验的开发者，总结了一些非常有用的可以快速上手的CSS布局技巧。</p>

<p><a href=""><img src="https://img.alicdn.com/imgextra/i2/715978679/TB2I1odmVXXXXb3XXXXXXXXXXXX_!!715978679.jpg"></a></p>

<h2>HTML的布局特点</h2>

<p>要理解默认的布局流，块级元素是从上到下，行内元素是从左到右。都是左对齐。</p>

<!-- more -->


<h2>一切皆为框，块级元素与行内元素</h2>

<p>HTML的元素分为二个种类，一个是块级元素，一个是行内元素。块级元素的特点是独自开启一行，且独自中据一行；行内元素的特点是在一行内显示，自己多大就占据多大空间。可以通过display属性来改变元素默认的显示属性。</p>

<p>常见的块级元素是：div, p, ol, ul, li</p>

<p>常见的行内元素是: a, img, span</p>

<h2>元素和容器</h2>

<p>对于常见的GUI框架，都有二种东西来做布局，一个是元素（通常叫Widget），另一个是布局管理器，也就是用于管理或者组合Widget用的。在安卓里就是View和ViewGroup。</p>

<p>使用布局管理器的目的也很简单，就是为了把部分变成整体，方便操作。</p>

<p>div是用来组合和管理块级元素的。而span是用来组合和管理行内元素。</p>

<p>建议多多使用div和span来组合和管理你的布局，就像使用ViewGroup来管理和组合View一样。</p>

<h2>理解盒子模型</h2>

<p>其实，有过其他GUI框架经验的人理解盒子模型很容易，margin是border外的间距，padding是border内间距，整体元素占据的空间就是margin+border+padding+元素本身的大小。</p>

<p><img class="<a" src="href="http://www.w3school.com.cn/i/ct_boxmodel.gif">http://www.w3school.com.cn/i/ct_boxmodel.gif</a>&#8221;></p>

<h2>父元素的大小与子元素的关系</h2>

<p>比如安卓，父元素的大小是受子元素影响的，父元素可是基于子元素大小来计算（wrap_content），当子元素超出父元素时，子元素是会被clip的。</p>

<p>CSS里却灵活的多，默认的，父元素的大小与子元素没有关系，需要分别单独指定，也无法让其wrap_content。当子元素的大小超过了父元素时，是通过overflow属性的决定如何显示的：hidden，表示clip；scoll表示用scrollbar来滚动。</p>

<h2>对齐方式</h2>

<p>左对齐或者右对齐也是布局中常见的需求。对于块元素可以通过float属性来控制，默认的float是left。当设置为right时，就可以把元素右对齐。通常后面跟一个clear: both来清除float属性。因为float会改变默认的布局流，后面所有的元素都将按此方式来排，当然这不是期望的。<a href="http://www.w3schools.com/css/css_float.asp">float的介绍</a>以及<a href="https://css-tricks.com/all-about-floats/">关于float</a>都是很好的文章。</p>

<p>当然，对于position不是static的，就要通过left/right来控制了。</p>

<h2>居中方式</h2>

<p>居中也是非常常见的一个需求。</p>

<h3>让某一个元素在整个屏幕中完全居中</h3>

<p>比如显示一个Dialog，肯定是要在屏幕中央显示的了。
让元素在整体屏幕居中，肯定要把元素从整体文档中拿出来，也就是不能用正常的文档流。所以这个元素应该是position: fixed，然后它的left和top要设置为50%，但是这样子后是元素的左上角是在屏幕正中，所以为了让元素居中还要把元素向左和向上移动其大小的50%，可以通过transform来实现，完整的CSS如下：</p>

<pre><code class="CSS">.center {
   display: block;
   position: fixed;
   top: 50%;
   left: 50%;
   transform: translate(-50%, -50%);
}
</code></pre>

<p>详细的解释请参阅<a href="https://css-tricks.com/quick-css-trick-how-to-center-an-object-exactly-in-the-center/">这篇文章</a>。</p>

<h3>块级元素的居中方式</h3>

<p>把margin设置为auto一般情况下可以把块级元素居中，但需要指定元素的宽和高，这样浏览器才能计算出来，比如：</p>

<pre><code class="CSS">.title {
   margin: auto;
   width: 1rem;
   height; 0.4rem;
}
</code></pre>

<h3><p>元素内的文字居中</h3>

<p>上面的方法只能让p元素在其父元素内居中，但是它内部的文字仍然不居中，比如当有四个文字时，调好了，居中，但是当只有一个文字时却又不能居中了。这里就要用到一个新的显示属性flex，是flexible的缩写，意思是灵活的布局。比如：</p>

<pre><code class="CSS">.title {
   display: flex;
   justify-content: center; /* align horizontal */
   align-items: center; /* align vertical */
   /* the following are for Browser compatibility */
   display: -webkit-box; 
   display: -webkit-flex;
   -webkit-box-align: center; 
   -webkit-flex-align: center;
   -webkit-align-items: center;
}
</code></pre>

<p>具体解释可以参考<a href="http://stackoverflow.com/questions/17213113/vertical-centering-flexbox-overlay-in-ios-safari">原文</a>以及<a href="http://stackoverflow.com/questions/8865458/how-to-align-text-vertically-center-in-div-with-css">这里</a>。</p>

<h2>定位方式</h2>

<p>默认的流式布局，块级元素从上往下排，一个接着一个的。如果想要让某个元素固定在某个位置，或者想要层叠元素怎么办。现在的Web越来越像客户端，有顶部菜单栏，有侧面菜单栏，有弹出式菜单，在层叠式菜单等等。这些常用且又好用的交互方式又是如何实现的呢?
这就要用到position属性了。position也就是给元素定位，确定其在文档(document)中的位置，默认值是static，也就是从上到下，一个挨着一个。</p>

<ul>
<li>relative &ndash; 相对于这个元素在正常文档流中的位置，正常流中的位置仍然保留。</li>
<li>absolute &ndash; 这个元素会从自觉流中移除，就好像它不存在一样。这个元素的定位会相对于它的第一个定位不是static的父元素，也就是从它的父元素向上找，找到第一个定位属性不是static的元素，如果找不到就使用根元素（html）。</li>
<li>fixed &ndash; 固定在窗口中，从正常流拿出来，其他元素布局就好像属性为fixed的不存在一样，不会随着文档滚动页滚动，可以重叠，用z-index来指定谁在上面，谁在下面。流行的侧面菜单，顶部菜单等都是用此方式实现。</li>
</ul>


<p>relative，absolute以及fixed属性都要同时使用top/right/left/bottom来为元素指定位置，它们的含义是元素距离父元素上/右/左/下的距离。</p>

<h2>大小的度量单位</h2>

<p>元素的宽和高，以及字体大小的单位：</p>

<ul>
<li>px &ndash; 像素，像素就是一个屏幕可显示的是小单元，通常视觉给出的标注都是以像素为单位</li>
<li>em &ndash; 相对于父元素的大小，通常这个值会是继承自父元素。所以如果以它为单位，会随着元素的深入这个单位会变得越来越大。</li>
<li>rem &ndash; 根元素字体高度，通常就是HTML的字体高度。这个值更为通用，因为对于一个Document来说这个值是黑固定的，适配性和通用性更好。</li>
<li>pt &ndash; 是点的意思(point)，是在打印设备中常用的单位，一个pt等于1/72英寸。它跟像素（px）一样，都是绝对单位，通用性和适配性不好，一般用的比较少。</li>
</ul>


<p>对于这些单位的详细解释可以参考<a href="http://kyleschaeffer.com/development/css-font-size-em-vs-px-vs-pt-vs/">这篇文章</a>和<a href="http://snook.ca/archives/html_and_css/font-size-with-rem">这篇</a>以及<a href="https://css-tricks.com/rems-ems/">这篇</a>。</p>

<h2>用相对单位控制图片的大小</h2>

<p>不要用img元素的属性width和height，而是用CSS的width，height，因为img属性width和height仅能使用px作为单位，适配性要差一些，而CSS中的width和height是可以使用rem这种相对单位，适配性要好。</p>

<pre><code class="CSS">.icon img {
   width: 1rem;
   height: rem;
}
</code></pre>

<h2>横向显示一个列表</h2>

<p>把&lt;li&gt;的display属性设置为inline-block即可：</p>

<pre><code class="CSS">.nav ol li {
   display: inline-block;
   text-align: center;
}
</code></pre>

<h2>控制元素的可见性</h2>

<p>有二种方式，一种是把display设置为none，这会让浏览器忽略此元素就好像它不存在一样，在渲染时；另一种方式就是通过visibility属性：</p>

<pre><code class="CSS">.show {
   visibility: visible;
}
.hide {
   visibility: hidden;
}
</code></pre>

<h2>注意兼容性</h2>

<p>对于一般的属性或者值最好要注意一下子它的兼容性，一般就是在前面加上-webkit-前缀，因为现在四分之三的浏览器都是Webkit系。</p>

<h2>工具</h2>

<p>欲想事，必先利其器。工具对于开发的重要性对于有经验的人不用多说，是事半功倍的。</p>

<h3>开发工具</h3>

<p>开发工具首选Webstorm。这是JetBrains的作品，IDEA IntellJ，PyCharm都是深受广大开发者喜欢的作品，也是我首选的IDE（NotePad和Vim偏执狂请走开），虽然我也喜欢Vim的简洁和高效，但是对于堆代码来说IDE是最高效的。跟IDEA和PyCharm不一样，WebStorm没有社区版本，这意味着试用了30天后就必须想办法了。。</p>

<h3>调试工具</h3>

<p>到今天，几个流行的浏览器都已经有了调度功能，Firefox的Firebugs，Opera的DragonFly，以及Chrome的devtools，Safari也内置了调试工具，至于IE，我还不知道。它们的功能基本上都是一致的：都能实时查看并修改元素，以及元素的CSS属性；能设置JavaScript的断点，单步调试；能查看Console，以及查看Network网络请求以及storage的使用情况。</p>

<p>可能最受欢迎的还是Chrome的devTools，至少，我是喜欢它。它内置，使用方便，不用装其他的东西，不用什么开发者模式。</p>

<p>详细的可以看<a href="https://developer.chrome.com/devtools/index">官网介绍</a>（自备梯子）。</p>

<p>在调试的时候多使用使用感受一下子就好了。多用”审查元素“找到元素，然后在devtools中修改样式，得到合适的样式的值，然后再去修改源码，能大大提高效率。</p>

<h3>移动端的工具</h3>

<p>如今移动端的流量已经超越PC，而且势头还在增长。一大半的前端都是为移动端而生的。</p>

<h4>Chrome DevTools的移动设备模拟器Emulator</h4>

<p>打开DevTools后，可以在左上角看一一个PC和移动设备的小Icon，点了后就进入了移动设备模拟器，它有各种模拟器：iPhone5, 6, 6s, Nexus 5, 6，iPad， iPad Mini等等，还可以模拟网络条件，良心工具啊。</p>

<p>可以到官方查看<a href="https://developer.chrome.com/devtools/docs/device-mode">更多信息</a>。</p>

<h4>Chrome远端调试</h4>

<p>Chrome和Android都是Google的产品，所以难免结合紧密。对于4.3以上的设备，用Chrome可以像调试PC网页那样来调试设备上的网页。只要在PC的Chrome上打开chrome://inpsect，选择网页就可以了。详细信息也请参考<a href="https://developer.chrome.com/devtools/docs/remote-debugging">官方网站</a>。</p>

<h2>参考</h2>

<ul>
<li><a href="https://css-tricks.com/all-about-floats/">https://css-tricks.com/all-about-floats/</a></li>
<li><a href="https://css-tricks.com/rems-ems/">https://css-tricks.com/rems-ems/</a></li>
<li><a href="http://stackoverflow.com/questions/8865458/how-to-align-text-vertically-center-in-div-with-css">http://stackoverflow.com/questions/8865458/how-to-align-text-vertically-center-in-div-with-css</a></li>
<li><a href="https://css-tricks.com/quick-css-trick-how-to-center-an-object-exactly-in-the-center/">https://css-tricks.com/quick-css-trick-how-to-center-an-object-exactly-in-the-center/</a></li>
</ul>


<h2>应该经常访问的网站</h2>

<ul>
<li><a href="http://www.w3schools.com/">http://www.w3schools.com/</a></li>
<li><a href="http://www.w3school.com.cn/index.html">http://www.w3school.com.cn/index.html</a></li>
<li><a href="http://www.css3maker.com/index.html">http://www.css3maker.com/index.html</a></li>
<li><a href="https://developer.mozilla.org/en-US/">https://developer.mozilla.org/en-US/</a></li>
<li><a href="https://css-tricks.com/">https://css-tricks.com/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS Animation初探]]></title>
    <link href="http://toughcoder.net/blog/2015/05/04/introduction-to-css-animation/"/>
    <updated>2015-05-04T23:47:21+08:00</updated>
    <id>http://toughcoder.net/blog/2015/05/04/introduction-to-css-animation</id>
    <content type="html"><![CDATA[<p>动画在交互设计中是一个十分能加分的东西，用以平滑过度，会让用户体验上几个台阶。对于Web开发也是如此，恰当的使用动画可以让网页使用起来更加的用户友好。这里就来探讨一下CSS中一些动画的实现方式，初识前端，不足之处敬请指正。</p>

<p><a href=""><img src="https://img.alicdn.com/imgextra/i1/715978679/TB2.kzLjVXXXXctXXXXXXXXXXXX_!!715978679.jpg" title="auto auto" ></a></p>

<!-- more -->


<h2>使用transition来实现动画</h2>

<p><a href="http://www.w3schools.com/css/css3_transitions.asp">transition</a>是CSS3中的属性，它的作用就是让CSS的属性以平滑的渐变动画方式来展现而非突然变化，因此可以用来实现一些简单动画。</p>

<p>语法：transition: property duration timing-function delay</p>

<table>
<thead>
<tr>
<th>Value               </th>
<th> Description </th>
</tr>
</thead>
<tbody>
<tr>
<td>property            </td>
<td> 要平滑过度的CSS属性</td>
</tr>
<tr>
<td>duration            </td>
<td> 平滑过度的时长（动画时长）</td>
</tr>
<tr>
<td>timing-function     </td>
<td> 定义过度效果的速度曲线</td>
</tr>
<tr>
<td>delay               </td>
<td> 过度效果何时开始</td>
</tr>
</tbody>
</table>


<p>像其他的CSS写法一样，这四个值也可以单独指定：</p>

<ul>
<li> transition-property</li>
<li> transition-duration</li>
<li> transition-timing</li>
<li> transition-delay</li>
</ul>


<h3>transition的特点</h3>

<ul>
<li> 每当有transtion所指定的属性发生变化时，动画就会被触发，当然也受transition-delay的控制</li>
<li> transition生效的前提是元素在DOM中，所以对于属性display: none之类的是不会起作用的</li>
</ul>


<p>更多关于transition的使用请参考<a href="https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Using_CSS_transitions">这篇文章</a>，相当的详细。</p>

<h2>使用transform来实现动画</h2>

<p><a href="http://www.w3schools.com/cssref/css3_pr_transform.asp">transform</a>是CSS3中新加的属性，用以对元素进行2D或3D的变换，这里变换的意思是几何变换，包括旋转，缩放，移动和倾斜旋转等。</p>

<ul>
<li> translate，translate3d, translateX, translateY, translateZ</li>
<li> rotate, rotate3d, rotateX, rotateY, rotateZ</li>
<li> scale, scale3d, scaleX, scaleY, scaleZ</li>
<li> skew, skewX, skewY</li>
</ul>


<p>用这些来指定是进行什么变换，就像名字所指的，translate是进行2D移动，如translate(10, 11)，translate3d是进行3d移动, 如translate3d(1, 0, 10)，后面带坐标轴就是在某一特定方向上移动，其他几个类似。</p>

<p>需要注意几点：</p>

<ul>
<li> transform只能定义几何变换，不能进行其他的，比如颜色，背景，透明度等非几何属性</li>
<li><p> 指定了transform会立即发生，所以要配合transition一起来使用
 用transition来为transform指定时长，变化曲线以及delay的等关键的动画参数，才能成为真正的动画，否则transform也不会有动画效果。如：</p>

<pre><code class="`css"> transform: translate3d(10, 20, 30);
 transition: transform 300 ease-in;
</code></pre></li>
<li> translate移动的距离是相对于没有transform时的位置
 比如说某元素原来位置是100， 100, 那么translate(10, 10)，后的位置是110, 110，接着再translate(-10, -10)，后位置是90, 90.</li>
<li> 还有就是对于translate最好使用translate3d，尽管可能只是一维的移动，translate3d要更平滑一些。</li>
</ul>


<h2>使用key-frame来实现动画</h2>

<p><a href="http://www.w3schools.com/cssref/css3_pr_animation-keyframes.asp">@keyframe</a>规则是专门用来做动画的，它可以指定具体到某一帧的状态是什么样子的，以整数百分比来指定帧数，再给定CSS属性，就组成了一组状态的变化。比如：</p>

<pre><code class="css">@keyframes mymove {
    0%   {top: 0px;}
    25%  {top: 200px;}
    50%  {top: 100px;}
    75%  {top: 200px;}
    100% {top: 0px;}
}
</code></pre>

<p>就是一个简单的移动动画。
具体的可以参考<a href="http://www.smashingmagazine.com/2011/05/17/an-introduction-to-css3-keyframe-animations/">这篇文章</a>，讲述的还是很清楚的。</p>

<h2>如何选择</h2>

<p>一般来说，如果是移动，旋转或者缩放就使用transform就够了。如果要变化颜色，或者背景色或者可见度，就使用transition就好了。如果是复杂的动画，比如控制多个元素同时做动画，或者动画本身比较复杂还是使用@keyframes。</p>

<h2>流行的动画库</h2>

<p><a href="http://codegeekz.com/css-effect-libraries-creating-beautiful-animations/">这个文章</a>列的很详细，就不再单独的列出来了。如果你知道有其他的库也请与我分享。</p>

<h2>一些不错的资源和网站</h2>

<ul>
<li> <a href="http://www.css3maker.com/index.html">CSS3 Maker</a></li>
<li> <a href="https://css-tricks.com/">CSS tricks</a></li>
<li> <a href="http://caniuse.com/">Can I Use</a></li>
</ul>


<h2>参考</h2>

<ul>
<li> <a href="http://www.smashingmagazine.com/2011/05/17/an-introduction-to-css3-keyframe-animations/">An Introduction To CSS3 Keyframe Animations</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
