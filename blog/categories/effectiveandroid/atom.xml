<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Effectiveandroid | 稀有猿诉]]></title>
  <link href="http://toughcoder.net/blog/categories/effectiveandroid/atom.xml" rel="self"/>
  <link href="http://toughcoder.net/"/>
  <updated>2015-05-04T23:39:42+08:00</updated>
  <id>http://toughcoder.net/</id>
  <author>
    <name><![CDATA[Alex Hilton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android实战技巧：Fragment的那些坑]]></title>
    <link href="http://toughcoder.net/blog/2015/04/30/android-fragment-the-bad-parts/"/>
    <updated>2015-04-30T00:40:26+08:00</updated>
    <id>http://toughcoder.net/blog/2015/04/30/android-fragment-the-bad-parts</id>
    <content type="html"><![CDATA[<p>Fragment是Android在3.0（Homeycomb)版本时加入的用以更灵活的构建多屏幕界面的可UI组件。关于Fragment以基本使用方法可以参考官方的<a href="http://developer.android.com/guide/components/fragments.html">教程</a>和<a href="http://developer.android.com/training/basics/fragments/index.html">最佳实践</a>，以及<a href="http://toughcoder.net/blog/2014/10/22/effective-android-ui-architecture/">选择Activity还是Fragment</a>。
但是Fragment使用起来却远没有教程中说的那样简单，也远比Activity要复杂一些，这里总结了孤在使用Fragment时所遇到的坑。</p>

<p><a href=""><img src="http://www.opensourceforu.com/wp-content/uploads/2011/05/Figure-1-Design-Principle.png" width="480" height="320"></a></p>

<!-- more -->


<h2>嵌套Fragment时Duplicated id或者Tag之痒</h2>

<p>这是一个小坑，但是初学者很容易遇到，特别是在Fragment之中套有Fragment时，且又是布局中添加子Fragment时更容易遇到。</p>

<h3>现象：</h3>

<p>Fragment中套有另一个Fragment，当第二次进入父Fragment时或者由Fragment创建的界面时会抛异常，大致意思是子Fragment的Id或Tag重复了。如果你在layout中给子fragment加了id或者tag，那么一定会遇到此异常。</p>

<h3>原因：</h3>

<p>在添加Fragment时都可以为Fragment指定一个Id或者Tag用以标识这个Fragment。因为每个Activity所附带的Fragment都是放在一个对象池中，在Activity的生命周期里，Fragment仍然在池中，即使是把某一个Fragment从Activity中detach掉（也即用FragmentManager pop掉），这个池是由FragmentManager来管理的。当你再次要以某个id或者Tag添加Fragment时，FragmentManager会在池中检索，如果发现已经存在Fragment对象带有此Id或者Tag时，就会抛此异常并报怨Id重复。这么做的目的就是减少对象的创建，尽可以的复用对象。</p>

<h3>如何破解：</h3>

<ol>
<li>. 在布局中写fragment时，不要添加id或者tag；</li>
<li><p>. 如果非要添加id或者tag，就在代码中添加fragment，如使用Id或者Tag时，先到FragmentManager中查找对象是否存在，不存在时再创建，也即：</p>

<pre><code class="``java">  Fragment target = getFragmentManager().findFragmentByTag("tag");
  if (target == null) {
      targe = new SomeFragment();
  }
  FragmentTransaction ft = getFragmentManager().beginTransaction();
  ft.add(R.id.content, target, "tag");
  ft.commit();
</code></pre></li>
</ol>


<h2>replace之痛</h2>

<h3>现象：</h3>

<p>当有二个相同的整体页面层叠时，想把最后一个布局中的某个用Fragment来replace，会发现，它把前面的replace，后面的没效果。</p>

<h3>原因：</h3>

<p>布局的Id在一个窗体（Activity)中是唯一的，Fragment的replace也是使用此唯一的Id来把相应布局替换成Fragment的。当相同的页面层叠时，同一个Id的布局出现了二次，但Id是一样的。所以FragmentTransaction在replace时仅替换了一个。而不会像期待的那样，替换最后一个页面。</p>

<h3>如何破解：</h3>

<p>如果相同的页面非要层叠，要么不使用Fragment，要么为布局设置不同的Id。这种情况多出现在布局的复用上面，比如某二个页面长的像，所以复用了同一整体布局。但实际的逻辑上不是相同的页面，完全可以为布局设置不同的Id。</p>

<h2>可见性之疼</h2>

<h3>现象：</h3>

<p>当有多个Fragment层叠在一起时，每个Fragment如何能感知其对用户的可见性。比如应用有三个页面，A，B和C，比如A是整体类别列表，B是每个类别的详情，C又是类别的某种更详细的信息，当C显示出来时，A和B怎么能知道它其实对于用户已经不可见了，所以就可以不刷新，不加载数据等等。当C被用户BACK后，B又如何感觉它变成可见了？</p>

<h3>原因：</h3>

<p>Fragment的生命周期与Activity是一样的，添加到Activity会把OnCreate类似的回调走一遍，然后，Activity onResume/onPause/onstart/onStop时，其所持有的Fragment也走相应的onResume/onPause/onstart/onPause。但是Fragment与Activity非常不同的是，Activity当有另一个Activity显示时，当前的Activity会走onPause/onStop，而Fragment则完全没有感知。最多只能从FragmentManager那里知道BackStackState改变了，但是是Fragment增加了，还是减少了，并不能知道。</p>

<h3>如何破解：</h3>

<p>这个一个非常令人蛋疼的问题，简单的页面还好，但是涉及到数据加载或者要针对某些事件（网络）刷新时就有问题了，对用户不可见的页面没必要刷新。可行的解法就是：</p>

<ol>
<li>. 监听FragmentManager的BackStackState的改变</li>
<li>. 定义页面路径深度然后与BackStack深度比较，以感知是否对用户可见
  如前面A是一级，其path为1，B是2，C是3。当前Stack深度为3时，C是可见的，A与B不可见，以此类推。</li>
</ol>


<h2>空白区域的点击之脓</h2>

<h3>现象:</h3>

<p>一个Fragment，层叠在另外一个Fragment或者Activity之上，此Fragment中有一些空白区域，也即Widget之外的空白区域，当点击这些空白区域的时候发现这个Fragment下面的Fragment或者Activity中的View收到了事件并且响应了点击事件。</p>

<h3>原因：</h3>

<p>Fragment的本质就是一个View布局的管理器，当Fragment attach到Activity时，其实就是把Fragment#onCreateView()返回的View，替换掉(如果是用replace)FragmentTransaction#replace中指定的View，或者添加到(如果是add)FragmentTransaction#add()中指定的ViewGroup里面。</p>

<p>当我们以层叠方式显示多个Fragment时，通常的做法就是弄一个FrameLayout，然后每次把Fragment add到此布局。因此，这时Activity的页面布局树实际上就是一个FrameLayout里面包含几个View。</p>

<p>所以，当点击上面Fragment的空白区域时，如果事件没被吃掉，就会向下传递。</p>

<h3>如何破解：</h3>

<p>在Fragment的根布局加上一个clickable=true，这会让根布局把点击事件吃掉，以防止事件会继续传递下去，造成上面的情况。</p>

<h2>Activity重新创建之殇</h2>

<h3>现象：</h3>

<p>这个没有一般性的错误，只会有与项目相关的具体的错误异常，或者页面显示不正确。以及为什么教程中都有这么一句：
<code>java
@Override
onCreate(Bundle savedInstance) {
   if (savedIntance == null) {
      // create fragment and add it to Activity.
   }
}
</code></p>

<h3>原因：</h3>

<p>Activity除了正常启动走到onCreate，还有另外的入口，比如系统配置信息发生变化时，或者Activity在栈比较深的地方，系统会把Activity杀掉，然后再<em>重新创建</em>它，问题就是在这个重新创建。重新创建与新建一个Activity不同，它是要尽可能的恢复先前所在的状态，因为这对用户来说是透明的，也就是说不能让用户感知到，否则体验会相当差。唯一与常规创建的区别就在于传给onCreate的参数savedInstanceState是不是null.</p>

<h3>如何破解：</h3>

<p>为了能在Activity重建时恢复状态，需要：</p>

<ol>
<li><p>. 对于Activity</p>

<p>  要在onSaveInstanceState()时，把一些变量保存，然后在onCreate时恢复</p></li>
<li><p>. 对于Fragment</p>

<p> 告诉系统，你想恢复状态Fragment#setRetainInstance(true)。然后，也在onSavedInstance()中保存状态，在onCreate时恢复。
这就够了，系统会在重新创建Activity时把其所持有的Fragment也创建出来。所以为什么每个Fragment子类都需要定义一个默认的Constructor。更多的可以参考<a href="http://www.androiddesignpatterns.com/2013/04/retaining-objects-across-config-changes.html">这篇文章</a>。</p></li>
</ol>


<h2>FragmentTransaction的异步操作之殇</h2>

<p>FragmentTransaction是异步的，commit()仅是相当于把操作加入到FragmentManager的队列，然后FragmentManager会在某一个时刻来执行，并不是立即执行。所以，真正开始执行commit()时，如果Activity的生命周期发生了变化，比如走到了onPause，或者走到了onStop，或者onDestroy都走完了，那么就会报出IllegalStateException。具体的原因，以及如何避免可以参考大牛的<a href="http://www.androiddesignpatterns.com/2013/08/fragment-transaction-commit-state-loss.html">这篇文章</a>。</p>

<h2>参考</h2>

<ul>
<li><a href="http://developer.android.com/guide/components/fragments.html">Fragments</a></li>
<li><a href="http://developer.android.com/training/basics/fragments/index.html">Building a Dynamic UI with Fragments</a></li>
<li><a href="http://www.androiddesignpatterns.com/2013/08/fragment-transaction-commit-state-loss.html">Fragment Transactions &amp; Activity State Loss</a></li>
<li><a href="http://www.androiddesignpatterns.com/2013/04/retaining-objects-across-config-changes.html">Handling Configuration Changes with Fragments</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android NDK开发的一些技巧]]></title>
    <link href="http://toughcoder.net/blog/2015/04/27/android-ndk-backward-compatibility/"/>
    <updated>2015-04-27T23:34:58+08:00</updated>
    <id>http://toughcoder.net/blog/2015/04/27/android-ndk-backward-compatibility</id>
    <content type="html"><![CDATA[<p>Android NDK(Native Development Kit)是基于Java JNI的使用C/C++和Java来混合开发应用的一种方式，甚至在Android 2.3(API 9)以后可以用Native(Native这个字在不同的语境中意义是不一样的，这里指的是JNI中的C/C++的代码；如果放在Hybrid中Native就是指平台原生的语言和API)代码来创建标准界面组件Activity，换句话说就可以用纯C/C++来写一个Android应用，但是貌似还没有人这么干过，这只是一种理论上的可能性。因为除了Activity以外很多东西比如权限，广播通知等等很多东西在Native中还是不够方便。</p>

<p><a href=""><img src="http://androids.zone/wp-content/uploads/2014/06/android-ndk.jpg" title="auto auto" ></a></p>

<!-- more -->


<h2>函数签名的写法</h2>

<p>Java代码中调用Native的代码还是比较简单的，把方法声明成为native，然后可以当作普通的Java方法一样来使用，只不过这个native的方法的实现是在Native中。</p>

<p>JNI是一个桥梁，让不同的语言能够在一起使用，不但Java能调用Native层代码，在Native层也是能够调用Java的代码。但是JNI的最初目的是能够让Java使用C/C++语言来解决Java做不到的事情，所以在Native中调用Java的方法要稍微费一点劲。要获取JNI的执行环境(JNIEnv)，要找到类和对象，更重要的是要写对函数签名，否则是找不到的。</p>

<h3>函数签名的写法</h3>

<p>&ldquo;(<em>[type1]</em>;<em>[type2]</em>&hellip;)<em>[return types]</em>&rdquo;</p>

<p>type包括：</p>

<ul>
<li> B = byte</li>
<li> C = char</li>
<li> D = double</li>
<li> F = float</li>
<li> I = int</li>
<li> J = long</li>
<li> S = short</li>
<li> V = void</li>
<li> Z = boolean</li>
<li> V = void</li>
<li> Lfully-qualified-class = fully qualified class. For instance String &ndash; Ljava/lang/String;</li>
<li> [type = array of type</li>
</ul>


<p>Samples:
   * &ldquo;(Ljava/lang/String;I)V&rdquo; // void foo(String str, int limit);</p>

<h2>线程解惑</h2>

<p>Native的代码是执行在其直接调入的Java的方法所在的调用栈里的，比较绕，简单来说吧，JNI的方法也是一个方法，只不过它是在Native层实现的，所以都是一系列的方法的调用，因此调用栈从Java层开始，一直到Native，JNI不会改变调用栈，因此也不会改变线程环境，除非你让它改变。</p>

<p>当你改变线程时，就要注意了，如果你在Native用pthread开启了一个新的线程，且这个线程又需要与Java通信，要调用Java层的方法，那么常规的方式是不行的，要先把线程attach到JNI环境，findClass也不会找到相应的类，因为这个线程是pthread_create出来的，不具备JNI的环境，甚至常规的类，方法和对象的引用在新衍生出的线程中统统都是无效的。</p>

<p>那么该如何做呢？首先，要先调用AttachCurrentThread来把线程attach到JVM；然后，把要在此线程里访问的Java类，方法和对象生成JVM的Global引用，也就是NewGlobalRef来保存引用；最后，当完成与Java的通信后要调用DetachCurrentThread来做detach。</p>

<h2>注意内存问题</h2>

<p>到了Native的环境，就要注意内存问题，因为Native的代码都是要手动的申请内存，手动的释放。当然，业务逻辑里面的申请和释放用标准的new/delete或者malloc/free，或者用智能指针之类的。JNI部分是有封装好的方法的，比如NewGlobalRef，NewLocalRef, DeleteGlobalRef, DeleteLocalRef等。</p>

<p>需要注意的是用这些方法创建出来的引用要及时的删除。因为这些引用都是在JVM中一个表中存放的，而这个表是有容量限制，当到达一定数量后就不能再存放了，就会报出异常。所以要及时删除创建出来的引用。</p>

<h2>版本的兼容性</h2>

<p>使用SDK开发应用时可以用minsdk和targetsdk来解决版本的兼容性问题，minsdk指定最低SDK版本要求，targetsdk指定目标的版本。但在NDK，只能用一个android-target来指定最低的版本要求，其实这就是限定了在NDK你能使用的API的范围。为了保证最好的兼容性，要保证NDK中的android-target与minsdk保持一致。</p>

<p>SDK中的做法是指定了minsdk后，选择尽可能高的targetsdk，这样可以获取最好和最新的编译toolchains的支持。但是NDK中不建议这样做，尽管你没有使用高版本的API，但是使用高版本来编译会链到高版本的库，有可能会导致问题，因为高版本的某些API实现方式会变。比如signal.h中的signal函数，如果使用android-21编译，那么在低于5.0 版本的手机上是跑不起来，错误是无法找到signal函数，原因就是5.0以后signal.h中的signal函数的实现方式变了。</p>

<h2>支持64位</h2>

<p>5.0开始，Android有了64位处理器了。对于以Java作为平台语言的Android来说，特别是广大的应用开发者来说，这并不需要做什么特殊的处理。但是对于涉及到Native的代码时就要注意了，在编译的时候要为arm64准备东西了。在编译的时候要为arm64编译出一个target。</p>

<p>但是问题来了，arm64只有当android-target设置为21时才能编译出来，而我们的应用不可能只target到5.0，前面讲到了我们要对齐到最低版本。解决方案就是构建二次：</p>

<ul>
<li> 第一次正常target到最低版本构建出arm和armeabi-v7a的库</li>
<li> 第二次target到21，编译出arm64的库</li>
</ul>


<p>再把这些so打包起来就可以了。</p>

<h2>多多参考NDK文档以及官方教程和指导</h2>

<p>使用任何的别人提供的东西，最好获取帮助的方式就是看人家给你的文档和指导。现在的文档都写的很详细了。Android开发者官网上面也有很多关于NDK开发的<a href="http://developer.android.com/training/articles/perf-jni.html">教程</a>，都值得仔细读一读的。</p>

<h2>使用第三方工具来简化开发</h2>

<p>最好的开发方式不是自己写，而是去用别人现有的东西，子曰：不能重复造轮子。NDK的开发，也是有一些第三方的工具来帮助我们减少开发量的。<a href="http://swig.org/">SWIG</a>就是一个优秀的工具，它能免去写丑陋的JNI方法的痛苦，而且SWIG是编译工具链的一个组件，不是运行时，所以不会带来性能上的损失。</p>

<h2>不错的书籍</h2>

<p><a href="http://www.apress.com/9781430248279">《Pro Android C++ with NDK》</a>是一本相当不错的书籍，有中文版本了，可以好好的读一读。</p>

<h2>参考资料</h2>

<ul>
<li><a href="http://docs.oracle.com/javase/6/docs/technotes/guides/jni/spec/invocation.html">The Invocation API</a></li>
<li><a href="http://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/functions.html">The JNI Functions</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[诡异的EOF Exception]]></title>
    <link href="http://toughcoder.net/blog/2015/01/31/unexpected-eof-exception/"/>
    <updated>2015-01-31T17:00:39+08:00</updated>
    <id>http://toughcoder.net/blog/2015/01/31/unexpected-eof-exception</id>
    <content type="html"><![CDATA[<p>近日在写一个简单的HTTP代码中遇到了诡异的EOFException,当读取ResponseCode的时候就抛出了EOF异常,感觉很诡异,下面进行问题还原,以及分析和解决过程.</p>

<h2>问题</h2>

<p>有问题的代码如下:</p>

<!-- more -->


<pre><code class="java">    private void testEcho() {
        String payload = "The quick brown fox jumps over the lazy dog.";
        try {
            HttpURLConnection conn = null;
            BufferedReader br = null;
            try {
                String ep = Base64.encodeToString(payload.getBytes(), Base64.URL_SAFE);
                URL u = new URL("http://httpbin.org/get?p=" + ep + "&amp;key=testEcho");
                conn = (HttpURLConnection) u.openConnection();
                conn.setRequestMethod("GET");
                conn.setDoInput(true);
                conn.setDoOutput(false);
                conn.connect();
                if (conn.getResponseCode() != HttpURLConnection.HTTP_OK) {
                    Log.e(TAG, "http res " + conn.getResponseCode() + ", msg : " + conn.getResponseMessage());
                    return;
                }
                br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                String buf = null;
                while ((buf = br.readLine()) != null) {
                    Log.e(TAG, "HTTP res: " + buf);
                }
            } finally {
                if (br != null) {
                    br.close();
                }
                if (conn != null) {
                    conn.disconnect();
                }
            }
        } catch (IOException e) {
            Log.e(TAG, "ioexception ", e);
        }
    }
</code></pre>

<p>这段代码进行后会在getResponseCode()这行抛出EOFException:
<a href=""><img src="http://7u2scv.com1.z0.glb.clouddn.com/eof.png" title="auto auto" ></a>
很疑惑,百思不得解,这是一个简单的GET请求,却抛出了这样难以理解的异常.于是去Google,发现都认为是Android本身的问题,要加上connection close
<code>java
conn.setRequestProperty("Connection", "close");
</code>
比如,<a href="http://stackoverflow.com/questions/19258518/android-httpurlconnection-eofexception">这个讨论</a>,以及<a href="http://stackoverflow.com/questions/15411213/android-httpsurlconnection-eofexception">这个讨论</a>.
尝试了,但仍没有解决掉抛出的EOFException.</p>

<h2>分析与解决</h2>

<p>这个时候就要冷静的分析下,先从根本开始,怀疑一切,把请求的每一句都打印出来,突然发现URL竟然含有一个CRLF换行符(\r\n). 感觉奇怪,于是查阅文档,发现Base64在编码的时候会默认给结果加上CRLF以换行,于是再加一个Flag, NO_WRAP后,问题解决:
<code>java
     String ep = Base64.encodeToString(payload.getBytes(), Base64.URL_SAFE | Base64.NO_WRAP);
</code></p>

<h2>深入分析</h2>

<p>问题是解决了,但感觉没有完全弄明白.于是做了多次尝试,发现只要URL中部含有换行(\n或\r\n)都会引发此问题,而在尾部则没事.
<a href="http://7u2scv.com1.z0.glb.clouddn.com/eof_req.png"><img src="http://7u2scv.com1.z0.glb.clouddn.com/eof_req.png" title="auto auto" ></a>
这是请求包
<a href="http://7u2scv.com1.z0.glb.clouddn.com/eof_res.png"><img src="http://7u2scv.com1.z0.glb.clouddn.com/eof_res.png" title="auto auto" ></a>
这是Server回应</p>

<p>通过抓包可以看出,换行符会导致发送的HTTP请求包不完整,Server返回也认为HTTP是trunk的,所以期待更多的数据,因此这个时候是没有response的,任何对response的读操作(getResponseCode(), getResponseMessage(), getInputStream())都会立即抛出EOFException.</p>

<h2>总结</h2>

<p>虽然这个问题不大,但是也还值得总结一下:</p>

<ol>
<li><p> 遇到问题先检查没犯低级错误</p>

<p> 也就是说,当遇到诡异的问题时,先查看文档,检查参数,确保是否是在按正确的方式在做事情,这很关键,因为很多时候都是我们犯了低级错误,比如拼写错误,或者没传正确的参数,或者解错了API等.因为越是简单的错误越容易被忽略.</p></li>
<li><p> 问Google和其他人</p>

<p> Google一下或者问下身边的人,可能会很有帮助</p></li>
<li> 如果还搞不定,那就真的是遇到难题了,这个时候只能去查阅源码和书籍,定位出问题,分析原因,解不解得了,就看造化了.</li>
<li><p> 找Plan B</p>

<p> 不用认死理儿,一条路不通,可走另外的路,或者搭个桥什么的.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让Android模拟器飞一会]]></title>
    <link href="http://toughcoder.net/blog/2014/10/31/boosts-android-emulator/"/>
    <updated>2014-10-31T17:27:29+08:00</updated>
    <id>http://toughcoder.net/blog/2014/10/31/boosts-android-emulator</id>
    <content type="html"><![CDATA[<p>Android模拟器是公认的慢，而且不是一般的慢，即使在高性能的PC上，跟开发环境没关系，因为它就是慢。但是我们又必须使用模拟器，比如在测试Android不同版本的兼容性时，或者在测试不同屏幕尺寸的UI显示问题时，都是需要的。当然我们还是鼓励使用一个真机来调试和测试，模拟器无法取代真机。但是在测试兼容性时，我们还是要使用模拟器，因为即使是BAT也不可能把各种版本，各种屏幕的Android手机都买一个。</p>

<p><a href=""><img src="http://codebutler.com/img/posts/2012-10-10-configuring-a-usable-android-emualtor/android-emulator-ugly.png" width="320" height="480"></a></p>

<!-- more -->


<h2>为啥模拟器会这么慢</h2>

<p>关键就是在模拟这二个字。PC啊，我们所使用的开发环境的CPU都是x86架构的，而手机呢一般都是ARM架构，这就产生问题了，这个手机的系统无法像PC上面的一个应用程序那样直接运行在PC里，所以就需要一个虚拟的ARM机器。Android模拟器是基于QEMU的，QEMU可以模拟ARM指令，另外，存储，等等所有模拟器的硬件，都是由软件实现的。总之，为了能让PC上跑起来ARM，就慢了很多。</p>

<p>详细的可以看<a href="http://www.developer.com/ws/android/development-tools/supercharge-your-android-emulator-speed-with-intel-emulation-technologies.html">这篇文章</a></p>

<p>我们可能不关心它为啥慢，我们要关心的是如何能让它跑的更快一些！</p>

<h2>使用x86架构</h2>

<p>既然它慢是因为必须在x86上面模拟ARM，那么让它快起来第一个方法就是直接使用x86架构，这样子的话，就能够直接使用开发环境的CPU了，性能肯定会大幅的提升，正如<a href="http://www.developer.com/ws/android/development-tools/supercharge-your-android-emulator-speed-with-intel-emulation-technologies.html">这篇文章</a>所说。</p>

<p>配置方法也不难，主要是：</p>

<ul>
<li>安装Intel的<a href="https://software.intel.com/en-us/android/articles/intel-hardware-accelerated-execution-manager">加速驱动HAXM</a></li>
<li>下载和使用x86版本的Android System images</li>
</ul>


<p>使用起来并不难，只是可能会遇到坑，借助<a href="https://www.google.com.hk/">Google</a>和<a href="http://www.baidu.com/">百度</a>都能解决。唯一需要注意的是，Intel的HAEM对硬件的配置要求比较苛克，要求CPU必须支持虚拟化VT，具体的可以参考官方和Google进行解决。</p>

<h2>使用<a href="http://www.genymotion.com/">Genymotion</a></h2>

<p>Genymotion是一个全功能的Android模拟器，它不但能测试应用，还有同步等功能，在PC上面跑的非常快。先去注册成为它的用户，然后就可以下载了。它的安装，也比较方便，直接看官方的文档就可以了。</p>

<h3>快速功能列表</h3>

<ul>
<li>支持主流的三种平台Windows, Mac OS X和Linux</li>
<li>需要注册成为它的用户才可下载</li>
<li>高级功能的版本需要付费</li>
<li>不能安装在虚拟机中，因为它要使用硬件加速，而且本身也要运行在虚拟机(VMWare, VirtualBox)之中，所以，它是不能安装在已经是虚拟中的系统中的</li>
</ul>


<h3>安装与使用方法</h3>

<ul>
<li>Windows
    下载安装文件后直接安装即可，会把所有的依赖（Virtualbox）都装上</li>
<li>Linux(Ubuntu 64)

<ul>
<li>下载genymotion-[version]_[arch].bin</li>
<li>chmod +x genymotion-[version]_[arch].bin</li>
<li>./genymotion-[version]_[arch].bin（注意一下子安装的路径，是放在$PWD/genymotion/下面</li>
<li>安装Virtualbox，如果还没安装的话sudo apt-get install virtualbox</li>
<li>启动cd genymotion; ./genymotion。登录帐户然后选择设备进行下载，之后就可以使用了，都是GUI页面，有问题可以Google。</li>
</ul>
</li>
</ul>


<h2>使用<a href="http://www.andyroid.net/">Andy the Android Emulator</a></h2>

<p>貌似官方网站不能下载。</p>

<h3>快速功能列表</h3>

<ul>
<li>支持Windows和Mac</li>
<li>支持开发所需要的所有功能</li>
<li>支持同步</li>
</ul>


<h2>使用<a href="http://www.bluestacks.com/">Blue Stacks App Player</a></h2>

<h3>功能列表</h3>

<ul>
<li>仅支持Windows</li>
</ul>


<h2>使用<a href="https://www.manymo.com/">Manymo</a></h2>

<p>这个网站经常打不开，因为访问量太大。</p>

<p>它不是运行在本地的，它是一个运行在浏览器中的Android模拟器，注册用户以后，就可以上传应用，然后在浏览器中运行Android应用了，听起很酷，但是这个并不适合开发者用。这个适合测试人员用。或者开发完成后做一些兼容性测试之类的场景。</p>

<h3>快速功能列表</h3>

<ul>
<li>运行在浏览器之中</li>
<li>适合测试，而不是实时的调试</li>
<li>缺点就是网站经常打不开</li>
</ul>


<h2>总结与推荐</h2>

<p>其实，所有的加速的模拟器，也都是以x86为基础建立起来的，只不过他们做了更多的封装，让它的安装和使用更加的方便而已。</p>

<p>最出名的，也是最方便好用当属Genymotion，推荐使用。</p>

<p>如果你有更好的秘密武器，也请与我分享。</p>

<h2>参考</h2>

<ul>
<li><a href="http://stackoverflow.com/questions/1554099/why-is-the-android-emulator-so-slow">Why is the Android emulator so slow?</a></li>
<li><a href="http://stackoverflow.com/questions/2662650/making-the-android-emulator-run-faster">Making the Android emulator run faster</a></li>
<li><a href="http://www.techbate.com/5-best-android-emulator-for-windows-87xp/">5 Best Android Emulator For Windows 8,7,XP</a></li>
<li><a href="http://techapple.net/2014/05/3-best-android-emulators-for-mac-os-macbook-run-and-install-android-app-on-your-mac-os-x-macbook-airpro/">3 Best Android Emulators for Mac OS / Macbook </a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[不断更新，保持高效]]></title>
    <link href="http://toughcoder.net/blog/2014/10/26/stay-tune-with-state-of-art/"/>
    <updated>2014-10-26T22:13:51+08:00</updated>
    <id>http://toughcoder.net/blog/2014/10/26/stay-tune-with-state-of-art</id>
    <content type="html"><![CDATA[<p>正所谓学历代表过去，学习力代表未来。柯维大师的七个习惯之中的终极习惯就是要“不断更新”，今天的你再牛B，知道的再，如果不去学习，不去提升，不去更新自己，那么总有一天也会被超越，时代在进步，别人在进步，发逆水行舟，不进则退，你停止了学习，就表明你退步了，因为别人在进步。
那么，为了保持能够高效的进行Android开发，我们就必须不断的学习，不断的充电，这些列出一些，能够提高Android开发的进阶教程，注意是进阶教程，而非入门教程。</p>

<p><a href=""><img src="http://www.bvsc.org/sites/default/files/images/5%20ways-KEEP%20LEARNING.png"></a></p>

<!-- more -->


<h2>书箱</h2>

<p>虽然说现代人忙的都没有时间看书了，虽然说，我们浮躁的没有耐心把一本书看完，但是书籍仍然是学习和获取知识的最佳途径，前提是你选对了书。对于Android的进阶学习，这些书籍是非常好的：</p>

<ul>
<li><p>《50 Android Hacks》</p>

<p> 这本书有点类似《Effective Java》和《Effective C++》，它是以话题形式来讨论提升Android开发的技巧，每个话题一个技巧，非常实用的一本书，里面有很多干货，有实例，拿来就可以用</p></li>
<li><p>《Smashing Android UI》</p>

<p> 这本书重点讨论如何提升UI，包括动画，布局，UI性能，定制Widget等。</p></li>
<li><p>《Pro Android Apps Performance Optimization》</p>

<p> 这本书是讲如何提升应用的性能。</p></li>
<li><p>《Decompiling Android》</p>

<p> 这本书比较有意思，是从另外一个角度来讲Android开发，从逆向工程角度，主要讲如何逆向工程一个应用，以及如何从开发层面来防止应用被逆向。里面讲了很多工具，很实用。</p></li>
<li><p>《Android Design Patterns: Interaction Design Solution for Developers》</p>

<p> 这本书的话题跟开发比较远，主要是从UX角度来讲解Android上面的用户体验的模式，比如现在非常流行的Drawer等等。孤认为开发者也要懂一些用户体验方面的东西，而且这些东西跟开发者关系更大一些。因为UXD并不清楚什么可以实现，什么难以实现，什么无法实现，以及实现起来的代价有多大。现在不是流行全栈工程师吗。Anyway，多了解点知识总是没坏处的。</p></li>
</ul>


<p>这些书随便就能搜索到，就不提供下载链接了。至于说为什么这里都是英文的，因为都是外国人写的啊！推荐直接看原版，因为翻译有些时候不会太准，因为译者的理解可能会不一样。并不需要多牛B的英文水平才能读懂英文书。这些都是专业的书籍，语言都非常的通俗易懂，对于常见的一些专业术语，查几次词典就记住了。关键还是态度。</p>

<h2>网络博客资源</h2>

<p>光看书，也还不够，因为最新的技术总是先出现在网络，尔后由人总结才能出现在书中。</p>

<ul>
<li><p><a href="http://developer.android.com/develop/index.html">Android Developers</a></p>

<p> 这个不用多说，开发Android，无论是新手还是老手，官方的文档总是一个必须要常访问的地方。今日的官方文档已经10时的大不一样，那时里面除了API Reference外，几乎有很少其他内容，但是现在从Tutorials, Training Docs, References, Articles, Videos, Best Practices and Samples可以说凡是能用来学习的全都有了，里面已是相当的丰富了。</p></li>
<li><p><a href="http://blog.jobbole.com">伯乐在线</a></p>

<p> 这里每天会汇集一些优质的网络博客，各个方面的，当然也包括Android。</p></li>
<li><p><a href="http://android-developers.blogspot.com">Android Developer Blogs</a></p>

<p> 这个貌似是一群Android系统的开发者所定的博客，里面的文章相当有深度和权威，都是一等一的干货。</p></li>
<li><p><a href="http://blog.stylingandroid.com">Styling Android</a></p>

<p> 这个博客主要讲高级的UI定制，比如实现颜色选择器那种高级复杂的UI。</p></li>
<li><p><a href="https://www.youtube.com/playlist?list=PLWz5rJ2EKKc_XOgcRukSoKKjewFJZrKV0">Android Dev Bytes</a></p>

<p> 这个是YouTube上面的一个频道，是由Android系统的开发者做的一些教程类的视频，讲述如何进行开发，和提升的技巧。视频的内容非常丰富，从新的API，到游戏，再到UX，和Android Design。每个视频都算长，几十分钟。其中有几个哥们是Framework图形库的，讲述的如何做各种非常炫和酷的动画，相当的赞。这可以世界上最优秀的工程师，且是Android的维护者做的教程，错不了。</p></li>
<li><p><a href="http://www.androiddesignpatterns.com">Android Design Patterns</a></p>

<p> 这个博客的内容都是关于深度解析Frameworks中某些组件的工作原理的，很有深度。</p></li>
</ul>


<h2>优质的网站和社区</h2>

<ul>
<li><p><a href="http://hao.jobbole.com/category/android/">伯乐资源</a></p>

<p> 这里面有非常全的Android相关的资源。</p></li>
<li><p><a href="http://www.android-studio.org">Android Studio</a></p>

<p> 这个是AndroidStudio的中文社区，主要关注AS，但也有开发相关内容。</p></li>
<li><p><a href="http://androidweekly.net">Android Weekly</a></p>

<p> 这个网站会像周报一样，每周更新Android开发相关的新闻，技术等。</p></li>
<li><p><a href="http://www.androidpatterns.com">Android Patterns</a></p>

<p> 这个主要是UX相关的。</p></li>
<li><p><a href="http://www.android-app-patterns.com">Android App Patterns</a></p>

<p> 这个也是UX设计相关的。</p></li>
</ul>


<h2>线下社区</h2>

<p>这个要看具体的城市而定，现在大多数城市都有谷歌开发者社区<a href="http://www.chinagdg.com/forum.php">GDG(Google Developer Group)</a>他们都会定期的举办活动，因为是关于Google的，所以肯定有Android相关的。对于像北京，上海，杭州这些移动互联网热门城市，各种社区应该很多的。</p>

<h2>请分享你常常使用的好的资源</h2>
]]></content>
  </entry>
  
</feed>
