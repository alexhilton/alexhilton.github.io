<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Effectiveandroid | 稀有猿诉]]></title>
  <link href="http://toughcoder.net/blog/categories/effectiveandroid/atom.xml" rel="self"/>
  <link href="http://toughcoder.net/"/>
  <updated>2023-09-16T17:25:25+08:00</updated>
  <id>http://toughcoder.net/</id>
  <author>
    <name><![CDATA[Alex Hilton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Jetpack Compose Road Map]]></title>
    <link href="http://toughcoder.net/blog/2023/09/08/jetpack-compose-road-map/"/>
    <updated>2023-09-08T23:04:44+08:00</updated>
    <id>http://toughcoder.net/blog/2023/09/08/jetpack-compose-road-map</id>
    <content type="html"><![CDATA[<p>Jetpack Compose是由Google在2019年Google I/O大会提出的新一代声明式UI框架，它基于Kotlin编程语言与Android Studio可以无缝衔接，在Google的大力推动下，现在已经变成了Android App的标准UI构建方式。网络上更是更是满屏的相关内容，如果说没有用过Compose都不好意思说自己会Android开发。是时候恶补一下了。</p>

<p><a href=""><img src="https://www.somagnews.com/wp-content/uploads/2021/02/Jetpack-Compose.jpg" title="auto auto" ></a></p>

<!-- more -->


<h2>快速上手体验</h2>

<p>可以follow下Google官方的<a href="https://developer.android.com/jetpack/compose/tutorial">Quick start</a>教程来快速体验一下。</p>

<p>可以<a href="https://developer.android.com/jetpack/compose/documentation">参考官方文档</a>以进一步了解。</p>

<h2>理解Compose</h2>

<p>体验过Compose可以发现，它与原生的Android app UI开发完全不同，最大的区别就是全是Kotlin代码，不用再去摆弄xml了。</p>

<p>其实Compose与Kotlin最初搞的<a href="https://github.com/Kotlin/anko">anko</a>是类似的东西，它的核心是利用Kotlin的语言特性来实现了一套写UI的DSL。在Compose里面所有的花括号其实都是一个函数，而且Compose里面的DSL都是用的大写字母开头的驼峰式，如<strong>Text {}</strong>，让人误以为这是一个类，但其实它是一个函数，容易让人误解不说，还不符合Kotlin语言的开发规范。这一点上当初的anko就相当的好，它的DSL命令都与函数的命名是一致（小写开头的驼峰式）。</p>

<p><strong>注意</strong>，如果Compose用起来感觉相当的别扭，这说明缺少前置知识，要把Kotlin的一些高级特性熟悉一下，比如<a href="http://toughcoder.net/blog/2023/02/14/understanding-kotlin-based-dsl/">DSL</a>，委拖机制以及扩展函数，只有把这些概念熟悉了以后，再写Compose会顺手很多。记住，Compose里面的所有东西都是函数调用，当成函数来写就可以了。</p>

<p>Compose其实就是一坨DSL，一层层的嵌套，本质上是一坨函数调用。极容易写出『箭头式』的代码，如这种：</p>

<pre><code class="kotlin">@Composable
private fun Greetings(
    modifier: Modifier = Modifier,
    names: List&lt;String&gt; = List(100) { "Compose #${it + 1}" }
) {
    // A surface container using the 'background' color from the theme
    Surface(modifier, color = MaterialTheme.colorScheme.background) {
        LazyColumn(modifier.padding(vertical = 4.dp)) {
            items(items = names) {
                   Greeting(it)
            }
        }
    }
}
</code></pre>

<p>当view的嵌套比较深的时候，更明显，这就需要我们要及时的抽出公共的Composable组件，其实就相当于抽出函数，以让嵌套不那么深。</p>

<p>其实Android的原生UI开发方式（也即View与xml）是相当强大的，特别是在复用，如animation，drawable，color，string和dimens的复用和适配已经相当完善了。这方面Compose还是略显笨拙，因为还必须代码，甚至还可能重复的代码。对于常规的页面，比如列表（横竖或者格子）和基础UI组件（图片，文字和按扭）组合而成的页，用Compose是完全不成问题的。但对于成百上千个各种小组件时，View的结构与交互都非常复杂的页面时，如某宝某东某团的页面，或者页面有重型的组件，如Webview，如video，graphics或者游戏，Compose肯定 力不从心。这也是为何国内，特别是一些大厂其实对Compose这玩意儿并不怎么感冒，真正在产品里使用的可能还是那些国外头部app。</p>

<h2>进阶之路</h2>

<p>最好的资源莫过于官方推出的教程。
<a href="https://developer.android.com/courses/jetpack-compose/course">jetpack compose course</a>是Google官方推出的一系列教程，有视频讲解，有实战codelab，还有测试quiz。相当的丰富，可以看得出Google对Compose还是相当上心的。</p>

<h2>项目实战</h2>

<p>有一些非常优秀的真实的用Compose构建 出来的App可以供学习和参考，<a href="https://developer.android.com/jetpack/compose/samples">有些是官方的</a>，有些则是民间的，不但开源，而且还有配套的博客来说明构建 的过程，是非常难得的参考 资料。</p>

<ul>
<li><a href="https://github.com/android/compose-samples/tree/main/Jetchat">Jetchat</a> 纯Compose构建UI，适合初学者上手</li>
<li><a href="https://github.com/android/compose-samples/tree/main/Jetsurvey">Jetsurvey</a>纯Compose构建UI，适合上手</li>
<li><a href="https://github.com/android/sunflower/tree/main">Sunflower</a> 除UI外，还有网络要用到Jetpack组件</li>
<li><a href="https://github.com/android/nowinandroid/tree/main">Now in Android</a> 集大成者，Compose，加上Jetpack再上架构思维，适合高级玩家</li>
<li><a href="https://github.com/ellisonchan/ComposeMovie">电影App</a> 一个电影的简单app，配套<a href="https://blog.csdn.net/allisonchen/article/details/115052707">博客在这里</a></li>
<li><a href="https://jetpackcompose.cn/docs/">Jetpack Compose博物馆</a> 不但有教程，还有数个实例</li>
<li><a href="https://github.com/wangchenyan/wanandroid-compose">WanAndroid</a> <a href="https://www.wanandroid.com/">WanAndroid</a>的一个客户端，<a href="https://www.jianshu.com/p/cc11f2c93778">配套博客</a></li>
<li><a href="https://github.com/Mercandj/android-dev-challenge-compose-4">Compose Weather App</a> <a href="https://www.jetpackcompose.net/compose-weather-app">配套博客</a></li>
<li><a href="https://github.com/microsoft/surface-duo-compose-samples/tree/main">Surface Dual Compose Samples</a> Compose是一个跨平台的UI构建工具，不光能为Android构建，为其他平台也能构建App，<a href="https://learn.microsoft.com/zh-cn/dual-screen/android/jetpack/compose/samples">如Surface</a></li>
</ul>


<h2>参考资料</h2>

<ul>
<li><a href="https://coolshell.cn/articles/17757.html">如何重构“箭头型”代码</a></li>
<li><a href="https://developer.android.com/jetpack/compose/mental-model">Thinking in Compose</a></li>
<li><a href="https://www.jetpackcompose.net/">Jetpack Compose Tutorial</a></li>
<li><a href="https://www.jetpackcompose.app/">The #1 destination for all things Jetpack Compose</a></li>
<li><a href="https://www.theinsaneapp.com/2021/08/jetpack-compose-sample-examples-projects-and-android-apps.html">70+ Jetpack Compose Projects For Beginners And Experts</a></li>
<li><a href="https://developersbreach.com/compose/">Collection of Android Compose UI samples</a></li>
<li><a href="https://c1ctech.com/android-jetpack-compose-example/">Android Jetpack Compose Example</a></li>
<li><a href="https://blog.mindorks.com/jetpack-compose-tutorial/">Jetpack Compose Tutorial - Step by Step Guide</a></li>
<li><a href="https://foso.github.io/Jetpack-Compose-Playground/compose_projects/">Compose Projects</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Scoped Storage Puzzles]]></title>
    <link href="http://toughcoder.net/blog/2023/05/03/android-scope-storage-puzzles/"/>
    <updated>2023-05-03T17:58:43+08:00</updated>
    <id>http://toughcoder.net/blog/2023/05/03/android-scope-storage-puzzles</id>
    <content type="html"><![CDATA[<p>安卓对于文件存储这块，其实是相当混乱的，在早期的版本中对存储甚至是没有所谓的管理的，有多种方法可以操作文件存储，比如通过Java原生的方式(File/InputStream/OutputStream)，以及通过ContentProvider的方式(openFile/openOutputStream)。文件的路径也是相当混乱的，有公共存储区域，App的沙盒，外部存储中的App沙盒，但其实整个文件系统中的文件都是可读的，除了系统目录，其他应用的沙盒(内部和外部）以外也都是可写的。这就造成了，安卓的文件系统特别的混乱，加之应用使用不规范，对存储造成极大的滥用，外部存储空间产生大量的垃圾文件，应用卸载后仍然存在，这也催生了一系列的清理软件。</p>

<p><a href=""><img src="https://co-well.vn/wp-content/uploads/2020/05/Android-01-2048x1280.jpg" title="auto auto" ></a></p>

<!-- more -->


<p>但随着用户隐私问题越来越被重视，谷歌也开始收紧了存储权限管理。</p>

<h2>存储权限的变迁史</h2>

<h3>强制动态申请权限</h3>

<p>从Android 6.0（Android M, API 23）开始，存储权限除了在AndroidManifest中静态声明以外，还需要在运行时动态的申请，用户授权了后才可以使用。但这并没有本质的变化，只要用户授权了，就跟以前一样，所有文件可读，大量位置的文件也都可写，App依然可以随便乱搞。</p>

<h3><a href="https://developer.android.com/training/data-storage#scoped-storage">Scoped Storage</a></h3>

<p>后来到了Android 10 (Android Q, API 29)时提出了scoped storage的概念，并把权限进一步的收紧，仅留下几个公共的文件夹可写，其他地方均不可写。并且写媒体文件时(Image/Video/Audio)，要用MediaStore API的方式，直接以Java的文件方式将不再可用。Android 10并未强制开启scoped storage，通过在Manifest中设置requestLegacyStorageManage=true，依然可以像以往那样搞，但到了Android 11时，就强制开启了scoped storage。
<img src="https://koenig-media.raywenderlich.com/uploads/2020/06/PreparingScopedStorage-twitter.png" alt="" /></p>

<h3>强制Score Storage</h3>

<p>到了Android 11(Android R, API 30)时，就强制了，只有应用自己的沙盒可自由读写。创建媒体文件必须 通过MediaStore API。只有少数区域可写（Documents/Downloads/Pictures）等，并且这些区域只有自己创建的文件是可见和可读的。这就导致了，应用能乱搞的区间相当有限了。</p>

<h3>细分文件种类权限</h3>

<p>到了Android 13(Android T, API 33)，更加变态了，把原来的<a href="https://developer.android.com/reference/android/Manifest.permission#WRITE_EXTERNAL_STORAGE">WRITE_EXTERNAL_STORAGE</a>/<a href="https://developer.android.com/reference/android/Manifest.permission#READ_EXTERNAL_STORAGE">READ_EXTERNAL_STORAGE</a>权限细分为对具体文件种类的操作，拆分为Image/Audio/Video三种媒体文件类型的读写。</p>

<p><strong>注意</strong>：只有当targetSdk=33时，并且目标设备是Android 13时，才需要做权限的细分处理。也许后面的版本就会强制了，如果强制那无论taregtSdk是多少都会强制使用细分 权限。</p>

<h2>存储问题的适配</h2>

<p>前面简单的介绍了安卓存储权限的变化过程，重点还是要了解一下如何适配。因为现在已经是2023年了，Android 13(Android T)，API 33也快要普及了，所以就直接总结下现在应该怎么做。</p>

<h3>动态申请存储权限</h3>

<p>对于现在来说，动态申请权限已经是必备的技能之一了，不用多说了。就是先在应用的入口处，或者将要使用存储的地方去申请</p>

<h3>在manifest中声明<a href="https://developer.android.com/reference/android/R.attr#requestLegacyExternalStorage">requestLegacyExternalStorage=true</a></h3>

<h3>用MediaStore API来操作媒体文件(Image/Audio/Video)</h3>

<p>首先要声明具体的权限，然后用<a href="https://developer.android.com/training/data-storage/shared/media">MediaStore API</a>来操作。</p>

<h3>申请另外一个权限MANAGE_EXTERNAL_STORAGE</h3>

<p><strong>注意</strong>: 这个不管你的targetSDK是多少，只要目标运行设备是Android 11，就必须 这样做。</p>

<p>从Android 11开始，要想看到公共区域(Documents/Downloads)中的所有文件，还必须申请另外一个权限<a href="https://developer.android.com/reference/android/Manifest.permission#MANAGE_EXTERNAL_STORAGE">MANAGE_EXTERNAL_STORAGE</a>。因为理论上来说，公共区域你只能看见你自己创建的文件就够了，想看所有文件就越权了。但对于有些应用来说，如文件浏览器，或者请记录阅读器来说，肯定要能看到所有的文件。这个权限需要再次单独申请，用户授权后即可以看到公共区域的所有的文件了。</p>

<p>需要注意，这个权限像常规权限那样去申请是没用的，它的状态永远是denied的，所以，逻辑要这样写：</p>

<ol>
<li>先正常申请存储相关的权限</li>
<li>正常权限有了后，判断Environment.isExternalStorageManager()，如果 是false则需要再次申请另外一个叫做access all files的权限，通过<a href="https://developer.android.com/reference/android/provider/Settings#ACTION_MANAGE_ALL_FILES_ACCESS_PERMISSION">ACTION_MANAGE_ALL_FILES_ACCESS_PERMISSION</a>或者<a href="https://developer.android.com/reference/android/provider/Settings#ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION">ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION</a></li>
</ol>


<pre><code class="java">       // after read/write permission granted
       if (!Environment.isExternalStorageManager()) {
            requestAllFilesAccess();
        }
        // ...

   private void requestAllFilesAccess() {
        Intent intent = new Intent(Settings.ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION);
        intent.addCategory(Intent.CATEGORY_DEFAULT);
        Uri uri = Uri.fromParts("package", getPackageName(), null);
        intent.setData(uri);
        try {
            startActivity(intent);
        } catch (ActivityNotFoundException e) {
            Log.d(LOG_TAG, "Exception: " + e.getMessage());
        }
    }
</code></pre>

<p>需要注意，有可能会有Activity not found exception，注意try-catch下。</p>

<p>因为这个权限又会导致失控，只要申请了就可以在公共区域随意创建文件了，所以谷歌对这个权限管控也是比较严的。虽然你在研发测试阶段可以申请这个权限，但是在发布阶段，要给应用商店一个使用此权限的合理理由，否则Play store会拒绝上线的。</p>

<h3>合理使用公共区域</h3>

<p>作为App，最应该做的就是从业务上区分文件的属性，然后合理的选择存储空间进行存储。对于App本身运行相关的文件，如配置，如算法的模型，如数据库，缓存和日志等等应用本身运行密切相关的文件，一定不可以放在公共区域，一定要放在应用自己的沙盒内（通过<a href="https://developer.android.com/reference/android/content/Context#getFilesDir(">context.getFilesDir</a>), <a href="https://developer.android.com/reference/android/content/Context#getCacheDir(">context.getCacheDir</a>), <a href="https://developer.android.com/reference/android/content/Context#getExternalFilesDir(java.lang.String">context.getExternalFilesDir</a>), <a href="https://developer.android.com/reference/android/content/Context#getExternalCacheDir(">context.getExternalCacheDir</a>), <a href="https://developer.android.com/reference/android/content/Context#openFileOutput(java.lang.String,%20int">context.openFileOutput</a>)）等来读写，应用自己的沙盒也是属于App的自由空间，你可以随意玩。</p>

<p>对于用户生成的文件则要放在公共区域，比如说相机产出的图片和视频，编辑软件产生的文档，这些属于用户生成文件，它的所有权是用户的，可能会通过其他软件再次编辑或者分享，这些肯定要放在公共区域的。对于媒体类Image/Audio/Video则要通过MediaStore API的方式来创建和管理。对于其他文档类型，在获得了WRITE权限 后也可以在（Documents/Downloads）中创建和管理的，绝大多数情况下，这就够了。</p>

<p>总的来说，在用户隐私越来越被重视的今天，安卓现在存储管理策略在保护用户隐私的前提下是能够满足开发者使用的。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://apilevels.com/">Android API Levels</a></li>
<li><a href="https://developer.android.com/guide/topics/providers/document-provider">Open files using storage access framework</a></li>
<li><a href="https://developer.android.com/about/versions/11/privacy/storage">Storage updates in Android 11</a></li>
<li><a href="https://developer.android.com/training/permissions/requesting">Request runtime permissions</a></li>
<li><a href="https://www.geeksforgeeks.org/external-storage-in-android-with-example/">External Storage in Android with Example</a></li>
<li><a href="https://developer.android.com/training/data-storage/manage-all-files">Manage all files on a storage device</a></li>
<li><a href="https://stackoverflow.com/questions/62782648/android-11-scoped-storage-permissions">Android 11 Scoped storage permissions</a></li>
<li><a href="https://ourcodeworld.com/articles/read/1559/how-does-manage-external-storage-permission-work-in-android">How does MANAGE_EXTERNAL_STORAGE permission work in Android?</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Android Jetpack]]></title>
    <link href="http://toughcoder.net/blog/2023/02/15/introduction-to-android-jetpack/"/>
    <updated>2023-02-15T15:31:39+08:00</updated>
    <id>http://toughcoder.net/blog/2023/02/15/introduction-to-android-jetpack</id>
    <content type="html"><![CDATA[<p><a href="https://developer.android.com/jetpack">Android Jetpack</a>是一个由谷歌官方提供的安卓开发套件（套件是一组组件的意思），目的是帮助安卓开发者解决兼容性问题，减少重复代码，提升体验和性能，最重要的是提升开发效率。安卓以碎片化著名，不同的版本，不同的OEM厂商导致整个安卓设备碎片化严重，对App生态来说是很不友好，加之安卓本身的原因导致像流畅度，体验和性能始终逊水果不止一筹。后来谷歌推出一系列的Android SDK之外的一系列开发组件如<a href="https://developer.android.com/topic/libraries/support-library">support library</a>来解决兼容性(App compat)和新的开发组件(RecyclerView, CardView, Pager等)，后来这些东西就演变成了现在的Android Jetpack。</p>

<p><a href=""><img src="https://mobikul.com/wp-content/uploads/2020/07/navigation.png" title="auto auto" ></a></p>

<!-- more -->


<h2>缘起</h2>

<p>最开始是一坨support library，有v4有v7还有v13，它们是针对 不同的SDK版本使用的不同的兼容性组件。后来到了2017年的Google I/O，又推出了一系列叫做Android Architecture Components，然后到了2018年的Google I/O大会，把所有这一坨融合了在一起，进行了大统一，起了个新名字叫做Android Jetpack，各个组件包名统一为androidx.&#42;。这便是Android Jetpack的由来。</p>

<p>之后2019年Google I/O，已经初具格局，之后Android Jetpack就定型了，不断的向前演进，更新的频次也很快，每当有的新的技术，新的编程范式都会有所呈现，甚至有点超过Android SDK本身了。Android SDK与安卓本身是绑定在一起的，受制于底层SoC的发展，因为它毕竟是一个操作系统。但Android Jetpack却不一样，它是纯的三方软件，可以以相当快的速度在迭代，软件开发最前沿的东西都能快速得到尝试，只要它符合Android Jetpack本身的定位，会很快被纳入其中。</p>

<h2>Android Jetpack到底是个啥</h2>

<p>前面说了好多废话，下面来看一下Android Jetpack到底是个啥，它就是一套软件开发组件，由谷歌官方提供，能解决Android App开发中的比较蛋疼的问题（如兼容性和碎片化），并有很多能提升体验，提升性能提升效率的组件。</p>

<p>它提供了四大技术组件：</p>

<table>
<thead>
<tr>
<th style="text-align:left;"> 技术方向 </th>
<th style="text-align:left;"> 组件 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> Foundation components </td>
<td style="text-align:left;"> <a href="https://developer.android.com/jetpack/androidx/releases/appcompat">App compat</a><br/>Multidex<br/><a href="https://developer.android.com/training/testing/">Test</a><br/><a href="https://developer.android.com/kotlin/ktx">Android KTX</a> </td>
<td style="text-align:left;"> 兼容性组件<br/>测试框架<br/>Kotlin支持 </td>
</tr>
<tr>
<td style="text-align:left;"> Architecture components </td>
<td style="text-align:left;"> <a href="https://developer.android.com/topic/libraries/data-binding/">Data binding 优雅的把数据绑定到View上，省去findView and setText</a><br/><a href="https://developer.android.com/topic/libraries/architecture/lifecycle">Lifecycles 感知系统框架(Activity/Fragment)的生命周期</a><br/><a href="https://developer.android.com/topic/libraries/architecture/livedata">LiveData 监听数据变化且能感知生命周期</a><br/><a href="https://developer.android.com/guide/navigation">Navigation 内部页面跳转</a><br/><a href="https://developer.android.com/topic/libraries/architecture/paging/v3-overview">Paging 分页</a><br/><a href="https://developer.android.com/training/data-storage/room">Room 数据库封装</a><br/><a href="https://developer.android.com/topic/libraries/architecture/viewmodel">ViewModel MVVM式架构</a><br/><a href="https://developer.android.com/topic/libraries/architecture/workmanager/">WorkManager 耗时后台任务或者定时后台任务</a> </td>
<td style="text-align:left;"> 在架构层面能起到作用的组件<br/>增强模块化，可测试性和可维护性 </td>
</tr>
<tr>
<td style="text-align:left;"> Behavior components </td>
<td style="text-align:left;"> <a href="https://developer.android.com/training/camerax">CameraX</a><br/><a href="https://developer.android.com/develop/ui/views/components/settings">Preference</a><br/> </td>
<td style="text-align:left;"> 更好的与Android系统进行交互 </td>
</tr>
<tr>
<td style="text-align:left;"> UI components </td>
<td style="text-align:left;"> <a href="https://developer.android.com/develop/ui/views/animations">Animations and Transitions</a><br/><a href="https://developer.android.com/develop/ui/views/text-and-emoji/emoji-compat">Emoji</a><br/><a href="https://developer.android.com/guide/fragments">Fragments</a><br/><a href="https://developer.android.com/develop/ui/views/graphics/palette-colors">Palette 调色板</a><br/><a href="https://developer.android.com/develop/ui/views/layout/declaring-layout">Layouts</a> </td>
<td style="text-align:left;"> 更丰富更强大的UI部件，<br/>体验好，兼容性好，易于使用 </td>
</tr>
</tbody>
</table>


<h2>为何要用它</h2>

<p>自从2019年起统一成了Android Jetpack后，它相较之前分散的support library在整个生态中的地位不一样了，现基本上与Android SDK有着同等的重要性，甚至很多东西都会优先被放到Jetpack里面。</p>

<p>毕竟它是由谷歌官方主推的东西，是由正统的Android专家写出来的，质量是有保证的。并且现在它的迭代速度也很快，生态上已形成闭环，如果能解决项目上的问题，当然首选Android Jetpack。</p>

<h2>Jetpack Compose又是个啥</h2>

<p>在2019年的Google I/O与Jetpack一起发布的还有一个叫做<a href="https://developer.android.com/jetpack/compose">Compose</a>的东西，它是一个符合<a href="https://m3.material.io/develop/android/jetpack-compose">Material Design</a>的全新的写UI的方式，基于Kotlin语言。
需要注意的是Compose是一种构建原生UI的方式，它用Kotlin DSL的方式来构建 UI，而不是原始的View和XML，它有点类似于早先的anko。</p>

<p>需要特别注意的是，它并不像Android Jetpack那样是一种三方组件，而是一种构建原生UI的方式，它的野心也比较大，并不局限于构建Android UI，现在也支持构建 Desktop UI了，重点理解它是一种构建UI界面的工具，至于底下的平台可以适配到任何平台。结合Kotlin，Kotlin也在做<a href="https://kotlinlang.org/docs/multiplatform-mobile-getting-started.html">KMM Kotlin Multiplatform Mobile</a>，也即跨平台的Kotlin，以后的Compose可以生成任何平台的目标文件。</p>

<p>所以，学习Compose的曲线就要比Jetpack要陡峭得多了，因为Jetpack其实就是额外的一些三方组件，但Compose是一种全新的构建UI的方式，需要系统的学习才能掌握它。并且除非你从头搭建app，否则Compose很难与现有的UI构建方式(View和XML)融合在一起。其实这种东西并不新鲜，从<a href="https://reactnative.dev/">React Native</a>到<a href="https://flutter.dev/">Flutter</a>都是这种可以构建跨平台UI的工具(虽然RN和Flutter并不仅仅是UI，它们号称跨平台构建App，UI是跨平台最大的挑战，因为每个平台的原生UI构建方式都不一样，非UI部分，做一层API的桥接就可以做到)。</p>

<p>而且感觉Compose想要挑战RN和Flutter难度也不小，因为RN和Flutter出生就是为了跨平台开发，而Compose是生于安卓UI，它们的出发点的高度并不一样，是因为有了Kotlin KMM的支持，所以有想跨平台的野心。其实Compose是被<a href="https://developer.apple.com/cn/xcode/swiftui/">水果Swift UI</a>逼出来的，所以它的定位与Swift UI是一样的。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://blog.mindorks.com/what-is-android-jetpack-and-why-should-we-use-it/">What is Android Jetpack and why should we use it?</a></li>
<li><a href="https://stackoverflow.com/questions/50251658/what-exactly-is-android-jetpack">What exactly is Android Jetpack?</a></li>
<li><a href="https://www.geeksforgeeks.org/foundation-components-of-android-jetpack/?ref=lbp">Foundation Components of Android Jetpack</a></li>
<li><a href="https://www.geeksforgeeks.org/jetpack-architecture-components-in-android/?ref=lbp">Jetpack Architecture Components in Android</a></li>
<li><a href="https://www.geeksforgeeks.org/behaviour-components-of-android-jetpack/?ref=lbp">Behaviour Components of Android Jetpack</a></li>
<li><a href="https://www.geeksforgeeks.org/ui-components-of-android-jetpack/?ref=lbp">UI Components of Android Jetpack</a></li>
<li><a href="https://developer.android.com/modern-android-development">Modern Android Development</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to WebSocket]]></title>
    <link href="http://toughcoder.net/blog/2023/01/14/introduction-to-websocket/"/>
    <updated>2023-01-14T18:02:12+08:00</updated>
    <id>http://toughcoder.net/blog/2023/01/14/introduction-to-websocket</id>
    <content type="html"><![CDATA[<p><a href="https://javascript.info/websocket">WebSocket</a>是HTML5带来的新时代网络通信协议，它让前端的能力再一次得到提升，因为通信不再是单向的了。最初<a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API">在浏览器和JavaScript</a>中有很好的支持，现在各种编程语言和平台都支持WebSocket协议了。今天就来学习一下它。</p>

<p><a href=""><img src="https://cdn.educba.com/academy/wp-content/uploads/2019/05/What-is-WebSocket.jpg" title="auto auto" ></a></p>

<!-- more -->


<h2>缘起</h2>

<p>在以往的前端中通过Ajax或者Jsonp可以让前端像一般的桌面客户端一样，有了更好的交互方式，但总的来说仍然局限于单向通信，因为底层的协议仍是HTTP，只能由客户端发起请求，服务器来响应。对于更新潮的需求，比如服务器向客户端推送消息，用HTTP来实现就略显笨拙了，常规的方法就是<a href="https://en.wikipedia.org/wiki/Comet_(programming">建立长链接</a>)或者让客户端来轮询（polling），但这显然效率不高。于是就有了<a href="https://en.wikipedia.org/wiki/WebSocket">WebSocket</a>，它支持双向通信（全双工通信信道），除了客户端主动发起请求外，服务器也可以主动向客户端推送消息。通信效率和交互性又一次得到了大大的提升。</p>

<p>就协议本身来说，它与HTTP一样，都是基于TCP实现的，对于协议本身想要深入了解的，可以去看<a href="https://www.rfc-editor.org/rfc/rfc6455">协议规范</a>。</p>

<p><img src="https://tse1-mm.cn.bing.net/th/id/OIP-C.b0ueeCtwidYP_RDzAWPVOgHaF_?pid=ImgDet&amp;rs=1" alt="" /></p>

<p>另外，需要注意，WebSocket协议的地址的schema是<strong>wss://xxxx</strong>。</p>

<h2>WebSocket in Android</h2>

<p>安卓平台也已经有了现成的WebSocket协议可以使用了，已经比较成熟了，直接使用就行了。</p>

<ul>
<li><a href="https://github.com/TooTallNate/Java-WebSocket">Java-WebSocket</a> 是一个WebSocket协议的纯Java实现，适用于所有JVM平台</li>
<li><a href="https://socket.io/">Socket.IO</a> 这个不单单是WebSocket，它在WebSocket协议基础之上又进行了进一步的封装，在API的易用性面以及错误处理和状态处理上面有了不少的提升。各种语言平台基本都有支持了。</li>
</ul>


<h2>测试服务器</h2>

<p>光有客户端还不够，还需要有测试服务器，整理一下如何搭建测试服务器。</p>

<h3>公有的测试服务器</h3>

<p>在线的免费的可公开使用的简单WebSocket服务器，一般都是echo式的，也即把请求的数据直接当成回复推给client，这个可以当作chat类的测试server。</p>

<ul>
<li><a href="wss://echo.websocket.org">wss://echo.websocket.org</a></li>
<li><a href="https://socketsbay.com/test-websockets">wss://socketsbay.com/wss/v2/1/demo/</a></li>
<li><a href="https://glitch.com/~websocket-echo">WebSocket on Glitch</a></li>
</ul>


<p><img src="https://quarkus.pro/guides/images/websocket-guide-architecture.png" alt="" /></p>

<h3>自已搭建服务器</h3>

<p>此外，就是用WebSocket服务端的组件来自己搭建服务器，当然也都有现成的组件，配置一下就可以了，只不过需要运行在自己的Server上面。</p>

<ul>
<li><a href="https://socket.io/">Socket.IO</a> 对的，这货Server端Client端全套都提供了</li>
<li><a href="https://github.com/uNetworking/uWebSockets">uWebSockets</a> 核心库是用C/C++实现的，可以与Node.js无缝衔接</li>
<li><a href="https://github.com/theturtle32/WebSocket-Node">WebSocket-Node</a> 基于Node.js，用纯JavaScript实现的</li>
<li><a href="http://websocketd.com/">websocketd</a> 一个独立的WebSocket Daemon，不依赖于其他的组件，功能强大，配置简单，方便使用，只需要提供一个Shell脚本就可以了</li>
<li><a href="https://github.com/jmalloc/echo-server">echo-server</a> 基于Go实现的，支持HTTP协议和WebSocket协议的echo server</li>
<li><a href="https://pypi.org/project/echo-server/">python echo server</a> 基于Python的echo server，不确定是否支持WebSocket</li>
<li><a href="https://echo.labstack.com/">Echo</a> 基于Go的Echo Web Frameworks</li>
<li><a href="https://github.com/websockets/websocket-echo-server">WebSocket echo server</a> 基于Node.js</li>
</ul>


<h2>参考资料</h2>

<ul>
<li><a href="http://www.ruanyifeng.com/blog/2017/05/websocket.html">WebSocket 教程</a></li>
<li><a href="https://github.com/nkzawa/socket.io-android-chat">socket.io-android-chat</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/23467317">WebSocket 与 Socket.IO</a></li>
<li><a href="https://juejin.cn/post/6844903577438126094">Android WebSocket 编程</a></li>
<li><a href="https://www.jianshu.com/p/7b919910c892">Android WebSocket实现即时通讯功能</a></li>
<li><a href="https://www.jianshu.com/p/4e80b931cdea">Socket.io</a></li>
<li><a href="https://www.lob.com/blog/websocket-org-is-down-here-is-an-alternative">Websocket.org Is Down, Here Is an Alternative</a></li>
<li><a href="https://blog.postman.com/introducing-postman-websocket-echo-service/">Introducing Postman’s WebSocket Echo Service</a></li>
<li><a href="https://www.piesocket.com/blog/echo-websocket-org-alternative">An Alternative To Echo.WebSocket.Org – Live WebSocket Server
</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android逆向技术高阶大法]]></title>
    <link href="http://toughcoder.net/blog/2022/01/23/android-reverse-engineering-tricks/"/>
    <updated>2022-01-23T11:39:55+08:00</updated>
    <id>http://toughcoder.net/blog/2022/01/23/android-reverse-engineering-tricks</id>
    <content type="html"><![CDATA[<p>安卓应用是一个客户端，与传统软件类似，需要把软件打包，然后通过某种渠道（应用市场）分发给用户，这是常规的发布方式，它的更新节奏很慢，从你在应用市场上更新后，到用户真正的执行升级，这中间很慢的，而且很多用户根本不会升级新版本，这对于互联网来说是极不友好的。传统的互联网，用户刷新一下网页后，就能看得到更新了，但对于客户端，这行不通，要想实现小时级别的发布和分钟级别的问题修复，正规的发布渠道是做不到的。于是各路大神和专家开始研究客户端的前端化，也就是运用各种技术能让发布，特别是一些问题修复性的小规模发布可以更快的传递到用户手中。</p>

<p><a href=""><img src="https://images.xiaozhuanlan.com/photo/2017/3709753fdbe5d81e50abb1090511b92a.jpg" title="auto auto" ></a></p>

<!-- more -->


<p>这与正向方法不一样，谷歌或者水果针对 应用市场有明确 的流程的，这是常规发布也即是正向方式。今天我们来聊一聊非正向方法，非常规方式，来实现小模块的发布和热修复。</p>

<h2>核心技术原理</h2>

<p>任何一项技术都离不开编程语言和操作系统上的支持，对于插件化技术来说，最为核心的原理就是Java支持反射，这是一种运行时修改代码的技术，另外就是动态代理，这是插件化可行的根本技术支撑。</p>

<p>说到底，Java仍是一种解释型语言，它的核心是JVM，即也虚拟机，我们所熟悉的Java编程语言，本质上是套在JVM上的一层语法规则，换了一种语言规则也是可行的。就好比Kotlin，Scala和Groovy它们的语法与Java相差很大，但它们编译过后的字节码是完全符合JVM规范的，可以直接运行在JVM之上。</p>

<p>其他的纯解释型语言，如Python和JavaScript，它们在运行时可以动态的加载一段源码，这即是动态化，可以实现真正的插件化，运行时直接加载运行一段代码。Java略变态一些，但它本质上是JVM，而JVM通过反射和动态代理，在一定程度上支持了类似的动态化，就是通过ClassLoader来动态加载一些编译好的Class。</p>

<p>此为插件化的核心原理。</p>

<p>动态代理机制，可以读这几篇文章：</p>

<ul>
<li><a href="https://www.cnblogs.com/bryan31/p/15266725.html">动态代理大揭秘，带你彻底弄清楚动态代理</a></li>
<li><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1264804593397984">动态代理</a></li>
<li><a href="https://www.cnblogs.com/techyc/p/3455950.html">Java的动态代理(dynamic proxy) </a></li>
<li><a href="https://www.cnblogs.com/gonjan-blog/p/6685611.html">java动态代理实现与原理详细分析</a></li>
<li><a href="https://www.cnblogs.com/codingblock/p/6580364.html">小白也能看懂的插件化DroidPlugin原理（一）&ndash; 动态代理</a></li>
</ul>


<h2>Hook大法</h2>

<p>有了核心原理，才有可行的方案。Hook主要研究三方面内容，一是研究ClassLoader，因为不同的dex分属于不同的层级，它们的ClassLoader不一样，反射的第一步就是要能加载到想要的Class，这个要靠找到合适的ClassLoader；二是动态代理机制，hook的核心原理就是用动态代理机制，创建一个Mock对象用以替换掉原来的，所以接口Interface是关键，原系统设计中必须使用大量接口，并且是以标准方式使用的（没有强制向下转型downcast），这样你创建出来的动态代理去替换才是安全的；三就是学习安卓系统核心组件 的流程，以找到最佳的hook地点。</p>

<p>其实，第3条才是对大部分人最为有益的。</p>

<p>具体如何做hook，可以参考以下文章：</p>

<ul>
<li><a href="https://cloud.tencent.com/developer/article/1562137">Android 插件化原理解析——Service的插件化</a></li>
<li><a href="https://weishu.me/2016/03/07/understand-plugin-framework-ams-pms-hook/">Android 插件化原理解析——Hook机制之AMS&amp;PMS</a></li>
<li><a href="https://mp.weixin.qq.com/s/40NTVRw127JcJh_rL5HtwA">探索Android开源框架 - 10. 插件化原理</a></li>
<li><a href="https://www.cnblogs.com/codingblock/p/6642476.html">小白也能看懂的插件化DroidPlugin原理（二）&ndash; 反射机制和Hook入门</a></li>
</ul>


<p>由于安卓版本升级的原因，上面这几个文章都失效了，例子行不通了。但是这几遍对于原理解释的还是相当清楚的。</p>

<p>以下文章对于新版本也是适用的。</p>

<ul>
<li><a href="https://www.codenong.com/js57705d332677/">基于Android9.0的Hook Activity 的启动（插件化）</a></li>
<li><a href="https://www.jianshu.com/p/eb4121b037e2">Android Hook Activity 的几种姿势</a></li>
<li><a href="https://juejin.cn/post/6844903769650511879">Activity插件化原理第一种方案：Hook Instrumentation</a></li>
<li><a href="https://juejin.cn/post/6844903773823827975">Activity插件化原理第二种方案：Hook IActivityManager</a></li>
<li><a href="https://blog.csdn.net/qq_24675479/article/details/79334567">拦截Activity的启动流程绕过AndroidManifest检测</a></li>
</ul>


<p>需要注意的是，hook这件事情，最基础的技术很简单，就通过反射来替换对象，把系统中的对象替换为仿造的，仿造有三种方式，一是直接创建，这需要类是比较简单的情况，并不需要开放出来，通过反射一切皆可创建；二是继续，这个对于复杂对象也能仿造，如Instrumentation，但是需要类是开放出来的；三是接口，通过动态代理 创建仿造对象（也即代理 ）。核心技术就这些。其他的，全是对于系统代码的理解，找到可行的关键点来进行hook。</p>

<p>另外就是，谷歌对逆向方法限制越来越严了，反射系统的东西，会有限制，有时仅是打印日志，但指不定哪天就不给反射了。</p>

<pre><code>Accessing hidden field Landroid/app/ActivityManager;-&gt;IActivityManagerSingleton:Landroid/util/Singleton; (light greylist, reflection)
</code></pre>

<h2>插件化原理</h2>

<p>学习一门技术最好的方式就是去研读优秀的开源库的源码，对于插件化，现在有很多比较成熟 的开源框架存在了，可以挑几个比较有代表性的来研究 一下。</p>

<h3><a href="http://droidpluginteam.github.io/DroidPlugin/">DroidPlugin</a></h3>

<p>这个基于动态代理创建的插件方法，较为流行，里面有大量的hook技术，网络上也有很多解析此框架的<a href="https://blog.csdn.net/zhejiang9/article/details/89407283">文章</a>，可以帮助理解。</p>

<p>它用了大量的hook，优点就是插件本身可以是正常的apk，无太多的限制，就用常规的app开发方式开发就好，这是它的最大优势，因为对插件无限制，所以框架本身就需要做大量的hook，是学习hook技法的良好例子。</p>

<h3><a href="https://github.com/singwhatiwanna/dynamic-load-apk">DL : Apk动态加载框架</a></h3>

<p>这个是以静态代理为基础创建的插件框架，并没有大量的hook，可以参看它的解析<a href="https://www.jianshu.com/p/30114b7176a3">文章</a>。</p>

<p>任大神的框架适配性较好，基本上是纯软件层的技术（静态代理），没怎么hook。当然缺点也相当明显，就是对于插件的开发要求很苛刻，必须实现框架本身自定义的一坨东西，与安卓标准的app开发差异较大，且越来越大，并且对于打包和开发过程并无工具支持，在实际应用过程中较为麻烦。退一步讲，并未有真正达到插化的目的，它对插件的限制较大。</p>

<p>现在已经基本没人用了，不过这属于开山之作。</p>

<h3><a href="https://github.com/iqiyi/Qigsaw">Qigsaw</a></h3>

<p>这个与其他插件框架的最大差别在于，它最接近于官方的东西（<a href="https://developer.android.com/guide/app-bundle/">App bundle</a>），它的重点在于项目模块化和打包上面，对于常规理解上的『插件』所做的事情特别少，hook特别少，安装和加载插件的过程比较很简单，接近原生，核心在于它的打包过程。<a href="https://www.bookstack.cn/read/Qigsaw/c47ca9c7359b0d0d.md">这里</a>有详细的介绍。</p>

<p>另外，包建强的书<a href="https://item.jd.com/12408095.html">《Android插件化开发指南》</a>也可以读一读的，书的好处在于，它毕竟是一个整体，从基础的技术原理到hook原理都有讲，还是相当不错的。不过书比较旧了 ，要结合<a href="https://www.cnblogs.com/Jax/p/9316422.html">作者的勘误</a>，以及网上的文章一起来消化理解。</p>

<h2>热修复原理</h2>

<p>除了插件化，另外一个大厂热衷的技术便是热修复，这也是大厂头部应用的标配技术。其实插件化，也能实现热修复，比如某个插件，一般是厂里的一个业务，出问题了，紧急打包发布一个修复的版本，然后更新插件。不过，这略显笨重，相当于用牛刀去杀鸡了，总之就是效率不高。</p>

<p>真正的热修复技术讲究效率，且要小巧，针对 点对点式的修复。它的核心原理就是替换，用反射去替换类（修改dex classloader中的dex顺序），以及对方法的替换（侵入虚拟机中的method表，进行替换），还分冷生效（类替换一般是冷生效，也即下次启动时生效）和热生效（方法替换一般是热的，下次调用此方法时就生效了，因为它并不涉及classloader，无需要重新加载类），还有插桩式的，在代码中直接插桩，先检查有没有patch，有patch就先运行patch（这个思路最简单，适配性也好，但实行难度大，需要对现有代码进行插桩）。</p>

<p>这几篇文章有比较详细的讨论。</p>

<ul>
<li><a href="https://www.cnblogs.com/popfisher/p/8543973.html">Android热修复技术原理详解</a></li>
<li><a href="https://www.jianshu.com/p/6ae1e09ebbf5">Android热修复技术，你会怎么选？</a></li>
<li><a href="https://www.jianshu.com/p/8891f95f6e8e">探索Android开源框架 - 11. 热修复原理</a></li>
</ul>


<h3>具体的热修复工具</h3>

<h4>xposed派系</h4>

<p>也即原生的<a href="https://github.com/rovo89/Xposed">Xposed</a>和<a href="https://github.com/rovo89/XposedBridge">Xposed framework</a>
以及大阿里的衍生版本<a href="https://github.com/alibaba/dexposed">dexposed</a>。</p>

<p>针对 方法可以热生效的hook，当年Dalvik时代，这个东西还是相当牛逼的，时过境迁虽然Art上无法用了，但不妨用来学习。</p>

<h4><a href="https://github.com/alibaba/AndFix">Andfix</a></h4>

<p>原产自支付宝的与Xposed类似的方法级的hook工具，支持Dalvik与Art，值得使用和学习。</p>

<h4><a href="https://github.com/panhongwei/AndroidMethodHook">AndroidMethodHook</a></h4>

<p>可以用来学习sophix，sophix是大阿里的东西，把andfix以及dexposed商业化了，不再开源免费用了。这个项目比较接近它们，可以用来学习。</p>

<h4><a href="https://github.com/Tencent/tinker">Tinker</a></h4>

<p>微信出品的Tinker，核心技术还是用dex替换实现的class替换，冷生效。</p>

<p>它的重点在于补丁dex的差量生成，以及发布平台，还做成了收费平台，变成一种服务。所以，你看核心技术是由目标平台（安卓）决定的，原理大家也都懂，各家也都大差不差的，也都有开源现成的方案可以用，但这远远不够，整个链路是值得深挖的，这也是能产生商业价值的地方。</p>

<h4><a href="https://github.com/dodola/HotFix">HotFix</a></h4>

<p><a href="https://zhuanlan.zhihu.com/p/20308548">安卓App热补丁动态修复技术介绍</a></p>

<h4><a href="https://github.com/jasonross/Nuwa">Nuwa</a></h4>

<p><a href="https://www.cnblogs.com/fanfu1/p/5506149.html">安卓热更新之Nuwa实现步骤</a></p>

<h4><a href="https://github.com/Meituan-Dianping/Robust">Robust</a></h4>

<p><a href="https://tech.meituan.com/2017/03/17/android-autopatch.html">Android热更新方案Robust开源，新增自动化补丁工具</a></p>

<p>这个与Nuwa一样，都用了代码插桩，当然插桩过程，是用了字节码工具（如ASM），进行编译时自动化处理，最终字节码（APK）是受影响的，但源码层面是无感知的。</p>

<h2>瓶颈在哪里</h2>

<p>插件化这项技术，它的成本特别高，但收益有限，需要庞大的研发体系来支持，并且只有长期投入，才能产出一些价值。因此，现在来说只有头部大厂才真正玩得转。</p>

<h3>技术本身并不是瓶颈</h3>

<p>这项技术的可行性是由Java决定的，因此一直是可行的。但每年的Android版本，都会对核心组件进行不同程度的强化和升级，这会导致之前的一些方案可能一下子就失效了。另外，手机厂商可能也会做一些修改，不过一般都比较小。</p>

<p>安卓 版本升级，会对插件化有影响，甚至会让现有方案全部失效，但这个还真不是这项技术的瓶颈。因为安卓 升级较慢，正常一年一个版本，但是对核心组件大变化，通常几年才有一次，这个速度对比三方技术的演进还是相当慢的。前面说了这项技术头部大厂最为受益，因此他们会有专门的专家级别的人物在研究，谷歌出了政策，很快就会对策出来，一般用不了多久，插件化技术大拿们就能给出针对 新版本的解决方案。</p>

<p>由于开源和技术分享，很快便会在业界普及。因此，单就技术本身，绝不是瓶颈，并且由于开源的发展，核心业务本身都是开源的，大家都能很快使用最先进的技术。</p>

<h3>网络和平台能力才是瓶颈</h3>

<p>插件化这个事情，想要真正的用好，光有核心业务还是不够的。核心业务现在都有现成的开源库，拿过来就可以用，但这远远不够。</p>

<p>就从一个插件从开发人员手中到用户手中，并成功安装生效，这一过程拆来看需要多少东西吧：</p>

<ol>
<li>插件的开发，需要一些辅助工具。理想的情况下，一个插件模块的开发，应该与常规应用开发是一样的，但毕竟它的构建目标是一个插件，而非标准的app，所以你需要针对核心业务插件框架适用的一些开发工具。这个一般开源框架中都有提供，但不见得有那么好。</li>
<li>构建和打包。如果是一个合格的插件化框架，一定会有怎么构建 打包的配套设施。</li>
<li>测试和调试。这里面的难点在于，如何能尽可能的模拟真实的流程，并且能方便的来实施测试和验证结果</li>
<li>发布上线控制。一些细节就是如何精准推送，如何做灰度发布，以及发现问题后如何快速回滚（你看，这哪一项涉及插件化技术）</li>
<li>下载。客户端的一个最大的问题就是，客户端在客户那里，我们发布的东西都在服务器上，如何能让插件顺利的送达到用户手中。别小看这个，网络问题永远是出错误原因里面最多的一个，而且容易被测试忽略，因为研发人员自己的网络环境一般简单且稳定。（一个最简单的测试就是，当你在电梯里，地铁里，高铁时，厕所里，山上，河里，村里，手机里面的应用还有几个能正常联网的？）</li>
<li>安装和生效。这个也是插件化的核心业务，框架都会支持的。难点在于校验，就是客户端拿到的插件是不是符合预期的，文件有没有损坏，有没被篡改。</li>
<li>降级。这个通常插件化框架不会提供。降级的意思就是如果插件安装更新失败了，你怎么办？能否回滚，如果这个插件彻底废了，有没有H5页面可以用？</li>
</ol>


<p>我们粗略来看，就能分出上面7个步骤，其实还有更细的。上面这些里，插件化开源框架一定能解决的是2和6，1和3会在一定程度上支持。而其他的只有靠自己了，当然 也可能会有一些开源软件可以用，但它们并不纯是为了插件化而做的。这些东西都属于研发效率平台，甚至是涉及软件流程，基本上都属于商业公司的核心业务机密了，基本上是不可能开源的，而且不同的公司文化制度流程都不一样，即使开源给你了，也不一定用得上。但这恰恰又是最能体现一个公司结合技术实力的地方，小公司或者综合能力差的公司，即使有现成的插件化框架方案给你，你也用不好，因为配套设施不行。再次佐证，插件化这东西只有头部大厂才能玩得转，并产生正收益。</p>

<p>这些才是真正的瓶颈。</p>

<h2>这是逆向工程技术</h2>

<p>插件化需要用到大量的反射和动态代理技术去hook安卓系统，从而实现官方并不直接支持的特性，这属于逆向工程，与官方倡导的方向并不一致。</p>

<p>而且，只有在国内圈子里面才比较流行，国外的一些大厂和专家似乎并不愿意花时间和精力搞这些事情。很难简单的用好与坏来评价，只能说文化不同。</p>

<p>逆向工程技术局限性较大，很难长久发展， 一旦官方把某个关键地方堵住（不能说是漏洞，而一些关键的对象和接口），很多插件框架可能就废掉了，当然了道高一尺，魔高一丈，总还是能找到可以hook的地方，仍总感觉怪怪的。</p>

<p>常规的技术，如编程范式（函数式编程，Reactive，RxJava），编程语言，平台框架和轮子（如Picasso，如OkHttp），这些是纯正的技术，不受制于任何平台，不但能长久发展，更能反过来推动官方进步（如OkHttp已被谷歌内置为安卓内部作为HTTP协议的实现）。</p>

<p>综合来说，除非你需要专门研究插件化，并能得到收益之外（对业务，对公司，对个人），对于插件化技术，了解一下就够了，而且这东西并不能真正的提升软件质量（它带来的问题比它解决的要多很多）。不如把时间花在业务上面，花在编程范式，花在编程语言，花在流行的框架和轮子上面，这更能提升软件质量，且是终生受益的。毕竟，假如代码质量够好，发出去的版本都可控，都能达到预期，也就没必要折腾插件化了（即使是对大厂头部应用来说，版本的发布仍主要是靠正常的apk发布，插件迭代一般用在正常版本来不及时使用比如电商的双11期间）。</p>

<p><strong>研发工具（如Instant Run），调试工具（如获取 一些运行时的信息，在线调试），测试工具（如Mock），不侵入源码式编程（动态插桩，AOP和依赖注入）</strong>才是反射和动态代理以及Hook的最终归宿，是值得我们深入研究和学习的方向。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://www.kancloud.cn/alex_wsc/android/504478">动态注入技术（hook技术）</a></li>
<li><a href="https://www.jianshu.com/p/b30ea19c444b">Android插件化原理解析——Hook机制之动态代理</a></li>
<li><a href="https://blog.csdn.net/yulong0809/article/details/56842027">插件化知识详细分解及原理 之代理，hook，反射</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/109157321">盘点Android常用Hook技术</a></li>
<li><a href="https://www.jianshu.com/p/4f6d20076922">理解 Android Hook 技术以及简单实战</a></li>
<li><a href="https://tech.meituan.com/2018/02/02/android-anti-hooking.html">Android Hook技术防范漫谈</a></li>
<li><a href="https://juejin.cn/post/6844903941105270798">Android插件化——高手必备的Hook技术</a></li>
<li><a href="https://blog.csdn.net/gdutxiaoxu/article/details/81459830">Android Hook 机制之简单实战</a></li>
<li><a href="https://juejin.cn/post/6998085562573783076">字节跳动开源 Android PLT hook 方案 bhook</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
