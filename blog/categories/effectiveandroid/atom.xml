<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Effectiveandroid | 稀有猿诉]]></title>
  <link href="https://alexhilton.github.io/blog/categories/effectiveandroid/atom.xml" rel="self"/>
  <link href="https://alexhilton.github.io/"/>
  <updated>2025-07-17T23:15:53+08:00</updated>
  <id>https://alexhilton.github.io/</id>
  <author>
    <name><![CDATA[Alex Hilton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[为什么你的App总是忘记所有事情]]></title>
    <link href="https://alexhilton.github.io/blog/2025/07/11/app-keep-forgetting/"/>
    <updated>2025-07-11T23:20:20+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/07/11/app-keep-forgetting</id>
    <content type="html"><![CDATA[<p>本文译自「Why Your App Keeps Forgetting Everything」，原文链接<a href="https://medium.com/mobile-app-development-publication/why-your-app-keeps-forgetting-everything-aa9ad8dd8f6b">https://medium.com/mobile-app-development-publication/why-your-app-keeps-forgetting-everything-aa9ad8dd8f6b</a>，由Android Dev Nexus发布于2025年6月13日。</p>

<p><a href=""><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*OqqSvUytY9D0D4EIX_Cn0A.png" title="auto auto" ></a></p>

<!-- more -->


<p>不知你有没有发现了一个让许多 Android 开发者困惑的关键问题：ViewModel 和 savedInstanceState 解决的是不同的问题，并且拥有不同的生命周期。</p>

<p>让我来解释一下你的测试中究竟发生了什么，以及为什么这两种机制都存在。</p>

<h2>Android 中的两种“死亡”类型</h2>

<p>Android 应用可以通过两种截然不同的方式“死亡”：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*1-DtrKgBiEVyWj0RgbaNoQ.png" alt="" /></p>

<h3>1. 配置变更（屏幕旋转等）</h3>

<ul>
<li>Activity/Fragment：死亡并重建</li>
<li>ViewModel：幸存！🎉</li>
<li>savedInstanceState：也幸存，但此时你并不需要它</li>
</ul>


<h3>2. 进程死亡（应用最小化、内存不足等）</h3>

<ul>
<li>Activity/Fragment：死亡</li>
<li>ViewModel：也死亡！💀</li>
<li>savedInstanceState：幸存并成为你的生命线</li>
</ul>


<h2>测试结果不撒谎</h2>

<pre><code class="Kotlin">// 进程死亡时会发生什么:

// 最小化应用程序之前:
class MyViewModel : ViewModel() {
    var userData = "Important data"
    var counter = 42
}
// 重新打开应用程序后:
// - 新的 ViewModel 实例已创建（旧数据已消失）
// - 但是 onCreate() 接收了已保存数据的 savedInstanceState 包
// - 你需要手动从 savedInstanceState 恢复 ViewModel
</code></pre>

<p>你猜测的完全正确：ViewModel 需要额外的步骤来存储/恢复数据，即使进程终止。</p>

<h2>完整的解决方案：两者结合</h2>

<p>以下是现代 Android 开发处理这个双层系统的方法：</p>

<pre><code class="Kotlin">class MainActivity : AppCompatActivity() {
    private lateinit var viewModel: MyViewModel

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        viewModel = ViewModelProvider(this)[MyViewModel::class.java]

        // 检查我们是否正在从进程死亡中恢复
        if (savedInstanceState != null &amp;&amp; viewModel.isEmpty()) {
            // 从 savedInstanceState 恢复 ViewModel
            val userData = savedInstanceState.getString("user_data", "")
            val counter = savedInstanceState.getInt("counter", 0)
            viewModel.restoreFromSavedState(userData, counter)
        }
    }

    override fun onSaveInstanceState(outState: Bundle) {
        super.onSaveInstanceState(outState)
        // 保存关键的 ViewModel 数据以避免进程死亡
        outState.putString("user_data", viewModel.userData)
        outState.putInt("counter", viewModel.counter)
    }
}

class MyViewModel : ViewModel() {
    var userData: String = ""
    var counter: Int = 0

    fun isEmpty(): Boolean = userData.isEmpty() &amp;&amp; counter == 0

    fun restoreFromSavedState(userData: String, counter: Int) {
        this.userData = userData
        this.counter = counter
    }
}
</code></pre>

<h2>当每个机制生效时</h2>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*dmQnYfNrJik_bbpuNT7bzQ.png" alt="" /></p>

<p>让我来向你展示一下不同场景下的具体情况：</p>

<h3>场景 1：屏幕旋转</h3>

<pre><code class="Bash">Before rotation: 
- ViewModel: Alive with data ✅ 
- savedInstanceState: Gets saved but not really needed 

After rotation: 
- ViewModel: Same instance, data intact ✅ 
- savedInstanceState: Available but redundant 
- Result: ViewModel data is immediately available
</code></pre>

<h3>场景2：应用程序最小化→重新打开（进程死亡）</h3>

<pre><code class="Bash">Before minimizing: 
- ViewModel: Alive with data ✅ 
- onSaveInstanceState(): Saves critical data to Bundle
After reopening:
- ViewModel: NEW instance, no data ❌
- savedInstanceState: Contains saved data ✅
- Result: Must restore ViewModel from savedInstanceState
</code></pre>

<h3>场景 3：应用程序最小化 → 重新打开（进程存活）</h3>

<pre><code class="Bash">Before minimizing: 
- ViewModel: Alive with data ✅
After reopening:
- ViewModel: Same instance, data intact ✅
- savedInstanceState: null (no recreation happened)
- Result: ViewModel data is immediately available
</code></pre>

<h2>那么，为什么存在这个双层系统？</h2>

<p>ViewModel 处理常见情况：</p>

<ul>
<li>复杂的 UI 状态，你不希望在频繁旋转屏幕时丢失。</li>
<li>任何需要耗费大量资源重新创建的内容。</li>
</ul>


<p>savedInstanceState 处理特殊情况：</p>

<ul>
<li>进程死亡难以预测。但当它发生时，用户希望其状态能够持久保存。</li>
<li>小而关键的数据片段（例如用户输入、滚动位置）。</li>
<li>简单的 UI 状态，对用户体验至关重要。</li>
</ul>


<h2>Bundle 大小的现实检验</h2>

<p>以下是一些可以帮你免去调试麻烦的事情：Bundle 并非无限大的存储空间。你大约有 1MB 的空间可用，超过这个限制会导致
崩溃，让你质疑自己的人生选择。</p>

<p>保持 onSavedInstanceState 数据精简。保存用户写到一半的电子邮件草稿，而不是整个联系人列表。</p>

<h2>现代方法：SavedStateHandle</h2>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*ThuE7YpnrtfFQe2fwDlbDg.png" alt="" /></p>

<p>Google 意识到这种手动操作非常繁琐，因此他们创建了 SavedStateHandle ：</p>

<pre><code class="Kotlin">class MyViewModel(private val savedStateHandle: SavedStateHandle) : ViewModel() {

    // 这将自动保留配置更改和进程终止！
    var userData: String
        get() = savedStateHandle.get&lt;String&gt;("user_data") ?: ""
        set(value) = savedStateHandle.set("user_data", value)

    var counter: Int
        get() = savedStateHandle.get&lt;Int&gt;("counter") ?: 0
        set(value) = savedStateHandle.set("counter", value)

    // 无需手动恢复！
}
</code></pre>

<h2>对于以下情况，为什么仍然需要手动 onSaveInstanceState？</h2>

<h3>1. 不属于 ViewModel 的 UI 特定状态</h3>

<pre><code class="Kotlin">override fun onSaveInstanceState(outState: Bundle) {
    super.onSaveInstanceState(outState)
    // 这些不属于你的业务逻辑层
    outState.putInt("scroll_position", recyclerView.computeVerticalScrollOffset())
    outState.putBoolean("is_toolbar_expanded", collapsingToolbar.isExpanded)
    outState.putParcelable("dialog_state", currentDialog?.onSaveInstanceState())
}
</code></pre>

<h3>2. Fragment 参数和 Activity Extras</h3>

<pre><code class="Kotlin">// 这些需要在进程终止后继续存在，但不是 ViewModel 状态
class DetailFragment : Fragment() {
    companion object {
        fun newInstance(itemId: String) = DetailFragment().apply {
            arguments = Bundle().apply {  // 这在内部使用 savedInstanceState
                putString("item_id", itemId)
            }
        }
    }
}
</code></pre>

<h3>3. 视图状态过于特定于 UI</h3>

<pre><code class="Kotlin">// 诸如 EditText 光标位置、焦点状态等。
override fun onSaveInstanceState(outState: Bundle) {
    super.onSaveInstanceState(outState)
    outState.putInt("edit_text_selection_start", editText.selectionStart)
    outState.putInt("edit_text_selection_end", editText.selectionEnd)
}
</code></pre>

<h2>把手弄脏（动手试一试）</h2>

<p>你可以强制终止进程进行测试：</p>

<pre><code class="bash"># Kill your app process 
adb shell am kill com.yourpackage.name 
# Or use "Don't keep activities" in Developer Options
</code></pre>

<p>这将帮助你验证状态恢复是否正确进行。</p>

<h2>关键洞察</h2>

<p>ViewModel 非常适合配置更改，但需要帮助应对进程死亡。</p>

<p>现代方法是在 ViewModel 中使用 SavedStateHandle，它可以自动处理这两种情况。如果你尚未使用它，则需要手动执行 savedInstanceState → ViewModel 的恢复过程。</p>

<p>这个双层系统看似复杂，但实际上非常优雅：常见情况（配置更改）的快速恢复，以及罕见情况（进程死亡）的可靠恢复。</p>

<p>祝你编码愉快，愿你的状态始终持久！🚀</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[理解Android中的内存泄漏以及如何让LeakCanary来帮忙]]></title>
    <link href="https://alexhilton.github.io/blog/2025/03/01/understanding-memory-leaks/"/>
    <updated>2025-03-01T11:05:54+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/03/01/understanding-memory-leaks</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自<a href="https://proandroiddev.com/understanding-memory-leaks-in-android-how-leakcanary-can-help-4768df60f646">Understanding Memory Leaks in Android &amp; How LeakCanary Can Help</a>，原文发布于2024年12月27日。</p></blockquote>

<p><strong>译者注：</strong> 关于内存优化，笔者也曾经写过两篇文章，侧重于内存问题的深入分析，如有兴趣可以作为拓展阅读：<a href="https://juejin.cn/post/7277489569958756364">让你不再惧怕内存优化</a>和<a href="https://juejin.cn/post/7287913786038992915">Android应用性能剖析全攻略</a>。</p>

<p><a href=""><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*Sx4veSpq_Z1oYBsP5Q7nwQ.jpeg" title="auto auto" ></a></p>

<!-- more -->


<p>作为 Android 开发者，管理内存是构建高性能应用的一个最关键方面。开发者面临的一个最常见问题是内存泄漏。这些泄漏会对应用的性能和用户体验产生负面影响，导致运行缓慢、崩溃甚至电池耗尽你。但别担心——有一种解决方案可以让发现和修复内存泄漏变得更容易，那就是LeakCanary。</p>

<p>在这篇文章中，我们将首先探讨什么是内存泄漏、为什么会发生内存泄漏，然后介绍 LeakCanary 作为检测和修复 Android 应用程序中这些泄漏的强大工具。</p>

<h2>什么是内存泄漏？</h2>

<p>当你的应用保留不再需要的内存时，就会发生内存泄漏。简单来说，当不再使用的对象没有从内存中正确清除时，就会发生内存泄漏，从而导致你的应用消耗了不必要的内存。随着时间的推移，这可能会导致性能下降，在极端情况下，还会导致应用崩溃。</p>

<h2>内存泄漏为何如此危险？</h2>

<p>内存泄漏乍一看似乎无害，但它可能会给你的 Android 应用带来严重问题：</p>

<ol>
<li><strong>内存使用量增加：</strong> 当内存未释放时，应用会不断消耗更多资源，导致内存消耗过高。</li>
<li><strong>性能下降：</strong> 随着时间的推移，内存中保存的对象越来越多，应用会变得越来越慢，导致延迟和用户体验不佳。</li>
<li><strong>应用崩溃：</strong> 如果内存消耗达到临界水平，你的应用可能会崩溃甚至强制关闭。</li>
<li><strong>电池耗尽：</strong> 内存泄漏可能导致进程在后台运行，从而比预期更快地耗尽设备电池。</li>
</ol>


<h2>Android 中内存泄漏的常见原因</h2>

<ol>
<li><strong>保存对上下文的引用：</strong> 如果你在静态变量或单例中保存对 Activity 或 Context 的引用，它将永远不会被垃圾回收，因为系统仍会考虑正在使用的 Activity 或 Context。</li>
<li><strong>内部类和匿名类：</strong> 它们隐式保存对外部类（通常是 Activity 或 Fragment）的引用，从而防止它们被垃圾回收。</li>
<li><strong>未关闭的资源：</strong> 完成后不关闭 Cursor、Stream 或数据库连接等资源可能会导致内存堆积。</li>
<li><strong>事件侦听器：</strong> 如果你向 UI 元素添加侦听器（例如 OnClickListener），但在不再需要它们后没有将其删除，这些对象可能会泄漏内存。</li>
</ol>


<h2>LeakCanary 如何帮助检测 Android 中的内存泄漏</h2>

<p>现在我们了解了内存泄漏可能导致的问题，让我们来讨论一下可以帮助我们检测内存泄漏的工具：LeakCanary。</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/0*xas01FOk-1FlwDFe.png" alt="LeakCanary" /></p>

<p>LeakCanary 是一个适用于 Android 的开源内存泄漏检测库。它旨在自动识别开发过程中应用中的内存泄漏，让你在影响用户之前修复它们。</p>

<ul>
<li>当发生内存泄漏时，LeakCanary 会自动触发堆转储，对其进行分析，并向开发人员提供一份报告，指出泄漏发生的位置。这使开发人员能够更轻松地发现和解决内存泄漏，以免导致性能问题。</li>
</ul>


<h3>LeakCanary 如何工作？</h3>

<p>LeakCanary 的工作原理是监控应用的内存并分析堆转储以识别不应该存在的对象。当检测到内存泄漏时，它会生成一份报告，显示泄漏发生的位置，从而帮助你找出根本原因。</p>

<ol>
<li><strong>堆转储：</strong> 当 LeakCanary 检测到潜在泄漏时，它会进行堆转储（应用内存的快照），并将其与垃圾回收后的堆进行比较。如果它发现不应保留的对象，它会将其标记为泄漏。</li>
<li><strong>泄漏的对象：</strong> LeakCanary 会向你显示哪些对象被保存在内存中以及引用链中，帮助你识别导致泄漏的对象以及它仍被保留的原因。</li>
<li><strong>通知：</strong> 每当 LeakCanary 发现内存泄漏时，它都会在应用的调试版本中通知你。你可以快速访问报告并开始解决问题。</li>
</ol>


<p>LeakCanary 自动检测以下对象的泄漏：</p>

<ul>
<li>销毁的 Activity 实例</li>
<li>销毁的 Fragment 实例</li>
<li>销毁的 fragment View 实例</li>
<li>清除的 ViewModel 实例</li>
<li>销毁的 Service 实例</li>
</ul>


<h3>如何将 LeakCanary 集成到 Android 项目中？</h3>

<p>要将 LeakCanary 集成到 Android 项目中，请按照以下步骤操作：</p>

<ul>
<li><strong>添加 LeakCanary 依赖项：</strong> 在 build.gradle 文件（应用程序级别）中，添加以下内容：</li>
</ul>


<pre><code class="Groovy">dependencies {
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.9.1'
}
</code></pre>

<ul>
<li><strong>初始化 LeakCanary：</strong> LeakCanary 在调试构建类型中自动初始化。但是，你可以在 Application 类中手动初始化它：</li>
</ul>


<pre><code class="Java">public class MyApplication extends Application {
    @Override
    public void onCreate() {
        super.onCreate();
        if (LeakCanary.isInAnalyzerProcess(this)) {
            return; // LeakCanary is in heap analysis process
        }
        LeakCanary.install(this); // Initialize LeakCanary
    }
}
</code></pre>

<ul>
<li><strong>在调试模式下运行应用程序</strong>，LeakCanary 将在开发阶段检测内存泄漏。</li>
</ul>


<h3>如何在生产版本中使用 LeakCanary？</h3>

<p>虽然 LeakCanary 专为调试和开发而设计，但在生产环境中使用它时应谨慎。它可能会影响应用性能，并可能不必要地暴露与内存相关的数据。但是，如果你出于某种原因需要在生产环境中启用它，则可以有条件地仅在某些构建版本中添加 LeakCanary：</p>

<pre><code class="Groovy">dependencies {
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:2.9.1' // No-op for release
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.9.1'
}
</code></pre>

<p>这样，LeakCanary 仅在调试版本中处于活动状态，而无操作版本则用于生产。</p>

<h3>你将采取什么步骤来修复 LeakCanary 报告的内存泄漏？</h3>

<p>当 LeakCanary 报告内存泄漏时，请按照以下步骤解决：</p>

<ol>
<li><p><strong>分析泄漏报告：</strong> LeakCanary 提供一份详细的报告，其中包含一个对象引用链，显示泄漏发生的位置。</p></li>
<li><p><strong>识别泄漏对象：</strong> 查找意外保存在内存中的对象（如 Activity、Fragment 或 Context）。</p></li>
<li><p><strong>修复泄漏：</strong></p>

<ul>
<li>避免将 Activity 或 Context 引用存储在静态变量或长寿命对象中。</li>
<li>确保关闭 Cursor、Stream 等资源。</li>
<li>在不再需要时删除侦听器和回调。</li>
</ul>
</li>
<li><strong>测试修复：</strong> 进行更改后，重新运行你的应用以确认内存泄漏已解决。</li>
</ol>


<h3>LeakCanary 有哪些局限性？</h3>

<p>虽然 LeakCanary 是一款出色的工具，但它也有一些局限性：</p>

<ul>
<li><strong>并非所有泄漏都能被检测到：</strong> LeakCanary 专注于 Java 堆内存泄漏，但它可能无法检测本机内存泄漏或低级问题。</li>
<li><strong>对性能的影响：</strong> 由于堆分析过程，在开发过程中运行 LeakCanary 可能会稍微减慢你的应用速度。</li>
<li><strong>不能取代良好的内存管理：</strong> 虽然 LeakCanary 有助于检测泄漏，但开发人员仍应遵循内存管理的最佳实践，以防止泄漏发生。</li>
</ul>


<h2>结论</h2>

<p>内存管理对于确保 Android 应用高效运行至关重要。LeakCanary 是一款功能强大的工具，可帮助你在内存泄漏影响应用性能之前检测并解决内存泄漏问题。通过遵循最佳实践并将 LeakCanary 集成到你的开发过程中，你可以确保你的应用保持优化状态并且不会出现与内存相关的问题。</p>

<p>检查你是否已在 Android 应用程序中完成以下所有操作：</p>

<ol>
<li><a href="https://developers.google.com/maps/documentation/places/android-sdk/memory-best-practices#rel-unused">释放未使用的资源。</a></li>
<li><a href="https://developers.google.com/maps/documentation/places/android-sdk/memory-best-practices#unreg">不再需要时取消注册监听器。</a></li>
<li><a href="https://developers.google.com/maps/documentation/places/android-sdk/memory-best-practices#cancel-tasks">不需要时取消任务。</a></li>
<li><a href="https://developers.google.com/maps/documentation/places/android-sdk/memory-best-practices#fwd-lifecyc">发生命周期方法以释放资源。</a></li>
<li><a href="https://developers.google.com/maps/documentation/places/android-sdk/memory-best-practices#latest-versions">使用最新版本的 SDK。</a></li>
</ol>


<h2>参考</h2>

<ul>
<li><a href="https://developers.google.com/maps/documentation/places/android-sdk/memory-best-practices">https://developers.google.com/maps/documentation/places/android-sdk/memory-best-practices</a></li>
<li><a href="https://square.github.io/leakcanary/">https://square.github.io/leakcanary/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[选择Retrofit还是Ktor：给Android开发者的指南]]></title>
    <link href="https://alexhilton.github.io/blog/2025/02/26/retrofit-vs-ktor/"/>
    <updated>2025-02-26T22:50:55+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/02/26/retrofit-vs-ktor</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自<a href="https://proandroiddev.com/when-to-use-retrofit-and-when-to-use-ktor-a-guide-for-android-developers-918491dcf69a">When to Use Retrofit and When to Use Ktor: A Guide for Android Developers</a></p></blockquote>

<p>作为 Android 开发人员，为你的项目选择正确的 HTTP 客户端是一项关键的决定。当今最受欢迎的两个选项莫过于 Retrofit 和 Ktor。虽然Retrofit 多年来一直是事实上的标准，但 Ktor 因其现代架构和灵活性而势头强劲。</p>

<p><a href=""><img src="https://robotqa.com/blog/wp-content/uploads/2024/06/202406120818248.png" title="auto auto" ></a></p>

<!-- more -->


<p>在本文中，我们将探讨你应该选择 Retrofit 或 Ktor 的场景，以及它们的优势如何满足你的应用要求。</p>

<h2>了解基础知识</h2>

<p>先来了解一下基础知识：</p>

<h3>Retrofit</h3>

<p>Retrofit 是 Square 开发的适用于 Android 和 Java 的类型安全 HTTP 客户端。它将 API 调用抽象为声明式接口，并使用 Gson 或 Moshi 等库无缝地将 JSON 解析为 Java/Kotlin 对象。</p>

<h3>Ktor</h3>

<p>Ktor 由 JetBrains 开发，是一款基于 Kotlin 的异步框架，用于构建联网应用程序。它不仅仅是一个 HTTP 客户端，而是一个多用途框架，让你能够使用同一个库构建后端服务并发出网络请求。</p>

<h2>何时使用 Retrofit？</h2>

<h3>1. 你需要简单和可读性</h3>

<p>如果你更喜欢使用预定义接口以直观的方式进行 API 调用，Retrofit 是一个绝佳的选择。</p>

<p>例子：</p>

<pre><code class="Kotlin">interface ApiService {
    @GET("posts")
    suspend fun getPosts(): List&lt;Post&gt;
}
</code></pre>

<p>使用 Retrofit，你可以预先定义 API 结构并专注于业务逻辑。</p>

<h3>2. 你的团队已经熟悉 Retrofit</h3>

<p>如果你的团队已有使用 Retrofit 的经验，那么坚持使用它可以降低学习曲线并加速开发。</p>

<h3>3. 你需要开箱即用的功能</h3>

<p>Retrofit 提供强大的功能，例如：</p>

<ul>
<li>自动解析 JSON 响应。</li>
<li>内置对 OkHttp 拦截器的支持。</li>
<li>轻松实现重试、缓存和日志记录。</li>
</ul>


<h3>4. 你在多语言环境中工作</h3>

<p>Retrofit 非常适合涉及 Java 和 Kotlin 的项目，因此它对于遗留代码库来说是一个绝佳的选择。</p>

<h3>5.你需要一个庞大的社区和资源</h3>

<p>Retrofit 的成熟意味着丰富的文档、教程和社区支持，这使其成为许多团队更安全的选择。</p>

<h2>何时使用 Ktor？</h2>

<h3>1. 你需要高度可定制性</h3>

<p>Ktor 允许你构建 HTTP 客户端，并对请求构建、日志记录和自定义管道进行细粒度的控制。</p>

<p>例子：</p>

<pre><code class="Kotlin">val client = HttpClient {
    install(JsonFeature) {
        serializer = KotlinxSerializer()
    }
}
</code></pre>

<h3>2. 你想利用 Kotlin Multiplatform</h3>

<p>Ktor 的多平台支持是其突出的功能之一。如果你正在为 Android、iOS 和其他平台构建应用程序，Ktor 可确保你在所有平台上使用相同的网络逻辑。</p>

<h3>3. 你正在构建轻量级或模块化应用程序</h3>

<p>Ktor 的模块化设计使其成为轻量级应用程序或网络堆栈需要精简和集中的项目的理想选择。</p>

<h3>4.你需要异步通信</h3>

<p>Ktor 原生使用协程，这使得处理并发比传统的基于回调的方法更简单、更高效。</p>

<h3>5. 你需要统一的后端和前端代码</h3>

<p>借助 Ktor，你可以使用相同的框架构建服务器端 API 和移动应用程序，从而简化开发并确保一致性。</p>

<h2>你应该选择哪一个？</h2>

<p>用一张表格来总结一下两者各自的特点：</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> 特点 </th>
<th style="text-align:center;"> Retrofit </th>
<th style="text-align:center;"> Ktor </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> 易于使用 </td>
<td style="text-align:center;"> 高 </td>
<td style="text-align:center;"> 中等 </td>
</tr>
<tr>
<td style="text-align:center;"> Kotlin-first 设计 </td>
<td style="text-align:center;"> 否 </td>
<td style="text-align:center;"> 是 </td>
</tr>
<tr>
<td style="text-align:center;"> 跨平台支持 </td>
<td style="text-align:center;"> 否 </td>
<td style="text-align:center;"> 是 </td>
</tr>
<tr>
<td style="text-align:center;"> 可定制性 </td>
<td style="text-align:center;"> 中等 </td>
<td style="text-align:center;"> 高 </td>
</tr>
<tr>
<td style="text-align:center;"> 学习曲线 </td>
<td style="text-align:center;"> 低 </td>
<td style="text-align:center;"> 中等 </td>
</tr>
<tr>
<td style="text-align:center;"> 社区支持 </td>
<td style="text-align:center;"> 规模很大 </td>
<td style="text-align:center;"> 快速发展 </td>
</tr>
<tr>
<td style="text-align:center;"> 与协程集成 </td>
<td style="text-align:center;"> 通过添加suspend </td>
<td style="text-align:center;"> 是（集成了原生协程） </td>
</tr>
<tr>
<td style="text-align:center;"> 后端能力 </td>
<td style="text-align:center;"> 否 </td>
<td style="text-align:center;"> 是 </td>
</tr>
</tbody>
</table>


<h3>如果符合以下情况则选择 Retrofit：</h3>

<ul>
<li>你正在开发一个 Kotlin 或 Java 项目，其中简单性和快速开发是首要任务。</li>
<li>你的项目依赖于久经考验的工具和广泛的社区支持。</li>
<li>你需要对 REST API 进行最低限度的配置。</li>
</ul>


<h3>以下情况请选择 Ktor：</h3>

<ul>
<li>你正在构建一个 Kotlin Multiplatform 项目。</li>
<li>你需要一个现代、灵活的网络堆栈。</li>
<li>你需要同时支持前端和后端开发。</li>
</ul>


<h2>结论</h2>

<p>在 Retrofit 和 Ktor 之间进行选择取决于你的项目需求和你的团队对这些工具的熟悉程度。Retrofit 是传统 Android 项目的可靠选择，而 Ktor 则在现代 Kotlin 优先和多平台应用程序中表现出色。了解这些差异将有助于你为下一个 Android 应用做出正确的选择。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一文带你理解OkHttp中的Gzip压缩]]></title>
    <link href="https://alexhilton.github.io/blog/2025/02/25/understanding-okhttp-gzip-compression/"/>
    <updated>2025-02-25T22:28:09+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/02/25/understanding-okhttp-gzip-compression</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自<a href="ttps://medium.com/tech-insider/okhttps-gzip-compression-904919638458">OkHttp’s Gzip Compression</a>，原文发布于2020年5月1日。本文假定读者对HTTP有基本的了解，以及使用过OkHttp，否则理解起来可能会一点困难。</p></blockquote>

<p><strong>译注：</strong> OkHttp确实会自动添加gzip并处理响应。但如果显示的给请求添加除了gzip之外的字段，如&#8221;Accept-Encoding: gzip, deflate, br&#8221;，那么就需要手动处理响应。其实一般时候我们并不需要手动设置，除非是模拟浏览器时（比如用了浏览器的UA），或者某些服务器强制deflate字段。更多的信息可以<a href="https://stackoverflow.com/questions/51901333/okhttp-3-how-to-decompress-gzip-deflate-response-manually-using-java-android">看这里</a>。</p>

<p><a href=""><img src="https://img-blog.csdnimg.cn/879e064594104e0ab5671f6710ffea24.png" title="auto auto" ></a></p>

<!-- more -->


<p>压缩是一种简单有效的节省带宽和加快移动用户交互速度的方法。当用户点击你的页面屏幕时，会调用你的服务器来提供请求的响应。响应越大，屏幕上显示数据的时间就越长。通过压缩，即使你的访问者的互联网连接速度非常慢并且你的 API 响应过于繁重，他们也能享受快速加载。</p>

<h2>这是如何工作的呢？</h2>

<p><strong>Gzip 会找到相似的字符串，并用一些占位符临时替换这些字符串，以缩小整体大小。</strong>如果你使用大量重复文本，并且有大量空格， 这也没有问题。你可以使用 Gzip 压缩你的响应主体以及请求主体。由于文件小得多，此操作可大大减少传输时间。</p>

<p><strong>注意：</strong>如果你尝试使用postman，它会默认在header的隐藏部分中添加 Accept-Encoding: gzip字段。</p>

<blockquote><p>重要提示：OkHttp 也会自动在请求中添加字段 Accept-Encoding 并自动识别响应中的 Content-Encoding，因此会自行解压缩响应数据，因此无需单独设置，但假设当我们必须将压缩的请求数据发送到服务器时，我们就必须编写自己的拦截器。</p></blockquote>

<p>这种压缩的棘手之处在于请求者和服务器都知道可以发送压缩文件。你必须告诉服务器您接受这种编码，然后它才会提供。该协议分为两部分：</p>

<ul>
<li>请求者发送一个header，告知服务器它接受压缩内容：Accept-Encoding：gzip</li>
<li>服务器使用此header确认你的请求：Content-Encoding：gzip</li>
</ul>


<p>说得够多的了，我想你还有耐心，所以让我们看一些代码。</p>

<h2>编写自己的拦截器</h2>

<p>先决条件：了解 OkHttp 中的<a href="https://square.github.io/okhttp/features/interceptors/">拦截器（Interceptors）</a>。</p>

<ol>
<li>解开 Gzip 响应：在请求header中添加 Accept-Encoding: gzip，并在获取响应时在其响应header中查找 Content-Encoding: gzip。如果存在则解压缩，否则直接返回响应。</li>
</ol>


<pre><code class="Java">import java.io.IOException;

import okhttp3.Headers;
import okhttp3.Interceptor;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.ResponseBody;
import okio.GzipSource;
import okio.Okio;

public class GzipInterceptor implements Interceptor {
    @Override
    public Response intercept(Chain chain) throws IOException {
        Request.Builder newRequest = chain.request().newBuilder();
        newRequest.addHeader("Accept-Encoding", "gzip");
        Response response = chain.proceed(newRequest.build());

        if (isGzipped(response)) {
            return unzip(response);
        } else {
            return response;
        }
    }

    private Response unzip(final Response response) throws IOException {

        if (response.body() == null) {
            return response;
        }

        GzipSource gzipSource = new GzipSource(response.body().source());
        String bodyString = Okio.buffer(gzipSource).readUtf8();

        ResponseBody responseBody = ResponseBody.create(response.body().contentType(), bodyString);

        Headers strippedHeaders = response.headers().newBuilder()
                .removeAll("Content-Encoding")
                .removeAll("Content-Length")
                .build();
        return response.newBuilder()
                .headers(strippedHeaders)
                .body(responseBody)
                .message(response.message())
                .build();

    }

    private Boolean isGzipped(Response response) {
        return response.header("Content-Encoding") != null &amp;&amp; response.header("Content-Encoding").equals("gzip");
    }
}
</code></pre>

<ol>
<li>创建 Gzip 请求：如果你的请求过大，那么我们可以使用它来压缩我们的请求。为了通知服务器，我们将在请求header中添加 Content-Encoding: gzip。</li>
</ol>


<pre><code class="Java">import java.io.IOException;

import okhttp3.Interceptor;
import okhttp3.MediaType;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okio.BufferedSink;
import okio.GzipSink;
import okio.Okio;

public class GzipInterceptor implements Interceptor {
    @Override public Response intercept(Interceptor.Chain chain) throws IOException {
        Request originalRequest = chain.request();

        if (originalRequest.body() == null || originalRequest.header("Content-Encoding") != null) {
            return chain.proceed(originalRequest);
        }

        Request compressedRequest = originalRequest.newBuilder()
                .header("Content-Encoding", "gzip")
                .method(originalRequest.method(), gzip(originalRequest.body()))
                .build();
        return chain.proceed(compressedRequest);
    }

    private RequestBody gzip(final RequestBody body) {
        return new RequestBody() {
            @Override public MediaType contentType() {
                return body.contentType();
            }

            @Override public long contentLength() {
                return -1; // 事先不知道请求内容的长度
            }

            @Override public void writeTo(BufferedSink sink) throws IOException {
                BufferedSink gzipSink = Okio.buffer(new GzipSink(sink));
                body.writeTo(gzipSink);
                gzipSink.close();
            }
        };
    }
}
</code></pre>

<p>好了，就到这里吧，如果你愿意的话，可以赞一下。</p>

<p>参考资料：</p>

<ol>
<li><a href="https://square.github.io/okhttp/">https://square.github.io/okhttp/</a></li>
<li><a href="https://www.apphp.com/tutorials/index.php?page=gzip-and-deflate-compression-in-web-development">https://www.apphp.com/tutorials/index.php?page=gzip-and-deflate-
compression-in-web-development</a></li>
<li><a href="https://www.youtube.com/watch?v=Mjab_aZsdxw">https://en.wikipedia.org/wiki/Gzip</a></li>
<li><a href="https://www.youtube.com/watch?v=Mjab_aZsdxw">https://www.youtube.com/watch?v=Mjab_aZsdxw</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[详解DiffUtils、Myers算法和 Jetpack Compose]]></title>
    <link href="https://alexhilton.github.io/blog/2025/02/24/diffutils-and-jetpack-compose/"/>
    <updated>2025-02-24T22:33:47+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/02/24/diffutils-and-jetpack-compose</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自<a href="https://proandroiddev.com/diffutils-myers-algorithm-and-jetpack-compose-028c726e574d">《DiffUtils, Myers’ Algorithm and Jetpack Compose》</a>，原文发布于2024年12月27日。</p></blockquote>

<p>在 Android UI 开发领域，DiffUtils 是优化 RecyclerView 中列表更新的必备工具。DiffUtils 是一个实用程序类，它计算将一个列表转换为另一个列表所需的<strong>最小更改</strong>，并仅更新 UI 中已更改的部分，从而<strong>节省性能并减少不必要的重绘</strong>。这个强大的工具依赖于<strong>Myers算法</strong>，这是一种在两个序列之间找到<strong>最短编辑脚本（Shortest edit script）</strong>的有效方法。</p>

<p><a href=""><img src="https://www.pngmart.com/files/Android-App-Development-PNG-Free-Download.png" title="auto auto" ></a></p>

<!-- more -->


<p>但在 Jetpack Compose 中，是没有DiffUtils的，这又是为什么呢？</p>

<p>在这篇博客中，我将详细分析 DiffUtils 的工作原理、它与 Myers 算法的联系、为什么它是现代 Android 开发的重要组成部分，并探讨为什么 DiffUtil 在 Compose 中是不必要的、Compose 如何优化 UI 更新，以及你应该使用什么来代替。</p>

<p>让我们开始吧！</p>

<h2>DiffUtils 是什么？</h2>

<p>DiffUtils 是 Android 中的一个实用程序，它可以比较两个列表并生成一系列更新操作，例如：</p>

<ul>
<li>插入：添加新项目。</li>
<li>删除：移除过时的项目。</li>
<li>移动：重新排序现有项目。</li>
</ul>


<p>然后可以应用这些操作来有效地更新列表，最大限度地减少不必要的重绘或重新计算。这在 RecyclerView 等性能至关重要的组件中特别有用。</p>

<h3>DiffUtils 的工作原理</h3>

<blockquote><p>DiffUtil 使用 Eugene W. Myers 的差异算法来计算将一个列表转换为另一个列表所需的最少更新次数。Myers 的算法不处理移动的项目，因此 DiffUtil 对结果进行第二次遍历以检测移动的项目。&ndash; <a href="https://developer.android.com/reference/androidx/recyclerview/widget/DiffUtil">https://developer.android.com/reference/androidx/recyclerview/widget/DiffUtil</a></p></blockquote>

<p>Android 中的 DiffUtils 基于 Myers 算法，用于比较列表并找出它们之间的差异。Myers 算法和 DiffUtils 的目标是相同的：确定将一个序列（列表）转换为另一个序列（列表）所需的最小更改次数，包括插入、删除和移动。从本质上讲，DiffUtils 通过识别以下内容来计算两个列表之间的差异：</p>

<ol>
<li>最长公共子序列 (LCS)：新旧列表之间保持不变的元素。</li>
<li>编辑操作：将旧列表转换为新列表所需的插入、删除和移动。</li>
</ol>


<p><strong>关键见解：</strong>
DiffUtils使用 LCS 的概念来最小化更改（插入和删除），并且还针对移动进行了优化——这是基于列表的比较所特有的功能，其中元素不仅被删除和插入，而且还被重新定位。</p>

<h3>Myers 算法：DiffUtils 的基础</h3>

<p>Myers 算法于 1986 年推出，旨在计算两个序列之间的<strong>最短编辑脚本 (SES，Shortest Edit Script)</strong>。它找到将一个序列转换为另一个序列所需的最少操作数。这些操作包括：</p>

<ul>
<li>插入</li>
<li>删除</li>
<li>匹配（按顺序排列的公共元素）</li>
</ul>


<h4>Myers 算法的关键概念</h4>

<p>Myers 算法旨在找到将一个序列（例如，旧列表）转换为另一个序列（新列表）所需的最少<strong>插入、删除和移动</strong>次数。该算法基于<strong>编辑距离（Edit Distance）</strong>的概念，并专门计算将一个序列转换为另一个序列的一系列操作。</p>

<p>Myers 算法在计算<strong>最短的编辑操作序列</strong>方面特别有效，从而最小化所需的总更改次数。核心思想是找到两个序列之间的<strong>最长公共子序列 (LCS)</strong>，然后确定将旧序列转换为新序列的最小操作。</p>

<p>最长公共子序列 (LCS)：Myers 算法首先确定两个列表之间的 LCS。LCS 表示不需要修改的元素。</p>

<p><strong>编辑图：</strong></p>

<ul>
<li>该算法将转换可视化为一个图，其中每条路径
代表一系列操作（插入、删除或匹配）。</li>
<li>通过该图的最短路径对应于最短编辑脚本
（SES）。</li>
</ul>


<p><strong>优化：</strong></p>

<ul>
<li>Myers 算法使用动态规划来减少计算开销，实现高效的 O(ND) 时间复杂度，其中 N 和 D 是序列的长度和它们之间的距离。</li>
</ul>


<h3>DiffUtils 实际应用示例</h3>

<p>让我们考虑两个列表：</p>

<pre><code class="Kotlin">// Old list
["a", "b", "c", "d"]
// New List
["a", "d", "c", "b"]
</code></pre>

<ol>
<li><strong>确定 LCS</strong>：此处的 LCS 为 [&ldquo;a&rdquo;] 。</li>
<li><strong>计算编辑脚本</strong>：</li>
<li>删除“b”（旧列表）。</li>
<li>将“d”移到“c”之前。</li>
<li>在“c”之后插入“b”。</li>
<li><strong>应用更改</strong>：使用这些最少的操作将旧列表转换为新列表。</li>
</ol>


<h3>DiffUtils 在 RecyclerView 中的作用</h3>

<p>在 RecyclerView 中，每次更新都涉及计算哪些项目发生了变化、哪些项目被添加以及哪些项目被删除。单纯地更新整个列表可能会导致卡顿或无响应等性能问题。DiffUtils 通过以下方式解决此问题：</p>

<ul>
<li>最小化更改：仅执行必要的更新。</li>
<li>优化性能：实现流畅的动画和高效的列表更新。</li>
<li>减少重绘：仅重新渲染受影响的项目，从而提高整体 UI 响应能力。</li>
</ul>


<pre><code class="Java">// 第1步: 创建一个DiffUtil.Callback
public class MyDiffCallback extends DiffUtil.Callback {
    private final List&lt;String&gt; oldList;
    private final List&lt;String&gt; newList;

    public MyDiffCallback(List&lt;String&gt; oldList, List&lt;String&gt; newList) {
        this.oldList = oldList;
        this.newList = newList;
    }

    @Override
    public int getOldListSize() {
        return oldList.size();
    }

    @Override
    public int getNewListSize() {
        return newList.size();
    }

    @Override
    public boolean areItemsTheSame(int oldItemPosition, int newItemPosition) {
        return oldList.get(oldItemPosition).equals(newList.get(newItemPosition));
    }

    @Override
    public boolean areContentsTheSame(int oldItemPosition, int newItemPosition) {
        return oldList.get(oldItemPosition).equals(newList.get(newItemPosition));
    }
}

// 第2步: 计算差异
DiffUtil.DiffResult diffResult = DiffUtil.calculateDiff(
    new MyDiffCallback(oldList, newList)
);

// 第3步: 派发更新
myAdapter.submitList(newList);
diffResult.dispatchUpdatesTo(myAdapter);
</code></pre>

<p>DiffUtils 是一款功能强大的工具，用于处理 Android 中的列表更新，确保高效且最小的更改。通过利用 Myers 算法，它可以计算出将一个列表转换为另一个列表的最短编辑脚本。了解其工作原理不仅可以提高你对 Android 开发的掌握，还可以帮助你优化 RecyclerView 的性能。</p>

<h2>为什么 Compose 不需要 DiffUtils</h2>

<p>Jetpack Compose 建立在<strong>声明性 UI 原则</strong>之上，这意味着你可以根据当前状态<strong>描述 UI 应该是</strong>什么样子，而 Compose 会处理其余的事情。</p>

<p><strong>命令式 UI（视图）：</strong></p>

<ul>
<li>通过确定需要应用哪些更改，你可以手动更新 UI 组件。</li>
<li>DiffUtil 等工具对于计算列表的最小更新以控制性能必不可少。</li>
</ul>


<p><strong>声明式 UI（Compose）：</strong></p>

<ul>
<li>你描述给定状态下的 UI 应该是什么样子，而不是如何更改它。</li>
<li>Compose 会自动重新组合受状态更改影响的 UI 部分。</li>
</ul>


<p>在 Compose 中，<strong>状态驱动 UI，重组处理更新</strong>。DiffUtils 无需计算增量，因为系统会自动优化要重新渲染的内容。</p>

<p>以下是 Compose 不再需要 DiffUtils 的主要原因：</p>

<ol>
<li><strong>状态驱动的UI</strong></li>
</ol>


<p>在 Compose 中，当状态发生变化时，UI 会自动重组。你无需手动计算列表之间的差异；Compose 会为你处理。</p>

<pre><code class="Kotlin">val items = remember { mutableStateListOf("Apple", "Banana", "Cherry") }

LazyColumn {
    items(items) { item -&gt;
        Text(text = item)
    }
}
</code></pre>

<p>如果你从 items 中添加或删除项目，Compose 将仅重组 UI 中受影响的部分。无需 DiffUtils！</p>

<ol>
<li><strong>内置优化</strong></li>
</ol>


<p>Compose 使用 LazyColumn 和 LazyRow 中的键来优化项目渲染。通过为每个项目指定一个唯一键，Compose 可以识别哪些项目已更改、已添加或已移除。</p>

<pre><code class="Kotlin">LazyColumn {
    items(items = yourList, key = { item -&gt; item.id }) { item -&gt;
        Text(text = item.name)
    }
}
</code></pre>

<p>该key确保 Compose 有效地仅更新受影响的项目，类似于 DiffUtils 所做的。</p>

<ol>
<li><strong>智能重组</strong></li>
</ol>


<p>Compose 可以智能地跳过未发生改变的 UI 元素的重组。使用 Remember 和 RememberSaveable 等工具，你可以进一步优化重组行为。</p>

<pre><code class="Kotlin">@Composable
fun RememberExample() {
    val count = remember { mutableStateOf(0) }

    Button(onClick = { count.value++ }) {
        Text("Clicked ${count.value} times")
    }
}
// 在这里，当状态发生变化时，只有Button中的Text，而不是整个组件，会发生重组
</code></pre>

<p><strong>Compose 中的重组：</strong></p>

<ul>
<li>Compose 会观察状态变化。当特定 UI 元素的状态发生变化时，只会重组该元素（及其依赖项）。</li>
<li>系统会完全跳过未更改的 UI 元素。</li>
</ul>


<p><strong>Views 中的 DiffUtils：</strong></p>

<ul>
<li>需要明确计算列表的新旧状态之间的变化。</li>
<li>然后分派计算出的更改以更新 RecyclerView。</li>
</ul>


<h3>在 Compose 中用什么来代替 DiffUtils</h3>

<p>虽然你不需要 DiffUtils ，但 Compose 提供了实现类似优化的工具：</p>

<ol>
<li>带 Keys 的 LazyColumn</li>
</ol>


<p>使用 key 可以有效地识别和管理列表中的更改。</p>

<pre><code class="Kotlin">LazyColumn {
    items(items = yourList, key = { item -&gt; item.id }) { item -&gt;
        Text(text = item.name)
    }
}
</code></pre>

<ol>
<li>SnapshotStateList</li>
</ol>


<p>若要以被动方式管理列表，请使用 SnapshotStateList 。</p>

<pre><code class="Kotlin">val items = remember { mutableStateListOf("Apple", "Banana", "Cherry") }
Button(onClick = { items.add("Date") }) {
    Text("Add Item")
}
LazyColumn {
    items(items) { item -&gt;
        Text(text = item)
    }
}
</code></pre>

<ol>
<li>SubcomposeLayout</li>
</ol>


<p>对于复杂的场景，SubcomposeLayout 可以精确控制要重组的内容。</p>

<h2>相关的面试问题</h2>

<ol>
<li>为什么 Jetpack Compose 不需要 DiffUtils ？</li>
</ol>


<p>Compose 依赖于声明性 UI 模型。它会根据状态变化自动更新 UI，无需像 DiffUtil 那样手动计算列表差异。使用 LazyColumn 中的键可确保高效更新，而无需使用外部工具。</p>

<ol>
<li>Jetpack Compose 处理列表更新的方式与 RecyclerView 有何不同？</li>
</ol>


<p>Compose 不依赖手动差异计算 (DiffUtils)，而是观察状态变化并仅重组受影响的组件。这是通过使用键和 Compose 的重组逻辑在内部管理的。</p>

<ol>
<li><p>在 Android 开发中，声明式 UI 与命令式 UI 相比有哪些优势？</p></li>
<li><p>代码更简单：声明式 UI 通过关注内容而不是方式来减少样板代码。</p></li>
<li>自动状态管理：Compose 根据状态变化自动更新 UI。</li>
<li>可测试性提高：无状态可组合项可以独立测试。</li>
<li>一致性：重组确保 UI 始终反映当前状态。</li>
<li><p>Compose 中的重组是什么？它与 RecyclerView 中的传统视图失效有何不同？</p></li>
<li><p>重组：当 Compose 检测到状态变化时发生。它仅重新生成受变化影响的 UI 部分。</p></li>
<li>视图失效：在 RecyclerView 中，失效会触发视图重绘，如果没有 DiffUtil 之类的工具，这可能会很低效。</li>
<li><p>何时应在 Compose 中使用 Remember 和 RememberSaveable？</p></li>
<li><p>使用 Remember 在单个组合生命周期内存储状态。</p></li>
<li>使用 RememberSaveable 在配置更改（如屏幕旋转）期间保留状态。</li>
<li>Compose 如何决定要重组 UI 的哪些部分？</li>
</ol>


<p>Compose 会跟踪每个可组合项中的状态读取。当状态发生变化时，只有读取已更改状态的可组合项才会被重组。</p>

<ol>
<li>在 Compose 中实现 LazyColumn 以显示项目列表并添加按钮来更新列表。确保它能够高效更新。</li>
</ol>


<pre><code class="Kotlin">@Composable
fun LazyColumnExample() {
    val items = remember { mutableStateListOf("Apple", "Banana", "Cherry") }

    Column {
        Button(onClick = { items.add("Date") }) {
            Text("Add Item")
        }

        LazyColumn {
            items(items, key = { it }) { item -&gt;
                Text(text = item)
            }
        }
    }
}
</code></pre>

<ol>
<li>识别并修复 Compose 组件中不必要的重组。</li>
</ol>


<pre><code class="Kotlin">LazyColumn {
    items(items = list, key = { item -&gt; item.id }) { item -&gt;
        Text(text = item.name)
    }
}
</code></pre>

<ol>
<li><p>诊断 LazyColumn 中的滞后：</p></li>
<li><p>检查关键参数：确保每个项目都有唯一的键。</p></li>
<li>使用分析工具：使用 Android Studio 的Compose 调试器分析重组计数。</li>
<li>优化项目渲染：避免在 LazyColumn 中使用的可组合函数中进行大量计算。</li>
<li>调试列表更新中的不一致行为：</li>
</ol>


<p>确保数据源稳定并符合 UI 预期。使用SnapshotStateList 可以帮助保持反应性。</p>

<ol>
<li>SnapshotStateList 和 ArrayList 之间的区别：</li>
</ol>


<p>SnapshotStateList 是被动的；更改会自动触发 Compose 中的重组。ArrayList 不是被动的，需要手动通知 UI 更新。</p>

<ol>
<li>使用 SubcomposeLayout</li>
</ol>


<p>SubcomposeLayout 是 Jetpack Compose 中一个强大的布局工具，可让你按需组合布局的各个部分。这对于 UI 的某些部分占用大量资源或可能无法立即使用的情况尤其有用，例如从网络或数据库加载图像。SubcomposeLayout 允许按需组合布局的各个部分。</p>

<p>示例：动态加载图像并显示占位符，直到准备好为止。</p>

<pre><code class="Kotlin">@Composable
fun ImageWithPlaceholder(imageUrl: String, placeholder: Painter) {
    Box(modifier = Modifier.fillMaxSize()) {
        SubcomposeLayout { constraints -&gt;
            // First, compose the placeholder
            val placeholderLayout = subcompose(0) {
                Image(painter = placeholder, contentDescription = null, modifier = Modifier.fillMaxSize())
            }

            // Compose the image once it's loaded
            val imageLayout = subcompose(1) {
                AsyncImage(
                    model = imageUrl,
                    contentDescription = null,
                    modifier = Modifier.fillMaxSize(),
                    contentScale = ContentScale.Crop
                )你
            }

            // Return the max size for the layout
            layout(constraints.maxWidth, constraints.maxHeight) {
                placeholderLayout[0].measure(constraints).placeRelative(0, 0)
                imageLayout[0].measure(constraints).placeRelative(0, 0)
            }
        }
    }
}

@Preview
@Composable
fun ImageWithPlaceholderPreview() {
    ImageWithPlaceholder(
        imageUrl = "https://www.example.com/image.jpg",
        placeholder = painterResource(id = R.drawable.placeholder_image)
    )
}
</code></pre>

<ul>
<li>SubcomposeLayout：此布局允许你根据需要组合布局的各个部分。在这里，我们首先组合占位符，然后在图像准备好后组合图像。</li>
<li>subcompose()：此函数用于组合布局的各个部分。subcompose 函数返回 MeasureResult 对象列表，然后你可以测量这些对象并将其放置在屏幕上。</li>
<li>AsyncImage：我们使用 coil-compose 库中的 AsyncImage 异步加载图像。加载时，会显示占位符。</li>
<li>占位符：首先显示占位符。图像准备好后，它会接管。</li>
</ul>


<p>此方法可帮助你通过减少不必要的重新组合和更优雅地处理图像或数据等动态内容来创建更高效​​的 UI。</p>

<ol>
<li><p>将旧版 RecyclerView 迁移到 Compose：</p></li>
<li><p>用 LazyColumn 替换 RecyclerView。</p></li>
<li>将适配器逻辑移至可组合函数。</li>
<li>使用 Remember 或 SnapshotStateList 进行状态管理。</li>
<li>使用 Keys 进行优化。</li>
</ol>


<h2>结论</h2>

<ul>
<li>Compose 不需要 DiffUtils，因为它建立在声明性和状态驱动的架构上。</li>
<li>带有 key 的 LazyColumn 和 SnapshotStateList 提供类似的优化。</li>
<li>智能重组可确保高效的 UI 更新，从而减少手动优化的需要。</li>
</ul>


<p>通过拥抱 Compose 的声明性特性，你可以专注于构建美观、响应迅速的 UI，而无需担心列表更新的复杂性。</p>

<p>Happy Composing！</p>

<h2>参考文献</h2>

<ol>
<li>Myers, E. (1986)。O(ND) 差分算法及其变体。ACM编程语言和系统事务，1(2)，251–266。</li>
<li><a href="https://developer.android.com/reference/androidx/recyclerview/widget/DiffUtil">Android 开发者文档 — DiffUtils</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
