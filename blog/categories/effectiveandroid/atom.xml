<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Effectiveandroid | 稀有猿诉]]></title>
  <link href="http://toughcoder.net/blog/categories/effectiveandroid/atom.xml" rel="self"/>
  <link href="http://toughcoder.net/"/>
  <updated>2016-11-21T20:53:09+08:00</updated>
  <id>http://toughcoder.net/</id>
  <author>
    <name><![CDATA[Alex Hilton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[理解Android Gradle构建系统]]></title>
    <link href="http://toughcoder.net/blog/2016/11/15/understanding-android-gradle/"/>
    <updated>2016-11-15T22:27:59+08:00</updated>
    <id>http://toughcoder.net/blog/2016/11/15/understanding-android-gradle</id>
    <content type="html"><![CDATA[<p>Gradle是一个新型的强大的构建系统。Android很早就开始支持Gradle了，到现在已经完全切换到Gradle构建。它的优势也是比较明显的，更强大的配置，方便的依赖管理，简洁的语法（Groovy DSL），跟啰嗦的XML相对，这是很大的进步。</p>

<p><a href=""><img src="https://img.alicdn.com/imgextra/i1/715978679/TB2s0nGcygSXeFjy0FcXXahAXXa_!!715978679.jpg"></a></p>

<!-- more -->


<h3>基本概念</h3>

<p>为了方便讨论和理解，需要对一些概念进行定义：</p>

<ul>
<li>项目：可以理解为一个安卓应用。或者说一个可构建的所有配置，代码和资源的集合。</li>
<li>模块：最小的可构建单元
项目可以只有一个模块，或者说一个模块也可以作为一个项目。项目通常都由一个或者几个，甚至多个模块组成。每一个模块都要有相应的build.gradle来描述它是如何构建的。项目根目录下面也会有一个build.gradle，用于对应用于整个项目的配置，比如依赖库的repositories，Android Gradle Plugin的版本指定。</li>
</ul>


<h3>项目结构</h3>

<p>典型的项目结构是酱紫的：</p>

<pre><code>|-project
| |-app
| | |-build.gradle
| |-library1
| | |-build.gradle
| |-build.gradle
| |-settings.gradle
| |-gradle/wrapper/gradle-wrapper.properties
| |-local.properties
| |-gradle.properties
</code></pre>

<ul>
<li>gradle.properties 是用来配置gradle本身的运行的参数，比如是否并行，Gradle的JVM参数，因为Gradle也是基于JVM的。</li>
<li>local.properties是用于配置本机操作环境的安卓参数，这里就二个，一个是sdk.dir就是配置安卓SDK的本机路径；另一个就是ndk.dir是配置NDK的本机路径，当然，如果不需要在构建时编译JNI代码，是不用配置ndk.dir的</li>
<li>gradle/wrapper/gradle-wrapper.properties是用于配置Gradle本身的版本信息，比如使用哪个版本的Gradle</li>
<li>build.gradle是整个构建系统的核心文件，类似make的Makefile以及maven的pom.xml，里面描述如何构建一个目标（应用，或者库）。这个文件 是我们修改最多的</li>
<li>settings.gradle是项目结构的配置文件，它指定了项目中包含了哪些模块，比如上面这个例子，settings.gradle应该这样写：</li>
</ul>


<pre><code class="`"> include ':app', ':library1'
</code></pre>

<p> 当然，这是典型的项目结构，但是没有完全这样，因为Gradle的配置是相当灵活且强大的，也就是说真实的文件夹结构，跟Gradle中的项目结构是没有关系的，只不过默认的情况下（也即没有特别的指定和定制）模块的名字就是子目录的名字，项目的结构就按文件夹结构来确定的。</p>

<p> 但是可以不用这样，下面详细说</p>

<h3>配置非文件夹结构的项目</h3>

<p>意思就是每一个模块，不一定非在项目所在文件夹里，换句话说，你可以在项目中引用随便在哪里的模块，举个例子：</p>

<p>你的项目project是在，Documents/project/，想引用一个库是在Downloads/library/，不必非把library拷贝到project下面，只需要在project/settings.gradle中配置一下就可以了：</p>

<pre><code class="groovy">include ':app', ':library'

project(':library').projectDir = new File(settingsDir, '../../../Downloads/library')
</code></pre>

<p>这样就可能在项目project中引入了模块library。</p>

<h3>分清楚二个版本</h3>

<ul>
<li>gradle的版本，在./gradle/wrapper/gradle-wrapper.properties中通过distributionUrl来指定</li>
</ul>


<p> Gradle是一个构建系统，像make和cmake，ant和maven一样。安卓的项目里推荐使用gradle wrapper，实际上就是在项目中指定gradle的版本，这样有一个好处就是，这个项目换了操作系统环境，也不受影响。我们都知道软件的不同的版本对软件的使用是有影响的。所以如果像make或者cmake一样，使用操作系统环境中的gradle，那么同一个项目会因为不同的环境而带来一些诡异的配置相关的问题。</p>

<p> Gradle跟Android或者Google没有关系，它是由Gradle Inc.在开发和维护的。所以Gradle的升级要到<a href="http://www.gradle.org/">gradle.org</a>。</p>

<ul>
<li>Android Gradle Plugin的版本，通过buildScript DSL中的dependencies DSL来指定</li>
</ul>


<pre><code class="groovy">buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:2.2.2'
  }
}
</code></pre>

<p> Gradle是一个构建系统，有它自身的规则，可以用来构建任何语言的任何项目。但每一个语言和平台都有自己的特性，如果直接使用Gradle也不是不可以，但是要做很多重复性的工作。Gradle是有插件机制的，也就是每个语言或者平台实现一些Gradle插件，以让开发者更加方便来构建，而不从头一条指令一条的写。Android Gradle Plugin就是专门用来构建安卓应用开发相关的插件。这个是由Google开发并维护，与SDK一起发布的。</p>

<h3>常见命令</h3>

<p>除了在Android Studio中直接操作以外，gradle是支持命令行的。而且命令行有时候会更方便。执行的方式是./gradlew <task-name>。gradlew实际上就是一个Shell脚本，它的作用是运行gradle/wrapper/中的Gradle二进制文件。task（任务）是Gradle构建中的可执行单元，与makefile中的target有些类似，可以理解为一个应用的构建，就是执行一些定义好的task。常见的task有：</p>

<ul>
<li>assemble - 构建项目的所有目标输出</li>
<li>assembleDebug - 只构建调试环境下的输出</li>
<li>assembRelease - 构建发布环境下的输出</li>
<li>uninstallDebug/uninstallRelease - 从设备上卸载调试的应用，或者卸载发布环境的应用</li>
<li>clean - 清理编译过程中产生的输出，包括最终输出。通常就是把build目录删除</li>
</ul>


<p>可以用gradle tasks来查看支持的所有任务。</p>

<h3>Dependency managament</h3>

<p>在每个模块的build.gradle中dependencies {} DSL中定义该模块的依赖树。</p>

<pre><code class="groovy">dependencies {
  // 本地lib的依赖
  compile fileTree(dir: 'libs', include: ['*.jar'])  

  // 对其他模块的依赖
  compile (project(':library'))

  // 从远程的repo中下载依赖
  compile "com.android.support:support-v4:23.1.0"
  compile 'com.android.support:appcompat-v7:23.0.0'
  compile 'com.squareup.picasso:picasso:2.5.2'
}
</code></pre>

<p>有几种不的指定编译方式：</p>

<ul>
<li>compile - 把所需要的依赖会编译进目标，类似于C++中的静态库的概念</li>
<li>provided - 只在编译时依赖一下，不会打于目标中，运行时环境应该提供相同的库，否则会找不到依赖，类似于动态库的概念</li>
<li>compileProvided</li>
</ul>


<h3>常见的tricks</h3>

<ul>
<li>gradle.org访问缓慢或者根本无法访问</li>
</ul>


<p> ./gradle/wrapper/gradle-wrapper.properties中的distributionUrl=https://services.gradle.org/distributions/gradle-2.14.1-all.zip，这个地址下载十分缓慢，或者根本无法下载，导致gradle sync花费很长时间，甚至卡死无法完成。改成国内的镜像会好很多distributionUrl=http://mirrors.taobao.net/mirror/gradle/gradle-2.14.1-all.zip</p>

<p> 如果没有可用的镜像网站，还有一个解决办法就是，去其他网站下载Gradle的二进制文件，然后解压放到~/.gradle/wrapper/dists/。（如果是windows的话，应该是在C:\Users\<username>.gradle\wrapper\dists）。</p>

<ul>
<li>transitive false</li>
</ul>


<pre><code class="groovy">dependencies {    
  compile ('com.squareup.picasso:picasso:2.5.2') {
    transitive false
  }
}
</code></pre>

<p> 依赖是一个树状结构，比如项目中依赖了rxlifecircle，但rxlifecircle本身也有依赖，解析依赖时，会把所有依赖以及依赖的依赖都下载下来，这就构成了依赖树，当然，也会涉及冲突的处理，比如二个库都依赖了另外一个库，但是不同的版本，这个Gradle本身是有策略的。</p>

<p> 可以用./gradlew -q dependencies &ndash;configuration compile命令来查看依赖树
* 指定依赖的具体类型@aar or @jar</p>

<pre><code class="groovy">dependencies {
  compile "com.android.support:support-v4:23.1.0"
  compile 'com.android.support:appcompat-v7:23.0.0'
  compile 'com.squareup.picasso:picasso:2.5.2@jar'
}
</code></pre>

<p> 默认情况，Gradle认为依赖库都是Java 的jar类型。也就说当其在repo中寻找依赖时会去找jar。所以，如果是aar的依赖库，就需要指定其具体类型，通过在版本号后面加上@aar或者@jar来指定其具体的类型。</p>

<ul>
<li>在Android Studio中没问题，但是运行命令行时，会报错误:</li>
</ul>


<blockquote><p>FAILURE: Build failed with an exception.</p>

<p>* What went wrong:
A problem occurred configuring root project &lsquo;pailitao-sdk&rsquo;.
Could not resolve all dependencies for configuration &lsquo;:classpath&rsquo;.</p>

<p>  > Could not find com.android.tools.build:gradle:2.2.2.</p>

<p>  Searched in the following locations:
     file:/Users/alexhilton/.m2/repository/com/android/tools/build/gradle/2.2.2/gradle-2.2.2.pom
     file:/Users/alexhilton/.m2/repository/com/android/tools/build/gradle/2.2.2/gradle-2.2.2.jar
     <a href="https://repo1.maven.org/maven2/com/android/tools/build/gradle/2.2.2/gradle-2.2.2.pom">https://repo1.maven.org/maven2/com/android/tools/build/gradle/2.2.2/gradle-2.2.2.pom</a>
     <a href="https://repo1.maven.org/maven2/com/android/tools/build/gradle/2.2.2/gradle-2.2.2.jar">https://repo1.maven.org/maven2/com/android/tools/build/gradle/2.2.2/gradle-2.2.2.jar</a>
  Required by:
     :pailitao-sdk:unspecified</p>

<p>* Try:</p>

<p>Run with &ndash;stacktrace option to get the stack trace. Run with &ndash;info or &ndash;debug option to get more log output.</p></blockquote>

<p> 这个问题的根本原因是Android Gradle Plugin没有找到。查看要目录的build.gradle，在repositories里面加上jcenter()，或者把mavenCenteral()改成jcenter()就可以解决了。</p>

<ul>
<li>如何直接构建子项目，比如project下面有app和library二个子项目：</li>
</ul>


<pre><code class="`"> |-project
 | |-app
 | |-library
</code></pre>

<p> 在根目录执行命令./gradlew assembleDebug或者assembleRelease，会构建整个应用。假如只想构建library呢？可以执行这样的命令：<strong>./gradlew :library:assembleRelease</strong>也即，前面是子项目，后面跟命令。</p>

<ul>
<li>Gradle refresh failed:
com.android.build.gradle.internal.model.defaultandroidproject   unsupported major.minor version 51.0</li>
</ul>


<p> 这个错误的原因是Android Studio运行的JVM版本太低了，看一下Android Studio的关于，里面会有JVM的版本信息，如果是1.6就会上面的错误。如果是Mac，到app/info.list里面把JVM的版本改成1.7+</p>

<ul>
<li>Gradle sync failed: &ldquo;java.lang.OutOfMemoryError: GC overhead limit exceeded&rdquo;</li>
</ul>


<p> 明显是Gradle运行时，内存爆了。解决方法就是加大它的内存配额。在相应的build.gradle中加入:</p>

<pre><code class="groovy">dexOptions {
  incremental true
  javaMaxHeapSize 4g
}
</code></pre>

<h3>进阶之Gradle</h3>

<p>对于日常的开发，了解基本的就够用了，但若想做一些额外的事情，比如自定义一些task等就需要深入研究Gradle本身了。这个建议直接看Gradle的<a href="https://docs.gradle.org/current/userguide/userguide.html">文档</a>比较好。</p>

<h3>进阶之Groovy</h3>

<p>Gradle的文件是用Groovy语言来描述的，所以如果想要实现高级功能，也必须熟悉Groovy语言。同样还是要参考相应的文档。</p>

<h3>参考资料</h3>

<ul>
<li><a href="http://tools.android.com/tech-docs/new-build-system/user-guide">Gradle Plugin User Guide</a></li>
<li><a href="http://stackoverflow.com/questions/16976214/gradle-build-only-one-module">Gradle build only one module</a></li>
<li><a href="http://stackoverflow.com/questions/24309950/create-aar-file-in-android-studio">Create aar file in Android Studio</a></li>
<li><a href="https://guides.codepath.com/android/Building-your-own-Android-library">Building your own Android library</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[说说Android的MVP模式]]></title>
    <link href="http://toughcoder.net/blog/2015/11/29/understanding-android-mvp-pattern/"/>
    <updated>2015-11-29T15:53:46+08:00</updated>
    <id>http://toughcoder.net/blog/2015/11/29/understanding-android-mvp-pattern</id>
    <content type="html"><![CDATA[<p>安卓应用开发是一个看似容易，实则很难的一门苦活儿。上手容易，看几天Java，看看四大组件咋用，就能整出个不太难看的页面来。但是想要做好，却是很难。系统框架和系统组件封装了很多东西，开发者弄几个Activity，用LinearLayout把布局组合在一起，添加点事件监听，一个应用就成型了。红海竞争，不管多么复杂的UX和业务逻辑都是一个月快速上线，二周一个迭代，领导和产品早上改需求，晚上改设计，再加上产品经理和设计师都按照iOS来设计，这一系列原因导致很多安卓应用不但体验差，不稳定，性能低，而且内部代码相当之混乱，即使BAT也是如此。</p>

<p><a href=""><img src="https://img.alicdn.com/imgextra/i1/715978679/TB2VTfHmVXXXXajXFXXXXXXXXXX_!!715978679.jpg"></a></p>

<!-- more -->


<p>反观国外市场（谷歌应用市场）上面的大部分应用都还是比较好的，表现在符合安卓设计规范，性能和稳定上表现不俗，体验上更符合安卓系统，而且会发现他们的代码也是很有设计思想的。GitHub上面的很多安卓开源项目也都是源自国外的优秀开发者以及他们的项目。</p>

<p>安卓应用也是软件，代码结构合理，层次清晰不但容易维护而且还容易做自动化测试和单元测试，这是开发者的美好愿望，也是提升效率的必然之路。</p>

<p>安卓由于系统架构特性，UI组件Activity中融合了View的处理，事件处理和逻辑处理，随着业务的越来越复杂，导致Activity也越来越雍肿，几千行的Activity随处可见，Fragment也不能解决问题，千行以上的Fragment也不在少数，这个时候就完全不要谈什么可维护性，可测试性了。能完成需求就算高手了。</p>

<p>MVP便应运而生，就来解决这些问题的。</p>

<h2>什么是<a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter">MVP</a>模式</h2>

<p>MVP是针对有GUI存在的应用程序，比如像安卓，像水果以及PC的客户端软件中用以划分组织代码的一种设计模式，是由MVC模式升级演进出来的，目的在于，对于GUI层来说，把UI展示与逻辑分开。</p>

<ul>
<li>Model &ndash; 为UI层提供的数据，或者保存UI层传下来的数据</li>
<li>View &ndash; 单纯的展示数据，响应用户操作并都转发给Presenter来做具体的处理</li>
<li>Presenter &ndash; 逻辑控制层，从Model处取数据，运算和转化，最后用View来展示；并处理View传过来的用户事件，并做处理</li>
</ul>


<p><img class="<a" src="href="https://img.alicdn.com/imgextra/i4/715978679/TB2ZW_jiXXXXXciXpXXXXXXXXXX_!!715978679.png">https://img.alicdn.com/imgextra/i4/715978679/TB2ZW_jiXXXXXciXpXXXXXXXXXX_!!715978679.png</a>&#8221;></p>

<p>需要注意的是MVP仅用于应用中的GUI部分，它并不是整个应用的架构方式。一个应用的主要的架构应该包括基础组件，业务逻辑层和GUI展示层，而MVP仅是用于展示层的设计模式。另外，它是一个方法论的东西，没有固定的实现方式，只要能体现出它的方法就可以算是MVP。</p>

<p>虽然是方法论，但是也有一些指导性的原则来约束实现：</p>

<ul>
<li>Model与View不能直接通信，只能通过Presenter</li>
<li>Presenter类似于中间人的角色进行协调和调度</li>
<li>Model和View是接口，Presenter持有的是一个Model接口和一个View接口</li>
<li>Model和View都应该是被动的，一切都由Presenter来主导</li>
<li>Model应该把与业务逻辑层的交互封装掉，换句话说Presenter和View不应该知道业务逻辑层</li>
<li>View的逻辑应该尽可能的简单，不应该有状态。当事件发生时，调用Presenter来处理，并且不传参数，Presenter处理时再调用View的方法来获取。</li>
</ul>


<p>从这里可以看的出来，其实，MVP的目的就是把GUI的逻辑都集中在Presenter层，又把View层和Model与其用接口分离，让View尽可能的简单，这样可以加强移植性。因为View层是肯定不能移植的，不同的平台GUI的窗口部件肯定不一样，Model也是不太好移植的，因为每个平台的IO也都是不一样的。但是，MVP中的P肯定是可以移植的，因为它里面只有逻辑，且View和Model都是接口，所以很容易移植。同时，因为View和Model都是接口，这个Presenter也非常好测试，只要实现一个View的接口和Model的接口，就可以单独的测试Presenter了。</p>

<p>严格来讲，View只是被动的显示，提供方法由Presenter来调用，数据等都是由Presenter来提供，内部不能任何的逻辑与状态，逻辑和状态都应该是在Presenter中。UI事件发生时，调用Presenter的方法来处理，不能传参数，也不能有返回值，在Presenter中处理后再调用View来更新数据和状态。</p>

<h2>MVP与<a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">MVC</a>的区别</h2>

<p>MVC之中逻辑是放在了Model里，Controller负责桥接View和Model，View发生变化时通知Controller，Controller再通知Model，Model进行逻辑处理，更新数据，然后通知View来刷新。可以看到MVC中三者之间都有联系，如果处理不好，或者当View比较复杂时，三者之间都会双向关联。MVC在命令行应用，以及WEB中有大量的应用，但对于客户端（PC和移动端）的GUI应用，MVC往往解决不了复杂性，移植性上以及可测试性上也没有优势。</p>

<p><img class="<a" src="href="https://img.alicdn.com/imgextra/i2/715978679/TB2fYnMiXXXXXa3XXXXXXXXXXXX_!!715978679.png">https://img.alicdn.com/imgextra/i2/715978679/TB2fYnMiXXXXXa3XXXXXXXXXXXX_!!715978679.png</a>&#8221;></p>

<p>MVP的改进在于：</p>

<ul>
<li>逻辑放在Presenter中</li>
<li>View和Model抽象成为接口</li>
</ul>


<p>这样就带了二个好处：</p>

<ul>
<li>代码更加容易移植</li>
<li>代码更加容易加入Unit Testing</li>
</ul>


<h2>如何在安卓中实践MVP</h2>

<p>MVP是一个方法论的东西，也就是没有任何固定的具体的实现形式，只要能够把View跟Model解除联系，把逻辑都放在Presenter中，那么就能算得上是MVP，一些具体的实践的指导性原则：</p>

<ul>
<li>View是一个接口，负责被动的把处理好的数据显示出来</li>
<li>Model也是一个接口，负责获取数据和存储数据</li>
<li>View调用Presenter处理用户事件也是一个接口，称为事件Delegate</li>
<li>Presenter持有的是View的接口和Model接口</li>
</ul>


<p> 安卓的Activity是一个比较奇葩的角色，在MVP中，既可以用作V，因为一个应用的根布局总是由Activity来创建的。当然也可以当作P，因为Activity是一个应用的入口，也是出口，再加上一些关键的系统事件也都是通过Activity的方法来通知的（比如configChange, saveInstance）。其实，都可以。因为MVP是方法论，并没有固定的形式，只要是把数据处理的逻辑都封装在Presenter里，让其去控制View和Model，让Activity来承担View还是Presenter，其实都可以。</p>

<h2>MVP不是银弹，仅是展示层的一种范式而已</h2>

<p>最重要的一点就是要明白，MVP不会拯救你的应用，不要以为使用了MVP就能让代码更容易维护，更少的Bug，添加新功能会更容易。MVP仅是GUI层的一种编程范式而已，且因为它是方法论的东西，对实现方式并没有固定的形式，所以会被滥用，如果没有深刻理解MVP的思想，更加会导致灾难性的结果。</p>

<p>软件，移动应用也不例外，如果功能简单，业务简单，那么代码怎么写其实也都无大碍，但当功能越来越多，业务越来越复杂的时候，就必须要采取必要的方法来应对复杂度和软件的可开发性，可维护性。比如，说的夸张一点，一个helloworld式的应用，你怎么写都可以。但当功能复杂到一个Activity几千行代码的时候，你再怎么MVP，MVC或者MVVM都不能解决问题，再怎么把Activity当成P或者当成V都没有用。</p>

<p>要知道MVP仅是解决GUI应用程序中展示层的问题，并且它带来的最大的好处是方便测试和移植，因为逻辑都在P里面，P持有的又仅是View和Model的接口，所以P是可测试的，Mock一个View的实现，和Mock一个Model的实现，就可以完全脱离平台和框架的限制来自由的测试P。同样，移到一个新的框架和平台后，只需要实现View和Model就可以了，P是不需要改变的。</p>

<h2>分层和模块化才是解决应用越来越复杂之道</h2>

<h3>分层</h3>

<p>所谓分层，也就是应用程序的架构方法，把应用程序分成好多层，可以参考Bob大叔的<a href="http://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html">The Clean Architecture</a>。</p>

<p><img class="<a" src="href="https://img.alicdn.com/imgextra/i1/715978679/TB2usPAiXXXXXXsXpXXXXXXXXXX_!!715978679.png">https://img.alicdn.com/imgextra/i1/715978679/TB2usPAiXXXXXXsXpXXXXXXXXXX_!!715978679.png</a>&#8221;></p>

<p>至少应该分层三层，最底层是平台适配层，把用到的平台的组件，控件，工具，比如UI组件，数据库等等，进行封装；中间层就是业务层，就是你应用的核心的业务逻辑，或者说你的应用解决了用户什么样子的问题，这一层是不会随着平台和UI的改变而改变的。比如新闻阅读类，那么从服务器拉取数据，解析数据，缓存数据，为上层提供数据这些事情都属于业务层；最上面就是展示层或者叫做UI层。展示层是可以调用业务层的方法和数据。这样分层，可以让展示层只是负责与用户交互，展示业务数据，展示层会变得简单很多，同时业务层因为不涉及具体的平台和UI的细节，就非常容易移植，当移植到新平台或者要做UI改版也是非常容易做的。</p>

<h3>模块化</h3>

<p>另外一个就是模块化，其实这是软件开发的一个非常基本的方法，也是非常有用的一个方法。模块划分的方法非常简单就是按照功能来划分。让模块处理好自己的事情，暴露统一的接口给外部，定义好输入与输出。输入就以参数和方法形式暴露，输出最好以Delegate方式，这样能把耦合降到最低。再由一个统一的顶层类来管理各个模块，顶层直接调用各模块，各模块通过Delegate方式来回调管理者。</p>

<p>对于业务层，模块化相对比较容易，因为这里并不涉及UI和平台的特性，业务层都应该是独立的，可移植的，全都是自己写的类。</p>

<p>但对于展示层，通常没有那么的容易，因为有平台的限制。比如说安卓，根布局必须由Activity来创建。首先，模块的划分也要以功能为界限。然后，就是Activity的布局，要把布局按功能区域来管理，然后把每个功能模块的top container传给模块，具体内部如何布局，如何填充数据，就由模块自己负责。Activity就起管理各个模块的作用。再有，模块间的通信，可以都通过Activity来，比如模块1有模块2的入口按扭，但是模块1与模块2之间没有交集，这个时候的处理方式就是模块1Delegate给Activity，然后Activity再调用模块2来显示和隐藏。如果模块多到Activity的管理工作也变得庞大复杂时就要拆出子Controller来管理模块，也就是三层，甚至还可以四层。模块的原则就是做好封装，让外层管理变得简单，这样外层管理的复杂度就会降下来，就好比公司人员的组织架构一样。</p>

<p><img class="<a" src="href="https://img.alicdn.com/imgextra/i3/715978679/TB2fZ2siXXXXXadXpXXXXXXXXXX_!!715978679.png">https://img.alicdn.com/imgextra/i3/715978679/TB2fZ2siXXXXXadXpXXXXXXXXXX_!!715978679.png</a>&#8221;></p>

<p><img class="<a" src="href="https://img.alicdn.com/imgextra/i3/715978679/TB2KuvqiXXXXXaPXpXXXXXXXXXX_!!715978679.png">https://img.alicdn.com/imgextra/i3/715978679/TB2KuvqiXXXXXaPXpXXXXXXXXXX_!!715978679.png</a>&#8221;></p>

<pre><code class="xml">&lt;LinearLayout&gt;
  &lt;LinearLayout id="module1" /&gt;
  &lt;RelativeLayout id="module2" /&gt;
  &lt;ListView id="module3" /&gt;
&lt;/LinearLayout&gt;
</code></pre>

<pre><code class="java">public class DemoActivity extends Activity implements Module1Delegate, Module2Delegate {
  @Override
  public void onCreate(Bundle bundle) {
    setContentView(R.layout.demo_activity);
    Module1 module1 = new Module1(findViewById(R.id.module1), this);
    Module2 module2 = new Module2(findViewById(R.id.module2), this);
    Module3 module3 = new Module3(findViewById(R.id.module3));
    module1.render();
    module2.render();
  }

  @Override
  public void onModule1() {
    Log.e("Demo", "module1 say hello to the world.");
  }

  @Override
  public void onModule2(boolean show) {
    if (show) {
      module3.show();
    } else {
      module3.hide();
    }
  }
</code></pre>

<p>其实，还可以做的更彻底一些，那就是Activity中的布局都由ViewStub来组装，然后由各个子模块来决定如何布局。</p>

<p>对于多层全屏层叠的应用来说，要简单一些，对于每一层都可以由Activity或者Fragment来实现，如果业务层已经抽离出来，就都可以直接调用业务层来获取数据，因此也不会有传递数据的麻烦。</p>

<p>做好了分层和模块化，我相信，能解决绝大多数应用遇到的问题。至于模块内部用什么MVP，MVC，MVVM，其实真的无大害，因为模块内部的实现方式不影响其他模块，也不影响外部管理和level更高的类。</p>

<h2>把基本的原则做到就够了</h2>

<p>编程是一项社会活动，所以人和人与人之间的关系才是核心，优秀的人，你发现他也没有用什么MVP，什么MVC，什么高大上的设计模式和算法，但是他的代码是很清晰，很容易看懂。有些即使号称用什么高大上的，最先进的设计模式，但是代码仍是一坨坨的，可能连他自己都看不懂。</p>

<p>把基本的抽象和封装真正做到位了，就够了，代码水平可以的话，再能做到命名见名知义，小而活的方法，小而活的类，一个方法只做一件事，一个类只做一件事情。做到这些，也就够了。</p>

<p>至于什么高大上的MVP，什么XP，什么TDD，什么结对，其实都是浮云，如果你的水平比较高，代码sense较高，那么用不用这些方法差别不大。</p>

<p>MVP的核心目的是方便UT，因为把展示层的逻辑都集中在P，而P又不依赖于具体的View和Model，所以可以随便Mock一个View和一个Model来测试P，甚至P可以独立于平台的限制来单独的测试。所以，如果你不搞UT，以不以MVP方式来实现，其实没啥影响，甚至网上不少人还专门为MVP而弄出几个抽象的类，把Activity啥的封装了一下，号称<a href="http://blog.csdn.net/qibin0506/article/details/49992897">MVP框架</a>，毫无实用价值。软件方法，切忌生搬硬套，一定要先理解透彻方法，再理解透彻你的问题和环境限制，然后灵活运动，什么叫理解透彻呢？就是你能给别人讲明白时。这说起来还是太抽象，只能在实际运用中慢慢领悟。</p>

<p>再有就是<a href="https://en.wikipedia.org/wiki/Unit_testing">Unit Testing</a>这玩意儿，实际的意义也没有那么大，要知道写测试代码通常要比生产代码花更多的精力，前提还是你的代码写的可测，可测性比可读性还要难一点，说白了这对开发者水平的要求相当的高，不是看了一遍书，学习一下JUnit就能搞得好的。还有就是如果你的需求经常变动，移动互联时代这是家常便饭，那么做UT会让开发量double甚至tripple，因为之前写的UT全没有用。</p>

<p>还想说一点就是，软件开发方法这东西必须是由上向下推动，也就是由老板带头来推动，否则技术小组长或者开发者自己是很难推得动的。特别是像UT，Code Review或者结对之类的会“降低开发效率”的方法。这些方法短期内不会提升效率和质量，只会降低需求的产出率，平均开发水平比较高的团队也至少要几个月后才能真正的适应这些方法，然后才有可能提高效率和提高质量。如果不是老板主动推动，谁能受得了呢？KPI咋整？</p>

<h2>结论</h2>

<p>MVP或者MVVM带来最大的好处是：</p>

<ul>
<li>方便移植</li>
<li>方便UT</li>
</ul>


<p>另外，要注意MVP仅是展示层的方法论。应用整体还是要进行分层和模块化。如果分层和模块化进行的彻底，并且在移植和UT没有强烈的需求，其实MVP与不P真的不重要。</p>

<h2>参考资源</h2>

<ul>
<li><a href="http://rocko.xyz/2015/02/06/Android%E4%B8%AD%E7%9A%84MVP/">Android中的MVP</a></li>
<li><a href="http://blog.csdn.net/vector_yi/article/details/24719873">MVP模式在Android开发中的应用</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android技巧：学习使用GridLayout]]></title>
    <link href="http://toughcoder.net/blog/2015/11/25/android-tricks-introduct-to-gridlayout/"/>
    <updated>2015-11-25T19:12:19+08:00</updated>
    <id>http://toughcoder.net/blog/2015/11/25/android-tricks-introduct-to-gridlayout</id>
    <content type="html"><![CDATA[<p><a href="http://developer.android.com/intl/zh-cn/reference/android/widget/GridLayout.html">GridLayout</a>是一个非常强大的网格类布局，它不但能像<a href="http://developer.android.com/intl/zh-cn/reference/android/widget/TableLayout.html">TableLayout</a>那样，实现网格类布局，但它更为强大的地方在于每个Cell的大小可以横向或者纵向拉伸，每个Cell的对齐方式也有很多种，而且不像TableLayout，需要一个<a href="http://developer.android.com/intl/zh-cn/reference/android/widget/TableRow.html">TableRow</a>，GridLayout可以通过指定Cell的坐标位置就能实现Cell的拉伸，从而实现，大小不一致的风格卡片式布局。</p>

<p><a href=""><img src="https://img.alicdn.com/imgextra/i1/715978679/TB21iP.mVXXXXc3XXXXXXXXXXXX_!!715978679.png" width="320" height="240"></a></p>

<!-- more -->


<h2>基本概念</h2>

<p>GridLayout把页面分成m行和n列，使用m+1条线和n+1条线，把页面共分成n*m个Cell。指定位置时行坐标是从0到m，列坐标是从0到n。每一个子View占一个或多个Cell。比如(0, 0)到(0, 1)就是占第一个Cell的区域。(0, 0), (0, 2)就是占第一行的2个Cell的区域(横向拉伸).</p>

<h2>使用方法</h2>

<p>主要介绍一下如何添加Cell，以及设置Cell的位置和拉伸。其他的跟普通的ViewGroup没什么区别的，也没啥好说的。</p>

<h3>GridLayout的基本设置</h3>

<p>首先需要给GridLayout设置行数和列数:</p>

<ul>
<li>android:columnCount 整数，最多的列数</li>
<li>android:rowCount 整数，最多的行数</li>
</ul>


<p>在添加Cell就需要注意，不能超过设置的最大行数和列数，否则在添加Cell时会有异常。</p>

<h3>元素Cell的位置控制</h3>

<p>添加Cell时需要指定其位置</p>

<ul>
<li>android:layout_column 整数n，在哪一列开始显示n=[0, 最大列-1]</li>
<li>android:layout_columnSpan 整数k，指定元素横跨几列，需要注意保证n+k &lt;= 最大列数</li>
<li>android:layout_row 指定从哪一行开始显示，规则同列数</li>
<li>android:layout_rowSpan 纵向跨几行，规则同列</li>
</ul>


<h3>行高和列宽的确定</h3>

<p>每一行的高度是由这一行中Cell的最大高度决定的，以及每一列的宽度是由每一列中最大的宽度决定的，小于行高和列宽的元素可以设置其对齐方式和填充方式。</p>

<h3>填充方式</h3>

<p>通过Cell的android:layout_gravity参数来指定，Cell的填充方式，注意仅当Cell元素本身的尺寸小于它所占格子的大小时才有效，比如元素本身尺寸小于行高和列宽，或者当它占多行，或者占多列时：</p>

<ul>
<li>center &ndash; 不改变元素的大小，仅居中</li>
<li>center_horizontal &ndash; 不改变大小，水平居中</li>
<li>center_vertical &ndash; 不改变大小，垂直居中</li>
<li>top &ndash; 不改变大小，置于顶部</li>
<li>left &ndash; 不改变大小，置于左边</li>
<li>bottom  &ndash; 不改变大小，置于底部</li>
<li>right  &ndash; 不改变大小，置于右边</li>
<li>start  &ndash; 不改变大小，置于开头（这个是与RTL从右向左读的文字有关的，如果使用start/end，那么当LTR文字时start=left,end=right，当RTL时start=right,end=left，也就是说系统会自动处理了)</li>
<li>end  &ndash; 不改变大小，置于结尾</li>
<li>fill &ndash; 拉伸元素控件，填满其应该所占的格子</li>
<li>fill_vertical &ndash; 仅垂直方向上拉伸填充</li>
<li>fill_horizontal &ndash; 仅水平方向上拉伸填充</li>
<li>clip_vertical &ndash; 垂直方向上裁剪元素，仅当元素大小超过格子的空间时</li>
<li>clip_horizontal &ndash; 水平方向上裁剪元素，仅当元素大小超过格子的空间时</li>
</ul>


<p>需要注意的是这些值是可以组合的，比如：</p>

<pre><code class="xml">android:layout_gravity="center_vertical|clip_horizontal"
</code></pre>

<h2>Cell之间的间距如何控制</h2>

<h3>默认间距</h3>

<p>可以使用默认的间距android:useDefaultMargins=&ldquo;true&#8221;或者GridLayout#setUseDefaultMargins()。这个属性默认值是&#8221;false&#8221;。</p>

<h3>另外一种方式就是跟普通布局管理器一样，给每个Cell设置其margins</h3>

<p>通常如果不满意系统的默认间距，就可以设置useDefaultMargins=&ldquo;false&#8221;，然后通过给Cell设置margin来控制间距。</p>

<h2>居中方法</h2>

<ul>
<li><p>仅有一个Cell或者仅有一行，或者仅有一列时</p>

<p>当仅有一个子View时或者仅有一行或者一列的时候，可以把每个Cell设置其android:layout_gravitiy=&ldquo;center&rdquo;(相应代码为<a href="http://developer.android.com/intl/zh-cn/reference/android/view/Gravity.html">LayoutParams#Gravity</a>为<a href="http://developer.android.com/intl/zh-cn/reference/android/view/Gravity.html#CENTER">CENTER</a>)，就可以让其在GridLayout中居中。</p></li>
</ul>


<p>让一行居中：</p>

<p><img class="<a" src="href="https://img.alicdn.com/imgextra/i3/715978679/TB2e.2djVXXXXcNXXXXXXXXXXXX_!!715978679.png">https://img.alicdn.com/imgextra/i3/715978679/TB2e.2djVXXXXcNXXXXXXXXXXXX_!!715978679.png</a>&#8221;></p>

<pre><code class="xml">    &lt;GridLayout
        android:layout_width="wrap_content"
        android:layout_height="200dip"
        android:useDefaultMargins="true"
        android:background="@android:color/white"
        android:rowCount="1"
        android:columnCount="2"&gt;
        &lt;Button android:layout_column="0"
            android:layout_row="0"
            android:text="Left Button"
            android:layout_gravity="fill_horizontal|center_vertical"/&gt;
        &lt;Button android:layout_column="1"
            android:layout_row="0"
            android:text="Right Button"
            android:layout_gravity="fill_horizontal|center_vertical"/&gt;
    &lt;/GridLayout&gt;
</code></pre>

<pre><code>让一个元素居中：
</code></pre>

<p>   <img class="<a" src="href="https://img.alicdn.com/imgextra/i1/715978679/TB25SeTjVXXXXXbXFXXXXXXXXXX_!!715978679.png">https://img.alicdn.com/imgextra/i1/715978679/TB25SeTjVXXXXXbXFXXXXXXXXXX_!!715978679.png</a>&#8221;></p>

<pre><code class="xml">    &lt;GridLayout
        android:layout_width="200dip"
        android:layout_height="200dip"
        android:useDefaultMargins="true"
        android:background="@android:color/white"
        android:rowCount="1"
        android:columnCount="1"&gt;
        &lt;Button android:layout_column="0"
            android:layout_row="0"
            android:text="Left Button"
            android:layout_gravity="center"/&gt;
    &lt;/GridLayout&gt;
</code></pre>

<ul>
<li><p>其他情况</p>

<p> 其他情况，设置子View的Gravity就不再起作用了，这时最好的办法就是让GridLayout的高度是WRAP_CONTENT，然后让GridLayout在其父布局中居中。</p></li>
</ul>


<p><img class="<a" src="href="https://img.alicdn.com/imgextra/i1/715978679/TB2EivsjVXXXXXGXXXXXXXXXXXX_!!715978679.png">https://img.alicdn.com/imgextra/i1/715978679/TB2EivsjVXXXXXGXXXXXXXXXXXX_!!715978679.png</a>&#8221;></p>

<pre><code class="xml">     &lt;LinearLayout
        android:layout_width="match_parent"
        android:orientation="vertical"
        android:gravity="center"
        android:background="@android:color/darker_gray"
        android:layout_height="200dip"&gt;
        &lt;GridLayout
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_gravity="center"
            android:useDefaultMargins="true"
            android:background="@android:color/white"
            android:rowCount="2"
            android:columnCount="2"&gt;
            &lt;Button android:layout_column="0"
                android:layout_row="0"
                android:text="Left Button"
                android:layout_gravity="fill_horizontal|center_vertical"/&gt;
            &lt;Button android:layout_column="1"
                android:layout_row="0"
                android:text="Right Button"
                android:layout_gravity="fill_horizontal|center_vertical"/&gt;
            &lt;Button android:layout_column="1"
                android:layout_row="1"
                android:text="Right Button 2"
                android:layout_gravity="fill_horizontal|center_vertical"/&gt;
        &lt;/GridLayout&gt;
    &lt;/LinearLayout&gt;
</code></pre>

<h2>适用场景</h2>

<p>GridLayout虽然强大，可以当作LinearLayout使用，也可以当作RelativeLayout使用，甚至也能当FrameLayout使用。但是，我们不可以滥用，对于任意布局都一样，不能是它能实现需求就使用它，而是要根据实际的需求，选择最简单，最方便的，同时也要考虑性能。</p>

<p>通常对于类似于网格的布局就可以考虑用GridLayout来实现，或者用LinearLayout横七竖八的套了好几层时也要考虑使用GridLayout。</p>

<h2>GridLayout vs GridView or RecyclerView</h2>

<p>当要实现网格布局，或者非均匀风格布局时，可能首先想到的就是GridView，但是这也要看实际的情况而定。GridView，ListView以及RecyclerView是用于无限长度列表或者网格的场景，它们最大的特点是无限长度，因此这几个组件的重点在于如何复用Cell以提升性能，以及处理手势事件（Fling）等。所以，每当遇到列表或者网格的时候，先想一下这个长度大概会是多少，如果是在百个以内，且不会随时增长，这时就可以考虑使用静态（非动态复用）的组件比如LinearLayout或者GridLayout来实现。</p>

<h2>实例</h2>

<p>说的太多都是废话，来一个实例感觉一下子是最直接的：</p>

<p><img class="<a" src="href="https://img.alicdn.com/imgextra/i4/715978679/TB2Or2jjVXXXXb9XXXXXXXXXXXX_!!715978679.png">https://img.alicdn.com/imgextra/i4/715978679/TB2Or2jjVXXXXb9XXXXXXXXXXXX_!!715978679.png</a>&#8221;></p>

<pre><code class="xml">&lt;GridLayout
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_centerInParent="true"
            android:background="@android:color/white"
            android:alignmentMode="alignMargins"
            android:useDefaultMargins="true"
            android:columnCount="4"
            android:rowCount="5"
            android:visibility="visible"&gt;
            &lt;Button android:layout_column="0"
                android:layout_row="0"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:padding="10dip"
                android:text="1"/&gt;
            &lt;Button android:layout_column="1"
                android:layout_row="0"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:padding="10dip"
                android:text="2"/&gt;
            &lt;Button android:layout_column="2"
                android:layout_row="0"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:padding="10dip"
                android:text="3"/&gt;
            &lt;Button android:layout_column="0"
                android:layout_row="1"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:padding="10dip"
                android:text="4"/&gt;
            &lt;Button android:layout_column="1"
                android:layout_row="1"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:padding="10dip"
                android:text="5"/&gt;
            &lt;Button android:layout_column="2"
                android:layout_row="1"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:padding="10dip"
                android:text="6"/&gt;
            &lt;Button android:layout_column="0"
                android:layout_row="2"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:padding="10dip"
                android:text="7"/&gt;
            &lt;Button android:layout_column="1"
                android:layout_row="2"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:padding="10dip"
                android:text="8"/&gt;
            &lt;Button android:layout_column="2"
                android:layout_row="2"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:padding="10dip"
                android:text="9"/&gt;
            &lt;Button android:layout_column="0"
                android:layout_row="3"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:padding="10dip"
                android:text="0"/&gt;
            &lt;Button android:layout_column="1"
                android:layout_row="3"
                android:layout_gravity="fill_horizontal"
                android:layout_columnSpan="2"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:padding="10dip"
                android:text="Delete"/&gt;
            &lt;Button android:layout_column="0"
                android:layout_row="4"
                android:layout_columnSpan="2"
                android:layout_gravity="fill_horizontal"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:padding="10dip"
                android:text="Clear"/&gt;
            &lt;Button android:layout_column="2"
                android:layout_row="4"
                android:layout_columnSpan="2"
                android:layout_gravity="fill_horizontal"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:padding="10dip"
                android:text="="/&gt;
            &lt;Button android:layout_column="3"
                android:layout_row="0"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_gravity="fill"
                android:padding="10dip"
                android:text="+"/&gt;
            &lt;Button android:layout_column="3"
                android:layout_row="1"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_gravity="fill"
                android:padding="10dip"
                android:text="-"/&gt;
            &lt;Button android:layout_column="3"
                android:layout_row="2"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_gravity="fill"
                android:padding="10dip"
                android:text="*"/&gt;
            &lt;Button android:layout_column="3"
                android:layout_row="3"
                android:layout_columnSpan="1"
                android:layout_gravity="fill"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:padding="10dip"
                android:text="/"/&gt;
        &lt;/GridLayout&gt;
</code></pre>

<h2>参考资料</h2>

<ul>
<li><a href="http://www.cnblogs.com/skywang12345/p/3154150.html">Android 布局之GridLayout</a></li>
<li><a href="http://android-developers.blogspot.com/2011/11/new-layout-widgets-space-and-gridlayout.html">New Layout Widgets: Space and GridLayout</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[安卓开发技术：监听软键盘的显示与隐藏]]></title>
    <link href="http://toughcoder.net/blog/2015/10/09/android-trick-detect-soft-keyboard-show-slash-hide/"/>
    <updated>2015-10-09T22:08:08+08:00</updated>
    <id>http://toughcoder.net/blog/2015/10/09/android-trick-detect-soft-keyboard-show-slash-hide</id>
    <content type="html"><![CDATA[<p>自从2007年乔帮主横空出世推出iPhone后，智能手机就都变成了触摸屏，且屏幕越来越大。输入自然也就通过软件来解决，现在来说绝大多数智能设备都是通过软键盘来做用户输入。在日常的开发过程中难免会跟软键盘打交道，比如强制显示或者强制隐藏等，也有些时候想要在键盘隐藏或者显示的时候做一点事情，这就需要准确的知道键盘的事件，这篇文章就来详细讨论一下Android下面如何做到监听键盘的事件。</p>

<p><a href=""><img src="https://img.alicdn.com/imgextra/i1/715978679/TB2DVP1mVXXXXa5XpXXXXXXXXXX_!!715978679.jpg"></a></p>

<!-- more -->


<h2>硬键盘显示隐藏的事件监听</h2>

<p>对于有硬键盘的设备，是会产生运行时的配置变更(<a href="http://developer.android.com/guide/topics/resources/runtime-changes.html#HandlingTheChange">Runtime Config Changes</a>)，因此可以通过<a href="http://developer.android.com/reference/android/app/Activity.html#onConfigurationChanged(android.content.res.Configuration">Activity#onConfigurationChanged</a>)回调来处理：</p>

<p>首先，要在AndroidManifest中给activity加上<a href="http://developer.android.com/guide/topics/manifest/activity-element.html#config">configChanges=&ldquo;keyboardHidden&rdquo;</a>。</p>

<p>然后，在代码中，处理：</p>

<pre><code class="java">@Override
public void onConfigurationChanged(Configuration newConfig) {
    super.onConfigurationChanged(newConfig);

    // Checks whether a hardware keyboard is available
    if (newConfig.hardKeyboardHidden == Configuration.HARDKEYBOARDHIDDEN_NO) {
        Toast.makeText(this, "keyboard visible", Toast.LENGTH_SHORT).show();
    } else if (newConfig.hardKeyboardHidden == Configuration.HARDKEYBOARDHIDDEN_YES) {
        Toast.makeText(this, "keyboard hidden", Toast.LENGTH_SHORT).show();
    }
}
</code></pre>

<p>需要注意的是，要用<a href="http://developer.android.com/reference/android/content/res/Configuration.html#hardKeyboardHidden">Configuration#hardKeyboardHidden</a>而不是<a href="http://developer.android.com/reference/android/content/res/Configuration.html#keyboardHidden">Configuration#keyboardHidden</a>，因为只有当硬键盘状态变化时才会回调onConfigurationChanged。</p>

<h2>软键盘显示隐藏事件监听</h2>

<p>现在的Android设备很少才会有硬键盘，绝大多数都是软键盘，而SDK和API中却没有软键盘隐藏变化的相关事件，没有直接支持不代表做不到。我们通过其他的方式还是可以做到监听软键盘显示与隐藏状态变化的。</p>

<h3>override onKeyPreIme</h3>

<p>当<a href="http://developer.android.com/reference/android/widget/EditText.html">EditText</a>获得焦点时，或者用户点击时，都会把软键盘弹起来（2.x版本长按MENU也可以强制弹出软键盘）。但是，隐藏软键盘一般都是BACK键，或者键盘自身提供隐藏的按扭，再有就是用代码强制隐藏。对于BACK键还是可以处理的，因为这属于事件(<a href="http://developer.android.com/reference/android/view/KeyEvent.html">KeyEvent</a>)，是能监听到的。</p>

<h4>核心原理</h4>

<p>子例化EditText，并覆写方法<a href="http://developer.android.com/reference/android/widget/TextView.html#onKeyPreIme(int,%20android.view.KeyEvent">onKeyPreIme</a>)。这个方法能在输入法前面拦掉事件，从而可以做一些事情：</p>

<pre><code class="java">public class KeyPreImeEditText extends EditText {
    public KeyPreImeEditText(Context context) {
        super(context);
    }

    public KeyPreImeEditText(Context context, AttributeSet attrs) {
        super(context, attrs);
    }

    public KeyPreImeEditText(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
    }

    @Override
    public boolean onKeyPreIme(int keyCode, KeyEvent event) {
        if (keyCode == KeyEvent.KEYCODE_BACK) {
            Log.e("keyboard", "onKeyPreIme we got back");
        }
        return super.onKeyPreIme(keyCode, event);
    }
}
</code></pre>

<h4>优点</h4>

<p>简单粗暴，都是SDK支持的方法和事件，所以不会有兼容性等蛋疼的问题。</p>

<h4>缺点</h4>

<p>这仅在输入法前拦截到BACK事件，而前面提到BACK仅是能让软键盘隐藏掉的一个方式而已，所以这个方法是不能够完全做到监听软键盘隐藏状态变化的。这个方法仅适用于想拦截BACK，做一些其他事情的场景。</p>

<h3>override根布局的onMeasure</h3>

<p>另外的思路就是观察软键盘引起的布局变化，比如软键盘弹起时Activity的整体布局都会发生变化。</p>

<h4>核心原理</h4>

<p>子例化Activity的根布局（比如<a href="http://developer.android.com/reference/android/widget/LinearLayout.html">LinearLayout</a>或者<a href="http://developer.android.com/reference/android/widget/RelativeLayout.html">RelativeLayout</a>，然后覆写其<a href="http://developer.android.com/reference/android/view/View.html#onMeasure(int,%20int">onMeasure</a>)方法，在其中判断View的当前高度与其本应有的高度，如果当前高度小于本应有的高度，则表明软键盘在：</p>

<pre><code class="java">public class KeyboardAwareLinearLayout extends LinearLayout {
    public KeyboardAwareLinearLayout(Context context) {
        super(context);
    }

    public KeyboardAwareLinearLayout(Context context, AttributeSet attrs) {
        super(context, attrs);
    }

    public KeyboardAwareLinearLayout(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
    }

    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        final int proposedHeight = MeasureSpec.getSize(heightMeasureSpec);
        final int actualHeight = getHeight();

        if (actualHeight &gt; proposedHeight) {
            Log.e("keyboard", "guess keyboard is shown");
        } else {
            Log.e("keyboard", "guess keyboard has been hidden");
        }
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
    }
}
</code></pre>

<h4>优点</h4>

<p>能够真正实现对软键盘隐藏和显示的监听，也不算复杂。</p>

<h4>缺点</h4>

<p>这个基于的原理是键盘对Activity的布局产生影响的情况，而这又受到其他条件控制。activity的属性<a href="http://developer.android.com/guide/topics/manifest/activity-element.html#wsoft">windowSoftInputMode</a>控制着软键盘与布局之间的影响关系，对于adjustPan以及全屏模式的adjustResize这种方法就失效了，因为这二种情况软键盘弹起时，布局是不会发生变化的，二种height值是一样的，自然无法分辨。</p>

<h3>监听GlobalLayout</h3>

<p>与上面的思路差不多，只不是监听GlobalLayout变化，然后根据布局高度与屏幕高度之差来判断。</p>

<p><strong>注意</strong>：要记得把注册的GlobalLayoutListener再反注册掉。</p>

<h4>计算根布局的高度差</h4>

<p>判断的依据是根布局与DectorView之间的差值，在正常情况下应该等于status bar高度与action bar高度之和。当软键盘弹起时则会大于此值。</p>

<h5>核心原理</h5>

<pre><code class="java">private boolean mKeyboardUp;

private void setListenerToRootView() {
        final View rootView = getWindow().getDecorView().findViewById(android.R.id.content);
        rootView.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
            @Override
            public void onGlobalLayout() {
                final int headerHeight = getActionBarHeight() + getStatusBarHeight();
                int heightDiff = rootView.getRootView().getHeight() - rootView.getHeight();
                if (heightDiff &gt; headerHeight) {
                    Log.e("keyboard", "keyboard is up");
                    if (!mKeyboardUp) {
                        mKeyboardUp = true;
                    }
                } else if (mOpen) {
                    Log.e("keyboard", "keyboard is hidden");
                    mKeyboardUp = false;
                }
            }
        });
    }
</code></pre>

<p>这段代码需要好好解释下：</p>

<ul>
<li>android.R.id.content 通过这个id可以获得一个View的根布局，而不必要知道它具体的id。可以参考<a href="http://stackoverflow.com/questions/7776768/android-what-is-android-r-id-content-used-for">这个讨论</a>。</li>
<li>rootView 这个View是Activity的根布局，除去了actionbar的部分，是一个FrameLayout，注意这个并不是setContentView中设置的布局。rootView的第一个子View(rootView.getChildAt(0))就是setContentView()设置的布局。可以参考<a href="http://stackoverflow.com/questions/4486034/get-root-view-from-current-activity">这个讨论</a>。</li>
</ul>


<h5>优点</h5>

<p>不用子例化，不依赖于现有代码中的成员，可以直接插入到任何代码中。</p>

<h5>缺点</h5>

<p>本质上这跟上一个方法是一样的。因此对于adjustPan和全屏的adjustResize二种情况是无效的。针对这二种情况heightDiff不会变化。</p>

<h4>计算根布局的的底部空隙</h4>

<p>其实所有的方法都是为了发现软键盘对布局的影响，从而判断软键盘的显示和隐藏。还有一种方法就判断根布局的可视区域与屏幕底部的差值，如果这个差大于某个值，可以认定键盘弹起了。</p>

<h5>核心原理</h5>

<pre><code class="java">private boolean isKeyboardShown(View rootView) {
        final int softKeyboardHeight = 100;
        Rect r = new Rect();
        rootView.getWindowVisibleDisplayFrame(r);
        DisplayMetrics dm = rootView.getResources().getDisplayMetrics();
        int heightDiff = rootView.getBottom() - r.bottom;
        return heightDiff &gt; softKeyboardHeight * dm.density;
}
</code></pre>

<p>得到的Rect就是根布局的可视区域，而rootView.bottom是其本应的底部坐标值，如果差值大于我们预设的值，就可以认定键盘弹起了。这个预设值是键盘的高度的最小值。这个rootView实际上就是DectorView，通过任意一个View再getRootView就能获得。</p>

<h5>优点</h5>

<p>适用所有情况，包括adjustPan和全屏的adjustResize也能准确判断出来。</p>

<h3>结论</h3>

<p>如果真的需要监听软键盘显示与隐藏的事件就可以通过上面的提到的最后一种方式来实现，简单方便且可靠，唯一要注意的就是要反注册掉所注册的GlobalLayoutListener.</p>

<h2>参考资料</h2>

<ul>
<li><a href="http://stackoverflow.com/questions/4312319/howto-capture-the-virtual-keyboard-show-hide-event-in-android">http://stackoverflow.com/questions/4312319/howto-capture-the-virtual-keyboard-show-hide-event-in-android</a></li>
<li><a href="http://felhr85.net/2014/05/04/catch-soft-keyboard-showhidden-events-in-android/">Catch soft keyboard show/hidden events in Android</a></li>
<li><a href="http://blog.csdn.net/zhaokaiqiang1992/article/details/39761461">android:windowSoftInputMode属性详解</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android应用性能剖析全攻略]]></title>
    <link href="http://toughcoder.net/blog/2015/09/11/android-performance-profiling-made-easy/"/>
    <updated>2015-09-11T10:36:31+08:00</updated>
    <id>http://toughcoder.net/blog/2015/09/11/android-performance-profiling-made-easy</id>
    <content type="html"><![CDATA[<p>性能是软件质量的一个重要方面，好的软件必须要在性能上达到一定的标准。对于Android应用程序来讲，更是如此，移动互联网的红海竞争，如果应用的性能差，肯定会缺少竞争力的，这里就来聊一聊应用开发中如何提升性能，以及在开发过程中如何处理性能问题。</p>

<p><a href=""><img src="https://img.alicdn.com/imgextra/i2/715978679/TB2sqTwjVXXXXalXXXXXXXXXXXX_!!715978679.jpg"></a></p>

<!-- more -->


<h2>性能的定义</h2>

<p>对于Android应用程序来讲分为三个方面，一方面是软件整体表现上的性能，也就是能多快给用户想要的结果，比如新闻阅读类应用，这个性能就是当用户点一条新闻时，多快能把新闻内容展示给用户，这个通常取决于业务逻辑，网络，以及后台服务器的性能。</p>

<p>另外一方面就是UI性能，也就是所谓的流畅度，这个在移动应用上面有着更严重的影响，因为触摸和手势的原因，如果应用程序不流畅，会严重影响体验，相比如PC桌面软件会更严重。这个是我们通常所谓的性能，大多数情况下，以及网络上绝大多数文章都是针对于此。对于安卓应用来说要想达到流畅，或者说做动画时，列表滑动时不卡顿，那么帧率（FPS Frame per Second）要达到60这个也是我们在做性能优化时的一个衡量的标杆。</p>

<p>还有一方面就是更少的资源占用，包括内存，CPU，电池，磁盘，网络流量，服务器资源等等。这个也很重要，特别是内存，CPU和电池，前二个对于所有软件来说都是衡量性能的一个重要指标，电池则是移动应用特有的，特别是智能手机上面。</p>

<p>总之，性能是一个很大很大的话题，也是一个无止境的任务，适可而止，见好就收。虽我们都有着一颗工程师的心，都想把东西做到极致，但试问天下，又有谁真的能把所有的东西都做到最优呢？具体把性能做到什么程度，要看需要强烈与否。比如一个应用在生命初期，可能没有人关注性能。但假如已到百万，千万级别的时候，才考虑性能也是作死的节奏。即使是超级App，性能优化也要适可而止，</p>

<h2>如何提升UI流畅度</h2>

<h3>造成UI不流畅的原因</h3>

<p>要想让UI流畅，首先要了解一下造成不流畅的原因都有哪些：</p>

<ul>
<li>主线程做了费时操作，或者本不该在主线程中做的轻微逻辑，这不但会严重影响帧率，甚至还会触发ANR(Application Not Responding)</li>
<li><p>布局过于复杂或者View层次太多</p>

<p>这个情况也是经常出现。无论是页面确实复杂，或者为了实现某些特殊的视觉效果（比如边框或者3D效果），结果就是一个非常复杂，层次深，View个数多的布局，最终结果就是渲染性能差。特别是对于列表的Cell，影响更加严重，都会造成滑动时的卡顿。</p></li>
<li><p>局部更新造成了整体布局的重绘</p>

<p>这里指的是，一个View层次中的某一个View需要刷新，但是却会触发整体页面的刷新，从而造成浪费。</p></li>
<li><p>整体布局的重绘被触发了多次</p>

<p>这通常出现在需要动画的场景，比如以改变View的布局（大小）的方式来实现动画，或者频繁的改变View的层次，比如频繁的addView和removeView。这都会不断的触发measure/onMeasure，layout/onLayout和View的重绘。</p></li>
<li><p>敏感方法里面做了太多不相干的事情</p>

<p>通常是View的一些关键的方法中onDraw, onMeasure, onLayout，特别是onDraw里面只应该做绘制相关的，连创建对象这种级别的事情都最好别做。当然，这个出现的情况比较少，毕竟需要直接自定义一个原始View的情况并不多见。</p></li>
<li><p>频繁的GC发生</p>

<p>无论是在主线程，还是worker线程，如果频繁的大量的创建对象，就会触发频繁的GC，GC会对所有的线程产生影响，对UI线程也是有影响。</p></li>
</ul>


<p>90%的情况前四种情况是主因，把前四种情况解决了就无大碍了。而前四个中，前二个又是重灾区，通常情况处理了前二个就能解决不流畅的问题。</p>

<p>知道了原因，就可以对症下药了：</p>

<h3>设计和编码时要考虑性能</h3>

<p>性能是设计和编码时必须要考虑的一个因素，跟程序的正确性，robustness和可维护性同样重要。而不是应用已经上线了很久后才开始考虑性能问题。但是我们活在现实生活中，实际的情况往往都是当应用已经上线了并且稳定了之后才开始做，而且情况往往都是代码都还不是你写的。设计和编码时不考虑性能的原因一般有：</p>

<ul>
<li>开发人员水平不足，意识不到性能问题，或者不知道如何写出高性能的代码</li>
<li>需求太多，或者需求经常变动，没时间考虑别的</li>
</ul>


<p>总之，无论如何，在设计和编码时不考虑性能是很令人烦恼的事情，但亡羊补牢，虽有些无奈但还是有益的。</p>

<h3>简单设计做更少的事情</h3>

<p>这似乎是废话，少做事情，或者不做事情效率自然高，性能肯定能上去。页面布局尽可能简单，功能尽可能简单，能做一遍的事情不要做二遍，没必要的准备工作不做，等等。但是现实情况往往是应用越做越复杂，越做越功能越多，页面越来越复杂，这是多种元素决定的，或许是竞争的需要，或者是产品这么定义的，或者是老板就喜欢这样。</p>

<p>但无论怎么样，对于开发人员来讲，当实现功能时要本着简单的原则，这说来容易，但是当代码出来时却千差万别，明明很简单的逻辑，有人却能代码写的巨复杂，一坨一坨的。虽然可能说你看得懂他的设计图，看得懂他的流程图看得懂他的类图等等，但是你却不一定看得他的懂代码。</p>

<p>这里扯一点题外话，写代码绝对是衡量一个程序员的重要指标，虽然不能做为全部，但是至少应该占50%。所以如果面试时看不到应聘者近一二个月的代码，或者不让其当场写代码的话，面试可以认定是失败的。尽管他可能是BAT出身，尽管他可能做过（维护）过顶级App，但是很可能他写出的代码都跟翔一样，一坨一坨的，完全看不懂写的是啥玩意儿。孤认为，面试时最好花一天或者一个下午时间，让应聘者在<strong>近似真实</strong>的环境中写代码，或者是一个小功能，或者是一个小项目，或是修改一个bug，最好还是坐在他旁边，与其一起工作，就好像平日里你跟同事一起工作一样，这非常有效果，也很能看出一个人的水平，而且你聘他来后也是要这样子工作的。光在那里Bla bla的问答，连他说的是真是假都难以分辨，而且世上事永远都是说起来容易做起来难，我们都见过很多人Blabla就会说，就会吹，不会做事情，或者干起事情跟小孩子一样，也有很多人实干型的，会做事，能把事情做好，但就是说不出，或者非常不愿意在别人面前blabla。然并卵。。。。蛋扯远了</p>

<h3>远离主线程（UI线程）</h3>

<p>这似乎才是正题。</p>

<p>对于应用程序来说主线程是很重要的，因为主线程通常的作用是用于刷新用户界面（UI），与用户进行交互，是与用户接触最近的，因此也通常被称作UI线程。Android和iOS都是如此。想像一下，应用要想达到60FPS，也就是说一帧的绘制要在16ms内完成，你的布局又那么的复杂，一层套一层，每个View都要一遍遍的measure, layout, draw，就知道主线程有多么忙碌了，还能忍心再做其他事情吗？</p>

<p>那么，让应用流畅就变得很简单，在主线程中做最少的事情，但不能更少，它只做二件事情：</p>

<ul>
<li><p>UI(<a href="http://developer.android.com/reference/android/view/View.html">View</a>)相关的事情</p>

<p>这个是平台框架的限制，必须遵守。</p></li>
<li><p>必须在主线程中做的事情</p>

<p>比如启动其他线程，必要的初始化等等。比如像AsyncTask是一定要在主线程中初始化的，否则会有Crash，具体可以看<a href="http://blog.csdn.net/hitlion2008/article/details/8194510">这篇文章</a>的分析。</p></li>
</ul>


<p>其他，所有事情，都应该放到其他线程中去。如果在设计和编码的时候能考虑到这二点，那么你的应用流畅至少不会卡。使用其他线程异步操作时一定要注意生命周期和上下文，也即当执行任务时生命周期是否还是活动的，或者所依赖的上下文是否已经变化了，不在了。</p>

<h3>布局的优化</h3>

<h4>减少View的层次和数目，减化复杂布局</h4>

<p>View的层次越少，数目越少，肯定渲染越快，这个常见的技巧有：</p>

<ul>
<li>删除没有用的View</li>
<li>除去无必要的嵌套，比如当内部仅有一个View时，外面就没有必要再加一个ViewGroup了</li>
<li>多使用<a href="http://developer.android.com/reference/android/widget/RelativeLayout.html">RelativeLayout</a>。它能够随意的排版View，三维上的方位都可以搞定，所以对象像列表的Cell之类的，一个RelativeLayout基本上就可以搞定。</li>
<li><a href="http://toughcoder.net/blog/2015/05/20/android-layout-trick-drawable-of-textview/">用TextView的drawable属性来组合图片+文字</a></li>
<li>用merge来减少层次</li>
<li>对于某些情况才用到的View，就使用<a href="http://blog.csdn.net/hitlion2008/article/details/6737537">ViewStub</a>，然后在需要显示的时候再inflate。也就是所谓的延时和按需渲染</li>
<li>尽量不要用背景图片，特别整个Activity大小的背景，费内存，占资源</li>
<li>尽可能用矢量图形，比如颜色，drawable，shape，icon font等等</li>
</ul>


<p>减少View的层次和数目能显著提高帧率。曾经有一个列表，列表不复杂，左边一个TextView，右边有三个也是TextView，但是在添加的时候在外面又包了一层TextView，布局就变成了：</p>

<pre><code class="xml">&lt;LinearLayout ....&gt;
  &lt;TextView /&gt;
&lt;/LinearLayout&gt;
</code></pre>

<p>虽然可能这不起眼的多加了一个LinearLayout，但是别忘记了，这是在List中，一屏会显示10多行，每一行多3个View，加起来就是30多个View啊！一次多绘制30多个View是什么概念？</p>

<p>对于布局的优化可以多看看lint的输出Warning，它对于无用的View，没必要的嵌套，以及优化建议都能准确的给出提示。</p>

<h4>当局部更新时不要触发整体重绘</h4>

<p>比如一个坨复杂布局中，仅需要更新一个图标时，就直接更新它所属的ImageView就好；再如，有CheckBox选中状态的列表，点击时，就只更新具体的列表的具体的CheckBox就可以了，而不是改变数据，然后notifyDataSetChanged。</p>

<p>这里需要，首先，不要故意的去触发整体刷新（除非非常的有必要，比如多个View都需要刷新数据时）；另外，就是要小心防止触发整体刷新的坑，因为某些原因，即使小心的更新局部也会造成整体的刷新。</p>

<h4>避免频繁的触发整体的重绘</h4>

<p>千万不要直接改变View的大小的方式来做动画，或者在做动画的同时改变View的布局，更不要添加或者移除View，这都会直接触发整体的重绘。</p>

<h4>避免在onDraw的时候做额外的事情</h4>

<p>如果是自定义的View就要注意这个事情，在onDraw的时候不要去new对象或者做其他不相干的事情，即使这些操作在UI线程中作也毫不费时的。</p>

<h4>列表类的优化</h4>

<p>对于列表（List和Grid）优化除了上面提到的，还要注意使用组件传回来的convertView以及ViewHolder。convertView可以复用View对象，避免inflate过多的View。ViewHolder模式主要是减少findViewById的调用。</p>

<h4>把界面设计的尽可能简单</h4>

<p>大道至简，简约是最优秀的用户体验，没有之一，所以产品汪们，不要把页面搞的太复杂，会导致不好用：用户不会用，和渲染性能差。</p>

<h4>写布局时要考虑到渲染性能</h4>

<p>这是非常重要的，再牛B的方法和技巧，如果你不鸟，或者不用都木有卵用，如果你心系性能，必然会有所思，有所为，然后渲染性能就所升。</p>

<h3>及时反馈给用户</h3>

<p>这实际上不是真正的流畅，而是给用户感觉流畅，避免用户认为应用假死。比如当做一些费时操作的时候，是放在了工作线程中，但是主线程也却没事情做，应用流畅不卡顿，但在用户看来却是无意义的，这时可以用一些动画，进度等等及时反馈给用户程序当前的状态。</p>

<p>另外，当做费时操作的时候也要及时终止并反馈，程序可能会有异常情况或者错误情况，都是需要处理的，比如从网络加载数据，可能会有无网络，或者网络异常，或者服务器返回异常，那么要尽早失败。比如是不是可以在任务启动前先判断网络状态，而不是照常发请求，网络返回异常了，那么正常情况时的结果处理就不要做了，等等。</p>

<p>说到这里，不得不讲一下代码的编写原则：先检查异常情况，尽早退出，而不是层层if，举个例子：</p>

<pre><code class="java">Data fetchNewsDetail(String url) {
    if (url is invalid) {
        return empty;
    }
    if (no networks) {
        return empty;
    }
    if (some other bad conditions) {
        return empty;
    }
    send requset;
    if (response code not 200) {
        return;
    }
    if (no response) {
        return;
    }
    if (parse response failed) {
        return;
    }
    return parse data;
}
</code></pre>

<p>而不是这样：</p>

<pre><code class="java">// Ugly code, DO NOT do this
Data fetchNewsDetail(String url) {
    if (url valid) {
        if (has networks) {
            if (response code 200) {
                if ....
            }
        }
    }
}
</code></pre>

<h2>流畅度剖析工具</h2>

<h3>流畅度定性体验</h3>

<p>那么如何测试或者衡量我们应用是否流畅呢？
首先就是自己体验，快速滑动，看看是否能感觉到卡顿，或者页面闪烁。</p>

<p><img class="<a" src="href="https://img.alicdn.com/imgextra/i2/715978679/TB2Mr6sXFXXXXcvXpXXXXXXXXXX_!!715978679.png">https://img.alicdn.com/imgextra/i2/715978679/TB2Mr6sXFXXXXcvXpXXXXXXXXXX_!!715978679.png</a>&#8221; width=&#8221;320&#8221; height=&#8221;480&#8221;></p>

<h3>借助开发者工具来感受</h3>

<p>开发者工具有很多选项可以帮助开发者来测量，比如调试过度绘制，显示GPU更新等。通过这些可以看出不必要的UI刷新。</p>

<p>比如开发者选项里有一个”硬件加速渲染“，里面有一个“调试GPU过度绘制”，这个会在屏幕上以颜色来区分overdraw（过度绘制，也就是进行了不必要的绘制）的严重重度：</p>

<ul>
<li>蓝色 1 倍overdraw</li>
<li>绿色 2 倍overdraw</li>
<li>红色 3 倍overdraw</li>
<li>紫色 4 倍overdraw</li>
</ul>


<p>总之，颜色越深，证明做了过多的不必要的绘制(overdraw).什么又叫过度绘制呢(overdraw)比如一个列表，如果每个Item都有背景色，那么List本身实际上是不需要背景色的，比如子View占满了父View，那么父View不用画背景，等等。对于不可见的元素，就不要运行绘制，这是减少overdraw的方法。</p>

<p><img class="<a" src="href="https://img.alicdn.com/imgextra/i4/715978679/TB2d_bsjVXXXXXHXXXXXXXXXXXX_!!715978679.png">https://img.alicdn.com/imgextra/i4/715978679/TB2d_bsjVXXXXXHXXXXXXXXXXXX_!!715978679.png</a>&#8221; width=&#8221;320&#8221; height=&#8221;480&#8221;></p>

<p>在开发者选项面有一个是“监控”，里面有几个：</p>

<ul>
<li>启用严格模式</li>
<li>显示CPU使用情况</li>
<li>GPU呈现模式分析</li>
<li>启用OpenGL跟踪</li>
</ul>


<p>特别是第3个“GPU使用情况”，它是系统在GPU渲染时加入一些分析，以呈现UI渲染的性能，它有三个选项：</p>

<ul>
<li>关闭</li>
<li>在屏幕上显示为条形</li>
<li>在adb shell dumpsys gfxinfo中</li>
</ul>


<p>其实，它的数据是一样的，只不过一个是在命令行把raw data输出，一个是在手机屏幕以图表方式展示。后面会详细介绍这个。</p>

<h3>adb shell dumpsys gfxinfo <pkg name></h3>

<p>这个能收集GPU渲染时的一些数据，从而反映应用UI渲染的性能信息。</p>

<p>从这个命令的输出能看出二个信息一个帧的数量，另一个就是每一帧绘制的情况。
应用比较卡，表现出来就是丢帧，也就是有些帧太慢了，赶不上火车了，不得不丢掉，从而页面会卡顿。正常来讲，即使是简单的布局，用这个命令抓也至少能抓到20+帧的数据，如果少了，或者很少，只有几帧，就就证明你在主线程中干了太多其他的事情，也就是说主线程被block了。这时就要好好看看源码，主线程中都干了啥，哪里可能会耗时，把非UI操作都放到工作线程中去。</p>

<p><img class="<a" src="href="https://img.alicdn.com/imgextra/i3/715978679/TB2GhnkjVXXXXbuXXXXXXXXXXXX_!!715978679.png">https://img.alicdn.com/imgextra/i3/715978679/TB2GhnkjVXXXXbuXXXXXXXXXXXX_!!715978679.png</a>&#8221; width=&#8221;640&#8221; height=&#8221;480&#8221;></p>

<p>对于每一帧的数据，体现着绘制这一帧所花的时间：</p>

<ul>
<li>Draw是创建列表所需要的时间，表示运行绘图方法用了多长时间，比如View.onDraw()所花的时间；</li>
<li>Prepare在5.0版本加入了这一列数据的显示</li>
<li>Process是Android 2D引擎渲染显示列表(DisplayList)所需要的时间。页面上的View越多，层次越深，就会有越多的绘制命令需要执行，这个值会越大。</li>
<li>Execute是把一帧数据送到屏幕上排版显示的时间，这个值通常会比较小，且在应用层无法直接控制，换句话说，这个时间是无法优化的。</li>
</ul>


<p>为了流畅，每一帧的绘制时间应该少于16ms，因为应用要想流畅要达到60FPS，算下来就是一帧不能超过16ms，但这个并不是死规定，不是说某一帧超过，应用就会卡，就会慢，而是说几十帧的平均值或者90%的帧应该在16ms以内。</p>

<p>这个方法是针对每个ViewRootImpl的统计数据。ViewRootImpl对象就是一个View的根元素，通常情况下一个Activity仅有一个ViewRootImpl对象。需要注意的是Dialog也会有一个ViewRootImpl，所以当有Dialog时，你会看到二个ViewRootImpl的统计数据。</p>

<p>还有需要注意的是，如果使用了SurfaceView（比如GLSurfaceView)，因为它不是使用常规View的渲染方法来渲染的，它有自己的线程和渲染方式，所以这个方法是抓不到SurfaceView的渲染性能的。</p>

<p><img class="<a" src="href="https://img.alicdn.com/imgextra/i3/715978679/TB2hIvjjVXXXXbyXXXXXXXXXXXX_!!715978679.png">https://img.alicdn.com/imgextra/i3/715978679/TB2hIvjjVXXXXbyXXXXXXXXXXXX_!!715978679.png</a>&#8221; width=&#8221;320&#8221; height=&#8221;480&#8221;></p>

<p>在屏幕显示，则会在屏幕上面以柱状图的方式实时显示UI每一帧渲染的性能，可以看到一条绿色的线，这个就是16ms。柱状图中几种颜色所代码的意义分别是</p>

<h3>traceview</h3>

<p>这是一个十分强大的功能，能得到某一时间段内，进程内的时序执行情况，具体到能体现出所有线程的所有方法执行所花的CPU时间和实际时间，并且还能看出包含子调用和不包含的情况。</p>

<h4>启用方法</h4>

<p>在Android Studio中点击Android Device Monitor或者直接运行monitor (位于SDK/tools/），选择某一进程，然后点击，开始录制，再点击结束，就会出现。</p>

<p><img class="<a" src="href="https://img.alicdn.com/imgextra/i1/715978679/TB2jRjqjVXXXXaiXXXXXXXXXXXX_!!715978679.png">https://img.alicdn.com/imgextra/i1/715978679/TB2jRjqjVXXXXaiXXXXXXXXXXXX_!!715978679.png</a>&#8221;></p>

<p><img class="<a" src="href="https://img.alicdn.com/imgextra/i1/715978679/TB28pbXjVXXXXadXpXXXXXXXXXX_!!715978679.png">https://img.alicdn.com/imgextra/i1/715978679/TB28pbXjVXXXXadXpXXXXXXXXXX_!!715978679.png</a>&#8221;></p>

<p><img class="<a" src="href="https://img.alicdn.com/imgextra/i4/715978679/TB2VSjnjVXXXXaxXXXXXXXXXXXX_!!715978679.png">https://img.alicdn.com/imgextra/i4/715978679/TB2VSjnjVXXXXaxXXXXXXXXXXXX_!!715978679.png</a>&#8221;></p>

<h4>如何分析</h4>

<p>颜色越深代码花的时间越多。</p>

<p><img class="<a" src="href="https://img.alicdn.com/imgextra/i2/715978679/TB2HnYmjVXXXXacXXXXXXXXXXXX_!!715978679.png">https://img.alicdn.com/imgextra/i2/715978679/TB2HnYmjVXXXXacXXXXXXXXXXXX_!!715978679.png</a>&#8221; width=&#8221;640&#8221; height=&#8221;480&#8221;></p>

<p>主要指标有：</p>

<ul>
<li>CPU time 某个方法占用的CPU时间</li>
<li>Real time 某个方法运行的真实时间</li>
<li>CPU time/call - 某方法CPU时间与调用次数比</li>
</ul>


<p>还有二个前缀：</p>

<ul>
<li>Incl - 这是Inclusive简写，意思就是包含方法里面的子调用</li>
<li>Excl - 这个是Exclusive的简写，意思方法本身，不包含子调用</li>
</ul>


<p>通过这个可以分析出哪些方法比较耗时。</p>

<h3>systrace</h3>

<p><a href="http://developer.android.com/tools/help/systrace.html">systrace</a>可以查看出进程的执行情况，不单单是你的应用进程，也能看到系统进程的执行情况，能够以时间线的形式来展示进程中各线程的执行情况。</p>

<h4>如何使用</h4>

<p>根据系统版本的不同使用方法略有不同：</p>

<ul>
<li><p>Android 4.3及以上系统</p>

<ol>
<li>确保打开了ADB调试模式</li>
<li>执行以下命令</li>
</ol>


<pre><code class="``shell">$ cd android-sdk/platform-tools/systrace
$ python systrace.py --time=10 -o mynewtrace.html sched gfx view wm
</code></pre>

<p>  输出的mynewtrace.html文件就是带有trace的结果，用浏览器打开查看即可。</p></li>
<li><p>Android 4.2及以下系统</p>

<ol>
<li>打开ADB调试模式</li>
<li>开发者选项中->监控->启用跟踪中选择想要查看的类型</li>
<li>执行命令</li>
</ol>


<pre><code class="``shell">  $ python systrace.py --cpu-freq --cpu-load --time=10 -o mytracefile.html
</code></pre></li>
</ul>


<p>更多的systrace命令的使用方法可以参考<a href="http://developer.android.com/tools/help/systrace.html">官方文档</a>。</p>

<h4>如何分析结果</h4>

<p>systrace命令得到的结果是一个HTML文件，用浏览器打开即可.</p>

<p>基本操作：w 放大；s 缩小; a 向左移动；s 向右移动</p>

<p>从中可以看出帧绘制的信息，通常每一帧应该小于16.6ms，为绿色。对于有问题的，比如delay或者绘制时间长的，会以黄色和红色标注出来，并且在顶部会有Alert。点击帧F和Alert可以看到具体的详细信息，以及系统自动分析出来的可能的原因。
 </p>

<h3>hierarchyview</h3>

<p>这个工具很明显就是用来调试布局的，它能以可视化的方式展示View的层次结构，顺带显示每一层View的渲染速度。运行方法是找到SDK/tools/运行hierarchyviewer.</p>

<p><em>注意</em>：默认情况下只有调试的ROM（build with eng)才能抓到View的层次信息（否则，应用的页面就很容易被破解了），对于可控制源码的可以用<a href="https://github.com/romainguy/ViewServer">开源库</a>来解决这个问题。</p>

<h3>代码层次剖析打点</h3>

<p>这个要对代码熟悉后可以进行，对于怀疑执行较慢的代码加上时间打点（System.currentTimeMillis())来确定其执行所花的时间。也就是说在编码的时候要有意识，对于持有怀疑态度的方法，要时不时的打时间点，以看其是否能放在主线程中。</p>

<h3>打开StrictMode</h3>

<p>这是一个开发者工具，能够帮助开发者检测到不经意间做的一些违反平台开发原则的事情，比如在主线程中做了IO操作或者主线程中操作网络等等。时至今日它能检测的远不止这些，还能检测主线程中的比较慢的方法调用，还有检测Dialog的泄露(Dialog未关闭，Activity就退出了），Activity的泄露以及未正确关闭的对象(Cursor, Binder)等。总之，它能帮助你减少因为代码写法不规范而造成的问题。详细的如何使用可以<a href="http://developer.android.com/reference/android/os/StrictMode.html">参考文档</a>。</p>

<h2>如何提升程序性能</h2>

<p>这个比较难，比如读取大文件必然耗时，从服务器上取数据肯定慢（比从本地读），但是聪明的人类还是有方法做的更好的：</p>

<h4>把业务逻辑弄简单点</h4>

<p>这个就不废话了，代码搬运工们没有太多的话语权。但是对于能控制的部分要做好，比如尽早失败，不重复等等。</p>

<h4>多用缓存</h4>

<p>缓存绝对是计算机技术一个非常重要的东西，发明这东西的人肯定是个天才。缓存无处不在，缓存的目的就是提高性能，加快访问速度，衡量缓存好坏就看命中率。CPU有三层缓存来提升运算性能。软件中缓存也是提升性能的一个非常重要的手段。</p>

<p>比如对于不太常变化的数据，从网络成功获取后就要缓存在本地；再如，对于经常访问的本地数据也要在内存中有缓存；用到的图片比较多的应用，要做内存和本地二级缓存，以减少图片的加载时间（比如<a href="https://github.com/nostra13/Android-Universal-Image-Loader">UIL</a>的做法）；</p>

<p>常见的缓存工具有内存级的<a href="http://developer.android.com/reference/android/util/LruCache.html">LruCache</a>以及磁盘级的<a href="https://developer.android.com/samples/DisplayingBitmaps/src/com.example.android.displayingbitmaps/util/DiskLruCache.html">DiskLruCache</a>，教程可以参考<a href="http://blog.csdn.net/guolin_blog/article/details/28863651">这里</a>。</p>

<h4>延迟加载和按需加载</h4>

<p>这个就容易理解一些，比如三层页面才用到的数据，你没必要一启动在第一级页面就加载它（当然，也可能有这样的情况，比如数据有依赖时）。</p>

<p>按需要加载就是，第一个页应该只加它需要的数据，而不是一个请求，把应用所有数据都拉下来。</p>

<h4>尽早发出异步请求</h4>

<p>对于像异步从网络获取数据，或者异步IO加载数据的，或者做一些费时的异步初始化等，可以尽早的把请求发送出去，在等待结果的同时再做其他事情，这样能保证结果最快的呈现出来。</p>

<h4>使用工具（开源库）</h4>

<p>这个就是，世上总有人比你聪明，他们的方法更巧妙，更高效，为什么不用呢？比如图片加载，比如网络库，比如JSON解析等等，那么多优秀的人做的优秀的东西不用太浪费了。要感谢那些优秀的开发者，总能找到合适的库，不但好用，而且开源，既然完成任务，又能学习，还有比这更好的事情么？</p>

<p>可以到<a href="https://github.com/wasabeef/awesome-android-ui">这里</a>和<a href="http://alamkanak.github.io/android-libraries-and-resources/">这里</a>来找需要的开源库。</p>

<h2>如何占用更少资源</h2>

<p>对于资源的使用首页的原则就是，尽量少用或者不用，听上去是废话，其实不然，有一些具体的可实践的准则可供参考。其实这里面的话题每一个都可以扩展成一整篇文章来探讨，这里仅列出一些要点，不作细致讨论。</p>

<h3>内存</h3>

<h4>尽可能的少创建对象</h4>

<p>主要的原则就是尽可能的复用，比如像对话框，或者Toast之类的都是可以复用的。再如尽可能的把创建对象放在循环外面等等。</p>

<h4>尽量缩短对象的生命周期</h4>

<p>比如能在一个调用链中传递的对象就没有必要非声明为成员变量。在方法尾部使用的对象就别在一进入方法时就创建。用户事件触发的逻辑就没有必要一进入页面时就创建。当onResume后才会使用到的对象就没有必要在onCreate里创建等等。</p>

<h4>避免内存泄露</h4>

<p>所谓内存泄露就是内存在不再使用之后仍没有得到释放，一般情况下它是无害的，无非也就多用点内存，现在设备内存越来越大，空着不用也浪费，但是内存总有用尽的时候。对于Android，更是如此，每个应用（进程）有固定的内存配额（HeapSize），它是由系统ROM决定的，所以一旦有泄露，程序必定会因OOM（Out Of Memory Error)而崩溃（其实崩溃了也是好事，一是你会重视，二是进程退出了，重新启动后内存泄露会得到一定的缓解），特别是现在应用中的图片和视频等多媒体元素越来越多，这些东西本来就吃内存，再来点泄露，那么发生OOM的机率大大增加。</p>

<p>Android中最容易泄露的对象就是Activity，Activity对象由系统创建，生命周都是由系统来控制，我们只能发送请求， 不能强行干预。正常情况下的Activity对象在onDestroy（）之后是要被回收的，所以如果在onDestroy以后仍有其他生命周期更长的对象持有对Activity对象的引用的话，就会导致Activity的泄露。</p>

<p>而Android中很多系统API都是需要Context（少量的是需要Activity，比如Dialog），而Activity又是Context的一个实现，因此啊，很多人在很多时候都简单的把Activity对象直接传了过去，很多系统API的生命周期要比应用程序长的得多，这就是导致Activity对象泄露的原因。避免这种泄露很简单，就是尽可能传ApplicationContext，也就是说不要直接传Activity对象，而是传activity.getApplicationContext()。因为ApplicationContext一个应用只有一个，也就是说一个手机里只有一个，而且系统本身就会缓存它，所以长一点持有它也没关系。当然要视情况而定，比如像Dialog虽然是Context，但必须传Activity。</p>

<h4>缓存对象，以避免复创建</h4>

<p>比如像Dialog对象，可以缓存起来以避免每次都创建新的。</p>

<p>对于大量的缓存对象可以使用<a href="http://developer.android.com/reference/android/support/v4/util/LruCache.html">LruCache</a>来管理。</p>

<h4>对于缓存，尽量用WeakReference</h4>

<p>特别是像Activity和Fragment以及Service等有固定生命周期，且生命周期又是由系统来控制的对象，最好加持有WeakReference。</p>

<h4>监听onTrimMemory和onLowMemory，以采取措施</h4>

<p>当系统内存吃紧的时候会向Activity发送通知，此时可以做一些措施，比如释放不用的资源，释放不用的对象，清空缓存等以缓解压力。</p>

<h4>内存使用监测工具和分析方法</h4>

<p>可以时不时的用监测工具来监测一下应用所消耗的内存，有这些方式：</p>

<ul>
<li>adb shell dumpsys meminfo <pkgname></li>
<li>Android Device Monitor - (其实就是早期的DDMS的进化版本)监测用的GUI工具，选择进程，然后update heap，就能实时看到heap使用情况</li>
<li>AndroidStudio 已经集成了内存监测工具，可以实时看到内存的使用情况。</li>
<li>MAT - Memory Analysis Tool它是Java的标准内存分析工具，安卓的dex不直接支持，但无妨，可先用monitor dump出prof文件，再用SDK中的工具hprof-conv进行转换后MAT就认识了。详细的可以参考<a href="http://androidperformance.com/2015/04/11/AndroidMemory-Usage-Of-MAT/">这篇文章</a>。</li>
<li>更多的Java内存使用建议可以参考<a href="http://androidperformance.com/2015/07/20/Android-Performance-Memory-Java/">这篇文章</a>.</li>
<li><p>学会查看GC输出的信息</p>

<p>Logcat日志中的GC信息也能非常直观看出内存的使用情况，而且看出性能上的原因，特别是UI卡顿，或者动画丢帧等情况。因为GC或者说频繁的GC发生，是会影响到应用性能，特别是会影响UI线程。GC的日志通常能看出触发GC的原因，释放掉了多少内存以及花了多少时间，具体的还跟虚拟机的版本不一样而不同，下面分别来详细的讲述：</p>

<ul>
<li><p>Dalvik</p>

<p>Dalvik虚拟机GC的日志格式如下：</p>

<blockquote><p>dalvikvm: &lt;reason&gt; &lt;freed&gt;, &lt;free memory&gt;, &lt;time&gt;</p></blockquote>

<ul>
<li>reason &ndash; 触发GC的原因</li>
<li>freed &ndash; 此次GC释放了多少内存</li>
<li>free memory &ndash; 还有多少空闲的内存空间</li>
<li>time &ndash; 此次GC花费多少时间</li>
</ul>


<p>其中reason又有几个：</p>

<ul>
<li>GC_CONCURRENT</li>
<li>GC_MALLOC</li>
<li>GC_EXPLICT</li>
<li>GC_BEFORE_OOM</li>
</ul>
</li>
<li><p>ART</p>

<p>ART虚拟机的GC格式比Dalvik要详细一些：</p>

<blockquote><p>I/art: &lt;GC_Reason&gt;&lt;Amount_freed&gt;,&lt;LOS_Space_Status&gt;,&lt;Heap_stats&gt;,&lt;Pause_time&gt;,&lt;Total_time&gt;</p></blockquote></li>
</ul>


<p>  更多内容可以参考<a href="http://mp.weixin.qq.com/s?__biz=MzI1MTA1MzM2Nw==&amp;mid=400021278&amp;idx=1&amp;sn=0e971807eb0e9dcc1a81853189a092f3&amp;scene=0#rd">这篇文章</a>。</p></li>
</ul>


<p>准确的来讲MAT是分析工具而非监测工具，也就是当发现有内存泄露的时候抓一段heap的使用情况用MAT来分析。其他几个都可以用来监测，也就是说看一下内存是否有问题，表现都是当操作时内存使用会有所增加，但当操作停止后内存应该迅速回落到操作前的水平。重复操作，内存使用不应该一直增加。如果长时间内存没回落或者内存一直增长，那么就很可能存在内存没有释放掉，就要抓heap然后用MAT分析，看是哪里出了问题。</p>

<h3>CPU</h3>

<h4>减少忙等待</h4>

<p>也就是说使用注册Listener（通俗的就是callback）方式来处理异步事件，而不是忙等待：</p>

<pre><code class="java">// DO NOT do this
while (somethingNotReady) {
    sleep(100);
}
</code></pre>

<h4>合理使用线程</h4>

<p>理性的仅在有必要的费时操作启动worker线程来完成。不要盲目的创建线程。线程多了，不一定性能就上去了，反尔会带来同步的无尽烦恼和不可捉摸的诡异偶现Bug，而且频繁的<a href="https://en.wikipedia.org/wiki/Context_switch">Context Switch</a>也会带额外的损耗。</p>

<p>对于频繁执行的异步任务，最好使用<a href="http://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor.html">线程池</a>，一方面可以复用资源，另一方面也方便控制。</p>

<p>对于长时间执行的任务，或者有Server用途的长时间工作线程，要使用<a href="http://developer.android.com/reference/android/os/Looper.html">Looper</a>和消息队列<a href="http://developer.android.com/reference/android/os/Handler.html">Handler</a>，详细的可以参考<a href="http://blog.csdn.net/hitlion2008/article/details/8194510">这篇文章</a>。</p>

<p>仅当需要与UI有交互的情况下才考虑使用<a href="http://developer.android.com/reference/android/os/AsyncTask.html">AsyncTask</a>，具体看<a href="http://blog.csdn.net/hitlion2008/article/details/7983449">这篇文章</a>。</p>

<h4>严格控制Service的生命周期，做到按需启动，及时停止</h4>

<p>安卓的Service绝对要为手机的卡顿负一部分责任，系统放任Service，Service的控制权都在开发者手中，所以Service被滥用的特别严重。打开手机的设置，看看正在运行的应用程序，可以发现几乎所有的应用都有至少一个到二个左右的Service进程在运行。所以说安卓能不耗电么，能不卡么，能不耗流量么，跟水果手机咋比啊。</p>

<p>为了体现专业性，使用Service就要小心，当有需求的时候再启动（startService or bindService），当不用了就stopSelf or stopService。</p>

<h4>监测工具</h4>

<p>在Android Studio中有工具可以监测CPU的使用情况</p>

<h3>磁盘</h3>

<h4>没必要存的东西就不要存</h4>

<p>比如直接作用到UI层面的一些信息，显示完就不再使用了，这种数据是没有必要缓存到磁盘上的，至多在内存中缓存就可以了。</p>

<h4>不是长期使用的就用临时文件，且是用标准API创建的临时文件</h4>

<p>在同一个启动Session中，不同阶段都要使用的数据，可以用临时文件来存取，比如启动时，或者加载完时创建一个临时文件来存储，后面再使用。创建临时文件要用标准的File#createTempFile方法，而不是创建一个普通文件当作临时用。因为常常会忘记删除掉，即使有删除动作，但假如有异常出现，也会走不到删除。久而久之磁盘上的垃圾文件会越来越多。</p>

<h4>如果不再需要就及时的删除文件</h4>

<p>这个可以讲其实国内的甚至国外的绝大多数软件做的都不好，特别是机身存储和SD扩展卡上面的内容，因为这些区域是开放给所有App的，而且容量一般都很大，所以大家都很高兴的写，没有人去删除。这也是为什么市场上面的清理软件如此的受欢迎。作为良心开发者，还是自己擦自己的屁股吧！</p>

<h4>定期整理数据库，删除旧数据</h4>

<p>数据库也跟磁盘一样，长期使用后会有过期的数据，也是需要清理的。</p>

<p>另外，由于数据库不断的增删改，会导致数据库文件产生断层（文件大小不必要的大于实际内容），或者碎片，这时就需要<a href="https://sqlite.org/lang_vacuum.html">execute(&ldquo;vacuum&rdquo;)</a>来重新生成数据库文件。当然这个比较有风险，而且耗时比较长，所以，只有当达到一定时间时才有必要这样做。</p>

<h4>给APK瘦身</h4>

<p>虽然，安卓应用程序发布较PC软件非常之容易，各大应用市场傻瓜式的一键式搞定，但是，用户仍然需要下载和安装，这期间APK的大小直接影响应用的成功安装率，小的APK文件，下载快，耗流量少，安装快，占用ROM也少，低端机型的ROM没那么大。所以APK的瘦身也是势在必行的一个优化指标。</p>

<p>一般来说有这么几个方面，可以去下功夫：</p>

<ul>
<li><p>删除无用资源</p>

<p>不再使用的图片，布局，库不但增加目标文件大小，而且会延长编译和打包的时间。不用了就删除，后面用的时候再还原。如果代码太多，或者不够熟悉搞不清该不该删除，可以参考<a href="http://developer.android.com/tools/debugging/improving-w-lint.html">lint</a>的warning信息。</p></li>
<li><p>删除无用代码</p>

<p>这个比资源还严重，其实不用的代码对包增大没太大的作用，但是没有代码会严重影响项目的清析度和可维护性。比如新人来了，看一坨代码，最后发现半坨都是没用的代码，心中必有万个马在奔腾。不用了就删除，以后用到时可再还原，版本控制就是专门干这事的。</p></li>
<li>集中使用xhdpi（或者xxhdpi），对于确实适配有问题的资源再添加其他支持(hdpi)，一般情况下足够了</li>
<li>对于PNG图片，可以使用<a href="http://www.p-edge.nl/eng/products/pngshrink">pngshrink</a>或者<a href="https://pngquant.org/">pngquant</a>来进行一下无损压缩，之后再放入工程。视觉给的图都能达到50%~70%的压缩率。</li>
<li><p>使用混淆器</p>

<p>一方面防小白反编译你的项目，虽然可能也没啥有技术含量的代码，但让人家那么容易就获得了你的全部源码，也还是挺闹心的（虽然，可能你的代码也都是Github+Google来的，哈哈哈）；另外一方面就是混淆，特别是Android中最流行的<a href="http://developer.android.com/tools/help/proguard.html">ProGuard</a>，能显著的减少目标dex的大小。</p></li>
</ul>


<h3>网络流量</h3>

<p>对于这点，其实优先级没那么高，现在Wifi覆盖越来越广，移动流量资费也越来越便宜，套餐越来越实惠，所以这些问题不必太纠结。</p>

<h4>对于更新时间比较长的要缓存到本地存储，以避免重复请求</h4>

<p>这个其实也是提升响应速度的一个方式，对于更新周期比较长，且时效性要求不高的数据可以缓存在本地。客户端每隔一定时间更新一次。</p>

<h4>服务端主动推送更新通知</h4>

<p>就是对于数据，客户端拿到后就缓存着，当数据有更新时服务端推送通知给客户端，然后客户端再来获取。这样即可以保证数据的更新到达，又可以减少不必要的网络请求。</p>

<h4>差分获取更新数据</h4>

<p>当已经拿到了数据后，想要更新时，可以让服务端返回数据的差异，而不是返回整个数据，客户端拿到数据后再做融合。</p>

<h4>无论是请求还是服务器返回，没有用的参数不要带上</h4>

<h4>使用压缩技术请求加上&#8221;Accept-Encoding&#8221;=gzip, deflate</h4>

<p>无论是上传文件还是下载文件尽可能压缩一下，即使不为了省流量，也能提升些响应速度。当然这个需要服务端配合，如果无法控制服务端就没有办法了。</p>

<h4>对于要下载，事先判断网络类型，并给予提示，让用户来选择</h4>

<p>相对于上面几点，这点倒是要注意，比如更新，或者下载插件，要判断网络类型，如果是移动网络，给出提示，让用户自己来判断。</p>

<h2>参考资料</h2>

<ul>
<li><a href="http://blog.chengyunfeng.com/?p=458">Android 性能分析案例</a></li>
<li><a href="http://coderrobin.com/2015/05/04/android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%AC%94%E8%AE%B0/">android性能优化笔记</a></li>
<li><a href="http://blog.venmo.com/hf2t3h4x98p5e13z82pl8j66ngcmry/performance-tuning-on-android">Performance Tuning On Android</a></li>
<li><a href="http://android-performance.com/android/2014/04/24/android-strict-mode.html">StrictMode 详解</a></li>
<li><a href="http://droidyue.com/blog/2015/09/26/android-tuning-tool-strictmode/">Android性能调优利器StrictMode</a></li>
<li><a href="http://stackvoid.com/performance-tuning-on-android/">Android App 性能优化实践</a></li>
<li><a href="https://developer.android.com/tools/debugging/debugging-memory.html">Investigating Your RAM Usage</a></li>
<li><a href="http://blog.csdn.net/yanbober/article/details/48394201">Android应用开发性能优化完全分析</a></li>
<li><a href="http://www.cnblogs.com/coding-way/p/4294225.html">HierarchyView的实现原理和Android设备无法使用HierarchyView的解决方法</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
