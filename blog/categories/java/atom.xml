<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | 稀有猿诉]]></title>
  <link href="http://toughcoder.net/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://toughcoder.net/"/>
  <updated>2015-10-29T23:59:53+08:00</updated>
  <id>http://toughcoder.net/</id>
  <author>
    <name><![CDATA[Alex Hilton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java 7和8的新特性以及与Android开发的关系]]></title>
    <link href="http://toughcoder.net/blog/2014/11/12/java-7-and-8-and-android/"/>
    <updated>2014-11-12T21:54:11+08:00</updated>
    <id>http://toughcoder.net/blog/2014/11/12/java-7-and-8-and-android</id>
    <content type="html"><![CDATA[<p>Oracle一直在推动Java的发展，到目前最新的Java SE是Java 8以及JDK8，但是目前貌似很多人还在使用Java 6（JDK6)，于是就花时间小研究了下Java 7与Java 8。</p>

<p><a href=""><img src="http://nerdsmagazine.com/wp-content/uploads/2013/06/Run-Android-Apps-and-Games-on-Android.jpg"></a></p>

<!-- more -->


<h2>Java 7（JDK 7)的语言新特性</h2>

<p>Java SE 7新增的语言特性并不是很多，主要有：</p>

<ul>
<li>try 语句资源管理(The try-with-resources Statement)</li>
<li>同一catch捕获多个异常(Catching Multiple Exception Types)</li>
<li>创建泛型对象时的类型推测(Type inferenes for Generic Instance Creation)</li>
<li>二进制的字面常量(Binary Literals)</li>
<li>数值字面常量里的可以有下划线(Underscores in Numeric Literals)</li>
<li>switch语句支持String(Strings in switch Statements)</li>
</ul>


<p>下面来个实例：</p>

<pre><code class="java">import java.io.*;
import java.net.*;
import java.util.*;

public class Switch {
    // Underscores in numeric literals
    public static int USER_COUNT_LIMIT = 1_000_000_000;
    public static void main(String[] args) {
        // Type inference when creating generics
        List&lt;String&gt; fruits = new ArrayList&lt;&gt;(args.length);
        for (String a : args) {
            fruits.add(a);
        }
        // Strings in switch
        for (String a : fruits) {
            switch (a) {
            case "apple":
                System.out.println("eat an apple a day, the doctors go away");
                break;
            case "orange":
                System.out.println("orange juice");
                break;
            default:
                System.out.println("i do not know what you want");
                break;
            }
        }

        // With 'try-with-resources' no longer need finally to clean up resources.
        try (BufferedReader br = new BufferedReader(new FileReader(args[args.length - 1]))) {
            System.out.println(br.readLine());
            Thread.sleep(1000);
        // Catch multiple exceptions
        } catch (InterruptedException | IOException e) {
            System.out.print(e.getMessage());
        }

        // binary literals
        int userCount = 0b1010101;
        System.out.println("Current we have " + userCount + " users, while limit is " + USER_COUNT_LIMIT);
        if (userCount &lt; USER_COUNT_LIMIT) {
            System.out.println("We are okay, it is under control");
        } else {
            System.out.println("Alert alert alert");
        }
    }
}
</code></pre>

<p>编译并运行：</p>

<pre><code class="bash">[alex:jdk1.7.0_71]$./bin/javac Switch.java -Xlint
[alex:jdk1.7.0_71]$./bin/java Switch apple Switch.java README.html 
eat an apple a day, the doctors go away
i do not know what you want
i do not know what you want
&lt;html&gt;
Current we have 85 users, while limit is 1000000000
We are okay, it is under control
</code></pre>

<p>可以看出，其实Java 7并无太大改进，只是多了些语法糖而已。</p>

<h2>Java 8(JDK 8）的语言新特性</h2>

<p>Java 8最大的改进就是增加了lambda表达式(Lambda Expression)，来看个实例：</p>

<pre><code class="java">import java.util.*;

public class Lambda&lt;T&gt; {
    public void apply(List&lt;T&gt; list, Action&lt;T&gt; action) {
        for (T t : list) {
            action.perform(t);
        }
    }

    public static void main(String[] args) {
        List&lt;String&gt; stuff = new ArrayList&lt;&gt;();
        for (String s : args) {
            stuff.add(s);
        }

        Lambda&lt;String&gt; lambda = new Lambda&lt;&gt;();
        // Use lambda expression to specify action
        lambda.apply(stuff, s -&gt; System.out.println(s));

        // Another example of lambda expression for threading
        new Thread(() -&gt; {
            for (int i = 0; i &lt; 10; i++) {
                System.out.println("working " + i + " seconds");
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {}
            }
        }).start();
    }
}

interface Action&lt;T&gt; {
    public void perform(T t);
}
</code></pre>

<p>编译并运行：</p>

<pre><code class="bash">[alex:jdk1.8.0_25]$./bin/javac Lambda.java -Xlint
[alex:jdk1.8.0_25]$./bin/java Lambda apple orange
apple
orange
working 0 seconds
working 1 seconds
working 2 seconds
working 3 seconds
working 4 seconds
working 5 seconds
working 6 seconds
working 7 seconds
working 8 seconds
working 9 seconds
</code></pre>

<p>在Java 8中，可以比用匿名内部类更加方便的方式来设置回调。</p>

<h2>Android中的Java</h2>

<p>那么，Android到底与Java是什么关系呢？<a href="http://www.vaikan.com/android-java/">有人说</a>它们是一样的。其实没啥关系，Android虽然使用Java语言作为它的主要开发语言，但是它并完全等同于Java SE JDK，JDK中关于UI的AWT和Swing在Android都没有，所以它的API是标准JDK 6的一个子集。Android中的Java是基于<a href="http://www.apache.org/">Apache</a>的<a href="http://harmony.apache.org/">Apache Harmony</a>，与标准Java SE 6语法完全一样，可以看看它们之间的<a href="http://en.wikipedia.org/wiki/Comparison_of_Java_and_Android_API">异同</a>，以及<a href="http://www.zhihu.com/question/20207106">Dalvik与Java VM</a>。</p>

<h2>Java 7和Java 8与Andoid开发</h2>

<p>Java在进步，语法上越来越人性化，那么Android开发能否得益呢？Java 7是可以的，在最新的开发工具（ADT 23和Kitkat）下，可以使用Java 7。但对于Java 8不能直接使用，只能借助第三方工具来翻译bytecode。所以对于Android开发者同学们来说，尝一尝Java最新的语法糖就可以了，想要天天使用，还要慎重考虑哦！</p>

<h2>参考</h2>

<ul>
<li><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/language/enhancements.html">Java Programming Language Enhancements</a></li>
<li><a href="http://stackoverflow.com/questions/16921337/why-apache-harmony-or-how-to-use-java-8-on-android">“Why Apache Harmony” or “How to use Java 8 on Android”</a></li>
<li><a href="http://stackoverflow.com/questions/23318109/is-it-possible-to-use-java-8-for-android-development">Is it possible to use Java 8 for Android development?</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
