<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | 稀有猿诉]]></title>
  <link href="http://toughcoder.net/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://toughcoder.net/"/>
  <updated>2020-07-26T22:42:37+08:00</updated>
  <id>http://toughcoder.net/</id>
  <author>
    <name><![CDATA[Alex Hilton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[理解安卓的视图体系结构]]></title>
    <link href="http://toughcoder.net/blog/2020/03/16/understanding-the-view-system-of-android/"/>
    <updated>2020-03-16T22:17:17+08:00</updated>
    <id>http://toughcoder.net/blog/2020/03/16/understanding-the-view-system-of-android</id>
    <content type="html"><![CDATA[<p>当我们想要写一个页面的时候，通过一个Activity，然后调用其setContentView方法，把一个布局文件当作一个参数传递过去，然后一个页面就好了，但是除此之外，我们还需要与一些组件打交道，比如像Window，WindowManager，那么这些东西到底 与我们的页面布局有什么关系，今天就来学习一下，以便对整体窗口有个更清楚的认知。</p>

<p><a href=""><img src="https://image.slidesharecdn.com/androiduisystem-151208024825-lva1-app6892/95/android-ui-system-5-638.jpg?cb=1449545828"></a></p>

<!-- more -->


<h2>布局是一颗View tree</h2>

<p>先从一个最简单的例子出发，平时我们写一个页面，都从一个布局文件出发。这其实是在构建一个View tree，为啥一定是tree呢，因为我们的布局文件，无论有多么的复杂，都是从一个根（通常是一个ViewGroup对象）开始的，父布局里面再写子布局，比如这样的：</p>

<pre><code class="xml">&lt;LinearLayout id="app_root"&gt;
  &lt;TextView id="label"/&gt;
  &lt;Button id="submit"/&gt;
&lt;/LinearLayout&gt;
</code></pre>

<p>这会形成一个树状结构：</p>

<p>| app_root<br/>
&nbsp;&nbsp;  |- label<br/>
&nbsp;&nbsp;  |- submit<br/>
作为一个开发者，写布局是我们再熟悉不过的了，主要就是用所熟悉的各种Layout和View一起来构建想要的页面。</p>

<p>所写的布局，最终会生成一颗View tree，是一个树状的数据结构，每一个节点都是一个View对象（ViewGroup和View）。因此，布局优化的一个是感觉重要的点就是要先减少View tree的深度（也即平时所说的减少布局的嵌套），再想办法减少广度（减少个数）。</p>

<p>那么，我们写的布局的父布局又是哪里呢？这就又涉及两个东西，一个叫做decorView和contentView的东西。</p>

<h3>DecorView与ContentView</h3>

<p>我们平常所见的屏幕窗口的根布局是一个叫做DecorView的东西，它是我们通常意义上整个屏幕的根节点，它包含了上面的Status bar和下方的Navigation bar，以及属于应用程序的中间部分。它的源码路径是<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/com/android/internal/policy/DecorView.java;drc=master;l=118">frameworks/base/core/java/com/android/internal/policy/DecorView.java</a>。它是一个真实的view，它是FrameLayout的子类。</p>

<p>它下面有一个id为android.R.id.content的FrameLayout，我们平时在Activity中调用setContent时所传过去的布局文件所生成的View tree都是添加在这个FrameLayout下面，所以，通常对于我们一个Activity来说，这个FrameLayout是直接意义上的根节点，我们所写的布局都是添加它下面的。</p>

<h3>ContentView所引申出来的奇技淫巧</h3>

<h4>布局优化技巧</h4>

<p>首先，一个是布局的优化技巧，可以减少View tree的层级：假如你写的布局中根节点也是一个FrameLayout，那么可以直接用merge节点，把子view全部都直接加挂到前面提到的系统创建的Activity的根布局上面。</p>

<pre><code class="xml">&lt;merge&gt;
  &lt;Text /&gt;
  &lt;Button /&gt;
&lt;/merge&gt;
</code></pre>

<p>这可以把View tree减少一个层级（深度减1）。</p>

<h4>页面内即插即用的弹窗</h4>

<p>每个Activity都被回挂在一个id是android.R.id.content的FrameLayout下面，利用这一点，可以做一些即插即用的弹窗，即插即用的意思是，不用写在布局里面，而且显示的时间是不固定的，可能很多时候都不显示，在某个特定的逻辑或者时间才显示。就好比某些电商特定节日的弹窗一样，这种东西，一年也显示不了几回，如果直接添加在布局里面（哪怕你用ViewStub），不够优雅，毕竟不是常规逻辑下会出现的页面，这时可以利用content来做一些即时弹窗：</p>

<pre><code class="java">FrameLayout container = activity.findViewById(android.R.id.content);
View pop = &lt;create or inflate your own view&gt;;
container.addView(pop);
</code></pre>

<p>只要你能获得到Activity的实例（这个并不难），那么就可以非常优雅的添加弹窗，逻辑代码和布局文件都会相当独立，甚至可以用插件形式来异步加载。再进一步，如果 添加一个WebView，那么就可以做得更加的前端化，实时化和定制化，好多电商的弹窗就是这么干的。</p>

<h2>Window与WindowManager</h2>

<p>作为应用开发者，我们看一个View tree其实就是一坨布局，这是站在一个非常小的角度去看的，但如果站在整体系统架构角度来看的话，就会发现应用程序所在的view tree仅是系统可视化窗口架构中的末端，View只是用来构建视图的基本砖块而已。对于整体View tree是如何渲染的，何时渲染，这就涉及到了整体系统架构层面的重量级组件了。</p>

<p>对于现化代的视图窗口架构(Modern GUI)，都有一个window server，作来管理视图窗口的核心组件，比如X11，Android当中也不例外。在Android里面，WindowManager就是专门用于管理视图窗口的，它是系统级别的server叫window manager server是一个系统级别的常驻进程，由init.rc启动。而Window则是一个基本的窗口的逻辑上的抽象。关于Window以及<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/services/core/java/com/android/server/wm/WindowManagerService.java;bpv=0;bpt=0">WindowManager</a>本身就是相当大的话题，都可以单独写本书，这时不做过多的探讨，对于我们应用开发者来说，了解一下基本的知识就够用了。</p>

<p>每一个Activity，都有一个Window对象，所有一切与GUI有关的事情，都委派给了Window对象，Actvity本身并不参与GUI的具体流程，比如像上面提到的DecorView，ContentView等View tree的构建与管理，View tree的渲染，以及像事件的处理，都是Window对象处理的。Window是WindowManager的基本对象，与其server之间通过IPC通信，Window是供应用程序端使用的，其实真正一切都掌握在window server手中。Activity和Dialog使用的对象都是PhoneWindow，它在<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/com/android/internal/policy/PhoneWindow.java;l=159;drc=master">frameworks/base/core/java/com/android/internal/policy/PhoneWindow.java</a>，Window对象会具体负责创建像DecorView之类的一些基础设施。最为关键的一个方法就是其PhoneWindow#installDecor()方法，这个方法里面会先调用generateDecor()创建mDecor，它就是前面讲到的DecorView对象，再通过generateLayout()创建mContentParent对象，它就是前面讲到的id是android.R.id.content的那个FrameLayout，Activity或者Dialog通过setContentView送过来的View tree就是加在它的下面的。</p>

<p>WindowManager是一个接口（Android系统的代码接口用的特别多，很多关键的架构层面的组件 都是接口，实际使用的都是其一个实现。)实际使用的是<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/WindowManagerImpl.java">WindowManagerImpl</a>对象，而它也没干啥，它把事情 又委派给另外一个叫做WindowManagerGlobal的对象，这个WindowManagerGlobal则是GUI端的最后一站，它负责与wms（WindowManagerServer）通信。它在<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/WindowManagerGlobal.java">frameworks/base/core/java/android/view/WindowManagerGlobal.java</a></p>

<p>需要注意WindowManagerGlobal是一个单例，也就是说每一个应用程序（严格来说是每一个进程只有一个实例，但安卓上面带有GUI的应用程序只能存活在一个进程，所以可以理解 为一个应用程序）只有一个实例，所以它管理着一个应用程序中的所有的View tree。从它的成员中便可看出，它有一坨ViewRootImpl对象（一个列表），而每一个ViewRoot对象管理着一颗View tree。</p>

<p>最为关键的一个方法就是WindowManagerGlobal#addView，每一个Window的持有者对象（如Activity或者Dialog）都是通过这个方法将其DecorView对象添加给WindowManager的。addView方法，会先创建一个ViewRootImpl对象，然后把要添加的view以及刚创建出来的<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/ViewRootImpl.java">ViewRootImpl</a>都放进它的列表中，最后再调用ViewRootImpl#setView(view)，这就把几大关键对象建立好了连接，接下来的事情就归ViewRootImpl了。这里还有一个相当关键的对象，那就是LayoutParams，WindowManagerGlobal也有一个列表里面存着每个Viewtree根节点（也就是Decor view）的LayoutParams。</p>

<p><img src="https://gss0.baidu.com/-4o3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/58ee3d6d55fbb2fb3f8cdfbe474a20a44723dcf3.jpg" alt="" /></p>

<h2>ViewRootImpl又是个啥</h2>

<p>Window是从手机系统角度来看待的窗口的概念，而View tree则是从应用程序角度构建GUI页面的概念，view tree是Window的一部分，Window对象持有mView，而这个mView就是上面提到的DecorView，也即是View tree的根节点。这里又要涉及另外一个对象ViewRootImpl，它并非是View tree的一部分，虽然名字上比较容易混淆，因为它并不是View的子类，所以它不是任何一个View tree的节点，它的职责是管理View tree，像渲染以及事件派发，都是Window直接通过ViewRootImpl来进行的。在代码中实际使用的是ViewRootImpl对象，它实现了ViewParent接口。</p>

<p>所以，ViewRootImpl对象是值得细细研究的，因为实际上是它在管理着GUI系统&ndash;view tree的管理，渲染的三大步(measure, layout和draw）以及事件的派发，最源头的逻辑都在这个对象里面，当然 它也是非常复杂的，源码大概有1万行左右。</p>

<h2>ViewParent又是个啥</h2>

<p>它是一个接口，行使的职责是管理子View，也就是说在View tree当中管理子View的行为的集合便是ViewParent接口。View tree的节点都是View的子类，所以，你看ViewRootImpl实现了ViewParent接口，它是负责管理Window里面的View tree的。另外一个就是ViewGroup，ViewGroup是View的子类，所以它是Viewtree的一部分，父节点都是ViewGroup，它核心就两样东西一个是子View的列表，另外就是ViewGroup也实现了ViewParent的接口，因为它也要管理它的子节点（也即子View）。</p>

<h2>Activity到底是个啥东西</h2>

<p>它是系统的四大核心组件之一，如果想构建GUI页面，则Activity是绕不开的。如果再详细一点，Activity是一个系统给你的融合了应用生命周期管理，组件级别复用（Intent相关）和窗口管理的组件，生命周期也即ActivityManager干的事情，它通过Activity的回调告诉你；而GUI则是通过Activity的Window对象帮你实现（Activity的布局和事件的处理都是委派给其持有的Window对象来处理）。</p>

<p>如果，把Activity的Window对象拿掉，那么它跟一个Service组件就基本上没有差别了。如果把Activity的Intent相关拿掉，那么它跟一个Dialog就没啥区别了。</p>

<h2>Fragment又是个啥</h2>

<p>坦白说，Fragment是Google挖的一个大坑，这玩意儿不符合Android的核心设计思想，因为Android出世的时候并没有它，是后来Google跟水果平台抄来的一个不伦不类的东西，结果全是坑。在它刚出来的一些年，Google极力的推荐使用Fragment，但是近一两年，又不推荐了。</p>

<p>Fragment本质上就是一个强加了生命周期函数回调的View，因为显示Fragmeng时，都是把它替换一个View或者添加到一个ViewGroup上面，所以它就是一个View，或者说一个View tree中的节点。但是强加了生命周期的回调。光是这两点，其实也没有啥，毕竟生命周期对于View是重要的，一般时候我们要在onResume与onPause之间才让View处于active状态。</p>

<p>Fragment最大的问题在于它的异步机制和状态恢复机制，也就是说用FragmentManager#commit了以后，具体啥时候Fragment会真正显示出来，我们是无法控制的，这是相当的坑；它的状态恢复机制就更加的坑，状态恢复这个东西如果全让程序员来负责也还好，就像Activity的设计一样，但是如果框架帮你做了一些事情，但又不完整，这就坑了，关于状态恢复的坑可以参考<a href="http://toughcoder.net/blog/2016/11/28/fear-android-fragment-state-loss-no-more/">这篇文章</a>来详细的了解。</p>

<h4>DialogFragment</h4>

<p>这个本质上是Dialog，但是被包了一层Fragment，所以它会有Fragment的特性，但是Window和View tree则是属于Dialog的。</p>

<p><strong>注意：</strong>FragmentTransaction#add(Fragment fragment, String tag)有一个方法是不需要提供父布局，这是为没有常规布局准备的，因为无法把布局添加到Activity的现有View tree之中。一般情况下，我们是不会使用这个方法的，目前看仅在DialogFramgment中使用这个方法，那是因为Dialog本身有Window和view tree。</p>

<h2>不在Activity view tree里面的窗口控件</h2>

<p>一般来讲，我们想要显示的页面都会放进布局里面，也就是说大部分时候我们的页面都由Activity的view tree来实现。但是有些特殊的场景，却不是在view tree里面，比如弹窗，像Dialog，PopupWindow以及Toast，这些东西一般是用于弹出式的页面，由特定的逻辑触发，它与常规页面最为显著的区别就是，它们与Activity的Window和View tree是独立开来的，它们并不是添加在当前Activity的view tree上面的。它们自己有独立的view tree，或者换句话说，它们是独立的Window。</p>

<p>我们这里重点探讨它们与Window和当前Activity之间的关系，至于它们的基本使用方法，可以参阅其他文章。</p>

<h3>Dialog</h3>

<p>这里不说基本使用方法。</p>

<p>通过查阅源码，可以发现Dialog与Activity的实现相当类似，它内部也有一个独立的Window，也是通过WindowManager#addView把其ContentView（我们提供的布局）加到屏幕上去的。因此，它与Activity也是相互独立的，是两个Window，两棵View tree。Dialog类里面还有getActionBar，OptionsMenu等相关的方法，但似乎在实际使用当中比较少用到。</p>

<p><a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/app/Dialog.java;l=207;bpv=0;bpt=1">Dialog</a>最为核心的两个方法一个是其构造方法，这其中会创建Window对象，另外一个就是#show，里面可以看到，它是通过WindowManager#addView()方法，来把它的mDecorView添加到窗口体系当中的，这与Activity其实是一样的。</p>

<h4>为啥显示Dialog一定需要Activity，一般Context却不可以</h4>

<p>使用过Dialog的人都知道，创建Dialog时一定要传递Activity为其参数，尽管构造方法里面声明的是Context。前面提到，Dialog有自己的Window和View tree，理论上它跟Activity是没有关系的。</p>

<p>如果，用一个非Activity作为Context传给Dialog，报错，是WindowManager抛出来的异常，说：</p>

<pre><code>android.view.WindowManager$BadTokenException: Unable to add window -- token null is not valid; is your activity running?
        at android.view.ViewRootImpl.setView(ViewRootImpl.java:1093)
        at android.view.WindowManagerGlobal.addView(WindowManagerGlobal.java:409)
        at android.view.WindowManagerImpl.addView(WindowManagerImpl.java:110)
        at android.app.Dialog.show(Dialog.java:342)
</code></pre>

<p>而Dialog#setOwnerActivity(Activity)方法在创建Dialog之后再把相关Activity塞过去，也是不行的，必须传入的Context参数要是一个Activity实例才可以。</p>

<p>最初以为，可以从它的构造方法中看出为啥一定需要Activity，就是因为需要theme.但其实并不是，因为theme是可以通过resource id传进去的。</p>

<p>关键点仍在于ViewRootImpl对象，因为这个异常是ViewRootImpl在其setView方法中抛出的，前面讲过，向一个Window添加布局最终会走到WindowManagerGlobal#addView，而它又是通过ViewRootImpl#setView来做具体事情 的，这个方法里面，会先获取当前的WindowSession，然后再把当前的Viewtree转化为窗口对象，添加给wms。所以最核心的地方还得看WindowManagerService#addWindow()这个方法，这个方法也相当之复杂，但是还是能大概看懂它的意思。</p>

<p>通俗的来理解这是安卓系统本身加的限制，也就是说窗口本身也是有逻辑关系的，可以简单理解 为树状关系，一个Activity是主Window，而由此Activity衍生出来的属于此Window的子Window，因此在添加子Window的时候，必须 要知道它从属于哪个父Window，因此，你必须 传Activity实例给Dialog的构造方法，因为只有Activity才是有主Window的。但是这个具体的逻辑连接却比较奇怪，从上面的过程描述来看，WindowManager#addView到ViewRootImpl#setView，其实，都没有明确的把父Window，也就是Activity的Window传进来，那么WindowManagerService又是从哪里去找这个父Window呢？</p>

<p>WindowManagerService#addWindow方法，并没有传递父Window参数 进来，那就只能是它从传进来的参数获得的。这里一个很重要的东西就是token，它是一个IBinder对象，它是一个Window的标识，它存在Window的attris对象里面，这个就是WindowManager#LayoutParams对象，它的作用就是存储Window的特征参数，比如你要改变Window的一些特性（通俗来说就是定制一下Window），那么通过改变LayoutParams，就可以了。这个其实不难理解，我们对View不就是通过其LayoutParams来改变View的特征参数 么。都 是一样的。</p>

<p>Dialog对象在show()时会把其mDecor添加到WindowManagerService中去，其并未传父Window，只传了一个LayoutParams过去，其实玄机也就在LayoutParams之中，窗口的token，父token（标识着父窗口）以及像窗口的type都是在LayoutParams中。那么这个LayoutParams是哪里创建的呢？它是来自于Window对象的，而Dialog的mWindow成员实例是在构造时创建的，创建的是一个PhoneWindow对象，并且把构造Dialog传进来的Context对象传给了PhoneWindow的对象，LayoutParams对象则是通过mWindow.getAttributes()得来的。因此啊，可以断定，PhoneWindow在生成LayoutParams时，会从传给其构造的上下文对象mContext中获取一些信息，如窗口的类型或者父窗口信息，而只有Activity对象才有窗口信息，并且可以作为父窗口，而普通 的Context对象是没有窗口的，由此可以解答我们的疑惑了。</p>

<h4>也可以显示独立于任何Activity的Dialog</h4>

<p>窗口是有很类型的，WindowManagerService为了方便管理，所以针对Activity及其从属于子窗口（Dialog和PopWindow）做了类似tree结构的逻辑上的整理，所以普通 的Dialog必须要能找到其主窗口（或者叫父窗口）。</p>

<p>但其实，我们经常能见到一些非常牛逼的Dialog，可以显示 在任何Activity之上，如电源没了，或者音量调节，等等。这些是叫作system dialog，需要特殊权限 才能显示出来的。管理来理解，系统级别的组件 才有权限 显示system dialog。</p>

<p>其实，想一想也合理，作为一个应用程序，你在自己的生命周期内，显示内容给用户足够的信息就可以了。当用户离开了你的应用，你也没有必要再显示Dialog了。</p>

<p><strong>注</strong>：应用在后台时，想在前台显示信息有其他的方式，如Notification等，这属于另外的话题，不做过多讨论。</p>

<h4>可以弄个全屏的Dialog吗？</h4>

<p>一般来讲呢，Actiivty都是全屏的，Dialog一般是非全屏的，可以把一个Activity弄成非全屏的，长的像Dialog一样，当成Dialog来使用，就在设置Activity的Theme时，用Theme.Dialog就可以了。</p>

<p>那么，反过来搞可不可呢，就是可不可以把常规的Dialog弄成一个全屏的呢？</p>

<p>从Dialog的实现上来看，它有Window对象，甚至连Actionbar和OptionsMenu都有，所以从实现上来看，Dialog并不一定非要像我们平常所使用的那样是一个对话框，它能做的事情 不比Activity少。默认Dialog的style就是一个平常的对话框，但其实，设置不同的style，就可以得到全屏的dialog。</p>

<pre><code class="java">     private void showFullscreenDialog() {
        // Theme_Material_NoActionBar_Fullscreen is real full screen, i.e. hide the status bar.
        Dialog dialog = new Dialog(this, android.R.style.Theme_Material_NoActionBar);
        dialog.setContentView(R.layout.fullscreen_dialog);
        dialog.findViewById(R.id.okay).setOnClickListener(view -&gt; {
            dialog.dismiss();
        });
        dialog.show();
    }
</code></pre>

<p><strong>注</strong>：这里有点歧义，全屏意思是指铺满整个父Activity，严格意义上的全屏是要把状态栏也要隐藏掉。</p>

<h3>PopupWindow</h3>

<p>PopupWindow是一个独立的类，并不是View的子类，因此，它跟常规的widget不一样，无法直接添加到现有的View tree之中，这也导致它的实现方式比较复杂。</p>

<p><a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/widget/PopupWindow.java;l=1497;drc=master;bpv=0;bpt=0">PopupWindow</a>它并没有创建Window对象，但是它有一个类似于Window对象的DecorView的东西，它的根节点是一个叫做PopupDectorView的东西，其实是一个FrameLayout，我们让PopupWindow显示的布局就是加在这个PopupDectorView下面。最重要的两个方法一个是preparePopup() 这个方法会创建根节点PopupDecorView，然后把我们需要显示的mContentView以及还有一个PopupBackgroundView（也是一个FrameLayout，包裹在要显示的ContentView外面），放在PopupDecorView的下面，所以真实的结构是根节点是PoupDecorView，包了PopupBackgroundView，再包上要显示的mContentView，一共三层。</p>

<p>另外，一个方法就是invokePopup，核心逻辑是调用WindowManager#addView，把mDecorView添加到窗口系统中以显示出来，后面的过程跟上面提到的Dialog的显示过程是一样的。那么PopupWindow又是如何找到Activity的主Window的呢？答案还是在LayoutParams中，方法preparePopup()的参数 是LayoutParams，如前面所述LayoutParams是最终会传递给WindowManagerService的，而这里面就包含了主窗口的信息。而这个LayoutParams对象是通过方法createPopupLayoutParams()得来的，而这个方法的参数 是一个IBinder对象，我们知道这个IBinder对象就标识着一个主窗口。那么PopupWindow的IBinder对象又从何而来呢？是通过View.getWindowToken()得来的，PopupWindow的显示 方法都要提供一个View如showAsDropDown，里面的参数是一个View，而这个View必须 是已显示的View tree中的一个节点，现在应该知道一个窗口有一颗View tree，那么此View tree中的节点肯定 知道自己属于哪个窗口啊，由此便找到了主窗口。</p>

<p>另注意，PopupMenu，也是基于PopupWindow的，只不过弄成了Menu的样子（其实就是一个ListView）。</p>

<h4>可以弄个全屏的PopupWindow吗？</h4>

<p>当然 可以，只需要在构造PopupWindow时传入MATCH_PARENT作为其宽和高就可以了，不过这样做以后后面再选择哪种show方式就不影响了，都是铺满Activity来显示。</p>

<pre><code class="java">     private void showFullscreenPopup() {
        final View content = LayoutInflater.from(this).inflate(R.layout.fullscreen_dialog, null, false);
        PopupWindow popup = new PopupWindow(content, ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
        final View anchor = findViewById(R.id.fullscreen_popup);
        // Key is the width and height passed to constructor, show does not affect anything.
//        popup.showAtLocation(anchor, Gravity.NO_GRAVITY, 0, 0);
        popup.showAsDropDown(anchor, 100, 200);
        content.findViewById(R.id.okay).setOnClickListener(view -&gt; {
            popup.dismiss();
        });
    }
</code></pre>

<h3>Toast又是个啥</h3>

<p>这个大家都非常熟悉了，每天都用到，用以给出一些非常弱的提示。</p>

<p>它其实也是有独立Window的。<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/widget/Toast.java;drc=master;bpv=0;bpt=0;l=348">Toast</a>类本身比较简单，但它也是有一个专门的Server的叫NotificationManager，Toast也是一个客户端，直接做工作的是另一端的服务，这也是为何即使我们的应用退到了后台依然可以show一个Toast。我们用的最多的就是让其显示一段文字，但其实那只是它的一个非常基础的用法。从Toast的方法就可以看出来，它是可以接受一个View的，所以把一个布局的根节点传进去，那这个布局不就可以显示了么？</p>

<h4>Toast可以显示复杂布局吗？</h4>

<p>虽然，通常我们都是使用Toast.makeText方法，但这并意味着它只能显示纯文字，它是可发接收一个View作为其Content的，就通过其setView方法：</p>

<pre><code class="java">     private void showComplexToast() {
        Toast toast = new Toast(this);
        final View dialog = LayoutInflater.from(this).inflate(R.layout.fullscreen_dialog, null, false);
        toast.setDuration(Toast.LENGTH_LONG);
        toast.setView(dialog);
        // This does not work, Toast cannot receive focus, i.e. it won't receive events from WMS
        dialog.findViewById(R.id.okay).setOnClickListener(view -&gt; {
            toast.cancel();
        });
        toast.show();
    }
</code></pre>

<p>不过呢，虽然Toast可以展示更为复杂的布局，但是它是无法接收用户事件，也就是说它是无法处理点击事件的，你想有用户交互的话，是不可以的。</p>

<p>如此，假如你想显示一个类似Toast的，但是可以交互 的，那只能用PopupWindow或者Dialog来模拟，但这又只能是在应用在前台时显示；假如在后台时，又想要有交互行为，那只能用Notification和PendingIntent了。</p>

<h2>综合结论</h2>

<p>说了这么多，希望还没有看晕，总结一下：</p>

<ol>
<li>Window也是有结构 关系的，类似于View一样，像一样tree</li>
<li>每一个Window都有一颗View tree，DecorView是其根节点</li>
<li>ViewRootImpl是用来管理View tree的</li>
<li>Dialog和PopupWindow可以用以显示铺满Activity，甚至全屏的View</li>
<li>Toast也可以展示复杂布局</li>
</ol>


<h3>实战建议</h3>

<p>Activity应该只用于显示一个页面内的主要的，逻辑上都可以触达的布局，比如一上来用户就可见的所有东西，以及常规操作可以触发的（如折叠展开等）。</p>

<p>Activity的View tree要尽可能的小，这样才能保证最好的渲染性能，其余的，很多一次性的，即插即用的，鲜有逻辑才会有触发的，这种布局，要尽可能的独立于Activity的View tree之外，以保证其布局和逻辑上的独立，也更方便维护，更能减少Activity的view tree的体积。因为Dialog和PopupWindow也可以铺满整个Activity，所以，像一些用户引导，新人引导，运营活动，分享，等等一些常规逻辑走不到的页面，都可以考虑用Dialog和PopupWindow来实现。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何玩转安卓源代码]]></title>
    <link href="http://toughcoder.net/blog/2020/03/12/play-with-android-source-code/"/>
    <updated>2020-03-12T23:35:08+08:00</updated>
    <id>http://toughcoder.net/blog/2020/03/12/play-with-android-source-code</id>
    <content type="html"><![CDATA[<p>身为一个安卓开发者，除了学习<a href="https://developer.android.com/">应用开发</a>以外，安卓本身的源码也是必须要玩一玩的，因为安卓系统的源码中还有相当不错的东西值得去学习的。<a href="https://source.android.com/">官方的网站</a>（AOSP)就是专门为安卓源码相关而搭建的，换句话说想玩转安卓的源码，看这个网站就可以了。本篇重点讲一讲，如何玩转安卓源码，从环境搭建，到下载源码，到编译，以及源码的学习和查看。</p>

<p><a href=""><img src="https://qooah.com/wp-content/uploads/2014/06/Android-Open-Source-Project.jpg"></a></p>

<!-- more -->


<h2>好好的为啥折腾源码</h2>

<p>再多废话几句，安卓源码也即安卓操作系统的源码，它是由Google开发的移动智能设备的操作系统，完全开源，市面上的大部分手机都是安卓 手机，详细的可以看<a href="https://source.android.com/">官方网站的介绍</a>。</p>

<p>一般来说，除非是手机厂商或者ROM开发人员，否则作为一个应用开发者来说，跟源码直接打交道的时候比较少，更多是出于学习的目的才需要折腾源码，或者是出于折腾的目的，想搞一个自定义的ROM。因为源码文件非常大，几十个G，下载源码不但耗时而且消耗硬盘空间，编译也非常的慢，编译一个ROM需要二个小时左右。</p>

<h2>基础工具和开发环境搭建</h2>

<p>最基础的工具，常规的开发者应该都满足，这个可以参考<a href="https://source.android.com/setup">官方文档</a>，基本无大碍。像git和Python，开发者的电脑上应该都有，那么基础中的基础就够了。</p>

<h2>repo工具</h2>

<p>需要重点说一下repo工具，它的<a href="https://gerrit.googlesource.com/git-repo/+/refs/heads/master/README.md">官方文档在这里</a>。</p>

<p>因为安卓源码非常庞大，涉及几百个开源项目，如果像普通的项目那样，用一个git的仓库来管理不现实，因为文件特别特别多，如果直接用git，可能一下子就卡死了；除文件特别多以外，虽然有上百个项目，但是不同的项目之间的关系程度并不大，有些项目之间完全没有关系，有些虽然有依赖，但是也没有源方面的直接依赖。所以，其实每个项目都是一个独立的git仓库，单独版本管理，安卓整体的源码就是这些项目的集合，用一个配置文件(manifest.xml)来描述，这个文件里面写着有多少个项目，每个项目的仓库在哪里，以及使用哪个分支。</p>

<p>因为项目复杂，有单独的配置文件，所以也就是需要一个工具，这就是repo工具，它会根据manifest文件，来协助管理源码。repo的原理也不复杂，它就是一个Python脚本，操作git命令。如何使用repo就直接看它的<a href="https://source.android.com/setup/develop/repo">帮助文档</a>就可以了，文档相当详细，这里就不重复了。</p>

<pre><code class="bash">repo --help
repo help init|start|sync|upload
</code></pre>

<h2>如何优雅的下载源码</h2>

<p>可以参考<a href="https://source.android.com/setup/build/downloading">官方文档</a>，就不重复了，输入以下命令，然后漫长等待就可以了：</p>

<pre><code class="bash">mkdir aosp
cd aosp
repo init -u https://android.googlesource.com/platform/manifest
repo sync
</code></pre>

<p>如果网络都正常的情况下，执行上面的命令后，等待就可以了。但是不要too yong，too simple，因为『你懂得』的原因，上面的命令是无法成功的，即使你有梯子，也会很慢，而且源码几十个G，白白浪费这流量干嘛呢？要学会站在巨人肩膀上，不知尔等发现没有，凡是国外一些源码啊，软件库啊，在国内都是有镜像的，以应对一些网络不好的情况，比如像Ubuntu的软件库，像Ruby的源。是的，安卓源码，在国内也是有镜像的，我们直接从镜像网站下载，不但不会有网络连接问题，而且速度非常的快，十分钟就可以下完。</p>

<p>比较好的镜像有<a href="https://mirrors.tuna.tsinghua.edu.cn/help/AOSP/">清化大学的镜像</a>和<a href="https://lug.ustc.edu.cn/wiki/mirrors/help/aosp">中科大的镜像</a>。具体镜像怎么使用，看相应的主页上面就可以，都有介绍的。</p>

<h2>搭建OpenGrok来浏览代码</h2>

<p>如上面所说的安卓源码是非常庞大的，所以浏览源码是相当费劲的，光靠find+grep+vim也是可以，但是效率太低了，源码中的交叉索引，函数调用栈这些东西如果 没有像IDE一样专业的工具来看，还是相当的蛋痛的。当然 啦，也可以用Eclipse或者AndroidStudio或者SourceInsight把某些模块导入去来查看，这也是可以的，但是如果只看某个模块还是可以的。如果多了的话IDE也扛不住。</p>

<p>这里就需要用到专业级别的交叉索引工具了，比如<a href="https://github.com/OpenGrok/OpenGrok">OpenGrok</a>这是一个开源的代码交叉索引引挚，相当强大，特别适合像安卓源码这种超级庞大的项目。折腾起来也不算费劲，要先安装tomcat，可以考<a href="https://mazhuang.org/2016/12/14/rtfsc-with-opengrok/">这篇文章</a>，相当详细。</p>

<p>这里需要说一下可能遇到的坑，因为安卓 源码文件数量相当庞大，这里的意思是不但整体占用硬盘空间大，而且文件数量也非常非常的多，OpenGrok的安装运行时间特别长，因为它要过一遍源码生成交叉引用所需要的cache，综合起来的结果 就是，整体会占用非常大的磁盘空间(可能会上百G)，以及特别特别特别多的文件，你至少需要准备一个500G以上的硬盘，否则会出现一个致命的问题，不是简单的磁盘满了，而是文件系统的inode数满了，简单来理解就是每个文件在内核看来是一个inode，它与文件所占的空间类似，一块硬盘分区的空间是有限的，当达到一定限额后将无法再存储新的文件，文件系统的inode也是如此，当一块硬盘达到80%以后，便无法再添加新文件，整体文件系统将不可操作，对,连删除文件都无法进行，这个时候没有别的办法，只能重新装系统，相当麻烦。</p>

<h2>如何编译</h2>

<p>编译的话，最好选择Ubuntu的LTS版本，如LTS14.04，因为这个是用的比较多的，像Google自己以及很多厂商的编译服务器也都基于Ubuntu LTS来搭建的，这样可以避免很多烦人的问题。之后再安装一些交叉所需要的库就可以了，这个follow<a href="https://source.android.com/setup/build/initializing">官方文档</a>就可以了，比较详细。</p>

<p>具体的编译的话，也是一样的，直接follow<a href="https://source.android.com/setup/build/building">官方文档</a>就好了，人家写的非常详细也相当的专业，没有必要重复。</p>

<h2>如何刷机</h2>

<p>这个都是用fastboot这个工具，可以<a href="https://source.android.com/setup/build/running">参考官方文档</a>不过现在除非是厂商的工程机，否则折腾解锁也比较麻烦，可以到厂商的论坛以及像<a href="https://www.xda-developers.com/">XDA</a>上面多逛逛。</p>

<p>不过，如果有亲儿子的话，还是比较好折腾的，官方文档上面就有相应的方法，以及一些带有版权的BSP依赖包，可以刷起来玩一玩。</p>

<h2>优雅的读代码</h2>

<p>如果不想编译自定义的ROM，就是想看看源码的话，其实没有必要这么费劲的折腾，把代码下载下来不但费时费力，慢，而且还不是最新的代码。当然是有有更好的方式，有好多在线的源码查看工具。</p>

<ul>
<li><a href="https://android.googlesource.com/">官方source</a>. 这个是官方的版本管理的在线浏览，不是很方便，不够强大（比如没有交叉索引），而且速度不快，还需要翻墙</li>
<li><a href="http://androidxref.com/">androidXef</a>. 这个基于OpenGrok搭建的，在线浏览安桌源代码的在线工具，但是貌似2018年以后就不更新了，上面最新的版本是Android Pie。速度也不算快，但好在能查看好多个版本。</li>
<li><a href="https://cs.android.com/">官方code search</a>  这个是2019年Google新推出的查阅安卓源码的在线工具，速度非常快，貌似不是基于OpenGrok，相当好用，推荐直接看这个。</li>
</ul>


<h2>拓展资源</h2>

<p>除了安卓源代码以外，还有一坨资源可以看，像芯片厂商也会发布<a href="https://source.codeaurora.org/">相当多的源码</a>，比如像高通就有安卓源码相在的一坨源码，高通芯片的手机基本上也都有基于这些代码进行二次开发，所以也非常值得一看。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何跳过Nexus 7二代的开机设置]]></title>
    <link href="http://toughcoder.net/blog/2015/08/15/skip-setup-wizard-for-nexus-7/"/>
    <updated>2015-08-15T16:47:55+08:00</updated>
    <id>http://toughcoder.net/blog/2015/08/15/skip-setup-wizard-for-nexus-7</id>
    <content type="html"><![CDATA[<h2>事情是酱紫的</h2>

<p>Neuxs 7二代，2013年款，14年某宝上面买的，为了体验最新的Android版本，以及奶七的高性价比，于是就买了一个，之后也一直用着比较爽，电影，游戏，看书，看代码，体验原生Android，体验GMS，都是相当不错，直到今年4月份，突然有一天，触摸屏失灵了，在重启了之后，触摸能用了，但是反应不灵，有时要点好几次才有反应，有时则是好的。当时错误以为是装的软件太多了，反应慢，于是干了一件蠢事，做了Factory reset，重启后，一直卡在开机设置页面，网络连接始终不行，无法完成开机设置。</p>

<p><a href=""><img src="https://img.alicdn.com/imgextra/i2/715978679/TB2Ao60mVXXXXbgXpXXXXXXXXXX_!!715978679.jpg" width="480" height="320"></a></p>

<!-- more -->


<p>想尽各种办法，使用代理，等，最终还是没用。刷了各种版本的Image都一个鸟样，有人说多试几次，就可以跳过，但是始终无法跳过。后来有人说可能Google那个服务可能不在了，所以即使翻了墙，也还是无法连接上。无奈刷了MIUI，但是版本只是4.4，也失去了奶七的特色。想着刷其他ROM的时候，有了新的发现。</p>

<p>最后发现了<a href="http://forum.xda-developers.com/showthread.php?t=1909602">这篇神贴</a>，讲述如何跳过Nexus 7的开机设置，虽然是2012看款奶七，也就是Nexus 7一代，但是仍然值得一试。</p>

<p>它的思路就是系统相关的特性都会存在系统的配置文件（/system/build.prop）之中，如果以ROOT方式连接ADB，那么我们就能修改此文件。也就能跳过开机设置的网络连接，甚至跳过开机设置。而高级的recovery都支持ADB，且是以ROOT身份，所以就有了如下的方法：</p>

<h2>具体方法</h2>

<p><em>注意</em>: 这是在Ubuntu下面进行，Mac平台的操作是一样的。对于Windows也差不多，只是需要安装手机的驱动程序，驱动程序可以到Goolge官方去下载。</p>

<p><em>注意</em>: 前提条件是要有ADB和fastboot命令，安装了SDK后就都有了</p>

<ol>
<li><p>先解锁bootloader</p>

<p>这个对于奶七还是很简单的，先重启到fastboot模式，关机，按Power+Volumn down来启动，就会启动到fastboot模式，这个模式可以做很多事情。</p>

<p><em>注意</em>: 对于Windows系统，需要安装手机的驱动程序，不会的可自行Google</p>

<p><em>fastboot oem unlock</em> 就可以解锁bootloader</p></li>
<li>下载<a href="http://www.clockworkmod.com/">CWM recovery</a>或者<a href="https://twrp.me/devices/asusnexus72013wifi.html">TWRP</a></li>
<li><p>安装recovery</p>

<p>fastboot flash recovery &lt;<em>clockworkmod-recovery.img</em>&gt;</p></li>
<li><p>更改配置</p>

<p>安装完recovery后，重启到recovery模式，在fastboot模式下，用Volumn up/down来选择recovery，按Power选中，就可以重启到recovery mode</p>

<p>连接到电脑，就可以执行ADB命令了，需要注意的是，要先mount一下/system分区，recovery会有一个菜单叫mount storage，进去，选择mount /system，如果不mount /system，你会找不到build.prop文件，因为所在的shell及文件系统是recovery的，并不安卓系统的。</p>

<p>adb remount /system/</p>

<p>之后adb shell cat /system/build.prop就能看到配置信息了</p>

<p>adb shell sed -i &rsquo;s/ro.setupwizard.network_required=true/ro.setupwizard.network_required=false/g&#8217; /system/build.prop</p>

<p><em>注意</em>: 上面是针对最新5.1.1 (LMY48I)的image。对于早期版本，比如4.4 （JSS15Q），配置项是ro.setupwizard.wifi_required，但是改此项并不管用，而是要跳过开机设置才管用也即添加ro.setupwizard.mode=DISABLED到/system/build.prop</p></li>
<li><p>重启</p>

<p>adb命令重启木有用，还是用recovery上面的菜单来重启。因为这个ADB是recovery提供的，你会发现里面有很多安卓本身没有的比如像find像sed，因为这个Shell是由recovery里的busybox提供的，安卓系统还没有加载，自然reboot木鸟用。</p></li>
</ol>


<h2>总结与评论</h2>

<p>首先说Google酱紫的做法还是蛮恶心的，完全不考虑我大天朝的人怎么办！连接网络可以有，但至少可以跳过或者忽略啊！不能强制用户，网上也有其他人有此报怨（米国人），因为买奶七的人不一都有网络（那个报怨的米国人就是，大意是给他老爹买的，老爹那里木WiFi，所以很郁闷，无法激活）。</p>

<p>其次，就是解决问题的思路，惭愧虽搞了安卓几年，但是没想出通过设置来跳过开机设置这等高招。XDA论坛还是高手云集的地方，ROOT，recovery和各种Hack基本上都源自XDA论坛。以后遇到这种完全无思路 的问题还是要多救助网络和社区，否则自己搞鼓一辈子，可能也想不到好方案。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在安卓设备与PC之间传递文件]]></title>
    <link href="http://toughcoder.net/blog/2015/04/21/transfer-files-between-android-phone-and-pc/"/>
    <updated>2015-04-21T23:01:11+08:00</updated>
    <id>http://toughcoder.net/blog/2015/04/21/transfer-files-between-android-phone-and-pc</id>
    <content type="html"><![CDATA[<p>现在智能手机（这里的手机是广义的，包括手机，平板电脑等移动智能设备）在生活中的角色越来越重要，人们使用手机的时间远远大于电脑，由于手机的便携性，所以很多时候我们会需要用手机来携带数据或文件，或者用于娱乐。比如乘坐火车或者汽车时，用手机来看个电影还是相当不错的，现在的手机屏幕也够大，存储空间充足，完全不成问题。虽然移动端也有足够多的客户端可以下载视频等，但是远没有PC资源多，也没有PC下载方便。但是下载后如何把视频弄到手机上面，以及当需要把其他一些文件弄到手机上面时，也是一个技术问题，今天就来探讨一下。</p>

<p><a href=""><img src="https://img.alicdn.com/imgextra/i1/715978679/TB2S3f6mVXXXXX2XpXXXXXXXXXX_!!715978679.jpg" title="auto auto" ></a></p>

<!-- more -->


<h2>用第三方的软件</h2>

<p>比如说QQ之类的，它都有一个功能就是在不同设备之间传递文件特别是PC端与移动端，只要在PC上面和移动设备上面都安装了QQ较新版本的客户端，就可以用其传递文件。孤没有亲测，但估计效果还是可以的，但是对于像高清电影这样的G级别的大文件不知道效果如何了。</p>

<h3>优点</h3>

<p>  使用简单方便，不需要任何技术基础或折腾技术相关的东西</p>

<h2>直接把手机当成U盘（2.3及以下版本适用）</h2>

<p>以前的安卓版本当手机连接上电脑以后，是直接可以把连接的存储方式设置成为大容量存储，这样手机就直接相当于一个U盘。具体的操作方法就是手机连上电脑后，通知栏会有一个通知是存储相关的，点击后就可以把手机挂载成为一个U盘，再次点击之后会关闭。绝大多数手机只有当插入有SD扩展卡时才能如此做。</p>

<h3>优点</h3>

<p>   使用简单方便</p>

<h3>缺点</h3>

<p>   Android 2.3及以下版本才可以</p>

<h2>使用ADB命令</h2>

<p>我相信大多数Android用户对于adb命令并不会陌生，即使没有开发经验或者不懂技术，如何折腾过刷机或者Root的同学应该至少对adb命令有一个印象。对于有开发经验的同学就更不用说了，如果连adb都不知道那你的安卓开发肯定是体育老师教的。
ADB的使用是比较折腾的，非技术的同学可能会有些困难：</p>

<ol>
<li>下载Android SDK</li>
<li>对于Windows要安装设备的驱动，Linux和Mac则不用</li>
<li>对于Linux要配置udev权限，可参考官方文档</li>
<li>手机要激活USB调试：设置->开发者选项->USB调试</li>
</ol>


<h3>优点</h3>

<p>   其实没什么优点，对于开发者同学们来说这只是没有额外的事情折腾，传递一些小文件来说ADB命令还是非常方便的</p>

<h3>缺点</h3>

<ol>
<li>非常的折腾，特别是针对不是安卓开发者同学来说</li>
<li>对于百兆以上的大文件 来说，速度非常慢</li>
<li>需要对手机的存储机制在所了解，因为adb push是需要指定手机上目标文件夹</li>
</ol>


<h2>使用MTP协议传输</h2>

<p>这是本文的重点。
Android 4.0及以上的版本当连接到PC时，通知栏也会有一个与存储机制相关的通知可以选择是以相机方式还是MTP方式挂载手机的存储：如果是相机模式，那么可以直接访问手机里的相册；MTP则用于传递文件。
<a href="http://en.wikipedia.org/wiki/Media_Transfer_Protocol">MTP</a>是媒体传输协议(Media Transfer Protocol)的简称，它是一种在设备之间传输媒体文件的协议，这是一种标准的公开的协议，理论上讲能与任何支持MTP协议的设备进行传输。当安卓设备连接到电脑时，选择MTP方式后，即可以使用MTP协议来传送文件。</p>

<h3>Windows和Mac</h3>

<p>对于Windows和Mac，Google有专门的客户端，可以到<a href="http://www.android.com/filetransfer/index.html">官网</a>了解详情，使用不难，安装客户端，连接手机选择MTP模式即可。</p>

<h3>Linux</h3>

<p>Linux（这里以Ubuntu为例，其他发行版本类似）稍微折腾一点，因为没有官方的客户端，所以需要安装第三方的工具：</p>

<ol>
<li>安装工具：sudo apt-get install mtp-tools mtpfs</li>
<li><p>配置</p>

<pre><code>  sudo service udev start
    sudo mkdir /media/nexus
    sudo chmod a+xrw /media/nexus
    sudo adduser $USER fuse
</code></pre>

<p>  sudo vim /etc/fuse.conf并把最后一行&#8217;user_allow_other&#8217;打开注释（删除行首的‘#’）</p></li>
<li><p>创建命令别名
  vim ~/.bashrc在其中添加：</p>

<pre><code>   alias android-connect='mtpfs -o allow_other /media/nexus'
   alias android-disconnect='fusermount -u /media/nexus'
</code></pre></li>
<li><p>重启电脑</p></li>
<li>连接手机，运行android-connect后，/media/nexus/即是手机的存储，可以自由的传递文件了</li>
</ol>


<p>使用MTP方式对于大文件或者多文件的文件夹都是毫无压力的，速度略逊于U盘。</p>

<h2>参考</h2>

<ul>
<li> <a href="http://askubuntu.com/questions/207569/how-do-i-connect-a-nexus-7-to-transfer-files">How do I connect a Nexus 7 to transfer files?</a></li>
<li> <a href="http://en.wikipedia.org/wiki/Media_Transfer_Protocol">Media Transfter Protocol</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[下载并编译CyanogenMod源代码]]></title>
    <link href="http://toughcoder.net/blog/2014/11/01/play-with-cyanogenmod/"/>
    <updated>2014-11-01T00:40:55+08:00</updated>
    <id>http://toughcoder.net/blog/2014/11/01/play-with-cyanogenmod</id>
    <content type="html"><![CDATA[<p>CyanogenMod是除了Android官方源码之外的最受欢迎的Android的一个分支，它是干净，几乎接近原生Android，且方便为设备进行定制，在编译和制作ROM上面较原生有很大改进，是开发者学习源码和自己制作ROM的最佳选择。</p>

<p>官方网站在<a href="http://www.cyanogenmod.com/">这里</a>.</p>

<p>repo在<a href="https://github.com/CyanogenMod/android/">这里</a>.</p>

<p>环境说明，本次所有操作都是在Ubuntu 12.04(Precise)里面进行的。另外需要说明的是，我的环境访问谷歌和谷歌相关的服务都是没有问题的，关于如何访问谷歌可以参考这位牛人写的<a href="http://strongme.github.io/2014-09-01-Add-Hosts-For-Google.html">博客</a></p>

<p><a href=""><img src="https://img.alicdn.com/imgextra/i2/715978679/TB25xAemVXXXXbKXXXXXXXXXXXX_!!715978679.jpg"></a></p>

<!-- more -->


<h2>下载源码</h2>

<p>下载源代码是第一步，这跟很多教程是不太一样的。因为我觉得，你源码都没有拿到，还搞个毛线啊！有了源码即使无法编译，也至少还可以看源码的，否则安装了toolschain又有啥用。
其实，源码的下载按道理讲是很简单的事情的，但是很多事情到了我大天朝就会变得很复杂，甚至搞不定，特别要从Google的服务器上搞点东西。因为CyanogenMode的源码是在<a href="http://github.com/">Github</a>上面，所以源码的下载还是很方便的，但是对于一些必要的工具，因为是要从Google取，所以就很蛋疼。</p>

<h3>下载repo</h3>

<p>因为Android的源码非常多，巨大的源码不可能放在一个git的repo里面，是每个模块都有自己单独的git仓库，但是为了成功编译，又需要所有的源码，但是不可能手动的一个一个的去clone啊，因此就有了repo这个工具，它就是一个Python实现的脚本，先从Server读出来一个所有仓库的配置信息XML文件，然后按这个文件一个一个的把git仓库clone下来。
这个文件是Android官方提供的，CyanogenMod也只是使用了它。所以它还要从官方来取。它就是一个脚本，所以谈不到安装，下载下来，改变文件属性就可以运行了。关键是下载啊！</p>

<pre><code class="bash">curl https://storage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo
chmod a+x !$
</code></pre>

<p>因为Google的连接不稳定，甚至是无法连接，所以下载这个脚本就要八仙过海，各显神通了，为了方便后来的兄弟们，可以从<a href="http://pan.baidu.com/s/1mgytKYO">这里</a>下载。别高兴太早，这才刚开始。后面还会有一大把问题呢。</p>

<h3>初始化仓库和分支信息</h3>

<pre><code class="bash">mkdir -p /work/cyanogenmod
cd /work/cyanogenmod
repo init -u git://github.com/CyanogenMod/android.git -b stable/cm-11.0
</code></pre>

<p>注意，为了方便，最好把你的Github帐户配置好ssh，以方便直接以git方式clone。另外，<a href="http://www.cyanogenmode.com/">CyanogenMod</a>的仓库在<a href="http://github.com/CyanogenMod/android">这里</a>，你会发现，这里只有二个配置文件。如前面所说，这里只是列出其他仓库的配置文件，以文件抓取所有的源码。</p>

<p>另外，-b后面跟的是你要抓取的分支, cm-11.0是最新的分支，对应Android 4.4。查看其他的分支可以看<a href="https://github.com/CyanogenMod/android/branches">这里</a>。</p>

<p>如果没有任何错误，那么要恭喜你，但是通常都会遇到错误：</p>

<blockquote><p>repo init -u git://github.com/CyanogenMod/android.git -b stable/cm-11.0</p>

<p>gpg: key 920F5C65: &ldquo;Repo Maintainer <a href="&#109;&#97;&#x69;&#108;&#x74;&#111;&#58;&#x72;&#101;&#x70;&#111;&#x40;&#x61;&#x6e;&#x64;&#114;&#x6f;&#105;&#x64;&#x2e;&#x6b;&#x65;&#x72;&#110;&#x65;&#x6c;&#x2e;&#111;&#114;&#103;">&#x72;&#x65;&#x70;&#x6f;&#x40;&#97;&#x6e;&#x64;&#x72;&#x6f;&#x69;&#x64;&#x2e;&#107;&#101;&#114;&#110;&#x65;&#x6c;&#x2e;&#x6f;&#114;&#103;</a>&rdquo; not changed</p>

<p>gpg: key 692B382C: public key &ldquo;Conley Owens <a href="&#109;&#97;&#105;&#x6c;&#116;&#111;&#58;&#99;&#99;&#x6f;&#x33;&#x40;&#97;&#110;&#100;&#114;&#x6f;&#x69;&#x64;&#x2e;&#99;&#x6f;&#x6d;">&#x63;&#x63;&#x6f;&#51;&#64;&#97;&#110;&#x64;&#114;&#111;&#x69;&#100;&#46;&#x63;&#111;&#x6d;</a>&rdquo; imported</p>

<p>gpg: Total number processed: 2</p>

<p>gpg:               imported: 1  (RSA: 1)</p>

<p>gpg:              unchanged: 1</p>

<p>fatal: Cannot get <a href="https://gerrit.googlesource.com/git-repo/clone.bundle">https://gerrit.googlesource.com/git-repo/clone.bundle</a></p>

<p>fatal: error [Errno 101] Network is unreachable</p></blockquote>

<p>第一眼看上去貌似是网络连接问题，搜了一下，网站有各种版本，<a href="http://www.cnblogs.com/javawebsoa/p/3235315.html">有的</a>说要unset代理，变量，<a href="http://blog.csdn.net/jianguo_liao19840726/article/details/9774357">有的</a>说要登录<a href="https://android.googlesource.com/new-password">androidsource</a>然后把登录信息加入到.netrc中。但是这些对我的情况都不管用；还有<a href="http://blog.sina.com.cn/s/blog_a9c55dfd0101jcz6.html">这篇</a>。我的情况与最后一个类似，多试几次，然后就init成功了。看来真的是网络抽风。</p>

<h3>下载源码</h3>

<p>然后就可以下载源码了：</p>

<pre><code class="bash">repo sync
</code></pre>

<p>因为是在github上面，而github一向是比较给力的，所以只要等待就好了，一般都会成功下载的。这跟官方Android就不同了。记得以前下载官方源码时，经常出现网络问题，下载了几个晚上才搞定。</p>

<h2>安装编译所需要的toolschain</h2>

<p>CyanogenMod本质上也是Android，所以这个可以参考<a href="http://source.android.com/source/initializing.html">官方文档</a>，就可以了。</p>

<p>几个关键的点是：</p>

<ul>
<li>使用Oracle的Java SDK(JDK)，至于版本，最新的Android可以用Java 7，所以就装个Java 6吧，2.3到4.4都是使用Java 6</li>
<li>安装需要的软件包</li>
<li>配置ccache</li>
</ul>


<h2>编译</h2>

<h3>编译模拟器</h3>

<p>模拟器在学习和研究代码的时候还是比较有用的，如果你没有一个专门用作测试的手机的话。</p>

<pre><code class="bash">. build/envsetup.sh
lunch
</code></pre>

<p>这时会出现一个菜单，仔细寻找cm_goldfish-eng，输入前面的数字，这会对模拟器进行一些配置。这里有一个坑，不要用source build/envsetup.sh，而要用上面的命令，否则会没有goldfish相关的配置项出现在lunch的菜单里。</p>

<p>然后，再到vendor/cm/里面，执行./get-prebuilts，这会把一些需要的东西拉下来。然后就可以正式的编译了：</p>

<pre><code class="bash">make -j8
</code></pre>

<p>之后是漫长的等待。</p>

<h3>运行模拟器</h3>

<pre><code class="bash">emulator -system ./out/target/product/generic/system.img -data ./out/target/product/generic/userdata.img -ramdisk ./out/target/product/generic/ramdisk.img
</code></pre>

<p>还可以指定skin，skin可以到SDK里面去找。如果多次使用可以把上面的命令保存成Bash脚本。但是这个模拟器会奇慢无比。</p>

<h2>参考资料</h2>

<ul>
<li><a href="http://hualang.iteye.com/blog/1139269">Android ROM研究&mdash;CyanogenMod源代码下载及编译</a></li>
<li><a href="http://sunzeduo.blog.51cto.com/2758509/1538557">基于 cm-11 源码编译模拟器</a></li>
<li><a href="http://www.yinqisen.cn/blog-321.html">CyanogenMod 11.0模拟器goldfish的编译方法及下载地址</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
