<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | 稀有猿诉]]></title>
  <link href="http://toughcoder.net/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://toughcoder.net/"/>
  <updated>2023-12-12T23:05:47+08:00</updated>
  <id>http://toughcoder.net/</id>
  <author>
    <name><![CDATA[Alex Hilton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android ADB Made Easy]]></title>
    <link href="http://toughcoder.net/blog/2022/04/14/android-adb-made-easy/"/>
    <updated>2022-04-14T22:35:57+08:00</updated>
    <id>http://toughcoder.net/blog/2022/04/14/android-adb-made-easy</id>
    <content type="html"><![CDATA[<h2>Android ADB 命令大全</h2>

<p>ADB意即Android Debug Bridge是安卓开发（不止是应用开发）最为常用的工具，这里将总结一下该命令的使用。</p>

<p><a href=""><img src="https://tse1-mm.cn.bing.net/th/id/R-C.104b94c261017f8ecfad7fc7fcb9015e?rik=vQKR84tQzptEUA&amp;riu=http%3a%2f%2fdriverslab.ru%2fimages%2fpost%2fandroid_adb.png&amp;ehk=D9ws5sG7Gj7E%2bpfEQsJTjHS6MIem4%2f0P9z69aI6R7GA%3d&amp;risl=&amp;pid=ImgRaw&amp;r=0&amp;sres=1&amp;sresct=1" title="auto auto" ></a></p>

<!-- more -->


<h2>比较有用的常规命令</h2>

<table>
<thead>
<tr>
<th> Commands </th>
<th> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Usage&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </th>
<th> Descriptions </th>
</tr>
</thead>
<tbody>
<tr>
<td> adb wait-for-devices </td>
<td> </td>
<td> 等待设备，只有设备成功连接后才停止等待 </td>
</tr>
<tr>
<td> adb devices </td>
<td> </td>
<td> 列出当前所有已连接的设备 </td>
</tr>
<tr>
<td> adb logcat -c </td>
<td> </td>
<td> 清除logcat的buffer </td>
</tr>
<tr>
<td> adb install <apk files> </td>
<td> -r reinstall<br/>-d downgrade </td>
<td> 安装一个应用程序（apk）</td>
</tr>
<tr>
<td> adb install-multiple <apk files> </td>
<td>  -r reinstall<br/>-d downgrade </td>
<td> 安装app bundle，也是一个应用程序，只不过以split的方式打成了多个apk文件 </td>
</tr>
</tbody>
</table>


<h2>参考资料</h2>

<ul>
<li><a href="https://adbshell.com/commands">ADB Shell</a></li>
<li><a href="https://www.cnblogs.com/sjjg/p/6028580.html">adb shell 大全</a></li>
<li><a href="https://developer.android.com/studio/command-line/adb">官方教程 Android Debug Bridge</a></li>
<li><a href="https://gist.github.com/Pulimet/5013acf2cd5b28e55036c82c91bd56d8">Adb useful commands list</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何玩转安卓源代码]]></title>
    <link href="http://toughcoder.net/blog/2020/03/12/play-with-android-source-code/"/>
    <updated>2020-03-12T23:35:08+08:00</updated>
    <id>http://toughcoder.net/blog/2020/03/12/play-with-android-source-code</id>
    <content type="html"><![CDATA[<p>身为一个安卓开发者，除了学习<a href="https://developer.android.com/">应用开发</a>以外，安卓本身的源码也是必须要玩一玩的，因为安卓系统的源码中还有相当不错的东西值得去学习的。<a href="https://source.android.com/">官方的网站</a>（AOSP)就是专门为安卓源码相关而搭建的，换句话说想玩转安卓的源码，看这个网站就可以了。本篇重点讲一讲，如何玩转安卓源码，从环境搭建，到下载源码，到编译，以及源码的学习和查看。</p>

<p><a href=""><img src="https://qooah.com/wp-content/uploads/2014/06/Android-Open-Source-Project.jpg"></a></p>

<!-- more -->


<h2>好好的为啥折腾源码</h2>

<p>再多废话几句，安卓源码也即安卓操作系统的源码，它是由Google开发的移动智能设备的操作系统，完全开源，市面上的大部分手机都是安卓 手机，详细的可以看<a href="https://source.android.com/">官方网站的介绍</a>。</p>

<p>一般来说，除非是手机厂商或者ROM开发人员，否则作为一个应用开发者来说，跟源码直接打交道的时候比较少，更多是出于学习的目的才需要折腾源码，或者是出于折腾的目的，想搞一个自定义的ROM。因为源码文件非常大，几十个G，下载源码不但耗时而且消耗硬盘空间，编译也非常的慢，编译一个ROM需要二个小时左右。</p>

<h2>基础工具和开发环境搭建</h2>

<p>最基础的工具，常规的开发者应该都满足，这个可以参考<a href="https://source.android.com/setup">官方文档</a>，基本无大碍。像git和Python，开发者的电脑上应该都有，那么基础中的基础就够了。</p>

<h2>repo工具</h2>

<p>需要重点说一下repo工具，它的<a href="https://gerrit.googlesource.com/git-repo/+/refs/heads/master/README.md">官方文档在这里</a>。</p>

<p>因为安卓源码非常庞大，涉及几百个开源项目，如果像普通的项目那样，用一个git的仓库来管理不现实，因为文件特别特别多，如果直接用git，可能一下子就卡死了；除文件特别多以外，虽然有上百个项目，但是不同的项目之间的关系程度并不大，有些项目之间完全没有关系，有些虽然有依赖，但是也没有源方面的直接依赖。所以，其实每个项目都是一个独立的git仓库，单独版本管理，安卓整体的源码就是这些项目的集合，用一个配置文件(manifest.xml)来描述，这个文件里面写着有多少个项目，每个项目的仓库在哪里，以及使用哪个分支。</p>

<p>因为项目复杂，有单独的配置文件，所以也就是需要一个工具，这就是repo工具，它会根据manifest文件，来协助管理源码。repo的原理也不复杂，它就是一个Python脚本，操作git命令。如何使用repo就直接看它的<a href="https://source.android.com/setup/develop/repo">帮助文档</a>就可以了，文档相当详细，这里就不重复了。</p>

<pre><code class="bash">repo --help
repo help init|start|sync|upload
</code></pre>

<h2>如何优雅的下载源码</h2>

<p>可以参考<a href="https://source.android.com/setup/build/downloading">官方文档</a>，就不重复了，输入以下命令，然后漫长等待就可以了：</p>

<pre><code class="bash">mkdir aosp
cd aosp
repo init -u https://android.googlesource.com/platform/manifest
repo sync
</code></pre>

<p>如果网络都正常的情况下，执行上面的命令后，等待就可以了。但是不要too yong，too simple，因为『你懂得』的原因，上面的命令是无法成功的，即使你有梯子，也会很慢，而且源码几十个G，白白浪费这流量干嘛呢？要学会站在巨人肩膀上，不知尔等发现没有，凡是国外一些源码啊，软件库啊，在国内都是有镜像的，以应对一些网络不好的情况，比如像Ubuntu的软件库，像Ruby的源。是的，安卓源码，在国内也是有镜像的，我们直接从镜像网站下载，不但不会有网络连接问题，而且速度非常的快，十分钟就可以下完。</p>

<p>比较好的镜像有<a href="https://mirrors.tuna.tsinghua.edu.cn/help/AOSP/">清化大学的镜像</a>和<a href="https://lug.ustc.edu.cn/wiki/mirrors/help/aosp">中科大的镜像</a>。具体镜像怎么使用，看相应的主页上面就可以，都有介绍的。</p>

<h2>搭建OpenGrok来浏览代码</h2>

<p>如上面所说的安卓源码是非常庞大的，所以浏览源码是相当费劲的，光靠find+grep+vim也是可以，但是效率太低了，源码中的交叉索引，函数调用栈这些东西如果 没有像IDE一样专业的工具来看，还是相当的蛋痛的。当然 啦，也可以用Eclipse或者AndroidStudio或者SourceInsight把某些模块导入去来查看，这也是可以的，但是如果只看某个模块还是可以的。如果多了的话IDE也扛不住。</p>

<p>这里就需要用到专业级别的交叉索引工具了，比如<a href="https://github.com/OpenGrok/OpenGrok">OpenGrok</a>这是一个开源的代码交叉索引引挚，相当强大，特别适合像安卓源码这种超级庞大的项目。折腾起来也不算费劲，要先安装tomcat，可以考<a href="https://mazhuang.org/2016/12/14/rtfsc-with-opengrok/">这篇文章</a>，相当详细。</p>

<p>这里需要说一下可能遇到的坑，因为安卓 源码文件数量相当庞大，这里的意思是不但整体占用硬盘空间大，而且文件数量也非常非常的多，OpenGrok的安装运行时间特别长，因为它要过一遍源码生成交叉引用所需要的cache，综合起来的结果 就是，整体会占用非常大的磁盘空间(可能会上百G)，以及特别特别特别多的文件，你至少需要准备一个500G以上的硬盘，否则会出现一个致命的问题，不是简单的磁盘满了，而是文件系统的inode数满了，简单来理解就是每个文件在内核看来是一个inode，它与文件所占的空间类似，一块硬盘分区的空间是有限的，当达到一定限额后将无法再存储新的文件，文件系统的inode也是如此，当一块硬盘达到80%以后，便无法再添加新文件，整体文件系统将不可操作，对,连删除文件都无法进行，这个时候没有别的办法，只能重新装系统，相当麻烦。</p>

<h2>如何编译</h2>

<p>编译的话，最好选择Ubuntu的LTS版本，如LTS14.04，因为这个是用的比较多的，像Google自己以及很多厂商的编译服务器也都基于Ubuntu LTS来搭建的，这样可以避免很多烦人的问题。之后再安装一些交叉所需要的库就可以了，这个follow<a href="https://source.android.com/setup/build/initializing">官方文档</a>就可以了，比较详细。</p>

<p>具体的编译的话，也是一样的，直接follow<a href="https://source.android.com/setup/build/building">官方文档</a>就好了，人家写的非常详细也相当的专业，没有必要重复。</p>

<h2>如何刷机</h2>

<p>这个都是用fastboot这个工具，可以<a href="https://source.android.com/setup/build/running">参考官方文档</a>不过现在除非是厂商的工程机，否则折腾解锁也比较麻烦，可以到厂商的论坛以及像<a href="https://www.xda-developers.com/">XDA</a>上面多逛逛。</p>

<p>不过，如果有亲儿子的话，还是比较好折腾的，官方文档上面就有相应的方法，以及一些带有版权的BSP依赖包，可以刷起来玩一玩。</p>

<h2>优雅的读代码</h2>

<p>如果不想编译自定义的ROM，就是想看看源码的话，其实没有必要这么费劲的折腾，把代码下载下来不但费时费力，慢，而且还不是最新的代码。当然是有有更好的方式，有好多在线的源码查看工具。</p>

<ul>
<li><a href="https://android.googlesource.com/">官方source</a>. 这个是官方的版本管理的在线浏览，不是很方便，不够强大（比如没有交叉索引），而且速度不快，还需要翻墙</li>
<li><a href="http://androidxref.com/">androidXef</a>. 这个基于OpenGrok搭建的，在线浏览安桌源代码的在线工具，但是貌似2018年以后就不更新了，上面最新的版本是Android Pie。速度也不算快，但好在能查看好多个版本。</li>
<li><a href="https://cs.android.com/">官方code search</a>  这个是2019年Google新推出的查阅安卓源码的在线工具，速度非常快，貌似不是基于OpenGrok，相当好用，推荐直接看这个。</li>
</ul>


<h2>拓展资源</h2>

<p>除了安卓源代码以外，还有一坨资源可以看，像芯片厂商也会发布<a href="https://source.codeaurora.org/">相当多的源码</a>，比如像高通就有安卓源码相在的一坨源码，高通芯片的手机基本上也都有基于这些代码进行二次开发，所以也非常值得一看。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何跳过Nexus 7二代的开机设置]]></title>
    <link href="http://toughcoder.net/blog/2015/08/15/skip-setup-wizard-for-nexus-7/"/>
    <updated>2015-08-15T16:47:55+08:00</updated>
    <id>http://toughcoder.net/blog/2015/08/15/skip-setup-wizard-for-nexus-7</id>
    <content type="html"><![CDATA[<h2>事情是酱紫的</h2>

<p>Neuxs 7二代，2013年款，14年某宝上面买的，为了体验最新的Android版本，以及奶七的高性价比，于是就买了一个，之后也一直用着比较爽，电影，游戏，看书，看代码，体验原生Android，体验GMS，都是相当不错，直到今年4月份，突然有一天，触摸屏失灵了，在重启了之后，触摸能用了，但是反应不灵，有时要点好几次才有反应，有时则是好的。当时错误以为是装的软件太多了，反应慢，于是干了一件蠢事，做了Factory reset，重启后，一直卡在开机设置页面，网络连接始终不行，无法完成开机设置。</p>

<p><a href=""><img src="https://img.alicdn.com/imgextra/i2/715978679/TB2Ao60mVXXXXbgXpXXXXXXXXXX_!!715978679.jpg" width="480" height="320"></a></p>

<!-- more -->


<p>想尽各种办法，使用代理，等，最终还是没用。刷了各种版本的Image都一个鸟样，有人说多试几次，就可以跳过，但是始终无法跳过。后来有人说可能Google那个服务可能不在了，所以即使翻了墙，也还是无法连接上。无奈刷了MIUI，但是版本只是4.4，也失去了奶七的特色。想着刷其他ROM的时候，有了新的发现。</p>

<p>最后发现了<a href="http://forum.xda-developers.com/showthread.php?t=1909602">这篇神贴</a>，讲述如何跳过Nexus 7的开机设置，虽然是2012看款奶七，也就是Nexus 7一代，但是仍然值得一试。</p>

<p>它的思路就是系统相关的特性都会存在系统的配置文件（/system/build.prop）之中，如果以ROOT方式连接ADB，那么我们就能修改此文件。也就能跳过开机设置的网络连接，甚至跳过开机设置。而高级的recovery都支持ADB，且是以ROOT身份，所以就有了如下的方法：</p>

<h2>具体方法</h2>

<p><em>注意</em>: 这是在Ubuntu下面进行，Mac平台的操作是一样的。对于Windows也差不多，只是需要安装手机的驱动程序，驱动程序可以到Goolge官方去下载。</p>

<p><em>注意</em>: 前提条件是要有ADB和fastboot命令，安装了SDK后就都有了</p>

<ol>
<li><p>先解锁bootloader</p>

<p>这个对于奶七还是很简单的，先重启到fastboot模式，关机，按Power+Volumn down来启动，就会启动到fastboot模式，这个模式可以做很多事情。</p>

<p><em>注意</em>: 对于Windows系统，需要安装手机的驱动程序，不会的可自行Google</p>

<p><em>fastboot oem unlock</em> 就可以解锁bootloader</p></li>
<li>下载<a href="http://www.clockworkmod.com/">CWM recovery</a>或者<a href="https://twrp.me/devices/asusnexus72013wifi.html">TWRP</a></li>
<li><p>安装recovery</p>

<p>fastboot flash recovery &lt;<em>clockworkmod-recovery.img</em>&gt;</p></li>
<li><p>更改配置</p>

<p>安装完recovery后，重启到recovery模式，在fastboot模式下，用Volumn up/down来选择recovery，按Power选中，就可以重启到recovery mode</p>

<p>连接到电脑，就可以执行ADB命令了，需要注意的是，要先mount一下/system分区，recovery会有一个菜单叫mount storage，进去，选择mount /system，如果不mount /system，你会找不到build.prop文件，因为所在的shell及文件系统是recovery的，并不安卓系统的。</p>

<p>adb remount /system/</p>

<p>之后adb shell cat /system/build.prop就能看到配置信息了</p>

<p>adb shell sed -i &rsquo;s/ro.setupwizard.network_required=true/ro.setupwizard.network_required=false/g&#8217; /system/build.prop</p>

<p><em>注意</em>: 上面是针对最新5.1.1 (LMY48I)的image。对于早期版本，比如4.4 （JSS15Q），配置项是ro.setupwizard.wifi_required，但是改此项并不管用，而是要跳过开机设置才管用也即添加ro.setupwizard.mode=DISABLED到/system/build.prop</p></li>
<li><p>重启</p>

<p>adb命令重启木有用，还是用recovery上面的菜单来重启。因为这个ADB是recovery提供的，你会发现里面有很多安卓本身没有的比如像find像sed，因为这个Shell是由recovery里的busybox提供的，安卓系统还没有加载，自然reboot木鸟用。</p></li>
</ol>


<h2>总结与评论</h2>

<p>首先说Google酱紫的做法还是蛮恶心的，完全不考虑我大天朝的人怎么办！连接网络可以有，但至少可以跳过或者忽略啊！不能强制用户，网上也有其他人有此报怨（米国人），因为买奶七的人不一都有网络（那个报怨的米国人就是，大意是给他老爹买的，老爹那里木WiFi，所以很郁闷，无法激活）。</p>

<p>其次，就是解决问题的思路，惭愧虽搞了安卓几年，但是没想出通过设置来跳过开机设置这等高招。XDA论坛还是高手云集的地方，ROOT，recovery和各种Hack基本上都源自XDA论坛。以后遇到这种完全无思路 的问题还是要多救助网络和社区，否则自己搞鼓一辈子，可能也想不到好方案。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在安卓设备与PC之间传递文件]]></title>
    <link href="http://toughcoder.net/blog/2015/04/21/transfer-files-between-android-phone-and-pc/"/>
    <updated>2015-04-21T23:01:11+08:00</updated>
    <id>http://toughcoder.net/blog/2015/04/21/transfer-files-between-android-phone-and-pc</id>
    <content type="html"><![CDATA[<p>现在智能手机（这里的手机是广义的，包括手机，平板电脑等移动智能设备）在生活中的角色越来越重要，人们使用手机的时间远远大于电脑，由于手机的便携性，所以很多时候我们会需要用手机来携带数据或文件，或者用于娱乐。比如乘坐火车或者汽车时，用手机来看个电影还是相当不错的，现在的手机屏幕也够大，存储空间充足，完全不成问题。虽然移动端也有足够多的客户端可以下载视频等，但是远没有PC资源多，也没有PC下载方便。但是下载后如何把视频弄到手机上面，以及当需要把其他一些文件弄到手机上面时，也是一个技术问题，今天就来探讨一下。</p>

<p><a href=""><img src="https://img.alicdn.com/imgextra/i1/715978679/TB2S3f6mVXXXXX2XpXXXXXXXXXX_!!715978679.jpg" title="auto auto" ></a></p>

<!-- more -->


<h2>用第三方的软件</h2>

<p>比如说QQ之类的，它都有一个功能就是在不同设备之间传递文件特别是PC端与移动端，只要在PC上面和移动设备上面都安装了QQ较新版本的客户端，就可以用其传递文件。孤没有亲测，但估计效果还是可以的，但是对于像高清电影这样的G级别的大文件不知道效果如何了。</p>

<h3>优点</h3>

<p>  使用简单方便，不需要任何技术基础或折腾技术相关的东西</p>

<h2>直接把手机当成U盘（2.3及以下版本适用）</h2>

<p>以前的安卓版本当手机连接上电脑以后，是直接可以把连接的存储方式设置成为大容量存储，这样手机就直接相当于一个U盘。具体的操作方法就是手机连上电脑后，通知栏会有一个通知是存储相关的，点击后就可以把手机挂载成为一个U盘，再次点击之后会关闭。绝大多数手机只有当插入有SD扩展卡时才能如此做。</p>

<h3>优点</h3>

<p>   使用简单方便</p>

<h3>缺点</h3>

<p>   Android 2.3及以下版本才可以</p>

<h2>使用ADB命令</h2>

<p>我相信大多数Android用户对于adb命令并不会陌生，即使没有开发经验或者不懂技术，如何折腾过刷机或者Root的同学应该至少对adb命令有一个印象。对于有开发经验的同学就更不用说了，如果连adb都不知道那你的安卓开发肯定是体育老师教的。
ADB的使用是比较折腾的，非技术的同学可能会有些困难：</p>

<ol>
<li>下载Android SDK</li>
<li>对于Windows要安装设备的驱动，Linux和Mac则不用</li>
<li>对于Linux要配置udev权限，可参考官方文档</li>
<li>手机要激活USB调试：设置->开发者选项->USB调试</li>
</ol>


<h3>优点</h3>

<p>   其实没什么优点，对于开发者同学们来说这只是没有额外的事情折腾，传递一些小文件来说ADB命令还是非常方便的</p>

<h3>缺点</h3>

<ol>
<li>非常的折腾，特别是针对不是安卓开发者同学来说</li>
<li>对于百兆以上的大文件 来说，速度非常慢</li>
<li>需要对手机的存储机制在所了解，因为adb push是需要指定手机上目标文件夹</li>
</ol>


<h2>使用MTP协议传输</h2>

<p>这是本文的重点。
Android 4.0及以上的版本当连接到PC时，通知栏也会有一个与存储机制相关的通知可以选择是以相机方式还是MTP方式挂载手机的存储：如果是相机模式，那么可以直接访问手机里的相册；MTP则用于传递文件。
<a href="http://en.wikipedia.org/wiki/Media_Transfer_Protocol">MTP</a>是媒体传输协议(Media Transfer Protocol)的简称，它是一种在设备之间传输媒体文件的协议，这是一种标准的公开的协议，理论上讲能与任何支持MTP协议的设备进行传输。当安卓设备连接到电脑时，选择MTP方式后，即可以使用MTP协议来传送文件。</p>

<h3>Windows和Mac</h3>

<p>对于Windows和Mac，Google有专门的客户端，可以到<a href="http://www.android.com/filetransfer/index.html">官网</a>了解详情，使用不难，安装客户端，连接手机选择MTP模式即可。</p>

<h3>Linux</h3>

<p>Linux（这里以Ubuntu为例，其他发行版本类似）稍微折腾一点，因为没有官方的客户端，所以需要安装第三方的工具：</p>

<ol>
<li>安装工具：sudo apt-get install mtp-tools mtpfs</li>
<li><p>配置</p>

<pre><code>  sudo service udev start
    sudo mkdir /media/nexus
    sudo chmod a+xrw /media/nexus
    sudo adduser $USER fuse
</code></pre>

<p>  sudo vim /etc/fuse.conf并把最后一行&#8217;user_allow_other&#8217;打开注释（删除行首的‘#’）</p></li>
<li><p>创建命令别名
  vim ~/.bashrc在其中添加：</p>

<pre><code>   alias android-connect='mtpfs -o allow_other /media/nexus'
   alias android-disconnect='fusermount -u /media/nexus'
</code></pre></li>
<li><p>重启电脑</p></li>
<li>连接手机，运行android-connect后，/media/nexus/即是手机的存储，可以自由的传递文件了</li>
</ol>


<p>使用MTP方式对于大文件或者多文件的文件夹都是毫无压力的，速度略逊于U盘。</p>

<h2>参考</h2>

<ul>
<li> <a href="http://askubuntu.com/questions/207569/how-do-i-connect-a-nexus-7-to-transfer-files">How do I connect a Nexus 7 to transfer files?</a></li>
<li> <a href="http://en.wikipedia.org/wiki/Media_Transfer_Protocol">Media Transfter Protocol</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[下载并编译CyanogenMod源代码]]></title>
    <link href="http://toughcoder.net/blog/2014/11/01/play-with-cyanogenmod/"/>
    <updated>2014-11-01T00:40:55+08:00</updated>
    <id>http://toughcoder.net/blog/2014/11/01/play-with-cyanogenmod</id>
    <content type="html"><![CDATA[<p>CyanogenMod是除了Android官方源码之外的最受欢迎的Android的一个分支，它是干净，几乎接近原生Android，且方便为设备进行定制，在编译和制作ROM上面较原生有很大改进，是开发者学习源码和自己制作ROM的最佳选择。</p>

<p>官方网站在<a href="http://www.cyanogenmod.com/">这里</a>.</p>

<p>repo在<a href="https://github.com/CyanogenMod/android/">这里</a>.</p>

<p>环境说明，本次所有操作都是在Ubuntu 12.04(Precise)里面进行的。另外需要说明的是，我的环境访问谷歌和谷歌相关的服务都是没有问题的，关于如何访问谷歌可以参考这位牛人写的<a href="http://strongme.github.io/2014-09-01-Add-Hosts-For-Google.html">博客</a></p>

<p><a href=""><img src="https://img.alicdn.com/imgextra/i2/715978679/TB25xAemVXXXXbKXXXXXXXXXXXX_!!715978679.jpg"></a></p>

<!-- more -->


<h2>下载源码</h2>

<p>下载源代码是第一步，这跟很多教程是不太一样的。因为我觉得，你源码都没有拿到，还搞个毛线啊！有了源码即使无法编译，也至少还可以看源码的，否则安装了toolschain又有啥用。
其实，源码的下载按道理讲是很简单的事情的，但是很多事情到了我大天朝就会变得很复杂，甚至搞不定，特别要从Google的服务器上搞点东西。因为CyanogenMode的源码是在<a href="http://github.com/">Github</a>上面，所以源码的下载还是很方便的，但是对于一些必要的工具，因为是要从Google取，所以就很蛋疼。</p>

<h3>下载repo</h3>

<p>因为Android的源码非常多，巨大的源码不可能放在一个git的repo里面，是每个模块都有自己单独的git仓库，但是为了成功编译，又需要所有的源码，但是不可能手动的一个一个的去clone啊，因此就有了repo这个工具，它就是一个Python实现的脚本，先从Server读出来一个所有仓库的配置信息XML文件，然后按这个文件一个一个的把git仓库clone下来。
这个文件是Android官方提供的，CyanogenMod也只是使用了它。所以它还要从官方来取。它就是一个脚本，所以谈不到安装，下载下来，改变文件属性就可以运行了。关键是下载啊！</p>

<pre><code class="bash">curl https://storage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo
chmod a+x !$
</code></pre>

<p>因为Google的连接不稳定，甚至是无法连接，所以下载这个脚本就要八仙过海，各显神通了，为了方便后来的兄弟们，可以从<a href="http://pan.baidu.com/s/1mgytKYO">这里</a>下载。别高兴太早，这才刚开始。后面还会有一大把问题呢。</p>

<h3>初始化仓库和分支信息</h3>

<pre><code class="bash">mkdir -p /work/cyanogenmod
cd /work/cyanogenmod
repo init -u git://github.com/CyanogenMod/android.git -b stable/cm-11.0
</code></pre>

<p>注意，为了方便，最好把你的Github帐户配置好ssh，以方便直接以git方式clone。另外，<a href="http://www.cyanogenmode.com/">CyanogenMod</a>的仓库在<a href="http://github.com/CyanogenMod/android">这里</a>，你会发现，这里只有二个配置文件。如前面所说，这里只是列出其他仓库的配置文件，以文件抓取所有的源码。</p>

<p>另外，-b后面跟的是你要抓取的分支, cm-11.0是最新的分支，对应Android 4.4。查看其他的分支可以看<a href="https://github.com/CyanogenMod/android/branches">这里</a>。</p>

<p>如果没有任何错误，那么要恭喜你，但是通常都会遇到错误：</p>

<blockquote><p>repo init -u git://github.com/CyanogenMod/android.git -b stable/cm-11.0</p>

<p>gpg: key 920F5C65: &ldquo;Repo Maintainer <a href="&#x6d;&#x61;&#105;&#108;&#116;&#x6f;&#58;&#x72;&#101;&#112;&#x6f;&#64;&#97;&#110;&#x64;&#114;&#x6f;&#105;&#x64;&#46;&#x6b;&#x65;&#x72;&#110;&#101;&#108;&#x2e;&#111;&#x72;&#103;">&#x72;&#x65;&#x70;&#111;&#x40;&#97;&#x6e;&#100;&#x72;&#x6f;&#105;&#100;&#x2e;&#107;&#x65;&#114;&#110;&#101;&#108;&#46;&#111;&#x72;&#x67;</a>&rdquo; not changed</p>

<p>gpg: key 692B382C: public key &ldquo;Conley Owens <a href="&#x6d;&#x61;&#x69;&#x6c;&#x74;&#x6f;&#x3a;&#x63;&#99;&#111;&#51;&#64;&#x61;&#110;&#x64;&#x72;&#x6f;&#105;&#x64;&#46;&#x63;&#x6f;&#x6d;">&#99;&#99;&#x6f;&#51;&#64;&#x61;&#110;&#x64;&#114;&#x6f;&#105;&#100;&#46;&#x63;&#x6f;&#x6d;</a>&rdquo; imported</p>

<p>gpg: Total number processed: 2</p>

<p>gpg:               imported: 1  (RSA: 1)</p>

<p>gpg:              unchanged: 1</p>

<p>fatal: Cannot get <a href="https://gerrit.googlesource.com/git-repo/clone.bundle">https://gerrit.googlesource.com/git-repo/clone.bundle</a></p>

<p>fatal: error [Errno 101] Network is unreachable</p></blockquote>

<p>第一眼看上去貌似是网络连接问题，搜了一下，网站有各种版本，<a href="http://www.cnblogs.com/javawebsoa/p/3235315.html">有的</a>说要unset代理，变量，<a href="http://blog.csdn.net/jianguo_liao19840726/article/details/9774357">有的</a>说要登录<a href="https://android.googlesource.com/new-password">androidsource</a>然后把登录信息加入到.netrc中。但是这些对我的情况都不管用；还有<a href="http://blog.sina.com.cn/s/blog_a9c55dfd0101jcz6.html">这篇</a>。我的情况与最后一个类似，多试几次，然后就init成功了。看来真的是网络抽风。</p>

<h3>下载源码</h3>

<p>然后就可以下载源码了：</p>

<pre><code class="bash">repo sync
</code></pre>

<p>因为是在github上面，而github一向是比较给力的，所以只要等待就好了，一般都会成功下载的。这跟官方Android就不同了。记得以前下载官方源码时，经常出现网络问题，下载了几个晚上才搞定。</p>

<h2>安装编译所需要的toolschain</h2>

<p>CyanogenMod本质上也是Android，所以这个可以参考<a href="http://source.android.com/source/initializing.html">官方文档</a>，就可以了。</p>

<p>几个关键的点是：</p>

<ul>
<li>使用Oracle的Java SDK(JDK)，至于版本，最新的Android可以用Java 7，所以就装个Java 6吧，2.3到4.4都是使用Java 6</li>
<li>安装需要的软件包</li>
<li>配置ccache</li>
</ul>


<h2>编译</h2>

<h3>编译模拟器</h3>

<p>模拟器在学习和研究代码的时候还是比较有用的，如果你没有一个专门用作测试的手机的话。</p>

<pre><code class="bash">. build/envsetup.sh
lunch
</code></pre>

<p>这时会出现一个菜单，仔细寻找cm_goldfish-eng，输入前面的数字，这会对模拟器进行一些配置。这里有一个坑，不要用source build/envsetup.sh，而要用上面的命令，否则会没有goldfish相关的配置项出现在lunch的菜单里。</p>

<p>然后，再到vendor/cm/里面，执行./get-prebuilts，这会把一些需要的东西拉下来。然后就可以正式的编译了：</p>

<pre><code class="bash">make -j8
</code></pre>

<p>之后是漫长的等待。</p>

<h3>运行模拟器</h3>

<pre><code class="bash">emulator -system ./out/target/product/generic/system.img -data ./out/target/product/generic/userdata.img -ramdisk ./out/target/product/generic/ramdisk.img
</code></pre>

<p>还可以指定skin，skin可以到SDK里面去找。如果多次使用可以把上面的命令保存成Bash脚本。但是这个模拟器会奇慢无比。</p>

<h2>参考资料</h2>

<ul>
<li><a href="http://hualang.iteye.com/blog/1139269">Android ROM研究&mdash;CyanogenMod源代码下载及编译</a></li>
<li><a href="http://sunzeduo.blog.51cto.com/2758509/1538557">基于 cm-11 源码编译模拟器</a></li>
<li><a href="http://www.yinqisen.cn/blog-321.html">CyanogenMod 11.0模拟器goldfish的编译方法及下载地址</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
