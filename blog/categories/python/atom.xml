<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | 稀有猿诉]]></title>
  <link href="http://toughcoder.net/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://toughcoder.net/"/>
  <updated>2022-10-08T23:07:04+08:00</updated>
  <id>http://toughcoder.net/</id>
  <author>
    <name><![CDATA[Alex Hilton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python字符串编码答疑]]></title>
    <link href="http://toughcoder.net/blog/2020/03/06/understanding-python-string-encoding/"/>
    <updated>2020-03-06T22:21:49+08:00</updated>
    <id>http://toughcoder.net/blog/2020/03/06/understanding-python-string-encoding</id>
    <content type="html"><![CDATA[<h2>Python 2中的字符串分类</h2>

<p>在Python 2中字符串，有两个类型，一个是str，一个是unicode。str可以理解为ASCII的字符列表，说白了，只能存储ASCII字符，如果赋个中文值，会报错；而unicode是支持非ASCII字符的。这个与C语言中的字符非常类似char[]只能存ASCII字符串，而wchar[]才可以存储Unidcode字符串。</p>

<p><a href=""><img src="https://www.kodefork.com/media/uploads/articles/2019/06/23/python-strings.png"></a></p>

<!-- more -->


<p>可以用如下方式来安全的转换两种字符串：</p>

<pre><code class="python">def to_str(foo):
   if foo instanceof unicode:
      return str(foo)
   else:
      return foo

def to_unicode(bar):
   if bar instanceof str:
      return unicode(bar)
   else:
      return bar
</code></pre>

<p>对于字面字符串，前面加上u来标识是一个unicode，否则会当成str：</p>

<pre><code class="python">a = 'this is a string'
b = u'nah, I am a unicode'
</code></pre>

<h2>Python 3中的字符串分类</h2>

<p>由于Python 2中的混乱，所以到了Python 3里面，有了新的定义，字符串类型是str，支持Unicode，另外多了一个类型bytes，可以理解为byte的列表，也即是0&lt;=且&lt;=256的无符号整数，或者说是ASCII字符，简单来理解意思是一样的。这个就与Java语言类似了，如同Java中一样，String支持unicode，另专门有byte类型。另外，对于字面字符串也无需要再要标识了。</p>

<p>str与bytes之间的关系与区别是，str是给人看的，而bytes是给机器看的，bytes是str的底层实现。所以，bytes处理起来更快，效率更高，一些底层的IO库以及像网络IO，用的数据 一般都是bytes。它们之间是可以互转的：</p>

<ul>
<li>str转为bytes叫encode</li>
<li>bytes转为str叫decode</li>
</ul>


<p>在转换的时候还需要指定编码格式，这个编码格式就是unicode的编码方式，默认是&#8217;utf-8&#8217;，这里就涉及Unicode编码解码的相关知识了，常见的就是&#8217;utf-8&#8217;，&#8217;unicode&#8217;，以及&#8217;gbk&#8217;等。可以用如下方法来安全的转换：</p>

<pre><code class="python">def to_bytes(foo):
   if foo instanceof str:
      return foo.encode()
   else:
      return foo
def to_str(bar):
   if bar intanceof bytes:
      return bar.decode()
   else:
      return bar
</code></pre>

<h2>注意区分两个编码格式</h2>

<p>需要注意区分两个编码格式的设置，一个是指定程序里面字符串的编码，如在encode()和decode()时指定编码格式。</p>

<p>另外，一个就是程序源文件的编码格式，这个容易被忽略，要详细说下：程序的源码，其实就是一个文本文件，对吧，那么这个文本文件也是要指定编码格式的，常规来说，Python程序应该都是ASCII字符，所以默认的呢Python解释器，是按照ASCII文本的方式来处理代码源文件，但我们代码里面是会出现Unicode字符的，比如字面字符串，或者写的注释，如果 不进行特殊的设置解释器会报错的，因为出现了它不认识的字符。这时就需要对源码文件设置一下编码格式，把这句加在代码源文件的最上面，就好了：</p>

<pre><code class="python"># -*- coding: utf-8 -*-
</code></pre>

<h2>如何解决未知编码格式</h2>

<p>关于编码最容易遇到的就是UnicodeDecodeError，后面跟着一坨详细信息，这个错误就是告诉你编码时出问题了，通常有两类错误：</p>

<ul>
<li><p>UnicodeDecodeError: &lsquo;ascii&rsquo; codec can&rsquo;t decode byte 0xe4 in position 0: ordinal not in range(128)</p>

<p>这个通常是在Python 2时会遇到，原因简单的来说就是把unicode当成了string，或者源码文件的编码格式不对。解决的办法就是按照 上面介绍的安全转换方法，另外要设置一下源码文件的编码格式，这个问题自然可解。</p></li>
<li><p>Python3.6 UnicodeDecodeError: &lsquo;utf8&rsquo; codec can&rsquo;t decode byte 0xb2 in position 24137: invalid start byte</p>

<p>这个通常是在Python 3时面遇到的，后面的具体信息会不一样，这个问题会发生在bytes转化为string，decode时会报出，原因就是指定的解码方式与真实的不匹配，无法成功decode，比如，bytes是「gtk」的，但是用&#8217;utf-8&#8217;去decode肯定会失败。这个问题，在写爬虫或者一些文本处理时经常遇到，因为来源的编码方式不固定。</p>

<p>这个问题，如果想要根解，必须预知来源bytes的编码格式，但这通常不可能，所以可行的一条方案是，用一坨编码方式来不停的尝试：</p>

<pre><code class="python">def safe_decode(source):
   encodeings = ['utf-8', 'gbk', 'utf-16']
   for en in encodeings:
      try:
         return source.decode(en)
      except UnicodeDecodeError as e:
         print('Failed: ', e)
   return source
</code></pre></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 2升级到Python 3的指导建议]]></title>
    <link href="http://toughcoder.net/blog/2020/03/05/guide-of-upgrade-from-python-2-to-python-3/"/>
    <updated>2020-03-05T23:51:53+08:00</updated>
    <id>http://toughcoder.net/blog/2020/03/05/guide-of-upgrade-from-python-2-to-python-3</id>
    <content type="html"><![CDATA[<p>&ldquo;Life is short, we must upgrade to Python 3&rdquo;</p>

<p>Python是一个非常好用的工具语言，哪怕主业中用不到它，到处可见到一些非常实用的小的工具都是用Python来写的，即使再小的工具，也要做到小而美，这是工匠精神的体现。在社区里面Python 2已经停止开发新功能了，仅维护并修复一些bug，未来也将会停止维护，有些平台已经默认用python3了。除非有些无法替换的依赖必须强制使用Python 2以外，建议要升级到Python 3。本篇记录一些朕在升级到Python 3时遇到的一些问题，也即升级的时候的一些指导提示。</p>

<p><a href=""><img src="https://miro.medium.com/max/2156/1*HacaJfdu7HF8V4gIoA98ww.png"></a></p>

<!-- more -->


<h2>Python 2与Python 3的区别</h2>

<h3>两个版本并不兼容</h3>

<p>就像刚接触Python时，竟然发现它有两个版本，而且它们还不兼容，具体原因可能是因为时代的发展，编程语言也在不断的进步，而Python语言并不年轻，所以可能会导致新的编程语言设计思想在老的版本上面不好去兼容，很多软件都会有这样的问题，当有跨度比较大的升级时，相当于重新设计了，基本上是取代而非升级，因为老版本的设计架构等原因，是无法兼容的。</p>

<p>姑且不管啥原因吧，我们要明白一个事实就是Python 2与Python 3是不兼容的，意思就是，如果按照Python 2写的一段代码，用Python 3的解释器去运行，会报错，无法运行，反之亦然。</p>

<h3>两个版本的主要区别</h3>

<p>关于两方面的区别，可以看一看<a href="https://www.cnblogs.com/aguncn/p/3427531.html">这篇文章</a>，写的比较详细，这里就不重复了，只是罗列一些最常用的，也是最显著的一些需要注意的地方：</p>

<h4>print</h4>

<p>在Python 2里面啊，print是一个语言关键字，就像if when一样，它是一个独立的语句，想输出啥东西时，都是直接在print后面写就行了：</p>

<pre><code class="python">print 1, 2, 3
print 'Security code is ', a, b, c
</code></pre>

<p>而Python 3里面，print是一个内置函数，必须带有()才算函数调用，这里不纠结语句与函数的区别，只需要记得，现在要在print后面加上括号就可以了，下面的代码与上面效果等同：</p>

<pre><code class="python">print(1, 2, 3)
print('Security code is ', a, b, c)
</code></pre>

<h4>字符串编码</h4>

<p>这个可能是最复杂的和令人困惑的，根本的原因在于Python 2中的字符串与编码问题很绕，而Python 3中就清晰多了。</p>

<p>在Python 2里面字符串与字符的类型是不一样的，它与上一代的编程语言（C）有点类似，ASCII的与Unicode是不同的类型：</p>

<pre><code class="python">a = 'abcd'
b = u'早上好'
</code></pre>

<p>这里面a是一个string，而b是一个unicode str，如果 不加u，直接写unicode字符会报错的，可以通过unicode函数转化为unicode str，以及通过str函数转化为ASCII字符串。</p>

<p>而在Python 3中不再这么绕了，它就一种字符串类型str，支持unicode，所以你可以直接写了：</p>

<pre><code class="python">a = 'abcd'
b = '下午好'
</code></pre>

<p>可以简单的来理解，把Python 2里的字串想像为C语言，而Python 3的字串相像为Java就可以了。</p>

<p><strong>注意</strong>： 关于字串与编码比较复杂，后面会单独的文章来介绍。</p>

<h4>重要模块的迁移</h4>

<p>大部分的模块是没有变动的，也即import时没有变化，但是有一些有比较大的变化，原因也是相关的代码在设计上有了重大变更，最明显的就是HTTP相关，原来比较乱有httplib, cookie, urllib2等一坨，现在都集中在了urllib里面。详细的可参见上面推荐的文章。</p>

<h4>遍历字典和列表</h4>

<p>字典遍历有变化 ：</p>

<pre><code class="python"># data is a dictionary
for k, v in data.items(): # not iteritems()
   print('{} -&gt; {}.format(k, v))
</code></pre>

<p>遍历平行列表时有变化 ：</p>

<pre><code class="python"># sections, departments are lists
for s, d in zip(sections, departments):
   print(s, d)
</code></pre>

<p>而在Python 2里面必须 这样写：</p>

<pre><code class="python">import itertools
for s, d in itertools.zip(sections, departments):
   print s, d
</code></pre>

<h2>解释器的选择</h2>

<p>上面是代码层面的区别和要注意的点，代码写好了要执行啊，执行的时候也需要注意，用错了解释器，还是跑不通的。</p>

<p>目前大部分的平台上面（Ubuntu和Mac OSX）的系统默认解释器还是2.7.x版本的：</p>

<pre><code class="bash">[-&gt; ~] which python
/usr/bin/python
[-&gt; ~] ll /usr/bin/python
/usr/bin/python -&gt; python2.7
</code></pre>

<p>但是呢，不建议强行把系统的默认解释器换成Python 3，这可能会导致系统出问题，我们直接让我们的脚本用Python 3来运行就可以了，在shebang中改：</p>

<pre><code class="python">#!/usr/bin/env python3
</code></pre>

<p>或者如果是使用PyCharm的话，在项目配置上直接选择Python 3的解释器就好了。</p>

<h2>用pip3安装依赖</h2>

<p>同时，安装需要的依赖时也使用pip3而非pip：</p>

<pre><code class="bash">sudo apt-get install python3-pip
pip3 install --upgrade pip
pip3 install pandas
</code></pre>

<h2>思维的转变</h2>

<p>这里仅是罗列出一些非常显著 的变化 ，实际上远不止这些，大版本的跳跃哪能就这么一点变化呢，还有想当多的细节问题可能会在日常使用中遇到。</p>

<p>这里想说的是如果遇到问题，比如在Python 3中报错了，或者某个问题不知道怎么搞，在搜索答案时，或者寻求帮助时记得直接搜索『Python 3』，这会比较明确的把范围限定 在Python 3里面。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://medium.com/@rajputankit22/upgrade-python-2-7-to-3-6-and-3-7-in-ubuntu-97d2727bf911">Upgrade python 2.7 to 3.6 and 3.7 in Ubuntu</a></li>
<li><a href="https://www.cnblogs.com/aguncn/p/3427531.html">使用2to3将代码移植到Python 3-转</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
