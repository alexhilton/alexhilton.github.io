<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | 稀有猿诉]]></title>
  <link href="http://toughcoder.net/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://toughcoder.net/"/>
  <updated>2024-01-15T20:32:49+08:00</updated>
  <id>http://toughcoder.net/</id>
  <author>
    <name><![CDATA[Alex Hilton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Metaprogramming in Python]]></title>
    <link href="http://toughcoder.net/blog/2023/07/17/metaprogramming-in-python/"/>
    <updated>2023-07-17T23:34:14+08:00</updated>
    <id>http://toughcoder.net/blog/2023/07/17/metaprogramming-in-python</id>
    <content type="html"><![CDATA[<p>元编程是一种编写生成或者处理程序代码的技术，Python语言也支持元编程，今天就来好好的学习一下。我们先了解元编程的概念，然后再深入探讨在Python中如何实现元编程。</p>

<p><a href=""><img src="https://tse4-mm.cn.bing.net/th/id/OIP-C.szFdgvrOnL6NNY3yIbVg7QHaHa?pid=ImgDet&amp;rs=1"></a></p>

<!-- more -->


<h2>什么是元编程</h2>

<p><a href="https://en.wikipedia.org/wiki/Metaprogramming">元编程Metaprogramming</a>就是编写元程序(Metaprograms)的过程。而元程序则是用于生成程序，或者处理的程序的程序。通俗一点的理来理解，元编程就是编写生成代码的代码。程序的处理对象一般是数据，比如从用户处得到输出数据，经过业务逻辑处理，再把输出数据反馈给用户，这是绝大多数程序所做的事情。而元程序处理的对象则是程序，编写元程序的过程就叫做元编程。</p>

<p><img src="https://tse3-mm.cn.bing.net/th/id/OIP-C.hZeaNZPsVVpTioOzzb54oQHaEK?pid=ImgDet&amp;rs=1" alt="" /></p>

<p>元程序的优势，或者我们元编程的目的在于复用和减少代码量，而且是用一种非常优雅的方式。</p>

<p>这么说确实比较抽象，其实元编程没那么复杂，甚至平时都或多或少的已经用到元编程了。比如像C/C++中的宏和模板函数，Java中的泛型，注解，反向和动态代理，代码模板（模板容易混淆，这里指的是<a href="https://en.wikipedia.org/wiki/Boilerplate_code">boilerplate codes</a>）等等，这些本质上都是元编程。</p>

<h3>参考资料</h3>

<ul>
<li><a href="https://zhuanlan.zhihu.com/p/461190812">元编程 (meta-programming)</a></li>
<li><a href="https://codedocs.org/what-is/metaprogramming">What is Metaprogramming</a></li>
<li><a href="https://www.jianshu.com/p/d3b637ece518">一文读懂元编程</a></li>
<li><a href="https://draveness.me/metaprogramming/">谈元编程与表达能力</a></li>
<li><a href="https://stackoverflow.com/questions/514644/what-exactly-is-metaprogramming">What exactly is metaprogramming?</a></li>
<li><a href="https://cs.lmu.edu/~ray/notes/metaprogramming/">Metaprogramming</a></li>
<li><a href="https://devopedia.org/metaprogramming">Metaprogramming</a></li>
</ul>


<p>在大Python中，实现元编程的方式主要是通过装饰器Decorators和元类Metaclasses。</p>

<h2><a href="https://peps.python.org/pep-0318/">装饰器Decorators</a></h2>

<p><img src="https://ts1.cn.mm.bing.net/th/id/R-C.8e7531f7cc7cbb9427f0191423bc0739?rik=WGXrND77wsMxmA&amp;riu=http%3a%2f%2fwww.trytoprogram.com%2fimages%2fpython_decorators.jpg&amp;ehk=SlZpChA7lJNyuSSJnXJMUiyk%2floVKyi3jjsLAcJGHyo%3d&amp;risl=&amp;pid=ImgRaw&amp;r=0" alt="" /></p>

<h3>理解Decorator</h3>

<p>Decorator本质上是高阶函数，最常用的就是用来修饰一个函数，形式上是一个@my_decorator加在一个函数定义的上面，如：</p>

<pre><code class="python">@my_decorator
def say_hello():
    print('Hello, world')
</code></pre>

<p>它等同于：</p>

<pre><code class="python">def say_hello():
    print('Hello, world')
my_decorator(say_hello)
</code></pre>

<p>Decorator是一个函数，它的输入参数是被修饰的函数，此例中即sya_hello。</p>

<p>Python的函数是一级对象，可以赋给变量，可以当作参数和返回值，而以函数为参数或者返回值的函数称为高阶函数。装饰器本质上就是一个高阶函数，只不过，以一种更为简洁的方式来书写@my_decorator。所以再次看到@时，不用害怕，把它看成高阶函数调用即可。</p>

<h3>自定义Decorator</h3>

<p>装饰器本质上就是高阶函数，它的输入是一个函数，所以定义一个高阶函数，即可当作decorator使用：</p>

<pre><code class="python">def my_decorator(func):
    def wrapper():
        print('Before func is called')
        func()
        print('After func is called')
    return wrapper

@my_decorator
def say_hello():
    print('Hello, world')

say_hello()
#Output:
#Before func is called
#Hello, world
#After func is called
</code></pre>

<p>这就实现了一个非常简单的自定义decorator。</p>

<h3>装饰器的作用</h3>

<p>装饰器就是高阶函数，所以通常用于对函数产生一些副作用，比如打印日志，性能测试等等，其与<a href="https://refactoring.guru/design-patterns">设计模式中</a>的<a href="https://refactoring.guru/design-patterns/decorator">装饰模式</a>的思想是一致的，通俗来理解就是套娃。</p>

<p><a href="https://docs.python.org/3/library/functools.html">模块functools</a>定义了很多高阶函数，都可以直接当作decorator使用。用好Decorator可以写出很简洁和易于维护的代码。</p>

<h3>参考资料</h3>

<ul>
<li><a href="https://www.geeksforgeeks.org/decorators-in-python/">Decorators in Python</a></li>
<li><a href="https://realpython.com/primer-on-python-decorators/">Primer on Python Decorators</a></li>
<li><a href="https://www.programiz.com/python-programming/decorator">Python Decorators</a></li>
<li><a href="https://www.datacamp.com/tutorial/decorators-python">Python Decorators Tutorial</a></li>
<li><a href="https://machinelearningmastery.com/a-gentle-introduction-to-decorators-in-python/">A Gentle Introduction to Decorators in Python</a></li>
</ul>


<h2>元类Metaclasses</h2>

<p>Decorator可以非常方便的修饰一个函数，但如果我们有很多个方法（属于类的函数，称为方法），难道要一个一个的去添加@吗？或者想对类的属性也搞些操作，咋办？如果是一个类，倒也可以手动加一加，如果想给整个类的继承体系内的所有类都施加某种副作用影响呢？这时就会用到Metaclasses。</p>

<p><img src="https://tse3-mm.cn.bing.net/th/id/OIP-C.XRGcsVISQj6adHt8Ygq6cAHaGV?pid=ImgDet&amp;rs=1" alt="" /></p>

<p>Metaclasses可以理解为类的基类，也就是用于定义每个类(class）时使用的类，Metaclass中可以定义一些高阶函数用于在创建对象时，实始化对象时，调用属性时和调用方法时施加副作用影响。可以在定义类的时候通过metaclasses来指定使用的Metaclasses，并且会在继承体系中得到继承。</p>

<p>Metaclasses可以对类施加一些额外影响，比如说Python并非强OO的，像abstract没有直接的支持，这时就可以用Metaclasses来定义额外的限制，比如当基类是abstract时，如果子类没有实现一些abstract方法，就报错等等。</p>

<h3>参考资料</h3>

<ul>
<li><a href="https://realpython.com/python-metaclasses/">Python Metaclasses</a></li>
<li><a href="https://www.geeksforgeeks.org/metaprogramming-metaclasses-python/">Metaprogramming with Metaclasses in Python</a></li>
<li><a href="https://lotabout.me/2018/Understanding-Python-MetaClass/">Python 元类 (MetaClass) 小教程</a></li>
<li><a href="https://stackoverflow.com/questions/100003/what-are-metaclasses-in-python">What are metaclasses in Python?</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/149126959">Python进阶——详解元类，metaclass的原理和用法</a></li>
</ul>


<h2>参考资料</h2>

<ul>
<li><a href="https://developer.ibm.com/tutorials/ba-metaprogramming-python/">Metaprogramming in Python</a></li>
<li><a href="https://www.oreilly.com/library/view/metaprogramming-with-python/9781838554651/">Metaprogramming with Python</a></li>
<li><a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/chapters/p09_meta_programming.html">第九章：元编程</a></li>
<li><a href="https://github.com/PacktPublishing/Metaprogramming-with-Python">Metaprogramming with Python, published by Packt</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploying Python Applications]]></title>
    <link href="http://toughcoder.net/blog/2023/07/16/deploying-python-applications/"/>
    <updated>2023-07-16T14:53:07+08:00</updated>
    <id>http://toughcoder.net/blog/2023/07/16/deploying-python-applications</id>
    <content type="html"><![CDATA[<p>一个软件项目通常的开发流程包括创建，开发，打包和发布，不同为类型的项目具体过程可能不太一样，比如像Web项目，最后一般不叫发布而是叫做部署，并且像动态语言类的项目一般不会有打包过程。但总的来说，这几个流程确实是任何一个软件开发过程中必做的事情。今天就来学习一下如何部署Python应用程序，也就是除了项目开发写代码以外的一些必须做的事情。</p>

<p><a href=""><img src="https://www.antagonist.nl/blog/wp-content/uploads/2020/11/py-deployment.png" title="auto auto" ></a></p>

<!-- more -->


<p><strong>注意</strong>：本文不去纠结项目和应用程序的具体定义与区别，就是泛指一个软件项目，一坨脚本工具集，一个module package，一个桌面应用程序，一个Web app都是一个项目。并且项目和应用程序也基本上指的是同一个东西，很多语境下可互换。</p>

<h2>以符合规范的方式来开发项目</h2>

<p>在讨论部署之前，我们先谈谈项目的创建与开发，视项目的不同用途，每个类型的项目都会有相应的开发规范，比如要创建哪些必备的配置类的文件，比如要采用什么样的目录结构。并没有一个大一统的统一规范，但是不同的类型的项目确实会有其规范，比如一个package要如何创建，一个Django app要如何创建。</p>

<p>我们还是要符合具体项目类型的要求，这样的做的原因是，当开发完成后，进行打包和部署的时候会容易得多。</p>

<p>可以参考 《Expert Python Programming 2nd Edition》中的第五章『Creating a package』。</p>

<h2>打包和部署</h2>

<p>Python是通用的编程语言，在打包和部署这块也是相当灵活的，没有固定和统一的规则，主要还是依据不同类型的项目来确实具体的部署策略。</p>

<h3>package</h3>

<p><img src="https://tse3-mm.cn.bing.net/th/id/OIP-C.tL670VQGeyalMhD23kSXPwHaEE?pid=ImgDet&amp;rs=1" alt="" /></p>

<p>package是指一坨Python代码的集合，是可以供其他人使用的库，应该被视为三方module。Python是有完整的生态的，它提供三方module的<a href="https://pypi.org/">聚合PyPI</a>，提供下载管理工具<a href="https://pypi.org/project/pip/">pip</a>， 以及module（package是更正式的称谓）的开发和发布机制。</p>

<ul>
<li><a href="https://www.geeksforgeeks.org/how-to-build-a-python-package/">How to Build a Python package?</a></li>
<li><a href="https://packaging.python.org/en/latest/tutorials/packaging-projects/">Packaging Python Projects</a></li>
<li><a href="https://www.freecodecamp.org/news/build-your-first-python-package/">How to Build Your Very First Python Package</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/126357143">创建Python Package</a></li>
<li><a href="https://www.pythoncentral.io/how-to-create-a-python-package/">How to Create a Python Package</a></li>
</ul>


<h3>Desktop app</h3>

<p>这里的Desktop app是指除了package（会发布到PyPI的）和Web app以外的，能独立运行的，没有与客户端或者其他服务器有太多交互的通用应用程序，比如一些脚本，或者一个桌面应用程序都算Desktop app。</p>

<p>其实，这里重点想强调的就是运行环境，可以是本机，也可以是服务器。</p>

<ul>
<li><a href="https://packaging.python.org/en/latest/discussions/deploying-python-applications/">Deploying Python applications</a></li>
<li><a href="https://pypi.org/project/desktop-app/">desktop-app 0.4.0</a></li>
<li><a href="https://pythonistaplanet.com/how-to-create-a-desktop-application-using-python/">How to Create a Desktop Application Using Python
Written by Ashwin Joyin Python</a></li>
<li><a href="https://www.freecodecamp.org/news/the-python-desktop-application-3a66b4a128d3/">How to Turn a Web App Into a Desktop App, Using Chromium and PyInstaller</a></li>
</ul>


<h3>Web app</h3>

<p><img src="https://tse3-mm.cn.bing.net/th/id/OIP-C.Bt6Ec7CvI4OGvQ9eD39-EQAAAA?pid=ImgDet&amp;rs=1" alt="" /></p>

<p>Web app一般部署规则都由其使用的框架决定，比如Django有其自己的规则和方法，而Flask又有一套。也跟服务器有关系，比如部署到私有服务器，跟部署到云服务上面是完全不一样的。</p>

<ul>
<li><a href="https://realpython.com/python-web-applications/">Python Web Applications: Deploy Your Script as a Flask App</a></li>
<li><a href="https://learn.microsoft.com/en-us/azure/app-service/quickstart-python?tabs=flask%2Cwindows%2Cazure-cli%2Cvscode-deploy%2Cdeploy-instructions-azportal%2Cterminal-bash%2Cdeploy-instructions-zip-azcli">Quickstart: Deploy a Python (Django or Flask) web app to Azure App Service</a></li>
<li><a href="https://python-adv-web-apps.readthedocs.io/en/latest/flask_deploy.html">Flask: Deploy an App</a></li>
<li><a href="https://realpython.com/lessons/build-basic-python-web-app/">Building a Basic Python Web App</a></li>
<li><a href="https://www.geeksforgeeks.org/how-to-deploy-django-project-on-pythonanywhere/#:~:text=How%20to%20Deploy%20Django%20project%20on%20PythonAnywhere%3F%201,Github%3F%203%20Step%203%3A%20Deploy%20Project%20on%20pythonanywhere">How to Deploy Django project on PythonAnywhere?</a></li>
<li><a href="https://docs.djangoproject.com/en/4.2/howto/deployment/">How to deploy Django</a></li>
<li><a href="https://docs.digitalocean.com/tutorials/app-deploy-django-app/">Deploy a Django App on App Platform </a></li>
</ul>


<h3>部署到服务器</h3>

<p><img src="https://www.aipython.in/wp-content/uploads/2021/09/Deploy-python-app-on-heroku-cloud-server-for-free.jpg" alt="" /></p>

<p>这个跟Web app不太一样，Web app当然要部署到服务器中。但需要往服务器部署的可不止Web app，一些工具性脚本，Desktop app也有可能需要往服务器部署，这只是有别于本机运行的不同的环境而已，与app的类型并没有太多关系。</p>

<ul>
<li><a href="https://zhuanlan.zhihu.com/p/595872062">手把手教你如何从零开始部署一个Python项目到服务器</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/323261131">Pycharm 实现远程部署和调试，原来这么简单</a></li>
</ul>


<h3>使用虚拟环境</h3>

<p>简单的项目还好，如果复杂一点的项目，最好使用虚拟环境进行隔离，我们在<a href="http://toughcoder.net/blog/2023/07/14/python-runtime-environment/">另外一个文章</a>里面有详细的讨论。</p>

<p>如果项目真的是比较复杂，并且用了超出Python的东西，或者说需要往服务器部署，那么最好的方式是使用Docker。</p>

<ul>
<li><a href="https://zhuanlan.zhihu.com/p/137895577">Docker极简实战之python项目安装部署</a></li>
<li><a href="https://docs.docker.com/language/python/build-images/">Build your Python image</a></li>
<li><a href="https://www.docker.com/blog/how-to-dockerize-your-python-applications/">How to “Dockerize” Your Python Applications</a></li>
<li><a href="https://realpython.com/offline-python-deployments-with-docker/">Simplifying Offline Python Deployments With Docker</a></li>
</ul>


<p>更多内容可以参考 《Expert Python Programming 2nd Edition》中的第六章『Chapter 6. Deploying Code』。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://packaging.python.org/en/latest/overview/">An Overview of Packaging for Python</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-package-and-distribute-python-applications">How To Package And Distribute Python Applications</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/161930778">Python 项目代码写完了，然后怎么打包和发布？</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python GUI Made Easy]]></title>
    <link href="http://toughcoder.net/blog/2023/07/15/python-gui-made-easy/"/>
    <updated>2023-07-15T22:11:49+08:00</updated>
    <id>http://toughcoder.net/blog/2023/07/15/python-gui-made-easy</id>
    <content type="html"><![CDATA[<p><a href="https://www.python.org/">大Python</a>是很好用的一门编程语言，默认情况下我们都当成脚本来使用，都是通过命令行方式来运行我们写的程序。但有些时候GUI还是很方便使用的，脚本和命令行最适合的场景是批量任务运行和自动化，但是如果交互性质的任务较多时，脚本就特别不方便，这个时候GUI就相当的方便。因此，学习一下GUI相关方面的框架，还是相当有必要的。</p>

<p><a href=""><img src="https://onaircode.com/wp-content/uploads/2018/09/Python-GUI-Frameworks.jpg" title="auto auto" ></a></p>

<!-- more -->


<p><a href="https://www.computerhope.com/jargon/g/gui.htm">GUI</a>也即是图形用户界面，是用一些窗口小部件(widgets或者叫做views）如按扭，标签，列表，文本输入框等视觉元素组成的直观的，方便用户操作的软件使用界面。大Python是一个跨平台的通用编程语言，它本身是没有GUI框架的，语言本身以及核心库都不涉及GUI，所以，要想实现GUI，一个最为容易的方式就是对现有的GUI平台进行封装，也即是套壳。</p>

<h2>流行的跨平台GUI平台</h2>

<p>说到GUI，主流的操作系统平台都有自己的GUI框架，比如Windows的.NET以及水果Mac上面的Cocoa，再如Java的Swing和JavaFX。这些都是平台本身提供的能开发GUI的框架。</p>

<p>此外，还有一些非常流行的三方GUI，并且这些GUI都是跨平台的，如wxWidget，Tcl/Tk，QT和GTK+，这几个是非常流行的跨平台的GUI框架，起初这些平台都是源于C/C++语言的，因为桌面软件大多是用C/C++的，并且这两个语言本身也没有GUI库。</p>

<p>GUI平台重点在于其GUI开发能力，至于其支持的编程语言并不是问题，因为把它们用其他编程语言封装一下就能提供对其他语言支持了，像这些平台现在已经支持很多种编程语言了。</p>

<h3>wxWidgets</h3>

<p><img src="https://images.sftcdn.net/images/t_app-cover-l,f_auto/p/bf323fac-9b26-11e6-af72-00163ec9f5fa/659332528/wxwidgets-screenshot.jpg" alt="" /></p>

<p><a href="https://www.wxwidgets.org/">wxWidgets</a>是用C++实现的，最初也是用于C++的一个跨平台的GUI框架，也就 说用一套代码就可以在不同的平台（Windows, Linux和Mac OS）上创建GUI应用程序。后来也发展出来了对其他编程语言的支持，如Python。它最大的优势是接近平台本身的原生风格，就是说并没有进行过度的包装。</p>

<h3>Tcl/Tk</h3>

<p><a href="https://www.linuxjournal.com/article/7225">Tcl/Tk</a>是起源于Linux的一个脚本式的GUI编程语言，不用安装基本上都带了，最大问在于特别丑，而且比较难用，它的思维跟很多通用的编程语言是不一致的。</p>

<h3>QT</h3>

<p><img src="https://ts1.cn.mm.bing.net/th/id/R-C.ccc4bcee36abe0e7c3a4b7df0e8ee87c?rik=HKrLeROHBCAOzA&amp;riu=http%3a%2f%2fpic.baike.soso.com%2fp%2f20131206%2f20131206105338-1481443581.jpg&amp;ehk=GiZS%2byK%2bwSMVOZUmst8BLdXKbummKkNaQMkjqYMLHnw%3d&amp;risl=&amp;pid=ImgRaw&amp;r=0" alt="" /></p>

<p><a href="https://www.qt.io/">QT</a>是很强大的平台，不仅仅是用于GUI，当然最初也为了C++设计的GUI库。是KDE桌面的核心库。</p>

<h3>GTK+</h3>

<p><img src="https://news-cdn.softpedia.com/images/news2/gtk-plus-4-gets-wayland-cpu-fixes-adwaita-to-use-standard-css-gradient-definitions-510213-2.jpg" alt="" /></p>

<p><a href="https://www.gtk.org/">GTK+</a>是起源于Linux的强大的GUI平台，最初是为了给C语言提供的GUI库。是Gnome桌面的核心库。</p>

<h2>Python的封装式GUI框架</h2>

<p>这些是GUI框架的核心实现，它们都支持多语言和跨平台。所以，很多Python的GUI框架都是基于上面这些的，有些是简单的封装，有些做了再次封装，但是核心实现仍是上述这些的库，在安装框架时都是需要先安装上述核心框架后才可以使用。
现在流行的Python的3方GUI框架也多是基于流行的3方的跨平台，跨语言的GUI框架，它们也是跨语言的，就是说针对 不同的编程语言都包了一层皮。</p>

<h3>基于wxWidgets的</h3>

<h4>WxPython</h4>

<p><a href="https://www.wxpython.org/">WxPython</a>可以说是wxWidgets提供给Python的官方库，它的优势是没有对wxWidgets进行过度的封装，使用起来就跟使用wxWidgets是一样的，如果有过wxWidgets的经验，那么上手wxPython会非常的快速。缺点是API相对low level，因为它就是把wxWidgets进行简单的封装和转化，并未进行层次更高的抽象和封装。</p>

<h4>Wax</h4>

<p><a href="https://pypi.org/project/wax/">Wax</a>是对wxPython的二次封装，是个二道贩子，优势是组件化更强，更好用，更方便搭建应用程序，会让wxPython更为好用一些。但是底层GUI实现仍是wxWidgets.</p>

<h3>基于Tcl/Tk</h3>

<p>就是<a href="https://docs.python.org/3/library/tkinter.html">Tkinker</a>了。它最大的优势就是它是随着Python一起发布的，它是官方的，默认的GUI框架，不用再折腾安装。但是相对来说不是很好用，而且很丑。</p>

<h3>基于QT</h3>

<h4>PyQT</h4>

<p><a href="https://wiki.python.org/moin/PyQt">PyQt</a>这是QT对Python的官方支持，如果已有QT经验的人，用起来会相当的顺手。不好的地方在于API生硬，基本就是QT的原生API。</p>

<h4>PySide</h4>

<p><a href="https://pypi.org/project/PySide/">PySide</a>是另外一个QT针对 Python的封装。
基于QT的最大的问题在于QT本身是收费的，虽然有免费的社区版本，但功能不如收费版本。</p>

<h4>pyforms</h4>

<p><a href="https://pyforms.readthedocs.io/en/v3.0/">pyforms</a>这个库也是基于QT，它最大的优势是在于form这个词，所以它更适合于网站样式的GUI。缺点是文档等资源比较少。官方网站也相当简陋。</p>

<h3>基于GTK+</h3>

<h4>PyGTK</h4>

<p><a href="https://wiki.python.org/moin/PyGtk">PyGTK</a>是GTK对Python的封装，如果有GTK经验会上手比较快，缺点跟PyQT或者wxPython是一样的，就是它只是GTK框架接口的一个简单封装，不够Pythonic，用起来可能也不是那么顺手，如果 没有GTK经验的话。</p>

<h4>PyGUI</h4>

<p><a href="https://www.cosc.canterbury.ac.nz/greg.ewing/python_gui/">PyGUI</a>这个库实现比较优雅，符合Pythonic精神。但它依赖于pyGtk，其实也是一个二道贩子。比较小众，文档教程之类的不够强大。</p>

<h3>高层次的抽象封装</h3>

<p>还有一些GUI框架，是更高层次的抽象封装，它底层的实现并没有指定哪个GUI框架，它们更注重于GUI组件本身，开发体验和GUI的使用体验，用起来更舒畅，而不用管底层的GUI框架实现。</p>

<h4>PySimpleGUI</h4>

<p><a href="https://pypi.org/project/PySimpleGUI/">PySimpleGUI</a>目的是高级的封装，让使用者完全不用理会具体的GUI框架。但是使用起来比较麻烦，虽然说它封装的更好，但是实装时要把各种GUI框架全装上。它最大的优势就是能与各种框架高度集成，比如能与给图框架matplotlib高度集成，或者与计算机视觉OpenCV高度集成，不需要做太多额外的事情。</p>

<h2>如何选择</h2>

<p>现在人都会有选择困难证，因为可供选择确实太多，对于开发领域更是如此，每一个功能需求都有大量的框架可供选择。</p>

<ul>
<li>把tkinker过滤掉，太丑太难用。</li>
<li>QT系列的也要过滤掉，因为非常讨厌QT。</li>
<li>太原始的封装也要过滤掉，如PyGTK和wxPython，因这些API过于生硬，仅是对核心GUI框架的简单映射封装。</li>
<li>wxWidgets的也要过滤掉，因为讨厌C++。</li>
<li>pyforms也过滤掉，这东西太接近网页了。</li>
</ul>


<p>剩下的只有PySimpleGUI和PyGUI再做一下PK吧。</p>

<p>PyGUI再pass掉，因为它的文档等看起来较简单，暂不考虑。</p>

<p>接下就只剩下PySimpleGUI</p>

<h4><a href="https://pypi.org/project/PySimpleGUI/#description">PySimpleGUI</a></h4>

<ul>
<li><a href="https://pysimplegui.readthedocs.io/en/latest/">官方文档</a></li>
<li><a href="https://realpython.com/pysimplegui-python/">一个教程</a></li>
<li><a href="https://pypi.org/project/PySimpleGUI/">pypi上的介绍</a></li>
</ul>


<p>通过进一步的看文档和资料，可以发现它的语句过于Python化，完全没有面向对象的概念（GUI框架是强OO的，有对象才更方便操作），可能易于上手，但跟大多的GUI框架明显差异过大，语法和语句过于奇怪。比如为何用widnow.read()，这个怪怪的，不应该封装一下嘛？</p>

<p>它看起来也很不错，不过，不想先尝试它，作为备选方案吧。</p>

<h2>集大成者</h2>

<p>除了针对三方GUI平台的封装外，还有一些GUI框架是基于更底层的graphics，从头搭建的GUI能力，比如Kivy和PyGame。</p>

<h3><a href="https://pypi.org/project/pygame/">PyGame</a></h3>

<p><img src="https://p1.ssl.qhimg.com/dr/270_500_/t01002dca6d3a0f83f5.jpg?size=268x161" alt="" /></p>

<p>主要面向游戏开发，并不适用于一般性的GUI开发，所以暂时忽略。</p>

<h3>Kivy</h3>

<p><img src="https://tse1-mm.cn.bing.net/th/id/OIP-C._Fe1WM6KaAnIHiT10uw4BAHaCe?pid=ImgDet&amp;rs=1" alt="" /></p>

<p>就只剩下Kivy了，决定先尝试一下Kivy，起码这个名字听起来更酷一些。重点介绍一下，Kivy一个非常与众不同的Python GUI框架，起码跟上面那一坨封装都不一样。</p>

<p><a href="https://kivy.org/#home">Kivy</a>是一个基于OpenGL的从零搭建GUI框架，GUI是一坨用户操作元素的组合，比如按扭文本框，输入框，文字标签，动态列表等等，它与graphics是无关的，是抽象层次更高的组件；而OpenGL是graphics库，它是专门用于画几何图形的，如点，线，面体等。通常情况下graphics是GUI的更底层能力，GUI是基于某个graphics库搭建而成的。所以Kivy是一个从零搭建的GUI框架，底层graphics是基于OpenGL，它的技术栈层位置与wxWidget/QT/GTK+是处于同一层的。所以，它跟那些封装层的库是完全不一样的东西。</p>

<p>Kivy是跨平台的，开发语言是Python，但是能为不同的平台构建应用程序，与所有的上面的相比，它的优势是不但可生成Desktop应用，也可以为移动平台（安卓和水果）和树莓派构建应用程序。另外一个巨大的优势是它是基于OpenGL实现的，因此可以用上GPU来加速渲染，渲染性能较高，而且会在图形方面和游戏方面有天生的优势，它本身是基于OpenGL的，所以可以直接用OpenGL API进行图形和游戏开发，不用再额外引入依赖。</p>

<ul>
<li><a href="https://kivy.org/#home">官方文档</a></li>
<li><a href="https://www.geeksforgeeks.org/kivy-tutorial/">一个不错的教程</a></li>
</ul>


<p>从文档来看，这东西较适合游戏开发，而且它又是基于OpenGL的，可以用GPU加速，擅长于此。不过不重要，它是目前看起来最好的，先用它吧。还有一个非常大的优点就是，它做的很彻底，代码逻辑是用Python的，但是布局是用一套自定义的规则语言Kv来实现的，这就实现了代码逻辑与布局的分享，与大多数GUI框架的思想是一致的。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://zhuanlan.zhihu.com/p/347290491">Python的GUI图形界面工具大全</a></li>
<li><a href="https://realpython.com/tutorials/gui/">Python GUI Programming Tutorials</a></li>
<li><a href="https://baijiahao.baidu.com/s?id=1751367833923725788">推荐10款Python图形界面（GUI）框架</a></li>
<li><a href="https://wiki.python.org/moin/GuiProgramming">GUI Programming in Python</a></li>
<li><a href="https://pythongui.org/">Python GUI</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Runtime Environment]]></title>
    <link href="http://toughcoder.net/blog/2023/07/14/python-runtime-environment/"/>
    <updated>2023-07-14T22:46:17+08:00</updated>
    <id>http://toughcoder.net/blog/2023/07/14/python-runtime-environment</id>
    <content type="html"><![CDATA[<p><a href="https://www.python.org/">Python</a>是非常流行的通用编程语言，因其简洁和易读而广受喜爱，近年来由于深度学习的崛起更是让Python登顶为<a href="https://www.tiobe.com/tiobe-index/">最受欢迎的编程语言</a>。虽然已使用Python写了一些程序，但总是缺少深度的理解，加之前段时间因为升级pip导致一些依赖的module无法正常工作，于是要停下来把Python到底是如何工作的了解清楚。</p>

<p><a href=""><img src="https://ts1.cn.mm.bing.net/th/id/R-C.c953feda2b0afda299ccfbe1a9743f00?rik=zz1NU7tbEq3gJQ&amp;riu=http%3a%2f%2fwww.pc9.com%2fuploads%2f20190916%2f805079fa18cbca1ac696dfc8e5efdece.jpg&amp;ehk=tFZHTezwkONle9xLOfoCkQHlSjQvyAla02%2fvtEsdl9I%3d&amp;risl=&amp;pid=ImgRaw&amp;r=0" title="auto auto" ></a></p>

<!-- more -->


<p><strong>注意</strong>：这不是一个基础的教程，也不是一个系统的教程，假定读者有一定的编程开发经验，并且已有Python基础。</p>

<h2><a href="https://docs.python.org/3/tutorial/interpreter.html">Python解释器</a></h2>

<p>这是Python语言中最重要的东西，它负责运行你写的代码，把我们的代码作为输入塞给Python解释器，就能得到我们期望的输出。</p>

<p><strong>注意</strong>：本文中不纠结编译与解释的区别，以及说Python到底会不会把源代码进行编译。</p>

<p>现代比较流行的操作系统如Ubuntu LTS或者Mac OX都会预装Python，原因在于一方面Python太过流行，另外就是操作系统本身也会用到Python。</p>

<p><img src="https://techvidvan.com/tutorials/wp-content/uploads/sites/2/2020/03/how-python-interpreter-works.jpg" alt="" /></p>

<p>但需要特别注意的是，大Python有两个版本Python2和Python3，且并不兼容，稍学习过Python的都应该知道，现在Python2已经停止维护了，Python社区现只管Python3了，并且以后再说Python其实都是指Python3。本文当中除非特别说明，否则也都是Python3。</p>

<p>虽然说Python2已经停止维护了，但是由于历史的原因很多三方的库未能及时升级到Python3，所以现在的操作系统中仍会把两个版本的Python都集成，Python2的版本一般会是2.7.x，而Python3的版本一般会是3.7.x或者3.8.x。反正不会是最新的3.11或者3.14。</p>

<p>操作系统默认的命令python一般都仍指向Python2，而命令python3才是指向Python3。所以在使用解释器或者指定解释器的时候要注意。</p>

<p><strong>注意</strong>：操作系统一般把程序安装某个位置，然后在系统路径中只添加指向其安装位置的<a href="https://www.geeksforgeeks.org/soft-hard-links-unixlinux/">二进制文件的链接</a>，对于有兼容性不同版本的命令更是如此，比如/usr/bin/python，这是默认的命令，它是一个指向Python 2.7.x安装位置的一个链接。同理/usr/bin/python3也是一个链接。</p>

<p>可以用which命令来查看这些命令的最终指向：</p>

<pre><code class="bash">➜  ~ which python3
/Library/Frameworks/Python.framework/Versions/3.7/bin/python3
</code></pre>

<p>需要特别注意的是，操作系统自带的Python一般不是最新的，所以有时候可能有会升级的需要，一般用软件包管理工具如<a href="https://linux.die.net/man/8/apt-get">apt-get</a> 或者<a href="https://brew.sh/">brew</a>可以安装新版本的Python3，如3.11，但一般建议把它安装在一个不同的位置，也就是说不要直接覆盖操作系统预装的版本。并且，不要把默认链接python3指向新版本。这是因为，操作系统之所以选择特定的版本，是为了<strong>兼容性和稳定性</strong>，这个版本能保证操作系统的Python代码和库都能正常运行。如果我们用新版本覆盖了原装的，或者把默认的链接替换掉，有可能会对操作系统造成伤害，轻则发生奇怪的事情，重则可能要重装系统。</p>

<h3>交互式环境</h3>

<p><img src="https://www.circuitbasics.com/wp-content/uploads/2015/12/Python-and-python3-REPL.png" alt="" /></p>

<p>直接启动解释器会进入一个叫做<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">REPL（Read Evaluate Print Loop）</a>的环境，这是脚本语言都会有的一个环境，它的是意思读取指令（也即我们输入的Python语句），执行，打印输出，然后循环上述步骤。直到给一个退出命令(exit())才会终止。</p>

<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy82eFcyRDk0cUJqSEw1Q01lOUVHWEFKTmJmbXJIanNwbkVtOGlheDlKTE1kWU0zSUZHYmZzRHdpY25ZV1h1ZU9jamNIRjBpY1BpYmtFbWljZUo4QTRUOG5KNWljZy82NDA?x-oss-process=image/format,png" alt="" /></p>

<p>另外一个更为高级一些的<a href="https://ipython.org/">交互式Python运行环境</a>就是非常著名的<a href="https://jupyter.org/">Jupyter</a>。</p>

<h3>命令行</h3>

<p>在Python世界里<a href="https://docs.python.org/3/tutorial/modules.html">模块Modules</a>是一个代码管理的基本单元，内置的库和三方的库都包含一个或者多个Module。Python有一个特殊功能，就是可以用命令行直接执行一个Module:</p>

<pre><code class="bash">python3 -m http.server 8000
</code></pre>

<p>这就启动了一个非常简单的HTTP server。它的作用就是把一个叫做http.server的Module直接运行起来。</p>

<h3>源代码式</h3>

<p>更多的时候我们会把Python代码写入一个文件，然后再塞给解释器去执行。写一个简单的hello.py：</p>

<pre><code class="python3">#!/usr/bin/env python3
print('Hello, world')
</code></pre>

<p>然后，运行它：</p>

<pre><code class="bash">python3 hello.py
Hello, world
</code></pre>

<p>也可以直接执行hello.py</p>

<pre><code class="bash">./hello.py
Hello, world
</code></pre>

<p>这里的区别就在于，前面加了解释器的，就会用命令行中的解释器去运行。而直接执行脚本文件，则会用第一行的叫做<a href="https://linuxhandbook.com/shebang/">shebang的东西</a>来找解释器，这里就是<strong>/usr/bin/env python3</strong>，这个意思是说用操作系统中的路径中的python3来作为解释器（作为执行这个脚本的命令）。</p>

<p>那么，利用shebang就可以指定特定的Python版本来运行脚本了。比如：</p>

<pre><code class="python3">#!/usr/local/opt/python@3.11
</code></pre>

<h3>环境变量</h3>

<p>解释器在运行代码的时候用到一些库，核心module以及三方module，那么解释器是如何找到这些东西的呢？</p>

<ul>
<li>PYTHONHOME 这是解释器的安装目录，通常用作module搜索的前缀来使用</li>
<li>PYTHONPATH 这是模块module的搜索目录，默认的是sys.path，这个是由Python预定义好了的，通过PYTHONPATH指定的搜索目录会加在sys.path的前面。所以如果想指定额外的Module目录或者想替换掉默认的module时就可以使用此变量。</li>
</ul>


<p>除了一些解释器需要的底层的动态库之外，最重要的就是模块module目录了，默认的module搜索目录由sys.path定义，可以通过两种方式查看它有哪些路径：</p>

<pre><code class="bash">➜  ~ python3 -m site
sys.path = [
    '/Users/alexhilton',
    '/Library/Frameworks/Python.framework/Versions/3.7/lib/python37.zip',
    '/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7',
    '/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/lib-dynload',
    '/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages',
]
USER_BASE: '/Users/alexhilton/Library/Python/3.7' (doesn't exist)
USER_SITE: '/Users/alexhilton/Library/Python/3.7/lib/python/site-packages' (doesn't exist)
ENABLE_USER_SITE: True
</code></pre>

<p>或者通过代码：</p>

<pre><code class="python3">➜  ~ python3
Python 3.7.3 (v3.7.3:ef4ec6ed12, Mar 25 2019, 16:52:21) 
[Clang 6.0 (clang-600.0.57)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import sys
&gt;&gt;&gt; print(sys.path)
['', '/Library/Frameworks/Python.framework/Versions/3.7/lib/python37.zip', '/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7', '/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/lib-dynload', '/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages']
&gt;&gt;&gt; exit()
</code></pre>

<p>可以看到，它会包含当前路径，以及预定义的一些目录。重点看site-packages这个目录，这是所有第三方module安装的目录，Python的包管理工具pip也都是安装在些位置的。所以说，用pip安装完成后，不用特殊指定目录就能找到module。</p>

<h3>解决多版本的site-pakcages冲突</h3>

<p>每一个解释器都能找到它的site-packages，换句话说如果装了不同版本的Python，就会有多个site-packages路径。就比如，在我的电脑上面有三个版本的Python：</p>

<ul>
<li><p>Python2
系统中的默认python指向Python2
/usr/bin/python  2.7.16
site packages: &lsquo;/Library/Python/2.7/site-packages&rsquo;,</p></li>
<li><p>Python3.7
系统带有Python3，由命令/usr/local/bin/python3指向 /Library/Frameworks/Python.framework/Versions/3.7/bin/python3
site packages &lsquo;/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages&rsquo;,</p></li>
<li><p>Python3.11
由brew升级安装得到的。被安装在
二进制是在：/usr/local/opt/<a href="&#109;&#x61;&#x69;&#x6c;&#x74;&#111;&#x3a;&#x70;&#x79;&#x74;&#104;&#111;&#110;&#64;&#x33;&#x2e;&#x31;&#49;">&#112;&#x79;&#x74;&#104;&#111;&#110;&#64;&#x33;&#x2e;&#x31;&#49;</a>
site-packages  /usr/local/lib/python3.11/site-packages</p></li>
</ul>


<p>那么，假如想要把三个site-packages里面的module都得到使用的话，就可以用<strong>PYTHONPATH</strong>来把三个路径都加进来。</p>

<h2><a href="https://www.jetbrains.com/pycharm/">IDE(PyCharm)</a></h2>

<p>对于集成开发环境（IDE）来说，也是可以配置的，几乎都可以配置从解释器，到环境变量都是<a href="https://intellipaat.com/blog/tutorial/pycharm-tutorial/how-to-configure-pycharm-interpreter/?US">可以配置的</a>。</p>

<p><img src="https://intellipaat.com/blog/wp-content/uploads/2020/01/i5-768x495.png" alt="" /></p>

<h2><a href="https://pypi.org/project/pip/">pip</a></h2>

<p>pip是Python的<a href="https://pypi.org/project/pip/">包管理工具</a>，可以用它来安装Python生态中的第三方module，可以理解为apt-get之于Ubutu，brew之于Mac，只不过pip能安装都是Python的module。基础的使用教程可以<a href="https://www.runoob.com/w3cnote/python-pip-install-usage.html">看这里</a>。</p>

<p><img src="https://tse1-mm.cn.bing.net/th/id/OIP-C.lnjh5MWQRVvUHrqx4TH1SwHaHa?pid=ImgDet&amp;rs=1" alt="" /></p>

<p><strong>注意</strong>：pip是与Python版本绑定的，比如pip对应于Python2，pip3对应Python3，因为它是包管理工具，它下载的module都会安装在对应的site-packages里面，而从前面的讨论知道每个解释器是有自己的site-packages，因此pip要对其解释器对应，这样才能安装到正确的位置上。</p>

<p>这样就会有问题，比如安装了多个版本，那么最后一个安装的Python版本的pip会把之前的都覆盖掉。比如我的电脑上最后用brew安装了Python 3.11，然后pip就被替换成了python3.11的，且pip与pip3是一样的了，它安装的module都是在Python 3.11的那个site-packages里面。</p>

<pre><code class="bash">➜  ~ pip3 --version
pip 23.1.2 from /usr/local/lib/python3.11/site-packages/pip (python 3.11)
➜  ~ pip --version
pip 23.1.2 from /usr/local/lib/python3.11/site-packages/pip (python 3.11)
</code></pre>

<p>注意，因为/usr/local/bin/python3 仍链向了系统预装的python3.7，所以3.11并未有真正的安装成功，最后的系统链接并未有完全修改掉，比如python3仍指向预装的3.7。但比较神奇的是pip被替换为了3.11的。而且，它的site位置也与预装 的不一致了。因为我之前已经用pip3安装了很多三方Module，安装了Python3.11后突然报错找不到module了，原因就在于，现在pip认识的site 位置（3.11的），只有比较少的库，而原来的，仍在原来的位置。</p>

<h2><a href="https://docs.python.org/3/tutorial/venv.html">Virtual Environment</a></h2>

<p>由于可能有多个Python版本，会有不同的site-packages，可能会比较混乱，因此就有了虚拟运行环境这一个的技术，它可以为某一个项目，或者某一类项目设定一个虚拟运行环境，在这个环境里面可以安装任何module，它与宿主操作系统，和其他虚拟环境都是隔离的，互不影响。</p>

<p><img src="https://tse2-mm.cn.bing.net/th/id/OIP-C.xF4itTOl_0EWotnQsd7IJAHaEL?pid=ImgDet&amp;rs=1" alt="" /></p>

<p>虚拟环境还能解决<a href="https://www.techtarget.com/searchitoperations/definition/dependency-hell">依赖地狱问题</a>，比如A项目需要依赖一个1.0版本的module C，但B项目却需要依赖1.4版本的module C，这时如果都在操作系统本机环境去折腾就相当麻烦，也极容易打破项目的稳定性，甚至会影响操作系统的稳定性。这时虚拟环境就能很好的解决这个问题。</p>

<h3><a href="https://docs.python.org/zh-cn/3/library/venv.html">venv</a></h3>

<p>这是官方推荐的虚拟环境管理器，从Python 3.3版本就变成官方的标准module了，从Python3.6以后就是官方推荐的虚拟环境管理器。它的优点很明显，就是不需要额外安装了，且是官方支持的。缺点也很明显，就是不够强大，在软件国度里一般官方的东西都是方便易用，但不够强大。</p>

<h3><a href="https://pypi.org/project/virtualenv/">virtualenv</a></h3>

<p>这个是最为流行的虚拟环境管理器，它出现的非常早，功能也非常的强大，官方的venv其实相当于virutalenv的一个简化版本。甚至这个不单单能隔离Python，也能当成一个系统级别的虚拟环境来使用。</p>

<p>如果项目不是特别多特别复杂的话，其实用官方的venv就够了，毕竟不用折腾，直接拿过来就用了，并且大多数情况下也够用了。但如果项目很多，依赖特别复杂，那还是用virtualenv，毕竟它足够强大。</p>

<h3>How it works</h3>

<p>需要注意，所创建的虚拟环境里面用的Python版本，就是你运行venv时的Python版本，同时从上面的讨论来看，pip的版本也是与Python相关的，简单来理解，你命令行中默认的python3是3.7的，那么你创建的虚拟环境里面的Python就是3.7的，pip也是3.7的。venv的缺点是不够灵活，它只能使用操作系统中已有的Python版本，并且是在创建环境时就指定好了。</p>

<p>相比之下virtualenv就强大很多了，它能自由指定虚拟环境中的Python版本，甚至是操作系统中还未安装的版本，它的指定方式是在创建环境通过参数-p来指定，当然，如果你不指定，它也是用运行virtualenv所使用的那个Python版本。</p>

<p>此外，virtualenv还能继承操作系统中的site-packages，这就更为强大了，可以减少一些非常基础的module的重复安装。总之virtualenv相当强大，建议还是直接上virtualenv。</p>

<h3>实在不行就上<a href="https://www.docker.com/">Docker</a></h3>

<p>其实最为彻底，最为专业的应用级别虚拟化环境就是docker了，venv或者virtualenv仅是隔离Python的依赖环境，一般来说一个应用也会用到Python以外的东西或者影响到运行环境的，即使它是用Python编写的，所以如果 想彻底一些隔离，那就直接<a href="https://www.docker.com/get-started/">上Docker</a>。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://www.knowledgehut.com/blog/programming/run-python-scripts">How To Run Your Python Scripts</a></li>
<li><a href="https://indianpythonista.wordpress.com/2018/01/04/how-python-runs/">How Python runs?</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/341481537">python虚拟环境管理工具venv教程</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/338424040">Python虚拟环境Virtualenv详解</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/269805011">如何使用 virtualenv 创建 Python 虚拟环境？</a></li>
<li><a href="https://www.infoworld.com/article/3239675/virtualenv-and-venv-python-virtual-environments-explained.html">Virtualenv and venv: Python virtual environments explained</a></li>
<li><a href="https://www.cnblogs.com/doublexi/p/15783355.html">python多环境管理（venv与virtualenv）</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python字符串编码答疑]]></title>
    <link href="http://toughcoder.net/blog/2020/03/06/understanding-python-string-encoding/"/>
    <updated>2020-03-06T22:21:49+08:00</updated>
    <id>http://toughcoder.net/blog/2020/03/06/understanding-python-string-encoding</id>
    <content type="html"><![CDATA[<h2>Python 2中的字符串分类</h2>

<p>在Python 2中字符串，有两个类型，一个是str，一个是unicode。str可以理解为ASCII的字符列表，说白了，只能存储ASCII字符，如果赋个中文值，会报错；而unicode是支持非ASCII字符的。这个与C语言中的字符非常类似char[]只能存ASCII字符串，而wchar[]才可以存储Unidcode字符串。</p>

<p><a href=""><img src="https://www.kodefork.com/media/uploads/articles/2019/06/23/python-strings.png"></a></p>

<!-- more -->


<p>可以用如下方式来安全的转换两种字符串：</p>

<pre><code class="python">def to_str(foo):
   if foo instanceof unicode:
      return str(foo)
   else:
      return foo

def to_unicode(bar):
   if bar instanceof str:
      return unicode(bar)
   else:
      return bar
</code></pre>

<p>对于字面字符串，前面加上u来标识是一个unicode，否则会当成str：</p>

<pre><code class="python">a = 'this is a string'
b = u'nah, I am a unicode'
</code></pre>

<h2>Python 3中的字符串分类</h2>

<p>由于Python 2中的混乱，所以到了Python 3里面，有了新的定义，字符串类型是str，支持Unicode，另外多了一个类型bytes，可以理解为byte的列表，也即是0&lt;=且&lt;=256的无符号整数，或者说是ASCII字符，简单来理解意思是一样的。这个就与Java语言类似了，如同Java中一样，String支持unicode，另专门有byte类型。另外，对于字面字符串也无需要再要标识了。</p>

<p>str与bytes之间的关系与区别是，str是给人看的，而bytes是给机器看的，bytes是str的底层实现。所以，bytes处理起来更快，效率更高，一些底层的IO库以及像网络IO，用的数据 一般都是bytes。它们之间是可以互转的：</p>

<ul>
<li>str转为bytes叫encode</li>
<li>bytes转为str叫decode</li>
</ul>


<p>在转换的时候还需要指定编码格式，这个编码格式就是unicode的编码方式，默认是&#8217;utf-8&#8217;，这里就涉及Unicode编码解码的相关知识了，常见的就是&#8217;utf-8&#8217;，&#8217;unicode&#8217;，以及&#8217;gbk&#8217;等。可以用如下方法来安全的转换：</p>

<pre><code class="python">def to_bytes(foo):
   if foo instanceof str:
      return foo.encode()
   else:
      return foo
def to_str(bar):
   if bar intanceof bytes:
      return bar.decode()
   else:
      return bar
</code></pre>

<h2>注意区分两个编码格式</h2>

<p>需要注意区分两个编码格式的设置，一个是指定程序里面字符串的编码，如在encode()和decode()时指定编码格式。</p>

<p>另外，一个就是程序源文件的编码格式，这个容易被忽略，要详细说下：程序的源码，其实就是一个文本文件，对吧，那么这个文本文件也是要指定编码格式的，常规来说，Python程序应该都是ASCII字符，所以默认的呢Python解释器，是按照ASCII文本的方式来处理代码源文件，但我们代码里面是会出现Unicode字符的，比如字面字符串，或者写的注释，如果 不进行特殊的设置解释器会报错的，因为出现了它不认识的字符。这时就需要对源码文件设置一下编码格式，把这句加在代码源文件的最上面，就好了：</p>

<pre><code class="python"># -*- coding: utf-8 -*-
</code></pre>

<h2>如何解决未知编码格式</h2>

<p>关于编码最容易遇到的就是UnicodeDecodeError，后面跟着一坨详细信息，这个错误就是告诉你编码时出问题了，通常有两类错误：</p>

<ul>
<li><p>UnicodeDecodeError: &lsquo;ascii&rsquo; codec can&rsquo;t decode byte 0xe4 in position 0: ordinal not in range(128)</p>

<p>这个通常是在Python 2时会遇到，原因简单的来说就是把unicode当成了string，或者源码文件的编码格式不对。解决的办法就是按照 上面介绍的安全转换方法，另外要设置一下源码文件的编码格式，这个问题自然可解。</p></li>
<li><p>Python3.6 UnicodeDecodeError: &lsquo;utf8&rsquo; codec can&rsquo;t decode byte 0xb2 in position 24137: invalid start byte</p>

<p>这个通常是在Python 3时面遇到的，后面的具体信息会不一样，这个问题会发生在bytes转化为string，decode时会报出，原因就是指定的解码方式与真实的不匹配，无法成功decode，比如，bytes是「gtk」的，但是用&#8217;utf-8&#8217;去decode肯定会失败。这个问题，在写爬虫或者一些文本处理时经常遇到，因为来源的编码方式不固定。</p>

<p>这个问题，如果想要根解，必须预知来源bytes的编码格式，但这通常不可能，所以可行的一条方案是，用一坨编码方式来不停的尝试：</p>

<pre><code class="python">def safe_decode(source):
   encodeings = ['utf-8', 'gbk', 'utf-16']
   for en in encodeings:
      try:
         return source.decode(en)
      except UnicodeDecodeError as e:
         print('Failed: ', e)
   return source
</code></pre></li>
</ul>

]]></content>
  </entry>
  
</feed>
