<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Kotlin | 稀有猿诉]]></title>
  <link href="http://toughcoder.net/blog/categories/kotlin/atom.xml" rel="self"/>
  <link href="http://toughcoder.net/"/>
  <updated>2023-01-24T23:16:44+08:00</updated>
  <id>http://toughcoder.net/</id>
  <author>
    <name><![CDATA[Alex Hilton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Understanding Kotlin Functions]]></title>
    <link href="http://toughcoder.net/blog/2023/01/24/understanding-kotlin-functions/"/>
    <updated>2023-01-24T16:43:37+08:00</updated>
    <id>http://toughcoder.net/blog/2023/01/24/understanding-kotlin-functions</id>
    <content type="html"><![CDATA[<p>函数对于编程语言来说是极其重要的一个组成部分，函数可以视为是程序的执行，是真正活的代码，为啥呢？因为运行的时候你必须要执行一个函数，一般从主函数入口，开始一个套一个的函数调用。函数更能体现程序的运行。特别是近些年函数式编程的编程范式开始广泛流行，让函数的地位再次在各种语言中都得到了极大的进升。对于任何一门编程语言，如果没有学好函数，那就相当于没有学，今天就要深入的学习一下Kotlin中的函数。</p>

<p><a href=""><img src="https://cdn.codetober.com/wp-content/uploads/2018/11/02121424/kotlin_functions_title-660x320.png" title="auto auto" ></a></p>

<!-- more -->


<h2><a href="Functions%EF%BB%BF">函数</a>的基本使用</h2>

<p>函数(Functions)在Kotlin中的一级对象，这就意味着它能像其他类型那样，可以声明变量，可以当作参数传递，可以在函数内部定义，先从基本的使用开始。</p>

<h3>函数的声明与定义</h3>

<p>用<strong>关键字fun</strong>来声明函数，然后是<strong>函数名字，参数列表，返回值</strong>和<strong>函数体</strong>：<em>修饰符</em> fun <em>函数名</em>(<em>参数列表</em>) <em>:返回类型</em> {<em>函数体</em>}</p>

<ul>
<li>修饰符，对于类的成员函数才有，一般是权限open/private</li>
<li>fun，用于声明这是一个函数的关键字</li>
<li>函数名，就像变量名一样，是函数的名字</li>
<li>(参数列表)，要用括号约束起来，就是变量的声明，多个要用逗号分隔</li>
<li>:返回类型，注意冒号，也即是函数返回值的类型，如果很明显类型可以推断出来时，就可以省略</li>
<li>{函数体}，也即函数的真实定义部分，想要执行的一些语句</li>
</ul>


<p>如：</p>

<pre><code class="kotlin">fun double(x: Int): Int {
     return x + x
}
</code></pre>

<p>这就是一个标准的函数。</p>

<h3>函数的使用</h3>

<p>函数的使用有三种，一是调用，另一种是声明变量，再有就是当作参数（这其实是在定义一个变量，然后当作参数）。</p>

<h4>函数的调用</h4>

<p>函数都是表达式，都有返回值，但可以不用管返回值，调用函数的时候用括号来标识，比如前面的函数double，可以这样来调用：</p>

<pre><code class="kotlin">val dx = double(5)
</code></pre>

<p>这是函数最为常用的使用方法，因为程序最终要执行，所以所有的函数最终都是要被调用的。</p>

<h4>声明函数变量</h4>

<p>前面说了，函数是一级类型，它可以像其他类型那样去定义变量，比如前面的double也可以这来写：</p>

<pre><code class="kotlin">    val myDouble = {x: Int -&gt; x + x}
    println(myDouble(6))
</code></pre>

<p>这里的myDouble就是一个函数变量，它的函数类型与前面的double是一样的，它是一个变量，要想执行它的函数体要加括号。</p>

<h4>把函数当作参数</h4>

<p>这里会涉及<a href="https://kotlinlang.org/docs/lambdas.html#higher-order-functions">高阶函数</a>，高阶函数就是涉及函数中的函数，主要体现在函数的参数或者返回值也是一个函数。比如数组和集合的过滤(filter)和遍历(forEach)里面的参数就是一个函数：</p>

<pre><code class="kotlin">    val asc = arrayOf(1, 2, 3, 4, 5)
    asc.filter({(it and 0x01) == 0}).map(myDouble).forEach({ println(it) })
    // output-&gt; 4, 8
</code></pre>

<p>因为把函数当作参数传递时都涉及<a href="https://kotlinlang.org/docs/lambdas.html#function-types">函数的类型定义</a>，而一般情况下用<a href="https://kotlinlang.org/docs/lambdas.html">lambda</a>是最方便的，先有个印象，后面会详细讲解。</p>

<h3>参数</h3>

<p>函数的参数还有两种比较有用的变体，称之为命名参数和默认值，这两个通常会一起使用。</p>

<h4><a href="https://kotlinlang.org/docs/functions.html#named-arguments">命名参数</a></h4>

<p>当一个函数的参数比较多时，那么在调用时想要传递参数就比较蛋疼，特别是还有相同类型的参数的时候，一片混乱，比如：</p>

<pre><code class="kotlin">fun log(tag: String, event: String, source: String, amount: Int, price: Float, persist: Boolean): Unit {
    println("$tag, $event, $amount $price")
    if (persist) {
        // write to file
    }
}

log("func", "Function arguments", "Hard way", 5, 2.3f, false)
</code></pre>

<p>这样调用，参数太多了，并且相同类型的有三个，这三个极容易传错，而且因为类型检查 不会报错，可能会引发极难调试的bug。</p>

<p>这时就可以使用命名参数来缓解了，命名参数，就是在调用函数，传递参数的时候，指定参数的名字，即就是在声明函数时参数的名字，用以指定具体参数，然后这时就可不用管参数的相对顺序了，比如上面的函数也可以这样调用：</p>

<pre><code class="kotlin">   log(event = "Named arguments",
        tag = "func",
        source = "Elegant",
        amount = 5,
        persist = false,
        price = 100f
    )
</code></pre>

<p>不会出错，而且可读性大大加强。但需要注意的是，如果要使用命名参数，就要保持一致性，给所有的参数都要命名。所以，当参数比较多的时候还是比较蛋疼，这时就需要用到参数默认值了。</p>

<h4><a href="https://kotlinlang.org/docs/functions.html#default-arguments">参数默认值</a></h4>

<p>默认值也即是在声明参数的时候指定一个默认值，在调用的时候可以省略这个参数了，比如：</p>

<pre><code class="kotlin">fun foo(x: Int, y: Int = 0): Int {
    return x + y
}

fun afoo(x: Int = 0, y: Int): Int {
    return x - y
}

foo(3)
afoo(y = 5)
</code></pre>

<p>注意，如果默认参数是最后一个参数，那么可以直接省略它，如示例中的foo(3)，但如果默认参数不是最后一个，想省略的话，必须要用命名参数，如afoo(y = 5)。当然了，两个参数都传也可以的：</p>

<pre><code class="kotlin">foo(3, 5)
afoo(3, 5)
</code></pre>

<p>所以要把默认值和命名参数结合起来才能发挥最大的价值：</p>

<pre><code class="kotlin">fun log(tag: String, event: String, source: String = "Elegant", amount: Int = 0, price: Float, persist: Boolean = false): Unit {
    println("$tag, $event, $amount $price")
    if (persist) {
        // write to file
    }
}

    log(event = "Named arguments",
        tag = "func",
        price = 100f
    )
</code></pre>

<p>把握一下<strong>使用原则</strong>：如果参数不多（4个以内），那么就把默认参数往后放，调用的时候也可以不用命名参数，直接省略默认参数就好；如果参数比较多，也要把默认参数往后放，在调用的时候尽可能的使用使用参数。</p>

<h3><a href="https://kotlinlang.org/docs/functions.html#explicit-return-types">返回值</a></h3>

<p>函数的返回值是在参数列表之后，函数体之前用冒号加类型来声明。</p>

<pre><code class="kotlin">fun printHello(name: String?): Unit {
    if (name != null)
        println("Hello $name")
    else
        println("Hi there!")
    // `return Unit` or `return` is optional
}
</code></pre>

<p>如果函数没有返回值就用Unit来声明，相当于Java中的void，但更多的时候是可以省略的：</p>

<pre><code class="kotlin">fun printHello(name: String?) { ... }
</code></pre>

<p>当<a href="https://kotlinlang.org/docs/functions.html#single-expression-functions">函数体只有一个表达式</a>的时候，这个时候可以省略掉函数体，而把表达式直接写在函数声明的后面，用<strong>赋值符=</strong>来连接，如前面的double也可以这样写：</p>

<pre><code class="kotlin">fun double(x: Int): Int = x + x
</code></pre>

<p>这个时候，因为函数体只有一个表达式，所以返回类型很容易推断出来，意味着这时返回类型的声明也可以省略掉：</p>

<pre><code class="kotlin">fun double(x: Int) = x + x
</code></pre>

<p>这会让代码非常的简洁，又不失可读性。</p>

<h3>尾部lambda参数传递</h3>

<p>前面说了函数可以作为参数传递给其他函数，但我们在使用的时候，一般会直接把一个lambda传递进去，比如说：</p>

<pre><code class="kotlin">fun execute(a: Int, f: (Int)-&gt;Int): Int {
    if (a &lt; 0) {
        return -1
    }
    return f(a)
}
</code></pre>

<p>调用的时候，可以这样：</p>

<pre><code class="kotlin">execute(3, { it * it })
</code></pre>

<p>但更建议的方式是把lambda放到函数调用之外：</p>

<pre><code class="kotlin">execute(5) { it + it }
</code></pre>

<p>再比如像集合的函数式写法，通常也只传递一个lambda，这时一般都写在函数调用之外，并且当目标函数没有其他参数时也即除了要传入的lambda外无其他参数时，代表函数调用的括号也可以省略：</p>

<pre><code class="kotlin">val nums = arrayOf(1, 2, 3, 4, 5)
nums.filter { it and 0x01 == 0 } // 等同于filter({ it and 0x01 == 0 })
        .map { it * it } // 等同于map({ it * it })
        .forEach { println(it) } // 等同于forEach({ println(it) })
</code></pre>

<p>这样写非常的简洁，但会牺牲一些可读性，因为花样多了，就会比较难识别出来函数的声明与函数的调用，甚至有时候会分不清函数与普通的变量。所以，识别<strong>函数调用</strong>有两种方式，一是看<strong>有没有括号</strong>，另外就看<strong>有没有尾部lambda</strong>。</p>

<h2>匿名函数</h2>

<h2>内部函数</h2>

<h2>高阶函数</h2>

<h2>lambda表达式</h2>

<p><img src="https://oracle-patches.com/images/2021/02/12/Kotlin_Lambda_expressions_large.jpg" alt="" /></p>

<h2>内联函数</h2>

<h2>操作符重载</h2>

<h2>参考资料</h2>

<ul>
<li><a href="https://www.geeksforgeeks.org/kotlin-functions/">Kotlin functions</a></li>
<li><a href="https://www.geeksforgeeks.org/kotlin-default-and-named-argument/?ref=lbp">Kotlin | Default and Named argument</a></li>
<li><a href="https://www.cnblogs.com/Jetictors/p/8647888.html">Kotlin——高级篇（一）：Lambda表达式详解</a></li>
<li><a href="https://www.baeldung.com/kotlin/lambda-expressions">Lambda Expressions in Kotlin</a></li>
<li><a href="https://www.yiibai.com/kotlin/lambdas.html">Kotlin lambda表达式</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kotlin Controls and Expressions]]></title>
    <link href="http://toughcoder.net/blog/2023/01/21/kotlin-controls-and-expressions/"/>
    <updated>2023-01-21T17:06:32+08:00</updated>
    <id>http://toughcoder.net/blog/2023/01/21/kotlin-controls-and-expressions</id>
    <content type="html"><![CDATA[<p>有结果返回的是表达式，没有返回的称之为语句，语句最大的问题是它没有返回值，那么想要保存结果就必然会产生副作用，比如改变变量。很多时候这是不够方便的，并且在多线程条件下，这甚至是不安全的。Kotlin中，为了加强线程安全性和方便并发和异步，因此绝大多数语句都是表达式。</p>

<p><a href=""><img src="https://www.jrebel.com/sites/default/files/image/2021-01/what%20is%20kotlin%20banner%20image.png" title="auto auto" ></a></p>

<!-- more -->


<h2>分支表达式</h2>

<p>Kotlin中没有三元条件符（a > b ? a : b)，但它的<strong>条件分支都是表达式</strong>，可以直接放在赋值符的右边，或者用在return语句中。</p>

<h3><a href="https://kotlinlang.org/docs/control-flow.html#if-expression">if表达式</a></h3>

<p>它是一个两个分支的表达式，是有返回值的：</p>

<pre><code class="kotlin">val maxV = if (a &gt; b) a else b
</code></pre>

<p>当然了，把它当作常规的语句来使用也是没有问题的：</p>

<pre><code class="kotlin">var max: Int
if (a &gt; b) {
    max = a
} else {
    max = b
}
</code></pre>

<h3><a href="https://kotlinlang.org/docs/control-flow.html#when-expression">when表达式</a></h3>

<p>当超过2个分支时，if就不能用了，这时可以用when表达式，它支持多个分支，类似于其他语言中的switch：</p>

<pre><code class="kotlin">when (x) {
     1 -&gt; println("it is 1")
     2 -&gt; println("it is 2")
     else -&gt; {
          println("it is neight 1 nor 2")
     }
}
</code></pre>

<p>需要注意的是，每一行是一个条件，并不是单单指参数与其相等，比如：</p>

<pre><code class="kotlin">when (x) {
     in 1..5 -&gt; println("Less than 5 bigger than 1")
     x.isEven() -&gt; println("it is even")
     else -&gt; println("It is neither even or less than 5")
}
</code></pre>

<p>当然，最重要的是when是一个表达式，可以<strong>直接用在赋值符的右边，或者当参数传，或者用在return中</strong>：</p>

<pre><code class="kotlin">fun Request.getBody() =
    when (val response = executeRequest()) {
        is Success -&gt; response.body
        is HttpError -&gt; throw HttpException(response.status)
    }
</code></pre>

<p>这里的when就是函数的返回值，可以看到<strong>when是一个表达式，它会返回一个值，这个值直接作为函数的返回值</strong>。</p>

<p>从这几个示例可以看出<strong>when表达式相当强大</strong>比其他语言的switch要强大许多，并且可以直接当作返回值，当需要超过2个条件分支时就可以使用when表达式。</p>

<h2>循环语句</h2>

<p>循环是语句，与其他语言也差不多。</p>

<h3>while loop</h3>

<pre><code class="kotlin">while (x &lt; 10) {
    println(x)
    x++
}
</code></pre>

<h3>屁股向后式do-while loop</h3>

<pre><code class="kotlin">do {
  x = poll()
} while (x &lt; 10)
</code></pre>

<h3><a href="https://kotlinlang.org/docs/control-flow.html#for-loops">强大的for loop</a></h3>

<p>这个是最强大，也是最常用的循环语句遍历数组，集合和固定步长时的首选。</p>

<pre><code class="kotlin">for (item in collection) print(item)
</code></pre>

<p>这里的collection可以是数组和集合（列表和Set）。严格来说只要collection类型实现了iterator()和next()，就可以在for loop中使用。</p>

<p>for加上range，可以非常强大：</p>

<pre><code class="kotlin">for (i in 1..10) // = for (int i = 1; i &lt;= 10; i++)
for (i in 0 until 10) // = for (int i = 0; i &lt; 10; i++)
for (i in 9 downTo 0) // = for (int i = 9; i &gt;= 0; i--)
for (i in 0 until 10 step 2) // = for (int i = 0; i &lt; 10; i += 2)
</code></pre>

<p>如果是数组或者列表，但又必须要用索引，也可以直接来：</p>

<pre><code class="kotlin">for (i in array.indices) {
     println(array[i]) // 'i' is the index
}
</code></pre>

<p>其实有更好的方式：</p>

<pre><code class="kotlin">for ((index, value) in array.withIndex()) {
    println("the element at $index is $value")
}
</code></pre>

<p>其实吧，Kotlin是多范式编程语言，天生支持函数式编程，多数情况下不建议直接上for loop，而是用函数式方式的forEach，数组和集合都支持forEach的：</p>

<pre><code class="kotlin">array.forEach { println(it) }
</code></pre>

<h2><a href="https://kotlinlang.org/docs/returns.html#return-to-labels">终止语句</a></h2>

<p>当想提前退出函数的执行，或者循环时，就需要用到终止语句，有三种<strong>return, break和continue</strong>。</p>

<h3>return终止函数执行</h3>

<p>这个都比较熟悉，常规的用法都是一样的，可以提前退出函数：</p>

<pre><code class="kotlin">fun plot(x: Int) {
     if (x &lt; 1) {
         return -1
     }
     ...
     return y
}
</code></pre>

<p>但当有嵌套的lambda时，如不特别指定，return会退出外层的函数，而不是像想当然的退出lambda，比如：</p>

<pre><code class="kotlin">fun foo() {
    listOf(1, 2, 3, 4, 5).forEach {
        if (it == 3) return // non-local return directly to the caller of foo()
        print(it)
    }
    println("this point is unreachable")
}
</code></pre>

<p>这个不是终止lambda的执行，而是直接退出函数foo的执行。如果想解决呢，即也退出遍历的lambda有三种方案：</p>

<ul>
<li>使用标签</li>
</ul>


<pre><code class="kotlin">fun foo() {
    listOf(1, 2, 3, 4, 5).forEach lit@{
        if (it == 3) return@lit // local return to the caller of the lambda - the forEach loop
        print(it)
    }
    print(" done with explicit label")
}
</code></pre>

<ul>
<li>使用隐式标签，也即遍历的方法当作标签</li>
</ul>


<pre><code class="kotlin">fun foo() {
    listOf(1, 2, 3, 4, 5).forEach {
        if (it == 3) return@forEach // local return to the caller of the lambda - the forEach loop
        print(it)
    }
    print(" done with implicit label")
}
</code></pre>

<ul>
<li>使用匿名函数而不是lambda，匿名函数与常规函数体效力一样，所以return只在函数体内生效
<code>kotlin
fun foo() {
  listOf(1, 2, 3, 4, 5).forEach(fun(value: Int) {
      if (value == 3) return  // local return to the caller of the anonymous function - the forEach loop
      print(value)
  })
  print(" done with anonymous function")
}
</code></li>
</ul>


<p>这三种方式，如果非要使用，建议使用方式二，用自带的隐式label，因为比较方便，可读性也不差。</p>

<p>但，<strong>非常不建议如此使用return语句</strong>，这本是应该避免的问题，lambda多半是用在函数式遍历和处理，在lambda里面提加return本就是非常奇怪的事情。因为如果某些条件不满足，<strong>想不执行此lambda，应该用filter啊</strong>，而不是笨拙的非要在lambda中去终止：</p>

<pre><code class="kotlin">fun foo() {
    listOf(1, 2, 3, 4, 5)
        .filter(i -&gt; i != 3)
        .forEach { println(it) }
    print("You can do whatever you like here.")
}
</code></pre>

<h3>循环的终止</h3>

<p>break终止当前循环，continue则是跳过当前循环的当前步骤，直接跳到下一次迭代。这两个的常规使用与其他语言是一样的。</p>

<p>但对于break，一般来说有一个痛点，就是当有循环嵌套时，break只能终止一层，如果想终止所有循环时，只能再手动的加条件去判断，然后再一层一层的break，比如:</p>

<pre><code class="kotlin">for (i in 0 until 10) {
   var found = false
   for (j in i until 10) {
       if (array[i] + array[j] == target) {
           found = true
           break // only break inner for loop
       }
   }
   if (found) {
       break // this break outer for loop
   }
}
</code></pre>

<p>这多少有点笨拙和丑陋，Kotlin有更优雅的解决方式，就是引入了<strong>标签label</strong>，可以给循环加上标签，在break时可以指定标签，同样是上面的情况，可以这样做：</p>

<pre><code class="kotlin">loop@ for (i in 0 until 10) {
   for (j in i until 10) {
       if (array[i] + array[j] == target) {
          break @loop // break all loops easily
       }
   }
}
</code></pre>

<p>其实吧，这玩意儿跟当年的goto是一样的，虽然可行，但<strong>不建议多使用</strong>，<strong>标签多了以后会让程序的执行更加的混乱</strong>，试想假如在层层循环中break错了某个标签，调试的难度是相当大的。更多的时候需要仔细想想有没有更好的遍历方式，而不是靠标签来救命。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kotlin Types and Operators]]></title>
    <link href="http://toughcoder.net/blog/2023/01/19/kotlin-types-and-operators/"/>
    <updated>2023-01-19T15:16:43+08:00</updated>
    <id>http://toughcoder.net/blog/2023/01/19/kotlin-types-and-operators</id>
    <content type="html"><![CDATA[<p><a href="https://kotlinlang.org/">Kotlin</a>是新一代的基于JVM的静态多范式编程语言，功能强大，语法简洁，前面已经做过<a href="https://en.wikipedia.org/wiki/Kotlin_(programming_language)">Kotlin</a>的基本的介绍，今天就来深入的学习一下它的数据类型和运算操作符。</p>

<p><a href=""><img src="https://cdn.educba.com/academy/wp-content/uploads/2019/08/Kotlin-Operators-.2.png" title="auto auto" ></a></p>

<!-- more -->


<h2>数据类型</h2>

<p>与大部分语言不同的是，在Kotlin中一切皆为对象(Everything is an object)，它没有像Java/C++那样，是没有基础数据类型(primitive types)的，都是对象，因此也不会有像Java那样的box和auto box的麻烦。box和autobox对于单独使用基础数据类型时没啥问题，比如一个方法add(Integer)，会进行自动装箱和拆箱。但如果在集合中使用就不一样了，比如array of int与array of Integer是完全不同的数据类型，以及list of int与list of Integer也是完全不同的数据类型，在这些场景里就会相当麻烦，要进行转换，详细可以<a href="http://toughcoder.net/blog/2022/06/14/java-collection-opertions-made-easy/">参考这篇文章</a>。</p>

<h3>变量类型的声明</h3>

<p>类型是放在变量之后，这样可以先强调变量的名字，后关注其类型，如：</p>

<pre><code class="kotlin">var count: Int
var message: String
fun double(x: Int): Int {
      return x + x
}
</code></pre>

<h3>类型推断</h3>

<p>虽然Kotlin是<strong>静态强类型语言</strong>，也就是说在编译的时候，编译器必须知道你的数据是什么类型的，这与Java和C++等是一样的，但并不意味着你必须为每个变量声明它的类型。变量的声明，是告诉编译器有一个什么类型的变量，以及叫什么，就比如在函数中的参数列表，就是变量的声明；而变量的定义，则是在声明的同时，要给变量赋值。</p>

<p>那么，当定义变量的时候，编译器是能够直接推断出来它的类型的，这个时候就可以省去类型的声明，<strong>Kotlin语言力求简洁</strong>，凡是能<strong>推断出变量的类型时都可以省去类型的声明</strong>，如定义变量的时候，如在lambda中，或者在函数的返回值中。</p>

<pre><code class="kotlin">val PI = 3.14 // Double
val PI: Double = 3.14 // 与上面的效果一样
</code></pre>

<h3>数字类型(Numbers)</h3>

<p>数字类型与大部分语言一样，特别的，它与Java语言是一样的，都是有符号的，即数字最高数位代表符号。</p>

<h4>整数</h4>

<p>与Java语言一样，有四大整数具体类型，8位的Byte，16位的Short，32位的Int以及64位的Long。它们的范围如下：</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> Type </th>
<th style="text-align:center;"> Size(bits) </th>
<th style="text-align:left;"> Min value </th>
<th style="text-align:left;"> Max value </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> Byte </td>
<td style="text-align:center;"> 8 </td>
<td style="text-align:left;"> -128 </td>
<td style="text-align:left;"> 127 </td>
</tr>
<tr>
<td style="text-align:center;"> Short </td>
<td style="text-align:center;"> 16 </td>
<td style="text-align:left;"> -32768 (-2<sup>15</sup>) </td>
<td style="text-align:left;"> 32767 (2<sup>15</sup> - 1) </td>
</tr>
<tr>
<td style="text-align:center;"> Int </td>
<td style="text-align:center;"> 32 </td>
<td style="text-align:left;"> -2,147,483,648 (-2<sup>31</sup>) </td>
<td style="text-align:left;"> 2,147,483,647 (2<sup>31</sup> - 1) </td>
</tr>
<tr>
<td style="text-align:center;"> Long </td>
<td style="text-align:center;"> 64 </td>
<td style="text-align:left;"> -9,223,372,036,854,775,808 (-2<sup>63</sup>) </td>
<td style="text-align:left;"> 9,223,372,036,854,775,807 (2<sup>63</sup> - 1) </td>
</tr>
</tbody>
</table>


<p>当然了，每个类型都有其<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/-m-a-x_-v-a-l-u-e.html">最大值</a>和<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/-m-i-n_-v-a-l-u-e.html">最小值</a>的常量可以直接引用，不用自己手动写。另外需要注意的是非10进制的字面常量都是二的补码形式，并不是直观的二进制，详细的可以参考<a href="http://toughcoder.net/blog/2022/03/08/java-integer-basics/">另外一篇文章</a>。</p>

<h4>浮点数</h4>

<p>有Float和Double，它们的定义如下：</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> Type </th>
<th style="text-align:center;"> Size (bits) </th>
<th style="text-align:center;"> Significant bits </th>
<th style="text-align:center;"> Exponent bits </th>
<th style="text-align:center;"> Decimal digits </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> Float </td>
<td style="text-align:center;"> 32 </td>
<td style="text-align:center;"> 24 </td>
<td style="text-align:center;"> 8 </td>
<td style="text-align:center;"> 6-7 </td>
</tr>
<tr>
<td style="text-align:center;"> Double </td>
<td style="text-align:center;"> 64 </td>
<td style="text-align:center;"> 53 </td>
<td style="text-align:center;"> 11 </td>
<td style="text-align:center;"> 15-16 </td>
</tr>
</tbody>
</table>


<p><br/></p>

<h4>字面常量(Literals)</h4>

<p>字面常量是指直接写在代码中的数字，默认的是Int和Double，如果需要指定类型，可以用标记或者给变量指定类型，如：</p>

<pre><code class="kotlin">val one = 1 // Int
val threeBillion = 3000000000 // Long, exceeding Int, so it is Long
val aLong = 1L // mark it as Long
val oneByte: Byte = 1 // Byte
val e = 2.7182818284 // Doubleval eFloat = 2.7182818284f // Float, actual value is 2.7182817
</code></pre>

<p>常见的语法糖：</p>

<ul>
<li>浮点数可以用乘方形式如123.5e10</li>
<li>可以下划线(underscore)来加强可读性，如1_000_000</li>
<li>16进制用0x打头，如0xFF_AB</li>
<li>二进制用0b打头，如0b1101_1111</li>
</ul>


<h3>布尔类型(Booleans)</h3>

<h3>字符类型(Characters)</h3>

<p>用两个单引号来表示，如val ch = &lsquo; &rsquo;</p>

<h3>字符串类型(Strings)</h3>

<p>可以视为字符的数组，是一个<strong>不可变对象(immutable object)</strong>，用两个双引号来表示，如</p>

<pre><code class="kotlin">val message = "Hello, world"
</code></pre>

<p>字符串拼接用<strong>加号+</strong>：</p>

<pre><code class="kotlin">val name = "John"
val message = "Hello" + name
</code></pre>

<p>当然了，直接用加号拼接效率不好，一般情况下可以直接用字符串模板更好一些。</p>

<h4>字符串模板</h4>

<p>这是一个强大且方便的内置功能，相当于简化版本的String.format，可以在字符串用<strong>美元符&#36;</strong>来引用一个变量的值，如果是有方法调用或者运算或者成员引用等情况可以加花括号：</p>

<pre><code class="kotlin">val name = "John"
val message = "Hello, $name"
println("Length is ${name.length}")
</code></pre>

<h4>字符遍历</h4>

<p>与Java不同的是，字符串在Kotlin里面更像是字符数组，或者说一个列表，因此可以直接遍历：</p>

<pre><code class="kotlin">val mesage = "The quick fox jumps over the lazy dog"
for (ch in message) {
     println(ch)
}
</code></pre>

<p><strong>in</strong>是一个强大的操作符，可以用于集合的遍历。另外，字符串可以像列表一样进行函数式的操作，如判断是否包含某个字符：</p>

<pre><code class="kotlin">if (message.any {it == ch}) {
   println("$ch is in $message")
}
</code></pre>

<h3><a href="https://kotlinlang.org/docs/arrays.html">数组类型</a>(Arrays)</h3>

<p>数组Array<T>是一个具体类型为T的数组，这是通用的数组，另外还有一种就是基本数组类型数组，我们分别来看一下</p>

<h4>通用对象数组 Array&lt;T&gt;</h4>

<p>这是适用于所有对象的数组，有两种构造方式，一是通过arrayOf()，直接传入数组的具体值，另外就是用构造方法Array(size)</p>

<pre><code class="kotlin">val heights = arrayOf(240, 360, 480, 640)
val classes = arrayOf("John", "Harden", "Kevin", "Stephen")
val guards: Array&lt;String&gt; = Array(5)
guards[0] = "Stephen"
guards[1] = "Kevin"
</code></pre>

<p>还有一种用lambda方式来构造数组，可以非常方便的实现数组的定义：</p>

<pre><code class="kotlin">val asc = Array(5) { i -&gt; (i * i).toString() }
// asc = ["0", "1", "4", "9", "16"]
</code></pre>

<p>需要注意的是这里的类型T都是对象。但其实，对于基础类型的数组，如果都box成为对象效率并不高，虽然Kotlin中并没有真的基础数据类型，但涉及到数组这种批量的数据时，使用基础类型能提升很大的效率，因此还有专门用于基础类型的数组类型。</p>

<h4>基础类型数组 IntArray和FloatArray</h4>

<p>其实有很多，基础的类型都有IntArray, ByteArray, ShortArray, FloatArray, DoubleArray。而且需要注意的是Array&lt;Int&gt;与IntArray是两个数组类型，它们并不一样，这个区别与Java中的Integer[]和int[]是类似的。而且IntArray与Array&lt;T&gt;也没什么关系，也不是什么继承关系。但是它们表现出来的使用方法是一样的。</p>

<pre><code class="kotlin">val heights = intArrayOf(240, 360, 480, 640)
val squares = IntArray(5) { i -&gt; i * i } // [0, 1, 4, 9, 16]
val arr = IntArray(5) { 42 } // [42, 42, 42, 42, 42]
val bundle = arrayOf(intArrayOf(1080, 720), intArrayOf(1920, 1080)) // bundle type is Array&lt;IntArray&gt;
</code></pre>

<h2>运算操作符</h2>

<p>运算操作符与大部分语言是一样的。</p>

<h3>算术运算符</h3>

<p>也即是常规的算术操作符，<strong>+(加) -(减）&#42;(乘) /(除) %(取模)</strong>，这些都是二元操作符，也就是需要两个操作数才能使用。</p>

<p>还有单元操作符，如<strong>自增++自减&ndash;</strong>，当然也分前置和后置，区别与Java/C++中一样。</p>

<p>操作符与<strong>赋值符=</strong>可以配合一起使用，如a += b等同于a = a + b，a /= c等同于 a = a / c</p>

<h3>逻辑运算符</h3>

<p>双元操作符: <strong>&amp;&amp; 逻辑与，|| 逻辑或</strong>，它们的操作数必须 是布尔型，且返回值也是布尔。</p>

<p>与其他语言一样，这两个操作符是short-circiut的或者说是lazy的，也即a &amp;&amp; b，如果a是false，那就不去管b了，因为不影响结果；a || b也一样，如果a是true就不去管b了。</p>

<p>还有单元操作符<strong>! 逻辑非</strong>。一个有意思的地方在于，逻辑非可以与一些操作符合起来使用，而不是直接写在表达式之外，比如，下面两种写法等效：</p>

<pre><code class="kotlin">if (!(a in asc)) {...}
if (a !in asc) {...}
if (b !is Array) {...}
if (!(b is Array)) {...}
</code></pre>

<h3>位运算符</h3>

<p>位运算符比较特殊，与大部分语言不一样。</p>

<h4>移位</h4>

<table>
<thead>
<tr>
<th style="text-align:center;"> 操作符 </th>
<th style="text-align:left;"> 含义 </th>
<th style="text-align:left;"> 示例 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> shr </td>
<td style="text-align:left;"> 向右移位 </td>
<td style="text-align:left;"> a shr 1 </td>
<td style="text-align:left;"> 把a向右移1位 </td>
</tr>
<tr>
<td style="text-align:center;"> shl </td>
<td style="text-align:left;"> 向左移位 </td>
<td style="text-align:left;"> a shl 1 </td>
<td style="text-align:left;"> a向左移1位 </td>
</tr>
<tr>
<td style="text-align:center;"> ushr </td>
<td style="text-align:left;"> 无符号向右移位 </td>
<td style="text-align:left;"> a ushr 1 </td>
<td style="text-align:left;"> （包含符号位）向右移1位 </td>
</tr>
</tbody>
</table>


<h4>按位逻辑运算</h4>

<table>
<thead>
<tr>
<th style="text-align:center;"> 操作符 </th>
<th style="text-align:left;"> 含义 </th>
<th style="text-align:left;"> 示例 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> and </td>
<td style="text-align:left;"> 按位与</td>
<td style="text-align:left;"> a and 1 </td>
<td style="text-align:left;"> a与1按位与 </td>
</tr>
<tr>
<td style="text-align:center;"> or </td>
<td style="text-align:left;"> 按位或 </td>
<td style="text-align:left;"> a or 1 </td>
<td style="text-align:left;"> a与1按位或 </td>
</tr>
<tr>
<td style="text-align:center;"> xor </td>
<td style="text-align:left;"> 按位异或 </td>
<td style="text-align:left;"> a xor 1 </td>
<td style="text-align:left;"> a与1按位异或 </td>
</tr>
<tr>
<td style="text-align:center;"> inv </td>
<td style="text-align:left;"> 按位取反 </td>
<td style="text-align:left;"> inv(a) </td>
<td style="text-align:left;"> 把a按位取反 </td>
</tr>
</tbody>
</table>


<p>这些操作符看起来可能比较怪，然后更怪异的是位运算操作符<strong>不能</strong>与<strong>赋值符=</strong>一起使用，只能这样写：</p>

<pre><code class="kotlin">a = a or b
c = c xor (1 shl 3)
</code></pre>

<p>事实上位运算不是操作符，它们是一种函数，叫做<a href="https://kotlinlang.org/docs/functions.html#infix-notation">infix函数</a>，简写了把括号省略了，看起来就像操作符一样，但它们并不是操作符。</p>

<h3><a href="https://kotlinlang.org/docs/operator-overloading.html">运算符重载</a></h3>

<p>与C++中的运算符重载类似，Kotlin中支持运算符重载，本质上它们都是对象定义的方法，但支持重载为运算符。</p>

<p>比如说加法，a + b，可以写成方法调用的形式a.plus(b)；b or c等同于b.or&copy;，!a等同于a.not()。</p>

<h3>运算符的优先级</h3>

<p>尽管是有默认的优先级的，但<strong>强烈建议使用括号</strong>以减少歧义和增强可读性，更可以避免一些难以察觉的Bug。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://kotlinlang.org/docs/basic-types.html">Basic types﻿</a></li>
<li><a href="https://www.baeldung.com/kotlin/bitwise-operators">Using Bitwise Operators in Kotlin</a></li>
<li><a href="https://www.programiz.com/kotlin-programming/bitwise">Kotlin Bitwise and Bitshift Operations</a></li>
<li><a href="https://www.programiz.com/kotlin-programming/operators">Kotlin Operators</a></li>
<li><a href="https://www.tutorialspoint.com/kotlin/kotlin_operators.htm">Kotlin - Operators</a></li>
<li><a href="https://www.geeksforgeeks.org/kotlin-operators/">Kotlin Operators</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kotlin实战学习：撸一个程序猿老黄历]]></title>
    <link href="http://toughcoder.net/blog/2018/06/09/kotlin-exercise-programmer-calendar/"/>
    <updated>2018-06-09T16:10:24+08:00</updated>
    <id>http://toughcoder.net/blog/2018/06/09/kotlin-exercise-programmer-calendar</id>
    <content type="html"><![CDATA[<h2>Talk is cheap, let&rsquo;s code</h2>

<p><a href="http://toughcoder.net/blog/2018/05/17/introduction-to-kotlin-programming-language/">前面一篇文章</a>介绍Kotlin的基础知识，但光有知识是不够的，最重要的是要能在实战中使用Kotlin，这才不枉我们学习一回。这里就用纯Kotlin来开发一个简单的Android应用，以展示如何在实际项目中使用Kotlin。</p>

<p><a href=""><img src="https://www.rootinfosol.com/sites/default/files/2017-05/Android%20kotlin%20banner.jpg" width="640"></a></p>

<h2>走上Kotlin开发之路</h2>

<p>在前面文章的尾部，我们展示了如何创建一个基于Kotlin安卓应用，但是过于简单，因为仅是代码换成了Kotlin，布局还是在用XML，这并没有用到Kotlin的全部。为了更加方便的开发Android应用，发挥Kotlin语言的巨大优势，JetBrains在发布Kotlin的同时，也发布一个专门用于Android开发的配套的库Anko，它最大的优势就是以DSL的方式来创建UI，下面我们来介绍一下Anko。</p>

<!-- more -->


<h2><a href="https://github.com/Kotlin/anko">Anko</a></h2>

<h3>Anko是什么鬼，以及为何要用它</h3>

<p>Anko库的目的是提高Android开发的效率，用Kotlin语言的优势。它有四大部分：Anko commons，Anko layouts，Anko SQLite和Anko Coroutines，这里我们不复制官方的介绍了，关于这四部分可以看一下官方的<a href="https://github.com/Kotlin/anko">wiki</a>。
其实，最大的变化就是布局，常规的Android项目，我们一般都是用XML来写布局XML呢，其实也没有啥大问题，在各种开发工具和开源库的帮忙下，效率也不低，但XML最大的问题就是啰嗦，要不然现在也不会被JSON取代。
当然，我们可以像前面的KotlinHello，显示的那样，布局使用XML，代码使用Kotlin，这没有任何问题，但Kotlin语言最大的特点是简洁，所以，使用Anko可以，非常简洁的，用更少的代码来实现同样的功能，代码少了，效率也就高了。</p>

<h3>如何使用Anko</h3>

<p>重写KotlinHello，来展示一下如何在项目中使用Anko，继续打开上篇文章中的KotlinHello项目，在app下面的build.gradle中的dependencies中添加：
<code>kotlin
implementation "org.jetbrains.anko:anko:$anko_version"
</code>
在其顶部定义anko_version变量：
<code>kotlin
ext.anko_version = '0.10.5'
</code></p>

<p>重新gradle sync一下，完成后，就可以使用了。</p>

<p>编辑HelloActivity.kt，在onCreate里面，把除了super.onCreate以外的都删除，然后添加：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'>    <span class="k">val</span> <span class="py">colorTable</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="err">#</span><span class="n">ff0000</span><span class="p">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="p">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="err">#</span><span class="m">00f</span><span class="n">f00</span><span class="p">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="p">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="err">#</span><span class="m">0000f</span><span class="n">f</span><span class="p">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="p">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="err">#</span><span class="n">ffff00</span><span class="p">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="p">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="err">#</span><span class="m">00f</span><span class="n">fff</span><span class="p">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="p">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="err">#</span><span class="n">ff00ff</span><span class="p">&amp;</span><span class="n">rdquo</span><span class="p">;)&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span>    <span class="n">verticalLayout</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">name</span> <span class="p">=</span> <span class="n">editText</span><span class="p">()</span>
</span><span class='line'>    <span class="n">button</span><span class="p">(</span><span class="s">&quot;Say Hello&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">onClick</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">randomIndex</span> <span class="p">=</span> <span class="p">(</span><span class="n">Math</span><span class="p">.</span><span class="n">random</span><span class="p">()</span> <span class="p">*</span> <span class="n">colorTable</span><span class="p">.</span><span class="n">size</span><span class="p">).</span><span class="n">toInt</span><span class="p">()</span>
</span><span class='line'>            <span class="n">setBackgroundColor</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">parseColor</span><span class="p">(</span><span class="n">colorTable</span><span class="p">[</span><span class="n">randomIndex</span><span class="p">]))</span>
</span><span class='line'>            <span class="n">toast</span><span class="p">(</span><span class="s">&quot;Hello, ${name.text}! with color ${colorTable[randomIndex]}&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span>
</span><span class='line'><span class="err">运行起来，就是这个样子的：</span>
</span><span class='line'>
</span><span class='line'><span class="p">![</span><span class="n">Kotlin</span> <span class="n">Hello</span> <span class="n">version</span> <span class="m">1</span><span class="p">](</span><span class="n">https</span><span class="p">:</span><span class="c1">//wx3.sinaimg.cn/mw690/870ad0baly1fs57e1fmtpg20a00k0dgi.gif)</span>
</span><span class='line'>
</span><span class='line'><span class="err">页面有点丑，稍美化下，展示如何添加布局的属性：</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span>        <span class="n">padding</span> <span class="p">=</span> <span class="n">dip</span><span class="p">(</span><span class="m">20</span><span class="p">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">name</span> <span class="p">=</span> <span class="n">editText</span><span class="p">()</span>
</span><span class='line'>    <span class="n">name</span><span class="p">.</span><span class="n">lparams</span><span class="p">(</span><span class="n">width</span> <span class="p">=</span> <span class="n">matchParent</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">topMargin</span> <span class="p">=</span> <span class="n">dip</span><span class="p">(</span><span class="m">20</span><span class="p">)</span>
</span><span class='line'>        <span class="n">bottomMargin</span> <span class="p">=</span> <span class="n">dip</span><span class="p">(</span><span class="m">30</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="err">最终就是这个样子了：</span>
</span><span class='line'>
</span><span class='line'><span class="p">![</span><span class="n">Kotlin</span> <span class="n">Hello</span> <span class="n">version</span> <span class="m">2</span><span class="p">](</span><span class="n">https</span><span class="p">:</span><span class="c1">//wx4.sinaimg.cn/mw690/870ad0baly1fs57e1foj9g20a00k0js2.gif)</span>
</span><span class='line'>
</span><span class='line'><span class="err">贴下完整代码：</span>
</span><span class='line'><span class="n">app</span><span class="p">/</span><span class="n">build</span><span class="p">.</span><span class="n">gradle</span><span class="p">:</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="n">apply</span> <span class="n">plugin</span><span class="p">:</span> <span class="p">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">com</span><span class="p">.</span><span class="n">android</span><span class="p">.</span><span class="n">application</span><span class="p">&amp;</span><span class="n">rsquo</span><span class="p">;&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="n">apply</span> <span class="n">plugin</span><span class="p">:</span> <span class="p">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">kotlin</span><span class="p">-</span><span class="n">android</span><span class="p">&amp;</span><span class="n">rsquo</span><span class="p">;&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="n">apply</span> <span class="n">plugin</span><span class="p">:</span> <span class="p">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">kotlin</span><span class="p">-</span><span class="n">android</span><span class="p">-</span><span class="n">extensions</span><span class="p">&amp;</span><span class="n">rsquo</span><span class="p">;&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="n">ext</span><span class="p">.</span><span class="n">anko_version</span> <span class="p">=</span> <span class="p">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="m">0.10</span><span class="p">.</span><span class="m">5</span><span class="p">&amp;</span><span class="n">rsquo</span><span class="p">;&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="n">android</span> <span class="p">{</span>
</span><span class='line'><span class="n">compileSdkVersion</span> <span class="m">27</span>
</span><span class='line'><span class="n">defaultConfig</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">applicationId</span> <span class="p">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">net</span><span class="p">.</span><span class="n">toughcoder</span><span class="p">.</span><span class="n">kotlinhello</span><span class="p">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>    <span class="n">minSdkVersion</span> <span class="m">21</span>
</span><span class='line'>    <span class="n">targetSdkVersion</span> <span class="m">27</span>
</span><span class='line'>    <span class="n">versionCode</span> <span class="m">1</span>
</span><span class='line'>    <span class="n">versionName</span> <span class="p">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="m">1.0</span><span class="p">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>    <span class="n">testInstrumentationRunner</span> <span class="p">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">android</span><span class="p">.</span><span class="n">support</span><span class="p">.</span><span class="n">test</span><span class="p">.</span><span class="n">runner</span><span class="p">.</span><span class="n">AndroidJUnitRunner</span><span class="p">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">buildTypes</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">release</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">minifyEnabled</span> <span class="k">false</span>
</span><span class='line'>        <span class="n">proguardFiles</span> <span class="n">getDefaultProguardFile</span><span class="p">(&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">proguard</span><span class="p">-</span><span class="n">android</span><span class="p">.</span><span class="n">txt</span><span class="p">&amp;</span><span class="n">rsquo</span><span class="p">;),</span> <span class="p">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">proguard</span><span class="p">-</span><span class="n">rules</span><span class="p">.</span><span class="n">pro</span><span class="p">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="n">dependencies</span> <span class="p">{</span>
</span><span class='line'><span class="n">implementation</span> <span class="n">fileTree</span><span class="p">(</span><span class="n">dir</span><span class="p">:</span> <span class="p">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">libs</span><span class="p">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="n">include</span><span class="p">:</span> <span class="p">[&amp;</span><span class="n">lsquo</span><span class="p">;*.</span><span class="n">jar</span><span class="p">&amp;</span><span class="n">rsquo</span><span class="p">;])</span>
</span><span class='line'><span class="n">implementation</span><span class="s">&quot;org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version&quot;</span>
</span><span class='line'><span class="n">implementation</span> <span class="p">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">com</span><span class="p">.</span><span class="n">android</span><span class="p">.</span><span class="n">support</span><span class="p">:</span><span class="n">appcompat</span><span class="p">-</span><span class="n">v7</span><span class="p">:</span><span class="m">27.1</span><span class="p">.</span><span class="m">1</span><span class="p">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'><span class="n">implementation</span> <span class="p">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">com</span><span class="p">.</span><span class="n">android</span><span class="p">.</span><span class="n">support</span><span class="p">.</span><span class="n">constraint</span><span class="p">:</span><span class="n">constraint</span><span class="p">-</span><span class="n">layout</span><span class="p">:</span><span class="m">1.1</span><span class="p">.</span><span class="m">0</span><span class="p">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'><span class="n">implementation</span> <span class="p">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">org</span><span class="p">.</span><span class="n">jetbrains</span><span class="p">.</span><span class="n">anko</span><span class="p">:</span><span class="n">anko</span><span class="p">:</span><span class="err">$</span><span class="n">anko_version</span><span class="p">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="n">testImplementation</span> <span class="p">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">junit</span><span class="p">:</span><span class="n">junit</span><span class="p">:</span><span class="m">4.12</span><span class="p">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'><span class="n">androidTestImplementation</span> <span class="p">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">com</span><span class="p">.</span><span class="n">android</span><span class="p">.</span><span class="n">support</span><span class="p">.</span><span class="n">test</span><span class="p">:</span><span class="n">runner</span><span class="p">:</span><span class="m">1.0</span><span class="p">.</span><span class="m">2</span><span class="p">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'><span class="n">androidTestImplementation</span> <span class="p">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">com</span><span class="p">.</span><span class="n">android</span><span class="p">.</span><span class="n">support</span><span class="p">.</span><span class="n">test</span><span class="p">.</span><span class="n">espresso</span><span class="p">:</span><span class="n">espresso</span><span class="p">-</span><span class="n">core</span><span class="p">:</span><span class="m">3.0</span><span class="p">.</span><span class="m">2</span><span class="p">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'><span class="p">}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="n">HelloActivity</span><span class="p">.</span><span class="n">kt</span><span class="p">:</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">class</span> <span class="nc">HelloActivity</span> <span class="p">:</span> <span class="n">AppCompatActivity</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'><span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">super</span><span class="p">.</span><span class="n">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span>    <span class="k">val</span> <span class="py">colorTable</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span><span class="s">&quot;#ff0000&quot;</span><span class="p">,</span> <span class="s">&quot;#00ff00&quot;</span><span class="p">,</span> <span class="s">&quot;#0000ff&quot;</span><span class="p">,</span> <span class="s">&quot;#ffff00&quot;</span><span class="p">,</span> <span class="s">&quot;#00ffff&quot;</span><span class="p">,</span> <span class="s">&quot;#ff00ff&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">verticalLayout</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">padding</span> <span class="p">=</span> <span class="n">dip</span><span class="p">(</span><span class="m">20</span><span class="p">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">name</span> <span class="p">=</span> <span class="n">editText</span><span class="p">()</span>
</span><span class='line'>    <span class="n">name</span><span class="p">.</span><span class="n">lparams</span><span class="p">(</span><span class="n">width</span> <span class="p">=</span> <span class="n">matchParent</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">topMargin</span> <span class="p">=</span> <span class="n">dip</span><span class="p">(</span><span class="m">20</span><span class="p">)</span>
</span><span class='line'>        <span class="n">bottomMargin</span> <span class="p">=</span> <span class="n">dip</span><span class="p">(</span><span class="m">30</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">button</span><span class="p">(</span><span class="s">&quot;Say Hello&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">onClick</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">randomIndex</span> <span class="p">=</span> <span class="p">(</span><span class="n">Math</span><span class="p">.</span><span class="n">random</span><span class="p">()</span> <span class="p">*</span> <span class="n">colorTable</span><span class="p">.</span><span class="n">size</span><span class="p">).</span><span class="n">toInt</span><span class="p">()</span>
</span><span class='line'>            <span class="n">setBackgroundColor</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">parseColor</span><span class="p">(</span><span class="n">colorTable</span><span class="p">[</span><span class="n">randomIndex</span><span class="p">]))</span>
</span><span class='line'>            <span class="n">toast</span><span class="p">(</span><span class="s">&quot;Hello, ${name.text}! with color ${colorTable[randomIndex]}&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>实战，撸一个程序猿老黄历</h2>

<p>一个KotlinHello，还是过于toy，我们再来一个稍复杂点的小项目，以练手，考虑到Kotlin带来最大变化就是用Anko来写布局，所以我们弄个布局稍复杂的，所以，可以撸一个程序猿老黄历，它功能比较简单，主要就是布局，又不涉及网络，所以适合初学者练手。</p>

<h3>需求理解</h3>

<p>动手之前，先理解一下需求。我们要撸的是这个版本的<a href="http://sandbox.runjs.cn/show/ydp3it7b/">程序员老黄历</a>。
原理呢很简单，预定义一些事件，工具，饮品，方位等，然后用当前日期算出一个随机index，从预定义中取出一批，然后展示出来。其实呢，对于逻辑部分的代码，我们照抄就好，不用太关心。重点，是布局如何用Anko来实现。</p>

<h3>上手开撸</h3>

<ol>
<li>新建一个package: calendar</li>
</ol>


<p><img src="https://wx4.sinaimg.cn/mw690/870ad0baly1fs57e1j897j20wb0e0q6f.jpg" alt="create package calendar" /></p>

<ol>
<li>在calendar中新建一个empty activity: CalendarActivity</li>
</ol>


<p><img src="https://wx4.sinaimg.cn/mw690/870ad0baly1fs57e1g2rbj20mc0ix75e.jpg" alt="create calendar activity" /></p>

<pre><code class="kotlin">class CalendarActivity : AppCompatActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        title = "Programmer Calendar"
    }
}
</code></pre>

<ol>
<li>点击KotlinHello中的button时，跳到CalendarActivity
<code>kotlin
 onClick {
     // other codes
     startActivity&lt;CalendarActivity&gt;()
 }
</code></li>
<li>开始撸布局
整体布局分五块：头部的日期，宜事抬头，宜事详细，坏事抬头，坏事详细，底部方向和指数。这其中，头部日期，可以用一个TextView来解决。宜和坏，是一样的，可以复用，宜（坏）事详细是一个列表，底部也是一个列表，但因为数目和每条内容是固定的，所以可以用三个View来解决。</li>
</ol>


<p>总结：</p>

<ol>
<li>根布局要是一个ScrollView，因为如果内容多时，或者屏幕太小时，可能会有超出屏幕的地方，所以根布局要能滑动。</li>
<li>中间好/坏， 以及好坏的具体事件，要用一个LinearLayout把两个包起来，因为好/坏的高度是由具体事件决定的，又要填充背景色，所以包上一层LinearLayout不可避免。</li>
<li>这样一来，从上到下，一个LinearLayout就可以了</li>
</ol>


<h3>运行效果</h3>

<p>最终运行效果：</p>

<p><img src="https://wx1.sinaimg.cn/mw690/870ad0baly1fs57e1i18vj20u01o0adk.jpg" height="720" width="360" alt="Final result of programmer calendar" /></p>

<h3>最终代码</h3>

<p>CalendarActivity，负责布局和展示
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">CalendarActivity</span> <span class="p">:</span> <span class="n">AppCompatActivity</span><span class="p">()</span> <span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">super</span><span class="p">.</span><span class="n">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
</span><span class='line'>    <span class="n">title</span> <span class="p">=</span> <span class="s">&quot;程序猿老黄历&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">calendar</span> <span class="p">=</span> <span class="n">ProgrammerCalendar</span><span class="p">()</span>
</span><span class='line'>    <span class="n">scrollView</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">verticalLayout</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">dateString</span> <span class="p">=</span> <span class="n">buildSpanned</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">append</span><span class="p">(</span><span class="n">calendar</span><span class="p">.</span><span class="n">genTodayString</span><span class="p">(),</span> <span class="n">Bold</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">dateLabel</span> <span class="p">=</span> <span class="n">textView</span><span class="p">(</span><span class="n">dateString</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">id</span> <span class="p">=</span> <span class="n">View</span><span class="p">.</span><span class="n">generateViewId</span><span class="p">()</span>
</span><span class='line'>                <span class="n">textColor</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">BLACK</span>
</span><span class='line'>                <span class="n">textSize</span> <span class="p">=</span> <span class="n">sp</span><span class="p">(</span><span class="m">6.4f</span><span class="p">).</span><span class="n">toFloat</span><span class="p">()</span>
</span><span class='line'>                <span class="n">singleLine</span> <span class="p">=</span> <span class="k">true</span>
</span><span class='line'>                <span class="n">textAlignment</span> <span class="p">=</span> <span class="n">View</span><span class="p">.</span><span class="n">TEXT_ALIGNMENT_CENTER</span>
</span><span class='line'>            <span class="p">}.</span><span class="n">lparams</span><span class="p">(</span><span class="n">width</span> <span class="p">=</span> <span class="n">matchParent</span><span class="p">,</span> <span class="n">height</span> <span class="p">=</span> <span class="n">wrapContent</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">topMargin</span> <span class="p">=</span> <span class="n">dip</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>
</span><span class='line'>                <span class="n">bottomMargin</span> <span class="p">=</span> <span class="n">dip</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">val</span> <span class="err">(</span><span class="py">goodList</span><span class="p">,</span> <span class="n">badList</span><span class="p">)</span> <span class="p">=</span> <span class="n">calendar</span><span class="p">.</span><span class="n">genTodayLuck</span><span class="p">()</span>
</span><span class='line'>            <span class="n">generateLuck</span><span class="p">(</span><span class="s">&quot;宜&quot;</span><span class="p">,</span> <span class="n">Color</span><span class="p">.</span><span class="n">parseColor</span><span class="p">(</span><span class="s">&quot;#ffee44&quot;</span><span class="p">),</span> <span class="n">Color</span><span class="p">.</span><span class="n">parseColor</span><span class="p">(</span><span class="s">&quot;#dddddd&quot;</span><span class="p">),</span> <span class="n">goodList</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">generateLuck</span><span class="p">(</span><span class="s">&quot;忌&quot;</span><span class="p">,</span> <span class="n">Color</span><span class="p">.</span><span class="n">parseColor</span><span class="p">(</span><span class="s">&quot;#ff4444&quot;</span><span class="p">),</span> <span class="n">Color</span><span class="p">.</span><span class="n">parseColor</span><span class="p">(</span><span class="s">&quot;#aaaaaa&quot;</span><span class="p">),</span> <span class="n">badList</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Direction</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">directionDetail</span> <span class="p">=</span> <span class="n">buildSpanned</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">append</span><span class="p">(</span><span class="s">&quot;座位朝向：&quot;</span><span class="p">,</span> <span class="n">Bold</span><span class="p">)</span>
</span><span class='line'>                <span class="n">append</span><span class="p">(</span><span class="s">&quot;面向&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="n">append</span><span class="p">(</span><span class="n">calendar</span><span class="p">.</span><span class="n">genDirection</span><span class="p">(),</span> <span class="n">foregroundColor</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">GREEN</span><span class="p">))</span>
</span><span class='line'>                <span class="n">append</span><span class="p">(</span><span class="s">&quot;写程序，BUG最少。&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">direction</span> <span class="p">=</span> <span class="n">extraLabel</span><span class="p">(</span><span class="n">directionDetail</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Drink</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">drinkDetail</span> <span class="p">=</span> <span class="n">buildSpanned</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">append</span><span class="p">(</span><span class="s">&quot;今日饮品：&quot;</span><span class="p">,</span> <span class="n">Bold</span><span class="p">)</span>
</span><span class='line'>                <span class="n">append</span><span class="p">(</span><span class="n">calendar</span><span class="p">.</span><span class="n">genDrinks</span><span class="p">())</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">drink</span> <span class="p">=</span> <span class="n">extraLabel</span><span class="p">(</span><span class="n">drinkDetail</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">val</span> <span class="py">girlDetail</span> <span class="p">=</span> <span class="n">buildSpanned</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">append</span><span class="p">(</span><span class="s">&quot;女神亲近指数：&quot;</span><span class="p">,</span> <span class="n">Bold</span><span class="p">)</span>
</span><span class='line'>                <span class="n">append</span><span class="p">(</span><span class="n">calendar</span><span class="p">.</span><span class="n">genGirlsIndex</span><span class="p">())</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">girl</span> <span class="p">=</span> <span class="n">extraLabel</span><span class="p">(</span><span class="n">girlDetail</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">@AnkoViewDslMarker</span> <span class="n">_LinearLayout</span><span class="p">.</span><span class="n">extraLabel</span><span class="p">(</span><span class="n">detail</span><span class="p">:</span> <span class="n">CharSequence</span><span class="p">):</span> <span class="n">TextView</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">textView</span><span class="p">(</span><span class="n">detail</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">textSize</span> <span class="p">=</span> <span class="n">sp</span><span class="p">(</span><span class="m">5</span><span class="p">).</span><span class="n">toFloat</span><span class="p">()</span>
</span><span class='line'>        <span class="n">horizontalPadding</span> <span class="p">=</span> <span class="n">dip</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>
</span><span class='line'>        <span class="n">verticalPadding</span> <span class="p">=</span> <span class="n">dip</span><span class="p">(</span><span class="m">6</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">@AnkoViewDslMarker</span> <span class="n">_LinearLayout</span><span class="p">.</span><span class="n">generateLuck</span><span class="p">(</span><span class="k">type</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'>                                                          <span class="n">typeColor</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span>
</span><span class='line'>                                                          <span class="n">detailColor</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span>
</span><span class='line'>                                                          <span class="n">eventList</span><span class="p">:</span> <span class="n">List</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Map</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;&amp;</span><span class="n">gt</span><span class="p">;)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">linearLayout</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">orientation</span> <span class="p">=</span> <span class="n">LinearLayout</span><span class="p">.</span><span class="n">HORIZONTAL</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="py">good</span> <span class="p">=</span> <span class="n">textView</span><span class="p">(</span><span class="k">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">id</span> <span class="p">=</span> <span class="n">View</span><span class="p">.</span><span class="n">generateViewId</span><span class="p">()</span>
</span><span class='line'>            <span class="n">textColor</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">WHITE</span>
</span><span class='line'>            <span class="n">textSize</span> <span class="p">=</span> <span class="n">sp</span><span class="p">(</span><span class="m">14</span><span class="p">).</span><span class="n">toFloat</span><span class="p">()</span>
</span><span class='line'>            <span class="n">textAlignment</span> <span class="p">=</span> <span class="n">View</span><span class="p">.</span><span class="n">TEXT_ALIGNMENT_CENTER</span>
</span><span class='line'>            <span class="n">gravity</span> <span class="p">=</span> <span class="n">Gravity</span><span class="p">.</span><span class="n">CENTER</span>
</span><span class='line'>            <span class="n">backgroundColor</span> <span class="p">=</span> <span class="n">typeColor</span>
</span><span class='line'>        <span class="p">}.</span><span class="n">lparams</span><span class="p">(</span><span class="n">width</span> <span class="p">=</span> <span class="n">dip</span><span class="p">(</span><span class="m">100</span><span class="p">),</span> <span class="n">height</span> <span class="p">=</span> <span class="n">matchParent</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="py">goodDetail</span> <span class="p">=</span> <span class="n">verticalLayout</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">id</span> <span class="p">=</span> <span class="n">View</span><span class="p">.</span><span class="n">generateViewId</span><span class="p">()</span>
</span><span class='line'>            <span class="n">eventList</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">val</span> <span class="py">caption</span> <span class="p">=</span> <span class="n">textView</span><span class="p">(</span><span class="n">it</span><span class="p">[</span><span class="n">ProgrammerCalendar</span><span class="p">.</span><span class="n">NAME</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">textColor</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">BLACK</span>
</span><span class='line'>                    <span class="n">textSize</span> <span class="p">=</span> <span class="n">sp</span><span class="p">(</span><span class="m">6</span><span class="p">).</span><span class="n">toFloat</span><span class="p">()</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">val</span> <span class="py">detail</span> <span class="p">=</span> <span class="n">textView</span><span class="p">(</span><span class="n">it</span><span class="p">[</span><span class="n">ProgrammerCalendar</span><span class="p">.</span><span class="n">DESCRIPTION</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">textColor</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">GRAY</span>
</span><span class='line'>                    <span class="n">textSize</span> <span class="p">=</span> <span class="n">sp</span><span class="p">(</span><span class="m">5</span><span class="p">).</span><span class="n">toFloat</span><span class="p">()</span>
</span><span class='line'>                    <span class="n">horizontalPadding</span> <span class="p">=</span> <span class="n">dip</span><span class="p">(</span><span class="m">2</span><span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">horizontalPadding</span> <span class="p">=</span> <span class="n">dip</span><span class="p">(</span><span class="m">15</span><span class="p">)</span>
</span><span class='line'>            <span class="n">backgroundColor</span> <span class="p">=</span> <span class="n">detailColor</span>
</span><span class='line'>            <span class="n">verticalPadding</span> <span class="p">=</span> <span class="n">dip</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}.</span><span class="n">lparams</span><span class="p">(</span><span class="n">width</span> <span class="p">=</span> <span class="n">matchParent</span><span class="p">,</span> <span class="n">height</span> <span class="p">=</span> <span class="n">wrapContent</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span><span class='line'><span class="p">&lt;</span><span class="n">code</span><span class="p">&gt;</span>
</span><span class='line'><span class="n">ProgrammerCalendar</span><span class="err">，这里是业务逻辑</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;</span><span class="n">kotlin</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ProgrammerCalendar</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">companion</span> <span class="k">object</span> <span class="nc">EventKey</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">const</span> <span class="k">val</span> <span class="py">NAME</span> <span class="p">=</span> <span class="p">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">name</span><span class="p">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>        <span class="n">const</span> <span class="k">val</span> <span class="py">GOOD</span> <span class="p">=</span> <span class="p">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">good</span><span class="p">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>        <span class="n">const</span> <span class="k">val</span> <span class="py">BAD</span> <span class="p">=</span> <span class="p">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">bad</span><span class="p">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>        <span class="n">const</span> <span class="k">val</span> <span class="py">WEEKEND</span> <span class="p">=</span> <span class="p">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">weekend</span><span class="p">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>        <span class="n">const</span> <span class="k">val</span> <span class="py">DATE</span> <span class="p">=</span> <span class="p">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">date</span><span class="p">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>        <span class="n">const</span> <span class="k">val</span> <span class="py">TYPE</span> <span class="p">=</span> <span class="p">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="k">type</span><span class="p">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>        <span class="n">const</span> <span class="k">val</span> <span class="py">DESCRIPTION</span> <span class="p">=</span> <span class="p">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">description</span><span class="p">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">private</span> <span class="k">val</span> <span class="py">weeks</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span> <span class="s">&quot;日&quot;</span><span class="p">,</span> <span class="s">&quot;一&quot;</span><span class="p">,</span> <span class="s">&quot;二&quot;</span><span class="p">,</span> <span class="s">&quot;三&quot;</span><span class="p">,</span> <span class="s">&quot;四&quot;</span><span class="p">,</span> <span class="s">&quot;五&quot;</span><span class="p">,</span> <span class="s">&quot;六&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="py">directions</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span><span class="s">&quot;北方&quot;</span><span class="p">,</span> <span class="s">&quot;东北方&quot;</span><span class="p">,</span> <span class="s">&quot;东方&quot;</span><span class="p">,</span> <span class="s">&quot;东南方&quot;</span><span class="p">,</span> <span class="s">&quot;南方&quot;</span><span class="p">,</span> <span class="s">&quot;西南方&quot;</span><span class="p">,</span> <span class="s">&quot;西方&quot;</span><span class="p">,</span> <span class="s">&quot;西北方&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="py">activities</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span>
</span><span class='line'>        <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;写单元测试&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;写单元测试将减少出错&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;写单元测试会降低你的开发效率&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;洗澡&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;你几天没洗澡了？&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;会把设计方面的灵感洗掉&quot;</span><span class="p">,</span> <span class="n">WEEKEND</span> <span class="n">to</span> <span class="s">&quot;true&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;锻炼一下身体&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;能量没消耗多少，吃得却更多&quot;</span><span class="p">,</span> <span class="n">WEEKEND</span> <span class="n">to</span> <span class="s">&quot;true&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;抽烟&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;抽烟有利于提神，增加思维敏捷&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;除非你活够了，死得早点没关系&quot;</span><span class="p">,</span> <span class="n">WEEKEND</span> <span class="n">to</span> <span class="s">&quot;true&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;白天上线&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;今天白天上线是安全的&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;可能导致灾难性后果&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;重构&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;代码质量得到提高&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;你很有可能会陷入泥潭&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;使用%t&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;你看起来更有品位&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;别人会觉得你在装逼&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;跳槽&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;该放手时就放手&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;鉴于当前的经济形势，你的下一份工作未必比现在强&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;招人&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;你面前这位有成为牛人的潜质&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;这人会写程序吗？&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;面试&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;面试官今天心情Xiao很好&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;面试官不爽，会拿你出气&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;提交辞职申请&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;公司找到了一个比你更能干更便宜的家伙，巴不得你赶快滚蛋&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;鉴于当前的经济形势，你的下一份工作未必比现在强&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;申请加薪&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;老板今天心情很好&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;公司正在考虑裁员&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;晚上加班&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;晚上是程序员精神最好的时候&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;&quot;</span><span class="p">,</span> <span class="n">WEEKEND</span> <span class="n">to</span> <span class="s">&quot;true&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;在妹子面前吹牛&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;改善你矮穷挫的形象&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;会被识破&quot;</span><span class="p">,</span> <span class="n">WEEKEND</span> <span class="n">to</span> <span class="s">&quot;true&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;撸管&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;避免缓冲区溢出&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;强撸灰飞烟灭&quot;</span><span class="p">,</span> <span class="n">WEEKEND</span> <span class="n">to</span> <span class="s">&quot;true&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;浏览成人网站&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;重拾对生活的信心&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;你会心神不宁&quot;</span><span class="p">,</span> <span class="n">WEEKEND</span> <span class="n">to</span> <span class="s">&quot;true&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;命名变量\&quot;%v\&quot;&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;写超过%l行的方法&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;你的代码组织的很好，长一点没关系&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;你的代码将混乱不堪，你自己都看不懂&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;提交代码&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;遇到冲突的几率是最低的&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;你遇到的一大堆冲突会让你觉得自己是不是时间穿越了&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;代码复审&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;发现重要问题的几率大大增加&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;你什么问题都发现不了，白白浪费时间&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;开会&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;写代码之余放松一下打个盹，有益健康&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;小心被扣屎盆子背黑锅&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;打DOTA&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;你将有如神助&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;你会被虐的很惨&quot;</span><span class="p">,</span> <span class="n">WEEKEND</span> <span class="n">to</span> <span class="s">&quot;true&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;晚上上线&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;晚上是程序员精神最好的时候&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;你白天已经筋疲力尽了&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;修复BUG&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;你今天对BUG的嗅觉大大提高&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;新产生的BUG将比修复的更多&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;设计评审&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;设计评审会议将变成头脑风暴&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;人人筋疲力尽，评审就这么过了&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;需求评审&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;上微博&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;今天发生的事不能错过&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;今天的微博充满负能量&quot;</span><span class="p">,</span> <span class="n">WEEKEND</span> <span class="n">to</span> <span class="s">&quot;true&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;上AB站&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;还需要理由吗？&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;满屏兄贵亮瞎你的眼&quot;</span><span class="p">,</span> <span class="n">WEEKEND</span> <span class="n">to</span> <span class="s">&quot;true&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;玩FlappyBird&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;今天破纪录的几率很高&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;除非你想玩到把手机砸了&quot;</span><span class="p">,</span> <span class="n">WEEKEND</span> <span class="n">to</span> <span class="s">&quot;true&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="py">specials</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span>
</span><span class='line'>        <span class="n">mapOf</span><span class="p">(</span><span class="n">DATE</span> <span class="n">to</span> <span class="s">&quot;20140214&quot;</span><span class="p">,</span> <span class="n">TYPE</span> <span class="n">to</span> <span class="s">&quot;BAD&quot;</span><span class="p">,</span> <span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;待在男（女）友身边&quot;</span><span class="p">,</span> <span class="n">DESCRIPTION</span> <span class="n">to</span> <span class="s">&quot;脱团火葬场，入团保平安。&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="py">tools</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span><span class="s">&quot;Eclipse写程序&quot;</span><span class="p">,</span> <span class="s">&quot;MSOffice写文档&quot;</span><span class="p">,</span> <span class="s">&quot;记事本写程序&quot;</span><span class="p">,</span> <span class="s">&quot;Windows8&quot;</span><span class="p">,</span> <span class="s">&quot;Linux&quot;</span><span class="p">,</span> <span class="s">&quot;MacOS&quot;</span><span class="p">,</span> <span class="s">&quot;IE&quot;</span><span class="p">,</span> <span class="s">&quot;Android设备&quot;</span><span class="p">,</span> <span class="s">&quot;iOS设备&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="py">varNames</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span><span class="s">&quot;jieguo&quot;</span><span class="p">,</span> <span class="s">&quot;huodong&quot;</span><span class="p">,</span> <span class="s">&quot;pay&quot;</span><span class="p">,</span> <span class="s">&quot;expire&quot;</span><span class="p">,</span> <span class="s">&quot;zhangdan&quot;</span><span class="p">,</span> <span class="s">&quot;every&quot;</span><span class="p">,</span> <span class="s">&quot;free&quot;</span><span class="p">,</span> <span class="s">&quot;i1&quot;</span><span class="p">,</span> <span class="s">&quot;a&quot;</span><span class="p">,</span> <span class="s">&quot;virtual&quot;</span><span class="p">,</span> <span class="s">&quot;ad&quot;</span><span class="p">,</span> <span class="s">&quot;spider&quot;</span><span class="p">,</span> <span class="s">&quot;mima&quot;</span><span class="p">,</span> <span class="s">&quot;pass&quot;</span><span class="p">,</span> <span class="s">&quot;ui&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="py">drinks</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span><span class="s">&quot;水&quot;</span><span class="p">,</span> <span class="s">&quot;茶&quot;</span><span class="p">,</span> <span class="s">&quot;红茶&quot;</span><span class="p">,</span> <span class="s">&quot;绿茶&quot;</span><span class="p">,</span> <span class="s">&quot;咖啡&quot;</span><span class="p">,</span> <span class="s">&quot;奶茶&quot;</span><span class="p">,</span> <span class="s">&quot;可乐&quot;</span><span class="p">,</span> <span class="s">&quot;鲜奶&quot;</span><span class="p">,</span> <span class="s">&quot;豆奶&quot;</span><span class="p">,</span> <span class="s">&quot;果汁&quot;</span><span class="p">,</span> <span class="s">&quot;果味汽水&quot;</span><span class="p">,</span> <span class="s">&quot;苏打水&quot;</span><span class="p">,</span> <span class="s">&quot;运动饮料&quot;</span><span class="p">,</span> <span class="s">&quot;酸奶&quot;</span><span class="p">,</span> <span class="s">&quot;酒&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="py">today</span> <span class="p">=</span> <span class="n">GregorianCalendar</span><span class="p">()</span>
</span><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="py">iday</span> <span class="p">=</span> <span class="n">today</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="n">Calendar</span><span class="p">.</span><span class="n">YEAR</span><span class="p">)</span> <span class="p">*</span> <span class="m">10000</span> <span class="p">+</span> <span class="p">(</span><span class="n">today</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="n">Calendar</span><span class="p">.</span><span class="n">MONTH</span><span class="p">)</span> <span class="p">+</span> <span class="m">1</span><span class="p">)</span> <span class="p">*</span> <span class="m">100</span> <span class="p">+</span> <span class="n">today</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="n">Calendar</span><span class="p">.</span><span class="n">DAY_OF_MONTH</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">random</span><span class="p">(</span><span class="n">seed</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">index</span><span class="p">:</span> <span class="n">Int</span><span class="p">):</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">n</span> <span class="p">=</span> <span class="n">seed</span> <span class="p">%</span> <span class="m">11117</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="k">in</span> <span class="m">0</span> <span class="n">until</span> <span class="m">100</span><span class="p">+</span><span class="n">index</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">n</span> <span class="p">*=</span> <span class="n">n</span>
</span><span class='line'>        <span class="n">n</span> <span class="p">%=</span> <span class="m">11117</span>   <span class="c1">// 11117 是个质数</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">n</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">isSomeday</span><span class="p">():</span> <span class="n">Boolean</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">today</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="n">Calendar</span><span class="p">.</span><span class="n">MONTH</span><span class="p">)</span> <span class="p">==</span> <span class="m">5</span> <span class="p">&amp;</span><span class="n">amp</span><span class="p">;&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">today</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="n">Calendar</span><span class="p">.</span><span class="n">DAY_OF_MONTH</span><span class="p">)</span> <span class="p">==</span> <span class="m">4</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">star</span><span class="p">(</span><span class="n">num</span><span class="p">:</span> <span class="n">Int</span><span class="p">):</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">result</span> <span class="p">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">i</span> <span class="p">=</span> <span class="m">0</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">num</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">result</span> <span class="p">+=</span> <span class="s">&quot;★&quot;</span>
</span><span class='line'>        <span class="n">i</span><span class="p">++</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">i</span> <span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="m">5</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">result</span> <span class="p">+=</span> <span class="s">&quot;☆&quot;</span>
</span><span class='line'>        <span class="n">i</span><span class="p">++</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">isWeekend</span><span class="p">():</span> <span class="n">Boolean</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">today</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="n">Calendar</span><span class="p">.</span><span class="n">DAY_OF_WEEK</span><span class="p">)</span> <span class="p">==</span> <span class="m">0</span> <span class="p">||</span> <span class="n">today</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="n">Calendar</span><span class="p">.</span><span class="n">DAY_OF_WEEK</span><span class="p">)</span> <span class="p">==</span> <span class="m">6</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 从 activities 中随机挑选 size 个</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">pickRandomActivity</span><span class="p">(</span><span class="n">activities</span><span class="p">:</span> <span class="n">List</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Map</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;&amp;</span><span class="n">gt</span><span class="p">;,</span> <span class="n">size</span><span class="p">:</span> <span class="n">Int</span><span class="p">):</span> <span class="n">List</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Map</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">pickedEvents</span> <span class="p">=</span> <span class="n">activities</span><span class="p">.</span><span class="n">pickRandom</span><span class="p">(</span><span class="n">size</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">pickedEvents</span><span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">parse</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 从数组中随机挑选 size 个</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="err">&amp;</span><span class="nf">lt</span><span class="p">;</span><span class="n">T</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">List</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">T</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;.</span><span class="n">pickRandom</span><span class="p">(</span><span class="n">size</span><span class="p">:</span> <span class="n">Int</span><span class="p">):</span> <span class="n">List</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">T</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">result</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">toMutableList</span><span class="p">()</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="k">in</span> <span class="m">0</span> <span class="n">until</span> <span class="k">this</span><span class="p">.</span><span class="n">size</span> <span class="p">-</span> <span class="n">size</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">index</span> <span class="p">=</span> <span class="n">random</span><span class="p">(</span><span class="n">iday</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span> <span class="p">%</span> <span class="n">result</span><span class="p">.</span><span class="n">size</span>
</span><span class='line'>        <span class="n">result</span><span class="p">.</span><span class="n">removeAt</span><span class="p">(</span><span class="n">index</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 解析占位符并替换成随机内容</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">parse</span><span class="p">(</span><span class="n">event</span><span class="p">:</span> <span class="n">Map</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;):</span> <span class="n">Map</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">result</span> <span class="p">=</span> <span class="n">event</span><span class="p">.</span><span class="n">toMutableMap</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="p">[</span><span class="n">NAME</span><span class="p">]</span><span class="o">?.</span><span class="n">indexOf</span><span class="p">(</span><span class="s">&quot;%v&quot;</span><span class="p">)</span> <span class="p">!=</span> <span class="p">-</span><span class="m">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">result</span><span class="p">[</span><span class="n">NAME</span><span class="p">]</span> <span class="p">=</span> <span class="n">result</span><span class="p">[</span><span class="n">NAME</span><span class="p">]</span><span class="o">?.</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;%v&quot;</span><span class="p">,</span> <span class="n">varNames</span><span class="p">[</span><span class="n">random</span><span class="p">(</span><span class="n">iday</span><span class="p">,</span> <span class="m">12</span><span class="p">)</span> <span class="p">%</span> <span class="n">varNames</span><span class="p">.</span><span class="n">size</span><span class="p">])</span><span class="o">!!</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="p">[</span><span class="n">NAME</span><span class="p">]</span><span class="o">?.</span><span class="n">indexOf</span><span class="p">(</span><span class="s">&quot;%t&quot;</span><span class="p">)</span> <span class="p">!=</span> <span class="p">-</span><span class="m">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">result</span><span class="p">[</span><span class="n">NAME</span><span class="p">]</span> <span class="p">=</span> <span class="n">result</span><span class="p">[</span><span class="n">NAME</span><span class="p">]</span><span class="o">?.</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;%t&quot;</span><span class="p">,</span> <span class="n">tools</span><span class="p">[</span><span class="n">random</span><span class="p">(</span><span class="n">iday</span><span class="p">,</span> <span class="m">11</span><span class="p">)</span> <span class="p">%</span> <span class="n">tools</span><span class="p">.</span><span class="n">size</span><span class="p">])</span><span class="o">!!</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="p">[</span><span class="n">NAME</span><span class="p">]</span><span class="o">?.</span><span class="n">indexOf</span><span class="p">(</span><span class="s">&quot;%l&quot;</span><span class="p">)</span> <span class="p">!=</span> <span class="p">-</span><span class="m">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">result</span><span class="p">[</span><span class="n">NAME</span><span class="p">]</span> <span class="p">=</span> <span class="n">result</span><span class="p">[</span><span class="n">NAME</span><span class="p">]</span><span class="o">?.</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;%l&quot;</span><span class="p">,</span> <span class="p">(</span><span class="n">random</span><span class="p">(</span><span class="n">iday</span><span class="p">,</span> <span class="m">12</span><span class="p">)</span> <span class="p">%</span> <span class="m">247</span> <span class="p">+</span> <span class="m">30</span><span class="p">).</span><span class="n">toString</span><span class="p">())</span><span class="o">!!</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="p">.</span><span class="n">toMap</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 添加预定义事件</span>
</span><span class='line'><span class="c1">// Should return two lists: GOOD list and BAD list, the item of list is a map(dictionary)</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">pickSpecials</span><span class="p">(</span><span class="n">goodList</span><span class="p">:</span> <span class="n">MutableList</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Map</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;&amp;</span><span class="n">gt</span><span class="p">;,</span> <span class="n">badList</span><span class="p">:</span> <span class="n">MutableList</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Map</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;&amp;</span><span class="n">gt</span><span class="p">;)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">specials</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">iday</span><span class="p">.</span><span class="n">toString</span><span class="p">()</span> <span class="p">==</span> <span class="n">it</span><span class="p">[</span><span class="n">DATE</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">it</span><span class="p">[</span><span class="n">TYPE</span><span class="p">]</span> <span class="p">==</span> <span class="n">GOOD</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">goodList</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="n">it</span><span class="p">[</span><span class="n">NAME</span><span class="p">]</span><span class="o">!!</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="n">it</span><span class="p">[</span><span class="n">DESCRIPTION</span><span class="p">]</span><span class="o">!!</span><span class="p">))</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">badList</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="n">it</span><span class="p">[</span><span class="n">NAME</span><span class="p">]</span><span class="o">!!</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="n">it</span><span class="p">[</span><span class="n">DESCRIPTION</span><span class="p">]</span><span class="o">!!</span><span class="p">))</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 生成今日运势</span>
</span><span class='line'><span class="c1">// Two part: from specials events and random picked from activities</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">genTodayLuck</span><span class="p">():</span> <span class="n">Pair</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">List</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Map</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;&amp;</span><span class="n">gt</span><span class="p">;,</span> <span class="n">List</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Map</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;&amp;</span><span class="n">gt</span><span class="p">;&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">theActivities</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">isWeekend</span><span class="p">())</span> <span class="n">activities</span><span class="p">.</span><span class="n">filter</span> <span class="p">{</span> <span class="n">it</span><span class="p">[</span><span class="n">WEEKEND</span><span class="p">]</span> <span class="p">==</span> <span class="s">&quot;true&quot;</span> <span class="p">}</span> <span class="k">else</span> <span class="n">activities</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">goodList</span> <span class="p">=</span> <span class="n">ArrayList</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Map</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;&amp;</span><span class="n">gt</span><span class="p">;()</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">badList</span> <span class="p">=</span> <span class="n">ArrayList</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Map</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;&amp;</span><span class="n">gt</span><span class="p">;()</span>
</span><span class='line'>    <span class="n">pickSpecials</span><span class="p">(</span><span class="n">goodList</span><span class="p">,</span> <span class="n">badList</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">numGood</span> <span class="p">=</span> <span class="n">random</span><span class="p">(</span><span class="n">iday</span><span class="p">,</span> <span class="m">98</span><span class="p">)</span> <span class="p">%</span> <span class="m">3</span> <span class="p">+</span> <span class="m">2</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">numBad</span> <span class="p">=</span> <span class="n">random</span><span class="p">(</span><span class="n">iday</span><span class="p">,</span> <span class="m">87</span><span class="p">)</span> <span class="p">%</span> <span class="m">3</span> <span class="p">+</span> <span class="m">2</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">pickedEvents</span> <span class="p">=</span> <span class="n">pickRandomActivity</span><span class="p">(</span><span class="n">theActivities</span><span class="p">,</span> <span class="n">numGood</span> <span class="p">+</span> <span class="n">numBad</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Add random picked from activities to GOOD/BAD list</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="k">in</span> <span class="m">0</span> <span class="n">until</span> <span class="n">numGood</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">goodList</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="n">pickedEvents</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">NAME</span><span class="p">]</span><span class="o">!!</span><span class="p">,</span> <span class="n">DESCRIPTION</span> <span class="n">to</span> <span class="n">pickedEvents</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">GOOD</span><span class="p">]</span><span class="o">!!</span><span class="p">))</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="k">in</span> <span class="m">0</span> <span class="n">until</span> <span class="n">numBad</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">badList</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="n">pickedEvents</span><span class="p">[</span><span class="n">numGood</span> <span class="p">+</span> <span class="n">i</span><span class="p">][</span><span class="n">NAME</span><span class="p">]</span><span class="o">!!</span><span class="p">,</span> <span class="n">DESCRIPTION</span> <span class="n">to</span> <span class="n">pickedEvents</span><span class="p">[</span><span class="n">numGood</span> <span class="p">+</span> <span class="n">i</span><span class="p">][</span><span class="n">BAD</span><span class="p">]</span><span class="o">!!</span><span class="p">))</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Pair</span><span class="p">(</span><span class="n">goodList</span><span class="p">,</span> <span class="n">badList</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">genTodayString</span><span class="p">():</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;今天是&quot;</span> <span class="p">+</span> <span class="n">today</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="n">Calendar</span><span class="p">.</span><span class="n">YEAR</span><span class="p">)</span> <span class="p">+</span>
</span><span class='line'>            <span class="s">&quot;年&quot;</span> <span class="p">+</span> <span class="p">(</span><span class="n">today</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="n">Calendar</span><span class="p">.</span><span class="n">MONTH</span><span class="p">)</span> <span class="p">+</span> <span class="m">1</span><span class="p">)</span> <span class="p">+</span>
</span><span class='line'>            <span class="s">&quot;月&quot;</span> <span class="p">+</span> <span class="n">today</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="n">Calendar</span><span class="p">.</span><span class="n">DAY_OF_MONTH</span><span class="p">)</span> <span class="p">+</span>
</span><span class='line'>            <span class="s">&quot;日 星期&quot;</span> <span class="p">+</span> <span class="n">weeks</span><span class="p">[</span><span class="n">today</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="n">Calendar</span><span class="p">.</span><span class="n">DAY_OF_WEEK</span><span class="p">)</span> <span class="p">-</span> <span class="m">1</span><span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">genDirection</span><span class="p">():</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">index</span> <span class="p">=</span> <span class="n">random</span><span class="p">(</span><span class="n">iday</span><span class="p">,</span> <span class="m">2</span><span class="p">)</span> <span class="p">%</span> <span class="n">directions</span><span class="p">.</span><span class="n">size</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">directions</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">genGirlsIndex</span><span class="p">():</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">star</span><span class="p">(</span><span class="n">random</span><span class="p">(</span><span class="n">iday</span><span class="p">,</span> <span class="m">6</span><span class="p">)</span> <span class="p">%</span> <span class="m">5</span> <span class="p">+</span> <span class="m">1</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">genDrinks</span><span class="p">():</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">drinks</span><span class="p">.</span><span class="n">pickRandom</span><span class="p">(</span><span class="m">2</span><span class="p">).</span><span class="n">joinToString</span><span class="p">(</span><span class="s">&quot;, &quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>完整的代码可以到这里<a href="https://github.com/alexhilton/KotlinHello">下载</a>。</p>

<h3>用到的新特性</h3>

<p>从代码中看到，除了上一篇文章外，还用到了一些Kotlin语言的特性：</p>

<h4>Ranges</h4>

<p>可以理解为区间，用于按某些范围来迭代，看一下例子中genTodayLuck方法就能明白。下面也简单的补充下：
<code>kotlin
for (i in 1..10) // 等同于for (int i = 1; i &lt;= 10; i++)
for (i in 0 until 10) // 等同于for (int i = 0; i &lt; 10; i++)
</code>
自己可以体会上面的两个不同，还有就是还可以用于if判断：
<code>kotlin
if (a in 1..10) // if (1 &lt;= a &amp;&amp; a &lt;= 10)
</code>
默认步长是1, 当然也可以自定义：
<code>kotlin
for (i in 1..10 step 2) // =&gt; for (int i = 1; i &lt;= 10; i += 2)
</code></p>

<h4>Extension function</h4>

<p>可以给已存在的类添加方法，非继承也非组合的方式，与Object-C中的Category很像。这会让在基于某个类，执行某种操作时，非常的简洁，比如此例中的pickRandom方法，如果常规实现是把列表作为一个参数传入，但是用了Extension function后，使用的时候就仿佛这是Collection本身提供的一个方法一样，可读性与简洁性大大提升。</p>

<h4>Companion object</h4>

<p>与内部类概念类似，就是想在一个类的内部再声明一个类，就要用companion object，引用companion object的成员时可以省略它的类的名字，如示例中，在CalendarActivity中引用ProgrammerCalendar的companion object EventKeys时可以省略:
<code>kotlin
ProgrammerCalendar.DESCRIPTION
</code></p>

<h4>const关键字</h4>

<p>上一篇文章，介绍过变量用var声明，常量用val来声明，那关键字const又是什么鬼呢？原来它用于声明类的顶级属性（用人话说，就是非内部类），其作用相当于Java中的static final：
<code>kotlin
const val NAME = "name" //相当于Java中的public static final String NAME = "name";
</code></p>

<h2>参考资料</h2>

<ul>
<li><a href="https://www.sitepoint.com/building-a-ui-with-kotlin-and-anko/">Building a UI with Kotlin and Anko</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[学习Kotlin，看这一篇就够了]]></title>
    <link href="http://toughcoder.net/blog/2018/05/17/introduction-to-kotlin-programming-language/"/>
    <updated>2018-05-17T20:51:21+08:00</updated>
    <id>http://toughcoder.net/blog/2018/05/17/introduction-to-kotlin-programming-language</id>
    <content type="html"><![CDATA[<h2>人生苦短，要用Kotlin</h2>

<p>这是一种对程序猿更为友好的语言，可以减少开发者的工作量，原本由开发者干的事情，其实很多都可以由编译器实现了，这是一种更为高级的语言。Java虽然严谨，但却过于繁琐，太啰嗦了，一个小事情却要写大量的代码，而且有些代码又是非常机械式的，在实际编码过程中都是用IDE来自动生成。Java，C，C++，Object C这些都是上世纪的编程语言。</p>

<p><a href=""><img src="https://fossbytes.com/wp-content/uploads/2017/09/Kotlin-programming-language-course.png"></a></p>

<p>现在到了新时代了，编程也发展了很多，像lambda表达式，函数式编程，等等一些新的概念和范式在涌现。所以就有了新时代的编程语言，像水果的Swift，Groovy，Scala，以及Java阵营的Kotlin。Kotlin是新一代的编程语言，与Java完美融合，简洁，方便，可以大大提高程序可读性，特别是对于Android开发者来说。水果推出了Swift以解放水果平台的开发者，而Kotlin就是来解放Android开发者的。</p>

<!-- more -->


<p>虽然说Kotlin可以用在任何可以用Java的地方，但目前主要就是两大领域服务端，以及Android应用开发，特别是有了Google官方的支持，所以Kotlin对于Android开发者的意义更为重大，身为一个Android猿，是一定要学习一下这门现代的编程语言的，因为当你学过了之后 ，你会发现，之前写的代码都是在浪费生命。</p>

<h2>Development environment setup</h2>

<p>有三种方式</p>

<h3>命令行</h3>

<p>其实，这是最好的方式，因为配置起来非常的方便。到<a href="https://kotlinlang.org/docs/tutorials/command-line.html">官网</a>去下载编译器，解压，然后把kotlinc/bin/放到PATH环境变量里面，就可以了。如果要配置Vim，还需要安装一下插件，大神们早就把插件准备好了，只需要<a href="https://github.com/udalov/kotlin-vim">下载</a>，然后按照官方方法安装即可，其实就是把解压后的东西拷贝到相应的目录里面就好了。</p>

<h3>Idea IntellJ</h3>

<p>这个看<a href="https://kotlinlang.org/docs/tutorials/getting-started.html">官方文档</a>就可以了，孤未亲测，如遇困难请自行Google。</p>

<h3>Android Studio</h3>

<p>因为Kotlin官已支持了Android Studio，而Google也支持了，总而言之就是在Android Studio中可以直接使用Kotlin。所以， Android Stuido 3.0以后的版本无需特殊配置，就可以用例Kotlin了。</p>

<p>对于刚开始学习Kotlin而言呢，孤推荐使用命令行的方式，而不要使用Android Studio，特别是直接创建一个基于Kotlin的Android项目，因为此时对语言还不够熟悉，直接上项目，会迷失在项目配置，frameworks以及语言基础之中。刚学习一门语言的时候要先学习基本的语法以及语言本身的特性，这最好先绕开框架和项目，会更容易上手一些。</p>

<h2>Hello world</h2>

<p>这是所有编程语言的入门必学课程，目的是让学习者快速的体验一下一门语言，我们也不用多想，照着一个字母，一个字母的把示例敲进去就好了：</p>

<ol>
<li>选择喜欢的文本编辑器，如Vim hello.kt，Kotlin的文件扩展名是*.kt，我们遵循就好。<br/></li>
<li>一字不差的敲进去:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">package</span> <span class="nn">hello&lt;/li&gt;</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">ol</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">fun</span> <span class="nf">main</span><span class="p">(</span><span class="n">args</span><span class="p">:</span> <span class="n">Array</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Hello</span><span class="p">,</span> <span class="n">world</span><span class="p">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">&lt;</span><span class="n">code</span><span class="p">&gt;</span>
</span><span class='line'><span class="err">然后，保存文件</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">br</span><span class="p">/&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="m">3.</span> <span class="err">回到命令行，编译源码，如果一切顺利会得到一个叫</span><span class="n">hello</span><span class="p">.</span><span class="n">jar</span><span class="err">的文件，这就是</span><span class="n">kotlin</span><span class="err">的最终输出，也就是它的目标文件</span><span class="p">.</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;</span><span class="n">bash</span>
</span><span class='line'><span class="n">kotlinc</span> <span class="n">hello</span><span class="p">.</span><span class="n">kt</span> <span class="p">-</span><span class="n">include</span><span class="p">-</span><span class="n">runtime</span> <span class="p">-</span><span class="n">d</span> <span class="n">hello</span><span class="p">.</span><span class="n">jar</span>
</span><span class='line'><span class="p">&lt;</span><span class="n">code</span><span class="p">&gt;&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">br</span><span class="p">/&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="m">4.</span> <span class="err">运行，这里跟</span><span class="n">Kotlin</span><span class="err">其实已经没啥关系了，因为经过编译得到的是一个标准的</span><span class="n">Jar</span><span class="err">文件，像运行其他</span><span class="n">jar</span><span class="err">一样运行就好了：</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;</span><span class="n">bash</span>
</span><span class='line'><span class="n">java</span> <span class="p">-</span><span class="n">jar</span> <span class="n">hello</span><span class="p">.</span><span class="n">jar</span>
</span></code></pre></td></tr></table></div></figure>
就会得到输出Hello, world到此，第一个Kotlin程序已经完成，是不是很酷，已经迫不及待的想深入学习了！往下看吧。</p>

<h2>The basics</h2>

<h3>语句结构</h3>

<p>一行一个语句（先不纠结语句与表达式的区别），不用加分号，不用打分号，光这个就可以节省多少时间呢？是不是感觉人生都浪费在了分号上面。如果想在一行写多个语句，前面的要加上分号。</p>

<p>缩进规则与Java一致，用四个空格，也可以用tab，或者不加缩进，只要没人打你。</p>

<p>语句块需要加上花括号{}。总之，语句结构与Java很类似。</p>

<h3>变量</h3>

<p>用var来声明变量，用val来声明常量，因为Kotlin是静态强类型语言（也就是说每个变量在编译的时候必须知道类型）声明时需要带上类型，方法是在变量名的后面加冒号，空格跟上类型名字，与Pascal差不多。如果声明时直接定义，则可以不用指定类型，编译器会根据定义表达式来推测它的类型。示例：
<code>kotlin
var str: String
val i: Int
var str = "Hello, world"
</code></p>

<h3>语句和表达式</h3>

<p>主要想说一下语句和表达式的区别，简单来说就是表达式是有值的，可以放在变量赋值的右边，而语句是没有值的，不能放在赋值的右边</p>

<h3>基本运算</h3>

<p>不多说了，跟Java一样</p>

<h3>注释</h3>

<p>这个跟Java也一样：
// 单行注释
/<em> </em>/  多行注释
/<em>* </em>/ documentation</p>

<h3>函数</h3>

<p>以fun关键字来定义一个函数格式为：<em>fun 函数名(参数): 返回类型 {函数体}</em>，如:
<code>kotlin
fun foo(name: String): Int {
   return name.length()
}
</code>
命名参数和默认值，调用函数时可以把参数的名字带上，以增加可读性。声明函数时可以用默认值 ，以更好的支持函数的重载。如：
<code>kotlin
fun foo(name: String, number: Int = 42, toUpper: Boolean = false): String {}
</code>
使用时，可以指定参数的名字：
<code>kotlin
foo("a)
foo("b", number = 1)
foo("c", toUpper = true)
foo(name = "d", number = 2, toUpper = false)
</code>
表达式体如果一个函数体内只有一个表达式，且有返回值时，那么，可以直接把返回值放在函数 的后面，如：
<code>kotlin
fun foo(name: String): String = name.toUpperCase()
</code>
甚至还可以把返回类型的声明给省略掉，如：
<code>kotlin
fun foo(name: String) = name.toUpperCase()
</code>
跟Java不一样的是，Kotlin的函数可以声明为toplevel也就是跟class一个级别，也就是说不必非放在类里面，也就是说跟C和C++是类似的。此外，还可以函数赋值给一个变量，这个变量就像其他变量一样。</p>

<h3>类与对象</h3>

<h4>类的声明与对象创建</h4>

<p>用class来声明一个类型，用:来继承父类或者实现接口，不需要使用new来创建对象：
<code>kotlin
class Person {
   var name: String
   var age: Int
}
</code>
假如，一个类，是空的，没有内容，那么花括号{}是可以省略的：
<code>kotlin
class Person
</code>
创建对象：
<code>kotlin
var someone = Person()
</code></p>

<h4>Primary constructor</h4>

<p>构造方法，有所谓的primary constructor，可以直接写在类名的后面：
<code>kotlin
class Person constructor(name: String)
</code>
一般情况下，constructor 可以省略掉：
<code>kotlin
class Person(name: String)
</code>
初始化块因为primary constructor不能包含代码，所以，想要做些初始化工作就可以放在初始化块里面(initializer block)，也可以在定义属性时直接使用：
<code>kotlin
class Person(name: String) {
    var firstName: String = name
    init {
        println("First initializer block that prints ${name}")
    }
}
</code>
一般情况下，如果声明的属性变量在primary constructor中都有赋值（通过initializer block）的话，可以有更简洁的表达方式：
<code>kotlin
class Person(var name: String, var age: Int)
</code>
这相当于：
<code>kotlin
class Person(theName: String, theAge: Int) {
   var name: String = theName   var age: Int = theAge
}
</code>
如果primary construct前面要声明属性，或者有annotation的话，关键字constructor不能省略：
<code>kotlin
class Person public @Inect constructor(var name: String)
</code></p>

<h4>Secondary constructor</h4>

<p>如果primary constructor不能满足需求怎么办呢？还可以声明其他constructor，所谓的secondary constructor:
<code>kotlin
class Person {
   var name: String constructor(name: String）{
       this.name = name
   }
}
</code>
是不是看起来舒服一些，因为跟Java一样了，可以把primary constfuctor和second constructor联合起来一起用：
<code>kotlin
class Person(var name: String) {
    constructor(name: String, parrent: Person) : this(name) {
        parrent.addChild(this)
    }
}
</code>
这里要把secondary construct尽可能delegate到primary constructor，这里的delegate的意思就是primary constructor会在second constructor之前 执行，还有就是initiailzer block都是在primary construct中执行的，这就能保证initiliazer block在second constructor之前执行。即使没有显示的声明primary constructor，编译器还是会生成一个默认的primary constructor以及把secondary constructor默认的delegate到primary constrcutor上面。也就是说，会保证primary constructor以及initializer block执行在second constructor前面：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">Constructors</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">init</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Initializer</span> <span class="n">block</span><span class="p">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="p">}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="n">constructor</span><span class="p">(</span><span class="n">i</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;second constructor&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">fun</span> <span class="nf">main</span><span class="p">(</span><span class="n">args</span><span class="p">:</span> <span class="n">Array</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">c</span> <span class="p">=</span> <span class="n">Constructors</span><span class="p">(</span><span class="m">3</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">&lt;</span><span class="n">code</span><span class="p">&gt;</span>
</span><span class='line'><span class="err">输出：</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;</span><span class="n">bash</span>
</span><span class='line'><span class="n">Initializer</span> <span class="n">block</span>
</span><span class='line'><span class="n">second</span> <span class="n">constructor</span>
</span></code></pre></td></tr></table></div></figure></p>

<h4>属性和访问方法</h4>

<p>Kotlin会为声明的属性生成默认的setter和getter：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="k">var</span> <span class="py">name</span><span class="p">:</span> <span class="n">Strring</span><span class="p">,</span> <span class="k">var</span> <span class="py">age</span><span class="p">:</span> <span class="n">Int</span><span class="p">)&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">val</span> <span class="py">p</span> <span class="p">=</span> <span class="n">Person</span><span class="p">(&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Kevin</span><span class="p">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="m">24</span><span class="p">)</span>
</span><span class='line'><span class="n">p</span><span class="p">.</span><span class="n">getName</span><span class="p">()</span> <span class="c1">// 返回&quot;Kevin&quot;</span>
</span><span class='line'><span class="n">p</span><span class="p">.</span><span class="n">setAge</span><span class="p">(</span><span class="m">32</span><span class="p">)</span> <span class="c1">// age变成了32</span>
</span><span class='line'><span class="p">&lt;</span><span class="n">code</span><span class="p">&gt;</span>
</span><span class='line'><span class="err">如果想自定义</span><span class="n">setter</span><span class="err">和</span><span class="n">getter</span><span class="err">，也是可以的：</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;</span><span class="n">kotlin</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Person</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>        <span class="k">set</span><span class="p">(</span><span class="n">n</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="p">==</span> <span class="k">null</span> <span class="p">||</span> <span class="n">n</span> <span class="p">==</span> <span class="p">&amp;</span><span class="n">ldquo</span><span class="p">;&amp;</span><span class="n">rdquo</span><span class="p">;)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">name</span> <span class="p">=</span> <span class="p">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Unkown</span><span class="p">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">name</span> <span class="p">=</span> <span class="n">n</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">get</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">name</span> <span class="p">==</span> <span class="p">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Unkwon</span><span class="p">&amp;</span><span class="n">rdquo</span><span class="p">;)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="p">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Nobody</span><span class="p">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">name</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h4>定义类的方法</h4>

<p>跟声明普通函数一样，只不过是放在了类里面：
<code>kotlin
class Person(val name: String, val age: Int) {
    fun report() = "My name is $name, and I'm $age"
}
</code>
如果，要覆写父类的方法，需要使用在方法声明时加上override关键字。
<code>kotlin
class Doggy(val name: String) : Animal {
    override fun yell() = "Barking from $name"
}
</code></p>

<h4>访问权限</h4>

<p>访问权限也跟Java类似分为public，protected，private以及internal，前三个意义也都一样，只不过默认值不一样，在Java里，如果对成员没有指明，则是package scope，也就是同一个package可以访问，但是Kotlin默认是public的。</p>

<p>internal是module内部可见，有点类似于Java中的package，但是module定义跟package不一样，module是一组编译在一起的Kotlin文件，它跟编译打包有关系，简单的理解它的范围要比package要大。</p>

<p>还有就是类，默认是不可被继承的，相当于final class。如果想要允许继承就要在声明类的时候加上open。</p>

<h3>字串</h3>

<p>概念就不说了，大部分与Java一模一样的，像支持的方法等。唯一需要说的就是字串模板，就是说把其他类型转化为字串时，有较Java更为方便的方式：直接用$来把变量嵌入到字串之中，如：
<code>kotlin
val msg = "Error 1"
val count = 32
print("We got message $msg") //等同于"We got message " + msg
print("Total is $count") // Total is 32
</code></p>

<h3>lambda表达式</h3>

<p>首先要介绍一个概念，高阶函数，其实就是把另外函数当作参数的函数，或者说产生一个函数，也即把函数作为返回值 的函数。前面说过，函数是一级对象，可以像常规变量一样来使用，所以，就能把函数作为参数或者返回值来使用高阶函数。lambda表达式就是为高阶函数更方便使用而生的。</p>

<h4>lambda 表达式</h4>

<p>作为新时代的编程语言，都会支持函数式编程，而lambda表达 式又是函数式编程里面必不可少的一份子。其实啥是lambda表达式呢？说的简单点就是没有名字的函数，非常简短的，通常都是一两句话的没有名字的函数。就是长这个样子{A, B -> C}，这里面A，B是参数，C是表达式，如：
<code>kotlin
val sum = { x: Int, y： Int -&gt; x + y }
</code>
其中，参数的类型是可以省略的，因为编译器能从上下文中推测出来:
max(strings, { a, b -> a.length &lt; b.length }
表达式部分，可以不止一个，最后一个表达式作为返回值。</p>

<p>当把一个lambda表达作为最后一参数，传给某个函数时，可以直接把lambda表达式写在参数的外面，比如：
<code>kotlin
val product = items.fold(1) { acc, e -&gt; acc * e }
</code>
而当lambda是唯一的参数时，也可以把参数的括号省略掉：
<code>kotlin
run { println("Hello, world") }
</code>
还有就是，如果lambda表达中只有一个参数，那么参数也可以省略，直接写表达式:
<code>kotlin
eval{ x * x }
</code></p>

<h4>函数类型</h4>

<p>前面提到了函数是可以像普通变量一样使用的一级类，也就是说它是一个类型。它的具体形式是: (A, B)->C，其中括号内的是参数，C是返回类型，如：
<code>kotlin
val sum: (Int, Int)-&gt;Int = { x, y -&gt; x + y }
val square: (Int)-&gt;Int = { x -&gt; x * x }
</code>
为啥要提一下函数类型呢，因为有时需要声明高阶函数：
<code>kotlin
fun walk(f: (Int)-&gt;Int)
fun run(f: ()-&gt;Unit)
</code>
Unit是一个特殊的返回值，相当于void，意思就是此函数没有返回值。</p>

<h3>集合</h3>

<p>其实大部分跟Java是一样的。只不过有一些函数式的操作，要多注意使用，从而让代码更简洁，如：</p>

<ul>
<li>遍历</li>
<li>过滤</li>
<li>映射</li>
<li>排序</li>
<li>折叠</li>
<li>分组</li>
<li>归类</li>
</ul>


<p>这些操作，对于大家应该都不难理解，就不一一解释了，来段code就知道了：
<code>kotlin
fun collectionTests() {
    val list = listOf("Apple", "Google", "Microsoft", "Facebook", "Twitter", "Intel", "QualComm", "Tesla")
    // 遍历，以进行某种操作
    list.forEach{ println(it) }
    //按条件进行过滤，返回条件为true的
    val short = list.filter { it.length &lt; 6 }
    println(short) // [Apple, Intel, Tesla]
    // 把列表元素映射成为另外一种元素
    val lenList = list.map{ it.length }
    println("Length of each item $lenList") //Length of each item [5, 6, 9, 8, 7, 5, 8, 5]
    // 按某种条件进行排序
    val ordered = list.sortedBy { it.length }
    println("Sorted by length $ordered") // Sorted by length [Apple, Intel, Tesla, Google, Twitter, Facebook, QualComm, Microsoft]
    // 折叠，用累积的结果继续遍历
    val joint = list.fold("", {partial, item -&gt; if (partial != "")  "$partial, $item" else item })
    println("Joint list with comma $joint") // Joint list with comma Apple, Google, Microsoft, Facebook, Twitter, Intel, QualComm, Tesla
    //分组，用某种条件 把列表分成两组
    val (first, second) = list.partition { it.length &lt; 6 }
    println("Length shorter than 6 $first") // Length shorter than 6 [Apple, Intel, Tesla]
    println("Longer than 6 $second") // Longer than 6 [Google, Microsoft, Facebook, Twitter, QualComm]
    // 归类，按某种方法把元素归类，之后变成了一个Map
    val bucket = list.groupBy { it.length }
    println("$bucket is a map now") //{5=[Apple, Intel, Tesla], 6=[Google], 9=[Microsoft], 8=[Facebook, QualComm], 7=[Twitter]} is a map now
}
</code></p>

<h3>null处理</h3>

<p>为了有效的减少空指针异常，Kotlin加入了Nullable类型，核心的原理是这样的：声明类型的时候要明确的告诉编译器，这个变量是否可能为null，如果可能为null，那么可以赋null给这个变量，并且在使用此变量时必须检查是否为null；假如这个变量不可能为null，那么是不可以赋null给此变量的。也就是说，编译器会帮忙做一些检查，以减少NullPointerException的发生。</p>

<h4>Nullable变量</h4>

<p>默认的变量声明都是不可为null的，如:
<code>kotlin
var safe: String
safe = null // 会有compile error
</code>
要想允许变量为null，要在类型后面加一个问号，以告诉编译器这是一个nullable类型：
<code>kotlin
var danger: String?
danger = null // OKay
</code>
使用时，nullable不能直接使用，必须检查是否为null:
<code>kotlin
safe.length // okay
danger.length // compile error, danger could be null
</code></p>

<h4>检查Nullable的真伪</h4>

<p>可以用传统方式：
<code>kotlin
val len = if (danger != null) danger.length else -1
</code></p>

<h5>Safe call</h5>

<p>既然有Nullable类型，自然就有配套的方式来更方便的使用它：
<code>kotlin
val len = danger?.length
</code>
如果danger是null就返回null，否则返回长度，注意它的返回值是一个Int?（又是一个Nullable类型)。这个还能链起来：
<code>kotlin
bob?.department?.head?.name
</code>
如果任何一环为null，则直接返回null。是不是感觉省了好多if (a == null)判断。</p>

<h5>Elvis operator</h5>

<p>假如不能接受safe call返回的null，咋办呢？想提供默认值的呢？也有方式：
<code>kotlin
val len = danger?.length
println(len ?: -1)
</code>
稍有点绕哈，首先，danger?.length返回一个Int?吧，那么?:的作用就是如果len是null，那么就返回-1,否则返回它的值。</p>

<h5>强制取值符！！</h5>

<p>它的作用是如果Nullable变量为null就抛出NullPointerException，如果正常的话就取其值，返回的类型是一个non-null类型：
<code>kotlin
val len = danger!!.length // get length or NullPointerException
</code>
尽管，编译器可以帮助我们做一些事情，但是现实的项目中的大量的NPE并不是直接来源于，可以方便追踪的赋值为null，而多是发生在多线程环境中，以及非常复杂的逻辑之中，编译器能否追踪到并警示，还有待考察。另外，就是虽有利器，但是要运用恰当，何时用允许null，何时不允许，还是要靠工程师的设计能力，比如尽可能返回空列表，空Map，或者空字串，而不是直接简单的返回null，这就能减少一定的NPE。</p>

<h2>Exercises</h2>

<p>光是看书或者看教程是比较乏味的，学习编程最重要的是要上手去练习，这样能加深印象，更好的理解书中或者教程中所讲的概念和知识点。官方也准备了一个非常好的练习项目叫Kotlin-koans，非常适配初学习者来练手。
下面说一下如何使用这个练习项目：</p>

<ol>
<li>到<a href="https://github.com/Kotlin/kotlin-koans">官网</a>去下载后，解压</li>
<li>用Android Studio打开此项目，一切提示都回答yes</li>
<li>要想运行测试前需要先编译一下项目，否则会提示找不到基础的测试类，找到Gradle窗口，一般在右侧，点开找到kotlin-koans->Tasks->build->build，运行它</li>
<li>现在就可以用先进的TDD方式来学习Kotlin了，在Project视图下面，可以看到kotlin-koans项目，里面有两个，一个是java，一个是tests，这两个目录里面的子目录都是一一对应的，先运行tests下面的，会失败，然后编辑java/下面的对应的代码，直到测试通过。</li>
</ol>


<h2>Essence of Kotlin</h2>

<p>致此，我们可以看出Kotlin这门语言的设计的核心理念：简洁，这是Kotlin的核心理念，所以我们看到，一些机械的，重复的，可以从上下文中推测 出来的都 可以省略，以增加可读性。我们在使用Kotlin的时候要践行此理念，把语言的特性发挥到最大。
当然，简洁，不是牺牲可读性的方式来缩短代码，而是要使用语言中的标准的简洁的表达方式，比如lambda表达式，省略参数等。</p>

<p>要注意参考<a href="http://kotlinlang.org/docs/reference/coding-conventions.html">Kotlin conventions</a>以及<a href="https://android.github.io/kotlin-guides/">Android Kotlin conventions</a>以写出更加简洁和容易理解的代码。</p>

<h2>Android dev setup</h2>

<p>我们来新建一个项目，用纯Kotlin实现一个Hello, world Android应用，来展示一下如何在Android中使用Kotlin:</p>

<p><strong>注意</strong>: 这里使用的是Android Studio 3.1.2版本，默认就支持Kotlin，如果使用小于3.0的版本需要安装Kotlin插件，可自行Google，孤还是建议先升级AS吧。</p>

<ol>
<li>新建一个项目，其实流程跟新建一个普通Android Studio项目是一样一样的，从Android Studio3.0起，新建项目时就会有一个Checkbox，问你要不要添加Kotlin。这里把它选上。
<img src="https://wx2.sinaimg.cn/mw690/870ad0baly1frgfq2b7odj20p40ixwfe.jpg" alt="Step 1" /></li>
<li>就直接下一步就好
<img src="https://wx2.sinaimg.cn/mw690/870ad0bagy1frfm0n9r38j20p40ixq4g.jpg" alt="Step 2" /></li>
<li>Next，创建一个empty activity
<img src="https://wx2.sinaimg.cn/mw690/870ad0baly1frgfqcxzruj20p40ixmy3.jpg" alt="Step 3" /></li>
<li>Finish<br/>
<img src="https://wx3.sinaimg.cn/mw690/870ad0baly1frgfqcz4tpj20p40ixdgr.jpg" alt="Step 4" /></li>
<li>布局跟其他新建的Android项目无差别
<img src="https://wx1.sinaimg.cn/mw690/870ad0baly1frgfqd39n2j20sp0io78b.jpg" alt="Step 5" /></li>
<li>代码已经是Kotlin的了
<img src="https://wx4.sinaimg.cn/mw690/870ad0baly1frgfqczcpmj20nz0cegmo.jpg" alt="Step 6" /></li>
<li><p>直接显示&#8221;Hello, world&#8221;略显无聊，所以加一下点击事件：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">HelloActivity</span> <span class="p">:</span> <span class="n">AppCompatActivity</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'> <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>     <span class="k">super</span><span class="p">.</span><span class="n">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
</span><span class='line'>     <span class="n">setContentView</span><span class="p">(</span><span class="n">R</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">activity_hello</span><span class="p">)&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span> <span class="k">val</span> <span class="py">colorTable</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span><span class="s">&quot;#ff0000&quot;</span><span class="p">,</span> <span class="s">&quot;#00ff00&quot;</span><span class="p">,</span> <span class="s">&quot;#0000ff&quot;</span><span class="p">,</span> <span class="s">&quot;#ffff00&quot;</span><span class="p">,</span> <span class="s">&quot;#00ffff&quot;</span><span class="p">,</span> <span class="s">&quot;#ff00ff&quot;</span><span class="p">)</span>
</span><span class='line'> <span class="k">val</span> <span class="py">label</span> <span class="p">=</span> <span class="n">findViewById</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">TextView</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;(</span><span class="n">R</span><span class="p">.</span><span class="n">id</span><span class="p">.</span><span class="n">label</span><span class="p">)</span>
</span><span class='line'> <span class="n">label</span><span class="p">.</span><span class="n">setOnClickListener</span> <span class="p">{</span> <span class="n">view</span> <span class="p">-&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>     <span class="k">val</span> <span class="py">randomIndex</span> <span class="p">=</span> <span class="p">(</span><span class="n">Math</span><span class="p">.</span><span class="n">random</span><span class="p">()</span> <span class="p">*</span> <span class="n">colorTable</span><span class="p">.</span><span class="n">size</span><span class="p">).</span><span class="n">toInt</span><span class="p">()</span>
</span><span class='line'>     <span class="n">view</span><span class="p">.</span><span class="n">setBackgroundColor</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">parseColor</span><span class="p">(</span><span class="n">colorTable</span><span class="p">[</span><span class="n">randomIndex</span><span class="p">]))</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
其实，整体来看，布局和项目的结构还是按照Android的方式来，唯一的不同是代码可以用Kotlin来写了。</p></li>
</ol>


<h2>Good to go</h2>

<p>至此，Kotlin就算入门了，可以使用Kotlin来构建应用程序了，或者在你的项目中应用Kotlin了。</p>

<h2>参考资料和有用的资料分享</h2>

<ul>
<li><a href="https://kotlinlang.org/docs/reference/">官方文档</a></li>
<li><a href="https://www.kotlinresources.com/">Awesome Kotlin Resources</a></li>
<li><a href="https://developer.android.com/kotlin/">Kotlin and Android</a></li>
<li><a href="https://developer.android.com/kotlin/resources">Resources to Learn Kotlin</a></li>
<li><a href="https://learnxinyminutes.com/docs/kotlin/">Learn Kotlin in Y minutes</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
