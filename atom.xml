<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[稀有猿诉]]></title>
  <link href="http://toughcoder.net/atom.xml" rel="self"/>
  <link href="http://toughcoder.net/"/>
  <updated>2023-02-05T23:30:55+08:00</updated>
  <id>http://toughcoder.net/</id>
  <author>
    <name><![CDATA[Alex Hilton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[链表问题总结]]></title>
    <link href="http://toughcoder.net/blog/2023/01/31/mastering-linkedlist/"/>
    <updated>2023-01-31T23:18:57+08:00</updated>
    <id>http://toughcoder.net/blog/2023/01/31/mastering-linkedlist</id>
    <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Linked_list">链表LinkedList</a>是一种线性的非连续数据结构，优势是随机删除和添加特别高效，但随机访问效率差。因为链表边界条件较多，容易出错，所以还是比较常见的一类题目。但链表常见的问题就那么多，总结起来就那么几个，想要掌握还是比较容易的。</p>

<p><a href="http://toughcoder.net/blog/2023/01/31/mastering-linkedlist/"><img src="https://myeasytuts.com/wp-content/uploads/2020/04/Linked-List-in-Swift.jpg" title="auto auto" ></a></p>

<!-- more -->


<h2>单链表</h2>

<p>单链表是出现频率最高的，虽然现实中很少用它，因为它的效率差，现实中一般多用双向链表。单链表也即是每个节点只有一个指针，指向下一个节点，只能从前往后的顺序来遍历，如果想对某一个节点进行操作，必须找到这个节点的前一个节点。
<img src="https://www.testingdocs.com/questions/wp-content/uploads/Single-Linked-List.png" alt="" /></p>

<h3>哨兵节点</h3>

<p>哨兵节点是指在输入的头节点的前面加一个节点，它的值没有任何意义，它的存在是为了简化逻辑。通常用于添加和删除操作中，如果输入的头节点是null，那么就需要特殊处理，而用了哨兵节点，就可以简化逻辑。</p>

<p>比如说，常规的添加和删除：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">ListNode</span> <span class="nf">normalAppend</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">head</span><span class="o">,</span> <span class="kt">int</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">ListNode</span> <span class="n">newNode</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ListNode</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">// ugly</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">head</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">newNode</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ListNode</span> <span class="n">current</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="n">current</span><span class="o">.</span><span class="na">next</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">current</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">newNode</span><span class="o">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">head</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">ListNode</span> <span class="nf">normalDelete</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">head</span><span class="o">,</span> <span class="kt">int</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// ugly</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">head</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">// ugly</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">head</span><span class="o">.</span><span class="na">val</span> <span class="o">==</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">head</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ListNode</span> <span class="n">current</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="n">current</span><span class="o">.</span><span class="na">next</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">current</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">val</span> <span class="o">==</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">current</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">head</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到为了处理头节点是null的情况要加很多逻辑，但如果使用哨兵节点，逻辑就会非常简单：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">ListNode</span> <span class="nf">append</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">head</span><span class="o">,</span> <span class="kt">int</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">ListNode</span> <span class="n">dummy</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ListNode</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">head</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ListNode</span> <span class="n">current</span> <span class="o">=</span> <span class="n">dummy</span><span class="o">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="n">current</span><span class="o">.</span><span class="na">next</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">current</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ListNode</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">dummy</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">ListNode</span> <span class="nf">delete</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">head</span><span class="o">,</span> <span class="kt">int</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">ListNode</span> <span class="n">dummy</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ListNode</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">head</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ListNode</span> <span class="n">current</span> <span class="o">=</span> <span class="n">dummy</span><span class="o">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="n">current</span><span class="o">.</span><span class="na">next</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">current</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">val</span> <span class="o">==</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">current</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">dummy</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>哨兵节点的作用是要能简化逻辑，一般用在需要考虑头节点为null的情况，或者当使用双指针，需要从-1位置出发时。但不要滥用，要真能起到简化逻辑才可以。另外就是注意哨兵节点的值要尽可能与常规节点的值区分开来，否则把哨兵节点当成常规节点就会出错。</p>

<h3>反转</h3>

<p>链表反转是基础的操作，有三种方式：<strong>迭代，逆向构造式</strong>；<strong>使用栈，顺向构建</strong>；和<strong>递归式</strong>，详见206的题解。</p>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/reverse-linked-list/">206. 反转链表</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/reverse-linked-list/solution/206-fan-zhuan-lian-biao-by-alexhilton-6ttd/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/palindrome-linked-list/">234. 回文链表</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/palindrome-linked-list/solution/by-alexhilton-pcab/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h3>遍历和随机访问</h3>

<p>主要是为了查找某个节点，以进行其他操作。需要别注意的是单链表必须 要找到前一个节点才可以，所以遍历的终止条件一般都是curr.next == target。高级的方法就是<strong>双指针</strong>和<strong>快慢指针</strong>，双指针是指两个指针指向不同的位置，然后以同样的速度向前移动；而快慢指针的特点是一个跑的快（两倍步长到next.next），一个跑的慢（常规步长到next），通常从同一个起点出发，注意它们之间是有区别的。</p>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">19. 删除链表的倒数第 N 个结点</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/solution/19-shan-chu-lian-biao-de-dao-shu-di-n-ge-xa3i/">题解</a> </td>
<td style="text-align:left;"> 双指针 </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/linked-list-components/">817. 链表组件</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/linked-list-components/solution/by-alexhilton-0raa/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/kth-node-from-end-of-list-lcci/">面试题 02.02. 返回倒数第 k 个节点</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/kth-node-from-end-of-list-lcci/solution/by-alexhilton-us40/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/middle-of-the-linked-list/">876. 链表的中间结点</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/middle-of-the-linked-list/solution/by-alexhilton-0uz4/">题解</a> </td>
<td style="text-align:left;"> 快慢指针 </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="">1290. 二进制链表转整数</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/convert-binary-number-in-a-linked-list-to-integer/solution/by-alexhilton-h6oe/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h3>插入和删除</h3>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/swap-nodes-in-pairs/">24. 两两交换链表中的节点</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/swap-nodes-in-pairs/solution/by-alexhilton-p9ch/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-list-ii/">82. 删除排序链表中的重复元素 II</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-list-ii/solution/82-shan-chu-pai-xu-lian-biao-zhong-de-zh-cmlv/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-list/">83. 删除排序链表中的重复元素</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-list/solution/by-alexhilton-u8ul/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/remove-duplicate-node-lcci/">面试题 02.01. 移除重复节点</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/remove-duplicate-node-lcci/solution/by-alexhilton-u6rm/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/remove-linked-list-elements/">203. 移除链表元素</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/remove-linked-list-elements/solution/by-alexhilton-qvkv/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/delete-node-in-a-linked-list/">237. 删除链表中的节点</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/delete-node-in-a-linked-list/solution/by-alexhilton-3c7t/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h3>链表合并</h3>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/merge-two-sorted-lists/">21. 合并两个有序链表</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/merge-two-sorted-lists/solution/21-he-bing-liang-ge-you-xu-lian-biao-by-2pafg/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/merge-k-sorted-lists/">23. 合并K个升序链表</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/merge-k-sorted-lists/solution/by-alexhilton-zctb/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/sort-list/">148. 排序链表</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/sort-list/solution/by-alexhilton-tqk5/">题解</a> </td>
<td style="text-align:left;"> 寻找中间点，归并排序 </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/merge-in-between-linked-lists/">1669. 合并两个链表</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/merge-in-between-linked-lists/solution/by-alexhilton-gl5m/">题解</a> </td>
<td style="text-align:left;"> 严格来说不算合并，主要涉及删除和插入，以及随机访问 </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h3>相交链表</h3>

<p>属于高级题目，但套路单一，当作基本套路记住就行了。</p>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/intersection-of-two-linked-lists/">160. 相交链表</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/intersection-of-two-linked-lists/solution/by-alexhilton-jhos/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/flatten-binary-tree-to-linked-list/solution/114-er-cha-shu-zhan-kai-wei-lian-biao-by-3mke/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h3>环形链表</h3>

<p>主要分两种，一种是链表部分成环；另外就是整个链表就是环（首尾相接），套路也比较单一，记住就行了。</p>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/4ueAj6/">剑指 Offer II 029. 排序的循环链表</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/4ueAj6/solution/by-alexhilton-dr5w/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/linked-list-cycle/">141. 环形链表</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/linked-list-cycle/solution/141-huan-xing-lian-biao-by-alexhilton-pzk1/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/linked-list-cycle-ii/">142. 环形链表 II</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/linked-list-cycle-ii/solution/by-alexhilton-u2dm/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h3>综合</h3>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/flatten-binary-tree-to-linked-list/">114. 二叉树展开为链表</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/flatten-binary-tree-to-linked-list/solution/114-er-cha-shu-zhan-kai-wei-lian-biao-by-3mke/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/lru-cache/">146. LRU 缓存</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/lru-cache/solution/by-alexhilton-xdf0/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h2>双向链表</h2>

<p>每个节点有两个指针分别指向下一个节点和前一个节点，这是在实际工作中使用的最多的链表形式，绝大部分操作与单链表是一样的，也是线性的。</p>

<p><img src="https://www.studytonight.com/data-structures/images/doubly-linked-list-1.png" alt="" /></p>

<p>双向链表因为有两个指针，所以在删除或者插入的时候需要小心处理好四个指针，其他的东西与单链表是一样的。</p>

<h2>跳表 SkipList</h2>

<p>这是以链表为基础能构造出来的最复杂的数据结构，是二维链表形式，它能够实现log(n)级别的各种操作，效率非常之高，在很多地方替代了二叉树。
<img src="https://pic2.zhimg.com/v2-17f6e0c031067f3d2a1d5b8f0e586ff5_r.jpg" alt="" /></p>

<h3>基本原理</h3>

<h3>标准实现</h3>

<h3>相关题目</h3>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h2>参考资料</h2>

<ul>
<li><a href="https://www.geeksforgeeks.org/data-structures/linked-list/">Linked List Data Structure</a></li>
<li><a href="https://www.javatpoint.com/singly-linked-list">Linked List</a></li>
<li><a href="https://www.tutorialspoint.com/data_structures_algorithms/linked_list_algorithms.htm">Data Structure and Algorithms - Linked List</a></li>
<li><a href="https://www.programiz.com/dsa/linked-list">Linked list Data Structure</a></li>
<li><a href="https://www.simplilearn.com/tutorials/data-structure-tutorial/linked-list-in-data-structure">Linked List in A Data Structure: All You Need to Know</a></li>
<li><a href="https://www.geeksforgeeks.org/skip-list/">Skip List | Set 1 (Introduction)</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/33674267">SkipList的原理与实现</a></li>
<li><a href="https://www.jianshu.com/p/9d8296562806">Skip List&ndash;跳表（全网最详细的跳表文章没有之一）</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/108386262">详解SkipList跳跃链表【含代码】</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding Coroutines]]></title>
    <link href="http://toughcoder.net/blog/2023/01/27/understanding-coroutines/"/>
    <updated>2023-01-27T10:59:13+08:00</updated>
    <id>http://toughcoder.net/blog/2023/01/27/understanding-coroutines</id>
    <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Coroutine">协程Coroutine</a>是一种轻量级的实现异步的方式，使用上大大简化了以往异步和多线和带来的种种麻烦（如状态同步和锁），今天就来学习一下协程，以及在<a href="https://kotlinlang.org/docs/coroutines-guide.html">Kotlin中协程</a>的使用方式。</p>

<p><a href="http://toughcoder.net/blog/2023/01/27/understanding-coroutines/"><img src="https://cdn.filestackcontent.com/fShtqYm3Tp2Xl9C36xN8" title="auto auto" ></a></p>

<!-- more -->


<h2>理解异步</h2>

<p>在解释什么是协程之前，得先要理解什么是异步。异步也就是说程序是非阻塞非同步的，并不是按照顺序来执行的。这么说依然很绕，我们来一个简单的例子。比如有这样一个语句：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">main</span><span class="p">(</span><span class="n">args</span><span class="p">:</span> <span class="n">Array</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;)</span> <span class="p">{</span>
</span><span class='line'>     <span class="n">println</span><span class="p">(</span><span class="s">&quot;world of Coroutine!&quot;</span><span class="p">)</span> <span class="c1">// 1</span>
</span><span class='line'>     <span class="n">print</span><span class="p">(</span><span class="s">&quot;Hello ...&quot;</span><span class="p">)</span> <span class="c1">// 2</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个代码的输出很明显是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>world of Coroutine
</span><span class='line'>Hello ...
</span></code></pre></td></tr></table></div></figure>


<p>函数的执行是从上到下按我们写的顺序执行的，这就是顺序执行的意思，虽然说编译器会做一些指令重排以期对字节码进行一些优化，但有一个前提就是它不会改变程序的正确性，比如后面语句如果需要前面表达的结果时，一定能保证它们的执行顺序。同步的意思是，执行一个子函数，子函数会占用CPU，直到它运行结束再返回到调用它的函数，继续运行并能把结果带回给调用者，这即是同步的意思。比如这里的println，println没有执行完时，后面的语句是不会执行的。</p>

<p>异步的意思是函数语句的执行并不是按照我们写的顺序来运行的。比如说，前面的函数，如何能输出&#8221;Hello &hellip;world of Coroutine&#8221; ？这就需要让代码实现异步，非顺序的执行。有多种方式，协程就可以实现异步：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">=</span> <span class="n">runBlocking</span> <span class="p">{</span> <span class="c1">// this: CoroutineScope</span>
</span><span class='line'>    <span class="n">launch</span> <span class="p">{</span> <span class="c1">// launch a new coroutine and continue</span>
</span><span class='line'>        <span class="n">delay</span><span class="p">(</span><span class="m">1000L</span><span class="p">)</span> <span class="c1">// non-blocking delay for 1 second (default time unit is ms)</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;world of Coroutine!&quot;</span><span class="p">)</span> <span class="c1">// print after delay</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;Hello ...&quot;</span><span class="p">)</span> <span class="c1">// main coroutine continues while a previous one is delayed</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// Hello ...world of Coroutine!</span>
</span></code></pre></td></tr></table></div></figure>


<h2>协程不是线程</h2>

<p>需要特别注意的是协程并不是线程，它并不是实现多线程或者并行的方式，相反，协程是实现异步和并发的方式，它是让多个函数更好的协作以实现异步和并发，<a href="http://c.biancheng.net/view/9486.html">并发与并行的区别可以看这里</a>。</p>

<p><img src="https://ts1.cn.mm.bing.net/th/id/R-C.cd0dda66a295b461b1ec1f269be2314d?rik=4v1wb0LmAIbRew&amp;riu=http%3a%2f%2fsungjk.github.io%2fimages%2f2021%2f08%2f01%2fcoroutine.png&amp;ehk=D9i5q9A3eVYLMoxOPPbCAU0Rxek54FJ%2figmJCJYuY%2fc%3d&amp;risl=&amp;pid=ImgRaw&amp;r=0" alt="" /></p>

<p>从它的名字可以看出，它是子例程之间的协作，它是函数的执行，可以挂起，可以继续，但它不会产生阻塞。可以理解为它把线程进行了拆解，分为线程环境的具体函数的执行，协程则是函数的执行。</p>

<h2>实战</h2>

<p>这时强烈推荐<a href="https://kotlinlang.org/docs/coroutines-and-channels.html">官方的一个实战性的教程</a>，它是一个有具体应用场景且足够的复杂的小项目，大部分代码已实现了，预留了一些任务来练手，并有教程进行讲解，当然也有参考答案，非常适合学习和参考。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://zhuanlan.zhihu.com/p/25979906">简单解释 Coroutine</a></li>
<li><a href="https://www.baeldung.com/kotlin/threads-coroutines">Threads vs Coroutines in Kotlin</a></li>
<li><a href="https://developer.android.google.cn/kotlin/coroutines">Kotlin coroutines on Android</a></li>
<li><a href="https://amitshekhar.me/blog/kotlin-coroutines">Mastering Kotlin Coroutines</a></li>
<li><a href="https://blog.csdn.net/xinzhilinger/article/details/116240688">Unity 协程(Coroutine)原理与用法详解</a></li>
<li><a href="https://docs.python.org/3/library/asyncio-task.html">Coroutines and Tasks</a></li>
<li><a href="https://www.educba.com/coroutines-vs-threads/">Coroutines vs Threads</a></li>
<li><a href="https://coolshell.cn/articles/10975.html">一个“蝇量级” C 语言协程库</a></li>
<li><a href="https://coolshell.cn/articles/12012.html">STATE THREADS 回调终结者</a></li>
<li><a href="https://en.wikipedia.org/wiki/Asynchronous_I/O">Asynchronous I/O</a></li>
<li><a href="https://realpython.com/async-io-python/">Async IO in Python: A Complete Walkthrough</a></li>
<li><a href="https://www.topcoder.com/thrive/articles/Introduction-to-asyncio-asynchronous-io-in-python">INTRODUCTION TO ASYNCIO (ASYNCHRONOUS IO) IN PYTHON</a></li>
<li><a href="https://andela.com/insights/an-introduction-to-asynchronous-programming-in-python-with-async-io/">An introduction to asynchronous programming in Python with Async IO</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kotlin Collections]]></title>
    <link href="http://toughcoder.net/blog/2023/01/26/kotlin-arrays-and-collections/"/>
    <updated>2023-01-26T16:39:49+08:00</updated>
    <id>http://toughcoder.net/blog/2023/01/26/kotlin-arrays-and-collections</id>
    <content type="html"><![CDATA[<p>现代的软件一般比较复杂，程序语言中的基本数据类型往往不能满足需要，除了<a href="http://toughcoder.net/blog/2023/01/19/kotlin-types-and-operators/">基本的数据类型</a>以外，还有对象的容器也非常的重要，比如线性容器（数组，列表和Set）和二维容器（哈希表）等。今天就来学习一下Kotlin中的容器。</p>

<p><a href="http://toughcoder.net/blog/2023/01/26/kotlin-arrays-and-collections/"><img src="https://koenig-media.raywenderlich.com/uploads/2019/06/KotlinCollections-twitter.png" title="auto auto" ></a></p>

<!-- more -->


<h2><a href="https://kotlinlang.org/docs/collections-overview.html">Kotlin Collections</a></h2>

<p>集合就是用于处理一组对象的容器，因为用的人较多，所以就成了标准库。常见的集合有三种主要类型，列表类，Set类和Map类。</p>

<h3>线性容器</h3>

<p>这里并不单纯指类List，主要的意思是线性的容器，它的特点是以<strong>相对顺序存储同一类型的对象</strong>，有一个整数索引(index)来表示其相对的位置，查找性能差，其他还好。代表为数组。</p>

<h3><a href="https://kotlinlang.org/docs/arrays.html">数组</a></h3>

<p>最简单也是使用最为广泛的线性容器，不用过多的介绍了，可以参考<a href="http://toughcoder.net/blog/2023/01/19/kotlin-types-and-operators/">之前的文章</a>。</p>

<p>最大的弊端就是长度是固定的，长度在创建数组时就确定了，后面就改不了了。所以，必须在<strong>事先要能够确定数组的长度</strong>。</p>

<h4>创建复杂数组</h4>

<p>比如数组的元素是一个Collection，而非常见的基本数据类型，这时要如何写？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'>   <span class="k">val</span> <span class="py">carray</span> <span class="p">=</span> <span class="n">arrayOf</span><span class="p">&lt;</span><span class="n">MutableList</span><span class="p">&lt;</span><span class="n">Int</span><span class="p">&gt;&gt;(</span>
</span><span class='line'>        <span class="n">mutableListOf</span><span class="p">(),</span>
</span><span class='line'>        <span class="n">mutableListOf</span><span class="p">()</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">narray</span> <span class="p">=</span> <span class="n">Array</span><span class="p">&lt;</span><span class="n">MutableList</span><span class="p">&lt;</span><span class="n">Int</span><span class="p">&gt;&gt;(</span><span class="m">10</span><span class="p">)</span> <span class="p">{</span> <span class="n">mutableListOf</span><span class="p">()</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>关键就在于要声明元素的类型，其他的与基本数据类型的数组是一样的。另外，如果数组数量比较少，方便直接写，那就用字面构造函数，其实很方便。或者用数组元素的构造方法也可以。</p>

<h4>多维数组</h4>

<p>以最为常见的二维数组来说，要如何创建?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'>   <span class="k">val</span> <span class="py">smatrix</span> <span class="p">=</span> <span class="n">arrayOf</span><span class="p">(</span>
</span><span class='line'>        <span class="n">arrayOf</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">),</span>
</span><span class='line'>        <span class="n">arrayOf</span><span class="p">(</span><span class="m">4</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">6</span><span class="p">),</span>
</span><span class='line'>        <span class="n">arrayOf</span><span class="p">(</span><span class="m">7</span><span class="p">,</span> <span class="m">8</span><span class="p">,</span> <span class="m">9</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">matrix</span> <span class="p">=</span> <span class="n">Array</span><span class="p">(</span><span class="m">5</span><span class="p">)</span> <span class="p">{</span> <span class="n">IntArray</span><span class="p">(</span><span class="m">6</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a href="https://kotlinlang.org/docs/ranges.html">Ranges</a></h3>

<p>用于表示区间的表达式，最为直观理解就是数组的索引，用<strong>操作符..</strong>来表示区间，比如0~9，就是<strong>0..9</strong>，通常用于for-loop中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="k">in</span> <span class="m">1.</span><span class="p">.</span><span class="m">4</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// equivalent of i &gt;= 1 &amp;&amp; i &lt;= 4</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="k">in</span> <span class="m">1.</span><span class="p">.</span><span class="m">4</span><span class="p">)</span> <span class="n">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="c1">// for (int i = 1; i &lt;= 4; i++) print(i)</span>
</span></code></pre></td></tr></table></div></figure>


<p>还可以指定步长和边界，以及方向：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="k">in</span> <span class="m">0</span> <span class="n">until</span> <span class="m">10</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// for (int i = 0; i &lt; 10; i++)</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">ln</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="k">in</span> <span class="m">0</span> <span class="n">until</span> <span class="m">10</span> <span class="n">step</span> <span class="m">2</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// for (int i = 0; i &lt; 10; i += 2)</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">ln</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="k">in</span> <span class="m">9</span> <span class="n">downTo</span> <span class="m">0</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// for (int i = 9; i &gt;= 0; i--)</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>还可以用于字符，比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">c</span> <span class="k">in</span> <span class="sc">&#39;a&#39;</span><span class="p">..</span><span class="sc">&#39;z&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// for (char c = &#39;a&#39;; c &lt;= &#39;z&#39;; c++)</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Range是一个表达式，所以在其之上做其他操作，但需要注意这时<strong>需要加上括号</strong>，比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="k">in</span> <span class="p">(</span><span class="m">0.</span><span class="p">.</span><span class="m">9</span><span class="p">).</span><span class="n">filter</span> <span class="p">{</span><span class="n">it</span> <span class="p">%</span> <span class="m">2</span> <span class="p">==</span> <span class="m">0</span> <span class="p">})</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="c1">// only evens</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">c</span> <span class="k">in</span> <span class="p">(</span><span class="sc">&#39;a&#39;</span><span class="p">..</span><span class="sc">&#39;z&#39;</span><span class="p">).</span><span class="n">map</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">toUpperCase</span><span class="p">()</span> <span class="p">})</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="c1">// upper case</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>需要注意</strong>，虽然Ranges方便操作数组的索引，但如果想要带着索引遍历数组的话，还是要用专用的遍历方式，而不是用Range，比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">for</span> <span class="p">((</span><span class="n">index</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="k">in</span> <span class="n">array</span><span class="p">.</span><span class="n">withIndex</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;the element: [$index] = $value&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>注意与repeat的区别</h4>

<p>Ranges是一个数据结构代表着一个区间，这个区间可能是一个整数范围，也可能是一个字符范围，其实也可以是其他自定义数据类型，只要能表达 出区间的概念。只不过整数区间是为常用的一种方式，以及整数区间可以方便当作数组和列表的索引。</p>

<p>但有时如果仅仅想重复一件事情n次，那就没有必要用Ranges，虽然它也可以，这时最为方便的是函数repeat，它与区间的唯一区别是repeat是没有返回值的，它仅是把一件事情重复n次，但没有返回值也就是说没有办法再转化为其他数组或者列表。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">repeat</span><span class="p">(</span><span class="m">10</span><span class="p">)</span> <span class="p">{</span> <span class="n">println</span><span class="p">(</span><span class="s">&quot;repeat # $it&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="c1">//repeat # 0</span>
</span><span class='line'><span class="c1">//repeat # 1</span>
</span><span class='line'><span class="c1">//repeat # 2</span>
</span><span class='line'><span class="c1">//repeat # 3</span>
</span><span class='line'><span class="c1">//repeat # 4</span>
</span><span class='line'><span class="c1">//repeat # 5</span>
</span><span class='line'><span class="c1">//repeat # 6</span>
</span><span class='line'><span class="c1">//repeat # 7</span>
</span><span class='line'><span class="c1">//repeat # 8</span>
</span><span class='line'><span class="c1">//repeat # 9</span>
</span></code></pre></td></tr></table></div></figure>


<p>而比如Ranges是可以转化为其他数组和列表的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="p">(</span><span class="m">0</span> <span class="n">until</span> <span class="m">5</span><span class="p">).</span><span class="n">map</span> <span class="p">{</span> <span class="n">it</span> <span class="p">*</span> <span class="n">it</span> <span class="p">}.</span><span class="n">toIntArray</span><span class="p">()</span>
</span><span class='line'><span class="c1">// [0, 1, 4, 9, 16]</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/">列表List</a></h3>

<p>列表可以简单理解为无限长的数组，它最大的特点是<strong>长度不固定，不必事先定好长度，它会随着添加元素而自动增长</strong>。所以，当你事先不知道容器的长度时，就需要用List。它是一个泛型，其余操作与数组一样。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">names</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span><span class="s">&quot;James&quot;</span><span class="p">,</span> <span class="s">&quot;Donald&quot;</span><span class="p">,</span> <span class="s">&quot;Kevin&quot;</span><span class="p">,</span> <span class="s">&quot;George&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">names</span><span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">toUpper</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">.</span><span class="n">forEach</span> <span class="p">{</span> <span class="n">println</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a href="https://kotlinlang.org/docs/sequences.html">序列Sequence</a></h3>

<p>序列与列表比较难区分，直观上它们是一样的。简单来说它并不是容器，它并不持有对象，它生产对象，类似于物理上的信号发射器和<a href="http://toughcoder.net/blog/2023/01/05/introduction-to-rxjava/">RxJava中的Observable</a>，是有时序上的概念的，当你需要时它就生产出来一个元素。</p>

<h3>队列queue</h3>

<p>队列可以用双端队列deque（读作dek），具体实现对象是<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-array-deque/">ArrayDeque&lt;T&gt;</a>。</p>

<p>双端队列是强大的数据结构，即可以用作队列，也可以用作栈。</p>

<h3>Set容器</h3>

<p>Set是一个<strong>不含有重复元素</strong>的容器，特点是<strong>不会保存相对顺序</strong>，可以<strong>快速实现检索</strong>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">names</span> <span class="p">=</span> <span class="n">setOf</span><span class="p">(</span><span class="s">&quot;James&quot;</span><span class="p">,</span> <span class="s">&quot;Harden&quot;</span><span class="p">,</span> <span class="s">&quot;Donald&quot;</span><span class="p">,</span> <span class="s">&quot;Joe&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">nm</span> <span class="k">in</span> <span class="n">names</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="n">nm</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">names</span><span class="p">.</span><span class="n">filter</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">length</span> <span class="p">&gt;</span> <span class="m">4</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">.</span><span class="n">forEach</span> <span class="p">{</span> <span class="n">println</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Map容器</h3>

<p>由映射键->值对组成的二维容器，键不可重复，值可以重复，不会保存相对顺序，也可以用于快速检索。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">nameMap</span> <span class="p">=</span> <span class="n">mapOf</span><span class="p">(</span><span class="s">&quot;James&quot;</span> <span class="n">to</span> <span class="m">15</span><span class="p">,</span> <span class="s">&quot;Harden&quot;</span> <span class="n">to</span> <span class="m">30</span><span class="p">,</span> <span class="s">&quot;Donald&quot;</span> <span class="n">to</span> <span class="m">80</span><span class="p">,</span> <span class="s">&quot;Joe&quot;</span> <span class="n">to</span> <span class="m">86</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">nm</span> <span class="k">in</span> <span class="n">nameMap</span><span class="p">.</span><span class="n">keys</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="n">nm</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">age</span> <span class="k">in</span> <span class="n">nameMap</span><span class="p">.</span><span class="n">values</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="n">age</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">e</span> <span class="k">in</span> <span class="n">nameMap</span><span class="p">.</span><span class="n">entries</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;${e.key} is ${e.value}&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">nameMap</span><span class="p">.</span><span class="n">filter</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">key</span><span class="p">.</span><span class="n">length</span> <span class="p">&gt;</span> <span class="m">5</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">.</span><span class="n">forEach</span> <span class="p">{</span> <span class="n">println</span><span class="p">(</span><span class="s">&quot;${it.key} = ${it.value}&quot;</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>注意Immutability</h2>

<p>有一个地方需要特别注意，那就是容器的<strong>不可变性Immutability</strong>，用常规的方法创建的集合对象是<strong>不可变的Immutable</strong>，就是无法向其中添加元素也无法删除元素。对象的不可变Immutable在函数式编程中是很重要的特性可以有效的减少异步和并发带来的<strong>状态一致性问题</strong>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">names</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span><span class="s">&quot;James&quot;</span><span class="p">,</span> <span class="s">&quot;Donald&quot;</span><span class="p">,</span> <span class="s">&quot;Kevin&quot;</span><span class="p">,</span> <span class="s">&quot;George&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">names</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="s">&quot;Paul&quot;</span><span class="p">)</span> <span class="c1">// compile error, names is immutable</span>
</span><span class='line'><span class="n">names</span><span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">toUpper</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">.</span><span class="n">forEach</span> <span class="p">{</span> <span class="n">println</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样写会有<strong>编译错误</strong>，因为用listOf创建的列表对象是<strong>不可变的Immutable</strong>。如果想要改变就必须用支持更改的对象，如MutableList, MutableSet和MutableMap，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">names</span> <span class="p">=</span> <span class="n">mutableListOf</span><span class="p">(</span><span class="s">&quot;James&quot;</span><span class="p">,</span> <span class="s">&quot;Donald&quot;</span><span class="p">,</span> <span class="s">&quot;Kevin&quot;</span><span class="p">,</span> <span class="s">&quot;George&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">names</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="s">&quot;Paul&quot;</span><span class="p">)</span> <span class="c1">// okay</span>
</span><span class='line'><span class="n">names</span><span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">toUpper</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">.</span><span class="n">forEach</span> <span class="p">{</span> <span class="n">println</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果有可能还是要尽可能的<strong>用不可变对象(Immutable objects)</strong>。</p>

<h2>集合的操作</h2>

<p>集合的操作就是函数式的三板斧过滤filter，转化map和折叠化约fold/reduce，前面讲的所有的容器都是支持的，结合<a href="http://toughcoder.net/blog/2023/01/24/understanding-kotlin-functions/">lambdas</a>可以写出非常规范的函数式代码。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://www.geeksforgeeks.org/kotlin-collections/">Kotlin Collections</a></li>
<li><a href="https://blog.csdn.net/u013700502/article/details/123115051">Kotlin常用Collection集合操作整理</a></li>
<li><a href="https://www.baeldung.com/kotlin/kotlin-collection-guide">Kotlin Collections Guide</a></li>
<li><a href="https://www.geeksforgeeks.org/kotlin-ranges/">Kotlin Ranges</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding Kotlin Functions]]></title>
    <link href="http://toughcoder.net/blog/2023/01/24/understanding-kotlin-functions/"/>
    <updated>2023-01-24T16:43:37+08:00</updated>
    <id>http://toughcoder.net/blog/2023/01/24/understanding-kotlin-functions</id>
    <content type="html"><![CDATA[<p>函数对于编程语言来说是极其重要的一个组成部分，函数可以视为是程序的执行，是真正活的代码，为啥呢？因为运行的时候你必须要执行一个函数，一般从主函数入口，开始一个套一个的函数调用。函数更能体现程序的运行。特别是近些年函数式编程的编程范式开始广泛流行，让函数的地位再次在各种语言中都得到了极大的进升。对于任何一门编程语言，如果没有学好函数，那就相当于没有学，今天就要深入的学习一下Kotlin中的函数。</p>

<p><a href="http://toughcoder.net/blog/2023/01/24/understanding-kotlin-functions/"><img src="https://cdn.codetober.com/wp-content/uploads/2018/11/02121424/kotlin_functions_title-660x320.png" title="auto auto" ></a></p>

<!-- more -->


<p>首先来区分一下，什么是函数什么是方法，函数是编程语言中的一级对象，地位等同于其他Type，函数可以声明在任何地方：顶层（即在任何类任何方法的外面），类里面，另外函数里面等。一般支持函数式编程语言更喜欢用函数。声明在类里面的函数叫作成员函数，但更准确的说是方法。比如像纯OO的编程语言Java就只会说方法(Method)，而像函数式编程语言(Kotlin/Scala/Groovy)喜欢说函数。</p>

<h2><a href="Functions%EF%BB%BF">函数</a>的基本使用</h2>

<p>函数(Functions)在Kotlin中的一级对象，这就意味着它能像其他类型那样，可以声明变量，可以当作参数传递，可以在函数内部定义，先从基本的使用开始。</p>

<h3>函数的声明与定义</h3>

<p>用<strong>关键字fun</strong>来声明函数，然后是<strong>函数名字，参数列表，返回值</strong>和<strong>函数体</strong>：<em>修饰符</em> fun <em>函数名</em>(<em>参数列表</em>) <em>:返回类型</em> {<em>函数体</em>}</p>

<ul>
<li>修饰符，对于类的成员函数才有，一般是权限open/private</li>
<li>fun，用于声明这是一个函数的关键字</li>
<li>函数名，就像变量名一样，是函数的名字</li>
<li>(参数列表)，要用括号约束起来，就是变量的声明，多个要用逗号分隔</li>
<li>:返回类型，注意冒号，也即是函数返回值的类型，如果很明显类型可以推断出来时，就可以省略</li>
<li>{函数体}，也即函数的真实定义部分，想要执行的一些语句</li>
</ul>


<p>如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">double</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">Int</span><span class="p">):</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>     <span class="k">return</span> <span class="n">x</span> <span class="p">+</span> <span class="n">x</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这就是一个标准的函数。</p>

<h3>函数的使用</h3>

<p>函数的使用有三种，一是调用，另一种是声明变量，再有就是当作参数（这其实是在定义一个变量，然后当作参数）。</p>

<h4>函数的调用</h4>

<p>函数都是表达式，都有返回值，但可以不用管返回值，调用函数的时候用括号来标识，比如前面的函数double，可以这样来调用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">dx</span> <span class="p">=</span> <span class="n">double</span><span class="p">(</span><span class="m">5</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是函数最为常用的使用方法，因为程序最终要执行，所以所有的函数最终都是要被调用的。</p>

<h4>声明函数变量</h4>

<p>前面说了，函数是一级类型，它可以像其他类型那样去定义变量，比如前面的double也可以这来写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">myDouble</span> <span class="p">=</span> <span class="p">{</span><span class="n">x</span><span class="p">:</span> <span class="n">Int</span> <span class="p">-&gt;</span> <span class="n">x</span> <span class="p">+</span> <span class="n">x</span><span class="p">}</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">myDouble</span><span class="p">(</span><span class="m">6</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的myDouble就是一个函数变量，它的函数类型与前面的double是一样的，它是一个变量，要想执行它的函数体要加括号。</p>

<h4>把函数当作参数</h4>

<p>这里会涉及<a href="https://kotlinlang.org/docs/lambdas.html#higher-order-functions">高阶函数</a>，高阶函数就是涉及函数中的函数，主要体现在函数的参数或者返回值也是一个函数。比如数组和集合的过滤(filter)和遍历(forEach)里面的参数就是一个函数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">asc</span> <span class="p">=</span> <span class="n">arrayOf</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">4</span><span class="p">,</span> <span class="m">5</span><span class="p">)</span>
</span><span class='line'><span class="n">asc</span><span class="p">.</span><span class="n">filter</span><span class="p">({(</span><span class="n">it</span> <span class="n">and</span> <span class="m">0</span><span class="n">x01</span><span class="p">)</span> <span class="p">==</span> <span class="m">0</span><span class="p">}).</span><span class="n">map</span><span class="p">(</span><span class="n">myDouble</span><span class="p">).</span><span class="n">forEach</span><span class="p">({</span> <span class="n">println</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="p">})</span>
</span><span class='line'><span class="c1">// output-&gt; 4, 8</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为把函数当作参数传递时都涉及<a href="https://kotlinlang.org/docs/lambdas.html#function-types">函数的类型定义</a>，而一般情况下用<a href="https://kotlinlang.org/docs/lambdas.html">lambda</a>是最方便的，先有个印象，后面会详细讲解。</p>

<h3>参数</h3>

<p>函数的参数还有两种比较有用的变体，称之为命名参数和默认值，这两个通常会一起使用。</p>

<h4><a href="https://kotlinlang.org/docs/functions.html#named-arguments">命名参数</a></h4>

<p>当一个函数的参数比较多时，那么在调用时想要传递参数就比较蛋疼，特别是还有相同类型的参数的时候，一片混乱，比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">log</span><span class="p">(</span><span class="n">tag</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">event</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">source</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">amount</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">price</span><span class="p">:</span> <span class="n">Float</span><span class="p">,</span> <span class="n">persist</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">):</span> <span class="n">Unit</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;$tag, $event, $amount $price&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">persist</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// write to file</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">log</span><span class="p">(</span><span class="s">&quot;func&quot;</span><span class="p">,</span> <span class="s">&quot;Function arguments&quot;</span><span class="p">,</span> <span class="s">&quot;Hard way&quot;</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">2.3f</span><span class="p">,</span> <span class="k">false</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样调用，参数太多了，并且相同类型的有三个，这三个极容易传错，而且因为类型检查 不会报错，可能会引发极难调试的bug。</p>

<p>这时就可以使用命名参数来缓解了，命名参数，就是在调用函数，传递参数的时候，指定参数的名字，即就是在声明函数时参数的名字，用以指定具体参数，然后这时就可不用管参数的相对顺序了，比如上面的函数也可以这样调用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'>   <span class="n">log</span><span class="p">(</span><span class="n">event</span> <span class="p">=</span> <span class="s">&quot;Named arguments&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">tag</span> <span class="p">=</span> <span class="s">&quot;func&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">source</span> <span class="p">=</span> <span class="s">&quot;Elegant&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">amount</span> <span class="p">=</span> <span class="m">5</span><span class="p">,</span>
</span><span class='line'>        <span class="n">persist</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'>        <span class="n">price</span> <span class="p">=</span> <span class="m">100f</span>
</span><span class='line'>    <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>不会出错，而且可读性大大加强。但需要注意的是，如果要使用命名参数，就要保持一致性，给所有的参数都要命名。所以，当参数比较多的时候还是比较蛋疼，这时就需要用到参数默认值了。</p>

<h4><a href="https://kotlinlang.org/docs/functions.html#default-arguments">参数默认值</a></h4>

<p>默认值也即是在声明参数的时候指定一个默认值，在调用的时候可以省略这个参数了，比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">foo</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="n">Int</span> <span class="p">=</span> <span class="m">0</span><span class="p">):</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">x</span> <span class="p">+</span> <span class="n">y</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">afoo</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">Int</span> <span class="p">=</span> <span class="m">0</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="n">Int</span><span class="p">):</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">x</span> <span class="p">-</span> <span class="n">y</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">foo</span><span class="p">(</span><span class="m">3</span><span class="p">)</span>
</span><span class='line'><span class="n">afoo</span><span class="p">(</span><span class="n">y</span> <span class="p">=</span> <span class="m">5</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意，如果默认参数是最后一个参数，那么可以直接省略它，如示例中的foo(3)，但如果默认参数不是最后一个，想省略的话，必须要用命名参数，如afoo(y = 5)。当然了，两个参数都传也可以的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">foo</span><span class="p">(</span><span class="m">3</span><span class="p">,</span> <span class="m">5</span><span class="p">)</span>
</span><span class='line'><span class="n">afoo</span><span class="p">(</span><span class="m">3</span><span class="p">,</span> <span class="m">5</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以要把默认值和命名参数结合起来才能发挥最大的价值：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">log</span><span class="p">(</span><span class="n">tag</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">event</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">source</span><span class="p">:</span> <span class="n">String</span> <span class="p">=</span> <span class="s">&quot;Elegant&quot;</span><span class="p">,</span> <span class="n">amount</span><span class="p">:</span> <span class="n">Int</span> <span class="p">=</span> <span class="m">0</span><span class="p">,</span> <span class="n">price</span><span class="p">:</span> <span class="n">Float</span><span class="p">,</span> <span class="n">persist</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">):</span> <span class="n">Unit</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;$tag, $event, $amount $price&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">persist</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// write to file</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">log</span><span class="p">(</span><span class="n">event</span> <span class="p">=</span> <span class="s">&quot;Named arguments&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">tag</span> <span class="p">=</span> <span class="s">&quot;func&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">price</span> <span class="p">=</span> <span class="m">100f</span>
</span><span class='line'>    <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>把握一下<strong>使用原则</strong>：如果参数不多（4个以内），那么就把默认参数往后放，调用的时候也可以不用命名参数，直接省略默认参数就好；如果参数比较多，也要把默认参数往后放，在调用的时候尽可能的使用使用参数。</p>

<h3><a href="https://kotlinlang.org/docs/functions.html#explicit-return-types">返回值</a></h3>

<p>函数的返回值是在参数列表之后，函数体之前用冒号加类型来声明。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">printHello</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="p">?):</span> <span class="n">Unit</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">name</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;Hello $name&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;Hi there!&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">// `return Unit` or `return` is optional</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果函数没有返回值就用Unit来声明，相当于Java中的void，但更多的时候是可以省略的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">printHello</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="p">?)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当<a href="https://kotlinlang.org/docs/functions.html#single-expression-functions">函数体只有一个表达式</a>的时候，这个时候可以省略掉函数体，而把表达式直接写在函数声明的后面，用<strong>赋值符=</strong>来连接，如前面的double也可以这样写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">double</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">Int</span><span class="p">):</span> <span class="n">Int</span> <span class="p">=</span> <span class="n">x</span> <span class="p">+</span> <span class="n">x</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个时候，因为函数体只有一个表达式，所以返回类型很容易推断出来，意味着这时返回类型的声明也可以省略掉：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">double</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">=</span> <span class="n">x</span> <span class="p">+</span> <span class="n">x</span>
</span></code></pre></td></tr></table></div></figure>


<p>这会让代码非常的简洁，又不失可读性。</p>

<h3>解构返回</h3>

<p>Kotlin的函数只能有一个返回值，代表某一个类型的一个变量，如果想有多个返回值，就需要用复杂的类型，比如同一类型的多个有规律的变量可能就要用集合，如数组列表等。但如果类型不同，但逻辑上有关系的2个到3个值，如果想要一起返回，就需要用到组合类型如Pair和Triple，Pair可以把两个不同类型的变量组合成一个对象，Triple可以把三个不同类型的变量组合成一个对象，这样就可以在函数中返回了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">nameAge</span><span class="p">()</span> <span class="p">=</span> <span class="n">Pair</span><span class="p">(</span><span class="s">&quot;Alex&quot;</span><span class="p">,</span> <span class="m">50</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">fullName</span><span class="p">()</span> <span class="p">=</span> <span class="n">Triple</span><span class="p">(</span><span class="s">&quot;Donald&quot;</span><span class="p">,</span> <span class="s">&quot;Jonh&quot;</span><span class="p">,</span> <span class="s">&quot;Trump&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于函数的调用者也很麻烦，要先声明Pair或者Triple对象，然后再拆解，比如这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">pna</span> <span class="p">=</span> <span class="n">nameAge</span><span class="p">()</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;Name ${pna.first}, age ${pna.second}&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这显然比较笨拙，不够简洁。在Kotlin中有更好的做法，可以在函数调用的时候，对返回值进行拆解，称之为解构，如下写法与上面是一样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="err">(</span><span class="py">name</span><span class="p">,</span> <span class="n">age</span><span class="p">)</span> <span class="p">=</span> <span class="n">nameAge</span><span class="p">()</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;Name $name, age $age&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>而且，如果只对组合中的某几个感兴趣，可以把不想要的变量用<strong>下划线_</strong>(underscore)来表示，比如说：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="err">(</span><span class="py">firstName</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">lastName</span><span class="p">)</span> <span class="p">=</span> <span class="n">fullName</span><span class="p">()</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;This is $firstName $lastName&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>尾部lambda参数传递</h3>

<p>前面说了函数可以作为参数传递给其他函数，但我们在使用的时候，一般会直接把一个lambda传递进去，比如说：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">execute</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">f</span><span class="p">:</span> <span class="p">(</span><span class="n">Int</span><span class="p">)-&gt;</span><span class="n">Int</span><span class="p">):</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="p">&lt;</span> <span class="m">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">-</span><span class="m">1</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">f</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>调用的时候，可以这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">execute</span><span class="p">(</span><span class="m">3</span><span class="p">,</span> <span class="p">{</span> <span class="n">it</span> <span class="p">*</span> <span class="n">it</span> <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>但更建议的方式是把lambda放到函数调用之外：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">execute</span><span class="p">(</span><span class="m">5</span><span class="p">)</span> <span class="p">{</span> <span class="n">it</span> <span class="p">+</span> <span class="n">it</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>再比如像集合的函数式写法，通常也只传递一个lambda，这时一般都写在函数调用之外，并且当目标函数没有其他参数时也即除了要传入的lambda外无其他参数时，代表函数调用的括号也可以省略：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">nums</span> <span class="p">=</span> <span class="n">arrayOf</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">4</span><span class="p">,</span> <span class="m">5</span><span class="p">)</span>
</span><span class='line'><span class="n">nums</span><span class="p">.</span><span class="n">filter</span> <span class="p">{</span> <span class="n">it</span> <span class="n">and</span> <span class="m">0</span><span class="n">x01</span> <span class="p">==</span> <span class="m">0</span> <span class="p">}</span> <span class="c1">// 等同于filter({ it and 0x01 == 0 })</span>
</span><span class='line'>        <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">it</span> <span class="p">*</span> <span class="n">it</span> <span class="p">}</span> <span class="c1">// 等同于map({ it * it })</span>
</span><span class='line'>        <span class="p">.</span><span class="n">forEach</span> <span class="p">{</span> <span class="n">println</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="p">}</span> <span class="c1">// 等同于forEach({ println(it) })</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样写非常的简洁，但会牺牲一些可读性，因为花样多了，就会比较难识别出来函数的声明与函数的调用，甚至有时候会分不清函数与普通的变量。所以，识别<strong>函数调用</strong>有两种方式，一是看<strong>有没有括号</strong>，另外就看<strong>有没有尾部lambda</strong>。</p>

<h2>匿名函数</h2>

<p>匿名函数就是不指定函数的名字，通常用于把函数当作 参数传递给高阶函数时使用。</p>

<h2>内部函数</h2>

<h2><a href="https://kotlinlang.org/docs/lambdas.html">高阶函数</a></h2>

<p>高阶函数就是函数的函数，也就是说函数的参数或者返回值是一个函数的函数，也即把函数像其他类型那样使用。函数在Kotlin中一级类型(first class type)，因此从语义层面支持了函数式编程范式，当然也就支持了高阶函数以及lambdas。比如像集合的操作filter/map/fold都是高阶函数，因为它们接受一个函数作为参数。</p>

<h3><a href="https://kotlinlang.org/docs/lambdas.html#function-types">函数类型</a></h3>

<p>高级函数是把函数作为参数或者返回值，但显然并不是所有的函数都能当作高阶函数的参数或者返回值，换句话说，函数本身其实也是有类型之别的，两个函数不见得就是一样的。函数是用来针对其参数，然后在函数体内进行一些运算最终返回一个值，所以区分不同的函数最关键的是输入参数和返回值，与其名字其实没有关系，因此输入参数一致，返回值一致就可以视为同一种函数。</p>

<p>函数的类型用<strong>参数和返回值</strong>来表示，如<strong>(A, B) -> R</strong>形式，A和B是参数，R是返回值，需要注意的是括号不能省略，常见的具体形式有：</p>

<ul>
<li>() -> Unit 无参数无返回值</li>
<li>() -> R 无参数有返回值</li>
<li>(A) -> Unit 有一个参数，无返回值</li>
<li>(A) -> R 一个参数，一个返回值</li>
<li>(A, B) -> Unit 两个参数，无返回值</li>
<li>(A, B) -> R 两个参数，一个返回值</li>
</ul>


<p>函数的类型与方法签名类似(method signature)，代表着某一类的函数。在高阶函数的函数参数或者返回函数就需要用函数类型来声明。</p>

<h3><a href="https://kotlinlang.org/docs/lambdas.html#instantiating-a-function-type">实例化一个函数类型</a></h3>

<p>有很多种途径可以实例化一个函数类型，比较常见的有：</p>

<ul>
<li>通过lambda表达式，如{ a, b -> a + b }，这就是一个函数类型(A, B) -> R的实例</li>
<li>匿名函数，如fun(a: Int, b: Int): Int { return if (a > 0 &amp;&amp; b > 0) a + b else -1 }</li>
<li>引用现存的某一个函数，函数签名（参数相同，返回值相同）就视为同一种函数类型，那么已定义好的函数中有能匹配的就可以直接引用过来，<strong>顶级函数和构造函数用::</strong>来引用，<strong>类成员函数用类名::</strong>来引用，如::isOdd, String::toInt, ::Tripple</li>
</ul>


<h2>lambda表达式</h2>

<p>就是匿名隐式函数体，匿名是不用指定函数的名字，连参数的类型和返回值的类型也都省略，有时甚至连参数都可以省略，只有一个函数体，是最为简洁的一种函数定义方式，通常用于传递给高阶函数的参数，lambda力求简洁，所以但凡能推断出来的都可以省略。最简洁的lambda只有函数体，如val asc = IntArray(5) { it * it } // 创建一个长度为5的整数数组并初始化为[0,1,4,9,16]。
<img src="https://oracle-patches.com/images/2021/02/12/Kotlin_Lambda_expressions_large.jpg" alt="" /></p>

<p>lambda的形式是<strong>{ A, B -> expressions }</strong>，外面的花括号不可省略，这是lambda的标识，然后是参数列表，->用于分隔参数和函数体，除了函数体，其余的都可以省略掉，只要能推断出来。</p>

<h3>Trailing lambdas(尾部lambda)</h3>

<p>这个前面讲过了，再复习一下，当一个函数的最后一个参数是一个函数时，就可以在函数的调用外部写lambda，比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">product</span> <span class="p">=</span> <span class="n">items</span><span class="p">.</span><span class="n">fold</span><span class="p">(</span><span class="m">1</span><span class="p">)</span> <span class="p">{</span> <span class="n">acc</span><span class="p">,</span> <span class="n">e</span> <span class="p">-&gt;</span> <span class="n">acc</span> <span class="p">*</span> <span class="n">e</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">run</span> <span class="p">{</span> <span class="n">println</span><span class="p">(</span><span class="s">&quot;...&quot;</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>隐式参数</h3>

<p>如果lambda表达式只有一个参数，那么这个参数也可以省略，只写函数体就可以，并且可以用<strong>隐式参数it</strong>，比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">ints</span><span class="p">.</span><span class="n">filter</span> <span class="p">{</span> <span class="n">it</span> <span class="p">&gt;</span> <span class="m">0</span> <span class="p">}</span> <span class="c1">// this literal is of type &#39;(it: Int) -&gt; Boolean&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="py">asc</span> <span class="p">=</span> <span class="n">IntArray</span><span class="p">(</span><span class="m">5</span><span class="p">)</span> <span class="p">{</span> <span class="n">it</span> <span class="p">*</span> <span class="n">it</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>lambda的返回值</h3>

<p>lambda力求简洁，所以函数体的最后一个表达式的值即是此lambda的返回值，一般不用显式的return：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">ints</span><span class="p">.</span><span class="n">filter</span> <span class="p">{</span> <span class="n">it</span> <span class="p">&gt;</span> <span class="m">0</span> <span class="p">}</span> <span class="c1">// boolean result of &#39;it &gt; 0&#39; is returned</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="py">asc</span> <span class="p">=</span> <span class="n">IntArray</span><span class="p">(</span><span class="m">5</span><span class="p">)</span> <span class="p">{</span> <span class="n">it</span> <span class="p">*</span> <span class="n">it</span> <span class="p">}</span> <span class="c1">// it * it is the return</span>
</span><span class='line'>
</span><span class='line'><span class="n">ints</span><span class="p">.</span><span class="n">filter</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">shouldFilter</span> <span class="p">=</span> <span class="n">it</span> <span class="p">&gt;</span> <span class="m">0</span>
</span><span class='line'>    <span class="n">shouldFilter</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果要用显式的return语句，要注意scope，在<a href="http://toughcoder.net/blog/2023/01/21/kotlin-controls-and-expressions/">这篇文章有深入讨论</a>，用隐式label来限定scope：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">ints</span><span class="p">.</span><span class="n">filter</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">shouldFilter</span> <span class="p">=</span> <span class="n">it</span> <span class="p">&gt;</span> <span class="m">0</span>
</span><span class='line'>    <span class="k">return</span><span class="n">@filter</span> <span class="n">shouldFilter</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>丢弃参数</h3>

<p>有时候，参数有多个，但可能并不会全都使用，仅使用了其中一个，这时不使用的参数就可以用<strong>下划线_(underscore)</strong>来代替，以表示这个参数不会被使用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">map</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span> <span class="p">(</span><span class="n">_</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">println</span><span class="p">(</span><span class="s">&quot;$value!&quot;</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Kotlin的lambda可以写出非常简洁的函数式链式语句，一气呵成可读性又非常的好，比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">headers</span> <span class="p">=</span> <span class="n">fetchHeaders</span><span class="p">()</span>
</span><span class='line'><span class="n">headers</span><span class="p">.</span><span class="n">filter</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">length</span> <span class="p">==</span> <span class="m">5</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">.</span><span class="n">sortedBy</span> <span class="p">{</span> <span class="n">it</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">uppercase</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">.</span><span class="n">forEach</span> <span class="p">{</span> <span class="n">println</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>内联函数</h2>

<h2>操作符重载</h2>

<h2>参考资料</h2>

<ul>
<li><a href="https://www.geeksforgeeks.org/kotlin-functions/">Kotlin functions</a></li>
<li><a href="https://www.geeksforgeeks.org/kotlin-default-and-named-argument/?ref=lbp">Kotlin | Default and Named argument</a></li>
<li><a href="https://www.cnblogs.com/Jetictors/p/8647888.html">Kotlin——高级篇（一）：Lambda表达式详解</a></li>
<li><a href="https://www.baeldung.com/kotlin/lambda-expressions">Lambda Expressions in Kotlin</a></li>
<li><a href="https://www.yiibai.com/kotlin/lambdas.html">Kotlin lambda表达式</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kotlin Controls and Expressions]]></title>
    <link href="http://toughcoder.net/blog/2023/01/21/kotlin-controls-and-expressions/"/>
    <updated>2023-01-21T17:06:32+08:00</updated>
    <id>http://toughcoder.net/blog/2023/01/21/kotlin-controls-and-expressions</id>
    <content type="html"><![CDATA[<p>有结果返回的是表达式，没有返回的称之为语句，语句最大的问题是它没有返回值，那么想要保存结果就必然会产生副作用，比如改变变量。很多时候这是不够方便的，并且在多线程条件下，这甚至是不安全的。Kotlin中，为了加强线程安全性和方便并发和异步，因此绝大多数语句都是表达式。</p>

<p><a href="http://toughcoder.net/blog/2023/01/21/kotlin-controls-and-expressions/"><img src="https://www.jrebel.com/sites/default/files/image/2021-01/what%20is%20kotlin%20banner%20image.png" title="auto auto" ></a></p>

<!-- more -->


<h2>分支表达式</h2>

<p>Kotlin中没有三元条件符（a > b ? a : b)，但它的<strong>条件分支都是表达式</strong>，可以直接放在赋值符的右边，或者用在return语句中。</p>

<h3><a href="https://kotlinlang.org/docs/control-flow.html#if-expression">if表达式</a></h3>

<p>它是一个两个分支的表达式，是有返回值的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">maxV</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="p">&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="n">a</span> <span class="k">else</span> <span class="n">b</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然了，把它当作常规的语句来使用也是没有问题的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">var</span> <span class="py">max</span><span class="p">:</span> <span class="n">Int</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="p">&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">max</span> <span class="p">=</span> <span class="n">a</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">max</span> <span class="p">=</span> <span class="n">b</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a href="https://kotlinlang.org/docs/control-flow.html#when-expression">when表达式</a></h3>

<p>当超过2个分支时，if就不能用了，这时可以用when表达式，它支持多个分支，类似于其他语言中的switch：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">when</span> <span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="m">1</span> <span class="p">-&gt;</span> <span class="n">println</span><span class="p">(</span><span class="s">&quot;it is 1&quot;</span><span class="p">)</span>
</span><span class='line'>     <span class="m">2</span> <span class="p">-&gt;</span> <span class="n">println</span><span class="p">(</span><span class="s">&quot;it is 2&quot;</span><span class="p">)</span>
</span><span class='line'>     <span class="k">else</span> <span class="p">-&gt;</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">println</span><span class="p">(</span><span class="s">&quot;it is neight 1 nor 2&quot;</span><span class="p">)</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要注意的是，每一行是一个条件，并不是单单指参数与其相等，比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">when</span> <span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="k">in</span> <span class="m">1.</span><span class="p">.</span><span class="m">5</span> <span class="p">-&gt;</span> <span class="n">println</span><span class="p">(</span><span class="s">&quot;Less than 5 bigger than 1&quot;</span><span class="p">)</span>
</span><span class='line'>     <span class="n">x</span><span class="p">.</span><span class="n">isEven</span><span class="p">()</span> <span class="p">-&gt;</span> <span class="n">println</span><span class="p">(</span><span class="s">&quot;it is even&quot;</span><span class="p">)</span>
</span><span class='line'>     <span class="k">else</span> <span class="p">-&gt;</span> <span class="n">println</span><span class="p">(</span><span class="s">&quot;It is neither even or less than 5&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然，最重要的是when是一个表达式，可以<strong>直接用在赋值符的右边，或者当参数传，或者用在return中</strong>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">Request</span><span class="p">.</span><span class="n">getBody</span><span class="p">()</span> <span class="p">=</span>
</span><span class='line'>    <span class="k">when</span> <span class="p">(</span><span class="k">val</span> <span class="py">response</span> <span class="p">=</span> <span class="n">executeRequest</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">Success</span> <span class="p">-&gt;</span> <span class="n">response</span><span class="p">.</span><span class="n">body</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">HttpError</span> <span class="p">-&gt;</span> <span class="k">throw</span> <span class="n">HttpException</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">status</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的when就是函数的返回值，可以看到<strong>when是一个表达式，它会返回一个值，这个值直接作为函数的返回值</strong>。</p>

<p>从这几个示例可以看出<strong>when表达式相当强大</strong>比其他语言的switch要强大许多，并且可以直接当作返回值，当需要超过2个条件分支时就可以使用when表达式。</p>

<h2>循环语句</h2>

<p>循环是语句，与其他语言也差不多。</p>

<h3>while loop</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">while</span> <span class="p">(</span><span class="n">x</span> <span class="p">&lt;</span> <span class="m">10</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>    <span class="n">x</span><span class="p">++</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>屁股向后式do-while loop</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">do</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">x</span> <span class="p">=</span> <span class="n">poll</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">x</span> <span class="p">&lt;</span> <span class="m">10</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a href="https://kotlinlang.org/docs/control-flow.html#for-loops">强大的for loop</a></h3>

<p>这个是最强大，也是最常用的循环语句遍历数组，集合和固定步长时的首选。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">item</span> <span class="k">in</span> <span class="n">collection</span><span class="p">)</span> <span class="n">print</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的collection可以是数组和集合（列表和Set）。严格来说只要collection类型实现了iterator()和next()，就可以在for loop中使用。</p>

<p>for加上range，可以非常强大：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="k">in</span> <span class="m">1.</span><span class="p">.</span><span class="m">10</span><span class="p">)</span> <span class="c1">// = for (int i = 1; i &lt;= 10; i++)</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="k">in</span> <span class="m">0</span> <span class="n">until</span> <span class="m">10</span><span class="p">)</span> <span class="c1">// = for (int i = 0; i &lt; 10; i++)</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="k">in</span> <span class="m">9</span> <span class="n">downTo</span> <span class="m">0</span><span class="p">)</span> <span class="c1">// = for (int i = 9; i &gt;= 0; i--)</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="k">in</span> <span class="m">0</span> <span class="n">until</span> <span class="m">10</span> <span class="n">step</span> <span class="m">2</span><span class="p">)</span> <span class="c1">// = for (int i = 0; i &lt; 10; i += 2)</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果是数组或者列表，但又必须要用索引，也可以直接来：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="k">in</span> <span class="n">array</span><span class="p">.</span><span class="n">indices</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="n">println</span><span class="p">(</span><span class="n">array</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="c1">// &#39;i&#39; is the index</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实有更好的方式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">for</span> <span class="p">((</span><span class="n">index</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="k">in</span> <span class="n">array</span><span class="p">.</span><span class="n">withIndex</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;the element at $index is $value&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实吧，Kotlin是多范式编程语言，天生支持函数式编程，多数情况下不建议直接上for loop，而是用函数式方式的forEach，数组和集合都支持forEach的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">array</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span> <span class="n">println</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2><a href="https://kotlinlang.org/docs/returns.html#return-to-labels">终止语句</a></h2>

<p>当想提前退出函数的执行，或者循环时，就需要用到终止语句，有三种<strong>return, break和continue</strong>。</p>

<h3>return终止函数执行</h3>

<p>这个都比较熟悉，常规的用法都是一样的，可以提前退出函数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">plot</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="p">&lt;</span> <span class="m">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>         <span class="k">return</span> <span class="p">-</span><span class="m">1</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>     <span class="p">...</span>
</span><span class='line'>     <span class="k">return</span> <span class="n">y</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但当有嵌套的lambda时，如不特别指定，return会退出外层的函数，而不是像想当然的退出lambda，比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">listOf</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">4</span><span class="p">,</span> <span class="m">5</span><span class="p">).</span><span class="n">forEach</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">it</span> <span class="p">==</span> <span class="m">3</span><span class="p">)</span> <span class="k">return</span> <span class="c1">// non-local return directly to the caller of foo()</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="n">it</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;this point is unreachable&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个不是终止lambda的执行，而是直接退出函数foo的执行。如果想解决呢，即也退出遍历的lambda有三种方案：</p>

<ul>
<li>使用标签</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">listOf</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">4</span><span class="p">,</span> <span class="m">5</span><span class="p">).</span><span class="n">forEach</span> <span class="n">lit</span><span class="err">@</span><span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">it</span> <span class="p">==</span> <span class="m">3</span><span class="p">)</span> <span class="k">return</span><span class="n">@lit</span> <span class="c1">// local return to the caller of the lambda - the forEach loop</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="n">it</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot; done with explicit label&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>使用隐式标签，也即遍历的方法当作标签</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">listOf</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">4</span><span class="p">,</span> <span class="m">5</span><span class="p">).</span><span class="n">forEach</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">it</span> <span class="p">==</span> <span class="m">3</span><span class="p">)</span> <span class="k">return</span><span class="n">@forEach</span> <span class="c1">// local return to the caller of the lambda - the forEach loop</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="n">it</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot; done with implicit label&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>使用匿名函数而不是lambda，匿名函数与常规函数体效力一样，所以return只在函数体内生效</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">listOf</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">4</span><span class="p">,</span> <span class="m">5</span><span class="p">).</span><span class="n">forEach</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">value</span> <span class="p">==</span> <span class="m">3</span><span class="p">)</span> <span class="k">return</span>  <span class="c1">// local return to the caller of the anonymous function - the forEach loop</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot; done with anonymous function&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这三种方式，如果非要使用，建议使用方式二，用自带的隐式label，因为比较方便，可读性也不差。</p>

<p>但，<strong>非常不建议如此使用return语句</strong>，这本是应该避免的问题，lambda多半是用在函数式遍历和处理，在lambda里面提加return本就是非常奇怪的事情。因为如果某些条件不满足，<strong>想不执行此lambda，应该用filter啊</strong>，而不是笨拙的非要在lambda中去终止：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">listOf</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">4</span><span class="p">,</span> <span class="m">5</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="n">filter</span><span class="p">(</span><span class="n">i</span> <span class="p">-&gt;</span> <span class="n">i</span> <span class="p">!=</span> <span class="m">3</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="n">forEach</span> <span class="p">{</span> <span class="n">println</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;You can do whatever you like here.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>循环的终止</h3>

<p>break终止当前循环，continue则是跳过当前循环的当前步骤，直接跳到下一次迭代。这两个的常规使用与其他语言是一样的。</p>

<p>但对于break，一般来说有一个痛点，就是当有循环嵌套时，break只能终止一层，如果想终止所有循环时，只能再手动的加条件去判断，然后再一层一层的break，比如:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="k">in</span> <span class="m">0</span> <span class="n">until</span> <span class="m">10</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">var</span> <span class="py">found</span> <span class="p">=</span> <span class="k">false</span>
</span><span class='line'>   <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="k">in</span> <span class="n">i</span> <span class="n">until</span> <span class="m">10</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>       <span class="k">if</span> <span class="p">(</span><span class="n">array</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">+</span> <span class="n">array</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="p">==</span> <span class="n">target</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>           <span class="n">found</span> <span class="p">=</span> <span class="k">true</span>
</span><span class='line'>           <span class="k">break</span> <span class="c1">// only break inner for loop</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>   <span class="k">if</span> <span class="p">(</span><span class="n">found</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>       <span class="k">break</span> <span class="c1">// this break outer for loop</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这多少有点笨拙和丑陋，Kotlin有更优雅的解决方式，就是引入了<strong>标签label</strong>，可以给循环加上标签，在break时可以指定标签，同样是上面的情况，可以这样做：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">loop</span><span class="err">@</span> <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="k">in</span> <span class="m">0</span> <span class="n">until</span> <span class="m">10</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="k">in</span> <span class="n">i</span> <span class="n">until</span> <span class="m">10</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>       <span class="k">if</span> <span class="p">(</span><span class="n">array</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">+</span> <span class="n">array</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="p">==</span> <span class="n">target</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">break</span> <span class="n">@loop</span> <span class="c1">// break all loops easily</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实吧，这玩意儿跟当年的goto是一样的，虽然可行，但<strong>不建议多使用</strong>，<strong>标签多了以后会让程序的执行更加的混乱</strong>，试想假如在层层循环中break错了某个标签，调试的难度是相当大的。更多的时候需要仔细想想有没有更好的遍历方式，而不是靠标签来救命。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kotlin Types and Operators]]></title>
    <link href="http://toughcoder.net/blog/2023/01/19/kotlin-types-and-operators/"/>
    <updated>2023-01-19T15:16:43+08:00</updated>
    <id>http://toughcoder.net/blog/2023/01/19/kotlin-types-and-operators</id>
    <content type="html"><![CDATA[<p><a href="https://kotlinlang.org/">Kotlin</a>是新一代的基于JVM的静态多范式编程语言，功能强大，语法简洁，前面已经做过<a href="https://en.wikipedia.org/wiki/Kotlin_(programming_language)">Kotlin</a>的基本的介绍，今天就来深入的学习一下它的数据类型和运算操作符。</p>

<p><a href="http://toughcoder.net/blog/2023/01/19/kotlin-types-and-operators/"><img src="https://cdn.educba.com/academy/wp-content/uploads/2019/08/Kotlin-Operators-.2.png" title="auto auto" ></a></p>

<!-- more -->


<h2>数据类型</h2>

<p>与大部分语言不同的是，在Kotlin中一切皆为对象(Everything is an object)，它没有像Java/C++那样，是没有基础数据类型(primitive types)的，都是对象，因此也不会有像Java那样的box和auto box的麻烦。box和autobox对于单独使用基础数据类型时没啥问题，比如一个方法add(Integer)，会进行自动装箱和拆箱。但如果在集合中使用就不一样了，比如array of int与array of Integer是完全不同的数据类型，以及list of int与list of Integer也是完全不同的数据类型，在这些场景里就会相当麻烦，要进行转换，详细可以<a href="http://toughcoder.net/blog/2022/06/14/java-collection-opertions-made-easy/">参考这篇文章</a>。</p>

<h3>变量类型的声明</h3>

<p>类型是放在变量之后，这样可以先强调变量的名字，后关注其类型，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">var</span> <span class="py">count</span><span class="p">:</span> <span class="n">Int</span>
</span><span class='line'><span class="k">var</span> <span class="py">message</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">double</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">Int</span><span class="p">):</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">x</span> <span class="p">+</span> <span class="n">x</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>类型推断</h3>

<p>虽然Kotlin是<strong>静态强类型语言</strong>，也就是说在编译的时候，编译器必须知道你的数据是什么类型的，这与Java和C++等是一样的，但并不意味着你必须为每个变量声明它的类型。变量的声明，是告诉编译器有一个什么类型的变量，以及叫什么，就比如在函数中的参数列表，就是变量的声明；而变量的定义，则是在声明的同时，要给变量赋值。</p>

<p>那么，当定义变量的时候，编译器是能够直接推断出来它的类型的，这个时候就可以省去类型的声明，<strong>Kotlin语言力求简洁</strong>，凡是能<strong>推断出变量的类型时都可以省去类型的声明</strong>，如定义变量的时候，如在lambda中，或者在函数的返回值中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">PI</span> <span class="p">=</span> <span class="m">3.14</span> <span class="c1">// Double</span>
</span><span class='line'><span class="k">val</span> <span class="py">PI</span><span class="p">:</span> <span class="n">Double</span> <span class="p">=</span> <span class="m">3.14</span> <span class="c1">// 与上面的效果一样</span>
</span></code></pre></td></tr></table></div></figure>


<h3>数字类型(Numbers)</h3>

<p>数字类型与大部分语言一样，特别的，它与Java语言是一样的，都是有符号的，即数字最高数位代表符号。</p>

<h4>整数</h4>

<p>与Java语言一样，有四大整数具体类型，8位的Byte，16位的Short，32位的Int以及64位的Long。它们的范围如下：</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> Type </th>
<th style="text-align:center;"> Size(bits) </th>
<th style="text-align:left;"> Min value </th>
<th style="text-align:left;"> Max value </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> Byte </td>
<td style="text-align:center;"> 8 </td>
<td style="text-align:left;"> -128 </td>
<td style="text-align:left;"> 127 </td>
</tr>
<tr>
<td style="text-align:center;"> Short </td>
<td style="text-align:center;"> 16 </td>
<td style="text-align:left;"> -32768 (-2<sup>15</sup>) </td>
<td style="text-align:left;"> 32767 (2<sup>15</sup> - 1) </td>
</tr>
<tr>
<td style="text-align:center;"> Int </td>
<td style="text-align:center;"> 32 </td>
<td style="text-align:left;"> -2,147,483,648 (-2<sup>31</sup>) </td>
<td style="text-align:left;"> 2,147,483,647 (2<sup>31</sup> - 1) </td>
</tr>
<tr>
<td style="text-align:center;"> Long </td>
<td style="text-align:center;"> 64 </td>
<td style="text-align:left;"> -9,223,372,036,854,775,808 (-2<sup>63</sup>) </td>
<td style="text-align:left;"> 9,223,372,036,854,775,807 (2<sup>63</sup> - 1) </td>
</tr>
</tbody>
</table>


<p>当然了，每个类型都有其<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/-m-a-x_-v-a-l-u-e.html">最大值</a>和<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/-m-i-n_-v-a-l-u-e.html">最小值</a>的常量可以直接引用，不用自己手动写。另外需要注意的是非10进制的字面常量都是二的补码形式，并不是直观的二进制，详细的可以参考<a href="http://toughcoder.net/blog/2022/03/08/java-integer-basics/">另外一篇文章</a>。</p>

<h4>浮点数</h4>

<p>有Float和Double，它们的定义如下：</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> Type </th>
<th style="text-align:center;"> Size (bits) </th>
<th style="text-align:center;"> Significant bits </th>
<th style="text-align:center;"> Exponent bits </th>
<th style="text-align:center;"> Decimal digits </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> Float </td>
<td style="text-align:center;"> 32 </td>
<td style="text-align:center;"> 24 </td>
<td style="text-align:center;"> 8 </td>
<td style="text-align:center;"> 6-7 </td>
</tr>
<tr>
<td style="text-align:center;"> Double </td>
<td style="text-align:center;"> 64 </td>
<td style="text-align:center;"> 53 </td>
<td style="text-align:center;"> 11 </td>
<td style="text-align:center;"> 15-16 </td>
</tr>
</tbody>
</table>


<p><br/></p>

<h4>字面常量(Literals)</h4>

<p>字面常量是指直接写在代码中的数字，默认的是Int和Double，如果需要指定类型，可以用标记或者给变量指定类型，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">one</span> <span class="p">=</span> <span class="m">1</span> <span class="c1">// Int</span>
</span><span class='line'><span class="k">val</span> <span class="py">threeBillion</span> <span class="p">=</span> <span class="m">3000000000</span> <span class="c1">// Long, exceeding Int, so it is Long</span>
</span><span class='line'><span class="k">val</span> <span class="py">aLong</span> <span class="p">=</span> <span class="m">1L</span> <span class="c1">// mark it as Long</span>
</span><span class='line'><span class="k">val</span> <span class="py">oneByte</span><span class="p">:</span> <span class="n">Byte</span> <span class="p">=</span> <span class="m">1</span> <span class="c1">// Byte</span>
</span><span class='line'><span class="k">val</span> <span class="py">e</span> <span class="p">=</span> <span class="m">2.7182818284</span> <span class="c1">// Double</span>
</span><span class='line'><span class="k">val</span> <span class="py">eFloat</span> <span class="p">=</span> <span class="m">2.7182818284f</span> <span class="c1">// Float, actual value is 2.7182817</span>
</span></code></pre></td></tr></table></div></figure>


<p>常见的语法糖：</p>

<ul>
<li>浮点数可以用乘方形式如123.5e10</li>
<li>可以下划线(underscore)来加强可读性，如1_000_000</li>
<li>16进制用0x打头，如0xFF_AB</li>
<li>二进制用0b打头，如0b1101_1111</li>
</ul>


<h3>布尔类型(Booleans)</h3>

<h3>字符类型(Characters)</h3>

<p>用两个单引号来表示，如val ch = &lsquo; &rsquo;</p>

<p>需要注意因为字符是对象，所以不能直接与整数进行比较，需要转化为整数，这点不像Java，在Java中字符是可以直接与整数比较的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'>    <span class="k">val</span> <span class="py">map</span> <span class="p">=</span> <span class="n">CharArray</span><span class="p">(</span><span class="m">26</span><span class="p">)</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">index</span> <span class="p">=</span> <span class="m">0</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">ch</span> <span class="k">in</span> <span class="n">key</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(!</span><span class="n">ch</span><span class="p">.</span><span class="n">isLetter</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">continue</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">map</span><span class="p">[</span><span class="n">ch</span> <span class="p">-</span> <span class="sc">&#39;a&#39;</span><span class="p">].</span><span class="n">toInt</span><span class="p">()</span> <span class="p">==</span> <span class="m">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">map</span><span class="p">[</span><span class="n">ch</span> <span class="p">-</span> <span class="sc">&#39;a&#39;</span><span class="p">]</span> <span class="p">=</span> <span class="sc">&#39;a&#39;</span> <span class="p">+</span> <span class="n">index</span>
</span><span class='line'>            <span class="n">index</span><span class="p">++</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">message</span><span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="k">if</span> <span class="p">(</span><span class="n">it</span><span class="p">.</span><span class="n">isLetter</span><span class="p">())</span> <span class="n">map</span><span class="p">[</span><span class="n">it</span> <span class="p">-</span> <span class="sc">&#39;a&#39;</span><span class="p">]</span> <span class="k">else</span> <span class="n">it</span> <span class="p">}</span>
</span><span class='line'>                <span class="p">.</span><span class="n">joinToString</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>字符串类型(Strings)</h3>

<p>可以视为字符的数组，是一个<strong>不可变对象(immutable object)</strong>，用两个双引号来表示，如</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">message</span> <span class="p">=</span> <span class="s">&quot;Hello, world&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>字符串拼接用<strong>加号+</strong>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">name</span> <span class="p">=</span> <span class="s">&quot;John&quot;</span>
</span><span class='line'><span class="k">val</span> <span class="py">message</span> <span class="p">=</span> <span class="s">&quot;Hello&quot;</span> <span class="p">+</span> <span class="n">name</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然了，直接用加号拼接效率不好，一般情况下可以直接用字符串模板更好一些。</p>

<h4>字符串模板</h4>

<p>这是一个强大且方便的内置功能，相当于简化版本的String.format，可以在字符串用<strong>美元符&#36;</strong>来引用一个变量的值，如果是有方法调用或者运算或者成员引用等情况可以加花括号：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">name</span> <span class="p">=</span> <span class="s">&quot;John&quot;</span>
</span><span class='line'><span class="k">val</span> <span class="py">message</span> <span class="p">=</span> <span class="s">&quot;Hello, $name&quot;</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;Length is ${name.length}&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>字符遍历</h4>

<p>与Java不同的是，字符串在Kotlin里面更像是字符数组，或者说一个列表，因此可以直接遍历：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">mesage</span> <span class="p">=</span> <span class="s">&quot;The quick fox jumps over the lazy dog&quot;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">ch</span> <span class="k">in</span> <span class="n">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="n">println</span><span class="p">(</span><span class="n">ch</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>in</strong>是一个强大的操作符，可以用于集合的遍历。另外，字符串可以像列表一样进行函数式的操作，如判断是否包含某个字符：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">message</span><span class="p">.</span><span class="n">any</span> <span class="p">{</span><span class="n">it</span> <span class="p">==</span> <span class="n">ch</span><span class="p">})</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">println</span><span class="p">(</span><span class="s">&quot;$ch is in $message&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a href="https://kotlinlang.org/docs/arrays.html">数组类型</a>(Arrays)</h3>

<p>数组Array<T>是一个具体类型为T的数组，这是通用的数组，另外还有一种就是基本数组类型数组，我们分别来看一下</p>

<h4>通用对象数组 Array&lt;T&gt;</h4>

<p>这是适用于所有对象的数组，有两种构造方式，一是通过arrayOf()，直接传入数组的具体值，另外就是用构造方法Array(size)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">heights</span> <span class="p">=</span> <span class="n">arrayOf</span><span class="p">(</span><span class="m">240</span><span class="p">,</span> <span class="m">360</span><span class="p">,</span> <span class="m">480</span><span class="p">,</span> <span class="m">640</span><span class="p">)</span>
</span><span class='line'><span class="k">val</span> <span class="py">classes</span> <span class="p">=</span> <span class="n">arrayOf</span><span class="p">(</span><span class="s">&quot;John&quot;</span><span class="p">,</span> <span class="s">&quot;Harden&quot;</span><span class="p">,</span> <span class="s">&quot;Kevin&quot;</span><span class="p">,</span> <span class="s">&quot;Stephen&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">val</span> <span class="py">guards</span><span class="p">:</span> <span class="n">Array</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">Array</span><span class="p">(</span><span class="m">5</span><span class="p">)</span>
</span><span class='line'><span class="n">guards</span><span class="p">[</span><span class="m">0</span><span class="p">]</span> <span class="p">=</span> <span class="s">&quot;Stephen&quot;</span>
</span><span class='line'><span class="n">guards</span><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="p">=</span> <span class="s">&quot;Kevin&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>还有一种用lambda方式来构造数组，可以非常方便的实现数组的定义：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">asc</span> <span class="p">=</span> <span class="n">Array</span><span class="p">(</span><span class="m">5</span><span class="p">)</span> <span class="p">{</span> <span class="n">i</span> <span class="p">-&gt;</span> <span class="p">(</span><span class="n">i</span> <span class="p">*</span> <span class="n">i</span><span class="p">).</span><span class="n">toString</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'><span class="c1">// asc = [&quot;0&quot;, &quot;1&quot;, &quot;4&quot;, &quot;9&quot;, &quot;16&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要注意的是这里的类型T都是对象。但其实，对于基础类型的数组，如果都box成为对象效率并不高，虽然Kotlin中并没有真的基础数据类型，但涉及到数组这种批量的数据时，使用基础类型能提升很大的效率，因此还有专门用于基础类型的数组类型。</p>

<h4>基础类型数组 IntArray和FloatArray</h4>

<p>其实有很多，基础的类型都有IntArray, ByteArray, ShortArray, FloatArray, DoubleArray。而且需要注意的是Array&lt;Int&gt;与IntArray是两个数组类型，它们并不一样，这个区别与Java中的Integer[]和int[]是类似的。而且IntArray与Array&lt;T&gt;也没什么关系，也不是什么继承关系。但是它们表现出来的使用方法是一样的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">heights</span> <span class="p">=</span> <span class="n">intArrayOf</span><span class="p">(</span><span class="m">240</span><span class="p">,</span> <span class="m">360</span><span class="p">,</span> <span class="m">480</span><span class="p">,</span> <span class="m">640</span><span class="p">)</span>
</span><span class='line'><span class="k">val</span> <span class="py">squares</span> <span class="p">=</span> <span class="n">IntArray</span><span class="p">(</span><span class="m">5</span><span class="p">)</span> <span class="p">{</span> <span class="n">i</span> <span class="p">-&gt;</span> <span class="n">i</span> <span class="p">*</span> <span class="n">i</span> <span class="p">}</span> <span class="c1">// [0, 1, 4, 9, 16]</span>
</span><span class='line'><span class="k">val</span> <span class="py">arr</span> <span class="p">=</span> <span class="n">IntArray</span><span class="p">(</span><span class="m">5</span><span class="p">)</span> <span class="p">{</span> <span class="m">42</span> <span class="p">}</span> <span class="c1">// [42, 42, 42, 42, 42]</span>
</span><span class='line'><span class="k">val</span> <span class="py">bundle</span> <span class="p">=</span> <span class="n">arrayOf</span><span class="p">(</span><span class="n">intArrayOf</span><span class="p">(</span><span class="m">1080</span><span class="p">,</span> <span class="m">720</span><span class="p">),</span> <span class="n">intArrayOf</span><span class="p">(</span><span class="m">1920</span><span class="p">,</span> <span class="m">1080</span><span class="p">))</span> <span class="c1">// bundle type is Array&lt;IntArray&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>运算操作符</h2>

<p>运算操作符与大部分语言是一样的。</p>

<h3>算术运算符</h3>

<p>也即是常规的算术操作符，<strong>+(加) -(减）&#42;(乘) /(除) %(取模)</strong>，这些都是二元操作符，也就是需要两个操作数才能使用。</p>

<p>还有单元操作符，如<strong>自增++自减&ndash;</strong>，当然也分前置和后置，区别与Java/C++中一样。</p>

<p>操作符与<strong>赋值符=</strong>可以配合一起使用，如a += b等同于a = a + b，a /= c等同于 a = a / c</p>

<h3>逻辑运算符</h3>

<p>双元操作符: <strong>&amp;&amp; 逻辑与，|| 逻辑或</strong>，它们的操作数必须 是布尔型，且返回值也是布尔。</p>

<p>与其他语言一样，这两个操作符是short-circiut的或者说是lazy的，也即a &amp;&amp; b，如果a是false，那就不去管b了，因为不影响结果；a || b也一样，如果a是true就不去管b了。</p>

<p>还有单元操作符<strong>! 逻辑非</strong>。一个有意思的地方在于，逻辑非可以与一些操作符合起来使用，而不是直接写在表达式之外，比如，下面两种写法等效：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">if</span> <span class="p">(!(</span><span class="n">a</span> <span class="k">in</span> <span class="n">asc</span><span class="p">))</span> <span class="p">{...}</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="p">!</span><span class="k">in</span> <span class="n">asc</span><span class="p">)</span> <span class="p">{...}</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">b</span> <span class="p">!</span><span class="k">is</span> <span class="n">Array</span><span class="p">)</span> <span class="p">{...}</span>
</span><span class='line'><span class="k">if</span> <span class="p">(!(</span><span class="n">b</span> <span class="k">is</span> <span class="n">Array</span><span class="p">))</span> <span class="p">{...}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>位运算符</h3>

<p>位运算符比较特殊，与大部分语言不一样。</p>

<h4>移位</h4>

<table>
<thead>
<tr>
<th style="text-align:center;"> 操作符 </th>
<th style="text-align:left;"> 含义 </th>
<th style="text-align:left;"> 示例 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> shr </td>
<td style="text-align:left;"> 向右移位 </td>
<td style="text-align:left;"> a shr 1 </td>
<td style="text-align:left;"> 把a向右移1位 </td>
</tr>
<tr>
<td style="text-align:center;"> shl </td>
<td style="text-align:left;"> 向左移位 </td>
<td style="text-align:left;"> a shl 1 </td>
<td style="text-align:left;"> a向左移1位 </td>
</tr>
<tr>
<td style="text-align:center;"> ushr </td>
<td style="text-align:left;"> 无符号向右移位 </td>
<td style="text-align:left;"> a ushr 1 </td>
<td style="text-align:left;"> （包含符号位）向右移1位 </td>
</tr>
</tbody>
</table>


<h4>按位逻辑运算</h4>

<table>
<thead>
<tr>
<th style="text-align:center;"> 操作符 </th>
<th style="text-align:left;"> 含义 </th>
<th style="text-align:left;"> 示例 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> and </td>
<td style="text-align:left;"> 按位与</td>
<td style="text-align:left;"> a and 1 </td>
<td style="text-align:left;"> a与1按位与 </td>
</tr>
<tr>
<td style="text-align:center;"> or </td>
<td style="text-align:left;"> 按位或 </td>
<td style="text-align:left;"> a or 1 </td>
<td style="text-align:left;"> a与1按位或 </td>
</tr>
<tr>
<td style="text-align:center;"> xor </td>
<td style="text-align:left;"> 按位异或 </td>
<td style="text-align:left;"> a xor 1 </td>
<td style="text-align:left;"> a与1按位异或 </td>
</tr>
<tr>
<td style="text-align:center;"> inv </td>
<td style="text-align:left;"> 按位取反 </td>
<td style="text-align:left;"> inv(a) </td>
<td style="text-align:left;"> 把a按位取反 </td>
</tr>
</tbody>
</table>


<p>这些操作符看起来可能比较怪，然后更怪异的是位运算操作符<strong>不能</strong>与<strong>赋值符=</strong>一起使用，只能这样写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">a</span> <span class="p">=</span> <span class="n">a</span> <span class="n">or</span> <span class="n">b</span>
</span><span class='line'><span class="n">c</span> <span class="p">=</span> <span class="n">c</span> <span class="n">xor</span> <span class="p">(</span><span class="m">1</span> <span class="n">shl</span> <span class="m">3</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>事实上位运算不是操作符，它们是一种函数，叫做<a href="https://kotlinlang.org/docs/functions.html#infix-notation">infix函数</a>，简写了把括号省略了，看起来就像操作符一样，但它们并不是操作符。</p>

<h3><a href="https://kotlinlang.org/docs/operator-overloading.html">运算符重载</a></h3>

<p>与C++中的运算符重载类似，Kotlin中支持运算符重载，本质上它们都是对象定义的方法，但支持重载为运算符。</p>

<p>比如说加法，a + b，可以写成方法调用的形式a.plus(b)；b or c等同于b.or&copy;，!a等同于a.not()。</p>

<h3>运算符的优先级</h3>

<p>尽管是有默认的优先级的，但<strong>强烈建议使用括号</strong>以减少歧义和增强可读性，更可以避免一些难以察觉的Bug。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://kotlinlang.org/docs/basic-types.html">Basic types﻿</a></li>
<li><a href="https://www.baeldung.com/kotlin/bitwise-operators">Using Bitwise Operators in Kotlin</a></li>
<li><a href="https://www.programiz.com/kotlin-programming/bitwise">Kotlin Bitwise and Bitshift Operations</a></li>
<li><a href="https://www.programiz.com/kotlin-programming/operators">Kotlin Operators</a></li>
<li><a href="https://www.tutorialspoint.com/kotlin/kotlin_operators.htm">Kotlin - Operators</a></li>
<li><a href="https://www.geeksforgeeks.org/kotlin-operators/">Kotlin Operators</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to WebSocket]]></title>
    <link href="http://toughcoder.net/blog/2023/01/14/introduction-to-websocket/"/>
    <updated>2023-01-14T18:02:12+08:00</updated>
    <id>http://toughcoder.net/blog/2023/01/14/introduction-to-websocket</id>
    <content type="html"><![CDATA[<p><a href="https://javascript.info/websocket">WebSocket</a>是HTML5带来的新时代网络通信协议，它让前端的能力再一次得到提升，因为通信不再是单向的了。最初<a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API">在浏览器和JavaScript</a>中有很好的支持，现在各种编程语言和平台都支持WebSocket协议了。今天就来学习一下它。</p>

<p><a href="http://toughcoder.net/blog/2023/01/14/introduction-to-websocket/"><img src="https://cdn.educba.com/academy/wp-content/uploads/2019/05/What-is-WebSocket.jpg" title="auto auto" ></a></p>

<!-- more -->


<h2>缘起</h2>

<p>在以往的前端中通过Ajax或者Jsonp可以让前端像一般的桌面客户端一样，有了更好的交互方式，但总的来说仍然局限于单向通信，因为底层的协议仍是HTTP，只能由客户端发起请求，服务器来响应。对于更新潮的需求，比如服务器向客户端推送消息，用HTTP来实现就略显笨拙了，常规的方法就是<a href="https://en.wikipedia.org/wiki/Comet_(programming">建立长链接</a>)或者让客户端来轮询（polling），但这显然效率不高。于是就有了<a href="https://en.wikipedia.org/wiki/WebSocket">WebSocket</a>，它支持双向通信（全双工通信信道），除了客户端主动发起请求外，服务器也可以主动向客户端推送消息。通信效率和交互性又一次得到了大大的提升。</p>

<p>就协议本身来说，它与HTTP一样，都是基于TCP实现的，对于协议本身想要深入了解的，可以去看<a href="https://www.rfc-editor.org/rfc/rfc6455">协议规范</a>。</p>

<p><img src="https://tse1-mm.cn.bing.net/th/id/OIP-C.b0ueeCtwidYP_RDzAWPVOgHaF_?pid=ImgDet&amp;rs=1" alt="" /></p>

<p>另外，需要注意，WebSocket协议的地址的schema是<strong>wss://xxxx</strong>。</p>

<h2>WebSocket in Android</h2>

<p>安卓平台也已经有了现成的WebSocket协议可以使用了，已经比较成熟了，直接使用就行了。</p>

<ul>
<li><a href="https://github.com/TooTallNate/Java-WebSocket">Java-WebSocket</a> 是一个WebSocket协议的纯Java实现，适用于所有JVM平台</li>
<li><a href="https://socket.io/">Socket.IO</a> 这个不单单是WebSocket，它在WebSocket协议基础之上又进行了进一步的封装，在API的易用性面以及错误处理和状态处理上面有了不少的提升。各种语言平台基本都有支持了。</li>
</ul>


<h2>测试服务器</h2>

<p>光有客户端还不够，还需要有测试服务器，整理一下如何搭建测试服务器。</p>

<h3>公有的测试服务器</h3>

<p>在线的免费的可公开使用的简单WebSocket服务器，一般都是echo式的，也即把请求的数据直接当成回复推给client，这个可以当作chat类的测试server。</p>

<ul>
<li><a href="wss://echo.websocket.org">wss://echo.websocket.org</a></li>
<li><a href="https://socketsbay.com/test-websockets">wss://socketsbay.com/wss/v2/1/demo/</a></li>
<li><a href="https://glitch.com/~websocket-echo">WebSocket on Glitch</a></li>
</ul>


<p><img src="https://quarkus.pro/guides/images/websocket-guide-architecture.png" alt="" /></p>

<h3>自已搭建服务器</h3>

<p>此外，就是用WebSocket服务端的组件来自己搭建服务器，当然也都有现成的组件，配置一下就可以了，只不过需要运行在自己的Server上面。</p>

<ul>
<li><a href="https://socket.io/">Socket.IO</a> 对的，这货Server端Client端全套都提供了</li>
<li><a href="https://github.com/uNetworking/uWebSockets">uWebSockets</a> 核心库是用C/C++实现的，可以与Node.js无缝衔接</li>
<li><a href="https://github.com/theturtle32/WebSocket-Node">WebSocket-Node</a> 基于Node.js，用纯JavaScript实现的</li>
<li><a href="http://websocketd.com/">websocketd</a> 一个独立的WebSocket Daemon，不依赖于其他的组件，功能强大，配置简单，方便使用，只需要提供一个Shell脚本就可以了</li>
<li><a href="https://github.com/jmalloc/echo-server">echo-server</a> 基于Go实现的，支持HTTP协议和WebSocket协议的echo server</li>
<li><a href="https://pypi.org/project/echo-server/">python echo server</a> 基于Python的echo server，不确定是否支持WebSocket</li>
<li><a href="https://echo.labstack.com/">Echo</a> 基于Go的Echo Web Frameworks</li>
<li><a href="https://github.com/websockets/websocket-echo-server">WebSocket echo server</a> 基于Node.js</li>
</ul>


<h2>参考资料</h2>

<ul>
<li><a href="http://www.ruanyifeng.com/blog/2017/05/websocket.html">WebSocket 教程</a></li>
<li><a href="https://github.com/nkzawa/socket.io-android-chat">socket.io-android-chat</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/23467317">WebSocket 与 Socket.IO</a></li>
<li><a href="https://juejin.cn/post/6844903577438126094">Android WebSocket 编程</a></li>
<li><a href="https://www.jianshu.com/p/7b919910c892">Android WebSocket实现即时通讯功能</a></li>
<li><a href="https://www.jianshu.com/p/4e80b931cdea">Socket.io</a></li>
<li><a href="https://www.lob.com/blog/websocket-org-is-down-here-is-an-alternative">Websocket.org Is Down, Here Is an Alternative</a></li>
<li><a href="https://blog.postman.com/introducing-postman-websocket-echo-service/">Introducing Postman’s WebSocket Echo Service</a></li>
<li><a href="https://www.piesocket.com/blog/echo-websocket-org-alternative">An Alternative To Echo.WebSocket.Org – Live WebSocket Server
</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding RxJava]]></title>
    <link href="http://toughcoder.net/blog/2023/01/12/understanding-rxjava/"/>
    <updated>2023-01-12T17:26:41+08:00</updated>
    <id>http://toughcoder.net/blog/2023/01/12/understanding-rxjava</id>
    <content type="html"><![CDATA[<p>RxJava不仅仅是一个函数库，它是响应式编程范式的一个JVM实现，所以准确的来说RxJava是一种编程范式。而且它的学习曲线非常之陡峭，必须充分理解它背后的编程思想，才能真正算使用它。</p>

<p><a href="http://toughcoder.net/blog/2023/01/12/understanding-rxjava/"><img src="https://i0.wp.com/ayusch.com/wp-content/uploads/2018/12/featured.png?w=1686" title="auto auto" ></a></p>

<!-- more -->


<h2>理解<a href="https://reactivex.io/">ReactiveExtensions</a></h2>

<p>Rx的核心思想是两个方面，一是数据流，把一切看成数据流，只需要关心数据来了如何响应；二是异步，也就是说不会立马得到结果。需要做的就是搭建好处理数据流的管道和定义数据最终的响应方式，其他的交给Rx内部去处理。</p>

<h3><a href="https://en.wikipedia.org/wiki/Functional_programming">Functional Programming</a></h3>

<p>函数式编程是以函数为核心来构建程序，通过不同的函数的不同形式的组合来作为主要解决方案。
这是从另外的角度来看待问题。程序如果只写出来，做了静态意义上的区分 是没有意义的，程序必须 运行起来 才有价值。函数式编程更加注重程序的运行，程序运行的基本单元是什么？函数，任何程序都是从一个叫主函数开始，一层一层的调用，所以函数式编程思考问题时的基本单元是函数，至于数据则以参数形式在函数之间传递。以函数为核心带来的好处是，让异步变得容易 。</p>

<h3><a href="https://en.wikipedia.org/wiki/Reactive_programming">Reactive Programming</a></h3>

<p>大部分编程思想是以控制流为核心(flow of control)，而响应式核心是数据流(data flow)为核心，再加上异步。并不关心程序的控制，只关心数据如何流动，以及当数据来了时如何响应，以及对数据如何处理。</p>

<h3><a href="https://en.wikipedia.org/wiki/Functional_reactive_programming">Functional Reactive Programming</a></h3>

<p>综合函数式和响应式，主要还是数据流，只不过以函数式的方式来处理数据流，并且都是异步形式。</p>

<h3>什么是异步</h3>

<p>这个也要理解 一下。异步与同步是一个程序执行顺序上的概念，而非具体的编程技术。同步，也就是说一坨一坨的代码是自上而下的执行，或者说函数是按照书写时的调用顺序，顺序 的执行。最明显的就是调用一个函数，你会等待函数执行完毕，然后拿到返回结果。
当然 ，这次并不是绝对的自上而下，编译器在保证取值正确的前提下，会进行指令重排的，但是当涉及取值时，会保证自上而下时的顺序。</p>

<p>而异步，则是说代码的执行，特别是函数 的执行，并不是按照你书写时的顺序 执行的。比如消息发布，虽然a先发布消息，b后发布了消息，但是仍然 可能b的消息先被收到。这就是异步。或者说两个函数分别被两个线程执行，就能并行。这也是异步。
最明显的就是函数调用，如果函数执行是异步的，你会立即 返回，拿不到执行结果，而函数的执行结果会在另外的不确定的时间通知给你。
多线程或者多进程，或者叫做并发
这是实现异步的一个方式。但是多线程并不一定就能实现异步，比如有太多的共享资源时，就需要做同步锁等待，其实这是在同步，你的效率并未得到提高。要想充分并发，必须 先做到异步，然后才能最大限度 的利用并发来提高性能。</p>

<h2>Thinking in RxJava</h2>

<h3>Architect with <a href="https://learn.microsoft.com/en-us/dotnet/architecture/maui/mvvm">MVVM</a></h3>

<p>软件架构方式从<a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">MVC</a>到MVP，再到MVVM，其实是并无本质上的区别，都是为了能把数据，业务逻辑和UI区分开来，进行解耦。而MVVM强调UI要响应数据进行自动更新，与Reactive的核心思想是一致的，因此Reactive界更习惯使用MVVM来作为架构方式。
因为RxJava是Reactive的模式，也就是说它的核心思想是Reactive，是push based数据流方式。
因此，比较适合MVVM方式，因为ViewModel的存在就是为了接收数据，然后它负责主动去刷新View。
具体架构原则与方式还需要进一步总结。</p>

<h3>设计原则</h3>

<h4>不可变性<a href="https://en.wikipedia.org/wiki/Immutable_object">Immutable object</a></h4>

<p>数据要是纯数据类型，且是Immutable的，简单言之，数据对象所有的域都应该是final的，对象提供的方法只有getters，以及构造方法。一定不能让对象有改变自身状态的方法，这是为了保持immutability，管道计算过程中，当有状态发生变化时，需要创建一个新的对象，基于原对象，做些状态变化，然后生成一个新的对象。</p>

<p>存储时，只需要存储原始数据即可，中间使用的数据和状态，也即是可以通过从原始数据 计算得到的数据和状态，不需要存储，这实际上就是搭建的管道的目的啊。</p>

<h4>函数要无副作用和幂等</h4>

<p>函数与方法，要是纯函数，也就是说接受一些参数输入，然后产生一些输出，不能有副作用，不能对函数定义范围外的状态和变量产生依赖。而且要幂等，也就说给定同一个参数，多次调用，得到的结果都是一样的。</p>

<p>一个Observable实例只能被subscribe一次，一旦被subscribe，就代表着管道到达了终点，数据到此结束不会继续流动了。当subscribe了后，即使你再把这个Observable接到另外的Observable上面去，它也不会再向后面的管道(Observable)发射数据。这个需要特别注意，subscribe一定是要在最后做的事情。
如果需要subscribe两次，说明你需要不同的数据，要不然不合逻辑，如果是同数据类型，你只需要在一个subscibe做多件事情就可以了（比如刷新两个View），即使是需要不同的数据，那么就需要搭建管道进行计算，而一旦通过了operator，就会产生一个新的Observable实例（这也是为啥能连用很多点的原因，它每个operator都返回一个新的实例），因为是新的实例，所以也就可以再次subscribe。这实际上是相当于给原管道接出分支，源头数据会通过分支进行流动。</p>

<p>Immutable数据加上纯函数，一起就可以保证线程安全，你在operator过程中切换线程是很安全的。但如果你在函数中有依赖其他全局变量，那么结果将会是灾难性的。</p>

<p>依赖的原则是，ViewModel只知道Model，Model只知道Store，注意反过来不行（Store不知道Model，Model也不知道ViewModel）。它们的输出都是Observable，因此从上到下是直接依赖，通过提供的方法或者operator，而反向的反馈则是通过Observable本身。具体的，ViewModel调用Model的方法，或者直接通过operator来使用Model，反向的反馈则是通过Model给出的Observable，Model不能直接返回基本的数据对象；同理Model与Store之间也是如此。</p>

<p>ViewModel以及，Model和Store都要纯粹一些，不能有平台的依赖，目的就是为了方便测试。平台的依赖，要从外部传入。Activity或者Service，这些重要的组件，干的就是Container和组织者的身份，它创建ViewModel，Model以及Store所需要的输入，然后创建这些对象，并把它们拼装在一起，管理它们的生命周期。至于平台依赖，这些东西与Reactive也并不冲突啊，把它们封装好了后，接入Store即可了。</p>

<p>一些简单的逻辑可能直接在Container中写了也是可以的，没必要非要传入ViewModel。</p>

<h2>推荐书籍</h2>

<h3><a href="https://www.manning.com/books/rxjava-for-android-developers">《RxJava for Android Developers》</a></h3>

<p>这本书的侧重点在于Reactive，而非RxJava，它有大量的项目实例，来展示如何用Reactive的思想构建和架构一个项目。它关于RxJava本身介绍的不多，远不及文档详细，但它的重点在于项目，如何用纯Reactive的方式来架构一个项目，并且项目都是真实可运行的。书中的示例，以章节为单位，每一章都是一个完整的项目，所以它也不光涉及RxJava，也会包含一些其他的，如网络库等等。</p>

<p>对于如何把握RxJava的核心精髓，以及如何以Reactive的方式来构建一个项目，这本书是相当不错的参考。</p>

<p>这本书读起来也是相当的费劲，有二方面原因，一是它毕竟都是活生生的项目，而项目必然会涉及除RxJava以外的东西，如项目本身的业务逻辑，以及像网络库等等，这些东西与书的主题并不直接相关，都没有详细的讲解，这就非常影响对章节的整体的理解程度；另外一个原因，就是书中的前后流畅度不好，每一章节都是一步步的向你展示 如何用Reactive方式从零构建 一个项目，也就是说项目代码有迭代，但是它总是前后对应不上，比如说文字部分说某某个方法或者函数，与书中给出的代码片断对应不上，而书中的代码片断全连在一起，也不是完整的，且与代码示例包中的代码也对应不上，代码是有迭代的，代码示例包中肯定是最终的代码，但是书中的文字以及书中的代码片断都是迭代过程中的。这就导致读起来相当的费劲，前后对应不上，有时候不得不直接把源码翻出来看，但它与书中的描述也对应不上。</p>

<p>从这里，也可以看出编程书籍的无奈，特别是以完整项目为示例的书籍，因为项目必然会有迭代的过程，小步迭代，每一步都能run是比较好的迭代方式，而且项目当中必然会有大量的编程工具生成的一些冗余代码。那么，摆在作者面前就是一个难题，如何把代码与文字更好的结合在一起。很多差劲的作者会把项目完整代码全贴在书中，这是相当差劲的作法，虽然说足够完整，但是代码会占用大量的篇幅，项目中的有大量的代码也是编程工具生成的冗余 代码，更会占用大量的篇幅，这纯是凑字数的做法。另外的做法，就是像这本书的作者这样，书中仅贴出一些关键的代码片断，完整的代码要去找书的示例源码包。前提是读者要能非常容易的获得到源码包。</p>

<p>但是，为了更好的理解，因为读者读书的时候，可能不能方便的查看示例源码包，所以 书中的章节要与关键代码片断要做好流畅性，前后要能对应得起来。然后示例源码包中，最好分成几批，以展示项目的迭代过程。</p>

<p>这本书，终于读完了，还是比较费劲的，花了远超当时预估 的时间，但仍不够，对于Reactive的思想把握仍不够。书中的示例确实很好，值得继续重构和优化，以作为实践。</p>

<h3><a href="https://www.amazon.com/Functional-Reactive-Programming-Stephen-Blackheath/dp/1633430103">《Functional Reactive Programming》</a></h3>

<p>这是第一本详细论述FRP编程范式的书，值得详细研读，而且非常棒的是这本书有在线版本的，可以<a href="https://livebook.manning.com/book/functional-reactive-programming/table-of-contents/">直接在线阅读</a>。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://www.geeksforgeeks.org/rxjava-for-android/">RxJava For Android</a></li>
<li><a href="https://www.codingdojo.com/blog/what-is-functional-programming">What Is Functional Programming and Why Use It?</a></li>
<li><a href="https://www.geeksforgeeks.org/functional-programming-paradigm/">Functional Programming Paradigm</a></li>
<li><a href="https://www.techtarget.com/searchapparchitecture/definition/reactive-programming">reactive programming</a></li>
<li><a href="https://developers.redhat.com/blog/2017/06/30/5-things-to-know-about-reactive-programming">5 Things to Know About Reactive Programming</a></li>
<li><a href="https://www.freecodecamp.org/news/functional-reactive-programming-frp-imperative-vs-declarative-vs-reactive-style-84878272c77f/">A quick introduction to Functional Reactive Programming (FRP)</a></li>
<li><a href="https://blog.danlew.net/2017/07/27/an-introduction-to-functional-reactive-programming/">An Introduction to Functional Reactive Programming</a></li>
<li><a href="https://learn.microsoft.com/en-us/xamarin/xamarin-forms/enterprise-application-patterns/mvvm">The Model-View-ViewModel Pattern</a></li>
<li><a href="https://www.geeksforgeeks.org/introduction-to-model-view-view-model-mvvm/">Introduction to Model View View Model (MVVM)</a></li>
<li><a href="https://tech.meituan.com/2016/11/11/android-mvvm.html">如何构建Android MVVM 应用框架</a></li>
<li><a href="https://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html">MVC，MVP 和 MVVM 的图示</a></li>
<li><a href="https://www.infoq.cn/article/rethinking-mvc-mvvm">被误解的 MVC 和被神化的 MVVM</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Glossary/MVC">MVC</a></li>
<li><a href="https://www.geeksforgeeks.org/mvc-framework-introduction/">MVC Framework Introduction</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding the Observer Pattern]]></title>
    <link href="http://toughcoder.net/blog/2023/01/11/understanding-observer-pattern/"/>
    <updated>2023-01-11T22:21:24+08:00</updated>
    <id>http://toughcoder.net/blog/2023/01/11/understanding-observer-pattern</id>
    <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Observer_pattern">观察者模式</a>是用于解耦的，把不同功能的类，而又对某一共同事件或者消息感兴趣解耦开来，使双方互不知道对方。常规的实现是通过接口的方式来把需要关注的消息封装起来，双方各自实现接口即可。</p>

<p><a href="http://toughcoder.net/blog/2023/01/11/understanding-observer-pattern/"><img src="https://i1.wp.com/www.jeremyshanks.com/wp-content/uploads/2018/04/The-Observer-Pattern.jpg?fit=750%2C750" title="auto auto" ></a></p>

<!-- more -->


<h2>理解观察者模式</h2>

<h3>什么是观察者模式</h3>

<p>观察者模式<a href="https://en.wikipedia.org/wiki/Observer_pattern">Observer pattern</a>用于解耦消息发布或者状态发布的，对象之间有消息依赖的一种设计模式。消息发布者，或者说被关注者称之为主体(Subject)，它会不定时的更新消息和状态，希望接收到消息和状态变化的称为观察者(Observer)。用接口来隔离主题对象（被关注者）和观察者，观察者被动接收来自主题的变化，然后更新自己的状态。</p>

<p><img src="https://www.researchgate.net/profile/Michael-Perscheid/publication/224198176/figure/fig2/AS:667774309388288@1536221210042/Observer-pattern-running-example.png" alt="" /></p>

<p>通常也被称作为发布-订阅者模式因为它与生活中的报纸杂志订阅非常的类似，用户（Subscriber）向发行商(Publisher)订阅，当有新的期刊来了时，发行商会邮寄给用户。发行商称之为Subject或者Publisher，用户称之为Observer或者Subscriber，添加订阅称作Subscription，邮寄新期刊称之为notify。</p>

<p>Subject持有一个Observer的列表，提供三个接口：添加订阅(attach或者addObserver)，取消订阅detach或者removeObserver)和通知更新(notify)，Observer则有一个更新(update)。</p>

<p>订阅 关系建立后，当有新的数据或者状态需要更新时，Subject就会调用notify接口来实现状态的发布。</p>

<h3>观察者模式的示例</h3>

<p>对于大部分编程语言来说都提供了观察者模式的接口，比如Java中就可以直接用java.util.Observable和java.util.Observer来实现。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.Observable</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Observer</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Random</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestDriver</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">MusicTeacher</span> <span class="n">teacher</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">MusicTeacher</span><span class="o">();</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">Student</span> <span class="n">tommy</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Student</span><span class="o">(</span><span class="s">&quot;Tommy&quot;</span><span class="o">,</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">tommy</span><span class="o">));</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">Student</span> <span class="n">jimmy</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Student</span><span class="o">(</span><span class="s">&quot;Jimmy&quot;</span><span class="o">,</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">jimmy</span><span class="o">));</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">Student</span> <span class="n">george</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Student</span><span class="o">(</span><span class="s">&quot;George&quot;</span><span class="o">,</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">george</span><span class="o">));</span>
</span><span class='line'>        <span class="n">teacher</span><span class="o">.</span><span class="na">addObserver</span><span class="o">(</span><span class="n">tommy</span><span class="o">);</span>
</span><span class='line'>        <span class="n">teacher</span><span class="o">.</span><span class="na">addObserver</span><span class="o">(</span><span class="n">jimmy</span><span class="o">);</span>
</span><span class='line'>        <span class="n">teacher</span><span class="o">.</span><span class="na">addObserver</span><span class="o">(</span><span class="n">george</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">teacher</span><span class="o">.</span><span class="na">singWithMe</span><span class="o">();</span>
</span><span class='line'>        <span class="n">teacher</span><span class="o">.</span><span class="na">singWithMe</span><span class="o">();</span>
</span><span class='line'>        <span class="n">teacher</span><span class="o">.</span><span class="na">singWithMe</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">MusicTeacher</span> <span class="kd">extends</span> <span class="n">Observable</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span><span class="o">[]</span> <span class="n">songs</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>            <span class="s">&quot;\tTwinkle twinkle little star,\n\tHow I wonder what you are.&quot;</span><span class="o">,</span>
</span><span class='line'>            <span class="s">&quot;\tJohnny Johnny?\n\tYes papa.\n\tEating sugar?\n\tNo papa.&quot;</span><span class="o">,</span>
</span><span class='line'>            <span class="s">&quot;\tHumpty dumpty sat on wall,\n\tHumpty dumpty had a great fall.&quot;</span><span class="o">,</span>
</span><span class='line'>            <span class="s">&quot;\tOne two three four five,\n\tOnce I caught a fish alive.&quot;</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Random</span> <span class="n">random</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">MusicTeacher</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">random</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Random</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">singWithMe</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">setChanged</span><span class="o">();</span>
</span><span class='line'>        <span class="n">notifyObservers</span><span class="o">(</span><span class="n">songs</span><span class="o">[</span><span class="n">random</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="n">songs</span><span class="o">.</span><span class="na">length</span><span class="o">)]);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">Student</span> <span class="kd">implements</span> <span class="n">Observer</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Student</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="n">Observable</span> <span class="n">observable</span><span class="o">,</span> <span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span> <span class="o">+</span> <span class="s">&quot;:\n&quot;</span> <span class="o">+</span> <span class="n">o</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>常规的实现是这样的，在代码层面有直接的依赖，也就是说Observable与Observer相互知道对方的存在，且代码上面有直接的编译依赖关系。并且一般也都是同步的，状态变化 后Subject会直接发出通知，以更新Observer。</p>

<h3>什么时候用观察者模式</h3>

<p>观察者模式的特点是『一对多』，主体只有一个，向多个观察者发布状态更新，这是它最主要的特点。另外就是，它最主要的作用是解耦 这种『一对多』状态更新关系。所以，当需要解决这种『一对多』状态更新的问题时就可以使用观察者模式。</p>

<p>厘清问题，找到主体Subject，再找到Observer，然后分别实现对应的接口即可。</p>

<h2>发布-订阅模式</h2>

<p>随着软件越来越复杂，比如组件的出现，多中间件的出现，远程（服务器客户端），并发和多线程多进程的出现，使得观察者模式也有了新的样式，比如Subject和Observer可以不会有直接依赖关系，或者都依赖于一个中间组件，比如一些Event-Bus系统，以及消息的更新与通知都是异步的。
这时就是出现了发布-订阅者模式（<a href="https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern">Publish-Subscrib pattern</a>）。
向外发布消息的叫Publisher，它与Observable类似，但最重要的区别在于，Publisher并不知道Subscriber的存在，它是直接像一个第三方的消息队列，或者叫做消息平台，发布消息。而Subscriber，也不知道Publisher的存在，是直接向消息队列或者消息平台订阅。</p>

<p>它的特点是：</p>

<ul>
<li>组件间，甚至是不同的应用之间，不同的端之间的消息发布模型。</li>
<li>都是异步的，就说是发布者是往消息队列发消息，然后就算发布完成了。订阅者是从消息队列拿消息。Publisher与Subscriber之间并无同步关系。一个消息发布出去，接收时间不确定。</li>
<li>对应该关系自由，可以多对多，也可以多对一或者一对多。</li>
<li>支持并发。</li>
</ul>


<p>安卓里面非常著名的EventBus就是这一模式的经典实现。以及Linux世界里的dbus也是这种。</p>

<p>关于观察者模式与发布者模式区别可以看<a href="https://hackernoon.com/observer-vs-pub-sub-pattern-50d3b27f838c">这篇文章</a>。</p>

<h2>生产者消费者问题</h2>

<p>再有一个比较类似的就是生产者和消费者问题(<a href="https://en.wikipedia.org/wiki/Producer%E2%80%93consumer_problem">Producer consumer problem</a>）主要是涉及多线程和同步问题。</p>

<h2>参考资料</h2>

<ul>
<li><a href="http://www.ni.com/tutorial/3023/zhs/">LabVIEW​之​生产​者/​消费​者​架构</a></li>
<li><a href="https://docs.microsoft.com/en-us/dotnet/standard/parallel-programming/how-to-implement-a-producer-consumer-dataflow-pattern">How to: Implement a producer-consumer dataflow pattern</a></li>
<li><a href="https://dzone.com/articles/producer-consumer-pattern">The Producer Consumer Pattern</a></li>
<li><a href="https://learn.microsoft.com/en-us/dotnet/standard/events/observer-design-pattern">Observer Design Pattern</a></li>
<li><a href="https://www.tutorialspoint.com/design_pattern/observer_pattern.htm">Design Patterns - Observer Pattern</a></li>
<li><a href="https://www.geeksforgeeks.org/observer-pattern-set-1-introduction/?ref=lbp">Observer Pattern | Set 1 (Introduction)</a></li>
<li><a href="https://refactoring.guru/design-patterns/observer">Observer</a></li>
<li><a href="https://blog.csdn.net/itachi85/article/details/50773358">设计模式（五）观察者模式</a></li>
<li><a href="https://www.oreilly.com/library/view/learning-javascript-design/9781449334840/ch09s05.html">The Observer Pattern</a></li>
<li><a href="https://docs.microsoft.com/en-us/azure/architecture/patterns/publisher-subscriber">Publisher-Subscriber pattern</a></li>
<li><a href="https://www.enjoyalgorithms.com/blog/publisher-subscriber-pattern">Publisher-Subscriber</a></li>
<li><a href="https://www.educative.io/answers/what-is-the-producer-consumer-problem">What is the Producer-Consumer problem?</a></li>
<li><a href="https://www.javatpoint.com/producer-consumer-problem-in-os">Producer-Consumer problem</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Upgrade to RxJava 3]]></title>
    <link href="http://toughcoder.net/blog/2023/01/10/upgrade-to-rxjava-3/"/>
    <updated>2023-01-10T21:36:44+08:00</updated>
    <id>http://toughcoder.net/blog/2023/01/10/upgrade-to-rxjava-3</id>
    <content type="html"><![CDATA[<p>RxJava从2015年问世，2016到2017开始流行，在2018到2019左右达到顶峰，几乎无人不会RxJava，无项目不用RxJava。这期间项目本身也在迭代，从1.0版本，到2.0版本，行业内流行最广的，用的人最多的，项目使用也最多的仍是2.0版本。时过境迁，现在虽然RxJava是一个项目的标配，但是现在它的受关注度，没有前几年高了，但仍有必要研究一下它的最新版本RxJava 3。</p>

<p><a href="http://toughcoder.net/blog/2023/01/10/upgrade-to-rxjava-3/"><img src="https://i0.wp.com/blog.mallow-tech.com/wp-content/uploads/2017/03/Multithreading-with-rxjava.png?fit=820%2C400&ssl=1" title="auto auto" ></a></p>

<!-- more -->


<h2><a href="https://github.com/ReactiveX/RxJava">RxJava</a>的前世今生</h2>

<p>RxJava从诞生致今一共有三个大版本，区别都比较明显。最初是RxJava 1.0版本，它的特点是异步和数据流，核心思想仍是这些，但其它与<a href="https://reactivex.io/">Reactive Extensions</a>基本上是同步在迭代的，因此RxJava 1并不是完全符合Reactive Extensions规范的，并且它是基于Java 6.0语言的，对一些新的Java特性的支持并不好。</p>

<p>后来Rx编程范式渐渐流行起来，以及Java语言本身的发现，所以就有了RxJava 2.0，它是Reactive Extensions的一个标准实现，也就是说从RxJava 2.0开始，是完全符合Rx规范的。RxJava 2.0版本并不是基于1.0版本的迭代，而是完全重写的，基于Rx规范从新实现的。对一些东西如函数的定义，以及像方法的名字都进行了规范化。这也是流行最广泛的一个版本，坊间绝大多数资料都是基于RxJava 2的，很多其他三方的开源库，如RxAndroid等也都基于此。</p>

<p>RxJava 2.0版本有单独的groudId是<strong>io.reactivex.rxjava2</strong>，可以用以区分。</p>

<h2>RxJava 3.0</h2>

<p>技术仍在不断的演进，RxJava最新的版本是3.0，它是基于2.0的迭代，并没有像1.0到2.0那样完全重写。主要的变化 是更加符合Rx规范，性能进一步的提高。1.0和2.0都已停止维护了。它也有单独的groudId是<strong>io.reactivex.rxjava3</strong>，可以与2.0进行区分。</p>

<h3>包结构变化</h3>

<p>代码层面的包名是有明显变化的，对代码进行了更好的组织。1.0和2.0都是在io.reactivex，到了3.0组件都有了单独的package。</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> Component </th>
<th style="text-align:left;"> RxJava 2 </th>
<th style="text-align:left;"> RxJava 3 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> Core </td>
<td style="text-align:left;"> io.reactivex </td>
<td style="text-align:left;"> io.reactivex.rxjava3.core </td>
</tr>
<tr>
<td style="text-align:center;"> Annotations </td>
<td style="text-align:left;"> io.reactivex.annotations </td>
<td style="text-align:left;"> io.reactivex.rxjava3.annotations </td>
</tr>
<tr>
<td style="text-align:center;"> Disposables </td>
<td style="text-align:left;"> io.reactivex.disposables </td>
<td style="text-align:left;"> io.reactivex.rxjava3.disposables </td>
</tr>
<tr>
<td style="text-align:center;"> Exceptions </td>
<td style="text-align:left;"> io.reactivex.exceptions </td>
<td style="text-align:left;"> io.reactivex.rxjava3.exceptions </td>
</tr>
<tr>
<td style="text-align:center;"> Functions </td>
<td style="text-align:left;"> io.reactivex.functions </td>
<td style="text-align:left;"> io.reactivex.rxjava3.functions </td>
</tr>
<tr>
<td style="text-align:center;"> Flowables </td>
<td style="text-align:left;"> io.reactivex.flowables </td>
<td style="text-align:left;"> io.reactivex.rxjava3.flowables </td>
</tr>
<tr>
<td style="text-align:center;"> Observables </td>
<td style="text-align:left;"> io.reactivex.observables </td>
<td style="text-align:left;"> io.reactivex.rxjava3.observables </td>
</tr>
<tr>
<td style="text-align:center;"> Subjects </td>
<td style="text-align:left;"> io.reactivex.subjects </td>
<td style="text-align:left;"> io.reactivex.rxjava3.subjects </td>
</tr>
<tr>
<td style="text-align:center;"> Processors </td>
<td style="text-align:left;"> io.reactivex.processors </td>
<td style="text-align:left;"> io.reactivex.rxjava3.processors </td>
</tr>
<tr>
<td style="text-align:center;"> Observers </td>
<td style="text-align:left;"> io.reactivex.observers </td>
<td style="text-align:left;"> io.reactivex.rxjava3.observers </td>
</tr>
<tr>
<td style="text-align:center;"> Subscribers </td>
<td style="text-align:left;"> io.reactivex.subscribers </td>
<td style="text-align:left;"> io.reactivex.rxjava3.subscribers </td>
</tr>
<tr>
<td style="text-align:center;"> Parallel </td>
<td style="text-align:left;"> io.reactivex.parallel </td>
<td style="text-align:left;"> io.reactivex.rxjava3.parallel </td>
</tr>
<tr>
<td style="text-align:center;"> Internal </td>
<td style="text-align:left;"> io.reactivex.internal </td>
<td style="text-align:left;"> io.reactivex.rxjava3.internal </td>
</tr>
</tbody>
</table>


<p>使用起来更加的清晰和规范，并且不与老版本有冲突。</p>

<h3>与Java 8更好的融合</h3>

<p>另外一个重大改进就是与新版本的Java，即Java 8有了更好的融合，支持了好多Java 8中的数据类型。比如Optional和Stream：</p>

<ul>
<li>Observable.fromOptional()</li>
<li>Observable.fromStream</li>
<li>Observable.mapOptional</li>
<li>Observable.blockingStream</li>
<li>Observable.flatMapStream</li>
</ul>


<h3>行为变化</h3>

<p>因为RxJava 2.0是符合Rx规范的，所以大部分功能和核心概念在3.0上面是没有变化的。只有在一些高级的概念上面有一些差别，比如错误处理有加强，以前在2.0时有些error会丢失，并且不会被处理，3.0上加强了error的流动，保证它能到达Subscriber。</p>

<p>另外一个重要变化 就是在multicast，也即针对Hot Observables的共享问题，多了一个reset方法，以让所有Subscriber都接收到同样的数据。</p>

<p>还有就是Flowable有了pause的功能。</p>

<h3>三方库的兼容</h3>

<p>还要注意三方库如Retrofit adapter，RxAndroid以及RxBinding等也是与RxJava的版本绑定的，要注意它们之间版本的匹配。</p>

<h2>升级建议</h2>

<p>因为RxJava 1并不完全符合Rx规范，所以如果还在用RxJava 1，那么是要立即升级到3.0。</p>

<p>因为RxJava 2.0是最流行的版本，所以现在大部分项目使用的应该是RxJava 2.0。那么就要看项目本身的情况，如果RxJava 2.0能完全满足项目的需要，没有用到太多高级的特性（如multicast或者Flowable），而且项目中重点引用RxJava的部分也基本上成成熟了，此种情况下，其实不建议升级到3.0，因为不会带来多少收益。</p>

<p>相反，如果使用了大量的高级特性，甚至还遇到了RxJava本身导致的问题，并且项目中还在大量使用RxJava，未来新功能的开发也会使用RxJava，那么还是尽早升级为妙。同时要注意，RxJava是一个流行的库，有很多三方库的依赖于它，版本一旦变动，会引发链式反应，要注意版本的匹配，以免发生不兼容的情况。</p>

<p>可以到这里找到<a href="https://github.com/ReactiveX/RxJava/releases">最新的版本</a>。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://github.com/ReactiveX/RxJava/wiki/What's-different-in-3.0">What&rsquo;s different in 3.0</a></li>
<li><a href="https://prog.world/whats-new-in-rxjava-3/#:~:text=There%20was%20a%20problem%20with%20hot%20sources%20in,to%20enable%20newly%20connected%20subscribers%20to%20process%20data.">What’s New in RxJava 3</a></li>
<li><a href="https://stackoverflow.com/questions/38423079/differences-between-rxjava1-and-rxjava2">Differences between RxJava1 and RxJava2</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数学相关题目]]></title>
    <link href="http://toughcoder.net/blog/2023/01/09/mathematics-problem-set/"/>
    <updated>2023-01-09T22:03:57+08:00</updated>
    <id>http://toughcoder.net/blog/2023/01/09/mathematics-problem-set</id>
    <content type="html"><![CDATA[<p><a href="https://baike.baidu.com/item/%E6%95%B0%E5%AD%A6/107037">数学</a>是自然科学之母，数学也是算法之母，有一些数学相关的题目需要总结一下。当然暴力法也都是可以解决的，但是通过数学一些公式的引入会提升时间效率。</p>

<p><a href="http://toughcoder.net/blog/2023/01/09/mathematics-problem-set/"><img src="https://ts1.cn.mm.bing.net/th/id/R-C.ba01d095b9f9a650e61d8f49d2b28519?rik=rVVFOj18ozgpZw&riu=http%3a%2f%2fwww.pixelstalk.net%2fwp-content%2fuploads%2f2016%2f05%2fMath-Mathematics-Formula-Wallpaper-for-PC.jpg&ehk=%2bfTho6j8Ym8wGaYhOjf%2bGXs56O7AyL38fNlEbHjIzqQ%3d&risl=&pid=ImgRaw&r=0" title="auto auto" ></a></p>

<!-- more -->


<h2>数学题目的特点</h2>

<p>用暴力法或者模拟法也可以解决。</p>

<p>运用相关的数学知识或者数学公式，可以提升效率。</p>

<p>一般都可以使用查表大法。</p>

<h2>数论</h2>

<p>主要是以整数为基础的一些题目，一般会涉及素数，数位等。</p>

<h3>典型题目</h3>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/happy-number/">202. 快乐数</a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/add-digits/">258. 各位相加</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/add-digits/solution/by-alexhilton-uehk/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/prime-arrangements/">1175. 质数排列</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/prime-arrangements/solution/by-alexhilton-p5rj/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/count-integers-with-even-digit-sum/">2180. 统计各位数字之和为偶数的整数个数</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/count-integers-with-even-digit-sum/solution/2180-tong-ji-ge-wei-shu-zi-zhi-he-wei-ou-mc2e/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h2>数组轮转</h2>

<p>一般就是把数组的元素按照一定的规则进行移动和轮转。一般涉及LCM（最小公倍数）。</p>

<h3>典型题目</h3>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/rotate-array/">189. 轮转数组</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/rotate-array/solution/189-lun-zhuan-shu-zu-by-alexhilton-1ih4/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/minimum-number-of-operations-to-reinitialize-a-permutation/">1806. 还原排列的最少操作步数</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/minimum-number-of-operations-to-reinitialize-a-permutation/solution/1806-huan-yuan-pai-lie-de-zui-shao-cao-z-mqq1/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h2>矩阵</h2>

<p>矩阵在数学中是非常重要的概念，在计算机科学中矩阵也是非常的重要，像在图形图像以及人工智能领域矩阵都有非常重要的应用。矩阵在编程语言中的表示也非常的容易一般用一个二维数组就可以表示一个矩阵。</p>

<h3>典型题目</h3>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/rotate-array/">189. 轮转数组</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/rotate-array/solution/189-lun-zhuan-shu-zu-by-alexhilton-1ih4/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/minimum-number-of-operations-to-reinitialize-a-permutation/">1806. 还原排列的最少操作步数</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/minimum-number-of-operations-to-reinitialize-a-permutation/solution/1806-huan-yuan-pai-lie-de-zui-shao-cao-z-mqq1/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h2>计算几何</h2>

<p>几何相关的题目也是比较常见的，但通常都是离散化的，一般主要涉及直线，三角形和圆。</p>

<p>计算几何相关问题最需要注意的问题就是精度问题，特别是当坐标是以整数形式给出的时候，这时计算斜率要用乘法，而不能直接用除法。</p>

<h3>典型题目</h3>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/rotate-image/">48. 旋转图像</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/rotate-image/solution/by-alexhilton-5das/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/reshape-the-matrix/">566. 重塑矩阵</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/reshape-the-matrix/solution/566-zhong-su-ju-zhen-by-alexhilton-nb09/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/check-if-matrix-is-x-matrix/">2319. 判断矩阵是否是一个 X 矩阵</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/check-if-matrix-is-x-matrix/solution/by-alexhilton-083v/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h2>其他</h2>

<h3>典型题目</h3>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/gray-code/">89. 格雷编码</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/gray-code/solution/by-alexhilton-rjx8/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/unique-binary-search-trees/">96. 不同的二叉搜索树</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/unique-binary-search-trees/solution/by-alexhilton-y089/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h2>参考资料</h2>

<ul>
<li><a href="https://zhuanlan.zhihu.com/p/497110875">数学是什么？什么是数学？</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/301338035">刷算法题必备的数学考点汇总</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beyond RxJava]]></title>
    <link href="http://toughcoder.net/blog/2023/01/07/beyond-rxjava/"/>
    <updated>2023-01-07T09:47:50+08:00</updated>
    <id>http://toughcoder.net/blog/2023/01/07/beyond-rxjava</id>
    <content type="html"><![CDATA[<p>RxJava是一种编程范式，它并不是一个库，而是一种编程思想，一种解决问题的新思路，一种架构思想。因此，基于RxJava还有大量的其他的库，可以一起更容易让用RxJava构建应用程序。</p>

<p>其他书籍和文档也有提及，这些东西称为<a href="https://github.com/davidmoten/rxjava-extras">RxJava Extras</a>。</p>

<p><a href="http://toughcoder.net/blog/2023/01/07/beyond-rxjava/"><img src="https://tse4-mm.cn.bing.net/th/id/OIP-C.YSq989RaoMIlYVnsxoBOLQHaE8?pid=ImgDet&rs=1" title="auto auto" ></a></p>

<!-- more -->


<h2><a href="https://github.com/ReactiveX/RxAndroid">RxAndroid</a></h2>

<p>这是Jake Wharton大神弄的，但其实这个库里面的东西比较少。</p>

<p>最为常用的就是Schedulers之中的AndroidScheduler.main()，这个是在切线程时常用到的。其他的好像也没啥。</p>

<h2><a href="https://github.com/JakeWharton/RxBinding">RxBinding</a></h2>

<p>主要是处理Android UI的响应事件，它把UI响应事件，如OnClick，onTouch和onTextChanged等变成一个Observable。方便创建数据流。</p>

<p>虽然从语义上理解，这些UI事件的Observable应该是hot的，但是它们并不支持multicast。也就是说如果想用UI事件创建的Observable，创建两个数据处理流程，就需要去multicast。</p>

<p>方法就是可以用share()，之后就可以multicast了。</p>

<p>但这里也需要处理资源清理问题，因为事件都是通过向View添加listener来实现的，那么如何及时的清理listener，这个需要研究一下。</p>

<h2><a href="https://github.com/tbruyelle/RxPermissions">RxPermissions</a></h2>

<p>专门处理权限问题。权限，因为必须先调用request，然后在onActivityResult里面去处理，所以你的代码逻辑必然会被分成两段：</p>

<p>初始化时，比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">onCreate</span>
</span><span class='line'><span class="k">if</span> <span class="n">permission</span> <span class="n">granted</span>
</span><span class='line'>   <span class="n">doOurThings</span>
</span><span class='line'><span class="k">else</span> <span class="n">request</span> <span class="n">permissions</span>
</span><span class='line'>
</span><span class='line'><span class="n">onActivityResult</span>
</span><span class='line'><span class="k">if</span> <span class="n">permission</span> <span class="n">granted</span><span class="p">:</span>
</span><span class='line'>   <span class="n">do</span> <span class="n">Our</span> <span class="n">things</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果以Rx方式来理解，权限也是一个数据流，可能来一个granted或者rejected的权限，虽然状态不一样，但都可以理解 为权限数据，而且数据的发射是异步的，你不知道什么时候数据来。因此完全可以用Rx的方式来处理权限。</p>

<p>尝试失败，因为依赖无法添加。尝试网上解决方案仍无效，依赖无法添加。暂先放弃。
后面再观察一下吧，如果真心想用，只有以源码方式来集成，试用。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://www.jianshu.com/p/517c3f4c7bc1">RxAndroid使用初探—简洁、优雅、高效</a></li>
<li><a href="https://github.com/ReactiveX/RxAndroid/wiki">RxAndroid Extensions</a></li>
<li><a href="https://www.jianshu.com/p/34cf96b72102">RxBinding详解: 规范而强大的安卓UI响应式编程</a></li>
<li><a href="https://juejin.cn/post/6844903886507999246">RxPermissions使用总结</a></li>
<li><a href="https://www.raywenderlich.com/books/reactive-programming-with-kotlin">Reactive Programming with Kotlin</a></li>
<li><a href="https://github.com/davidmoten/rxjava2-extras">Utilities for use with RxJava 2</a></li>
<li><a href="https://github.com/davidmoten/rxjava-extras">Utilities for use with rxjava</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to RxJava]]></title>
    <link href="http://toughcoder.net/blog/2023/01/05/introduction-to-rxjava/"/>
    <updated>2023-01-05T22:57:44+08:00</updated>
    <id>http://toughcoder.net/blog/2023/01/05/introduction-to-rxjava</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/ReactiveX/RxJava">RxJava</a>是一个异步数据流式的开源库，已流行于Android开发行业中多年，现在已经变成了Android开发的一个标配，几乎所有，是的几乎所有的项目都会使用它（即使大部分人并没有真的在用它）。也几乎每个开发人员的简历中都会写着熟悉RxJava，甚至是精通RxJava，可见它的流行程度，今天就来学习一下RxJava的基本使用。</p>

<p><a href="http://toughcoder.net/blog/2023/01/05/introduction-to-rxjava/"><img src="https://ts1.cn.mm.bing.net/th/id/R-C.8bf825c83d71d679305006ad8877881f?rik=ntxCAiBD5wztvw&riu=http%3a%2f%2fwww.allaboutweb.biz%2fwp-content%2fuploads%2f2018%2f04%2fWhat-is-RxJava.jpg&ehk=K75BZ9hKVA%2bAu7Gjm9QXOAtzL3uOtKQeoRkvFi1KDAA%3d&risl=&pid=ImgRaw&r=0" title="auto auto" ></a></p>

<!-- more -->


<h2>理解基本的范式</h2>

<p>RxJava是Reactive Extensions的Java实现，是基于数据流的响应式编程范式，同时结合了函数式编程，准确的来说它是函数式响应式编程范式FRP(Functional Reacive Programming)。核心思想是数据流和响应式。
一个Observable就是一个会发出事件的机器，这里事件是一个数据的意思。就好比marble球，一个Observable就是一个可以不断发射出marble的机器，它就是一个数据流。
<img src="https://ts1.cn.mm.bing.net/th/id/R-C.2f9fed625ff00e7f0cfa51632f7b9644?rik=8AI5UL%2fV%2bFQO2Q&amp;riu=http%3a%2f%2fwww.philosophicalhacker.com%2fwp-content%2fuploads%2f2015%2f06%2fwe_know_rxjava_is_observer_plus_iterator.jpg&amp;ehk=3KXNE20j2MAeyThqdNT%2bZX9DHY2wRHvlVLLrCeusLCc%3d&amp;risl=&amp;pid=ImgRaw&amp;r=0" alt="" />
可以把它想像成一个无限列表，但并不是常规意义上的List，因为它是异步的，这里异步的意思是，同一个时间内，你看不到所有的元素，对于常规意义上的列表是同步的，意思是拿到列表时，里面的数据 全在。但Observable是异步的，拿到Observable时，可能还没有数据。数据是有时序的，有点类似于信号。如果你收集齐了Observable发出的所有数据，假设它是有限的（比如从一个真正列表创建的Observable），那么得到的就是一个列表。</p>

<p>Observable最佳的类比就是一个物理信号，是有时域上的概念。</p>

<p><img src="https://tse2-mm.cn.bing.net/th/id/OIP-C.L_gen2R661qqPG-UbhM2lAHaDl?pid=ImgDet&amp;rs=1" alt="" /></p>

<p>Subscriber是数据的消费者，它是对数据的响应，由它来体现响应式Reactive。</p>

<p>我们需要做的就是把数据封装成为一个Observable，然后定义好一个响应数据的Subscriber，这就是FRP了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">Observable</span><span class="o">.</span><span class="na">just</span><span class="o">(</span><span class="s">&quot;Hello, world of RxJava!&quot;</span><span class="o">)</span>
</span><span class='line'>           <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="nl">helloLabel:</span><span class="o">:</span><span class="n">setText</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>常见的Operator</h2>

<h3>Map</h3>

<p>比较容易理解，把Observable发出的事件进行转换。提供一个单元函数（一个输入参数，一个输出参数），输入就是Observable发出的数据，输出就是转换后的结果。针对发出的事件每个都应用提供的函数。
<img src="https://www.adictosaltrabajo.com/wp-content/uploads/2017/06/rxjava_android_map.png" alt="" /></p>

<h3>concatMap</h3>

<p>与flatMap类似，保证顺序。</p>

<h3>flatMap</h3>

<p>先做map，然后再做flat，把二维结构展平为一维，也即是把Observable of Observable展平为一个Observable。传入的map函数必须是返回一个Observable，也即是把常规数据转化为一个Observable。</p>

<p>此外，它的每个map操作可以是并行的，不能保证先后顺序，如果想保证顺序要使用concatMap。</p>

<h3>switchMap</h3>

<h3>combineLatest</h3>

<p>Operator就是数据的管道，用以把各种不同的数据发射器(Observable)连接起来，一起组成一个能够从源头数据，通过管道计算，最终生成符合预期的数据，流出到Subscriber那里。</p>

<h2>常见的技巧</h2>

<h3>感知冷热</h3>

<p>Observable是一个数据流，可视为一个事件发射器，不断的向下游发送数据(emission)。但数据何时发送，以及发送多少，是有一些细微区别的，这就引出了Observable是有冷热之分(Cold vs Hot)。</p>

<p>在《Learning RxJava》这本书中有一个非常形象的比喻，cold Observables就像音乐CD，每次播放都能得到相同的内容。对于所有Subscriber来说，无论你啥时候去subscribe，都能得到同样的数据流，这就是cold的。大多数以数据集为基础创建的Observable都是cold的，如Observable.just, Observable.fromIterable以及像从数据库或者文件存储中读取的数据。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>     <span class="n">Observable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">source</span> <span class="o">=</span> <span class="n">Observable</span><span class="o">.</span><span class="na">just</span><span class="o">(</span><span class="s">&quot;alpha&quot;</span><span class="o">,</span> <span class="s">&quot;beta&quot;</span><span class="o">,</span> <span class="s">&quot;gamma&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">source</span><span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Subscriber #1 received: &quot;</span> <span class="o">+</span> <span class="n">s</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">source</span><span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Subscriber #2 received: &quot;</span> <span class="o">+</span> <span class="n">s</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>     <span class="c1">//Subscriber #1 received: alpha</span>
</span><span class='line'>    <span class="c1">//Subscriber #1 received: beta</span>
</span><span class='line'>    <span class="c1">//Subscriber #1 received: gamma</span>
</span><span class='line'>    <span class="c1">//Subscriber #2 received: alpha</span>
</span><span class='line'>    <span class="c1">//Subscriber #2 received: beta</span>
</span><span class='line'>    <span class="c1">//Subscriber #2 received: gamma</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hot Observables则是像一个音乐广播电台，你今天收听到的内容，跟昨天收听到的内容是不一样的。不同的时间去subscribe会得到不一样的数据流，晚些subscribe就会错失前面的数据，这便是hot Observables。像一些无限数据集（比如社交信息，或者新闻信息），与时间有关的数据（如interval），以及用户事件都属于hot Observables。</p>

<h3>RxBinding只能被subscribe一次</h3>

<p>一般来说一个Observable，只能被subscribe一次。</p>

<p>但总的说 是分为冷和热，对于冷的，一般是有限集合的Observable，它可以被subscribe无限次，且每个Subscriber接收到的东西是一样的。</p>

<p>但对于热的，就不一样，有些可以被subscribe多次，有些则不能。</p>

<p>给一个Observable subscribe多个Subscriber的行为叫做multicast。
对于cold的，可以通过ConnectableObesrver，通过connect，来让几个Subscriber同步接收来自Observable的emission。</p>

<p>但是对于hot的Observable，如何 让 不同的Subscriber同步接收emission呢？
就比如说RxBinding中的大部分来自于View的事件Observable，都是hot的，并且，它们默认情况下，不能被multicast，只有最后一个subscribe的Observer，才可以接收事件。</p>

<p>这时就需要把Observable share一下。通过share()，之后就可以multicast了。</p>

<h3>如何做Recursion</h3>

<p>有一些场景是会出现循环，或者说Recursion的，比如说像文件遍历，对于文件夹的操作，是需要Recursion的。</p>

<p>这里就有两种场景，一种会在某个节点停留，用户具体进一步操作才会深入的遍历的情况，比如像文件浏览器，展示的就是当前的文件夹，用户点子目录，才会更进一步。这种场景，需要Hold住当前的文件夹，但当有新的文件夹变成当前文件夹时，它需要更新数据，这种数据产生的闭环，可以用Subject来解决。</p>

<p>但，如果是一个完整的遍历流程，从根节点开始，一直到所有的叶子为止，那么用subject可能就不太合适。这时就需要用一些Recursion来解决，可以看一些网络上的例子。需要用到常规的recursion方式，先要弄一个方法，在里面做出reactive chain，就是在Reactive链里面再调用这个方法，以此递归下去。不过，不知道这个当有一些耗时操作时，会不会造成堆积，以及会不会有资源释放的问题，有待考查。</p>

<p>Reactive这玩意儿，确实难度较大，想写出符合Reactive规范，且正确的代码还是相当难的。而且它难以调试，有时候完全不知道错在哪里。</p>

<h2>书籍推荐</h2>

<p>RxJava的学习曲线 非常之陡峭，它融合了异步，多线程，函数式编程和响应式编程，集多种编程范式于一体，要想真正的用好RxJava需要深度理解RxJava本身，更需要函数式和响应式编程的一些思维。必须要以Reactive的方式来架构你的应用程序，这才能真正算得上使用了RxJava。比如仅是用了几个Observable，用了几个operator，但是整体项目的代码仍是状态变量散落一大堆，这根本不叫用了RxJava，这仅仅是把RxJava当成工具来用了，并没真正践行它的精髓思想。</p>

<p>要想学好RxJava必须要啃书，它的学习曲线陡峭，并不是看了文档就能用（那根本不叫Reactive，仅是把RxJava当成工具类了），通过啃书达到一定的理解深度，然后再在项目中去实践。</p>

<h3>《Learning RxJava》</h3>

<p>这本书对于深入的理解RxJava本身非常有帮助，它比官方文档要详细得多，具体给你解释什么是Observable，什么是Observer以及各种operator，并且都带有实例。这本书，不建议从头读到尾，而是要像文档一样对待，需要深入理解哪个知点点的时候就去具体看那一章节就好。</p>

<p>书中的示例非常短小精悍，但能非常好的帮助你理解对应的知识点。</p>

<p>这本书的目的是让你更深入的了解RxJava这一库的本身，也就是说让你更好的了解工具本身。但这远远不够，即使把这本书看完，你仍旧会是把RxJava当成一个工具类来使用。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/">ReactiveX/RxJava文档中文版</a></li>
<li><a href="https://reactivex.io/">ReactiveX</a></li>
<li><a href="https://github.com/ReactiveX/RxJava">RxJava</a></li>
<li><a href="https://www.journaldev.com/19300/rxjava-flatmap-switchmap-concatmap">RxJava flatMap, switchMap, concatMap</a></li>
<li><a href="https://www.androidhive.info/RxJava/map-flatmap-switchmap-concatmap/">RxJava Operators – Understanding Map, FlatMap, SwitchMap and ConcatMap</a></li>
<li><a href="https://juejin.cn/post/6844903914022633486">从源码查看RxJava中的map和flatMap的用法与区别</a></li>
<li><a href="https://www.jianshu.com/p/0cd258eecf60">这可能是最好的RxJava 2.x 教程（完结版）</a></li>
<li><a href="https://gank.io/post/560e15be2dca930e00da1083">给 Android 开发者的 RxJava 详解</a></li>
<li><a href="https://colobu.com/2016/07/25/understanding-rxjava-thread-model/">理解RxJava的线程模型</a></li>
<li><a href="https://www.baeldung.com/rxjava-multiple-subscribers-observable">RxJava One Observable, Multiple Subscribers</a></li>
<li><a href="https://www.baeldung.com/rx-java">Introduction to RxJava</a></li>
<li><a href="https://medium.com/bystevenp/comment-trees-and-recursion-with-rxjava-d147a904610a">Comment Trees and Recursion with RxJava</a></li>
<li><a href="https://stackoverflow.com/questions/31246088/how-to-do-recursive-observable-call-in-rxjava">How To Do Recursive Observable Call in RxJava?</a></li>
<li><a href="https://medium.com/@stevenlow1983/rx-java-and-recursion-719f8ee1977a">RX Java and Recursion</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[搞懂动态规划之状态压缩]]></title>
    <link href="http://toughcoder.net/blog/2022/12/26/understanding-bitmask-dynamic-programming/"/>
    <updated>2022-12-26T12:10:24+08:00</updated>
    <id>http://toughcoder.net/blog/2022/12/26/understanding-bitmask-dynamic-programming</id>
    <content type="html"><![CDATA[<p>动态规划算法博大精深，非常的广泛而复杂。但动态规划离不开状态的存储和转移，要想用动态规划来求解一个问题，必须把问题分解为多个子问题，然后再用状态来记录以解决子问题，最终通过状态转移以得到整个问题的解。根据问题的不同，状态也会有不同的定义，比如有些是用整数来代表计数，有些是用布尔来代表True/False（或者0/1）的状态。</p>

<p><a href="http://toughcoder.net/blog/2022/12/26/understanding-bitmask-dynamic-programming/"><img src="https://tse2-mm.cn.bing.net/th/id/OIP-C.w0EUQBEfTpJW2jcJ-TeghAHaDU?pid=ImgDet&rs=1" title="auto auto" ></a></p>

<!-- more -->


<p>如果状态可以用True/False（或者0/1）来代表时，那么可以进一步的利用位运算，利用计算机的bit的特点，一个bit可以是0也可以是1，足以表示一个状态，那么就可以把整体的状态只用一个或者几个有限的整数来表示了，这就是状态压缩。</p>

<p>更进一步的，其实可以拓展一下，不光局限在动态规划里面，凡是用到True/False（或者0/1，选与不选等）的辅助存储时，都可以尝试用位运算来代表数组或者哈希表，这其实也是状态压缩。广义上来讲，把一坨用数组或者哈希表表示的状态压缩成为一个整数或者几个有限的整数就是状态压缩。</p>

<h2>典型题目</h2>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<p><br /></p>

<h2>参考资料</h2>

<ul>
<li><a href="https://www.cnblogs.com/labuladong/p/13940269.html">状态压缩：对动态规划进行降维打击</a></li>
<li><a href="https://cp-wiki.vercel.app/dynamic-programming/bitmask-dp/">Bitmask DP</a></li>
<li><a href="https://blog.csdn.net/qq_40722827/article/details/116400306">动态规划之状态压缩DP详细介绍和例题练习</a></li>
<li><a href="https://oi-wiki.org/dp/state/">OI wiki 状压DP</a></li>
<li><a href="https://blog.nowcoder.net/n/fcc30eadb2b44395862194814e819315">【状压DP】状态压缩动态规划入门超详解</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/131585177">动态规划——状态压缩DP</a></li>
<li><a href="https://www.cnblogs.com/mxrmxr/p/9799832.html">状态压缩入门</a></li>
<li><a href="https://github.com/cormacpayne/Data-Structures-and-Algorithms/blob/master/dynamic-programming/bitmask-dynamic-programming/bitmask-dynamic-programming.md#:~:text=Bitmask%20DP%20is%20a%20type%20of%20dynamic%20programming,or%20a%20binary%20string%20representation%20of%20the%20number.">Bitmask Dynamic Programming</a></li>
<li><a href="https://www.geeksforgeeks.org/bitmasking-and-dynamic-programming-set-1-count-ways-to-assign-unique-cap-to-every-person/">Bitmasking and Dynamic Programming | Set 1 (Count ways to assign unique cap to every person)</a></li>
<li><a href="https://www.geeksforgeeks.org/bitmasking-dynamic-programming-set-2-tsp/">Bitmasking and Dynamic Programming | Set-2 (TSP)</a></li>
<li><a href="https://algo.monster/problems/bitmask_intro">Bitmask and Dynamic Programming</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[前缀和与差分数组简介]]></title>
    <link href="http://toughcoder.net/blog/2022/09/25/intro-to-diff-array/"/>
    <updated>2022-09-25T09:44:51+08:00</updated>
    <id>http://toughcoder.net/blog/2022/09/25/intro-to-diff-array</id>
    <content type="html"><![CDATA[<p>在数组相关的问题中前缀和与差分数组是使用使用比较多的辅助数组，能有效的提升效率。前缀和就是数组中到当前元素的和；差分数组是一个辅助数组，每个元素是原数组相邻元素之差，故命名为差分数组，它在原数组区间修改等操作上能辅助提升效率。</p>

<p><a href="http://toughcoder.net/blog/2022/09/25/intro-to-diff-array/"><img src="https://cdn.luogu.com.cn/upload/image_hosting/n0yy6qgd.png" title="auto auto" ></a></p>

<!-- more -->


<h2>一维前缀和</h2>

<p>前缀和的定义不复杂，对于一维列表来说，前缀和是一个辅助列表，前缀和中的元素i，就是原列表中从元素0到元素i的累加和，即preSum[i] = sum(nums, 0, i)。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>preSum[0] = nums[0]
</span><span class='line'>preSum[1] = nums[0] + nums[1] = preSum[0] + nums[1]
</span><span class='line'>preSum[2] = nums[0] + nums[1] + nums[2] = preSum[1] + nums[2]
</span><span class='line'>preSum[n-1]= nums[0] + nums[1] + ... + nums[n - 1] = preSum[n - 2] + nums[n - 1]</span></code></pre></td></tr></table></div></figure>


<p>代码实现就是这个样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">size</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">preSum</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">preSum</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">preSum</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>前缀和的应用</h3>

<p>前缀和最大的作用就是能够以常数时间求出一维列表的区间和，或者说连续子列表的和。</p>

<p>比如给定一个列表nums，长度是n，如果想求出子列表[l, r]，都是闭区间的子列表的和，就可以用前缀和。朴素做法很容易想到，就是从遍历区间[l, r]累加即可，显然这是O(n)复杂度，如果查询就一次两次的，当然 也可以，但如果查询次数多了，显然效率差，如果查询m次，时间复杂度会上升到O(mn)。</p>

<p>区间和[l, r]，记为sum(l, r) = nums[l] + nums[l + 1] + &hellip; + nums[r-1] + nums[r]，是可以转化用前缀和来求解的，过程如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">sum</span><span class="o">(</span><span class="n">l</span><span class="o">,</span> <span class="n">r</span><span class="o">)</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">l</span><span class="o">]</span> <span class="o">+</span> <span class="n">nums</span><span class="o">[</span><span class="n">l</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="o">...</span> <span class="o">+</span> <span class="n">nums</span><span class="o">[</span><span class="n">r</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="n">nums</span><span class="o">[</span><span class="n">r</span><span class="o">]</span>
</span><span class='line'>           <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="n">nums</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">+...</span> <span class="o">+</span> <span class="n">nums</span><span class="o">[</span><span class="n">l</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="n">nums</span><span class="o">[</span><span class="n">l</span><span class="o">]</span> <span class="o">+</span> <span class="o">...</span> <span class="n">nums</span><span class="o">[</span><span class="n">r</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="n">nums</span><span class="o">[</span><span class="n">r</span><span class="o">]</span> <span class="o">-</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="n">nums</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">+...+</span> <span class="n">nums</span><span class="o">[</span><span class="n">l</span><span class="o">-</span><span class="mi">1</span><span class="o">])</span>
</span><span class='line'>           <span class="o">=</span> <span class="n">preSum</span><span class="o">[</span><span class="n">r</span><span class="o">]</span> <span class="o">-</span> <span class="n">preSum</span><span class="o">[</span><span class="n">l</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>事先计算前缀和列表，就可以直接以一次减法求出区间和：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">int</span> <span class="nf">regionSum</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">j</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">preSum</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">preSum</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">-</span> <span class="n">preSum</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">];</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/alexhilton/EffectiveAlgorithm/blob/main/datastructure/src/main/java/AuxiliaryArray.java">完整代码看这里</a>。</p>

<h3>前缀和典型题目</h3>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/subarray-sum-equals-k/">560. 和为 K 的子数组</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/subarray-sum-equals-k/solution/by-alexhilton-eh11/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/find-the-highest-altitude/">1732. 找到最高海拔</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/find-the-highest-altitude/solution/1732-zhao-dao-zui-gao-hai-ba-by-alexhilt-fxhn/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h2>差分数组</h2>

<p>与前缀和类似，差分数组也是一个常用的辅助数组。它的定义是原数组相邻两元素之差：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">diff</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">-</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span>
</span><span class='line'><span class="n">diff</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="n">diff</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">-</span> <span class="n">nums</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="n">diff</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">-</span> <span class="n">nums</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'><span class="n">diff</span><span class="o">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">-</span> <span class="n">nums</span><span class="o">[</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>不难发现，差分数组是前缀和的逆运算，也就是说把差分数组diff求它的前缀和，刚好能得到原始数组：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">nums</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">diff</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="n">nums</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="n">nums</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">-</span> <span class="n">nums</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">diff</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="n">diff</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'><span class="n">nums</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="n">nums</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">-</span> <span class="n">nums</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="n">nums</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">-</span> <span class="n">nums</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">diff</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="n">diff</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="n">diff</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'><span class="n">nums</span><span class="o">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="n">nums</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">-</span> <span class="n">nums</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="o">...</span> <span class="n">nums</span><span class="o">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">-</span> <span class="n">nums</span><span class="o">[</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="n">diff</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="o">...</span> <span class="n">diff</span><span class="o">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>差分数组的作用</h3>

<p>差分数组的作用是能快速的对区间更新。区间更新是指对于数组nums，长度为n，想要对区间[l, r]做更新，比如都加上一个数x，或者都减去一个数y。常规的实现肯定遍历[l, r]然后对每个元素做更新，这是线性时间O(n)的，而用差分数组可以在常数时间完成区间更新。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">nums</span><span class="o">[</span><span class="n">l</span><span class="o">,</span> <span class="n">r</span><span class="o">]</span> <span class="o">+</span> <span class="n">x</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">l</span><span class="o">]</span> <span class="o">+</span> <span class="n">x</span><span class="o">,</span> <span class="n">nums</span><span class="o">[</span><span class="n">l</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="n">x</span><span class="o">,</span> <span class="o">...</span> <span class="n">nums</span><span class="o">[</span><span class="n">r</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="n">x</span><span class="o">,</span> <span class="n">nums</span><span class="o">[</span><span class="n">r</span><span class="o">]</span> <span class="o">+</span> <span class="n">x</span>
</span><span class='line'>                  <span class="o">=</span> <span class="n">diff</span><span class="o">[</span><span class="n">l</span><span class="o">]</span> <span class="o">+</span> <span class="n">x</span><span class="o">,</span> <span class="n">diff</span><span class="o">[</span><span class="n">l</span> <span class="o">+</span> <span class="mi">1</span><span class="o">],</span> <span class="o">....</span> <span class="n">diff</span><span class="o">[</span><span class="n">r</span><span class="o">-</span><span class="mi">1</span><span class="o">],</span> <span class="n">diff</span><span class="o">[</span><span class="n">r</span><span class="o">],</span> <span class="n">diff</span><span class="o">[</span><span class="n">r</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span> <span class="o">-</span> <span class="n">x</span>
</span><span class='line'>                  <span class="o">=</span> <span class="n">diff</span><span class="o">[</span><span class="n">l</span><span class="o">]</span> <span class="o">+</span> <span class="n">x</span><span class="o">,</span> <span class="n">diff</span><span class="o">[</span><span class="n">r</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span> <span class="o">-</span> <span class="n">x</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看出，只对差分数组的区间两端做加减法就可以实现原数组区间增加。当然了，如果想得出原数组的真实修改后的结果，仍需要对差分数组做前缀和才可以，因为差分数组的前缀和才是原始数组。所以，<strong>差分数组是一个辅助数组，它的作用不像前缀和那样明显，它只能配合使用，无法单独使用</strong>。（单独使用仍要用O(n)来计算前缀和才能得到原始数组，失去了意义）。</p>

<p>差分数组与前缀和通常作为辅助数组一起使用，以解决快速区间查询和区间修改，这便是树状数组，理解 了前缀和和差分数组的作用，对于理解 树状数组有很大的帮助。树状数组的具体原理与应用可以<a href="http://toughcoder.net/blog/2022/09/06/intro-to-binary-indexed-tree/">参考 这篇文章。</a></p>

<h3>差分典型题目</h3>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/calculate-amount-paid-in-taxes/">2303. 计算应缴税款总额</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/calculate-amount-paid-in-taxes/solution/by-alexhilton-eq50/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h2>拓展到二维</h2>

<p>一维上能做的事情，肯定 都能拓展到二维，对于二维列表也就是说矩阵，也可以使用前缀和和差分，差分本来的应用比较有限，不像前缀和可以单独应用，并且二维差分要复杂的多得多，所以这里就讨论一下二维前缀和。</p>

<p>假设一个矩阵为matrix，尺寸是mxn，即m行n列，对于它的任意一个格子{i, j}和前缀和preSum[i, j]等于其左上部分的所有元素之和。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">preSum</span><span class="o">[</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">matrix</span><span class="o">[</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="n">preSum</span><span class="o">[</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">matrix</span><span class="o">[</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="n">matrix</span><span class="o">[</span><span class="mi">0</span><span class="o">,</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">preSum</span><span class="o">[</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="n">matrix</span><span class="o">[</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">]</span>
</span><span class='line'><span class="n">preSum</span><span class="o">[</span><span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">matrix</span><span class="o">[</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="n">matrix</span><span class="o">[</span><span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">preSum</span><span class="o">[</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="n">matrix</span><span class="o">[</span><span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="n">preSum</span><span class="o">[</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">matrix</span><span class="o">[</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="n">matrix</span><span class="o">[</span><span class="mi">0</span><span class="o">,</span><span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="n">matrix</span><span class="o">[</span><span class="mi">1</span><span class="o">,</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="n">matrix</span><span class="o">[</span><span class="mi">1</span><span class="o">,</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">preSum</span><span class="o">[</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="n">preSum</span><span class="o">[</span><span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="n">nums</span><span class="o">[</span><span class="mi">1</span><span class="o">,</span><span class="mi">1</span><span class="o">]</span> <span class="o">-</span> <span class="n">preSum</span><span class="o">[</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="n">preSum</span><span class="o">[</span><span class="n">i</span><span class="o">,</span> <span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">preSum</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span><span class="n">j</span><span class="o">]</span> <span class="o">+</span> <span class="n">preSum</span><span class="o">[</span><span class="n">i</span><span class="o">,</span> <span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="n">matrix</span><span class="o">[</span><span class="n">i</span><span class="o">,</span><span class="n">j</span><span class="o">]</span> <span class="o">-</span> <span class="n">preSum</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">preSum</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">m</span><span class="o">][</span><span class="n">n</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">m</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">preSum</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">matrix</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>    <span class="n">preSum</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">preSum</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="n">matrix</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>    <span class="n">preSum</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">preSum</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="n">matrix</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">1</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">preSum</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">preSum</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="n">preSum</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">+</span> <span class="n">matrix</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">-</span> <span class="n">preSum</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">][</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="o">];</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>二维前缀和的应用</h3>

<p>与一维前缀和类似，二维前缀和的应用用于快速求出区间和，比如求子矩阵和，求[r1,c1]到[r2,c2]之间的子矩阵之和，就可以应用二维前缀和，可以从O(mn)的复杂度降到O(1)。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">sum</span><span class="o">[</span><span class="n">r1</span><span class="o">,</span><span class="n">c1</span><span class="o">]~[</span><span class="n">r2</span><span class="o">,</span><span class="n">c2</span><span class="o">]</span> <span class="o">=</span> <span class="n">preSum</span><span class="o">[</span><span class="n">r2</span><span class="o">,</span><span class="n">c2</span><span class="o">]</span> <span class="o">-</span> <span class="n">preSum</span><span class="o">[</span><span class="n">r2</span><span class="o">,</span><span class="n">c1</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">-</span> <span class="n">preSum</span><span class="o">[</span><span class="n">r1</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="n">c2</span><span class="o">]</span> <span class="o">+</span> <span class="n">preSum</span><span class="o">[</span><span class="n">r1</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="n">c1</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">int</span> <span class="nf">regionSum</span><span class="o">(</span><span class="kt">int</span> <span class="n">r1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">c1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">r2</span><span class="o">,</span> <span class="kt">int</span> <span class="n">c2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">r1</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">c1</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">preSum</span><span class="o">[</span><span class="n">r2</span><span class="o">][</span><span class="n">c2</span><span class="o">];</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">preSum</span><span class="o">[</span><span class="n">r2</span><span class="o">][</span><span class="n">c2</span><span class="o">]</span> <span class="o">-</span> <span class="n">preSum</span><span class="o">[</span><span class="n">r2</span><span class="o">][</span><span class="n">c1</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">-</span> <span class="n">preSum</span><span class="o">[</span><span class="n">r1</span> <span class="o">-</span> <span class="mi">1</span><span class="o">][</span><span class="n">c2</span><span class="o">]</span> <span class="o">+</span> <span class="n">preSum</span><span class="o">[</span><span class="n">r1</span> <span class="o">-</span> <span class="mi">1</span><span class="o">][</span><span class="n">c1</span> <span class="o">-</span> <span class="mi">1</span><span class="o">];</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>两个坐标[r1,c1]和[r2,c2]把矩阵分成了三个区域，一是[0, 0]~[r2,c2]这就是preSum[r2,c2]，二是[0,0]~[r2,c1-1]，三是[0,0]~[r1-1,c2]，相减，多减了一个公共区域[0,0]~[r1-1,c1-1]，所以要加回来。</p>

<p><a href="https://github.com/alexhilton/EffectiveAlgorithm/blob/main/datastructure/src/main/java/AuxiliaryMatrix.java">完整代码看这里</a>。</p>

<p>前缀和与差分数组一般作为辅助数组使用，理解了它们的原理对于理解更复杂的数组结构如树状数组是非常有帮助的，<a href="http://toughcoder.net/blog/2022/09/06/intro-to-binary-indexed-tree/">关于树状数组可以参考 此文</a>。</p>

<h2>拓展到后缀和最值</h2>

<p>前缀和是最常用的一种前缀辅助数组，但并不局限于此，也可以用后缀和，视具体情况而定。</p>

<p>另外，还可以拓展到最值，就是说前缀最值（最小值最大值），或者后缀最小值最大值，也可以帮助降低复杂度。</p>

<h2>典型问题</h2>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/my-calendar-ii/">731. 我的日程安排表 II</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/my-calendar-ii/solution/by-alexhilton-bggq/">题解</a> </td>
<td style="text-align:left;"> TreeMap当作差分数组 </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/partition-array-into-disjoint-intervals/">915. 分割数组</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/partition-array-into-disjoint-intervals/solution/by-alexhilton-9eh3/">题解</a> </td>
<td style="text-align:left;"> 后缀最小值辅助数组 </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/global-and-local-inversions/">775. 全局倒置与局部倒置</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/global-and-local-inversions/solution/by-alexhilton-xagt/">题解</a> </td>
<td style="text-align:left;"> 后缀最小值 </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h2>参考资料</h2>

<ul>
<li><a href="https://www.jianshu.com/p/2a4e861b44ae">差分数组</a></li>
<li><a href="https://blog.csdn.net/qq_31601743/article/details/105352885">什么是差分数组？</a></li>
<li><a href="https://blog.csdn.net/Miracle_ps/article/details/126573360">【LeetCode】一文吃透差分数组（附例题）</a></li>
<li><a href="https://blog.csdn.net/qq_44786250/article/details/100056975">差分数组是个啥？能干啥？怎么用？（差分详解+例题）</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/117569086">【朝夕的ACM笔记】算法基础-前缀和</a></li>
<li><a href="https://blog.csdn.net/qq_45914558/article/details/107385862">前缀和【超详细讲解前缀和】</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/436526162">前缀和</a></li>
<li><a href="https://juejin.cn/post/7005057884555837476">面试必会的算法题——前缀和</a></li>
<li><a href="https://juejin.cn/post/6944913393627168798">什么是前缀和?</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/107778275">前缀和技巧</a></li>
<li><a href="https://blog.csdn.net/weixin_45629285/article/details/111146240">前缀和与差分 图文并茂 超详细整理（全网最通俗易懂）</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding Dijkstra Algorithm]]></title>
    <link href="http://toughcoder.net/blog/2022/09/12/understanding-dijkstra-algorithm/"/>
    <updated>2022-09-12T10:49:54+08:00</updated>
    <id>http://toughcoder.net/blog/2022/09/12/understanding-dijkstra-algorithm</id>
    <content type="html"><![CDATA[<p>最短路径问题，是图论中经常遇到的问题，对于非加权图，用广度优先搜索（BFS）就可以找到两个顶点之间的最短路径（最少边数），但对于加权图，就需要用到著名的犾克斯特拉算法（<a href="https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm">Dijkstra Algorithm</a>）。</p>

<p><a href="http://toughcoder.net/blog/2022/09/12/understanding-dijkstra-algorithm/"><img src="https://www.researchgate.net/profile/Atta_Ur_Rehman14/publication/331484960/figure/fig1/AS:732550733512704@1551665113143/Illustration-of-Dijkstras-algorithm.ppm" title="auto auto" ></a></p>

<!-- more -->


<h2>思路</h2>

<p>犾克斯特拉算法的核心思想是：</p>

<ol>
<li>以起步的顶点作为<strong>当前顶点</strong></li>
<li>检查当前顶点的所有邻接顶点，计算当前顶点到所有其邻接顶点的权重，并记录下来</li>
<li>从<strong>未访问过</strong>的邻接顶点中，选择一个总权重最小的顶点，作为下一个<strong>当前顶点</strong></li>
<li>重复第3步，直到图中所有的顶点都被访问过</li>
</ol>


<p>这样就能得到起步顶点到其他所有顶点的最短路径（最小权重）。</p>

<p><img src="https://img-blog.csdnimg.cn/201902261948522.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzc5NTkyMQ==,size_16,color_FFFFFF,t_70" alt="" /></p>

<h2>实例</h2>

<p>前面的思路听起来还是不够清爽，我们来看一个具体的实例，比如计算不同的城市之间的飞行费用问题，就可以用Dijkstra算法来求解，一共有五个城市，以及它们之间的航班费用：</p>

<script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"></script>


<script>mermaid.initialize({startOnLoad:true});</script>


<div class="mermaid">
flowchart LR;
    A([Atlanta])
    B([Boston])
    C([Chicago])
    D([Denver])
    E([El Paso])
        A&#45;&#45; 100 &#45;&#45;>B;
    A&#45;&#45; 160 &#45;&#45;>D;    B&#45;&#45; 120 &#45;&#45;>C;    B&#45;&#45; 180 &#45;&#45;>D;    D&#45;&#45; 40 &#45;&#45;>C;
    D&#45;&#45; 140 &#45;&#45;>E;
    </div>


<p>以Atlanta为起点，来计算到其他几个城市的最小飞行费用，为方便用一个表格来展现Dijkstra算法的每一步：</p>

<table>
<thead>
<tr>
<th style="text-align:left;"> 步骤 </th>
<th style="text-align:left;"> 当前顶点 </th>
<th style="text-align:center;"> Atlanta </th>
<th style="text-align:center;"> Boston </th>
<th style="text-align:center;"> Chicago </th>
<th style="text-align:center;"> Denver </th>
<th style="text-align:center;"> El Paso </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> 初始化 </td>
<td style="text-align:left;"> n/a </td>
<td style="text-align:center;"> inf </td>
<td style="text-align:center;"> inf </td>
<td style="text-align:center;"> inf </td>
<td style="text-align:center;"> inf </td>
<td style="text-align:center;"> inf </td>
<td style="text-align:left;"> inf为正无穷，代表还未有计算的距离  </td>
</tr>
<tr>
<td style="text-align:left;"> 第1步<br/>起始顶点作为当前顶点 </td>
<td style="text-align:left;"> Atlanta </td>
<td style="text-align:center;"> 0 </td>
<td style="text-align:center;"> 100 </td>
<td style="text-align:center;"> inf </td>
<td style="text-align:center;"> 160 </td>
<td style="text-align:center;"> inf </td>
<td style="text-align:left;"> Atlanta能到达Boston和Denver，是邻接 的顶点 直接填权重 </td>
</tr>
<tr>
<td style="text-align:left;"> 第2步<br/>未访问顶点Boston和Denver中选择权重小的Boston </td>
<td style="text-align:left;"> Boston </td>
<td style="text-align:center;"> 0 </td>
<td style="text-align:center;"> 100 </td>
<td style="text-align:center;"> 220 </td>
<td style="text-align:center;"> 160 </td>
<td style="text-align:center;"> inf </td>
<td style="text-align:left;"> 到Boston的费用是100，以此为基础，<br/>Boston到Chicago是120，所以起始点到Chicago的费用是220。<br/>Boston到Denver是180再加上基础100就是280，它大于Atlanta直飞Denver，所以这个放弃 </td>
</tr>
<tr>
<td style="text-align:left;"> 第3步<br/>未访问的中Denver最小，所以用Denver </td>
<td style="text-align:left;"> Denver </td>
<td style="text-align:center;"> 0 </td>
<td style="text-align:center;"> 100 </td>
<td style="text-align:center;"> 200 </td>
<td style="text-align:center;"> 160 </td>
<td style="text-align:center;"> 300 </td>
<td style="text-align:left;"> 到Denver的费用是160，以此为基础，<br/>Denver到Chicago是40，经Denver到Chicago更划算，所以到Chicago更新为200；<br/>Denver还可以到达El Paso费用是300 </td>
</tr>
<tr>
<td style="text-align:left;"> 第4步<br/>未访问的中Chicago最小，所以用Chicago </td>
<td style="text-align:left;"> Chicago </td>
<td style="text-align:center;"> 0 </td>
<td style="text-align:center;"> 100 </td>
<td style="text-align:center;"> 200 </td>
<td style="text-align:center;"> 160 </td>
<td style="text-align:center;"> 280 </td>
<td style="text-align:left;"> 到Chicago的费用是200，以此为基础，<br/>Chicago到El Paso是80，经Chicago到El Paso更划算，所以到El Paso更新为280 </td>
</tr>
<tr>
<td style="text-align:left;"> 第5步<br/>只有El Paso未访问了，所以用El Paso </td>
<td style="text-align:left;"> El Paso </td>
<td style="text-align:center;"> 0 </td>
<td style="text-align:center;"> 100 </td>
<td style="text-align:center;"> 200 </td>
<td style="text-align:center;"> 160 </td>
<td style="text-align:center;"> 280 </td>
<td style="text-align:left;"> 到El Paso的费用是280，以此为基础，<br/>El Paso到Boston是100，不划算，所以不用更新。<br/>所有顶点都访问过了，这就是Atlanta出发到所有城市的最小飞行费用 </td>
</tr>
</tbody>
</table>


<h2>实现</h2>

<p>Dijkstra算法比较复杂，它的时间空间复杂度都比较高。算法的输入是一个加树图，和一个起始顶点，输出则是一个列表，表示起始顶点到其他顶点的最短路径。</p>

<h3>实现思路</h3>

<ol>
<li>创建一个结果列表，长度是顶点数量N，尽管其实不管起始顶点，但为了方便还是加上，用以存储起始顶点到所有顶点的最小距离，列表初始化为正无穷</li>
<li>创建一个标记列表，长度是N，用以标记顶点是否访问过，在选择下一个当前节点时，以及判断算法是否结束时，都需要用到此列表</li>
<li>选择实始顶点为当前顶点</li>
<li>把当前节点加入到标记列表中</li>
<li>更新最小距离列表：以当前顶点为基础，计算到它的每个邻接顶点的距离（也即基础值加上与其邻接的边的权重），如果距离小于结果列表中的距离，就更新结果列表</li>
<li>选择下一个当前顶点：遍历结果列表，找最小值，并且还未访问过（不在标记列表里），作为下一个当前顶点</li>
<li>重复第4到第6步，直到所有顶点都已标记，这时在第6步肯定 找不到下一个当前顶点</li>
</ol>


<h3>伪代码</h3>

<p>有了前面的实现思路，就不难写出伪代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>creat a list with length of N distanceList, init with MAX
</span><span class='line'>create a set visitedSet
</span><span class='line'>currentNode = start
</span><span class='line'>distanceList[start] = 0
</span><span class='line'>while currentNode is not null:
</span><span class='line'>    add currentNode to visitedSet
</span><span class='line'>    
</span><span class='line'>    base = distanceList[currentNode]
</span><span class='line'>    for each node adjacent with currentNode:
</span><span class='line'>         if node.weight + base &lt; distanceList[node]:
</span><span class='line'>              distanceList[node] = node.weight + base
</span><span class='line'>              
</span><span class='line'>    min = null
</span><span class='line'>    for each node in distanceList:
</span><span class='line'>        if node not in visitedSet and min &gt; distanceList[node]:
</span><span class='line'>              min = node;
</span><span class='line'>    currentNode = min</span></code></pre></td></tr></table></div></figure>


<h3>示例代码</h3>

<p>到了代码层面的实现，需要灵活选择数据结构，如果顶点可以方便的用下标来代表的话，那么就可以用数组代替列表，否则可能就要使用哈希表。这里为了方便，用下标来代表顶点：0代表Atlanta，1代表Boston，2代表Chicago，3代表Denver，4代表El Paso，这样就都可以用数组来当列表用。</p>

<p>图用矩阵来表示，每一行代表到另一个城市的费用，其实默认值可以都用0，在计算费用时就不用特殊处理了，但为了体现邻接顶点，所以没有连通的顶点用-1，自己用0，相邻的顶点才有权重。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DijkstraAlgorithm</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">dijkstra</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">graph</span><span class="o">,</span> <span class="kt">int</span> <span class="n">start</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span><span class="o">[]</span> <span class="n">distance</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
</span><span class='line'>        <span class="kt">boolean</span><span class="o">[]</span> <span class="n">visited</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
</span><span class='line'>        <span class="n">Arrays</span><span class="o">.</span><span class="na">fill</span><span class="o">(</span><span class="n">distance</span><span class="o">,</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Arrays</span><span class="o">.</span><span class="na">fill</span><span class="o">(</span><span class="n">visited</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>        <span class="n">distance</span><span class="o">[</span><span class="n">start</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">current</span> <span class="o">=</span> <span class="n">start</span><span class="o">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">current</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Mark as current node as visited</span>
</span><span class='line'>            <span class="n">visited</span><span class="o">[</span><span class="n">current</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Update the shortest distance for the nodes adjacent with current node</span>
</span><span class='line'>            <span class="kd">final</span> <span class="kt">int</span> <span class="n">base</span> <span class="o">=</span> <span class="n">distance</span><span class="o">[</span><span class="n">current</span><span class="o">];</span>
</span><span class='line'>            <span class="kt">int</span><span class="o">[]</span> <span class="n">neighbors</span> <span class="o">=</span> <span class="n">graph</span><span class="o">[</span><span class="n">current</span><span class="o">];</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">neighbors</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="c1">// Skip not adjacent node</span>
</span><span class='line'>                    <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">base</span> <span class="o">+</span> <span class="n">neighbors</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">distance</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">distance</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">base</span> <span class="o">+</span> <span class="n">neighbors</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Pick next current node</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">min</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(!</span><span class="n">visited</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">min</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="o">||</span> <span class="n">distance</span><span class="o">[</span><span class="n">min</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">distance</span><span class="o">[</span><span class="n">i</span><span class="o">]))</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">min</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">current</span> <span class="o">=</span> <span class="n">min</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">distance</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">String</span><span class="o">[]</span> <span class="n">cities</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;Atlanta&quot;</span><span class="o">,</span> <span class="s">&quot;Boston&quot;</span><span class="o">,</span> <span class="s">&quot;Chicago&quot;</span><span class="o">,</span> <span class="s">&quot;Denver&quot;</span><span class="o">,</span> <span class="s">&quot;El Paso&quot;</span><span class="o">};</span>
</span><span class='line'>        <span class="kt">int</span><span class="o">[][]</span> <span class="n">graph</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>                <span class="o">{</span><span class="mi">0</span><span class="o">,</span> <span class="mi">100</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="mi">160</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">},</span>
</span><span class='line'>                <span class="o">{-</span><span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">120</span><span class="o">,</span> <span class="mi">180</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">},</span>
</span><span class='line'>                <span class="o">{-</span><span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="mi">80</span><span class="o">},</span>
</span><span class='line'>                <span class="o">{-</span><span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="mi">40</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">140</span><span class="o">},</span>
</span><span class='line'>                <span class="o">{-</span><span class="mi">1</span><span class="o">,</span> <span class="mi">100</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">},</span>
</span><span class='line'>        <span class="o">};</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span><span class="o">[]</span> <span class="n">shortestPath</span> <span class="o">=</span> <span class="n">dijkstra</span><span class="o">(</span><span class="n">graph</span><span class="o">,</span> <span class="n">start</span><span class="o">);</span>
</span><span class='line'>        <span class="n">IntStream</span><span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="n">start</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">graph</span><span class="o">.</span><span class="na">length</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">mapToObj</span><span class="o">(</span><span class="n">i</span> <span class="o">-&gt;</span> <span class="s">&quot;Shortest distance from &quot;</span> <span class="o">+</span> <span class="n">cities</span><span class="o">[</span><span class="n">start</span><span class="o">]</span> <span class="o">+</span> <span class="s">&quot; to &quot;</span> <span class="o">+</span> <span class="n">cities</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="s">&quot;: &quot;</span> <span class="o">+</span> <span class="n">shortestPath</span><span class="o">[</span><span class="n">i</span><span class="o">])</span>
</span><span class='line'>                <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Shortest</span> <span class="n">distance</span> <span class="n">from</span> <span class="n">Atlanta</span> <span class="n">to</span> <span class="nl">Boston:</span> <span class="mi">100</span>
</span><span class='line'><span class="n">Shortest</span> <span class="n">distance</span> <span class="n">from</span> <span class="n">Atlanta</span> <span class="n">to</span> <span class="nl">Chicago:</span> <span class="mi">200</span>
</span><span class='line'><span class="n">Shortest</span> <span class="n">distance</span> <span class="n">from</span> <span class="n">Atlanta</span> <span class="n">to</span> <span class="nl">Denver:</span> <span class="mi">160</span>
</span><span class='line'><span class="n">Shortest</span> <span class="n">distance</span> <span class="n">from</span> <span class="n">Atlanta</span> <span class="n">to</span> <span class="n">El</span> <span class="nl">Paso:</span> <span class="mi">280</span>
</span></code></pre></td></tr></table></div></figure>


<h2>应用</h2>

<p>Dijkstra算法只能用于有向无环加权图（DAG），且没有负权重的情况下，才可以正常工作。并且，它的复杂度较高，如果顶点数量为n，那么它的时间复杂度会达到O(n<sup>2</sup>)。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://www.geeksforgeeks.org/dijkstras-shortest-path-algorithm-greedy-algo-7/">Dijkstra’s Shortest Path Algorithm</a></li>
<li><a href="https://www.freecodecamp.org/news/dijkstras-shortest-path-algorithm-visual-introduction/">Dijkstra&rsquo;s Shortest Path Algorithm - A Detailed and Visual Introduction</a></li>
<li><a href="https://www.programiz.com/dsa/dijkstra-algorithm">Dijkstra&rsquo;s Algorithm</a></li>
<li><a href="https://brilliant.org/wiki/dijkstras-short-path-finder/">Dijkstra&rsquo;s Shortest Path Algorithm</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/338414118">Dijkstra算法详解 通俗易懂</a></li>
<li><a href="https://blog.csdn.net/lbperfect123/article/details/84281300">Dijkstra算法图文详解</a></li>
<li><a href="https://blog.csdn.net/qq_35644234/article/details/60870719">最短路径问题&mdash;Dijkstra算法详解</a></li>
<li><a href="https://www.cnblogs.com/dijkstra2003/p/7222182.html">Dijkstra 最短路径算法 秒懂详解</a></li>
<li><a href="https://www.cnblogs.com/goldsunshine/p/12978305.html">一篇文章讲透Dijkstra最短路径算法</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[图论基础知识]]></title>
    <link href="http://toughcoder.net/blog/2022/09/08/graph-data-structure-made-easy/"/>
    <updated>2022-09-08T18:05:45+08:00</updated>
    <id>http://toughcoder.net/blog/2022/09/08/graph-data-structure-made-easy</id>
    <content type="html"><![CDATA[<p>图（<a href="https://en.wikipedia.org/wiki/Graph_(abstract_data_type">Graph</a>)）是一个由节点和边组成的略复杂的二维数据结构，通常用于表示物体之间的关系。</p>

<p><a href="http://toughcoder.net/blog/2022/09/08/graph-data-structure-made-easy/"><img src="https://tse2-mm.cn.bing.net/th/id/OIP-C.-HB8jzKKYmCKNH9ui2LDpwHaDH?pid=ImgDet&rs=1" title="auto auto" ></a></p>

<!-- more -->


<h2>图的基础知识</h2>

<p>图由节点（Vertex）和边（Edge）组成，节点之间会有边来连接以表示某种关系。逻辑上的形状会是这样子的：
<img src="https://www.thecrazyprogrammer.com/wp-content/uploads/2017/08/Graph-Data-Structure.png" alt="" /></p>

<p>图的节点通常用于表示物体或者数值，变化较少，图的复杂性主要就体现在边上面，比如有些是有向的，有些是无向的，还有指向自己的。</p>

<h3>顶点</h3>

<p>顶点即Vertex，是图的基本单元，也称作节点。</p>

<h3>边</h3>

<p>边是Edge，两个顶点之间的连接称为边。分为无方向的，有方向的，和带权重的。</p>

<h3>权重</h3>

<p>权重，weight，是边的一个属性，一条边（也即两个顶点的连接）可以带有权重以表示某种成本。</p>

<h3>路径 Path</h3>

<p>在一个图中，路径是一系列节点和边，其中的节点都由边连接</p>

<h3>路径长度 Path length</h3>

<p>两个节点之间的边的数量称为路径长度</p>

<h3>简单路径 Simple Path</h3>

<p>一个路径所经过的节点没有重复的，就称为简单路径</p>

<h3>根 Root</h3>

<p>如果一个节点，由它出发的路径可以连通到所有节点，那么这个节点称作图根</p>

<h3>环 Cycle</h3>

<p>存在路径起始节点相同，就形成了环</p>

<h3>度 Degrees</h3>

<p>针对 节点而言，经过一个节点的所有边的数量之和，称之为节点的度</p>

<h3>入度 In degress</h3>

<p>对于有向图而言，以节点为终点的边的数量，称这节点的入度。</p>

<h3>出度 Out degrees</h3>

<p>对于有向图而言，从一个节点出发的边的数量，称为节点的出度。</p>

<h2>图的分类</h2>

<h3>空图 Null graph</h3>

<p>也就是只有顶点，没有边的图，样子大概是这样：</br>
<img src="https://tse1-mm.cn.bing.net/th/id/OIP-C.QifCHVxIx4myhHIXgxapLQAAAA?pid=ImgDet&amp;rs=1" alt="" /></p>

<h3>有限图 Finite graph</h3>

<p>顶点和边的数量是有限的，接触到的绝大多数图都是有限图。</p>

<h3>无限图 Infinite graph</h3>

<p>顶点和边的数量是无限的</br>
<img src="https://www.researchgate.net/profile/David-Evans-81/publication/225108378/figure/fig1/AS:393838129631243@1470909735860/The-infinite-graph-A-6.png" alt="" /></p>

<h3>完全图 Complete graph</h3>

<p>所有节点都是有路径连通的</br>
<img src="https://miro.medium.com/max/7954/1*q0tQ1svUWfN05kWsZ_Uo2g.jpeg" alt="" /></p>

<h3>权重图 Weighted graph</h3>

<p>每一条边都有一个数值表示的权重以代表两个节点之间的某种成本</p>

<p><img src="https://i1.wp.com/algorithms.tutorialhorizon.com/files/2018/03/Weighted-Graph.png?ssl=1" alt="" /></p>

<h3>无向图 Undirected graph</h3>

<p>连接节点之间的边是没有方向的，称之为无向图，它也是普通 的图</p>

<h3>有向图 Directed graph</h3>

<p>每条边都是有方向的，对于两个节点来说v[i]和v[j]来说，e[i,j]=(v[i],v[j])，它与e[j,i]=(v[j],v[i])是不一样的，有向图通常用于表示物体之间的依赖关系</p>

<p><img src="https://www.filepicker.io/api/file/1KMTR25HS2OzpZcpy0mJ" alt="" /></p>

<h3>连通图 Connected graph</h3>

<p>任意两节点都连通，称之为连通图也叫强连通图。</p>

<h3>非连通图 Disconnected graph</h3>

<p>有两个节点没有边连接，就称为非连通图。</p>

<h3>自环</h3>

<p>也就是某个节点有一条边是自己连接着自己，这个有向和无向图都可以有</p>

<h3>有环图 Cyclic graph</h3>

<p>起点和终点相同的路径，就形成了环。如果图中存在一个环，就是有环图。</p>

<p><img src="https://www.droidtechknow.com/programming/data-structure/an-introduction-to-graph-data-structure/images/graph-example.jpg" alt="" /></p>

<h3>无环图 Acyclic graph</h3>

<p>图中没有环就是无环图</p>

<h3>有向无环图 Directed Acyclic Graph</h3>

<p>有向图中不存在环就是DAG，这是比较重要的一种图，拓扑排序 可以验证DAG。</p>

<p><img src="https://wiki.swarma.org/images/c/cd/A_DAG_G.png" alt="" /></p>

<ul>
<li><a href="https://www.geeksforgeeks.org/introduction-to-graphs/">Introduction to Graphs</a></li>
</ul>


<h2>图的表示方法</h2>

<p>图的表示方法一般有邻接矩阵法和邻接表法。</p>

<h3>邻接矩阵 Adjacency Matrix</h3>

<p>对于有n个顶点的图来说要创建一个nxn的矩阵来表示此图，每一个格子[i,j]表示顶点v[i]到v[j]是连通的，有一条边存在，如果是有向图，则[j,i]表示v[j]到v[i]的边。另外，如果有权重，格子的值也可以表示边的权重。
<img src="https://educativesite.com/wp-content/uploads/2019/09/incidence-matrix.png" alt="" />
因为用矩阵一般比较浪费空间，比如顶点较多，但边较少时，就有点浪费空间。一般，矩阵通常就是一类单独的矩阵类搜索问题，直接应用图的搜索方法。</p>

<h3>邻接表 Adjacency List</h3>

<p>也就是列表的列表，先用一个链表代表所有的顶点，然后这个链表的元素是这个与这个顶点相连的所有顶点组成的列表。
<img src="https://cdn.programiz.com/sites/tutorial2program/files/adjacency-list.png" alt="" />
通常是用数组加链表的形式，主表用数组或者可变长数组，因为这些都是顶点，有可能会随时从某个顶点开始遍历，所以要用随机访问效率高一些的数组。与顶点相连的顶点列表一般用链表，因为它方便删除和插入，且遍历一般都是从顶点开始遍历。</p>

<p><img src="https://ts1.cn.mm.bing.net/th/id/R-C.4fe11a408a41fa5509274d85a4c09c1f?rik=YfKo9VJ94v7kxw&amp;riu=http%3a%2f%2fprogressivecoder.com%2fwp-content%2fuploads%2f2020%2f12%2fadjacency-list.png&amp;ehk=WAS3o3piPNsR6QCXSeDCVsjO%2fcuyO6KisgW5kv4uwYQ%3d&amp;risl=&amp;pid=ImgRaw&amp;r=0" alt="" /></p>

<p>但，也要看实际情况，有时候用哈希表也可以，键是每个顶点，值为顶点所连接的顶点列表，顶点列表可以用列表，也可以用Set等等。</p>

<p><img src="https://condor.depaul.edu/glancast/393class/docs/images/topsort7C++.gif" alt="" /></p>

<p>邻接表的实现方式比较自由，只要能从一个顶点出发，方便的找到与其相连的顶点，就可以。具体的，可以依据实际数据情况来灵活选择，比如说顶点如果是某一个范围内的整数，那么可能用数组就更方便一些，如果是字串或者其他的，可能用哈希表就更方便一些。</p>

<ul>
<li><a href="https://www.geeksforgeeks.org/graph-and-its-representations/">Graph and its representations</a></li>
</ul>


<h2>图与树的关系</h2>

<p>图是一个比较大的概念，只要是有节点与节点相连接就可以看作是图，数组（可视为下标与元素的连接），哈希表（键与值的连接），树，链表都可以看作是图。这些数据结构是一种特殊的图，强加了很多其他规则，就比如树，有一个根，有多个子节点。</p>

<p><img src="https://tse4-mm.cn.bing.net/th/id/OIP-C.sELEF-9VK_G1wwU413LUFgAAAA?pid=ImgDet&amp;rs=1" alt="" /></p>

<p>适用于图的很多算法也适用树，比如DFS和BFS对树也是适用的。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://www.geeksforgeeks.org/graph-data-structure-and-algorithms/">Graph Data Structure And Algorithms</a></li>
<li><a href="https://www.programiz.com/dsa/graph">Graph Data Stucture</a></li>
<li><a href="https://medium.com/data-structures-and-algorithms/graph-dd2b72c32f1f">Graph</a></li>
<li><a href="https://www.simplilearn.com/tutorials/data-structure-tutorial/graphs-in-data-structure">Your One-Stop Solution For Graphs In Data Structures</a></li>
<li><a href="https://www.runoob.com/data-structures/graph-theory.html">图论基础和表示</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/124259930">【朝夕的ACM笔记】图论-图论基础概念</a></li>
<li><a href="https://blog.csdn.net/Karen_Yu_/article/details/78776354">图论基础知识总结（一）</a></li>
<li><a href="https://cuigeg.github.io/2017/06/27/Graph-theory/">这一点点的图论基础</a></li>
<li><a href="https://labuladong.github.io/algo/2/22/50/">图论基础及遍历算法</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1922486">图论算法基础（修订版）</a></li>
<li><a href="https://www.cnblogs.com/BlairGrowing/p/13637688.html">图论&mdash;-基础知识 </a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[理解并运用并查集]]></title>
    <link href="http://toughcoder.net/blog/2022/09/08/disjoint-set-data-structure/"/>
    <updated>2022-09-08T17:27:05+08:00</updated>
    <id>http://toughcoder.net/blog/2022/09/08/disjoint-set-data-structure</id>
    <content type="html"><![CDATA[<p><a href="">并查集</a>（<a href="https://en.wikipedia.org/wiki/Disjoint-set_data_structure">Disjoint-set Data Structure</a>）是一种树形的结构，用于处理<strong>不相交</strong>的集合的高效的查询(find)和合并(union)问题。主要有两种操作一是查询(find)，也就是查询某个元素是否属于某个集合；二是合并(union)，也即把某个加入到某个集合中，这里的集合都是无交集的。通过路径压缩，并查集的查询和合并都可以达到常数级别O(1)。</p>

<p><a href="http://toughcoder.net/blog/2022/09/08/disjoint-set-data-structure/"><img src="https://images.xiaozhuanlan.com/photo/2019/891afdf6961c0eab3d3aa28a3f355e12.png" title="auto auto" ></a></p>

<!-- more -->


<h2>朋友关系问题</h2>

<p>先来看一个问题，比如有一个朋友关系的问题，两个人可以成为朋友关系，两两是朋友的一群人就形成了一个朋友圈，那么如何快速判断某两个是不是朋友关系呢？又如何让两个人成为朋友呢？</p>

<p>一个可行的方法是用图的搜索，两个人的朋友关系可以视为图的一条边，一个朋友圈就是相互连通的一个图，查看两人是否是朋友关系，可以从一个人出发，不断遍历相连的边，看能否到达另一个人，但这样效率有点低，每次查询 都会是线性时间，因为都要遍历一遍图才知道。</p>

<p>我们换个思路，可以为一个朋友图指定一个『圈长』，把关系改成其他人都直接跟圈长相连，或者每个人都能找到自己的圈长，这时判断两个人是不是在同一个朋友圈内，就看它们的圈长是不是同一个人就可以了，这就是并查集。</p>

<p><img src="https://red-green-rewrite.github.io/images/maze/disjoint-set-merge-3+7.png" alt="" /></p>

<h2>并查集的概念与基本实现</h2>

<p>并查集用以表示不相交的集合，逻辑上它是一种扁平的树形结构，每一个树代表一个集合，树的根就是这个集合的『圈长』，或者叫做一个集合的代表（representative）。并查集支持两种操作，查询（find） 和合并（union），查询是看两个元素是否属于同一个集合，合并则是把两个集合合并成为一个集合。</p>

<p>并查集的精髓就在于它的『圈长』机制，我们不管具体某个元素它的路径与关系，每个元素都只关心自己的圈长，它能找到自己的圈长就可以，因此查询是否属于同一个集合就看元素的圈长是否是同一个；合并，也非常简单，两个集合合并，就是把其中一个圈长的圈长设置为另一个圈长就可以了。</p>

<p><img src="https://tse1-mm.cn.bing.net/th/id/OIP-C.ywrpxwo6g4mKItHNwrzyVgHaFU?pid=ImgDet&amp;rs=1" alt="" /></p>

<h3>具体实现</h3>

<p>需要注意，虽然并查集逻辑上是一种树形结构，但一般情况都用线性的数组来实现并查集。比如用一个长度为n的数组来表示并查集，实际上我们只关心圈长，所以下标为i的元素就是i的圈长，一般命名为parent，也就是说parent[i]就是i的圈长，或者顺着它就能找到圈长（树的根），而parent[i]=i则是一个集合的『圈长』（representative）。</p>

<p>初始时，每个元素都是独立的，每个元素都独立成团，自己就是圈长，也即parent[i]=i。当有元素合并了，就把它们指向同一个圈长，比如parent[8]=6，parent[1]=6，parent[2]=4，parent[3]=4，parent[9]=4，parent[7]=4，这样就知道一共有三个集合，其中5独自成一个集合，1和8还有6是同一个集合6是他们的圈长，2，3，9，7，4是同一个集合4是圈长，画出图来就是这样的：</p>

<p><img src="https://tse1-mm.cn.bing.net/th/id/OIP-C.aqoDLciI4xvo7AnTDg3KRQHaFI?pid=ImgDet&amp;rs=1" alt="" /></p>

<h3>查询与合并</h3>

<p>查询某两个元素是否属于同一个集合，就是归结来查找每个人所属集合的圈长（representative），然后判断是否是同一个元素，因此问题归结为圈长的查找。比如2的父节点是4，而parent[4]=4，它就是圈长，所以2的圈长是4；再看7，它的父节点是9，而9的父节点是4，4是圈长，因此2和7属于同一个集合。</p>

<p>合并，也是类似的，而且更加简单，先查询要合并是否属于同一个集合，如果属于那自然就不用合并了。如果不是，那就找到各自的圈长，然后把某一个圈长的圈长设为另一个即可。比如想把5和8合并，5独自成圈，而8的圈长是6，那么把5的圈长设置为6，parent[5]=6，就合并完成了。</p>

<p><strong>注意</strong>：并查集的具体实现要看实际数据类型，比如集合元素个休是一个0~n范围内的整数，那么自然用数据非常方便，或者能够方便的转化为数组的下标时，用数组也行。否则也可以用哈希表。因为元素只要能递归的向上找到它的圈长（树的根）就行。</p>

<h2>路径压缩</h2>

<p>从前面的例子来看，查询过程其实是O(n)的，因为某个元素的父节点不一定就是圈长，为了找到圈长要递归的找下去，直到找到圈长为止，即只有找到了parent[i]=i，才算找到了圈长。这样每次查询都是线性时间，就会导致并查集整体效率变成O(n<sup>2</sup>)的。</p>

<p>因为并查集是处理集合问题，也就是说我们只关系某两个元素是否属于同一个集合，至于它跟其他元素之间的关系并不重要，我们只希望快速的找到它的圈长就可以了，那么我们在查找圈长的过程中，就可以把元素都直接指向其圈长，比如前面的7，它的父节点是9，不是圈长，我们查找后发现圈长是4，那么在查询过程中就可以把parent[7]=4，让7的父节点变成圈长。这样做的好处是，下次再查询时就能直接找到圈长了，变成了O(1)，不用再线性去查找了，这便是路径压缩。路径压缩的复杂度是常数级别的。准确说它的复杂度是O(alpha(n))，这个alpha(n)叫做<a href="https://en.wikipedia.org/wiki/Ackermann_function">反阿克曼函数</a>，当n无限增大时，这个函数的极限值是5，有兴趣的<a href="https://zhuanlan.zhihu.com/p/93644792">可以深入研究</a>。</p>

<p>最终树变成了扁平的，集合中的每一个元素都直接指向圈长：</p>

<p><img src="https://tse1-mm.cn.bing.net/th/id/OIP-C.v4afq3bNSl3SnFPKfVM3jwHaCO?pid=ImgDet&amp;rs=1" alt="" /></p>

<h2>按秩合并</h2>

<p>合并的时候是把一个集合的圈长的圈长设置为另一个集合的圈长，比如前面5和8要合并，5的圈长是5，8的圈长是6，这时其实有两种可行方法，可以把5的圈长设为6，即parent[5]=6，但也可以把6的圈长设置为5啊，即parent[6]=5，逻辑上都可行的，但应该用哪种呢？</p>

<p>逻辑上并无对错，要从效率上来比较哪个更好。前面提到了，常规查询是线性时间的，集合是树形的，树的高度越高，那么找到圈长的时间就越长，路径压缩后树才会变得扁平，因此，可以认为树的高度是越小越好的。由此来看，把5的圈长设置为6效率更高，6这个集合高度是2，如果把6的圈长设置为5，那么树的高度会变成3，需要一次路径压缩才可以；相反，如果把5的圈长设置为6，即parent[5]=6，那么树的高度还是2，不需要额外的路径压缩了。所以应该把高度小的集合并到高度大的集合中去。</p>

<p>那么，可以用另外一个数组rank来表示集合的秩，即rank[i]是i所属于集合的秩，也就是树的高度，当合并的时候就可以参考 rank来进行更高效的合并，总是把秩低的往秩高的上面的合并。只看圈长的秩就可以了，因为合并的时候是两个圈长在打架。</p>

<h2>实例</h2>

<p>还是来一个具体的实例，来演示并查集的思路和具体实现。把朋友圈关系进行抽象，用数字0~n来代表N个人，N=n+1，实现一个并查集，并进行查询和合并操作。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DisjointSet</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">parent</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">rank</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">DisjointSet</span><span class="o">(</span><span class="kt">int</span> <span class="n">size</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">size</span> <span class="o">=</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>        <span class="n">parent</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">size</span><span class="o">];</span>
</span><span class='line'>        <span class="n">rank</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">size</span><span class="o">];</span>
</span><span class='line'>        <span class="n">init</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">parent</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">union</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">xRoot</span> <span class="o">=</span> <span class="n">find</span><span class="o">(</span><span class="n">x</span><span class="o">);</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">yRoot</span> <span class="o">=</span> <span class="n">find</span><span class="o">(</span><span class="n">y</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">xRoot</span> <span class="o">==</span> <span class="n">yRoot</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// In the same set already, do nothing</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Union by rank, ruled by higher rank.</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">rank</span><span class="o">[</span><span class="n">xRoot</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">rank</span><span class="o">[</span><span class="n">yRoot</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">parent</span><span class="o">[</span><span class="n">xRoot</span><span class="o">]</span> <span class="o">=</span> <span class="n">yRoot</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">rank</span><span class="o">[</span><span class="n">xRoot</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">rank</span><span class="o">[</span><span class="n">yRoot</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">parent</span><span class="o">[</span><span class="n">yRoot</span><span class="o">]</span> <span class="o">=</span> <span class="n">xRoot</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">parent</span><span class="o">[</span><span class="n">xRoot</span><span class="o">]</span> <span class="o">=</span> <span class="n">yRoot</span><span class="o">;</span>
</span><span class='line'>            <span class="n">rank</span><span class="o">[</span><span class="n">yRoot</span><span class="o">]++;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">find</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">parent</span><span class="o">[</span><span class="n">x</span><span class="o">]</span> <span class="o">==</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">x</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Path compression</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">root</span> <span class="o">=</span> <span class="n">find</span><span class="o">(</span><span class="n">parent</span><span class="o">[</span><span class="n">x</span><span class="o">]);</span>
</span><span class='line'>        <span class="c1">// Make each node point to its root</span>
</span><span class='line'>        <span class="n">parent</span><span class="o">[</span><span class="n">x</span><span class="o">]</span> <span class="o">=</span> <span class="n">root</span><span class="o">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">root</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">DisjointSet</span> <span class="n">dset</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">DisjointSet</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>
</span><span class='line'>        <span class="n">dset</span><span class="o">.</span><span class="na">union</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
</span><span class='line'>        <span class="n">dset</span><span class="o">.</span><span class="na">union</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
</span><span class='line'>        <span class="n">dset</span><span class="o">.</span><span class="na">union</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;True: &quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">dset</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="mi">4</span><span class="o">)</span> <span class="o">==</span> <span class="n">dset</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="mi">0</span><span class="o">)));</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;False: &quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">dset</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="o">==</span> <span class="n">dset</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="mi">0</span><span class="o">)));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>并查集的应用</h2>

<p>可以发现并查集是一个<strong>很优雅</strong>的数据结构，它的实现很简单，效率却非常高。凡是涉及不相交集合的查找与合并问题，都可以使用并查集来解决问题。这里最为关键的是集合元素之间不能有交集，也就是说除以我们指定的圈长方式来划分集合以外，不能有其他的约束条件，否则并查集就失效了。比如说现实生活中的人，可以以工作所在的公司来划分集合，也可以以住的小区来划分，假如题目中两个约束条件都在，那就没有办法应用并查集了。</p>

<p>并查集相关的题目，一般求解的是集合的数量，或者找最大集合，或者找最小集合。这两种统计结果都可以由内部的数据来得到。比如集合的数量，就是遍历parent数组，找到所有的parent[i]=i；而集合的大小，则可以用用秩来追踪，只需要合并的时候把秩也加上，最大集合就是找秩的最大值，可以参考题695。</p>

<p>并查集<strong>最大的特点是集合中的元素直接跟根节点产生关系</strong>，因此如果能够根据元素与根节点的关系继而计算出两两元素之间的关系，那么也是可以应用并查集的，带权并查集就是此类问题，可参考 题399。</p>

<h2>典型题目</h2>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/longest-consecutive-sequence/">128. 最长连续序列</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/longest-consecutive-sequence/solution/by-alexhilton-ip97/">题解</a> </td>
<td style="text-align:left;"> 用哈希表代替数组 </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/number-of-islands/">200. 岛屿数量</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/number-of-islands/solution/200-dao-yu-shu-liang-by-alexhilton-cexx/">题解</a> </td>
<td style="text-align:left;"> 集合的数量即是岛屿数量 </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/max-area-of-island/">695. 岛屿的最大面积</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/max-area-of-island/solution/by-alexhilton-9eby/">题解</a> </td>
<td style="text-align:left;"> 秩的最大值即是最大的岛屿 </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/evaluate-division/">399. 除法求值</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/evaluate-division/solution/399-chu-fa-qiu-zhi-by-alexhilton-euqp/">题解</a> </td>
<td style="text-align:left;"> 带权并查集，节点映射 </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/possible-bipartition/"> 886. 可能的二分法</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/possible-bipartition/solution/886-ke-neng-de-er-fen-fa-by-alexhilton-5au7/">题解</a> </td>
<td style="text-align:left;"> 建图，基本并查集，二分图 </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/number-of-provinces/">547. 省份数量</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/number-of-provinces/solution/by-alexhilton-liy7/">题解</a> </td>
<td style="text-align:left;"> 标准并查集 </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/find-if-path-exists-in-graph/">1971. 寻找图中是否存在路径</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/find-if-path-exists-in-graph/solution/by-alexhilton-uucs/">题解</a> </td>
<td style="text-align:left;"> 标准并查集 </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h2>参考资料</h2>

<ul>
<li><a href="https://www.geeksforgeeks.org/disjoint-set-data-structures/">Disjoint Set Data Structures</a></li>
<li><a href="https://cp-algorithms.com/data_structures/disjoint_set_union.html">Disjoint Set Union</a></li>
<li><a href="https://www.javatpoint.com/disjoint-set-data-structure">Disjoint set data structure</a></li>
<li><a href="https://www.techiedelight.com/disjoint-set-data-structure-union-find-algorithm/">Disjoint–Set Data Structure (Union–Find Algorithm)</a></li>
<li><a href="https://www.hackerearth.com/practice/notes/disjoint-set-union-union-find/">Disjoint Set Union (Union Find)</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/93647900">算法学习笔记(1) : 并查集</a></li>
<li><a href="https://oi-wiki.org/ds/dsu/">并查集</a></li>
<li><a href="https://www.cnblogs.com/onlyblues/p/14668087.html">并查集算法 </a></li>
<li><a href="https://segmentfault.com/a/1190000022952886">图解并查集，附赠几道 Leetcode 练手题</a></li>
<li><a href="https://blog.csdn.net/weixin_44176696/article/details/106434770">简单并查集讲解（并+查）与代码实现</a></li>
<li><a href="https://zh-spike.github.io/studyRepo/Algorithm/Notes/AdvancedDataStructure/%E5%B9%B6%E6%9F%A5%E9%9B%86/">并查集</a></li>
<li><a href="https://leetcode.cn/circle/discuss/qmjuMW/">并查集从入门到出门</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[理解拓扑排序]]></title>
    <link href="http://toughcoder.net/blog/2022/09/08/topological-sorting/"/>
    <updated>2022-09-08T16:41:37+08:00</updated>
    <id>http://toughcoder.net/blog/2022/09/08/topological-sorting</id>
    <content type="html"><![CDATA[<p><a href="https://baike.baidu.com/item/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/5223807">拓扑排序</a>（<a href="https://en.wikipedia.org/wiki/Topological_sorting">Topological Sorting</a>）是指将一个有向无环图（Directed Acyclic Graph）的所有顶点排成一个线性序列，使得图中的起始节点总是排在终止节点的前面，这是有向图每一个边都有起始节点和终止节点。这个名字有点容易混淆，它跟排序算法没有任何关系，拓扑排序仅是针对有向无环图，找到所有节点的一个可达的线性顺序。</p>

<p><a href="http://toughcoder.net/blog/2022/09/08/topological-sorting/"><img src="https://iq.opengenus.org/content/images/2020/03/topo1-1.png" title="auto auto" ></a></p>

<!-- more -->


<p>关于图的基本概念可以<a href="http://toughcoder.net/blog/2022/09/08/graph-data-structure-made-easy/">参阅这个文章</a>。</p>

<h2>理解拓扑排序</h2>

<p>拓扑排序是针对有向无环图才有意义，它是有向无环图所有顶点的一个线性序列，每个顶点只出现一次，所有顶点都要出现，如果有一条边是从顶点v[i]到v[j]的，那么在拓扑排序中v[i]一定要排在v[j]的前面。</p>

<p><img src="https://wiki.swarma.org/images/c/cd/A_DAG_G.png" alt="" /></p>

<p>有向无环图不一定存在拓扑排序，比如图不是全连通的，有些节点之间没有路径连接。但存在拓扑排序的一定是有向无环图，因此拓扑排序可以用来验证一个图是否是有向无环图。</p>

<h2>拓扑排序的意义</h2>

<p>拓扑排序通常代表着顶点之间的依赖关系，比如软件库的依赖关系，比如课程之间的依赖关系，比如任务调度中的依赖关系等，拓扑排序能够保证任务正确执行，被依赖的肯定 能先执行完，两个顶点（代表的任务）要么是有依赖关系的，要么是没有关系的，在拓扑排序中肯定 不会存在依赖错乱。</p>

<h2>拓扑排序的实现方法</h2>

<p>借助BFS可以实现拓扑排序。</p>

<p><img src="https://www.omegaxyz.com/wp-content/uploads/2019/02/topological2.jpg" alt="" /></p>

<h3>实现思路</h3>

<ol>
<li>先计算顶点的入度，入度是针对 有向图而言的，以顶点为终点的边的数量称为顶点的入度</li>
<li>从入度为为0的顶点开始，把它放入队列</li>
<li>每次从队列中取出顶点，打印出来。然后把这个节点所能直接连通的节点入度减1，并取出入度为0的顶点放入队列</li>
<li>重复第3步，直到没有入度为0的顶点，这时应该所有顶点都遍历到了，如果还有剩余顶点，说明有环</li>
</ol>


<p><img src="https://www.omegaxyz.com/wp-content/uploads/2019/02/topological.png" alt="" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="n">Queue</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">queue</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>    <span class="n">IntStream</span><span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">numCourses</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">i</span> <span class="o">-&gt;</span> <span class="n">inDegrees</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="nl">queue:</span><span class="o">:</span><span class="n">offer</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="o">(!</span><span class="n">queue</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">from</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">v</span> <span class="o">:</span> <span class="n">graph</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">from</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">inDegrees</span><span class="o">[</span><span class="n">v</span><span class="o">]--;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">inDegrees</span><span class="o">[</span><span class="n">v</span><span class="o">]</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">queue</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">v</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>典型题目</h2>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/course-schedule/">207. 课程表</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/course-schedule/solution/by-alexhilton-r7hf/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/ur2n8P/">剑指 Offer II 115. 重建序列</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/ur2n8P/solution/by-alexhilton-qc9l/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h2>参考资料</h2>

<ul>
<li><a href="https://www.geeksforgeeks.org/topological-sorting/">Topological Sorting</a></li>
<li><a href="https://www.interviewcake.com/concept/java/topological-sort">Topological Sort</a></li>
<li><a href="https://www.hackerearth.com/practice/algorithms/graphs/topological-sort/tutorial/">Topological Sort</a></li>
<li><a href="https://www.scaler.com/topics/data-structures/topological-sort-algorithm/">Topological Sort Algorithm</a></li>
<li><a href="https://cp-algorithms.com/graph/topological-sort.html">Topological Sorting</a></li>
<li><a href="https://www.javatpoint.com/topological-sorting">Topological Sorting</a></li>
<li><a href="https://songlee24.github.io/2015/05/07/topological-sorting/">拓扑排序（Topological Sorting）</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/135094687">图文详解面试常考算法 —— 拓扑排序</a></li>
<li><a href="https://oi-wiki.org/graph/topo/">拓扑排序</a></li>
<li><a href="https://www.cnblogs.com/bigsai/p/11489260.html">拓扑排序详解与实现</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[记忆化搜索简介]]></title>
    <link href="http://toughcoder.net/blog/2022/09/08/memorization-search/"/>
    <updated>2022-09-08T16:03:31+08:00</updated>
    <id>http://toughcoder.net/blog/2022/09/08/memorization-search</id>
    <content type="html"><![CDATA[<p><a href="https://baike.baidu.com/item/%E8%AE%B0%E5%BF%86%E5%8C%96%E6%90%9C%E7%B4%A2/4275706">记忆化搜索</a>（Memorization Search），是指在做搜索过程中（比如DFS或者动态规划中）把重叠的子问题的解或者状态存储下来，以防止重复计算。最为常见的就是图搜索方法BFS和DFS时都要对已搜索过的节点进行标记以防止重复遍历，这就是一种记忆化搜索方法。再如动态规划的重复子问题，用数组进行缓存以防止重复计算，这也是一种记忆化搜索方法。</p>

<p><a href="http://toughcoder.net/blog/2022/09/08/memorization-search/"><img src="https://tse1-mm.cn.bing.net/th/id/OIP-C.3-yxYgu36IJsH2oONsdqFQHaEe?pid=ImgDet&rs=1" title="auto auto" ></a></p>

<!-- more -->


<h2>记忆化搜索</h2>

<p>记忆化搜索是自上而下的优化过程，通常用于优化有递推关系的递归算式，比如一些重叠子问题，像爬楼梯或者Fibonacci数列问题，它们的求解是f(i)=f(i-1)+f(i-2)，如果直接使用递归算式也能得到答案，但重复计算太多，因此可以递推过程中引入记忆化搜索，用额外的存储空间把已计算过的值缓存下来，然后递归过程中如果需要引用时，就直接引用不用再重复计算。</p>

<p>它与动态规划的区别就在于，记忆化搜索是自顶而下的，正面的调用递归关系，比较符合常规的思维模式。但动态规划一般是自下而上的逆向求解递推关系。比如像Fibonacci数列，递推关系是f(i)=f(i-1)+f(i-2)，动态规划是要把i从0到n这样逆着递推出来。</p>

<p>但关键的地方都在于先找到状态转移方程（也即递推关系）。</p>

<p>记忆化搜索要选用状态转移方程所定义的参数作为参数，然后进行向下递归调用。</p>

<p>应用记忆化搜索时要注意缓存结果状态时，需要对状态进行定义，一般要分为三种状态：1）是未计算的状态，这个很关键，因为未计算就要先去计算，否则就可以直接返回结果；2）是非法解，也即是找不到合理的解时的状态，这个是非法解也是解的一种，并不是未计算；3）是合法解。</p>

<p>还需要注意状态的个数，状态一般用数组或者哈希表来呈现，还要注意它与参数之间的对应关系。</p>

<h2>典型题目</h2>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/palindrome-partitioning/">131. 分割回文串</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/palindrome-partitioning/solution/by-alexhilton-mqgw/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/coin-change/">322. 零钱兑换</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/coin-change/solution/322-ling-qian-dui-huan-by-alexhilton-pqum/">题解</a> </td>
<td style="text-align:left;"> 典型的递推式记忆化搜索 </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h2>参考资料</h2>

<ul>
<li><a href="https://www.geeksforgeeks.org/memoization-1d-2d-and-3d/">Memoization (1D, 2D and 3D)</a></li>
<li><a href="https://oi-wiki.org/dp/memo/">记忆化搜索</a></li>
<li><a href="https://blog.csdn.net/hjf1201/article/details/78680814">记忆化搜索专题</a></li>
<li><a href="https://blog.csdn.net/u010700335/article/details/44136339">记忆化搜索（搜索+dp思想）</a></li>
<li><a href="https://www.cnblogs.com/jinkun113/p/12531918.html">[知识点] 4.1 记忆化搜索与动态规划</a></li>
<li><a href="https://www.zhihu.com/question/60730045">记忆化搜索与动态规划等价吗？</a></li>
<li><a href="http://yudaer.github.io/%E8%AE%B0%E5%BF%86%E5%8C%96%E6%90%9C%E7%B4%A2/">记忆化搜索</a></li>
<li><a href="https://www.luogu.com.cn/blog/interestingLSY/memdfs-and-dp">聊聊动态规划与记忆化搜索</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/438406757">记忆化搜索 —— 搜索 or 动态规划 ？</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
