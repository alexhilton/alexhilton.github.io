<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[稀有猿诉]]></title>
  <link href="http://toughcoder.net/atom.xml" rel="self"/>
  <link href="http://toughcoder.net/"/>
  <updated>2016-01-25T10:49:43+08:00</updated>
  <id>http://toughcoder.net/</id>
  <author>
    <name><![CDATA[Alex Hilton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[说说Android的MVP模式]]></title>
    <link href="http://toughcoder.net/blog/2015/11/29/understanding-android-mvp-pattern/"/>
    <updated>2015-11-29T15:53:46+08:00</updated>
    <id>http://toughcoder.net/blog/2015/11/29/understanding-android-mvp-pattern</id>
    <content type="html"><![CDATA[<p>安卓应用开发是一个看似容易，实则很难的一门苦活儿。上手容易，看几天Java，看看四大组件咋用，就能整出个不太难看的页面来。但是想要做好，却是很难。系统框架和系统组件封装了很多东西，开发者弄几个Activity，用LinearLayout把布局组合在一起，添加点事件监听，一个应用就成型了。红海竞争，不管多么复杂的UX和业务逻辑都是一个月快速上线，二周一个迭代，领导和产品早上改需求，晚上改设计，再加上产品经理和设计师都按照iOS来设计，这一系列原因导致很多安卓应用不但体验差，不稳定，性能低，而且内部代码相当之混乱，即使BAT也是如此。</p>

<p><a href="http://toughcoder.net/blog/2015/11/29/understanding-android-mvp-pattern/"><img src="http://varianceinfotech.com/images/Android-system-architecture.jpg"></a></p>

<!-- more -->


<p>反观国外市场（谷歌应用市场）上面的大部分应用都还是比较好的，表现在符合安卓设计规范，性能和稳定上表现不俗，体验上更符合安卓系统，而且会发现他们的代码也是很有设计思想的。GitHub上面的很多安卓开源项目也都是源自国外的优秀开发者以及他们的项目。</p>

<p>安卓应用也是软件，代码结构合理，层次清晰不但容易维护而且还容易做自动化测试和单元测试，这是开发者的美好愿望，也是提升效率的必然之路。</p>

<p>安卓由于系统架构特性，UI组件Activity中融合了View的处理，事件处理和逻辑处理，随着业务的越来越复杂，导致Activity也越来越雍肿，几千行的Activity随处可见，Fragment也不能解决问题，千行以上的Fragment也不在少数，这个时候就完全不要谈什么可维护性，可测试性了。能完成需求就算高手了。</p>

<p>MVP便应运而生，就来解决这些问题的。</p>

<h2>什么是<a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter">MVP</a>模式</h2>

<p>MVP是针对有GUI存在的应用程序，比如像安卓，像水果以及PC的客户端软件中用以划分组织代码的一种设计模式，是由MVC模式升级演进出来的，目的在于，对于GUI层来说，把UI展示与逻辑分开。</p>

<ul>
<li>Model &ndash; 为UI层提供的数据，或者保存UI层传下来的数据</li>
<li>View &ndash; 单纯的展示数据，响应用户操作并都转发给Presenter来做具体的处理</li>
<li>Presenter &ndash; 逻辑控制层，从Model处取数据，运算和转化，最后用View来展示；并处理View传过来的用户事件，并做处理</li>
</ul>


<p><img src="https://img.alicdn.com/imgextra/i4/715978679/TB2ZW_jiXXXXXciXpXXXXXXXXXX_!!715978679.png"></p>

<p>需要注意的是MVP仅用于应用中的GUI部分，它并不是整个应用的架构方式。一个应用的主要的架构应该包括基础组件，业务逻辑层和GUI展示层，而MVP仅是用于展示层的设计模式。另外，它是一个方法论的东西，没有固定的实现方式，只要能体现出它的方法就可以算是MVP。</p>

<p>虽然是方法论，但是也有一些指导性的原则来约束实现：</p>

<ul>
<li>Model与View不能直接通信，只能通过Presenter</li>
<li>Presenter类似于中间人的角色进行协调和调度</li>
<li>Model和View是接口，Presenter持有的是一个Model接口和一个View接口</li>
<li>Model和View都应该是被动的，一切都由Presenter来主导</li>
<li>Model应该把与业务逻辑层的交互封装掉，换句话说Presenter和View不应该知道业务逻辑层</li>
<li>View的逻辑应该尽可能的简单，不应该有状态。当事件发生时，调用Presenter来处理，并且不传参数，Presenter处理时再调用View的方法来获取。</li>
</ul>


<p>从这里可以看的出来，其实，MVP的目的就是把GUI的逻辑都集中在Presenter层，又把View层和Model与其用接口分离，让View尽可能的简单，这样可以加强移植性。因为View层是肯定不能移植的，不同的平台GUI的窗口部件肯定不一样，Model也是不太好移植的，因为每个平台的IO也都是不一样的。但是，MVP中的P肯定是可以移植的，因为它里面只有逻辑，且View和Model都是接口，所以很容易移植。同时，因为View和Model都是接口，这个Presenter也非常好测试，只要实现一个View的接口和Model的接口，就可以单独的测试Presenter了。</p>

<p>严格来讲，View只是被动的显示，提供方法由Presenter来调用，数据等都是由Presenter来提供，内部不能任何的逻辑与状态，逻辑和状态都应该是在Presenter中。UI事件发生时，调用Presenter的方法来处理，不能传参数，也不能有返回值，在Presenter中处理后再调用View来更新数据和状态。</p>

<h2>MVP与<a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">MVC</a>的区别</h2>

<p>MVC之中逻辑是放在了Model里，Controller负责桥接View和Model，View发生变化时通知Controller，Controller再通知Model，Model进行逻辑处理，更新数据，然后通知View来刷新。可以看到MVC中三者之间都有联系，如果处理不好，或者当View比较复杂时，三者之间都会双向关联。MVC在命令行应用，以及WEB中有大量的应用，但对于客户端（PC和移动端）的GUI应用，MVC往往解决不了复杂性，移植性上以及可测试性上也没有优势。</p>

<p><img src="https://img.alicdn.com/imgextra/i2/715978679/TB2fYnMiXXXXXa3XXXXXXXXXXXX_!!715978679.png"></p>

<p>MVP的改进在于：</p>

<ul>
<li>逻辑放在Presenter中</li>
<li>View和Model抽象成为接口</li>
</ul>


<p>这样就带了二个好处：</p>

<ul>
<li>代码更加容易移植</li>
<li>代码更加容易加入Unit Testing</li>
</ul>


<h2>如何在安卓中实践MVP</h2>

<p>MVP是一个方法论的东西，也就是没有任何固定的具体的实现形式，只要能够把View跟Model解除联系，把逻辑都放在Presenter中，那么就能算得上是MVP，一些具体的实践的指导性原则：</p>

<ul>
<li>View是一个接口，负责被动的把处理好的数据显示出来</li>
<li>Model也是一个接口，负责获取数据和存储数据</li>
<li>View调用Presenter处理用户事件也是一个接口，称为事件Delegate</li>
<li>Presenter持有的是View的接口和Model接口</li>
</ul>


<p> 安卓的Activity是一个比较奇葩的角色，在MVP中，既可以用作V，因为一个应用的根布局总是由Activity来创建的。当然也可以当作P，因为Activity是一个应用的入口，也是出口，再加上一些关键的系统事件也都是通过Activity的方法来通知的（比如configChange, saveInstance）。其实，都可以。因为MVP是方法论，并没有固定的形式，只要是把数据处理的逻辑都封装在Presenter里，让其去控制View和Model，让Activity来承担View还是Presenter，其实都可以。</p>

<h2>MVP不是银弹，仅是展示层的一种范式而已</h2>

<p>最重要的一点就是要明白，MVP不会拯救你的应用，不要以为使用了MVP就能让代码更容易维护，更少的Bug，添加新功能会更容易。MVP仅是GUI层的一种编程范式而已，且因为它是方法论的东西，对实现方式并没有固定的形式，所以会被滥用，如果没有深刻理解MVP的思想，更加会导致灾难性的结果。</p>

<p>软件，移动应用也不例外，如果功能简单，业务简单，那么代码怎么写其实也都无大碍，但当功能越来越多，业务越来越复杂的时候，就必须要采取必要的方法来应对复杂度和软件的可开发性，可维护性。比如，说的夸张一点，一个helloworld式的应用，你怎么写都可以。但当功能复杂到一个Activity几千行代码的时候，你再怎么MVP，MVC或者MVVM都不能解决问题，再怎么把Activity当成P或者当成V都没有用。</p>

<p>要知道MVP仅是解决GUI应用程序中展示层的问题，并且它带来的最大的好处是方便测试和移植，因为逻辑都在P里面，P持有的又仅是View和Model的接口，所以P是可测试的，Mock一个View的实现，和Mock一个Model的实现，就可以完全脱离平台和框架的限制来自由的测试P。同样，移到一个新的框架和平台后，只需要实现View和Model就可以了，P是不需要改变的。</p>

<h2>分层和模块化才是解决应用越来越复杂之道</h2>

<h3>分层</h3>

<p>所谓分层，也就是应用程序的架构方法，把应用程序分成好多层，可以参考Bob大叔的<a href="http://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html">The Clean Architecture</a>。</p>

<p><img src="https://img.alicdn.com/imgextra/i1/715978679/TB2usPAiXXXXXXsXpXXXXXXXXXX_!!715978679.png"></p>

<p>至少应该分层三层，最底层是平台适配层，把用到的平台的组件，控件，工具，比如UI组件，数据库等等，进行封装；中间层就是业务层，就是你应用的核心的业务逻辑，或者说你的应用解决了用户什么样子的问题，这一层是不会随着平台和UI的改变而改变的。比如新闻阅读类，那么从服务器拉取数据，解析数据，缓存数据，为上层提供数据这些事情都属于业务层；最上面就是展示层或者叫做UI层。展示层是可以调用业务层的方法和数据。这样分层，可以让展示层只是负责与用户交互，展示业务数据，展示层会变得简单很多，同时业务层因为不涉及具体的平台和UI的细节，就非常容易移植，当移植到新平台或者要做UI改版也是非常容易做的。</p>

<h3>模块化</h3>

<p>另外一个就是模块化，其实这是软件开发的一个非常基本的方法，也是非常有用的一个方法。模块划分的方法非常简单就是按照功能来划分。让模块处理好自己的事情，暴露统一的接口给外部，定义好输入与输出。输入就以参数和方法形式暴露，输出最好以Delegate方式，这样能把耦合降到最低。再由一个统一的顶层类来管理各个模块，顶层直接调用各模块，各模块通过Delegate方式来回调管理者。</p>

<p>对于业务层，模块化相对比较容易，因为这里并不涉及UI和平台的特性，业务层都应该是独立的，可移植的，全都是自己写的类。</p>

<p>但对于展示层，通常没有那么的容易，因为有平台的限制。比如说安卓，根布局必须由Activity来创建。首先，模块的划分也要以功能为界限。然后，就是Activity的布局，要把布局按功能区域来管理，然后把每个功能模块的top container传给模块，具体内部如何布局，如何填充数据，就由模块自己负责。Activity就起管理各个模块的作用。再有，模块间的通信，可以都通过Activity来，比如模块1有模块2的入口按扭，但是模块1与模块2之间没有交集，这个时候的处理方式就是模块1Delegate给Activity，然后Activity再调用模块2来显示和隐藏。如果模块多到Activity的管理工作也变得庞大复杂时就要拆出子Controller来管理模块，也就是三层，甚至还可以四层。模块的原则就是做好封装，让外层管理变得简单，这样外层管理的复杂度就会降下来，就好比公司人员的组织架构一样。</p>

<p><img src="https://img.alicdn.com/imgextra/i3/715978679/TB2fZ2siXXXXXadXpXXXXXXXXXX_!!715978679.png"></p>

<p><img src="https://img.alicdn.com/imgextra/i3/715978679/TB2KuvqiXXXXXaPXpXXXXXXXXXX_!!715978679.png"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;LinearLayout&gt;</span>
</span><span class='line'>  <span class="nt">&lt;LinearLayout</span> <span class="na">id=</span><span class="s">&quot;module1&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;RelativeLayout</span> <span class="na">id=</span><span class="s">&quot;module2&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ListView</span> <span class="na">id=</span><span class="s">&quot;module3&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/LinearLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DemoActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="kd">implements</span> <span class="n">Module1Delegate</span><span class="o">,</span> <span class="n">Module2Delegate</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">bundle</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">demo_activity</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Module1</span> <span class="n">module1</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Module1</span><span class="o">(</span><span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">module1</span><span class="o">),</span> <span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Module2</span> <span class="n">module2</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Module2</span><span class="o">(</span><span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">module2</span><span class="o">),</span> <span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Module3</span> <span class="n">module3</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Module3</span><span class="o">(</span><span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">module3</span><span class="o">));</span>
</span><span class='line'>    <span class="n">module1</span><span class="o">.</span><span class="na">render</span><span class="o">();</span>
</span><span class='line'>    <span class="n">module2</span><span class="o">.</span><span class="na">render</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onModule1</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="s">&quot;Demo&quot;</span><span class="o">,</span> <span class="s">&quot;module1 say hello to the world.&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onModule2</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">show</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">show</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">module3</span><span class="o">.</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">module3</span><span class="o">.</span><span class="na">hide</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实，还可以做的更彻底一些，那就是Activity中的布局都由ViewStub来组装，然后由各个子模块来决定如何布局。</p>

<p>对于多层全屏层叠的应用来说，要简单一些，对于每一层都可以由Activity或者Fragment来实现，如果业务层已经抽离出来，就都可以直接调用业务层来获取数据，因此也不会有传递数据的麻烦。</p>

<p>做好了分层和模块化，我相信，能解决绝大多数应用遇到的问题。至于模块内部用什么MVP，MVC，MVVM，其实真的无大害，因为模块内部的实现方式不影响其他模块，也不影响外部管理和level更高的类。</p>

<h2>把基本的原则做到就够了</h2>

<p>编程是一项社会活动，所以人和人与人之间的关系才是核心，优秀的人，你发现他也没有用什么MVP，什么MVC，什么高大上的设计模式和算法，但是他的代码是很清晰，很容易看懂。有些即使号称用什么高大上的，最先进的设计模式，但是代码仍是一坨坨的，可能连他自己都看不懂。</p>

<p>把基本的抽象和封装真正做到位了，就够了，代码水平可以的话，再能做到命名见名知义，小而活的方法，小而活的类，一个方法只做一件事，一个类只做一件事情。做到这些，也就够了。</p>

<p>至于什么高大上的MVP，什么XP，什么TDD，什么结对，其实都是浮云，如果你的水平比较高，代码sense较高，那么用不用这些方法差别不大。</p>

<p>MVP的核心目的是方便UT，因为把展示层的逻辑都集中在P，而P又不依赖于具体的View和Model，所以可以随便Mock一个View和一个Model来测试P，甚至P可以独立于平台的限制来单独的测试。所以，如果你不搞UT，以不以MVP方式来实现，其实没啥影响，甚至网上不少人还专门为MVP而弄出几个抽象的类，把Activity啥的封装了一下，号称<a href="http://blog.csdn.net/qibin0506/article/details/49992897">MVP框架</a>，毫无实用价值。软件方法，切忌生搬硬套，一定要先理解透彻方法，再理解透彻你的问题和环境限制，然后灵活运动，什么叫理解透彻呢？就是你能给别人讲明白时。这说起来还是太抽象，只能在实际运用中慢慢领悟。</p>

<p>再有就是<a href="https://en.wikipedia.org/wiki/Unit_testing">Unit Testing</a>这玩意儿，实际的意义也没有那么大，要知道写测试代码通常要比生产代码花更多的精力，前提还是你的代码写的可测，可测性比可读性还要难一点，说白了这对开发者水平的要求相当的高，不是看了一遍书，学习一下JUnit就能搞得好的。还有就是如果你的需求经常变动，移动互联时代这是家常便饭，那么做UT会让开发量double甚至tripple，因为之前写的UT全没有用。</p>

<p>还想说一点就是，软件开发方法这东西必须是由上向下推动，也就是由老板带头来推动，否则技术小组长或者开发者自己是很难推得动的。特别是像UT，Code Review或者结对之类的会“降低开发效率”的方法。这些方法短期内不会提升效率和质量，只会降低需求的产出率，平均开发水平比较高的团队也至少要几个月后才能真正的适应这些方法，然后才有可能提高效率和提高质量。如果不是老板主动推动，谁能受得了呢？KPI咋整？</p>

<h2>结论</h2>

<p>MVP或者MVVM带来最大的好处是：</p>

<ul>
<li>方便移植</li>
<li>方便UT</li>
</ul>


<p>另外，要注意MVP仅是展示层的方法论。应用整体还是要进行分层和模块化。如果分层和模块化进行的彻底，并且在移植和UT没有强烈的需求，其实MVP与不P真的不重要。</p>

<h2>参考资源</h2>

<ul>
<li><a href="http://rocko.xyz/2015/02/06/Android%E4%B8%AD%E7%9A%84MVP/">Android中的MVP</a></li>
<li><a href="http://blog.csdn.net/vector_yi/article/details/24719873">MVP模式在Android开发中的应用</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android技巧：学习使用GridLayout]]></title>
    <link href="http://toughcoder.net/blog/2015/11/25/android-tricks-introduct-to-gridlayout/"/>
    <updated>2015-11-25T19:12:19+08:00</updated>
    <id>http://toughcoder.net/blog/2015/11/25/android-tricks-introduct-to-gridlayout</id>
    <content type="html"><![CDATA[<p><a href="http://developer.android.com/intl/zh-cn/reference/android/widget/GridLayout.html">GridLayout</a>是一个非常强大的网格类布局，它不但能像<a href="http://developer.android.com/intl/zh-cn/reference/android/widget/TableLayout.html">TableLayout</a>那样，实现网格类布局，但它更为强大的地方在于每个Cell的大小可以横向或者纵向拉伸，每个Cell的对齐方式也有很多种，而且不像TableLayout，需要一个<a href="http://developer.android.com/intl/zh-cn/reference/android/widget/TableRow.html">TableRow</a>，GridLayout可以通过指定Cell的坐标位置就能实现Cell的拉伸，从而实现，大小不一致的风格卡片式布局。</p>

<p><a href="http://toughcoder.net/blog/2015/11/25/android-tricks-introduct-to-gridlayout/"><img src="http://www.uxdesign.today/wp-content/uploads/2015/05/axure-android-widget-library.png" width="320" height="240"></a></p>

<!-- more -->


<h2>基本概念</h2>

<p>GridLayout把页面分成m行和n列，使用m+1条线和n+1条线，把页面共分成n*m个Cell。指定位置时行坐标是从0到m，列坐标是从0到n。每一个子View占一个或多个Cell。比如(0, 0)到(0, 1)就是占第一个Cell的区域。(0, 0), (0, 2)就是占第一行的2个Cell的区域(横向拉伸).</p>

<h2>使用方法</h2>

<p>主要介绍一下如何添加Cell，以及设置Cell的位置和拉伸。其他的跟普通的ViewGroup没什么区别的，也没啥好说的。</p>

<h3>GridLayout的基本设置</h3>

<p>首先需要给GridLayout设置行数和列数:</p>

<ul>
<li>android:columnCount 整数，最多的列数</li>
<li>android:rowCount 整数，最多的行数</li>
</ul>


<p>在添加Cell就需要注意，不能超过设置的最大行数和列数，否则在添加Cell时会有异常。</p>

<h3>元素Cell的位置控制</h3>

<p>添加Cell时需要指定其位置</p>

<ul>
<li>android:layout_column 整数n，在哪一列开始显示n=[0, 最大列-1]</li>
<li>android:layout_columnSpan 整数k，指定元素横跨几列，需要注意保证n+k &lt;= 最大列数</li>
<li>android:layout_row 指定从哪一行开始显示，规则同列数</li>
<li>android:layout_rowSpan 纵向跨几行，规则同列</li>
</ul>


<h3>行高和列宽的确定</h3>

<p>每一行的高度是由这一行中Cell的最大高度决定的，以及每一列的宽度是由每一列中最大的宽度决定的，小于行高和列宽的元素可以设置其对齐方式和填充方式。</p>

<h3>填充方式</h3>

<p>通过Cell的android:layout_gravity参数来指定，Cell的填充方式，注意仅当Cell元素本身的尺寸小于它所占格子的大小时才有效，比如元素本身尺寸小于行高和列宽，或者当它占多行，或者占多列时：</p>

<ul>
<li>center &ndash; 不改变元素的大小，仅居中</li>
<li>center_horizontal &ndash; 不改变大小，水平居中</li>
<li>center_vertical &ndash; 不改变大小，垂直居中</li>
<li>top &ndash; 不改变大小，置于顶部</li>
<li>left &ndash; 不改变大小，置于左边</li>
<li>bottom  &ndash; 不改变大小，置于底部</li>
<li>right  &ndash; 不改变大小，置于右边</li>
<li>start  &ndash; 不改变大小，置于开头（这个是与RTL从右向左读的文字有关的，如果使用start/end，那么当LTR文字时start=left,end=right，当RTL时start=right,end=left，也就是说系统会自动处理了)</li>
<li>end  &ndash; 不改变大小，置于结尾</li>
<li>fill &ndash; 拉伸元素控件，填满其应该所占的格子</li>
<li>fill_vertical &ndash; 仅垂直方向上拉伸填充</li>
<li>fill_horizontal &ndash; 仅水平方向上拉伸填充</li>
<li>clip_vertical &ndash; 垂直方向上裁剪元素，仅当元素大小超过格子的空间时</li>
<li>clip_horizontal &ndash; 水平方向上裁剪元素，仅当元素大小超过格子的空间时</li>
</ul>


<p>需要注意的是这些值是可以组合的，比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>android:layout_gravity=&quot;center_vertical|clip_horizontal&quot;
</span></code></pre></td></tr></table></div></figure>


<h2>Cell之间的间距如何控制</h2>

<h3>默认间距</h3>

<p>可以使用默认的间距android:useDefaultMargins=&ldquo;true&#8221;或者GridLayout#setUseDefaultMargins()。这个属性默认值是&#8221;false&#8221;。</p>

<h3>另外一种方式就是跟普通布局管理器一样，给每个Cell设置其margins</h3>

<p>通常如果不满意系统的默认间距，就可以设置useDefaultMargins=&ldquo;false&#8221;，然后通过给Cell设置margin来控制间距。</p>

<h2>居中方法</h2>

<ul>
<li><p>仅有一个Cell或者仅有一行，或者仅有一列时</p>

<p>当仅有一个子View时或者仅有一行或者一列的时候，可以把每个Cell设置其android:layout_gravitiy=&ldquo;center&rdquo;(相应代码为<a href="http://developer.android.com/intl/zh-cn/reference/android/view/Gravity.html">LayoutParams#Gravity</a>为<a href="http://developer.android.com/intl/zh-cn/reference/android/view/Gravity.html#CENTER">CENTER</a>)，就可以让其在GridLayout中居中。</p></li>
</ul>


<p>让一行居中：</p>

<p><img src="https://img.alicdn.com/imgextra/i3/715978679/TB2e.2djVXXXXcNXXXXXXXXXXXX_!!715978679.png"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;GridLayout</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;200dip&quot;</span>
</span><span class='line'>    <span class="na">android:useDefaultMargins=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>    <span class="na">android:background=</span><span class="s">&quot;@android:color/white&quot;</span>
</span><span class='line'>    <span class="na">android:rowCount=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>    <span class="na">android:columnCount=</span><span class="s">&quot;2&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Button</span> <span class="na">android:layout_column=</span><span class="s">&quot;0&quot;</span>
</span><span class='line'>        <span class="na">android:layout_row=</span><span class="s">&quot;0&quot;</span>
</span><span class='line'>        <span class="na">android:text=</span><span class="s">&quot;Left Button&quot;</span>
</span><span class='line'>        <span class="na">android:layout_gravity=</span><span class="s">&quot;fill_horizontal|center_vertical&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Button</span> <span class="na">android:layout_column=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>        <span class="na">android:layout_row=</span><span class="s">&quot;0&quot;</span>
</span><span class='line'>        <span class="na">android:text=</span><span class="s">&quot;Right Button&quot;</span>
</span><span class='line'>        <span class="na">android:layout_gravity=</span><span class="s">&quot;fill_horizontal|center_vertical&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/GridLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>让一个元素居中：
</code></pre>

<p>   <img src="https://img.alicdn.com/imgextra/i1/715978679/TB25SeTjVXXXXXbXFXXXXXXXXXX_!!715978679.png"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;GridLayout</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;200dip&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;200dip&quot;</span>
</span><span class='line'>    <span class="na">android:useDefaultMargins=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>    <span class="na">android:background=</span><span class="s">&quot;@android:color/white&quot;</span>
</span><span class='line'>    <span class="na">android:rowCount=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>    <span class="na">android:columnCount=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Button</span> <span class="na">android:layout_column=</span><span class="s">&quot;0&quot;</span>
</span><span class='line'>        <span class="na">android:layout_row=</span><span class="s">&quot;0&quot;</span>
</span><span class='line'>        <span class="na">android:text=</span><span class="s">&quot;Left Button&quot;</span>
</span><span class='line'>        <span class="na">android:layout_gravity=</span><span class="s">&quot;center&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/GridLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>其他情况</p>

<p> 其他情况，设置子View的Gravity就不再起作用了，这时最好的办法就是让GridLayout的高度是WRAP_CONTENT，然后让GridLayout在其父布局中居中。</p></li>
</ul>


<p><img src="https://img.alicdn.com/imgextra/i1/715978679/TB2EivsjVXXXXXGXXXXXXXXXXXX_!!715978679.png"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'> <span class="nt">&lt;LinearLayout</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:orientation=</span><span class="s">&quot;vertical&quot;</span>
</span><span class='line'>    <span class="na">android:gravity=</span><span class="s">&quot;center&quot;</span>
</span><span class='line'>    <span class="na">android:background=</span><span class="s">&quot;@android:color/darker_gray&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;200dip&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;GridLayout</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:layout_gravity=</span><span class="s">&quot;center&quot;</span>
</span><span class='line'>        <span class="na">android:useDefaultMargins=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>        <span class="na">android:background=</span><span class="s">&quot;@android:color/white&quot;</span>
</span><span class='line'>        <span class="na">android:rowCount=</span><span class="s">&quot;2&quot;</span>
</span><span class='line'>        <span class="na">android:columnCount=</span><span class="s">&quot;2&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Button</span> <span class="na">android:layout_column=</span><span class="s">&quot;0&quot;</span>
</span><span class='line'>            <span class="na">android:layout_row=</span><span class="s">&quot;0&quot;</span>
</span><span class='line'>            <span class="na">android:text=</span><span class="s">&quot;Left Button&quot;</span>
</span><span class='line'>            <span class="na">android:layout_gravity=</span><span class="s">&quot;fill_horizontal|center_vertical&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Button</span> <span class="na">android:layout_column=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>            <span class="na">android:layout_row=</span><span class="s">&quot;0&quot;</span>
</span><span class='line'>            <span class="na">android:text=</span><span class="s">&quot;Right Button&quot;</span>
</span><span class='line'>            <span class="na">android:layout_gravity=</span><span class="s">&quot;fill_horizontal|center_vertical&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Button</span> <span class="na">android:layout_column=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>            <span class="na">android:layout_row=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>            <span class="na">android:text=</span><span class="s">&quot;Right Button 2&quot;</span>
</span><span class='line'>            <span class="na">android:layout_gravity=</span><span class="s">&quot;fill_horizontal|center_vertical&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/GridLayout&gt;</span>
</span><span class='line'><span class="nt">&lt;/LinearLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>适用场景</h2>

<p>GridLayout虽然强大，可以当作LinearLayout使用，也可以当作RelativeLayout使用，甚至也能当FrameLayout使用。但是，我们不可以滥用，对于任意布局都一样，不能是它能实现需求就使用它，而是要根据实际的需求，选择最简单，最方便的，同时也要考虑性能。</p>

<p>通常对于类似于网格的布局就可以考虑用GridLayout来实现，或者用LinearLayout横七竖八的套了好几层时也要考虑使用GridLayout。</p>

<h2>GridLayout vs GridView or RecyclerView</h2>

<p>当要实现网格布局，或者非均匀风格布局时，可能首先想到的就是GridView，但是这也要看实际的情况而定。GridView，ListView以及RecyclerView是用于无限长度列表或者网格的场景，它们最大的特点是无限长度，因此这几个组件的重点在于如何复用Cell以提升性能，以及处理手势事件（Fling）等。所以，每当遇到列表或者网格的时候，先想一下这个长度大概会是多少，如果是在百个以内，且不会随时增长，这时就可以考虑使用静态（非动态复用）的组件比如LinearLayout或者GridLayout来实现。</p>

<h2>实例</h2>

<p>说的太多都是废话，来一个实例感觉一下子是最直接的：</p>

<p><img src="https://img.alicdn.com/imgextra/i4/715978679/TB2Or2jjVXXXXb9XXXXXXXXXXXX_!!715978679.png"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;GridLayout</span>
</span><span class='line'>            <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>            <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>            <span class="na">android:layout_centerInParent=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>            <span class="na">android:background=</span><span class="s">&quot;@android:color/white&quot;</span>
</span><span class='line'>            <span class="na">android:alignmentMode=</span><span class="s">&quot;alignMargins&quot;</span>
</span><span class='line'>            <span class="na">android:useDefaultMargins=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>            <span class="na">android:columnCount=</span><span class="s">&quot;4&quot;</span>
</span><span class='line'>            <span class="na">android:rowCount=</span><span class="s">&quot;5&quot;</span>
</span><span class='line'>            <span class="na">android:visibility=</span><span class="s">&quot;visible&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Button</span> <span class="na">android:layout_column=</span><span class="s">&quot;0&quot;</span>
</span><span class='line'>                <span class="na">android:layout_row=</span><span class="s">&quot;0&quot;</span>
</span><span class='line'>                <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>                <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>                <span class="na">android:padding=</span><span class="s">&quot;10dip&quot;</span>
</span><span class='line'>                <span class="na">android:text=</span><span class="s">&quot;1&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Button</span> <span class="na">android:layout_column=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>                <span class="na">android:layout_row=</span><span class="s">&quot;0&quot;</span>
</span><span class='line'>                <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>                <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>                <span class="na">android:padding=</span><span class="s">&quot;10dip&quot;</span>
</span><span class='line'>                <span class="na">android:text=</span><span class="s">&quot;2&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Button</span> <span class="na">android:layout_column=</span><span class="s">&quot;2&quot;</span>
</span><span class='line'>                <span class="na">android:layout_row=</span><span class="s">&quot;0&quot;</span>
</span><span class='line'>                <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>                <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>                <span class="na">android:padding=</span><span class="s">&quot;10dip&quot;</span>
</span><span class='line'>                <span class="na">android:text=</span><span class="s">&quot;3&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Button</span> <span class="na">android:layout_column=</span><span class="s">&quot;0&quot;</span>
</span><span class='line'>                <span class="na">android:layout_row=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>                <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>                <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>                <span class="na">android:padding=</span><span class="s">&quot;10dip&quot;</span>
</span><span class='line'>                <span class="na">android:text=</span><span class="s">&quot;4&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Button</span> <span class="na">android:layout_column=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>                <span class="na">android:layout_row=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>                <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>                <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>                <span class="na">android:padding=</span><span class="s">&quot;10dip&quot;</span>
</span><span class='line'>                <span class="na">android:text=</span><span class="s">&quot;5&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Button</span> <span class="na">android:layout_column=</span><span class="s">&quot;2&quot;</span>
</span><span class='line'>                <span class="na">android:layout_row=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>                <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>                <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>                <span class="na">android:padding=</span><span class="s">&quot;10dip&quot;</span>
</span><span class='line'>                <span class="na">android:text=</span><span class="s">&quot;6&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Button</span> <span class="na">android:layout_column=</span><span class="s">&quot;0&quot;</span>
</span><span class='line'>                <span class="na">android:layout_row=</span><span class="s">&quot;2&quot;</span>
</span><span class='line'>                <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>                <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>                <span class="na">android:padding=</span><span class="s">&quot;10dip&quot;</span>
</span><span class='line'>                <span class="na">android:text=</span><span class="s">&quot;7&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Button</span> <span class="na">android:layout_column=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>                <span class="na">android:layout_row=</span><span class="s">&quot;2&quot;</span>
</span><span class='line'>                <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>                <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>                <span class="na">android:padding=</span><span class="s">&quot;10dip&quot;</span>
</span><span class='line'>                <span class="na">android:text=</span><span class="s">&quot;8&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Button</span> <span class="na">android:layout_column=</span><span class="s">&quot;2&quot;</span>
</span><span class='line'>                <span class="na">android:layout_row=</span><span class="s">&quot;2&quot;</span>
</span><span class='line'>                <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>                <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>                <span class="na">android:padding=</span><span class="s">&quot;10dip&quot;</span>
</span><span class='line'>                <span class="na">android:text=</span><span class="s">&quot;9&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Button</span> <span class="na">android:layout_column=</span><span class="s">&quot;0&quot;</span>
</span><span class='line'>                <span class="na">android:layout_row=</span><span class="s">&quot;3&quot;</span>
</span><span class='line'>                <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>                <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>                <span class="na">android:padding=</span><span class="s">&quot;10dip&quot;</span>
</span><span class='line'>                <span class="na">android:text=</span><span class="s">&quot;0&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Button</span> <span class="na">android:layout_column=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>                <span class="na">android:layout_row=</span><span class="s">&quot;3&quot;</span>
</span><span class='line'>                <span class="na">android:layout_gravity=</span><span class="s">&quot;fill_horizontal&quot;</span>
</span><span class='line'>                <span class="na">android:layout_columnSpan=</span><span class="s">&quot;2&quot;</span>
</span><span class='line'>                <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>                <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>                <span class="na">android:padding=</span><span class="s">&quot;10dip&quot;</span>
</span><span class='line'>                <span class="na">android:text=</span><span class="s">&quot;Delete&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Button</span> <span class="na">android:layout_column=</span><span class="s">&quot;0&quot;</span>
</span><span class='line'>                <span class="na">android:layout_row=</span><span class="s">&quot;4&quot;</span>
</span><span class='line'>                <span class="na">android:layout_columnSpan=</span><span class="s">&quot;2&quot;</span>
</span><span class='line'>                <span class="na">android:layout_gravity=</span><span class="s">&quot;fill_horizontal&quot;</span>
</span><span class='line'>                <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>                <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>                <span class="na">android:padding=</span><span class="s">&quot;10dip&quot;</span>
</span><span class='line'>                <span class="na">android:text=</span><span class="s">&quot;Clear&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Button</span> <span class="na">android:layout_column=</span><span class="s">&quot;2&quot;</span>
</span><span class='line'>                <span class="na">android:layout_row=</span><span class="s">&quot;4&quot;</span>
</span><span class='line'>                <span class="na">android:layout_columnSpan=</span><span class="s">&quot;2&quot;</span>
</span><span class='line'>                <span class="na">android:layout_gravity=</span><span class="s">&quot;fill_horizontal&quot;</span>
</span><span class='line'>                <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>                <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>                <span class="na">android:padding=</span><span class="s">&quot;10dip&quot;</span>
</span><span class='line'>                <span class="na">android:text=</span><span class="s">&quot;=&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Button</span> <span class="na">android:layout_column=</span><span class="s">&quot;3&quot;</span>
</span><span class='line'>                <span class="na">android:layout_row=</span><span class="s">&quot;0&quot;</span>
</span><span class='line'>                <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>                <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>                <span class="na">android:layout_gravity=</span><span class="s">&quot;fill&quot;</span>
</span><span class='line'>                <span class="na">android:padding=</span><span class="s">&quot;10dip&quot;</span>
</span><span class='line'>                <span class="na">android:text=</span><span class="s">&quot;+&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Button</span> <span class="na">android:layout_column=</span><span class="s">&quot;3&quot;</span>
</span><span class='line'>                <span class="na">android:layout_row=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>                <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>                <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>                <span class="na">android:layout_gravity=</span><span class="s">&quot;fill&quot;</span>
</span><span class='line'>                <span class="na">android:padding=</span><span class="s">&quot;10dip&quot;</span>
</span><span class='line'>                <span class="na">android:text=</span><span class="s">&quot;-&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Button</span> <span class="na">android:layout_column=</span><span class="s">&quot;3&quot;</span>
</span><span class='line'>                <span class="na">android:layout_row=</span><span class="s">&quot;2&quot;</span>
</span><span class='line'>                <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>                <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>                <span class="na">android:layout_gravity=</span><span class="s">&quot;fill&quot;</span>
</span><span class='line'>                <span class="na">android:padding=</span><span class="s">&quot;10dip&quot;</span>
</span><span class='line'>                <span class="na">android:text=</span><span class="s">&quot;*&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Button</span> <span class="na">android:layout_column=</span><span class="s">&quot;3&quot;</span>
</span><span class='line'>                <span class="na">android:layout_row=</span><span class="s">&quot;3&quot;</span>
</span><span class='line'>                <span class="na">android:layout_columnSpan=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>                <span class="na">android:layout_gravity=</span><span class="s">&quot;fill&quot;</span>
</span><span class='line'>                <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>                <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>                <span class="na">android:padding=</span><span class="s">&quot;10dip&quot;</span>
</span><span class='line'>                <span class="na">android:text=</span><span class="s">&quot;/&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/GridLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参考资料</h2>

<ul>
<li><a href="http://www.cnblogs.com/skywang12345/p/3154150.html">Android 布局之GridLayout</a></li>
<li><a href="http://android-developers.blogspot.com/2011/11/new-layout-widgets-space-and-gridlayout.html">New Layout Widgets: Space and GridLayout</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[安卓开发技术：监听软键盘的显示与隐藏]]></title>
    <link href="http://toughcoder.net/blog/2015/10/09/android-trick-detect-soft-keyboard-show-slash-hide/"/>
    <updated>2015-10-09T22:08:08+08:00</updated>
    <id>http://toughcoder.net/blog/2015/10/09/android-trick-detect-soft-keyboard-show-slash-hide</id>
    <content type="html"><![CDATA[<p>自从2007年乔帮主横空出世推出iPhone后，智能手机就都变成了触摸屏，且屏幕越来越大。输入自然也就通过软件来解决，现在来说绝大多数智能设备都是通过软键盘来做用户输入。在日常的开发过程中难免会跟软键盘打交道，比如强制显示或者强制隐藏等，也有些时候想要在键盘隐藏或者显示的时候做一点事情，这就需要准确的知道键盘的事件，这篇文章就来详细讨论一下Android下面如何做到监听键盘的事件。</p>

<p><a href="http://toughcoder.net/blog/2015/10/09/android-trick-detect-soft-keyboard-show-slash-hide/"><img src="http://static.yingyonghui.com/screenshots/1793/1793110_5.jpg"></a></p>

<!-- more -->


<h2>硬键盘显示隐藏的事件监听</h2>

<p>对于有硬键盘的设备，是会产生运行时的配置变更(<a href="http://developer.android.com/guide/topics/resources/runtime-changes.html#HandlingTheChange">Runtime Config Changes</a>)，因此可以通过<a href="http://developer.android.com/reference/android/app/Activity.html#onConfigurationChanged(android.content.res.Configuration">Activity#onConfigurationChanged</a>)回调来处理：</p>

<p>首先，要在AndroidManifest中给activity加上<a href="http://developer.android.com/guide/topics/manifest/activity-element.html#config">configChanges=&ldquo;keyboardHidden&rdquo;</a>。</p>

<p>然后，在代码中，处理：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onConfigurationChanged</span><span class="o">(</span><span class="n">Configuration</span> <span class="n">newConfig</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onConfigurationChanged</span><span class="o">(</span><span class="n">newConfig</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Checks whether a hardware keyboard is available</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">newConfig</span><span class="o">.</span><span class="na">hardKeyboardHidden</span> <span class="o">==</span> <span class="n">Configuration</span><span class="o">.</span><span class="na">HARDKEYBOARDHIDDEN_NO</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="s">&quot;keyboard visible&quot;</span><span class="o">,</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_SHORT</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">newConfig</span><span class="o">.</span><span class="na">hardKeyboardHidden</span> <span class="o">==</span> <span class="n">Configuration</span><span class="o">.</span><span class="na">HARDKEYBOARDHIDDEN_YES</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="s">&quot;keyboard hidden&quot;</span><span class="o">,</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_SHORT</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要注意的是，要用<a href="http://developer.android.com/reference/android/content/res/Configuration.html#hardKeyboardHidden">Configuration#hardKeyboardHidden</a>而不是<a href="http://developer.android.com/reference/android/content/res/Configuration.html#keyboardHidden">Configuration#keyboardHidden</a>，因为只有当硬键盘状态变化时才会回调onConfigurationChanged。</p>

<h2>软键盘显示隐藏事件监听</h2>

<p>现在的Android设备很少才会有硬键盘，绝大多数都是软键盘，而SDK和API中却没有软键盘隐藏变化的相关事件，没有直接支持不代表做不到。我们通过其他的方式还是可以做到监听软键盘显示与隐藏状态变化的。</p>

<h3>override onKeyPreIme</h3>

<p>当<a href="http://developer.android.com/reference/android/widget/EditText.html">EditText</a>获得焦点时，或者用户点击时，都会把软键盘弹起来（2.x版本长按MENU也可以强制弹出软键盘）。但是，隐藏软键盘一般都是BACK键，或者键盘自身提供隐藏的按扭，再有就是用代码强制隐藏。对于BACK键还是可以处理的，因为这属于事件(<a href="http://developer.android.com/reference/android/view/KeyEvent.html">KeyEvent</a>)，是能监听到的。</p>

<h4>核心原理</h4>

<p>子例化EditText，并覆写方法<a href="http://developer.android.com/reference/android/widget/TextView.html#onKeyPreIme(int,%20android.view.KeyEvent">onKeyPreIme</a>)。这个方法能在输入法前面拦掉事件，从而可以做一些事情：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">KeyPreImeEditText</span> <span class="kd">extends</span> <span class="n">EditText</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">KeyPreImeEditText</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">KeyPreImeEditText</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">AttributeSet</span> <span class="n">attrs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">attrs</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">KeyPreImeEditText</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">AttributeSet</span> <span class="n">attrs</span><span class="o">,</span> <span class="kt">int</span> <span class="n">defStyleAttr</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">attrs</span><span class="o">,</span> <span class="n">defStyleAttr</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onKeyPreIme</span><span class="o">(</span><span class="kt">int</span> <span class="n">keyCode</span><span class="o">,</span> <span class="n">KeyEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">keyCode</span> <span class="o">==</span> <span class="n">KeyEvent</span><span class="o">.</span><span class="na">KEYCODE_BACK</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="s">&quot;keyboard&quot;</span><span class="o">,</span> <span class="s">&quot;onKeyPreIme we got back&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">onKeyPreIme</span><span class="o">(</span><span class="n">keyCode</span><span class="o">,</span> <span class="n">event</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>优点</h4>

<p>简单粗暴，都是SDK支持的方法和事件，所以不会有兼容性等蛋疼的问题。</p>

<h4>缺点</h4>

<p>这仅在输入法前拦截到BACK事件，而前面提到BACK仅是能让软键盘隐藏掉的一个方式而已，所以这个方法是不能够完全做到监听软键盘隐藏状态变化的。这个方法仅适用于想拦截BACK，做一些其他事情的场景。</p>

<h3>override根布局的onMeasure</h3>

<p>另外的思路就是观察软键盘引起的布局变化，比如软键盘弹起时Activity的整体布局都会发生变化。</p>

<h4>核心原理</h4>

<p>子例化Activity的根布局（比如<a href="http://developer.android.com/reference/android/widget/LinearLayout.html">LinearLayout</a>或者<a href="http://developer.android.com/reference/android/widget/RelativeLayout.html">RelativeLayout</a>，然后覆写其<a href="http://developer.android.com/reference/android/view/View.html#onMeasure(int,%20int">onMeasure</a>)方法，在其中判断View的当前高度与其本应有的高度，如果当前高度小于本应有的高度，则表明软键盘在：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">KeyboardAwareLinearLayout</span> <span class="kd">extends</span> <span class="n">LinearLayout</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">KeyboardAwareLinearLayout</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">KeyboardAwareLinearLayout</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">AttributeSet</span> <span class="n">attrs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">attrs</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">KeyboardAwareLinearLayout</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">AttributeSet</span> <span class="n">attrs</span><span class="o">,</span> <span class="kt">int</span> <span class="n">defStyleAttr</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">attrs</span><span class="o">,</span> <span class="n">defStyleAttr</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onMeasure</span><span class="o">(</span><span class="kt">int</span> <span class="n">widthMeasureSpec</span><span class="o">,</span> <span class="kt">int</span> <span class="n">heightMeasureSpec</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">int</span> <span class="n">proposedHeight</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">getSize</span><span class="o">(</span><span class="n">heightMeasureSpec</span><span class="o">);</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">int</span> <span class="n">actualHeight</span> <span class="o">=</span> <span class="n">getHeight</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">actualHeight</span> <span class="o">&gt;</span> <span class="n">proposedHeight</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="s">&quot;keyboard&quot;</span><span class="o">,</span> <span class="s">&quot;guess keyboard is shown&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="s">&quot;keyboard&quot;</span><span class="o">,</span> <span class="s">&quot;guess keyboard has been hidden&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onMeasure</span><span class="o">(</span><span class="n">widthMeasureSpec</span><span class="o">,</span> <span class="n">heightMeasureSpec</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>优点</h4>

<p>能够真正实现对软键盘隐藏和显示的监听，也不算复杂。</p>

<h4>缺点</h4>

<p>这个基于的原理是键盘对Activity的布局产生影响的情况，而这又受到其他条件控制。activity的属性<a href="http://developer.android.com/guide/topics/manifest/activity-element.html#wsoft">windowSoftInputMode</a>控制着软键盘与布局之间的影响关系，对于adjustPan以及全屏模式的adjustResize这种方法就失效了，因为这二种情况软键盘弹起时，布局是不会发生变化的，二种height值是一样的，自然无法分辨。</p>

<h3>监听GlobalLayout</h3>

<p>与上面的思路差不多，只不是监听GlobalLayout变化，然后根据布局高度与屏幕高度之差来判断。</p>

<p><strong>注意</strong>：要记得把注册的GlobalLayoutListener再反注册掉。</p>

<h4>计算根布局的高度差</h4>

<p>判断的依据是根布局与DectorView之间的差值，在正常情况下应该等于status bar高度与action bar高度之和。当软键盘弹起时则会大于此值。</p>

<h5>核心原理</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">boolean</span> <span class="n">mKeyboardUp</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">setListenerToRootView</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">View</span> <span class="n">rootView</span> <span class="o">=</span> <span class="n">getWindow</span><span class="o">().</span><span class="na">getDecorView</span><span class="o">().</span><span class="na">findViewById</span><span class="o">(</span><span class="n">android</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">content</span><span class="o">);</span>
</span><span class='line'>        <span class="n">rootView</span><span class="o">.</span><span class="na">getViewTreeObserver</span><span class="o">().</span><span class="na">addOnGlobalLayoutListener</span><span class="o">(</span><span class="k">new</span> <span class="n">ViewTreeObserver</span><span class="o">.</span><span class="na">OnGlobalLayoutListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onGlobalLayout</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="kd">final</span> <span class="kt">int</span> <span class="n">headerHeight</span> <span class="o">=</span> <span class="n">getActionBarHeight</span><span class="o">()</span> <span class="o">+</span> <span class="n">getStatusBarHeight</span><span class="o">();</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">heightDiff</span> <span class="o">=</span> <span class="n">rootView</span><span class="o">.</span><span class="na">getRootView</span><span class="o">().</span><span class="na">getHeight</span><span class="o">()</span> <span class="o">-</span> <span class="n">rootView</span><span class="o">.</span><span class="na">getHeight</span><span class="o">();</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">heightDiff</span> <span class="o">&gt;</span> <span class="n">headerHeight</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="s">&quot;keyboard&quot;</span><span class="o">,</span> <span class="s">&quot;keyboard is up&quot;</span><span class="o">);</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(!</span><span class="n">mKeyboardUp</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">mKeyboardUp</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">mOpen</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="s">&quot;keyboard&quot;</span><span class="o">,</span> <span class="s">&quot;keyboard is hidden&quot;</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">mKeyboardUp</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码需要好好解释下：</p>

<ul>
<li>android.R.id.content 通过这个id可以获得一个View的根布局，而不必要知道它具体的id。可以参考<a href="http://stackoverflow.com/questions/7776768/android-what-is-android-r-id-content-used-for">这个讨论</a>。</li>
<li>rootView 这个View是Activity的根布局，除去了actionbar的部分，是一个FrameLayout，注意这个并不是setContentView中设置的布局。rootView的第一个子View(rootView.getChildAt(0))就是setContentView()设置的布局。可以参考<a href="http://stackoverflow.com/questions/4486034/get-root-view-from-current-activity">这个讨论</a>。</li>
</ul>


<h5>优点</h5>

<p>不用子例化，不依赖于现有代码中的成员，可以直接插入到任何代码中。</p>

<h5>缺点</h5>

<p>本质上这跟上一个方法是一样的。因此对于adjustPan和全屏的adjustResize二种情况是无效的。针对这二种情况heightDiff不会变化。</p>

<h4>计算根布局的的底部空隙</h4>

<p>其实所有的方法都是为了发现软键盘对布局的影响，从而判断软键盘的显示和隐藏。还有一种方法就判断根布局的可视区域与屏幕底部的差值，如果这个差大于某个值，可以认定键盘弹起了。</p>

<h5>核心原理</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isKeyboardShown</span><span class="o">(</span><span class="n">View</span> <span class="n">rootView</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">int</span> <span class="n">softKeyboardHeight</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span>
</span><span class='line'>        <span class="n">Rect</span> <span class="n">r</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Rect</span><span class="o">();</span>
</span><span class='line'>        <span class="n">rootView</span><span class="o">.</span><span class="na">getWindowVisibleDisplayFrame</span><span class="o">(</span><span class="n">r</span><span class="o">);</span>
</span><span class='line'>        <span class="n">DisplayMetrics</span> <span class="n">dm</span> <span class="o">=</span> <span class="n">rootView</span><span class="o">.</span><span class="na">getResources</span><span class="o">().</span><span class="na">getDisplayMetrics</span><span class="o">();</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">heightDiff</span> <span class="o">=</span> <span class="n">rootView</span><span class="o">.</span><span class="na">getBottom</span><span class="o">()</span> <span class="o">-</span> <span class="n">r</span><span class="o">.</span><span class="na">bottom</span><span class="o">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">heightDiff</span> <span class="o">&gt;</span> <span class="n">softKeyboardHeight</span> <span class="o">*</span> <span class="n">dm</span><span class="o">.</span><span class="na">density</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>得到的Rect就是根布局的可视区域，而rootView.bottom是其本应的底部坐标值，如果差值大于我们预设的值，就可以认定键盘弹起了。这个预设值是键盘的高度的最小值。这个rootView实际上就是DectorView，通过任意一个View再getRootView就能获得。</p>

<h5>优点</h5>

<p>适用所有情况，包括adjustPan和全屏的adjustResize也能准确判断出来。</p>

<h3>结论</h3>

<p>如果真的需要监听软键盘显示与隐藏的事件就可以通过上面的提到的最后一种方式来实现，简单方便且可靠，唯一要注意的就是要反注册掉所注册的GlobalLayoutListener.</p>

<h2>参考资料</h2>

<ul>
<li><a href="http://stackoverflow.com/questions/4312319/howto-capture-the-virtual-keyboard-show-hide-event-in-android">http://stackoverflow.com/questions/4312319/howto-capture-the-virtual-keyboard-show-hide-event-in-android</a></li>
<li><a href="http://felhr85.net/2014/05/04/catch-soft-keyboard-showhidden-events-in-android/">Catch soft keyboard show/hidden events in Android</a></li>
<li><a href="http://blog.csdn.net/zhaokaiqiang1992/article/details/39761461">android:windowSoftInputMode属性详解</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android应用性能剖析全攻略]]></title>
    <link href="http://toughcoder.net/blog/2015/09/11/android-performance-profiling-made-easy/"/>
    <updated>2015-09-11T10:36:31+08:00</updated>
    <id>http://toughcoder.net/blog/2015/09/11/android-performance-profiling-made-easy</id>
    <content type="html"><![CDATA[<p>性能是软件质量的一个重要方面，好的软件必须要在性能上达到一定的标准。对于Android应用程序来讲，更是如此，移动互联网的红海竞争，如果应用的性能差，肯定会缺少竞争力的，这里就来聊一聊应用开发中如何提升性能，以及在开发过程中如何处理性能问题。</p>

<p><a href="http://toughcoder.net/blog/2015/09/11/android-performance-profiling-made-easy/"><img src="https://img.alicdn.com/imgextra/i2/715978679/TB2sqTwjVXXXXalXXXXXXXXXXXX_!!715978679.jpg"></a></p>

<!-- more -->


<h2>性能的定义</h2>

<p>对于Android应用程序来讲分为三个方面，一方面是软件整体表现上的性能，也就是能多快给用户想要的结果，比如新闻阅读类应用，这个性能就是当用户点一条新闻时，多快能把新闻内容展示给用户，这个通常取决于业务逻辑，网络，以及后台服务器的性能。</p>

<p>另外一方面就是UI性能，也就是所谓的流畅度，这个在移动应用上面有着更严重的影响，因为触摸和手势的原因，如果应用程序不流畅，会严重影响体验，相比如PC桌面软件会更严重。这个是我们通常所谓的性能，大多数情况下，以及网络上绝大多数文章都是针对于此。对于安卓应用来说要想达到流畅，或者说做动画时，列表滑动时不卡顿，那么帧率（FPS Frame per Second）要达到60这个也是我们在做性能优化时的一个衡量的标杆。</p>

<p>还有一方面就是更少的资源占用，包括内存，CPU，电池，磁盘，网络流量，服务器资源等等。这个也很重要，特别是内存，CPU和电池，前二个对于所有软件来说都是衡量性能的一个重要指标，电池则是移动应用特有的，特别是智能手机上面。</p>

<p>总之，性能是一个很大很大的话题，也是一个无止境的任务，适可而止，见好就收。虽我们都有着一颗工程师的心，都想把东西做到极致，但试问天下，又有谁真的能把所有的东西都做到最优呢？具体把性能做到什么程度，要看需要强烈与否。比如一个应用在生命初期，可能没有人关注性能。但假如已到百万，千万级别的时候，才考虑性能也是作死的节奏。即使是超级App，性能优化也要适可而止，</p>

<h2>如何提升UI流畅度</h2>

<h3>造成UI不流畅的原因</h3>

<p>要想让UI流畅，首先要了解一下造成不流畅的原因都有哪些：</p>

<ul>
<li>主线程做了费时操作，或者本不该在主线程中做的轻微逻辑，这不但会严重影响帧率，甚至还会触发ANR(Application Not Responding)</li>
<li><p>布局过于复杂或者View层次太多</p>

<p>这个情况也是经常出现。无论是页面确实复杂，或者为了实现某些特殊的视觉效果（比如边框或者3D效果），结果就是一个非常复杂，层次深，View个数多的布局，最终结果就是渲染性能差。特别是对于列表的Cell，影响更加严重，都会造成滑动时的卡顿。</p></li>
<li><p>局部更新造成了整体布局的重绘</p>

<p>这里指的是，一个View层次中的某一个View需要刷新，但是却会触发整体页面的刷新，从而造成浪费。</p></li>
<li><p>整体布局的重绘被触发了多次</p>

<p>这通常出现在需要动画的场景，比如以改变View的布局（大小）的方式来实现动画，或者频繁的改变View的层次，比如频繁的addView和removeView。这都会不断的触发measure/onMeasure，layout/onLayout和View的重绘。</p></li>
<li><p>敏感方法里面做了太多不相干的事情</p>

<p>通常是View的一些关键的方法中onDraw, onMeasure, onLayout，特别是onDraw里面只应该做绘制相关的，连创建对象这种级别的事情都最好别做。当然，这个出现的情况比较少，毕竟需要直接自定义一个原始View的情况并不多见。</p></li>
<li><p>频繁的GC发生</p>

<p>无论是在主线程，还是worker线程，如果频繁的大量的创建对象，就会触发频繁的GC，GC会对所有的线程产生影响，对UI线程也是有影响。</p></li>
</ul>


<p>90%的情况前四种情况是主因，把前四种情况解决了就无大碍了。而前四个中，前二个又是重灾区，通常情况处理了前二个就能解决不流畅的问题。</p>

<p>知道了原因，就可以对症下药了：</p>

<h3>设计和编码时要考虑性能</h3>

<p>性能是设计和编码时必须要考虑的一个因素，跟程序的正确性，robustness和可维护性同样重要。而不是应用已经上线了很久后才开始考虑性能问题。但是我们活在现实生活中，实际的情况往往都是当应用已经上线了并且稳定了之后才开始做，而且情况往往都是代码都还不是你写的。设计和编码时不考虑性能的原因一般有：</p>

<ul>
<li>开发人员水平不足，意识不到性能问题，或者不知道如何写出高性能的代码</li>
<li>需求太多，或者需求经常变动，没时间考虑别的</li>
</ul>


<p>总之，无论如何，在设计和编码时不考虑性能是很令人烦恼的事情，但亡羊补牢，虽有些无奈但还是有益的。</p>

<h3>简单设计做更少的事情</h3>

<p>这似乎是废话，少做事情，或者不做事情效率自然高，性能肯定能上去。页面布局尽可能简单，功能尽可能简单，能做一遍的事情不要做二遍，没必要的准备工作不做，等等。但是现实情况往往是应用越做越复杂，越做越功能越多，页面越来越复杂，这是多种元素决定的，或许是竞争的需要，或者是产品这么定义的，或者是老板就喜欢这样。</p>

<p>但无论怎么样，对于开发人员来讲，当实现功能时要本着简单的原则，这说来容易，但是当代码出来时却千差万别，明明很简单的逻辑，有人却能代码写的巨复杂，一坨一坨的。虽然可能说你看得懂他的设计图，看得懂他的流程图看得懂他的类图等等，但是你却不一定看得他的懂代码。</p>

<p>这里扯一点题外话，写代码绝对是衡量一个程序员的重要指标，虽然不能做为全部，但是至少应该占50%。所以如果面试时看不到应聘者近一二个月的代码，或者不让其当场写代码的话，面试可以认定是失败的。尽管他可能是BAT出身，尽管他可能做过（维护）过顶级App，但是很可能他写出的代码都跟翔一样，一坨一坨的，完全看不懂写的是啥玩意儿。孤认为，面试时最好花一天或者一个下午时间，让应聘者在<strong>近似真实</strong>的环境中写代码，或者是一个小功能，或者是一个小项目，或是修改一个bug，最好还是坐在他旁边，与其一起工作，就好像平日里你跟同事一起工作一样，这非常有效果，也很能看出一个人的水平，而且你聘他来后也是要这样子工作的。光在那里Bla bla的问答，连他说的是真是假都难以分辨，而且世上事永远都是说起来容易做起来难，我们都见过很多人Blabla就会说，就会吹，不会做事情，或者干起事情跟小孩子一样，也有很多人实干型的，会做事，能把事情做好，但就是说不出，或者非常不愿意在别人面前blabla。然并卵。。。。蛋扯远了</p>

<h3>远离主线程（UI线程）</h3>

<p>这似乎才是正题。</p>

<p>对于应用程序来说主线程是很重要的，因为主线程通常的作用是用于刷新用户界面（UI），与用户进行交互，是与用户接触最近的，因此也通常被称作UI线程。Android和iOS都是如此。想像一下，应用要想达到60FPS，也就是说一帧的绘制要在16ms内完成，你的布局又那么的复杂，一层套一层，每个View都要一遍遍的measure, layout, draw，就知道主线程有多么忙碌了，还能忍心再做其他事情吗？</p>

<p>那么，让应用流畅就变得很简单，在主线程中做最少的事情，但不能更少，它只做二件事情：</p>

<ul>
<li><p>UI(<a href="http://developer.android.com/reference/android/view/View.html">View</a>)相关的事情</p>

<p>这个是平台框架的限制，必须遵守。</p></li>
<li><p>必须在主线程中做的事情</p>

<p>比如启动其他线程，必要的初始化等等。比如像AsyncTask是一定要在主线程中初始化的，否则会有Crash，具体可以看<a href="http://blog.csdn.net/hitlion2008/article/details/8194510">这篇文章</a>的分析。</p></li>
</ul>


<p>其他，所有事情，都应该放到其他线程中去。如果在设计和编码的时候能考虑到这二点，那么你的应用流畅至少不会卡。使用其他线程异步操作时一定要注意生命周期和上下文，也即当执行任务时生命周期是否还是活动的，或者所依赖的上下文是否已经变化了，不在了。</p>

<h3>布局的优化</h3>

<h4>减少View的层次和数目，减化复杂布局</h4>

<p>View的层次越少，数目越少，肯定渲染越快，这个常见的技巧有：</p>

<ul>
<li>删除没有用的View</li>
<li>除去无必要的嵌套，比如当内部仅有一个View时，外面就没有必要再加一个ViewGroup了</li>
<li>多使用<a href="http://developer.android.com/reference/android/widget/RelativeLayout.html">RelativeLayout</a>。它能够随意的排版View，三维上的方位都可以搞定，所以对象像列表的Cell之类的，一个RelativeLayout基本上就可以搞定。</li>
<li><a href="http://toughcoder.net/blog/2015/05/20/android-layout-trick-drawable-of-textview/">用TextView的drawable属性来组合图片+文字</a></li>
<li>用merge来减少层次</li>
<li>对于某些情况才用到的View，就使用<a href="http://blog.csdn.net/hitlion2008/article/details/6737537">ViewStub</a>，然后在需要显示的时候再inflate。也就是所谓的延时和按需渲染</li>
<li>尽量不要用背景图片，特别整个Activity大小的背景，费内存，占资源</li>
<li>尽可能用矢量图形，比如颜色，drawable，shape，icon font等等</li>
</ul>


<p>减少View的层次和数目能显著提高帧率。曾经有一个列表，列表不复杂，左边一个TextView，右边有三个也是TextView，但是在添加的时候在外面又包了一层TextView，布局就变成了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;LinearLayout</span> <span class="err">....</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;TextView</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/LinearLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>虽然可能这不起眼的多加了一个LinearLayout，但是别忘记了，这是在List中，一屏会显示10多行，每一行多3个View，加起来就是30多个View啊！一次多绘制30多个View是什么概念？</p>

<p>对于布局的优化可以多看看lint的输出Warning，它对于无用的View，没必要的嵌套，以及优化建议都能准确的给出提示。</p>

<h4>当局部更新时不要触发整体重绘</h4>

<p>比如一个坨复杂布局中，仅需要更新一个图标时，就直接更新它所属的ImageView就好；再如，有CheckBox选中状态的列表，点击时，就只更新具体的列表的具体的CheckBox就可以了，而不是改变数据，然后notifyDataSetChanged。</p>

<p>这里需要，首先，不要故意的去触发整体刷新（除非非常的有必要，比如多个View都需要刷新数据时）；另外，就是要小心防止触发整体刷新的坑，因为某些原因，即使小心的更新局部也会造成整体的刷新。</p>

<h4>避免频繁的触发整体的重绘</h4>

<p>千万不要直接改变View的大小的方式来做动画，或者在做动画的同时改变View的布局，更不要添加或者移除View，这都会直接触发整体的重绘。</p>

<h4>避免在onDraw的时候做额外的事情</h4>

<p>如果是自定义的View就要注意这个事情，在onDraw的时候不要去new对象或者做其他不相干的事情，即使这些操作在UI线程中作也毫不费时的。</p>

<h4>列表类的优化</h4>

<p>对于列表（List和Grid）优化除了上面提到的，还要注意使用组件传回来的convertView以及ViewHolder。convertView可以复用View对象，避免inflate过多的View。ViewHolder模式主要是减少findViewById的调用。</p>

<h4>把界面设计的尽可能简单</h4>

<p>大道至简，简约是最优秀的用户体验，没有之一，所以产品汪们，不要把页面搞的太复杂，会导致不好用：用户不会用，和渲染性能差。</p>

<h4>写布局时要考虑到渲染性能</h4>

<p>这是非常重要的，再牛B的方法和技巧，如果你不鸟，或者不用都木有卵用，如果你心系性能，必然会有所思，有所为，然后渲染性能就所升。</p>

<h3>及时反馈给用户</h3>

<p>这实际上不是真正的流畅，而是给用户感觉流畅，避免用户认为应用假死。比如当做一些费时操作的时候，是放在了工作线程中，但是主线程也却没事情做，应用流畅不卡顿，但在用户看来却是无意义的，这时可以用一些动画，进度等等及时反馈给用户程序当前的状态。</p>

<p>另外，当做费时操作的时候也要及时终止并反馈，程序可能会有异常情况或者错误情况，都是需要处理的，比如从网络加载数据，可能会有无网络，或者网络异常，或者服务器返回异常，那么要尽早失败。比如是不是可以在任务启动前先判断网络状态，而不是照常发请求，网络返回异常了，那么正常情况时的结果处理就不要做了，等等。</p>

<p>说到这里，不得不讲一下代码的编写原则：先检查异常情况，尽早退出，而不是层层if，举个例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Data</span> <span class="nf">fetchNewsDetail</span><span class="o">(</span><span class="n">String</span> <span class="n">url</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">url</span> <span class="n">is</span> <span class="n">invalid</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">empty</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">no</span> <span class="n">networks</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">empty</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">some</span> <span class="n">other</span> <span class="n">bad</span> <span class="n">conditions</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">empty</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">send</span> <span class="n">requset</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">response</span> <span class="n">code</span> <span class="n">not</span> <span class="mi">200</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">no</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">parse</span> <span class="n">response</span> <span class="n">failed</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">parse</span> <span class="n">data</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>而不是这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Ugly code, DO NOT do this</span>
</span><span class='line'><span class="n">Data</span> <span class="nf">fetchNewsDetail</span><span class="o">(</span><span class="n">String</span> <span class="n">url</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">url</span> <span class="n">valid</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">has</span> <span class="n">networks</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">response</span> <span class="n">code</span> <span class="mi">200</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">....</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>流畅度剖析工具</h2>

<h3>流畅度定性体验</h3>

<p>那么如何测试或者衡量我们应用是否流畅呢？
首先就是自己体验，快速滑动，看看是否能感觉到卡顿，或者页面闪烁。</p>

<p><img src="https://img.alicdn.com/imgextra/i2/715978679/TB2Mr6sXFXXXXcvXpXXXXXXXXXX_!!715978679.png" width="320" height="480"></p>

<h3>借助开发者工具来感受</h3>

<p>开发者工具有很多选项可以帮助开发者来测量，比如调试过度绘制，显示GPU更新等。通过这些可以看出不必要的UI刷新。</p>

<p>比如开发者选项里有一个”硬件加速渲染“，里面有一个“调试GPU过度绘制”，这个会在屏幕上以颜色来区分overdraw（过度绘制，也就是进行了不必要的绘制）的严重重度：</p>

<ul>
<li>蓝色 1 倍overdraw</li>
<li>绿色 2 倍overdraw</li>
<li>红色 3 倍overdraw</li>
<li>紫色 4 倍overdraw</li>
</ul>


<p>总之，颜色越深，证明做了过多的不必要的绘制(overdraw).什么又叫过度绘制呢(overdraw)比如一个列表，如果每个Item都有背景色，那么List本身实际上是不需要背景色的，比如子View占满了父View，那么父View不用画背景，等等。对于不可见的元素，就不要运行绘制，这是减少overdraw的方法。</p>

<p><img src="https://img.alicdn.com/imgextra/i4/715978679/TB2d_bsjVXXXXXHXXXXXXXXXXXX_!!715978679.png" width="320" height="480"></p>

<p>在开发者选项面有一个是“监控”，里面有几个：</p>

<ul>
<li>启用严格模式</li>
<li>显示CPU使用情况</li>
<li>GPU呈现模式分析</li>
<li>启用OpenGL跟踪</li>
</ul>


<p>特别是第3个“GPU使用情况”，它是系统在GPU渲染时加入一些分析，以呈现UI渲染的性能，它有三个选项：</p>

<ul>
<li>关闭</li>
<li>在屏幕上显示为条形</li>
<li>在adb shell dumpsys gfxinfo中</li>
</ul>


<p>其实，它的数据是一样的，只不过一个是在命令行把raw data输出，一个是在手机屏幕以图表方式展示。后面会详细介绍这个。</p>

<h3>adb shell dumpsys gfxinfo <pkg name></h3>

<p>这个能收集GPU渲染时的一些数据，从而反映应用UI渲染的性能信息。</p>

<p>从这个命令的输出能看出二个信息一个帧的数量，另一个就是每一帧绘制的情况。
应用比较卡，表现出来就是丢帧，也就是有些帧太慢了，赶不上火车了，不得不丢掉，从而页面会卡顿。正常来讲，即使是简单的布局，用这个命令抓也至少能抓到20+帧的数据，如果少了，或者很少，只有几帧，就就证明你在主线程中干了太多其他的事情，也就是说主线程被block了。这时就要好好看看源码，主线程中都干了啥，哪里可能会耗时，把非UI操作都放到工作线程中去。</p>

<p><img src="https://img.alicdn.com/imgextra/i3/715978679/TB2GhnkjVXXXXbuXXXXXXXXXXXX_!!715978679.png" width="640" height="480"></p>

<p>对于每一帧的数据，体现着绘制这一帧所花的时间：</p>

<ul>
<li>Draw是创建列表所需要的时间，表示运行绘图方法用了多长时间，比如View.onDraw()所花的时间；</li>
<li>Prepare在5.0版本加入了这一列数据的显示</li>
<li>Process是Android 2D引擎渲染显示列表(DisplayList)所需要的时间。页面上的View越多，层次越深，就会有越多的绘制命令需要执行，这个值会越大。</li>
<li>Execute是把一帧数据送到屏幕上排版显示的时间，这个值通常会比较小，且在应用层无法直接控制，换句话说，这个时间是无法优化的。</li>
</ul>


<p>为了流畅，每一帧的绘制时间应该少于16ms，因为应用要想流畅要达到60FPS，算下来就是一帧不能超过16ms，但这个并不是死规定，不是说某一帧超过，应用就会卡，就会慢，而是说几十帧的平均值或者90%的帧应该在16ms以内。</p>

<p>这个方法是针对每个ViewRootImpl的统计数据。ViewRootImpl对象就是一个View的根元素，通常情况下一个Activity仅有一个ViewRootImpl对象。需要注意的是Dialog也会有一个ViewRootImpl，所以当有Dialog时，你会看到二个ViewRootImpl的统计数据。</p>

<p>还有需要注意的是，如果使用了SurfaceView（比如GLSurfaceView)，因为它不是使用常规View的渲染方法来渲染的，它有自己的线程和渲染方式，所以这个方法是抓不到SurfaceView的渲染性能的。</p>

<p><img src="https://img.alicdn.com/imgextra/i3/715978679/TB2hIvjjVXXXXbyXXXXXXXXXXXX_!!715978679.png" width="320" height="480"></p>

<p>在屏幕显示，则会在屏幕上面以柱状图的方式实时显示UI每一帧渲染的性能，可以看到一条绿色的线，这个就是16ms。柱状图中几种颜色所代码的意义分别是</p>

<h3>traceview</h3>

<p>这是一个十分强大的功能，能得到某一时间段内，进程内的时序执行情况，具体到能体现出所有线程的所有方法执行所花的CPU时间和实际时间，并且还能看出包含子调用和不包含的情况。</p>

<h4>启用方法</h4>

<p>在Android Studio中点击Android Device Monitor或者直接运行monitor (位于SDK/tools/），选择某一进程，然后点击，开始录制，再点击结束，就会出现。</p>

<p><img src="https://img.alicdn.com/imgextra/i1/715978679/TB2jRjqjVXXXXaiXXXXXXXXXXXX_!!715978679.png"></p>

<p><img src="https://img.alicdn.com/imgextra/i1/715978679/TB28pbXjVXXXXadXpXXXXXXXXXX_!!715978679.png"></p>

<p><img src="https://img.alicdn.com/imgextra/i4/715978679/TB2VSjnjVXXXXaxXXXXXXXXXXXX_!!715978679.png"></p>

<h4>如何分析</h4>

<p>颜色越深代码花的时间越多。</p>

<p><img src="https://img.alicdn.com/imgextra/i2/715978679/TB2HnYmjVXXXXacXXXXXXXXXXXX_!!715978679.png" width="640" height="480"></p>

<p>主要指标有：</p>

<ul>
<li>CPU time 某个方法占用的CPU时间</li>
<li>Real time 某个方法运行的真实时间</li>
<li>CPU time/call - 某方法CPU时间与调用次数比</li>
</ul>


<p>还有二个前缀：</p>

<ul>
<li>Incl - 这是Inclusive简写，意思就是包含方法里面的子调用</li>
<li>Excl - 这个是Exclusive的简写，意思方法本身，不包含子调用</li>
</ul>


<p>通过这个可以分析出哪些方法比较耗时。</p>

<h3>systrace</h3>

<p><a href="http://developer.android.com/tools/help/systrace.html">systrace</a>可以查看出进程的执行情况，不单单是你的应用进程，也能看到系统进程的执行情况，能够以时间线的形式来展示进程中各线程的执行情况。</p>

<h4>如何使用</h4>

<p>根据系统版本的不同使用方法略有不同：</p>

<ul>
<li><p>Android 4.3及以上系统</p>

<ol>
<li>确保打开了ADB调试模式</li>
<li>执行以下命令</li>
</ol>


<pre><code class="``shell">$ cd android-sdk/platform-tools/systrace
$ python systrace.py --time=10 -o mynewtrace.html sched gfx view wm
</code></pre>

<p>  输出的mynewtrace.html文件就是带有trace的结果，用浏览器打开查看即可。</p></li>
<li><p>Android 4.2及以下系统</p>

<ol>
<li>打开ADB调试模式</li>
<li>开发者选项中->监控->启用跟踪中选择想要查看的类型</li>
<li>执行命令</li>
</ol>


<pre><code class="``shell">  $ python systrace.py --cpu-freq --cpu-load --time=10 -o mytracefile.html
</code></pre></li>
</ul>


<p>更多的systrace命令的使用方法可以参考<a href="http://developer.android.com/tools/help/systrace.html">官方文档</a>。</p>

<h4>如何分析结果</h4>

<p>systrace命令得到的结果是一个HTML文件，用浏览器打开即可.</p>

<p>基本操作：w 放大；s 缩小; a 向左移动；s 向右移动</p>

<p>从中可以看出帧绘制的信息，通常每一帧应该小于16.6ms，为绿色。对于有问题的，比如delay或者绘制时间长的，会以黄色和红色标注出来，并且在顶部会有Alert。点击帧F和Alert可以看到具体的详细信息，以及系统自动分析出来的可能的原因。
 </p>

<h3>hierarchyview</h3>

<p>这个工具很明显就是用来调试布局的，它能以可视化的方式展示View的层次结构，顺带显示每一层View的渲染速度。运行方法是找到SDK/tools/运行hierarchyviewer.</p>

<p><em>注意</em>：默认情况下只有调试的ROM（build with eng)才能抓到View的层次信息（否则，应用的页面就很容易被破解了），对于可控制源码的可以用<a href="https://github.com/romainguy/ViewServer">开源库</a>来解决这个问题。</p>

<h3>代码层次剖析打点</h3>

<p>这个要对代码熟悉后可以进行，对于怀疑执行较慢的代码加上时间打点（System.currentTimeMillis())来确定其执行所花的时间。也就是说在编码的时候要有意识，对于持有怀疑态度的方法，要时不时的打时间点，以看其是否能放在主线程中。</p>

<h3>打开StrictMode</h3>

<p>这是一个开发者工具，能够帮助开发者检测到不经意间做的一些违反平台开发原则的事情，比如在主线程中做了IO操作或者主线程中操作网络等等。时至今日它能检测的远不止这些，还能检测主线程中的比较慢的方法调用，还有检测Dialog的泄露(Dialog未关闭，Activity就退出了），Activity的泄露以及未正确关闭的对象(Cursor, Binder)等。总之，它能帮助你减少因为代码写法不规范而造成的问题。详细的如何使用可以<a href="http://developer.android.com/reference/android/os/StrictMode.html">参考文档</a>。</p>

<h2>如何提升程序性能</h2>

<p>这个比较难，比如读取大文件必然耗时，从服务器上取数据肯定慢（比从本地读），但是聪明的人类还是有方法做的更好的：</p>

<h4>把业务逻辑弄简单点</h4>

<p>这个就不废话了，代码搬运工们没有太多的话语权。但是对于能控制的部分要做好，比如尽早失败，不重复等等。</p>

<h4>多用缓存</h4>

<p>缓存绝对是计算机技术一个非常重要的东西，发明这东西的人肯定是个天才。缓存无处不在，缓存的目的就是提高性能，加快访问速度，衡量缓存好坏就看命中率。CPU有三层缓存来提升运算性能。软件中缓存也是提升性能的一个非常重要的手段。</p>

<p>比如对于不太常变化的数据，从网络成功获取后就要缓存在本地；再如，对于经常访问的本地数据也要在内存中有缓存；用到的图片比较多的应用，要做内存和本地二级缓存，以减少图片的加载时间（比如<a href="https://github.com/nostra13/Android-Universal-Image-Loader">UIL</a>的做法）；</p>

<p>常见的缓存工具有内存级的<a href="http://developer.android.com/reference/android/util/LruCache.html">LruCache</a>以及磁盘级的<a href="https://developer.android.com/samples/DisplayingBitmaps/src/com.example.android.displayingbitmaps/util/DiskLruCache.html">DiskLruCache</a>，教程可以参考<a href="http://blog.csdn.net/guolin_blog/article/details/28863651">这里</a>。</p>

<h4>延迟加载和按需加载</h4>

<p>这个就容易理解一些，比如三层页面才用到的数据，你没必要一启动在第一级页面就加载它（当然，也可能有这样的情况，比如数据有依赖时）。</p>

<p>按需要加载就是，第一个页应该只加它需要的数据，而不是一个请求，把应用所有数据都拉下来。</p>

<h4>尽早发出异步请求</h4>

<p>对于像异步从网络获取数据，或者异步IO加载数据的，或者做一些费时的异步初始化等，可以尽早的把请求发送出去，在等待结果的同时再做其他事情，这样能保证结果最快的呈现出来。</p>

<h4>使用工具（开源库）</h4>

<p>这个就是，世上总有人比你聪明，他们的方法更巧妙，更高效，为什么不用呢？比如图片加载，比如网络库，比如JSON解析等等，那么多优秀的人做的优秀的东西不用太浪费了。要感谢那些优秀的开发者，总能找到合适的库，不但好用，而且开源，既然完成任务，又能学习，还有比这更好的事情么？</p>

<p>可以到<a href="https://github.com/wasabeef/awesome-android-ui">这里</a>和<a href="http://alamkanak.github.io/android-libraries-and-resources/">这里</a>来找需要的开源库。</p>

<h2>如何占用更少资源</h2>

<p>对于资源的使用首页的原则就是，尽量少用或者不用，听上去是废话，其实不然，有一些具体的可实践的准则可供参考。其实这里面的话题每一个都可以扩展成一整篇文章来探讨，这里仅列出一些要点，不作细致讨论。</p>

<h3>内存</h3>

<h4>尽可能的少创建对象</h4>

<p>主要的原则就是尽可能的复用，比如像对话框，或者Toast之类的都是可以复用的。再如尽可能的把创建对象放在循环外面等等。</p>

<h4>尽量缩短对象的生命周期</h4>

<p>比如能在一个调用链中传递的对象就没有必要非声明为成员变量。在方法尾部使用的对象就别在一进入方法时就创建。用户事件触发的逻辑就没有必要一进入页面时就创建。当onResume后才会使用到的对象就没有必要在onCreate里创建等等。</p>

<h4>避免内存泄露</h4>

<p>所谓内存泄露就是内存在不再使用之后仍没有得到释放，一般情况下它是无害的，无非也就多用点内存，现在设备内存越来越大，空着不用也浪费，但是内存总有用尽的时候。对于Android，更是如此，每个应用（进程）有固定的内存配额（HeapSize），它是由系统ROM决定的，所以一旦有泄露，程序必定会因OOM（Out Of Memory Error)而崩溃（其实崩溃了也是好事，一是你会重视，二是进程退出了，重新启动后内存泄露会得到一定的缓解），特别是现在应用中的图片和视频等多媒体元素越来越多，这些东西本来就吃内存，再来点泄露，那么发生OOM的机率大大增加。</p>

<p>Android中最容易泄露的对象就是Activity，Activity对象由系统创建，生命周都是由系统来控制，我们只能发送请求， 不能强行干预。正常情况下的Activity对象在onDestroy（）之后是要被回收的，所以如果在onDestroy以后仍有其他生命周期更长的对象持有对Activity对象的引用的话，就会导致Activity的泄露。</p>

<p>而Android中很多系统API都是需要Context（少量的是需要Activity，比如Dialog），而Activity又是Context的一个实现，因此啊，很多人在很多时候都简单的把Activity对象直接传了过去，很多系统API的生命周期要比应用程序长的得多，这就是导致Activity对象泄露的原因。避免这种泄露很简单，就是尽可能传ApplicationContext，也就是说不要直接传Activity对象，而是传activity.getApplicationContext()。因为ApplicationContext一个应用只有一个，也就是说一个手机里只有一个，而且系统本身就会缓存它，所以长一点持有它也没关系。当然要视情况而定，比如像Dialog虽然是Context，但必须传Activity。</p>

<h4>缓存对象，以避免复创建</h4>

<p>比如像Dialog对象，可以缓存起来以避免每次都创建新的。</p>

<p>对于大量的缓存对象可以使用<a href="http://developer.android.com/reference/android/support/v4/util/LruCache.html">LruCache</a>来管理。</p>

<h4>对于缓存，尽量用WeakReference</h4>

<p>特别是像Activity和Fragment以及Service等有固定生命周期，且生命周期又是由系统来控制的对象，最好加持有WeakReference。</p>

<h4>监听onTrimMemory和onLowMemory，以采取措施</h4>

<p>当系统内存吃紧的时候会向Activity发送通知，此时可以做一些措施，比如释放不用的资源，释放不用的对象，清空缓存等以缓解压力。</p>

<h4>内存使用监测工具和分析方法</h4>

<p>可以时不时的用监测工具来监测一下应用所消耗的内存，有这些方式：</p>

<ul>
<li>adb shell dumpsys meminfo <pkgname></li>
<li>Android Device Monitor - (其实就是早期的DDMS的进化版本)监测用的GUI工具，选择进程，然后update heap，就能实时看到heap使用情况</li>
<li>AndroidStudio 已经集成了内存监测工具，可以实时看到内存的使用情况。</li>
<li>MAT - Memory Analysis Tool它是Java的标准内存分析工具，安卓的dex不直接支持，但无妨，可先用monitor dump出prof文件，再用SDK中的工具hprof-conv进行转换后MAT就认识了。详细的可以参考<a href="http://androidperformance.com/2015/04/11/AndroidMemory-Usage-Of-MAT/">这篇文章</a>。</li>
<li>更多的Java内存使用建议可以参考<a href="http://androidperformance.com/2015/07/20/Android-Performance-Memory-Java/">这篇文章</a>.</li>
<li><p>学会查看GC输出的信息</p>

<p>Logcat日志中的GC信息也能非常直观看出内存的使用情况，而且看出性能上的原因，特别是UI卡顿，或者动画丢帧等情况。因为GC或者说频繁的GC发生，是会影响到应用性能，特别是会影响UI线程。GC的日志通常能看出触发GC的原因，释放掉了多少内存以及花了多少时间，具体的还跟虚拟机的版本不一样而不同，下面分别来详细的讲述：</p>

<ul>
<li><p>Dalvik</p>

<p>Dalvik虚拟机GC的日志格式如下：</p>

<blockquote><p>dalvikvm: &lt;reason&gt; &lt;freed&gt;, &lt;free memory&gt;, &lt;time&gt;</p></blockquote>

<ul>
<li>reason &ndash; 触发GC的原因</li>
<li>freed &ndash; 此次GC释放了多少内存</li>
<li>free memory &ndash; 还有多少空闲的内存空间</li>
<li>time &ndash; 此次GC花费多少时间</li>
</ul>


<p>其中reason又有几个：</p>

<ul>
<li>GC_CONCURRENT</li>
<li>GC_MALLOC</li>
<li>GC_EXPLICT</li>
<li>GC_BEFORE_OOM</li>
</ul>
</li>
<li><p>ART</p>

<p>ART虚拟机的GC格式比Dalvik要详细一些：</p>

<blockquote><p>I/art: &lt;GC_Reason&gt;&lt;Amount_freed&gt;,&lt;LOS_Space_Status&gt;,&lt;Heap_stats&gt;,&lt;Pause_time&gt;,&lt;Total_time&gt;</p></blockquote></li>
</ul>


<p>  更多内容可以参考<a href="http://mp.weixin.qq.com/s?__biz=MzI1MTA1MzM2Nw==&amp;mid=400021278&amp;idx=1&amp;sn=0e971807eb0e9dcc1a81853189a092f3&amp;scene=0#rd">这篇文章</a>。</p></li>
</ul>


<p>准确的来讲MAT是分析工具而非监测工具，也就是当发现有内存泄露的时候抓一段heap的使用情况用MAT来分析。其他几个都可以用来监测，也就是说看一下内存是否有问题，表现都是当操作时内存使用会有所增加，但当操作停止后内存应该迅速回落到操作前的水平。重复操作，内存使用不应该一直增加。如果长时间内存没回落或者内存一直增长，那么就很可能存在内存没有释放掉，就要抓heap然后用MAT分析，看是哪里出了问题。</p>

<h3>CPU</h3>

<h4>减少忙等待</h4>

<p>也就是说使用注册Listener（通俗的就是callback）方式来处理异步事件，而不是忙等待：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// DO NOT do this</span>
</span><span class='line'><span class="k">while</span> <span class="o">(</span><span class="n">somethingNotReady</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">sleep</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>合理使用线程</h4>

<p>理性的仅在有必要的费时操作启动worker线程来完成。不要盲目的创建线程。线程多了，不一定性能就上去了，反尔会带来同步的无尽烦恼和不可捉摸的诡异偶现Bug，而且频繁的<a href="https://en.wikipedia.org/wiki/Context_switch">Context Switch</a>也会带额外的损耗。</p>

<p>对于频繁执行的异步任务，最好使用<a href="http://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor.html">线程池</a>，一方面可以复用资源，另一方面也方便控制。</p>

<p>对于长时间执行的任务，或者有Server用途的长时间工作线程，要使用<a href="http://developer.android.com/reference/android/os/Looper.html">Looper</a>和消息队列<a href="http://developer.android.com/reference/android/os/Handler.html">Handler</a>，详细的可以参考<a href="http://blog.csdn.net/hitlion2008/article/details/8194510">这篇文章</a>。</p>

<p>仅当需要与UI有交互的情况下才考虑使用<a href="http://developer.android.com/reference/android/os/AsyncTask.html">AsyncTask</a>，具体看<a href="http://blog.csdn.net/hitlion2008/article/details/7983449">这篇文章</a>。</p>

<h4>严格控制Service的生命周期，做到按需启动，及时停止</h4>

<p>安卓的Service绝对要为手机的卡顿负一部分责任，系统放任Service，Service的控制权都在开发者手中，所以Service被滥用的特别严重。打开手机的设置，看看正在运行的应用程序，可以发现几乎所有的应用都有至少一个到二个左右的Service进程在运行。所以说安卓能不耗电么，能不卡么，能不耗流量么，跟水果手机咋比啊。</p>

<p>为了体现专业性，使用Service就要小心，当有需求的时候再启动（startService or bindService），当不用了就stopSelf or stopService。</p>

<h4>监测工具</h4>

<p>在Android Studio中有工具可以监测CPU的使用情况</p>

<h3>磁盘</h3>

<h4>没必要存的东西就不要存</h4>

<p>比如直接作用到UI层面的一些信息，显示完就不再使用了，这种数据是没有必要缓存到磁盘上的，至多在内存中缓存就可以了。</p>

<h4>不是长期使用的就用临时文件，且是用标准API创建的临时文件</h4>

<p>在同一个启动Session中，不同阶段都要使用的数据，可以用临时文件来存取，比如启动时，或者加载完时创建一个临时文件来存储，后面再使用。创建临时文件要用标准的File#createTempFile方法，而不是创建一个普通文件当作临时用。因为常常会忘记删除掉，即使有删除动作，但假如有异常出现，也会走不到删除。久而久之磁盘上的垃圾文件会越来越多。</p>

<h4>如果不再需要就及时的删除文件</h4>

<p>这个可以讲其实国内的甚至国外的绝大多数软件做的都不好，特别是机身存储和SD扩展卡上面的内容，因为这些区域是开放给所有App的，而且容量一般都很大，所以大家都很高兴的写，没有人去删除。这也是为什么市场上面的清理软件如此的受欢迎。作为良心开发者，还是自己擦自己的屁股吧！</p>

<h4>定期整理数据库，删除旧数据</h4>

<p>数据库也跟磁盘一样，长期使用后会有过期的数据，也是需要清理的。</p>

<p>另外，由于数据库不断的增删改，会导致数据库文件产生断层（文件大小不必要的大于实际内容），或者碎片，这时就需要<a href="https://sqlite.org/lang_vacuum.html">execute(&ldquo;vacuum&rdquo;)</a>来重新生成数据库文件。当然这个比较有风险，而且耗时比较长，所以，只有当达到一定时间时才有必要这样做。</p>

<h4>给APK瘦身</h4>

<p>虽然，安卓应用程序发布较PC软件非常之容易，各大应用市场傻瓜式的一键式搞定，但是，用户仍然需要下载和安装，这期间APK的大小直接影响应用的成功安装率，小的APK文件，下载快，耗流量少，安装快，占用ROM也少，低端机型的ROM没那么大。所以APK的瘦身也是势在必行的一个优化指标。</p>

<p>一般来说有这么几个方面，可以去下功夫：</p>

<ul>
<li><p>删除无用资源</p>

<p>不再使用的图片，布局，库不但增加目标文件大小，而且会延长编译和打包的时间。不用了就删除，后面用的时候再还原。如果代码太多，或者不够熟悉搞不清该不该删除，可以参考<a href="http://developer.android.com/tools/debugging/improving-w-lint.html">lint</a>的warning信息。</p></li>
<li><p>删除无用代码</p>

<p>这个比资源还严重，其实不用的代码对包增大没太大的作用，但是没有代码会严重影响项目的清析度和可维护性。比如新人来了，看一坨代码，最后发现半坨都是没用的代码，心中必有万个马在奔腾。不用了就删除，以后用到时可再还原，版本控制就是专门干这事的。</p></li>
<li>集中使用xhdpi（或者xxhdpi），对于确实适配有问题的资源再添加其他支持(hdpi)，一般情况下足够了</li>
<li>对于PNG图片，可以使用<a href="http://www.p-edge.nl/eng/products/pngshrink">pngshrink</a>或者<a href="https://pngquant.org/">pngquant</a>来进行一下无损压缩，之后再放入工程。视觉给的图都能达到50%~70%的压缩率。</li>
<li><p>使用混淆器</p>

<p>一方面防小白反编译你的项目，虽然可能也没啥有技术含量的代码，但让人家那么容易就获得了你的全部源码，也还是挺闹心的（虽然，可能你的代码也都是Github+Google来的，哈哈哈）；另外一方面就是混淆，特别是Android中最流行的<a href="http://developer.android.com/tools/help/proguard.html">ProGuard</a>，能显著的减少目标dex的大小。</p></li>
</ul>


<h3>网络流量</h3>

<p>对于这点，其实优先级没那么高，现在Wifi覆盖越来越广，移动流量资费也越来越便宜，套餐越来越实惠，所以这些问题不必太纠结。</p>

<h4>对于更新时间比较长的要缓存到本地存储，以避免重复请求</h4>

<p>这个其实也是提升响应速度的一个方式，对于更新周期比较长，且时效性要求不高的数据可以缓存在本地。客户端每隔一定时间更新一次。</p>

<h4>服务端主动推送更新通知</h4>

<p>就是对于数据，客户端拿到后就缓存着，当数据有更新时服务端推送通知给客户端，然后客户端再来获取。这样即可以保证数据的更新到达，又可以减少不必要的网络请求。</p>

<h4>差分获取更新数据</h4>

<p>当已经拿到了数据后，想要更新时，可以让服务端返回数据的差异，而不是返回整个数据，客户端拿到数据后再做融合。</p>

<h4>无论是请求还是服务器返回，没有用的参数不要带上</h4>

<h4>使用压缩技术请求加上&#8221;Accept-Encoding&#8221;=gzip, deflate</h4>

<p>无论是上传文件还是下载文件尽可能压缩一下，即使不为了省流量，也能提升些响应速度。当然这个需要服务端配合，如果无法控制服务端就没有办法了。</p>

<h4>对于要下载，事先判断网络类型，并给予提示，让用户来选择</h4>

<p>相对于上面几点，这点倒是要注意，比如更新，或者下载插件，要判断网络类型，如果是移动网络，给出提示，让用户自己来判断。</p>

<h2>参考资料</h2>

<ul>
<li><a href="http://blog.chengyunfeng.com/?p=458">Android 性能分析案例</a></li>
<li><a href="http://coderrobin.com/2015/05/04/android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%AC%94%E8%AE%B0/">android性能优化笔记</a></li>
<li><a href="http://blog.venmo.com/hf2t3h4x98p5e13z82pl8j66ngcmry/performance-tuning-on-android">Performance Tuning On Android</a></li>
<li><a href="http://android-performance.com/android/2014/04/24/android-strict-mode.html">StrictMode 详解</a></li>
<li><a href="http://droidyue.com/blog/2015/09/26/android-tuning-tool-strictmode/">Android性能调优利器StrictMode</a></li>
<li><a href="http://stackvoid.com/performance-tuning-on-android/">Android App 性能优化实践</a></li>
<li><a href="https://developer.android.com/tools/debugging/debugging-memory.html">Investigating Your RAM Usage</a></li>
<li><a href="http://blog.csdn.net/yanbober/article/details/48394201">Android应用开发性能优化完全分析</a></li>
<li><a href="http://www.cnblogs.com/coding-way/p/4294225.html">HierarchyView的实现原理和Android设备无法使用HierarchyView的解决方法</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Studio技能之快捷键]]></title>
    <link href="http://toughcoder.net/blog/2015/09/07/tricks-of-android-studio-shortcuts/"/>
    <updated>2015-09-07T23:10:27+08:00</updated>
    <id>http://toughcoder.net/blog/2015/09/07/tricks-of-android-studio-shortcuts</id>
    <content type="html"><![CDATA[<p>Android Studio是谷歌新一代的Android开发IDE，老一代的Eclipse+ADT已被无情的废弃。</p>

<p>Android Studio基于JetBrains的IntelliJ IDEA，这是一个在Java界享有不错声誉的IDE，它以“Intelligent”著称。AS是谷歌基于IntelliJ开发的，加上了一套专门为Android定制的插件系统。早期的时候AS＝IntelliJ + Android插件。但是现在没那么简单了，貌似AS中有的东西，在插件中却没有，具体的搞不太清楚了。</p>

<p>说了这么多都是废话。这里总结一下AS使用过程中常用的快捷键。</p>

<p><a href="http://toughcoder.net/blog/2015/09/07/tricks-of-android-studio-shortcuts/"><img src="http://i.imgur.com/sSQV4G0.png" width="480" height="320"></a></p>

<!-- more -->


<h2>键盘的map（keymap)</h2>

<p>本质上讲AS就是IntelliJ，所以核心的东西是一样的，比如配置和快捷键，IntelliJ中快捷键是可以配置的，不但可以配置具体快捷键的组合，而且可以配置一套组合，或者叫作风格，也就是说可以按照喜好还定义不同的组合。支持的有：</p>

<ul>
<li>Mac OS X 10.5+</li>
<li>Mac OS X</li>
<li>Emacs</li>
<li>Visual Studio</li>
<li>Default for XWin</li>
<li>Default for GNOME</li>
<li>Default for KDE</li>
<li>Eclipse</li>
<li>Eclipse (Mac OS X)</li>
<li>NetBeans 6.5</li>
<li>JBuilder</li>
</ul>


<p>这里预定义的集合是相应的系统或者IDE所惯用的快捷键，所以如果你熟悉其中某些IDE，可以直接使用对应的风格，以更快的适应AS。</p>

<p><em>注意</em>： 这里介绍的快捷键是基于<strong>Mac OS X</strong>这个风格的。</p>

<p><em>注意</em>： 另外，对于所有JetBrains的产品比如PyCharm或者WebStorm，都是一样的。</p>

<p><em>注意</em>： 这里默认是Mac平台，如果是Windows或者Linux，把CMD换成Ctrl就可以了。</p>

<h2>选择的快捷键</h2>

<ul>
<li>可以用鼠标来选择，这个是显而易见的</li>
<li><strong>Shift + Up/Down/Left/Right</strong> 来选择</li>
<li><strong>Shift + 鼠标</strong>来选择，这个更灵活</li>
<li><strong>CMD + w</strong>&mdash; Expand selection, 比如选择光标所在的一个词，再按一次会选择更多，甚至一行。这个键比较强大，根据光标所在的内容不同表现也不略微不同，可以慢慢体会。</li>
<li><strong>Shift + CMD + w</strong> &mdash; Shrink selection，减少选择</li>
<li><strong>CMD + a</strong> &mdash; select all</li>
</ul>


<h2>基本快捷键</h2>

<ul>
<li><strong>CMD + s</strong>&mdash; 保存文件</li>
<li><strong>CMD + x</strong>&mdash; 剪切</li>
<li><strong>CMD + v</strong>&mdash; 粘贴</li>
<li><strong>CMD + z</strong>&mdash; Undo</li>
<li><strong>CMD + f</strong>&mdash; 查找</li>
<li><strong>CMD + r</strong>&mdash; 查找和替换</li>
<li><strong>ESC</strong> &mdash; 用于关闭打开的对话框，或者退出正在进行的重构</li>
</ul>


<h2>导航类快捷键</h2>

<ul>
<li><strong>CMD + F12</strong> &mdash; 打开类的outline，类似于Eclipse的Ctrl + o，还可以快速索引</li>
<li><strong>CMD + b</strong>&mdash; 打开函数或者一个类的定义</li>
<li><strong>CMD + u</strong>&mdash; 打开当前类的父类中的方法(super method)</li>
<li><strong>CMD + e</strong>&mdash; 打开一个最近打开的文件，也就是从最近打开过的文件中快速索引</li>
<li><strong>Shift + CMD + n</strong> &mdash; 快速打开一个文件</li>
<li><strong>CMD + n</strong>&mdash; 快速打开一个类</li>
<li><strong>CMD + fn + Left/Right</strong> &mdash; 移动到文件的第一行和最后一行</li>
<li><strong>CMD + Left/Right</strong> &mdash; 移到一行的开头或结尾，类似PC上的HOME/END</li>
<li><strong>CMD + 1(数字1）</strong>&mdash; 打开或者关闭Project侧边栏</li>
<li><strong>Option + CMD + Left/Right</strong> &mdash; 回到上一个/下一个编辑处</li>
<li><strong>CMD + g</strong>&mdash; 去到某一行</li>
<li><strong>Ctrl + h</strong>&mdash; 打开类的层次关系</li>
<li><strong>Ctrl + Option + h</strong>&mdash; 打开方法的调用路径，也就是当前方法被调用的层次关系</li>
<li><strong>Option + CMD + Up/Down</strong> &mdash; 在类层次关系中移动，打开父类或子类</li>
<li><strong>CMD + ;</strong> &mdash; 打开Project structure</li>
<li><strong>Option + F7</strong> &mdash; 查找使用(Find usages)</li>
<li><strong>CMD + F7</strong> &mdash; 在当前文件中查找使用</li>
<li><strong>CMD + Shift + i</strong> &mdash; 不离开当前窗口快速预览某个方法或者类的实现</li>
<li><strong>CMD + Shift + a</strong> &mdash; 可以索引快捷键设置，当忘记快捷键时，非常有用</li>
<li><strong>CMD + p</strong> &mdash; 显示当前方法的参数</li>
<li><strong>Shift + Shift(Double Shift)</strong> &mdash; 全局搜索，整个项目范围内搜索任何文件或者字串</li>
<li><strong>CMD + F4</strong> &ndash; 关闭当前的文件Tab</li>
</ul>


<h2>代码相关</h2>

<ul>
<li><strong>CMD + o</strong> &mdash; 从父类中override一个方法</li>
<li><strong>Option + Enter</strong> &mdash; quick fix快速修复编译错误，比如导入类，实现父类方法等</li>
<li><strong>CMD + Option + l</strong> &mdash; 重新格式化代码，也就是按照预定义的代码格式来格式化代码</li>
<li><strong>CMD + Option + o</strong> &mdash; 优化导入语句</li>
<li><strong>CMD + Option + i</strong> &mdash; 调整缩进，或者叫做自动更正缩进</li>
<li><strong>Shift + CMD + &lsquo;+&rsquo;</strong> &mdash; 打开一个文件中的所有代码折叠</li>
<li><strong>Shift + CMD + &lsquo;-&rsquo;</strong> &mdash; 进行代码折叠</li>
<li><strong>Ctrl + Option + Space</strong> &mdash; 智能补全</li>
<li><strong>Shift + F6</strong> &mdash; 重构，重命名一个变量</li>
<li><strong>CMD + F6</strong> &mdash; 修改函数的签名</li>
<li><strong>Option + CMD + m</strong> &mdash; 提炼方法(Extract method)</li>
<li><strong>Option + CMD + f</strong> &mdash; 提炼成员变量</li>
<li><strong>Option + CMD + c</strong> &mdash; 提炼常量</li>
<li><strong>Shift + CMD + u</strong> &mdash; 把变量名方法名或者类名进行大小写转换</li>
</ul>


<h2>行操作&ndash;基本单位都是行</h2>

<ul>
<li><strong>CMD + y</strong>&mdash; 以行为单位进行删除，可以先选择多行，如果没有选择，就是当前行</li>
<li><strong>CMD + d</strong>&mdash; 以行为单位进行复制，可以先选择多行，如果没有选择，就是当前行</li>
<li><strong>CMD + Shift + Up/Down</strong> &mdash; 把行向上移动或向下移动，这个在调整代码的时候非常实用</li>
<li><strong>CMD + /</strong> &mdash; 注释掉所选择的行</li>
<li><strong>Ctrl + Shift + j</strong> &mdash; 把二行合为一行，把下行合到当前上来</li>
</ul>


<h2>一些方便的配置</h2>

<h3>查看每一行的历史改动</h3>

<p>右键行号右边的空白区域，然后选择Annotate，会出现一个面板显示每一行的最后一次改动，鼠标停在上面会显示commit信息，点击会显示某个commit的相关信息。
<img src="https://img.alicdn.com/imgextra/i1/715978679/TB22wy5jVXXXXbxXpXXXXXXXXXX_!!715978679.png"></p>

<p><img src="https://img.alicdn.com/imgextra/i1/715978679/TB23mKZjVXXXXcxXpXXXXXXXXXX_!!715978679.png"></p>

<p><img src="https://img.alicdn.com/imgextra/i4/715978679/TB21kzcjVXXXXc7XXXXXXXXXXXX_!!715978679.png">
其实，这就是把git blame可视化并集成在了AS里。</p>

<p><strong>注意</strong>：要添加了VCS root后才能使用Annotate。另外也可以为此配置一个快捷键.</p>

<h3>安装adb idea插件</h3>

<p>安装后，按二次Shift就可以快速搜索执行ADB命令了。
<img src="https://img.alicdn.com/imgextra/i1/715978679/TB2CQfXjVXXXXXFXpXXXXXXXXXX_!!715978679.png"></p>

<p><img src="https://img.alicdn.com/imgextra/i2/715978679/TB2A7HojVXXXXaoXXXXXXXXXXXX_!!715978679.png"></p>

<h3>代码自动提示改成大小写不敏感</h3>

<p><img src="https://img.alicdn.com/imgextra/i3/715978679/TB2TUrrjVXXXXX4XXXXXXXXXXXX_!!715978679.png"></p>

<h3>鼠标悬停显示文档信息</h3>

<p><img src="https://img.alicdn.com/imgextra/i4/715978679/TB24l2gjVXXXXchXXXXXXXXXXXX_!!715978679.png"></p>

<p><img src="https://img.alicdn.com/imgextra/i4/715978679/TB24l2gjVXXXXchXXXXXXXXXXXX_!!715978679.png"></p>

<h3>自动优化class imports</h3>

<p>这玩意儿，谁愿意手动去搞它呢？所以让IDE帮你搞定吧！</p>

<p><img src="https://img.alicdn.com/imgextra/i1/715978679/TB2ih1_jVXXXXX9XpXXXXXXXXXX_!!715978679.png"></p>

<h2>参考资料</h2>

<ul>
<li><a href="https://developer.android.com/sdk/installing/studio-tips.html">官方指导</a></li>
<li><a href="http://www.androidgreeve.com/2013/12/android-studio-shortcuts-you-should-know.html">Android Studio shortcuts you should know</a></li>
<li><a href="http://zlv.me/posts/2015/07/13/14_android-studio-tips/">倍数提高工作效率的Android Studio奇技</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[优秀代码赏析：CircleImageView]]></title>
    <link href="http://toughcoder.net/blog/2015/08/25/understanding-circleimageview/"/>
    <updated>2015-08-25T23:29:26+08:00</updated>
    <id>http://toughcoder.net/blog/2015/08/25/understanding-circleimageview</id>
    <content type="html"><![CDATA[<h2>核心功能</h2>

<p>实现一个圆形的ImageView，或者说让一个View来显示一个圆形的图片。</p>

<h2>核心思路</h2>

<p>这个库短小精悍，全部代码才200多行，核心代码也就几十行，却实现了一个看似不简单的功能。</p>

<p>要想实现圆形的图片，常规一般的人的思路，用图像处理的方式来解决，就好比显示圆角矩形图片那样。但是这个库的作者的思路十分的巧妙，它的核心思路就是把图片画在一个圆上面。</p>

<p><a href="http://toughcoder.net/blog/2015/08/25/understanding-circleimageview/"><img src="https://img.alicdn.com/imgextra/i1/715978679/TB2OpLjjVXXXXXoXpXXXXXXXXXX_!!715978679.png"></a></p>

<!-- more -->


<p>首先要解释一下Shader（着色器）的概念，它的作用就是如何填充一个几何图形，图像学里面画一个可见的几何图形分二步，一个画形，另一个就是着色。比如我们常用的shape或者text，除了形状外，还有颜色，这也是一种着色方式，只不过是我们熟悉的颜色罢了。Shader最为常见的就是颜色，另外还可以是其他几何图形，纹理和图片。比如PhotoShop里面画东西时刷子的样式有无数种，矩形，三角，球，毛状的，其他图像等等，这也都是Shader。在Android中支持的Shader有颜色，也还有图片（Bitmap），也就是说可以把一个图片当成着色器，来画在几何形状上面，这也就是这个库的精妙所在。</p>

<h2>关键代码解析</h2>

<h3>准备资源</h3>

<p>这里的资源包括二个，一个是图片资源，另一个就是边缘的颜色。圆形外面还有一个border。图片资源跟标准的ImageView是一样的，可以是资源，可以是URI，可以是Drawable也可以是Bitmap。这些东西都要要转化成为Bitmap，再生成BitmapShader放在Paint对象里。</p>

<p><img src="https://img.alicdn.com/imgextra/i1/715978679/TB2RjLdjVXXXXaXXpXXXXXXXXXX_!!715978679.png"></p>

<h3>绘制</h3>

<p>这个类的绘制是相当简单的，onDraw的关键代码只有二行，只做了二件事：</p>

<p><img src="https://img.alicdn.com/imgextra/i2/715978679/TB2UdDojVXXXXbSXXXXXXXXXXXX_!!715978679.png"></p>

<ul>
<li>用BitmapShader画一个圆</li>
<li>用border颜色画一个圆的边缘</li>
</ul>


<h3>缩放</h3>

<p>仅支持CenterCrop，缩放方式。也就是把图片等比缩放(也就是长和宽都按同一比例来缩放，以保证图片不变形)，以让最小的边刚好占满View的区域，大的一边如果超出会进行Crop。</p>

<p><img src="https://img.alicdn.com/imgextra/i1/715978679/TB2IbhDcpXXXXcLXpXXXXXXXXXX_!!715978679.png"></p>

<p>为了进行CenterCrop，就要计算出View区域长宽与图片长宽的最大比例，然后把图片长和宽都以此为比例来缩放。再把超出的一边进行Crop。</p>

<p><img src="https://img.alicdn.com/imgextra/i1/715978679/TB2bSrpjVXXXXbHXXXXXXXXXXXX_!!715978679.png"></p>

<p>详细的来解释下，如图所示，vw为目标View的区域的宽度，vh为目标区域高度，bw为图像的宽，bh为图像的高，只能是二种情况：过宽或者过高，图示第一种情况，明显是过高，所以缩放比例为vh/bh，按此比例缩放后nbw = bw*vh/bh > vw，所以要进行裁剪，左右各裁剪掉(nbw - vw)/2；对于第二情况也是如此。至于作者在translate时，为何都多加了个0.5个像素，是为了做round(四舍五入)，前面计算dx和dy时会做除2，而移动必须是以整数像素为单位，所以要做下round。</p>

<h2>项目地址</h2>

<p><a href="https://github.com/hdodenhof/CircleImageView">https://github.com/hdodenhof/CircleImageView</a></p>

<h2>如何使用</h2>

<p>优秀的库都是非常的易学易用，这个也不例外，简单来个例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;de.hdodenhof.circleimageview.CircleImageView</span>
</span><span class='line'>            <span class="na">xmlns:app=</span><span class="s">&quot;http://schemas.android.com/apk/res-auto&quot;</span>
</span><span class='line'>            <span class="na">android:layout_width=</span><span class="s">&quot;160dp&quot;</span>
</span><span class='line'>            <span class="na">android:layout_height=</span><span class="s">&quot;160dp&quot;</span>
</span><span class='line'>            <span class="na">android:layout_centerInParent=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>            <span class="na">android:src=</span><span class="s">&quot;@drawable/hugh&quot;</span>
</span><span class='line'>            <span class="na">app:border_width=</span><span class="s">&quot;2dp&quot;</span>
</span><span class='line'>            <span class="na">app:border_color=</span><span class="s">&quot;@color/dark&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>就像使用标准ImageView那样使用就好了，仅是多了特有的前缀来指定它需要的参数。更详细的可以参考官方的<a href="https://github.com/hdodenhof/CircleImageView/tree/master/sample">Sample</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何跳过Nexus 7二代的开机设置]]></title>
    <link href="http://toughcoder.net/blog/2015/08/15/skip-setup-wizard-for-nexus-7/"/>
    <updated>2015-08-15T16:47:55+08:00</updated>
    <id>http://toughcoder.net/blog/2015/08/15/skip-setup-wizard-for-nexus-7</id>
    <content type="html"><![CDATA[<h2>事情是酱紫的</h2>

<p>Neuxs 7二代，2013年款，14年某宝上面买的，为了体验最新的Android版本，以及奶七的高性价比，于是就买了一个，之后也一直用着比较爽，电影，游戏，看书，看代码，体验原生Android，体验GMS，都是相当不错，直到今年4月份，突然有一天，触摸屏失灵了，在重启了之后，触摸能用了，但是反应不灵，有时要点好几次才有反应，有时则是好的。当时错误以为是装的软件太多了，反应慢，于是干了一件蠢事，做了Factory reset，重启后，一直卡在开机设置页面，网络连接始终不行，无法完成开机设置。</p>

<p><a href="http://toughcoder.net/blog/2015/08/15/skip-setup-wizard-for-nexus-7/"><img src="http://images.anandtech.com/doci/6048/GoogleIO2012-116.jpg" width="480" height="320"></a></p>

<!-- more -->


<p>想尽各种办法，使用代理，等，最终还是没用。刷了各种版本的Image都一个鸟样，有人说多试几次，就可以跳过，但是始终无法跳过。后来有人说可能Google那个服务可能不在了，所以即使翻了墙，也还是无法连接上。无奈刷了MIUI，但是版本只是4.4，也失去了奶七的特色。想着刷其他ROM的时候，有了新的发现。</p>

<p>最后发现了<a href="http://forum.xda-developers.com/showthread.php?t=1909602">这篇神贴</a>，讲述如何跳过Nexus 7的开机设置，虽然是2012看款奶七，也就是Nexus 7一代，但是仍然值得一试。</p>

<p>它的思路就是系统相关的特性都会存在系统的配置文件（/system/build.prop）之中，如果以ROOT方式连接ADB，那么我们就能修改此文件。也就能跳过开机设置的网络连接，甚至跳过开机设置。而高级的recovery都支持ADB，且是以ROOT身份，所以就有了如下的方法：</p>

<h2>具体方法</h2>

<p><em>注意</em>: 这是在Ubuntu下面进行，Mac平台的操作是一样的。对于Windows也差不多，只是需要安装手机的驱动程序，驱动程序可以到Goolge官方去下载。</p>

<p><em>注意</em>: 前提条件是要有ADB和fastboot命令，安装了SDK后就都有了</p>

<ol>
<li><p>先解锁bootloader</p>

<p>这个对于奶七还是很简单的，先重启到fastboot模式，关机，按Power+Volumn down来启动，就会启动到fastboot模式，这个模式可以做很多事情。</p>

<p><em>注意</em>: 对于Windows系统，需要安装手机的驱动程序，不会的可自行Google</p>

<p><em>fastboot oem unlock</em> 就可以解锁bootload</p></li>
<li>下载<a href="http://www.clockworkmod.com/">CWM recovery</a></li>
<li><p>安装recovery</p>

<p>fastboot flash recovery &lt;<em>clockworkmod-recovery.img</em>&gt;</p></li>
<li><p>更改配置</p>

<p>安装完recovery后，重启到recovery模式，在fastboot模式下，用Volumn up/down来选择recovery，按Power选中，就可以重启到recovery mode</p>

<p>连接到电脑，就可以执行ADB命令了，需要注意的是，要先mount一下/system分区，recovery会有一个菜单叫mount storage，进去，选择mount /system，如果不mount /system，你会找不到build.prop文件，因为所在的shell及文件系统是recovery的，并不安卓系统的。</p>

<p>之后adb shell cat /system/build.prop就能看到配置信息了</p>

<p>adb shell sed -i &rsquo;s/ro.setupwizard.network_required=true/ro.setupwizard.network_required=false/g&#8217; /system/build.prop</p>

<p><em>注意</em>: 上面是针对最新5.1.1 (LMY48I)的image。对于早期版本，比如4.4 （JSS15Q），配置项是ro.setupwizard.wifi_required，但是改此项并不管用，而是要跳过开机设置才管用也即添加ro.setupwizard.mode=DISABLED到/system/build.prop</p></li>
<li><p>重启</p>

<p>adb命令重启木有用，还是用recovery上面的菜单来重启。因为这个ADB是recovery提供的，你会发现里面有很多安卓本身没有的比如像find像sed，因为这个Shell是由recovery里的busybox提供的，安卓系统还没有加载，自然reboot木鸟用。</p></li>
</ol>


<h2>总结与评论</h2>

<p>首先说Google酱紫的做法还是蛮恶心的，完全不考虑我大天朝的人怎么办！连接网络可以有，但至少可以跳过或者忽略啊！不能强制用户，网上也有其他人有此报怨（米国人），因为买奶七的人不一都有网络（那个报怨的米国人就是，大意是给他老爹买的，老爹那里木WiFi，所以很郁闷，无法激活）。</p>

<p>其次，就是解决问题的思路，惭愧虽搞了安卓几年，但是没想出通过设置来跳过开机设置这等高招。XDA论坛还是高手云集的地方，ROOT，recovery和各种Hack基本上都源自XDA论坛。以后遇到这种完全无思路 的问题还是要多救助网络和社区，否则自己搞鼓一辈子，可能也想不到好方案。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[实战技巧：Android异步指南]]></title>
    <link href="http://toughcoder.net/blog/2015/05/25/effective-android-asynchrony/"/>
    <updated>2015-05-25T23:49:19+08:00</updated>
    <id>http://toughcoder.net/blog/2015/05/25/effective-android-asynchrony</id>
    <content type="html"><![CDATA[<p>异步向来都是提高性能的必要手段，当然也是引发问题的常见根源。Android之中更是如此，主线程事关应用的流畅程度，所以把更多能放在工作线程中事，放到工作线程中去，是提升App性能之必经之路。Android中使用线程有多种方式，我们该如何选择，以及在使用过程中要注意哪些问题，今天就来探讨一下。</p>

<p><a href="http://toughcoder.net/blog/2015/05/25/effective-android-asynchrony/"><img src="http://image.slidesharecdn.com/scandev-120418025620-phpapp02/95/threading-in-android-1-728.jpg?cb=1334718039"></a></p>

<!-- more -->


<h2>Bitmap处理</h2>

<p>在Android中显示图片，<a href="http://developer.android.com/reference/android/graphics/Bitmap.html">Bitmap</a>是必须要学会的。Bitmap是Android中抽象出来代表图片的类，把图片文件或者数据转化成Bitmap进而再放置到视图系统中显示。Bitmap的处理也常常会引发OOM问题。</p>

<p>关于Bitmap的处理，遵守二个原则，就是按需解析和及时释放。现在的图片文件都很大，但很多时候我们需要展示的区域（目标View的大小）却不是很大，这个时候就需要在解析的时候，适当的降低帧率，以减小所需要申请的内存。及时释放时也需要注意，要确定不用了，再释放，如果有View仍在显示时，在另外的地方把Bitmap释放了，那会引发异常的。</p>

<p>对于Bitmap的使用，<a href="http://developer.android.com/training/displaying-bitmaps/index.html">官方文档</a>有着比较详细的教程。现在的Android文档是很齐全的，相比较2010年代时2.0和2.1时多了很多最佳实践，所以不要浪费。</p>

<p>除内存外，Bitmap的处理也是比较耗时的，因为它经常涉及IO，以及压缩和处理，即使不耗时，因为它跟UI没关系，所以也是可以放在工作线程中去做的。Android中记住一个准则就是主线程做的事情越少越好，越少你的应用就越流畅。至于如何具体的去做也建议参考<a href="http://developer.android.com/training/displaying-bitmaps/process-bitmap.html">官方教程</a>。</p>

<h2>异步的方式</h2>

<p>在Android中异步实现的方式非常多：</p>

<ul>
<li>Thread</li>
<li>AsyncTask</li>
<li>Executors</li>
<li>Handler, Looper</li>
</ul>


<p>各种方式的使用方法参阅相关文档或者查阅网上浆料就可以了。这里主要说一下区别和适用的场景：</p>

<h3>Thread</h3>

<p>这是Java的简单粗暴的方式，优点就是简单，方便。对于某些简单的，一次性的，不需要与主线程通信和操作UI，不是很频繁（一次启动执行一次），的费时操作，直接使用Thread方式还是相当方便的。</p>

<h3>AsyncTask</h3>

<p>这是Android中专门针对平台本身的特性而封装的一个类，它的优势在于与主线程通信方便，能非常方便的操作UI。所以使用AsyncTask的理由就是当你需要在异步操作完成时直接操作UI时，除此外，你不应该使用它。</p>

<p>使用AsyncTask时，最好使用AsyncTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);以免任务不能及时获得执行，详细原因可以看<a href="http://blog.csdn.net/hitlion2008/article/details/8194510">这篇文章</a>。</p>

<h3>Executors</h3>

<p>当有大量的任务，或者重复性的任务需要执行时，就要使用线程池来复用和管理线程。</p>

<h3>Handler与Looper</h3>

<p>这是Android事件循环的基础类，也是AsyncTask的实现方式，是线程间通信的利器。所以如果你有复杂的线程通信（通常是工作线程和主线程之间），可以使用这二个类来自行进行定义。</p>

<h3>其他的高级工具</h3>

<p>对于多线程，已经有足够的工具供我们使用比如java.util.concurrent.*，以及Universal Image Loader，或者EventBus，所以当设计时首先要看现在的工具能否满足我们的需求。而不是自己去实现，子曰：不能重复造轮子，就是就是这个道理。</p>

<h2>异步时要注意Activity的生命周期</h2>

<p>异步时最容易出错的就是忽略Activity的生命周期。比如，当异步执行完成了，Activity却退出了前台，或者已经结束，如果异步完成时要操作UI，那么这种情况下肯定会报错，具体的错误取决于场景。这个问题的解法就是在异步操作完成后要用Activity.isFinishing()来判断下Activity是否还是alive的。或者设置一个变量来查看Activity是否还在前台。</p>

<p>另外，即使异步操作中不涉及UI，那么当Activity转入后台，或者退出时，也要及时的终止工作线程，否则也会造成Activity的对象无法及时销毁而最终导致内存泄露。这个问题需要在设计异步task时把可取消考虑进去，当Activity退出前台时发送消息给线程，让其终止执行。对于常见的费时操作，比如IO，网络，复杂计算等在都要考虑取消，每一个小步骤执行前都要判断取消标志位，以及时终止操作。通常这需要在Activity中持有任务的引用，或者使用Executors来管理任务，或者有一个类似的对象来管理异步任务，当Activity退出时，来终止任务。或者使用EventBus这类工具来降低耦合。</p>

<h2>有用的资源</h2>

<p>关于Android中的异步已经有了一本专门的书了<a href="http://shop.oreilly.com/product/0636920029397.do">《Efficient Android Threading》</a>，内容还是比较丰富的，可以看一看。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初级前端的专业的CSS技巧]]></title>
    <link href="http://toughcoder.net/blog/2015/05/22/css-pro-tricks-for-starters/"/>
    <updated>2015-05-22T21:14:26+08:00</updated>
    <id>http://toughcoder.net/blog/2015/05/22/css-pro-tricks-for-starters</id>
    <content type="html"><![CDATA[<p>这篇文章的读者应该是刚开始开发，或者准备开始开发前端的有经验的开发者，总结了一些非常有用的可以快速上手的CSS布局技巧。</p>

<p><a href="http://toughcoder.net/blog/2015/05/22/css-pro-tricks-for-starters/"><img src="http://acodez.in/blog/wp-content/uploads/2013/10/banner-565x326.jpg"></a></p>

<h2>HTML的布局特点</h2>

<p>要理解默认的布局流，块级元素是从上到下，行内元素是从左到右。都是左对齐。</p>

<!-- more -->


<h2>一切皆为框，块级元素与行内元素</h2>

<p>HTML的元素分为二个种类，一个是块级元素，一个是行内元素。块级元素的特点是独自开启一行，且独自中据一行；行内元素的特点是在一行内显示，自己多大就占据多大空间。可以通过display属性来改变元素默认的显示属性。</p>

<p>常见的块级元素是：div, p, ol, ul, li</p>

<p>常见的行内元素是: a, img, span</p>

<h2>元素和容器</h2>

<p>对于常见的GUI框架，都有二种东西来做布局，一个是元素（通常叫Widget），另一个是布局管理器，也就是用于管理或者组合Widget用的。在安卓里就是View和ViewGroup。</p>

<p>使用布局管理器的目的也很简单，就是为了把部分变成整体，方便操作。</p>

<p>div是用来组合和管理块级元素的。而span是用来组合和管理行内元素。</p>

<p>建议多多使用div和span来组合和管理你的布局，就像使用ViewGroup来管理和组合View一样。</p>

<h2>理解盒子模型</h2>

<p>其实，有过其他GUI框架经验的人理解盒子模型很容易，margin是border外的间距，padding是border内间距，整体元素占据的空间就是margin+border+padding+元素本身的大小。</p>

<p><img src="http://www.w3school.com.cn/i/ct_boxmodel.gif"></p>

<h2>父元素的大小与子元素的关系</h2>

<p>比如安卓，父元素的大小是受子元素影响的，父元素可是基于子元素大小来计算（wrap_content），当子元素超出父元素时，子元素是会被clip的。</p>

<p>CSS里却灵活的多，默认的，父元素的大小与子元素没有关系，需要分别单独指定，也无法让其wrap_content。当子元素的大小超过了父元素时，是通过overflow属性的决定如何显示的：hidden，表示clip；scoll表示用scrollbar来滚动。</p>

<h2>对齐方式</h2>

<p>左对齐或者右对齐也是布局中常见的需求。对于块元素可以通过float属性来控制，默认的float是left。当设置为right时，就可以把元素右对齐。通常后面跟一个clear: both来清除float属性。因为float会改变默认的布局流，后面所有的元素都将按此方式来排，当然这不是期望的。<a href="http://www.w3schools.com/css/css_float.asp">float的介绍</a>以及<a href="https://css-tricks.com/all-about-floats/">关于float</a>都是很好的文章。</p>

<p>当然，对于position不是static的，就要通过left/right来控制了。</p>

<h2>居中方式</h2>

<p>居中也是非常常见的一个需求。</p>

<h3>让某一个元素在整个屏幕中完全居中</h3>

<p>比如显示一个Dialog，肯定是要在屏幕中央显示的了。
让元素在整体屏幕居中，肯定要把元素从整体文档中拿出来，也就是不能用正常的文档流。所以这个元素应该是position: fixed，然后它的left和top要设置为50%，但是这样子后是元素的左上角是在屏幕正中，所以为了让元素居中还要把元素向左和向上移动其大小的50%，可以通过transform来实现，完整的CSS如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='CSS'><span class='line'><span class="nc">.center</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">display</span><span class="o">:</span> <span class="k">block</span><span class="p">;</span>
</span><span class='line'>   <span class="k">position</span><span class="o">:</span> <span class="k">fixed</span><span class="p">;</span>
</span><span class='line'>   <span class="k">top</span><span class="o">:</span> <span class="m">50%</span><span class="p">;</span>
</span><span class='line'>   <span class="k">left</span><span class="o">:</span> <span class="m">50%</span><span class="p">;</span>
</span><span class='line'>   <span class="n">transform</span><span class="o">:</span> <span class="n">translate</span><span class="p">(</span><span class="m">-50%</span><span class="o">,</span> <span class="m">-50%</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>详细的解释请参阅<a href="https://css-tricks.com/quick-css-trick-how-to-center-an-object-exactly-in-the-center/">这篇文章</a>。</p>

<h3>块级元素的居中方式</h3>

<p>把margin设置为auto一般情况下可以把块级元素居中，但需要指定元素的宽和高，这样浏览器才能计算出来，比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='CSS'><span class='line'><span class="nc">.title</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">margin</span><span class="o">:</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'>   <span class="k">width</span><span class="o">:</span> <span class="m">1</span><span class="n">rem</span><span class="p">;</span>
</span><span class='line'>   <span class="k">height</span><span class="p">;</span> <span class="m">0</span><span class="o">.</span><span class="m">4</span><span class="n">rem</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><p>元素内的文字居中</h3>

<p>上面的方法只能让p元素在其父元素内居中，但是它内部的文字仍然不居中，比如当有四个文字时，调好了，居中，但是当只有一个文字时却又不能居中了。这里就要用到一个新的显示属性flex，是flexible的缩写，意思是灵活的布局。比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='CSS'><span class='line'><span class="nc">.title</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">display</span><span class="o">:</span> <span class="n">flex</span><span class="p">;</span>
</span><span class='line'>   <span class="k">justify</span><span class="o">-</span><span class="k">content</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span> <span class="c">/* align horizontal */</span>
</span><span class='line'>   <span class="n">align</span><span class="o">-</span><span class="n">items</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span> <span class="c">/* align vertical */</span>
</span><span class='line'>   <span class="c">/* the following are for Browser compatibility */</span>
</span><span class='line'>   <span class="k">display</span><span class="o">:</span> <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">box</span><span class="p">;</span>
</span><span class='line'>   <span class="k">display</span><span class="o">:</span> <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">flex</span><span class="p">;</span>
</span><span class='line'>   <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">box</span><span class="o">-</span><span class="n">align</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'>   <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">flex</span><span class="o">-</span><span class="n">align</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'>   <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">align</span><span class="o">-</span><span class="n">items</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>具体解释可以参考<a href="http://stackoverflow.com/questions/17213113/vertical-centering-flexbox-overlay-in-ios-safari">原文</a>以及<a href="http://stackoverflow.com/questions/8865458/how-to-align-text-vertically-center-in-div-with-css">这里</a>。</p>

<h2>定位方式</h2>

<p>默认的流式布局，块级元素从上往下排，一个接着一个的。如果想要让某个元素固定在某个位置，或者想要层叠元素怎么办。现在的Web越来越像客户端，有顶部菜单栏，有侧面菜单栏，有弹出式菜单，在层叠式菜单等等。这些常用且又好用的交互方式又是如何实现的呢?
这就要用到position属性了。position也就是给元素定位，确定其在文档(document)中的位置，默认值是static，也就是从上到下，一个挨着一个。</p>

<ul>
<li>relative &ndash; 相对于这个元素在正常文档流中的位置，正常流中的位置仍然保留。</li>
<li>absolute &ndash; 这个元素会从自觉流中移除，就好像它不存在一样。这个元素的定位会相对于它的第一个定位不是static的父元素，也就是从它的父元素向上找，找到第一个定位属性不是static的元素，如果找不到就使用根元素（html）。</li>
<li>fixed &ndash; 固定在窗口中，从正常流拿出来，其他元素布局就好像属性为fixed的不存在一样，不会随着文档滚动页滚动，可以重叠，用z-index来指定谁在上面，谁在下面。流行的侧面菜单，顶部菜单等都是用此方式实现。</li>
</ul>


<p>relative，absolute以及fixed属性都要同时使用top/right/left/bottom来为元素指定位置，它们的含义是元素距离父元素上/右/左/下的距离。</p>

<h2>大小的度量单位</h2>

<p>元素的宽和高，以及字体大小的单位：</p>

<ul>
<li>px &ndash; 像素，像素就是一个屏幕可显示的是小单元，通常视觉给出的标注都是以像素为单位</li>
<li>em &ndash; 相对于父元素的大小，通常这个值会是继承自父元素。所以如果以它为单位，会随着元素的深入这个单位会变得越来越大。</li>
<li>rem &ndash; 根元素字体高度，通常就是HTML的字体高度。这个值更为通用，因为对于一个Document来说这个值是黑固定的，适配性和通用性更好。</li>
<li>pt &ndash; 是点的意思(point)，是在打印设备中常用的单位，一个pt等于1/72英寸。它跟像素（px）一样，都是绝对单位，通用性和适配性不好，一般用的比较少。</li>
</ul>


<p>对于这些单位的详细解释可以参考<a href="http://kyleschaeffer.com/development/css-font-size-em-vs-px-vs-pt-vs/">这篇文章</a>和<a href="http://snook.ca/archives/html_and_css/font-size-with-rem">这篇</a>以及<a href="https://css-tricks.com/rems-ems/">这篇</a>。</p>

<h2>用相对单位控制图片的大小</h2>

<p>不要用img元素的属性width和height，而是用CSS的width，height，因为img属性width和height仅能使用px作为单位，适配性要差一些，而CSS中的width和height是可以使用rem这种相对单位，适配性要好。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='CSS'><span class='line'><span class="nc">.icon</span> <span class="nt">img</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">width</span><span class="o">:</span> <span class="m">1</span><span class="n">rem</span><span class="p">;</span>
</span><span class='line'>   <span class="k">height</span><span class="o">:</span> <span class="n">rem</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>横向显示一个列表</h2>

<p>把&lt;li&gt;的display属性设置为inline-block即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='CSS'><span class='line'><span class="nc">.nav</span> <span class="nt">ol</span> <span class="nt">li</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="o">-</span><span class="k">block</span><span class="p">;</span>
</span><span class='line'>   <span class="k">text-align</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>控制元素的可见性</h2>

<p>有二种方式，一种是把display设置为none，这会让浏览器忽略此元素就好像它不存在一样，在渲染时；另一种方式就是通过visibility属性：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='CSS'><span class='line'><span class="nc">.show</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">visibility</span><span class="o">:</span> <span class="k">visible</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.hide</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">visibility</span><span class="o">:</span> <span class="k">hidden</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>注意兼容性</h2>

<p>对于一般的属性或者值最好要注意一下子它的兼容性，一般就是在前面加上-webkit-前缀，因为现在四分之三的浏览器都是Webkit系。</p>

<h2>工具</h2>

<p>欲想事，必先利其器。工具对于开发的重要性对于有经验的人不用多说，是事半功倍的。</p>

<h3>开发工具</h3>

<p>开发工具首选Webstorm。这是JetBrains的作品，IDEA IntellJ，PyCharm都是深受广大开发者喜欢的作品，也是我首选的IDE（NotePad和Vim偏执狂请走开），虽然我也喜欢Vim的简洁和高效，但是对于堆代码来说IDE是最高效的。跟IDEA和PyCharm不一样，WebStorm没有社区版本，这意味着试用了30天后就必须想办法了。。</p>

<h3>调试工具</h3>

<p>到今天，几个流行的浏览器都已经有了调度功能，Firefox的Firebugs，Opera的DragonFly，以及Chrome的devtools，Safari也内置了调试工具，至于IE，我还不知道。它们的功能基本上都是一致的：都能实时查看并修改元素，以及元素的CSS属性；能设置JavaScript的断点，单步调试；能查看Console，以及查看Network网络请求以及storage的使用情况。</p>

<p>可能最受欢迎的还是Chrome的devTools，至少，我是喜欢它。它内置，使用方便，不用装其他的东西，不用什么开发者模式。</p>

<p>详细的可以看<a href="https://developer.chrome.com/devtools/index">官网介绍</a>（自备梯子）。</p>

<p>在调试的时候多使用使用感受一下子就好了。多用”审查元素“找到元素，然后在devtools中修改样式，得到合适的样式的值，然后再去修改源码，能大大提高效率。</p>

<h3>移动端的工具</h3>

<p>如今移动端的流量已经超越PC，而且势头还在增长。一大半的前端都是为移动端而生的。</p>

<h4>Chrome DevTools的移动设备模拟器Emulator</h4>

<p>打开DevTools后，可以在左上角看一一个PC和移动设备的小Icon，点了后就进入了移动设备模拟器，它有各种模拟器：iPhone5, 6, 6s, Nexus 5, 6，iPad， iPad Mini等等，还可以模拟网络条件，良心工具啊。</p>

<p>可以到官方查看<a href="https://developer.chrome.com/devtools/docs/device-mode">更多信息</a>。</p>

<h4>Chrome远端调试</h4>

<p>Chrome和Android都是Google的产品，所以难免结合紧密。对于4.3以上的设备，用Chrome可以像调试PC网页那样来调试设备上的网页。只要在PC的Chrome上打开chrome://inpsect，选择网页就可以了。详细信息也请参考<a href="https://developer.chrome.com/devtools/docs/remote-debugging">官方网站</a>。</p>

<h2>参考</h2>

<ul>
<li><a href="https://css-tricks.com/all-about-floats/">https://css-tricks.com/all-about-floats/</a></li>
<li><a href="https://css-tricks.com/rems-ems/">https://css-tricks.com/rems-ems/</a></li>
<li><a href="http://stackoverflow.com/questions/8865458/how-to-align-text-vertically-center-in-div-with-css">http://stackoverflow.com/questions/8865458/how-to-align-text-vertically-center-in-div-with-css</a></li>
<li><a href="https://css-tricks.com/quick-css-trick-how-to-center-an-object-exactly-in-the-center/">https://css-tricks.com/quick-css-trick-how-to-center-an-object-exactly-in-the-center/</a></li>
</ul>


<h2>应该经常访问的网站</h2>

<ul>
<li><a href="http://www.w3schools.com/">http://www.w3schools.com/</a></li>
<li><a href="http://www.w3school.com.cn/index.html">http://www.w3school.com.cn/index.html</a></li>
<li><a href="http://www.css3maker.com/index.html">http://www.css3maker.com/index.html</a></li>
<li><a href="https://developer.mozilla.org/en-US/">https://developer.mozilla.org/en-US/</a></li>
<li><a href="https://css-tricks.com/">https://css-tricks.com/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android布局技巧：使用TextView的drawable属性]]></title>
    <link href="http://toughcoder.net/blog/2015/05/20/android-layout-trick-drawable-of-textview/"/>
    <updated>2015-05-20T23:07:29+08:00</updated>
    <id>http://toughcoder.net/blog/2015/05/20/android-layout-trick-drawable-of-textview</id>
    <content type="html"><![CDATA[<p>在布局中Icon+文字组成一个视觉上的元素是非常普遍的需求，或者是成为一个可点击的整体，或者是展示某种信息。比如顶部导航栏（ActionBar或者是自已定义实现的类似功能的）都会有一个返回，通常都是一个向左的Icon加上一个文字标签。</p>

<p><a href="http://toughcoder.net/blog/2015/05/20/android-layout-trick-drawable-of-textview/"><img src="http://www.gaditek.com/blog/wp-content/uploads/2013/08/Android-App-Development-Tips-Tricks-for-Beginners.jpg" title="auto auto" ></a></p>

<p>这种需求实现起来也是非常的简单，初学安卓的同学也能很快的写出来，一个ImageView加上一个TextView，外面再包一层LinearLayout或者RelativeLayout。Okay，这没有问题，但有更好的实现方式，这需要三个View对象，一个外层group，一个ImageView一个TextView，可以仅使用一个TextView对象，达到同样的效果。</p>

<!-- more -->


<h2>TextView的drawable属性</h2>

<p>TextView有一些属性可以在Text的四周设置一个drawable对象，图片,shape等合法的drawable都可以用。</p>

<ul>
<li> drawableStart API 14才有</li>
<li> drawableLeft</li>
<li> drawableTop</li>
<li> drawableBottom</li>
<li> drawableRight</li>
<li> drawableEnd  API 14才有</li>
<li> drawablePadding 用以设置drawable与text之间的空间</li>
</ul>


<p><a href="http://developer.android.com/reference/android/widget/TextView.html#attr_android:drawableStart">它们的含义</a>就像其名字所暗示的那样，left/top/right/bottom就是在文字的上下左右放置drawable。而drawableStart和drawableEnd则有特殊的意义，虽然它们是API 14加上去的，但是要在API 17后才能真正的生效，它们的作用是当语言方向发生变化时，会换边，LTR语言drawableStart在左边，而drawableEnd在右边；但对于RTL语言来说就会反过来drawableStart在右，drawableEnd在左。可以看<a href="http://stackoverflow.com/questions/13907618/whats-the-different-between-drawableleft-and-drawablestart-in-edittext">这个解释</a>。</p>

<p><img src="http://7u2scv.com1.z0.glb.clouddn.com/tctextview-drawable.png"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;TextView</span> <span class="na">android:text=</span><span class="s">&quot;Text along with Image\nsecond\nthird\nforth\nfifth&quot;</span> <span class="na">android:layout_width=</span><span class="s">&quot;400dip&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:drawableStart=</span><span class="s">&quot;@drawable/ic_launcher&quot;</span>
</span><span class='line'>        <span class="na">android:drawableLeft=</span><span class="s">&quot;@drawable/ic_launcher&quot;</span>
</span><span class='line'>        <span class="na">android:textSize=</span><span class="s">&quot;16sp&quot;</span>
</span><span class='line'>        <span class="na">android:paddingTop=</span><span class="s">&quot;10dip&quot;</span>
</span><span class='line'>        <span class="na">android:paddingBottom=</span><span class="s">&quot;10dip&quot;</span>
</span><span class='line'>        <span class="na">android:paddingLeft=</span><span class="s">&quot;10dip&quot;</span>
</span><span class='line'>        <span class="na">android:gravity=</span><span class="s">&quot;center&quot;</span>
</span><span class='line'>        <span class="na">android:drawablePadding=</span><span class="s">&quot;5dip&quot;</span><span class="nt">/&gt;</span>;
</span></code></pre></td></tr></table></div></figure>


<h2>TextView的drawable的一些注意事项</h2>

<ol>
<li>TextView的padding作用在drawable之外</li>
<li>TextView的高度或宽度为wrap_content时将是文字和drawable中较大的那一个，再加上padding和margin</li>
<li>gravity只对文字起作用，对drawable不起作用</li>
<li>drawable会在其所在的维度居中显示，比如drawableLeft是上下垂直居中的，以此类推</li>
</ol>


<h2>局限性</h2>

<p>有些时候它也有一些局限性而没有办法用它：</p>

<ol>
<li>当drawable本身没有高度时（比如shape），这个drawable高度就会依赖于文字，因为padding是加在drawable之外，所以只会依赖于文字的高度。有些时候这不是想要的结果。</li>
<li>当Icon需要与文字分开单独控制时，很显示这要分成二个View。</li>
<li>当需要对Icon进行特殊的个性化时，比如添加背景，特效等。</li>
<li>其他一些造成无法使用的。</li>
<li>除上述情况外，就要考虑使用drawable了。</li>
</ol>


<h2>why bother?</h2>

<p>有同学可能会问，有什么区别，为啥费这么大劲折腾，也就省了二个view对象而已嘛？这位同学可以坐下了，孤来说明下：首先，作为开发者要有永不止境的学习和优化的意识，即使带来的效果是微小的，能用一个对象搞定的，为啥用三个呢？其次，对于整体不复杂的页面，这样带来的效果确实不明显，但是对于超复杂的页面，页面的布局有上百个View时，比如Launcher或者淘宝系的应用，就会带来明显的收益。还有，汇集小溪而成大河，把所有小的点都优化到了极致，那么整体肯定会得到质的飞跃。</p>

<p>子曰：学无止境，技术和优化也无止境啊，各位同学可以多用用Google系的应用，以及国外的优质应用(Facebook, Twitter等），你会发现，虽然应用也很复杂，比如Google+它的页面里展示的元素也非常多，但是为什么用起来是那么流畅。就在于Google里的Android开发都是专家级的人物，他们牛在什么地方，就牛在他们总能用最好的方式来实现，就在于他们总能找到一个对象就能解决我们靠三个对象才能搞定的方法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS Animation初探]]></title>
    <link href="http://toughcoder.net/blog/2015/05/04/introduction-to-css-animation/"/>
    <updated>2015-05-04T23:47:21+08:00</updated>
    <id>http://toughcoder.net/blog/2015/05/04/introduction-to-css-animation</id>
    <content type="html"><![CDATA[<p>动画在交互设计中是一个十分能加分的东西，用以平滑过度，会让用户体验上几个台阶。对于Web开发也是如此，恰当的使用动画可以让网页使用起来更加的用户友好。这里就来探讨一下CSS中一些动画的实现方式，初识前端，不足之处敬请指正。</p>

<p><a href="http://toughcoder.net/blog/2015/05/04/introduction-to-css-animation/"><img src="https://img.alicdn.com/imgextra/i1/715978679/TB2.kzLjVXXXXctXXXXXXXXXXXX_!!715978679.jpg" title="auto auto" ></a></p>

<!-- more -->


<h2>使用transition来实现动画</h2>

<p><a href="http://www.w3schools.com/css/css3_transitions.asp">transition</a>是CSS3中的属性，它的作用就是让CSS的属性以平滑的渐变动画方式来展现而非突然变化，因此可以用来实现一些简单动画。</p>

<p>语法：transition: property duration timing-function delay</p>

<table>
<thead>
<tr>
<th>Value               </th>
<th> Description </th>
</tr>
</thead>
<tbody>
<tr>
<td>property            </td>
<td> 要平滑过度的CSS属性</td>
</tr>
<tr>
<td>duration            </td>
<td> 平滑过度的时长（动画时长）</td>
</tr>
<tr>
<td>timing-function     </td>
<td> 定义过度效果的速度曲线</td>
</tr>
<tr>
<td>delay               </td>
<td> 过度效果何时开始</td>
</tr>
</tbody>
</table>


<p>像其他的CSS写法一样，这四个值也可以单独指定：</p>

<ul>
<li> transition-property</li>
<li> transition-duration</li>
<li> transition-timing</li>
<li> transition-delay</li>
</ul>


<h3>transition的特点</h3>

<ul>
<li> 每当有transtion所指定的属性发生变化时，动画就会被触发，当然也受transition-delay的控制</li>
<li> transition生效的前提是元素在DOM中，所以对于属性display: none之类的是不会起作用的</li>
</ul>


<p>更多关于transition的使用请参考<a href="https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Using_CSS_transitions">这篇文章</a>，相当的详细。</p>

<h2>使用transform来实现动画</h2>

<p><a href="http://www.w3schools.com/cssref/css3_pr_transform.asp">transform</a>是CSS3中新加的属性，用以对元素进行2D或3D的变换，这里变换的意思是几何变换，包括旋转，缩放，移动和倾斜旋转等。</p>

<ul>
<li> translate，translate3d, translateX, translateY, translateZ</li>
<li> rotate, rotate3d, rotateX, rotateY, rotateZ</li>
<li> scale, scale3d, scaleX, scaleY, scaleZ</li>
<li> skew, skewX, skewY</li>
</ul>


<p>用这些来指定是进行什么变换，就像名字所指的，translate是进行2D移动，如translate(10, 11)，translate3d是进行3d移动, 如translate3d(1, 0, 10)，后面带坐标轴就是在某一特定方向上移动，其他几个类似。</p>

<p>需要注意几点：</p>

<ul>
<li> transform只能定义几何变换，不能进行其他的，比如颜色，背景，透明度等非几何属性</li>
<li><p> 指定了transform会立即发生，所以要配合transition一起来使用
 用transition来为transform指定时长，变化曲线以及delay的等关键的动画参数，才能成为真正的动画，否则transform也不会有动画效果。如：</p>

<pre><code class="`css"> transform: translate3d(10, 20, 30);
 transition: transform 300 ease-in;
</code></pre></li>
<li> translate移动的距离是相对于没有transform时的位置
 比如说某元素原来位置是100， 100, 那么translate(10, 10)，后的位置是110, 110，接着再translate(-10, -10)，后位置是90, 90.</li>
<li> 还有就是对于translate最好使用translate3d，尽管可能只是一维的移动，translate3d要更平滑一些。</li>
</ul>


<h2>使用key-frame来实现动画</h2>

<p><a href="http://www.w3schools.com/cssref/css3_pr_animation-keyframes.asp">@keyframe</a>规则是专门用来做动画的，它可以指定具体到某一帧的状态是什么样子的，以整数百分比来指定帧数，再给定CSS属性，就组成了一组状态的变化。比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@keyframes</span> <span class="nt">mymove</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">0</span><span class="o">%</span>   <span class="p">{</span><span class="k">top</span><span class="o">:</span> <span class="m">0px</span><span class="p">;}</span>
</span><span class='line'>    <span class="nt">25</span><span class="o">%</span>  <span class="p">{</span><span class="k">top</span><span class="o">:</span> <span class="m">200px</span><span class="p">;}</span>
</span><span class='line'>    <span class="nt">50</span><span class="o">%</span>  <span class="p">{</span><span class="k">top</span><span class="o">:</span> <span class="m">100px</span><span class="p">;}</span>
</span><span class='line'>    <span class="nt">75</span><span class="o">%</span>  <span class="p">{</span><span class="k">top</span><span class="o">:</span> <span class="m">200px</span><span class="p">;}</span>
</span><span class='line'>    <span class="nt">100</span><span class="o">%</span> <span class="p">{</span><span class="k">top</span><span class="o">:</span> <span class="m">0px</span><span class="p">;}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>就是一个简单的移动动画。
具体的可以参考<a href="http://www.smashingmagazine.com/2011/05/17/an-introduction-to-css3-keyframe-animations/">这篇文章</a>，讲述的还是很清楚的。</p>

<h2>如何选择</h2>

<p>一般来说，如果是移动，旋转或者缩放就使用transform就够了。如果要变化颜色，或者背景色或者可见度，就使用transition就好了。如果是复杂的动画，比如控制多个元素同时做动画，或者动画本身比较复杂还是使用@keyframes。</p>

<h2>流行的动画库</h2>

<p><a href="http://codegeekz.com/css-effect-libraries-creating-beautiful-animations/">这个文章</a>列的很详细，就不再单独的列出来了。如果你知道有其他的库也请与我分享。</p>

<h2>一些不错的资源和网站</h2>

<ul>
<li> <a href="http://www.css3maker.com/index.html">CSS3 Maker</a></li>
<li> <a href="https://css-tricks.com/">CSS tricks</a></li>
<li> <a href="http://caniuse.com/">Can I Use</a></li>
</ul>


<h2>参考</h2>

<ul>
<li> <a href="http://www.smashingmagazine.com/2011/05/17/an-introduction-to-css3-keyframe-animations/">An Introduction To CSS3 Keyframe Animations</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android实战技巧：Fragment的那些坑]]></title>
    <link href="http://toughcoder.net/blog/2015/04/30/android-fragment-the-bad-parts/"/>
    <updated>2015-04-30T00:40:26+08:00</updated>
    <id>http://toughcoder.net/blog/2015/04/30/android-fragment-the-bad-parts</id>
    <content type="html"><![CDATA[<p>Fragment是Android在3.0（Homeycomb)版本时加入的用以更灵活的构建多屏幕界面的可UI组件。关于Fragment以基本使用方法可以参考官方的<a href="http://developer.android.com/guide/components/fragments.html">教程</a>和<a href="http://developer.android.com/training/basics/fragments/index.html">最佳实践</a>，以及<a href="http://toughcoder.net/blog/2014/10/22/effective-android-ui-architecture/">选择Activity还是Fragment</a>。
但是Fragment使用起来却远没有教程中说的那样简单，也远比Activity要复杂一些，这里总结了孤在使用Fragment时所遇到的坑。</p>

<p><a href="http://toughcoder.net/blog/2015/04/30/android-fragment-the-bad-parts/"><img src="https://img.alicdn.com/imgextra/i2/715978679/TB2t42tjVXXXXbLXpXXXXXXXXXX_!!715978679.png" width="480" height="320"></a></p>

<!-- more -->


<h2>嵌套Fragment时Duplicated id或者Tag之痒</h2>

<p>这是一个小坑，但是初学者很容易遇到，特别是在Fragment之中套有Fragment时，且又是布局中添加子Fragment时更容易遇到。</p>

<h3>现象：</h3>

<p>Fragment中套有另一个Fragment，当第二次进入父Fragment时或者由Fragment创建的界面时会抛异常，大致意思是子Fragment的Id或Tag重复了。如果你在layout中给子fragment加了id或者tag，那么一定会遇到此异常。</p>

<h3>原因：</h3>

<p>在添加Fragment时都可以为Fragment指定一个Id或者Tag用以标识这个Fragment。因为每个Activity所附带的Fragment都是放在一个对象池中，在Activity的生命周期里，Fragment仍然在池中，即使是把某一个Fragment从Activity中detach掉（也即用FragmentManager pop掉），这个池是由FragmentManager来管理的。当你再次要以某个id或者Tag添加Fragment时，FragmentManager会在池中检索，如果发现已经存在Fragment对象带有此Id或者Tag时，就会抛此异常并报怨Id重复。这么做的目的就是减少对象的创建，尽可以的复用对象。</p>

<h3>如何破解：</h3>

<ol>
<li>在布局中写fragment时，不要添加id或者tag；</li>
<li><p>如果非要添加id或者tag，就在代码中添加fragment，如使用Id或者Tag时，先到FragmentManager中查找对象是否存在，不存在时再创建，也即：</p>

<pre><code class="java">  Fragment target = getFragmentManager().findFragmentByTag("tag");
  if (target == null) {
      targe = new SomeFragment();
  }
  FragmentTransaction ft = getFragmentManager().beginTransaction();
  ft.add(R.id.content, target, "tag");
  ft.commit();
</code></pre></li>
</ol>


<h2>replace之痛</h2>

<h3>现象：</h3>

<p>当有二个相同的整体页面层叠时，想把最后一个布局中的某个用Fragment来replace，会发现，它把前面的replace，后面的没效果。</p>

<h3>原因：</h3>

<p>布局的Id在一个窗体（Activity)中是唯一的，Fragment的replace也是使用此唯一的Id来把相应布局替换成Fragment的。当相同的页面层叠时，同一个Id的布局出现了二次，但Id是一样的。所以FragmentTransaction在replace时仅替换了一个。而不会像期待的那样，替换最后一个页面。</p>

<h3>如何破解：</h3>

<p>如果相同的页面非要层叠，要么不使用Fragment，要么为布局设置不同的Id。这种情况多出现在布局的复用上面，比如某二个页面长的像，所以复用了同一整体布局。但实际的逻辑上不是相同的页面，完全可以为布局设置不同的Id。</p>

<h2>可见性之疼</h2>

<h3>现象：</h3>

<p>当有多个Fragment层叠在一起时，每个Fragment如何能感知其对用户的可见性。比如应用有三个页面，A，B和C，比如A是整体类别列表，B是每个类别的详情，C又是类别的某种更详细的信息，当C显示出来时，A和B怎么能知道它其实对于用户已经不可见了，所以就可以不刷新，不加载数据等等。当C被用户BACK后，B又如何感觉它变成可见了？</p>

<h3>原因：</h3>

<p>Fragment的生命周期与Activity是一样的，添加到Activity会把OnCreate类似的回调走一遍，然后，Activity onResume/onPause/onstart/onStop时，其所持有的Fragment也走相应的onResume/onPause/onstart/onPause。但是Fragment与Activity非常不同的是，Activity当有另一个Activity显示时，当前的Activity会走onPause/onStop，而Fragment则完全没有感知。最多只能从FragmentManager那里知道BackStackState改变了，但是是Fragment增加了，还是减少了，并不能知道。</p>

<h3>如何破解：</h3>

<p>这个一个非常令人蛋疼的问题，简单的页面还好，但是涉及到数据加载或者要针对某些事件（网络）刷新时就有问题了，对用户不可见的页面没必要刷新。可行的解法就是：</p>

<ol>
<li>监听FragmentManager的BackStackState的改变</li>
<li>定义页面路径深度然后与BackStack深度比较，以感知是否对用户可见
  如前面A是一级，其path为1，B是2，C是3。当前Stack深度为3时，C是可见的，A与B不可见，以此类推。</li>
</ol>


<h2>空白区域的点击之脓</h2>

<h3>现象:</h3>

<p>一个Fragment，层叠在另外一个Fragment或者Activity之上，此Fragment中有一些空白区域，也即Widget之外的空白区域，当点击这些空白区域的时候发现这个Fragment下面的Fragment或者Activity中的View收到了事件并且响应了点击事件。</p>

<h3>原因：</h3>

<p>Fragment的本质就是一个View布局的管理器，当Fragment attach到Activity时，其实就是把Fragment#onCreateView()返回的View，替换掉(如果是用replace)FragmentTransaction#replace中指定的View，或者添加到(如果是add)FragmentTransaction#add()中指定的ViewGroup里面。</p>

<p>当我们以层叠方式显示多个Fragment时，通常的做法就是弄一个FrameLayout，然后每次把Fragment add到此布局。因此，这时Activity的页面布局树实际上就是一个FrameLayout里面包含几个View。</p>

<p>所以，当点击上面Fragment的空白区域时，如果事件没被吃掉，就会向下传递。</p>

<h3>如何破解：</h3>

<p>在Fragment的根布局加上一个clickable=true，这会让根布局把点击事件吃掉，以防止事件会继续传递下去，造成上面的情况。</p>

<h2>Activity重新创建之殇</h2>

<h3>现象：</h3>

<p>这个没有一般性的错误，只会有与项目相关的具体的错误异常，或者页面显示不正确。以及为什么教程中都有这么一句：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="n">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstance</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">(</span><span class="n">savedIntance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// create fragment and add it to Activity.</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>原因：</h3>

<p>Activity除了正常启动走到onCreate，还有另外的入口，比如系统配置信息发生变化时，或者Activity在栈比较深的地方，系统会把Activity杀掉，然后再<em>重新创建</em>它，问题就是在这个重新创建。重新创建与新建一个Activity不同，它是要尽可能的恢复先前所在的状态，因为这对用户来说是透明的，也就是说不能让用户感知到，否则体验会相当差。唯一与常规创建的区别就在于传给onCreate的参数savedInstanceState是不是null.</p>

<h3>如何破解：</h3>

<p>为了能在Activity重建时恢复状态，需要：</p>

<ol>
<li><p>对于Activity</p>

<p>要在onSaveInstanceState()时，把一些变量保存，然后在onCreate时恢复</p></li>
<li><p>对于Fragment</p>

<p>告诉系统，你想恢复状态Fragment#setRetainInstance(true)。然后，也在onSavedInstance()中保存状态，在onCreate时恢复。
这就够了，系统会在重新创建Activity时把其所持有的Fragment也创建出来。所以为什么每个Fragment子类都需要定义一个默认的Constructor。更多的可以参考<a href="http://www.androiddesignpatterns.com/2013/04/retaining-objects-across-config-changes.html">这篇文章</a>。</p></li>
</ol>


<h2>FragmentTransaction的异步操作之殇</h2>

<p>FragmentTransaction是异步的，commit()仅是相当于把操作加入到FragmentManager的队列，然后FragmentManager会在某一个时刻来执行，并不是立即执行。所以，真正开始执行commit()时，如果Activity的生命周期发生了变化，比如走到了onPause，或者走到了onStop，或者onDestroy都走完了，那么就会报出IllegalStateException。</p>

<p>还有一个异步的原因就是，在异步中操作（显示）Fragment。比如，先去网络请求数据，然后根据数据显示一个Fragment，这个特别容易出现的情况是网络请求回来了，但是Activity已经不在了，这时如果commit也会报出IllegalStateException。</p>

<p>具体的原因，以及如何避免可以参考大牛的<a href="http://www.androiddesignpatterns.com/2013/08/fragment-transaction-commit-state-loss.html">这篇文章</a>。</p>

<p>常见的解法就是作者建议的：1. 小心在生命周期中commit 。2 尽量不要在异步回调中commit
另外的解法 就是</p>

<ul>
<li>在异步回调中判断Activity是否在销毁中，isFinishing，如果true，就停止做其他事情</li>
<li><p>尽可能把异步任务控制在活动的生命周期内（onStart->onStop）。当出现stop时终止异步任务。再次start时再次启动。</p>

<p> 但是这个并不适用所有情况。比如按HOME的情况，通常这个过程不需要把任务停掉。因为一般情况下，再切回来时，应用应该保持切走时的状态，比如，加载一个数据，按HOME切走，再回来时，应该加载完成。这也正是多任务系统的一个表现。
如果onstop时停掉任务，那么要做很多工作来在onstart时恢复状态。</p></li>
<li>使用commitAllowStateLoss（）
这个是最终方案。除了从设计 上避免以外，这是唯 一的方式。</li>
</ul>


<h2>恶心的Activity重建以及恢复其Fragment</h2>

<p>首先说安卓系统非常恶心的一点就是某些情况下系统会杀掉Activity，然后重新创建并尝试恢复其先前的状态，比如当旋转屏幕时，当系统语言发生变化时，当栈中的Activity被回收了，又到栈顶时等等，这点非常恶心，常常带来问题。识别重建与新建的方法就是看onCreate中的Bundle参数是不是null。</p>

<p>对于FragmentActivity，更加恶心，此种场景时，它在onSaveInstance时会保存Fragment，然后在onCreate时会重新创建，会调用Framgment的默认无参构造来创建Fragment对象。所以这也是为什么文档中说Fragment一定要有一个默认的构造函数，而且最好不要有带参数的构造函数，传参数要用setArguments。默认构造函数的原因是为了重建Fragment实例。setArguments的参数是一个Bundle也会跟随Fragment保存起来，在重建Fragment时会帮你恢复。这里的恢复状态的数据的保存都是通过Binder方式保存在系统中，这也说明为啥参数非要是一个Bundle。</p>

<p>那么问题来了，当你确实需要带参数的构造函数，或者说系统无法帮你重建Fragment（比如Fragment要从动态加载的Dex中获取）时怎么办呢？</p>

<p>首先，我们要模拟这一场景，最方便的就是把activity的configChanges去掉，然后旋转屏幕。</p>

<p>一个思路就是阻止系统恢复Fragment，我们可以自己来加载，因为重建也会走到Activity的onCreate，所以我们有理由重走一遍初始化流程。怎么阻止呢，就是在FragmentActivity保存所有Fragment状态前把Fragment从FragmentManager中移除掉。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onSaveInstance</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">out</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">FragmentTransaction</span> <span class="n">ft</span> <span class="o">=</span> <span class="n">getSupportFragmentManager</span><span class="o">().</span><span class="na">benginTransaction</span><span class="o">();</span>
</span><span class='line'>  <span class="n">ft</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">frag</span><span class="o">);</span>
</span><span class='line'>  <span class="n">ft</span><span class="o">.</span><span class="na">commitAllowStateLoss</span><span class="o">();</span>
</span><span class='line'>  <span class="kd">super</span><span class="o">.</span><span class="na">onSaveInstance</span><span class="o">(</span><span class="n">out</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<ul>
<li><a href="http://developer.android.com/guide/components/fragments.html">Fragments</a></li>
<li><a href="http://developer.android.com/training/basics/fragments/index.html">Building a Dynamic UI with Fragments</a></li>
<li><a href="http://www.androiddesignpatterns.com/2013/08/fragment-transaction-commit-state-loss.html">Fragment Transactions &amp; Activity State Loss</a></li>
<li><a href="http://www.androiddesignpatterns.com/2013/04/retaining-objects-across-config-changes.html">Handling Configuration Changes with Fragments</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android NDK开发的一些技巧]]></title>
    <link href="http://toughcoder.net/blog/2015/04/27/android-ndk-backward-compatibility/"/>
    <updated>2015-04-27T23:34:58+08:00</updated>
    <id>http://toughcoder.net/blog/2015/04/27/android-ndk-backward-compatibility</id>
    <content type="html"><![CDATA[<p>Android NDK(Native Development Kit)是基于Java JNI的使用C/C++和Java来混合开发应用的一种方式，甚至在Android 2.3(API 9)以后可以用Native(Native这个字在不同的语境中意义是不一样的，这里指的是JNI中的C/C++的代码；如果放在Hybrid中Native就是指平台原生的语言和API)代码来创建标准界面组件Activity，换句话说就可以用纯C/C++来写一个Android应用，但是貌似还没有人这么干过，这只是一种理论上的可能性。因为除了Activity以外很多东西比如权限，广播通知等等很多东西在Native中还是不够方便。</p>

<p><a href="http://toughcoder.net/blog/2015/04/27/android-ndk-backward-compatibility/"><img src="https://img.alicdn.com/imgextra/i1/715978679/TB2Ro_qjVXXXXcLXpXXXXXXXXXX_!!715978679.png" title="auto auto" ></a></p>

<!-- more -->


<h2>函数签名的写法</h2>

<p>Java代码中调用Native的代码还是比较简单的，把方法声明成为native，然后可以当作普通的Java方法一样来使用，只不过这个native的方法的实现是在Native中。</p>

<p>JNI是一个桥梁，让不同的语言能够在一起使用，不但Java能调用Native层代码，在Native层也是能够调用Java的代码。但是JNI的最初目的是能够让Java使用C/C++语言来解决Java做不到的事情，所以在Native中调用Java的方法要稍微费一点劲。要获取JNI的执行环境(JNIEnv)，要找到类和对象，更重要的是要写对函数签名，否则是找不到的。</p>

<h3>函数签名的写法</h3>

<p>&ldquo;(<em>[type1]</em>;<em>[type2]</em>&hellip;)<em>[return types]</em>&rdquo;</p>

<p>type包括：</p>

<ul>
<li> B = byte</li>
<li> C = char</li>
<li> D = double</li>
<li> F = float</li>
<li> I = int</li>
<li> J = long</li>
<li> S = short</li>
<li> V = void</li>
<li> Z = boolean</li>
<li> V = void</li>
<li> Lfully-qualified-class = fully qualified class. For instance String &ndash; Ljava/lang/String;</li>
<li> [type = array of type</li>
</ul>


<p>Samples:
   * &ldquo;(Ljava/lang/String;I)V&rdquo; // void foo(String str, int limit);</p>

<h2>线程解惑</h2>

<p>Native的代码是执行在其直接调入的Java的方法所在的调用栈里的，比较绕，简单来说吧，JNI的方法也是一个方法，只不过它是在Native层实现的，所以都是一系列的方法的调用，因此调用栈从Java层开始，一直到Native，JNI不会改变调用栈，因此也不会改变线程环境，除非你让它改变。</p>

<p>当你改变线程时，就要注意了，如果你在Native用pthread开启了一个新的线程，且这个线程又需要与Java通信，要调用Java层的方法，那么常规的方式是不行的，要先把线程attach到JNI环境，findClass也不会找到相应的类，因为这个线程是pthread_create出来的，不具备JNI的环境，甚至常规的类，方法和对象的引用在新衍生出的线程中统统都是无效的。</p>

<p>那么该如何做呢？首先，要先调用AttachCurrentThread来把线程attach到JVM；然后，把要在此线程里访问的Java类，方法和对象生成JVM的Global引用，也就是NewGlobalRef来保存引用；最后，当完成与Java的通信后要调用DetachCurrentThread来做detach。</p>

<h2>注意内存问题</h2>

<p>到了Native的环境，就要注意内存问题，因为Native的代码都是要手动的申请内存，手动的释放。当然，业务逻辑里面的申请和释放用标准的new/delete或者malloc/free，或者用智能指针之类的。JNI部分是有封装好的方法的，比如NewGlobalRef，NewLocalRef, DeleteGlobalRef, DeleteLocalRef等。</p>

<p>需要注意的是用这些方法创建出来的引用要及时的删除。因为这些引用都是在JVM中一个表中存放的，而这个表是有容量限制，当到达一定数量后就不能再存放了，就会报出异常。所以要及时删除创建出来的引用。</p>

<h2>版本的兼容性</h2>

<p>使用SDK开发应用时可以用minsdk和targetsdk来解决版本的兼容性问题，minsdk指定最低SDK版本要求，targetsdk指定目标的版本。但在NDK，只能用一个android-target来指定最低的版本要求，其实这就是限定了在NDK你能使用的API的范围。为了保证最好的兼容性，要保证NDK中的android-target与minsdk保持一致。</p>

<p>SDK中的做法是指定了minsdk后，选择尽可能高的targetsdk，这样可以获取最好和最新的编译toolchains的支持。但是NDK中不建议这样做，尽管你没有使用高版本的API，但是使用高版本来编译会链到高版本的库，有可能会导致问题，因为高版本的某些API实现方式会变。比如signal.h中的signal函数，如果使用android-21编译，那么在低于5.0 版本的手机上是跑不起来，错误是无法找到signal函数，原因就是5.0以后signal.h中的signal函数的实现方式变了。</p>

<h2>支持64位</h2>

<p>5.0开始，Android有了64位处理器了。对于以Java作为平台语言的Android来说，特别是广大的应用开发者来说，这并不需要做什么特殊的处理。但是对于涉及到Native的代码时就要注意了，在编译的时候要为arm64准备东西了。在编译的时候要为arm64编译出一个target。</p>

<p>但是问题来了，arm64只有当android-target设置为21时才能编译出来，而我们的应用不可能只target到5.0，前面讲到了我们要对齐到最低版本。解决方案就是构建二次：</p>

<ul>
<li> 第一次正常target到最低版本构建出arm和armeabi-v7a的库</li>
<li> 第二次target到21，编译出arm64的库</li>
</ul>


<p>再把这些so打包起来就可以了。</p>

<h2>多多参考NDK文档以及官方教程和指导</h2>

<p>使用任何的别人提供的东西，最好获取帮助的方式就是看人家给你的文档和指导。现在的文档都写的很详细了。Android开发者官网上面也有很多关于NDK开发的<a href="http://developer.android.com/training/articles/perf-jni.html">教程</a>，都值得仔细读一读的。</p>

<h2>使用第三方工具来简化开发</h2>

<p>最好的开发方式不是自己写，而是去用别人现有的东西，子曰：不能重复造轮子。NDK的开发，也是有一些第三方的工具来帮助我们减少开发量的。<a href="http://swig.org/">SWIG</a>就是一个优秀的工具，它能免去写丑陋的JNI方法的痛苦，而且SWIG是编译工具链的一个组件，不是运行时，所以不会带来性能上的损失。</p>

<h2>不错的书籍</h2>

<p><a href="http://www.apress.com/9781430248279">《Pro Android C++ with NDK》</a>是一本相当不错的书籍，有中文版本了，可以好好的读一读。</p>

<h2>参考资料</h2>

<ul>
<li><a href="http://docs.oracle.com/javase/6/docs/technotes/guides/jni/spec/invocation.html">The Invocation API</a></li>
<li><a href="http://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/functions.html">The JNI Functions</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Octopress和Github Pages搭建博客的高级技巧]]></title>
    <link href="http://toughcoder.net/blog/2015/04/22/advanced-tricks-of-github-pages-with-octopress/"/>
    <updated>2015-04-22T23:40:13+08:00</updated>
    <id>http://toughcoder.net/blog/2015/04/22/advanced-tricks-of-github-pages-with-octopress</id>
    <content type="html"><![CDATA[<p>如何果还不知道如何使用Octopress和Github Pages搭建的同学可以参考<a href="http://toughcoder.net/blog/2014/10/16/blogging-like-a-hacker-with-github-pages/">码农的救赎：使用Github Pages搭建博客</a></p>

<p><a href="http://toughcoder.net/blog/2015/04/22/advanced-tricks-of-github-pages-with-octopress/"><img src="http://blog.robinchutaux.com/images/blog/octopress-logo.png" title="auto auto" ></a></p>

<!-- more -->


<h2>提升速度</h2>

<p>按照教程搭建好的博客，访问起来总是很慢很慢，即使把什么Google Plus和Google Analyze之类的都关闭掉后，仍然很慢。原因就是在HTML中的某些资源，比如脚本或者字体什么的是使用Google提供的，所以就会慢，那么怎么解决呢？就是用国内的替代品。<a href="http://libs.useso.com/">360</a>提供了几个Google的替代库，跟Google是一样的，只需要找到代码，把链接替换360的就可以了。至此发现360还真是一个良心企业。
具体的就是把source/<em>include/head.html和source/</em>include/custom/head.html中的fonts.google.com和ajax.google.com都替换成userso.com然后就Okay，速度哗哗的。</p>

<h2>为图片选择存储</h2>

<p>Github为我们的博客提供免费的存储空间，其实也可以把图片直接在我们博客的源码里，这样就会传到Github上面去。但是这样子会有问题，一是增加博客占用的空间，虽然Github免费，且没有限制，但是天长是久以后就不好说了； 另外就是Github访问速度要慢一些，至少对于我大天朝是如此。所以选择国内的云存储就显得百分有必要了。
推荐使用<a href="http://www.qiniu.com/">七牛</a>，原因是：</p>

<ol>
<li>有免费空间</li>
<li>可以对每个文件进行公开，且有稳定链接，即使文件后来编辑过</li>
<li>有命令行工具可以进行批处理</li>
</ol>


<p>使用方法的话看官方的<a href="http://developer.qiniu.com/docs/v6/tools/qrsync.html">文档</a>就可以了，安装下它的命令行工具，把图片放到要同步的目录，然后同步。创建一个公开的Bucket，然后放图片于其中，同步上传后就可以得到链接了。</p>

<h2>Mac下的优质Markdown编辑器</h2>

<p><a href="http://25.io/mou/">Mou</a>是我先前推荐的，但是最近发现Mou总是莫名的卡顿，总是会卡上个几秒钟，无论做什么操作，很是让人难以忍受。
于是<a href="http://macdown.uranusjr.com/">MacDown</a>就出现了，它免费而且开源，与Mou的体验类似，其实它是参考了Mou也是受Mou启发而开发的。速度相当不错。</p>

<h2>One more thing&hellip;</h2>

<p>Octopress的<a href="http://octopress.org/">新版本</a>正在紧锣密鼓的开发，相传会有质的改变，喜欢像写代码一样写作的人可以期待与关注。</p>

<h2>参考</h2>

<ul>
<li><a href="http://diufanshu.github.io/blog/2015/01/03/you-guan-bo-ke-dao-jia-zai-su-du/">有关博客的加载速度</a></li>
<li><a href="http://www.jianshu.com/p/6c157af09e84">Mac 下两款 Markdown 编辑器 Mou/MacDown 大 PK</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在安卓设备与PC之间传递文件]]></title>
    <link href="http://toughcoder.net/blog/2015/04/21/transfer-files-between-android-phone-and-pc/"/>
    <updated>2015-04-21T23:01:11+08:00</updated>
    <id>http://toughcoder.net/blog/2015/04/21/transfer-files-between-android-phone-and-pc</id>
    <content type="html"><![CDATA[<p>现在智能手机（这里的手机是广义的，包括手机，平板电脑等移动智能设备）在生活中的角色越来越重要，人们使用手机的时间远远大于电脑，由于手机的便携性，所以很多时候我们会需要用手机来携带数据或文件，或者用于娱乐。比如乘坐火车或者汽车时，用手机来看个电影还是相当不错的，现在的手机屏幕也够大，存储空间充足，完全不成问题。虽然移动端也有足够多的客户端可以下载视频等，但是远没有PC资源多，也没有PC下载方便。但是下载后如何把视频弄到手机上面，以及当需要把其他一些文件弄到手机上面时，也是一个技术问题，今天就来探讨一下。</p>

<p><a href="http://toughcoder.net/blog/2015/04/21/transfer-files-between-android-phone-and-pc/"><img src="http://image.pavtube.com/img/guide/2013/2013-02/android-file-transfer.jpg" title="auto auto" ></a></p>

<!-- more -->


<h2>用第三方的软件</h2>

<p>比如说QQ之类的，它都有一个功能就是在不同设备之间传递文件特别是PC端与移动端，只要在PC上面和移动设备上面都安装了QQ较新版本的客户端，就可以用其传递文件。孤没有亲测，但估计效果还是可以的，但是对于像高清电影这样的G级别的大文件不知道效果如何了。</p>

<h3>优点</h3>

<p>  使用简单方便，不需要任何技术基础或折腾技术相关的东西</p>

<h2>直接把手机当成U盘（2.3及以下版本适用）</h2>

<p>以前的安卓版本当手机连接上电脑以后，是直接可以把连接的存储方式设置成为大容量存储，这样手机就直接相当于一个U盘。具体的操作方法就是手机连上电脑后，通知栏会有一个通知是存储相关的，点击后就可以把手机挂载成为一个U盘，再次点击之后会关闭。绝大多数手机只有当插入有SD扩展卡时才能如此做。</p>

<h3>优点</h3>

<p>   使用简单方便</p>

<h3>缺点</h3>

<p>   Android 2.3及以下版本才可以</p>

<h2>使用ADB命令</h2>

<p>我相信大多数Android用户对于adb命令并不会陌生，即使没有开发经验或者不懂技术，如何折腾过刷机或者Root的同学应该至少对adb命令有一个印象。对于有开发经验的同学就更不用说了，如果连adb都不知道那你的安卓开发肯定是体育老师教的。
ADB的使用是比较折腾的，非技术的同学可能会有些困难：</p>

<ol>
<li>下载Android SDK</li>
<li>对于Windows要安装设备的驱动，Linux和Mac则不用</li>
<li>对于Linux要配置udev权限，可参考官方文档</li>
<li>手机要激活USB调试：设置->开发者选项->USB调试</li>
</ol>


<h3>优点</h3>

<p>   其实没什么优点，对于开发者同学们来说这只是没有额外的事情折腾，传递一些小文件来说ADB命令还是非常方便的</p>

<h3>缺点</h3>

<ol>
<li>非常的折腾，特别是针对不是安卓开发者同学来说</li>
<li>对于百兆以上的大文件 来说，速度非常慢</li>
<li>需要对手机的存储机制在所了解，因为adb push是需要指定手机上目标文件夹</li>
</ol>


<h2>使用MTP协议传输</h2>

<p>这是本文的重点。
Android 4.0及以上的版本当连接到PC时，通知栏也会有一个与存储机制相关的通知可以选择是以相机方式还是MTP方式挂载手机的存储：如果是相机模式，那么可以直接访问手机里的相册；MTP则用于传递文件。
<a href="http://en.wikipedia.org/wiki/Media_Transfer_Protocol">MTP</a>是媒体传输协议(Media Transfer Protocol)的简称，它是一种在设备之间传输媒体文件的协议，这是一种标准的公开的协议，理论上讲能与任何支持MTP协议的设备进行传输。当安卓设备连接到电脑时，选择MTP方式后，即可以使用MTP协议来传送文件。</p>

<h3>Windows和Mac</h3>

<p>对于Windows和Mac，Google有专门的客户端，可以到<a href="http://www.android.com/filetransfer/index.html">官网</a>了解详情，使用不难，安装客户端，连接手机选择MTP模式即可。</p>

<h3>Linux</h3>

<p>Linux（这里以Ubuntu为例，其他发行版本类似）稍微折腾一点，因为没有官方的客户端，所以需要安装第三方的工具：</p>

<ol>
<li>安装工具：sudo apt-get install mtp-tools mtpfs</li>
<li><p>配置</p>

<pre><code>  sudo service udev start
    sudo mkdir /media/nexus
    sudo chmod a+xrw /media/nexus
    sudo adduser $USER fuse
</code></pre>

<p>  sudo vim /etc/fuse.conf并把最后一行&#8217;user_allow_other&#8217;打开注释（删除行首的‘#’）</p></li>
<li><p>创建命令别名
  vim ~/.bashrc在其中添加：</p>

<pre><code>   alias android-connect='mtpfs -o allow_other /media/nexus'
   alias android-disconnect='fusermount -u /media/nexus'
</code></pre></li>
<li><p>重启电脑</p></li>
<li>连接手机，运行android-connect后，/media/nexus/即是手机的存储，可以自由的传递文件了</li>
</ol>


<p>使用MTP方式对于大文件或者多文件的文件夹都是毫无压力的，速度略逊于U盘。</p>

<h2>参考</h2>

<ul>
<li> <a href="http://askubuntu.com/questions/207569/how-do-i-connect-a-nexus-7-to-transfer-files">How do I connect a Nexus 7 to transfer files?</a></li>
<li> <a href="http://en.wikipedia.org/wiki/Media_Transfer_Protocol">Media Transfter Protocol</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[诡异的EOF Exception]]></title>
    <link href="http://toughcoder.net/blog/2015/01/31/unexpected-eof-exception/"/>
    <updated>2015-01-31T17:00:39+08:00</updated>
    <id>http://toughcoder.net/blog/2015/01/31/unexpected-eof-exception</id>
    <content type="html"><![CDATA[<p>近日在写一个简单的HTTP代码中遇到了诡异的EOFException,当读取ResponseCode的时候就抛出了EOF异常,感觉很诡异,下面进行问题还原,以及分析和解决过程.</p>

<h2>问题</h2>

<p>有问题的代码如下:</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">testEcho</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;The quick brown fox jumps over the lazy dog.&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">HttpURLConnection</span> <span class="n">conn</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">ep</span> <span class="o">=</span> <span class="n">Base64</span><span class="o">.</span><span class="na">encodeToString</span><span class="o">(</span><span class="n">payload</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(),</span> <span class="n">Base64</span><span class="o">.</span><span class="na">URL_SAFE</span><span class="o">);</span>
</span><span class='line'>            <span class="n">URL</span> <span class="n">u</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">URL</span><span class="o">(</span><span class="s">&quot;http://httpbin.org/get?p=&quot;</span> <span class="o">+</span> <span class="n">ep</span> <span class="o">+</span> <span class="s">&quot;&amp;key=testEcho&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">conn</span> <span class="o">=</span> <span class="o">(</span><span class="n">HttpURLConnection</span><span class="o">)</span> <span class="n">u</span><span class="o">.</span><span class="na">openConnection</span><span class="o">();</span>
</span><span class='line'>            <span class="n">conn</span><span class="o">.</span><span class="na">setRequestMethod</span><span class="o">(</span><span class="s">&quot;GET&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">conn</span><span class="o">.</span><span class="na">setDoInput</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>            <span class="n">conn</span><span class="o">.</span><span class="na">setDoOutput</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>            <span class="n">conn</span><span class="o">.</span><span class="na">connect</span><span class="o">();</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">conn</span><span class="o">.</span><span class="na">getResponseCode</span><span class="o">()</span> <span class="o">!=</span> <span class="n">HttpURLConnection</span><span class="o">.</span><span class="na">HTTP_OK</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;http res &quot;</span> <span class="o">+</span> <span class="n">conn</span><span class="o">.</span><span class="na">getResponseCode</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;, msg : &quot;</span> <span class="o">+</span> <span class="n">conn</span><span class="o">.</span><span class="na">getResponseMessage</span><span class="o">());</span>
</span><span class='line'>                <span class="k">return</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nf">InputStreamReader</span><span class="o">(</span><span class="n">conn</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">()));</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">buf</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>            <span class="k">while</span> <span class="o">((</span><span class="n">buf</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;HTTP res: &quot;</span> <span class="o">+</span> <span class="n">buf</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">br</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">conn</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">conn</span><span class="o">.</span><span class="na">disconnect</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;ioexception &quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码进行后会在getResponseCode()这行抛出EOFException:</p>

<p><img src="https://img.alicdn.com/imgextra/i1/715978679/TB2JPfojVXXXXauXpXXXXXXXXXX_!!715978679.png"></p>

<p>很疑惑,百思不得解,这是一个简单的GET请求,却抛出了这样难以理解的异常.于是去Google,发现都认为是Android本身的问题,要加上connection close</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">conn</span><span class="o">.</span><span class="na">setRequestProperty</span><span class="o">(</span><span class="s">&quot;Connection&quot;</span><span class="o">,</span> <span class="s">&quot;close&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>比如,<a href="http://stackoverflow.com/questions/19258518/android-httpurlconnection-eofexception">这个讨论</a>,以及<a href="http://stackoverflow.com/questions/15411213/android-httpsurlconnection-eofexception">这个讨论</a>.
尝试了,但仍没有解决掉抛出的EOFException.</p>

<h2>分析与解决</h2>

<p>这个时候就要冷静的分析下,先从根本开始,怀疑一切,把请求的每一句都打印出来,突然发现URL竟然含有一个CRLF换行符(\r\n). 感觉奇怪,于是查阅文档,发现Base64在编码的时候会默认给结果加上CRLF以换行,于是再加一个Flag, NO_WRAP后,问题解决:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">String</span> <span class="n">ep</span> <span class="o">=</span> <span class="n">Base64</span><span class="o">.</span><span class="na">encodeToString</span><span class="o">(</span><span class="n">payload</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(),</span> <span class="n">Base64</span><span class="o">.</span><span class="na">URL_SAFE</span> <span class="o">|</span> <span class="n">Base64</span><span class="o">.</span><span class="na">NO_WRAP</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>深入分析</h2>

<p>问题是解决了,但感觉没有完全弄明白.于是做了多次尝试,发现只要URL中部含有换行(\n或\r\n)都会引发此问题,而在尾部则没事.</p>

<p><img src="https://img.alicdn.com/imgextra/i4/715978679/TB2UhLGjVXXXXa8XXXXXXXXXXXX_!!715978679.png"></p>

<p>这是请求包</p>

<p><img src="https://img.alicdn.com/imgextra/i2/715978679/TB2e0DMjVXXXXX7XXXXXXXXXXXX_!!715978679.png"></p>

<p>这是Server回应</p>

<p>通过抓包可以看出,换行符会导致发送的HTTP请求包不完整,Server返回也认为HTTP是trunk的,所以期待更多的数据,因此这个时候是没有response的,任何对response的读操作(getResponseCode(), getResponseMessage(), getInputStream())都会立即抛出EOFException.</p>

<h2>总结</h2>

<p>虽然这个问题不大,但是也还值得总结一下:</p>

<ol>
<li><p>遇到问题先检查没犯低级错误</p>

<p>也就是说,当遇到诡异的问题时,先查看文档,检查参数,确保是否是在按正确的方式在做事情,这很关键,因为很多时候都是我们犯了低级错误,比如拼写错误,或者没传正确的参数,或者解错了API等.因为越是简单的错误越容易被忽略.</p></li>
<li><p>问Google和其他人</p>

<p>Google一下或者问下身边的人,可能会很有帮助</p></li>
<li>如果还搞不定,那就真的是遇到难题了,这个时候只能去查阅源码和书籍,定位出问题,分析原因,解不解得了,就看造化了.</li>
<li><p>找Plan B</p>

<p>不用认死理儿,一条路不通,可走另外的路,或者搭个桥什么的.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从手机丢失看数据安全]]></title>
    <link href="http://toughcoder.net/blog/2015/01/30/security-concerns-after-phone-stollen/"/>
    <updated>2015-01-30T21:30:39+08:00</updated>
    <id>http://toughcoder.net/blog/2015/01/30/security-concerns-after-phone-stollen</id>
    <content type="html"><![CDATA[<p>手机在现代生活中扮演重要角色，里面有大量的隐私和数据，手机银行，支付宝等都能操作个人的财产，所以手机的安全也越来越重要，一旦手机丢失，造成的不仅仅是一部手机的损失，还可能造成隐私的泄露，重要数据的丢失以及财产的损失。</p>

<h2>手机丢失后应该做的事情</h2>

<p>2015年1月28日下班，晚上七点左右在挤公交车，可能上车时，手机（红米Note）被偷，由于平日里都是骑自行车上下班，只是偶尔遇到不好的天气才会坐公交，刚好那天是2015年的第一场雪，下了一天多没停，不方便骑车，所以就坐公交，正值下班时人又多又挤，估计是上车时被小偷钻了空子。</p>

<p><a href="http://toughcoder.net/blog/2015/01/30/security-concerns-after-phone-stollen/"><img src="http://cdn.techpatio.com/wp-content/uploads/2012/12/cellphone-lock-safety-security.jpg" title="auto auto" ></a></p>

<p>先是打了个电话，确认手机的状态，因为也有可能是忘在公司了。电话关机，可以确认被偷。然后马上采取安全补救措施：</p>

<!-- more -->


<ol>
<li>先冻结支付宝
   这个是最关键的一个，因为支付宝有钱，支付宝也关联了很多银行卡，所以要第一时间处理它。具体策略就是：

<ol>
<li>先取消无线支付功能，这个会关闭手机平板等支付功能，方法是登录网页支付宝，支付方式，关闭无线支付</li>
<li>修改登录密码，并且修改支付密码</li>
</ol>
</li>
<li>再冻结微信
   微信也很关键进入到110.qq.com冻结微信帐号，如果已关联QQ，可以用QQ号来冻结，如果手机卡已重新办理，可以用手机号冻结。不过这里要说一下，手机刚丢失，肯定没有办法用手机来冻结，所以一般是用QQ号。但是也有一些情况：1. 你要把QQ号关联到微信。2. 就是新版本的QQ有移动锁定功能，而且默认开启，也就是说你在电脑上还无法登录QQ。这时就相当被动了。从这里也可以看出移动QQ锁定电脑登录这个功能是多么的不好。相对来说手机要比电脑容易丢失，一旦丢失，电脑上就无法登录QQ，这是多么悲剧的事情。</li>
<li>冻结QQ
   先要改密码，不过改QQ密码要手机短信验证，对于手机丢失，这又是一个大悲剧。不光是QQ，很多帐户都要有手机短信验证来修改密码。</li>
<li>打电话给运营商让号码停机
   这个也要越快越好，打10086（我是移动的号码），按指引停掉手机，无需人工，自动可完成。</li>
<li>修改所有的手机上安装应用的密码
   首先是跟钱有关的应用，如银行客户端，股票，基金 等等，优先处理。
 然后是重要社交帐户，然后是笔记帐户，因为笔记里可能有重要的信息</li>
<li>发消息给亲人朋友同事，注意安全
   通过其他方式了，比如QQ或者用别的电话</li>
<li>查找手机
   比如苹果或者小米之类的用户可以用查找手机来找手机，不过希望不大。如果是聪明的小偷，得手后第一件事就是关机，扔SIM卡，扣掉电池。偷我手机的小偷应该 就是惯贼。找不到，确定被偷了，就擦除数据,但是查找手机与擦除数据都需要手机处于可用状态，因为小米的方式就是向手机发送特殊内容的短信，查找以及擦除数据的指令就是短信内容。</li>
</ol>


<p>以上安全措施都做完后，就报警。不指望能找回手机，只求能惩治一下猖狂的小偷。不过一般都没什么用处。只能是自己多加小心，保护好自己的财产。</p>

<h2>评价各大重量级应用对安全的保护</h2>

<h3>支付宝</h3>

<p>支付宝做的还蛮赞的，在网页版本能控制手机端的支付，这个很重要，而且也合理。毕竟手机可能丢，而网页在哪里都能登录，无所谓丢与不丢的问题，所以网页应该 是最根本最保险的，并且能控制无线的支付方式。另外，支付宝也有手势密码功能，这个也能在一定程度上防止财产受损，为补救争取更多时间。</p>

<h3>腾讯</h3>

<p>腾讯做的就不太好，首先它鼓励手机QQ锁定PC和WEB的登录，所谓的安全，让手机QQ扫二维码来登录PC，这个太弱了，而且有问题，一旦手机丢失PC端都无法登录，也就很难修改密码和冻结帐户。这会让人很被动。很不幸的是新版本QQ还在鼓励启用这个功能。
微信也是如此，提供的冻结功能，必须要QQ或者手机验证来辅助，这也会影响冻结帐户的速度，手机刚丢，手机验证用不了，有上面的问题QQ也用不了，这就叫天天不应，叫地地不灵了。另外，QQ和微信都没有启动密码，或者进入客户端的密码，这也会让QQ和微信更容易产生损失。</p>

<h3>其他应用：淘宝，百度等</h3>

<p>另外还有很多的帐户比如百度帐户，银行客户端帐户和淘宝帐户等，修改密码也需要手机验证，只能等手机卡重新办理后才能修改。</p>

<h3>应用的安全策略</h3>

<p>可以看出业务的发起点对安全的依赖也不一样，支付宝起源于PC网页，后有支付宝钱包，所以，最后的防线，或者说最高级的控制中心是在PC网页，因此，一旦手机丢了，没关系，上PC在网页可以关掉无线支付，所以安全性较高。</p>

<p>而微信则不一样，它起源于手机，后有PC端和WEB端，所以最高级的控制中心是在手机应用上，这样就不方便了，一旦手机丢失很难把帐户锁定，于是腾讯专门有<a href="http://110.qq.com">110.qq.com</a>来处理帐户的冻结。如上面说微信的PC上是弱端，所以微信的冻结必须依赖于外部帐号，这会让一部分用户无法进行冻结，假如用户没有绑定QQ号，那就只能等死。</p>

<p>而QQ的做法却很让人难受，手机丢失，无法立即通过手机号来冻结微信，那么只剩下QQ号，前提是要绑定QQ号（这是一个坑），所以你必须在PC上登录PC上的QQ，但手机QQ有一个非常二的功能就是锁定PC的登录，话说为了安全，但这种情况下就会造成PC上无法登录QQ。这个功能太二了，QQ起源于PC，所以应该PC上有最高控制权，不应试让后者（手机端）有最高的控制权。更加二的是，解冻微信需要修改QQ密码，而修改QQ密码又需要手机短信验证码，所以直到手机卡补办前，很多密码还是改不了。</p>

<p>这次手机被盗，由于小偷目的在于手机，且是惯贼，补救也及时，没有造成额外的财产损失和其他损失。</p>

<h3>移动应用如何设计安全措施</h3>

<p>常规的帐户补救措施比如手机验证码，等方法就目前来讲都还可以接受，但是必须要为手机丢失这种情况做相应的替代措施。
如果太依赖于手机短信验证码，那么安全隐患也大，一旦手机丢失，用户就只能等死。所以必须要有替代方案，就是一定要有PC端的登录方式和PC端的冻结和解救帐户的方式，比如邮箱验证，密保问题等方式。这是一个相互依赖的过程。PC端可能需要手机短信验证码来做身份验证，但是反过来，手机上的帐户在PC的帮忙下也必须能够解救。</p>

<h2>提高安全意识，加强对数据的保护</h2>

<p>但是为了防止再次损失，要提高安全意识：</p>

<ul>
<li>要保护好手机，尽量放在裤子前面，不要放在外衣的口袋中。人多的时候比如公交站地铁等，最好把手机放手里。但有时提东西，没办法。</li>
<li><p>手机要做好安全防范，简单来说就是多设密码：</p>

<p>  # 解锁一定要开，最好用图案，Android手机都支持图案，设置的不要太简单</p>

<p>  # 重要应用，比如支付宝等要开启应用启动密码，为了安全，所有支持进入 密码的应用都要把它开启，不要怕麻烦，因为手机一旦丢失，麻烦更大。</p>

<p>  # 另外，各种银行的客户端最好不要安装，因为银行客户端的安全措施可能没那么好，所以一旦丢失，很容易造成损失。</p></li>
<li>还有，手机里不要存放重要文件，重要文件还是用电脑来存放。手机里的文件，也最好备份到云端，以防止丢失。重要的帐户和密码也最好不要使用手机短信，微信或者起手机QQ之类的来存放。</li>
<li>联系人尽量用名字，不要用老爸，老妈，老婆，老公之类的，反正这些人你也分得清。试想小偷得手后给老爸发一短信要五千块，这怎么办？</li>
<li>另外，就是要定期更新所有网络帐户的密码。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[训服你的Mac]]></title>
    <link href="http://toughcoder.net/blog/2014/11/13/tame-mac/"/>
    <updated>2014-11-13T22:15:58+08:00</updated>
    <id>http://toughcoder.net/blog/2014/11/13/tame-mac</id>
    <content type="html"><![CDATA[<p>天下武功唯快不破，提升效率是提升战斗力的唯一途径，而一个舒适且高效的开发环境是保证效率的重要方面，对于习惯了Windows和Linux的人来说，习惯使用Mac还是需要一定的时间的，这是就总结一些，如何配置并习惯Mac。</p>

<p><a href="http://toughcoder.net/blog/2014/11/13/tame-mac/"><img src="http://applethis.com/wp-content/uploads/2012/06/Apple-OS-X.jpg"></a></p>

<!-- more -->


<h2>Mac上面的常用快捷键</h2>

<p>在Windows上面有一些常用的快捷键，比如像Ctrl+W, Ctrl+F等等，还是非常有用的。在Mac上很多快捷键都是CMD键加上其他键组合的（如果是虚拟机的话，就是Windows的那个键）。</p>

<ul>
<li>CMD+R（先按CMD，再按r键）&ndash; 刷新Safari当前页，与Windows上的F5一样</li>
<li>CMD+UP或者HOME&ndash;滚动网面到最上端</li>
<li>CMD+DOWN或者END&ndash;滚动网页到最下面</li>
<li>CMD + LEFT &ndash; 把光标跳到行首，这个在编辑时常用</li>
<li>CMD + RIGHT &ndash; 把光标跳到行尾</li>
<li>CMD + W &ndash; 关闭当前的TAB</li>
<li>CMD + S &ndash; 保存文档</li>
<li>但是经终端里面的快捷键是跟Linux是一样的，比如Ctrl+W是删除掉一个字, Ctrl+C终止一个进程</li>
</ul>


<h2>配置终端</h2>

<p>对于开发者来讲，命令行始终都是一个非常好的工具，无论是什么平台，虽然苹果以GUI著称，但是命令行还是很有用处。Mac的Shell默认是bash，因为它是Unix的一个分支，所以使用起来跟Ubuntu几乎一样，常用的命令，常见的配置完全一样。</p>

<p>但是默认的终端很难看，也不好用，需要一些配置，打开终端的Preferences，选择一个Profile，然后进行一些颜色，字体，大小可以按照自己的风格来，在Shell一栏的“When the shell exits:”选择Close if the shell exited cleanly。然后，Prompt before closing选择Only if there are processes other than the login shell and …</p>

<p>安装XCode时，一定要把命令行工具集也都安装上。</p>

<h3>给终端配色</h3>

<p>在$HOME目录下，编辑.bash_profile文件，如果没有就自己创建一个，在里面最下面输入：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">CLICOLOR</span><span class="o">=</span>1
</span><span class='line'><span class="nb">export </span><span class="nv">LSCOLORS</span><span class="o">=</span>GxFxCxDxBxegedabagaced
</span></code></pre></td></tr></table></div></figure>


<p>具体这是啥意思，可以参考<a href="http://osxdaily.com/2012/02/21/add-color-to-the-terminal-in-mac-os-x/">这篇文章</a></p>

<h3>添加alias</h3>

<p>同样，在.bash_profile文件中添加一些自己喜欢的alias</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">alias </span><span class="nv">grep</span><span class="o">=</span><span class="s1">&#39;grep -rnIE&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>配置vim</h2>

<p>默认的Mac带有vim，但是还需要一些配置：</p>

<p>在$HOME下面创建一个.vimrc文件，并在里面输入：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="s2">&quot; An example for a vimrc file.</span>
</span><span class='line'><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">&quot; Maintainer:   Bram Moolenaar &lt;Bram@vim.org&gt;</span>
</span><span class='line'><span class="s2">&quot;</span> Last change:   <span class="m">2011</span> Apr 15
</span><span class='line'><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">&quot;</span> To use it, copy it to
</span><span class='line'><span class="s2">&quot;     for Unix and OS/2:  ~/.vimrc</span>
</span><span class='line'><span class="s2">&quot;</span>          <span class="k">for</span> Amiga:  s:.vimrc
</span><span class='line'><span class="s2">&quot;  for MS-DOS and Win32:  $VIM\_vimrc</span>
</span><span class='line'><span class="s2">&quot;</span>        <span class="k">for</span> OpenVMS:  sys<span class="nv">$login</span>:.vimrc
</span><span class='line'>
</span><span class='line'><span class="s2">&quot; When started as &quot;</span>evim<span class="s2">&quot;, evim.vim will already have done these settings.</span>
</span><span class='line'><span class="s2">if v:progname =~? &quot;</span>evim<span class="s2">&quot;</span>
</span><span class='line'><span class="s2">  finish</span>
</span><span class='line'><span class="s2">endif</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;</span> Use Vim settings, rather than Vi settings <span class="o">(</span>much better!<span class="o">)</span>.
</span><span class='line'><span class="s2">&quot; This must be first, because it changes other options as a side effect.</span>
</span><span class='line'><span class="s2">set nocompatible</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;</span> allow backspacing over everything in insert mode
</span><span class='line'><span class="nb">set </span><span class="nv">backspace</span><span class="o">=</span>indent,eol,start
</span><span class='line'>
</span><span class='line'><span class="k">if</span> has<span class="o">(</span><span class="s2">&quot;vms&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="nb">set </span>nobackup        <span class="s2">&quot; do not keep a backup file, use versions instead</span>
</span><span class='line'><span class="s2">else</span>
</span><span class='line'><span class="s2">  set backup     &quot;</span> keep a backup file
</span><span class='line'>endif
</span><span class='line'><span class="nb">set history</span><span class="o">=</span>50     <span class="s2">&quot; keep 50 lines of command line history</span>
</span><span class='line'><span class="s2">set ruler        &quot;</span> show the cursor position all the <span class="nb">time</span>
</span><span class='line'><span class="nb">set </span>showcmd       <span class="s2">&quot; display incomplete commands</span>
</span><span class='line'><span class="s2">set incsearch        &quot;</span> <span class="k">do</span> incremental searching
</span><span class='line'>
</span><span class='line'><span class="s2">&quot; For Win32 GUI: remove &#39;t&#39; flag from &#39;guioptions&#39;: no tearoff menu entries</span>
</span><span class='line'><span class="s2">&quot;</span> <span class="nb">let</span> <span class="p">&amp;</span><span class="nv">guioptions</span> <span class="o">=</span> substitute<span class="o">(</span><span class="p">&amp;</span>guioptions, <span class="s2">&quot;t&quot;</span>, <span class="s2">&quot;&quot;</span>, <span class="s2">&quot;g&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot; Don&#39;t use Ex mode, use Q for formatting</span>
</span><span class='line'><span class="s2">map Q gq</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;</span> CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first <span class="nb">break </span>undo,
</span><span class='line'><span class="s2">&quot; so that you can undo CTRL-U after inserting a line break.</span>
</span><span class='line'><span class="s2">inoremap &lt;C-U&gt; &lt;C-G&gt;u&lt;C-U&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;</span> In many terminal emulators the mouse works just fine, thus <span class="nb">enable </span>it.
</span><span class='line'><span class="k">if</span> has<span class="o">(</span><span class="s1">&#39;mouse&#39;</span><span class="o">)</span>
</span><span class='line'>  <span class="nb">set </span><span class="nv">mouse</span><span class="o">=</span>a
</span><span class='line'>endif
</span><span class='line'>
</span><span class='line'><span class="s2">&quot; Switch syntax highlighting on, when the terminal has colors</span>
</span><span class='line'><span class="s2">&quot;</span> Also switch on highlighting the last used search pattern.
</span><span class='line'><span class="k">if</span> <span class="p">&amp;</span>t_Co &gt; <span class="m">2</span> <span class="o">||</span> has<span class="o">(</span><span class="s2">&quot;gui_running&quot;</span><span class="o">)</span>
</span><span class='line'>  syntax on
</span><span class='line'>  <span class="nb">set </span>hlsearch
</span><span class='line'>endif
</span><span class='line'>
</span><span class='line'><span class="s2">&quot; Only do this part when compiled with support for autocommands.</span>
</span><span class='line'><span class="s2">if has(&quot;</span>autocmd<span class="s2">&quot;)</span>
</span><span class='line'>
</span><span class='line'><span class="s2">  &quot;</span> Enable file <span class="nb">type </span>detection.
</span><span class='line'>  <span class="s2">&quot; Use the default filetype settings, so that mail gets &#39;tw&#39; set to 72,</span>
</span><span class='line'><span class="s2">  &quot;</span> <span class="s1">&#39;cindent&#39;</span> is on in C files, etc.
</span><span class='line'>  <span class="s2">&quot; Also load indent files, to automatically do language-dependent indenting.</span>
</span><span class='line'><span class="s2">  filetype plugin indent on</span>
</span><span class='line'>
</span><span class='line'><span class="s2">  &quot;</span> Put these in an autocmd group, so that we can delete them easily.
</span><span class='line'>  augroup vimrcEx
</span><span class='line'>  au!
</span><span class='line'>
</span><span class='line'>  <span class="s2">&quot; For all text files set &#39;textwidth&#39; to 78 characters.</span>
</span><span class='line'><span class="s2">  autocmd FileType text setlocal textwidth=78</span>
</span><span class='line'>
</span><span class='line'><span class="s2">  &quot;</span> When editing a file, always jump to the last known cursor position.
</span><span class='line'>  <span class="s2">&quot; Don&#39;t do it when the position is invalid or when inside an event handler</span>
</span><span class='line'><span class="s2">  &quot;</span> <span class="o">(</span>happens when dropping a file on gvim<span class="o">)</span>.
</span><span class='line'>  <span class="s2">&quot; Also don&#39;t do it when the mark is in the first line, that is the default</span>
</span><span class='line'><span class="s2">  &quot;</span> position when opening a file.
</span><span class='line'>  autocmd BufReadPost *
</span><span class='line'>    <span class="se">\ </span><span class="k">if</span> line<span class="o">(</span><span class="s2">&quot;&#39;\&quot;&quot;</span><span class="o">)</span> &gt; <span class="m">1</span> <span class="o">&amp;&amp;</span> line<span class="o">(</span><span class="s2">&quot;&#39;\&quot;&quot;</span><span class="o">)</span> &lt;<span class="o">=</span> line<span class="o">(</span><span class="s2">&quot;$&quot;</span><span class="o">)</span> <span class="p">|</span>
</span><span class='line'>    <span class="se">\ </span>  exe <span class="s2">&quot;normal! g`\&quot;&quot;</span> <span class="p">|</span>
</span><span class='line'>    <span class="se">\ </span>endif
</span><span class='line'>
</span><span class='line'>  augroup END
</span><span class='line'>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">set </span>autoindent      <span class="s2">&quot; always set autoindenting on</span>
</span><span class='line'>
</span><span class='line'><span class="s2">endif &quot;</span> has<span class="o">(</span><span class="s2">&quot;autocmd&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot; Convenient command to see the difference between the current buffer and the</span>
</span><span class='line'><span class="s2">&quot;</span> file it was loaded from, thus the changes you made.
</span><span class='line'><span class="s2">&quot; Only define it when not defined already.</span>
</span><span class='line'><span class="s2">if !exists(&quot;</span>:DiffOrig<span class="err">&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="nb">command </span>DiffOrig vert new <span class="p">|</span> <span class="nb">set </span><span class="nv">bt</span><span class="o">=</span>nofile <span class="p">|</span> r ++edit <span class="c"># | 0d_ | diffthis</span>
</span><span class='line'>        <span class="se">\ </span><span class="p">|</span> wincmd p <span class="p">|</span> diffthis
</span><span class='line'>endif
</span><span class='line'>
</span><span class='line'><span class="nb">set </span>nu
</span><span class='line'><span class="nb">set </span>sm
</span><span class='line'><span class="nb">set </span>si
</span><span class='line'><span class="nb">set </span>cindent
</span><span class='line'><span class="nb">set </span>smarttab
</span><span class='line'><span class="nb">set </span><span class="nv">ts</span><span class="o">=</span>4
</span><span class='line'><span class="nb">set </span><span class="nv">shiftwidth</span><span class="o">=</span>4
</span><span class='line'><span class="nb">set </span>expandtab
</span><span class='line'><span class="nb">set </span><span class="nv">mouse</span><span class="o">=</span>a
</span><span class='line'><span class="nb">set </span>nobackup
</span><span class='line'><span class="nb">let </span>g:neocomplcache_enable_at_startup <span class="o">=</span> 1
</span><span class='line'>colorscheme desert
</span></code></pre></td></tr></table></div></figure>


<p>如果对自带的vim不满意，可以使用<a href="http://code.google.com/p/macvim/">MacVim</a>，这个功能更为强大，且支持GUI操作。</p>

<h2>配置git</h2>

<p>这个就是配置常用的git属性：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>color<span class="o">]</span>
</span><span class='line'>  <span class="nv">diff</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'><span class="nb"> </span><span class="nv">status</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'><span class="nb">    </span><span class="nv">interactive</span> <span class="o">=</span> auto
</span><span class='line'>  <span class="nv">branch</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'><span class="o">[</span>core<span class="o">]</span>
</span><span class='line'>  <span class="nv">editor</span> <span class="o">=</span> /usr/bin/vim
</span><span class='line'>  <span class="nv">autocrlf</span> <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'><span class="nb"> </span><span class="nv">filemode</span> <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'><span class="o">[</span>merge<span class="o">]</span>
</span><span class='line'>  <span class="nv">tool</span> <span class="o">=</span> vimdiff
</span><span class='line'><span class="o">[</span><span class="nb">alias</span><span class="o">]</span>
</span><span class='line'>  <span class="nv">co</span> <span class="o">=</span> checkout
</span><span class='line'>  <span class="nv">ci</span> <span class="o">=</span> commit
</span><span class='line'>  <span class="nv">st</span> <span class="o">=</span> status
</span><span class='line'>  <span class="nv">br</span> <span class="o">=</span> branch
</span><span class='line'><span class="o">[</span>push<span class="o">]</span>
</span><span class='line'>  <span class="nv">default</span> <span class="o">=</span> upstream
</span></code></pre></td></tr></table></div></figure>


<p>如果你也有使用Mac的一些技巧，请与我分享。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 7和8的新特性以及与Android开发的关系]]></title>
    <link href="http://toughcoder.net/blog/2014/11/12/java-7-and-8-and-android/"/>
    <updated>2014-11-12T21:54:11+08:00</updated>
    <id>http://toughcoder.net/blog/2014/11/12/java-7-and-8-and-android</id>
    <content type="html"><![CDATA[<p>Oracle一直在推动Java的发展，到目前最新的Java SE是Java 8以及JDK8，但是目前貌似很多人还在使用Java 6（JDK6)，于是就花时间小研究了下Java 7与Java 8。</p>

<p><a href="http://toughcoder.net/blog/2014/11/12/java-7-and-8-and-android/"><img src="http://nerdsmagazine.com/wp-content/uploads/2013/06/Run-Android-Apps-and-Games-on-Android.jpg"></a></p>

<!-- more -->


<h2>Java 7（JDK 7)的语言新特性</h2>

<p>Java SE 7新增的语言特性并不是很多，主要有：</p>

<ul>
<li>try 语句资源管理(The try-with-resources Statement)</li>
<li>同一catch捕获多个异常(Catching Multiple Exception Types)</li>
<li>创建泛型对象时的类型推测(Type inferenes for Generic Instance Creation)</li>
<li>二进制的字面常量(Binary Literals)</li>
<li>数值字面常量里的可以有下划线(Underscores in Numeric Literals)</li>
<li>switch语句支持String(Strings in switch Statements)</li>
</ul>


<p>下面来个实例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.net.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Switch</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Underscores in numeric literals</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">USER_COUNT_LIMIT</span> <span class="o">=</span> <span class="mi">1_000_000_000</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Type inference when creating generics</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">fruits</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">args</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">a</span> <span class="o">:</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">fruits</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="c1">// Strings in switch</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">a</span> <span class="o">:</span> <span class="n">fruits</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">switch</span> <span class="o">(</span><span class="n">a</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="s">&quot;apple&quot;</span><span class="o">:</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;eat an apple a day, the doctors go away&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="s">&quot;orange&quot;</span><span class="o">:</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;orange juice&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;i do not know what you want&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// With &#39;try-with-resources&#39; no longer need finally to clean up resources.</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">(</span><span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nf">FileReader</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="n">args</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">])))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
</span><span class='line'>            <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">// Catch multiple exceptions</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="o">|</span> <span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// binary literals</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">userCount</span> <span class="o">=</span> <span class="mi">0</span><span class="n">b1010101</span><span class="o">;</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Current we have &quot;</span> <span class="o">+</span> <span class="n">userCount</span> <span class="o">+</span> <span class="s">&quot; users, while limit is &quot;</span> <span class="o">+</span> <span class="n">USER_COUNT_LIMIT</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">userCount</span> <span class="o">&lt;</span> <span class="n">USER_COUNT_LIMIT</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;We are okay, it is under control&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Alert alert alert&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>编译并运行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>alex:jdk1.7.0_71<span class="o">]</span><span class="nv">$.</span>/bin/javac Switch.java -Xlint
</span><span class='line'><span class="o">[</span>alex:jdk1.7.0_71<span class="o">]</span><span class="nv">$.</span>/bin/java Switch apple Switch.java README.html
</span><span class='line'>eat an apple a day, the doctors go away
</span><span class='line'>i <span class="k">do</span> not know what you want
</span><span class='line'>i <span class="k">do</span> not know what you want
</span><span class='line'>&lt;html&gt;
</span><span class='line'>Current we have <span class="m">85</span> users, <span class="k">while</span> limit is 1000000000
</span><span class='line'>We are okay, it is under control
</span></code></pre></td></tr></table></div></figure>


<p>可以看出，其实Java 7并无太大改进，只是多了些语法糖而已。</p>

<h2>Java 8(JDK 8）的语言新特性</h2>

<p>Java 8最大的改进就是增加了lambda表达式(Lambda Expression)，来看个实例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Lambda</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">apply</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">,</span> <span class="n">Action</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">action</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">T</span> <span class="n">t</span> <span class="o">:</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">action</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">stuff</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">stuff</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Lambda</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">lambda</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Lambda</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>        <span class="c1">// Use lambda expression to specify action</span>
</span><span class='line'>        <span class="n">lambda</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="n">stuff</span><span class="o">,</span> <span class="n">s</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Another example of lambda expression for threading</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">Thread</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;working &quot;</span> <span class="o">+</span> <span class="n">i</span> <span class="o">+</span> <span class="s">&quot; seconds&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}).</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">interface</span> <span class="nc">Action</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">perform</span><span class="o">(</span><span class="n">T</span> <span class="n">t</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>编译并运行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>alex:jdk1.8.0_25<span class="o">]</span><span class="nv">$.</span>/bin/javac Lambda.java -Xlint
</span><span class='line'><span class="o">[</span>alex:jdk1.8.0_25<span class="o">]</span><span class="nv">$.</span>/bin/java Lambda apple orange
</span><span class='line'>apple
</span><span class='line'>orange
</span><span class='line'>working <span class="m">0</span> seconds
</span><span class='line'>working <span class="m">1</span> seconds
</span><span class='line'>working <span class="m">2</span> seconds
</span><span class='line'>working <span class="m">3</span> seconds
</span><span class='line'>working <span class="m">4</span> seconds
</span><span class='line'>working <span class="m">5</span> seconds
</span><span class='line'>working <span class="m">6</span> seconds
</span><span class='line'>working <span class="m">7</span> seconds
</span><span class='line'>working <span class="m">8</span> seconds
</span><span class='line'>working <span class="m">9</span> seconds
</span></code></pre></td></tr></table></div></figure>


<p>在Java 8中，可以比用匿名内部类更加方便的方式来设置回调。</p>

<h2>Android中的Java</h2>

<p>那么，Android到底与Java是什么关系呢？<a href="http://www.vaikan.com/android-java/">有人说</a>它们是一样的。其实没啥关系，Android虽然使用Java语言作为它的主要开发语言，但是它并完全等同于Java SE JDK，JDK中关于UI的AWT和Swing在Android都没有，所以它的API是标准JDK 6的一个子集。Android中的Java是基于<a href="http://www.apache.org/">Apache</a>的<a href="http://harmony.apache.org/">Apache Harmony</a>，与标准Java SE 6语法完全一样，可以看看它们之间的<a href="http://en.wikipedia.org/wiki/Comparison_of_Java_and_Android_API">异同</a>，以及<a href="http://www.zhihu.com/question/20207106">Dalvik与Java VM</a>。</p>

<h2>Java 7和Java 8与Andoid开发</h2>

<p>Java在进步，语法上越来越人性化，那么Android开发能否得益呢？Java 7是可以的，在最新的开发工具（ADT 23和Kitkat）下，可以使用Java 7。但对于Java 8不能直接使用，只能借助第三方工具来翻译bytecode。所以对于Android开发者同学们来说，尝一尝Java最新的语法糖就可以了，想要天天使用，还要慎重考虑哦！</p>

<h2>参考</h2>

<ul>
<li><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/language/enhancements.html">Java Programming Language Enhancements</a></li>
<li><a href="http://stackoverflow.com/questions/16921337/why-apache-harmony-or-how-to-use-java-8-on-android">“Why Apache Harmony” or “How to use Java 8 on Android”</a></li>
<li><a href="http://stackoverflow.com/questions/23318109/is-it-possible-to-use-java-8-for-android-development">Is it possible to use Java 8 for Android development?</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Swift]]></title>
    <link href="http://toughcoder.net/blog/2014/11/04/introduction-to-swift/"/>
    <updated>2014-11-04T21:22:33+08:00</updated>
    <id>http://toughcoder.net/blog/2014/11/04/introduction-to-swift</id>
    <content type="html"><![CDATA[<p><a href="https://developer.apple.com/swift/">Swift</a>是水果平台新引进的一个开发语言，可以用它来取代Objective-C来开发Mac OS X以及iOS上面的应用程序。这门语言引入了大量的具有时代气息的新型编程语言特性，具有动态语言的简洁方便，是未来的发展方向。这是一门新的语言，今年六月才问世，所以如果今天开始学习Swift，三五年后，孤将是“有着五年经验的Swift砖家”了，错过了C，C++，Java，Python等，这回可以跟所有人站在同一起跑线上了。</p>

<p><a href="http://toughcoder.net/blog/2014/11/04/introduction-to-swift/"><img src="https://img.alicdn.com/imgextra/i1/715978679/TB2LhbDjVXXXXX9XpXXXXXXXXXX_!!715978679.jpg" width="640" height="480"></a></p>

<!-- more -->


<h2>必备的工具</h2>

<p>很显然，要想玩水果的东西，就必须有Mac电脑，而且<a href="https://developer.apple.com/xcode/downloads/">XCode 6</a>和以后的版本才支持Swift，而XCode 6需要Mac Mavericks（10.9）以后的版本才可以。所以，如果是旧的Mac还不一定可行。</p>

<p>孤作为穷人，无法支付死贵死贵的Mac机，所以只能用虚拟机对付了。VMWare可以搞定一切，具体方法请百度，网络上面有很多已经安装好的VMWare的Mac镜像，下载解压后就可以使用。等发达了，孤再买Mac。</p>

<p>其实，如果你只是想学习Swift，而不是iOS或Mac开发，那么完全没有必要这么麻烦，用一个浏览器就能搞定，<a href="https://swiftstub.com/">SwiftStub</a>是一个在线即时Swift编译器，用起来相当爽。</p>

<p>至于教程，看官方的就好了，<a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/GuidedTour.html#//apple_ref/doc/uid/TP40014097-CH3-XID_0">浏览器（网站）</a>，iBooks都可以方便的看到。</p>

<p>这方面，水果比谷歌强多了，更为重要的是水果在中国访问无压力，谷歌就蛋疼了，上半年<a href="http://developer.android.com/index.html">Android的文档</a>都无法访问，现在<a href="http://source.android.com/">Android源码</a>也时常抽风，不说了。</p>

<h2>初体验</h2>

<p>先来个高大上的第一个程序：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;Hello, world&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>我想都能猜出来会输出啥吧。
建议把<a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/GuidedTour.html#//apple_ref/doc/uid/TP40014097-CH3-XID_0">A Swift Tour</a>的代码全都敲一遍，虽然可能你没有理解，至少有个初级印象。</p>

<h2>基本语法结构</h2>

<p>可以说Swift与<a href="https://www.python.org/">Python</a>的语法结构是比较接近。每一行语句结尾处不用写分号。如果一行有多条语句，要用分号隔开。</p>

<h3>变量的定义是用var关键字</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="n">slideCount</span>
</span><span class='line'><span class="n">slideCount</span> <span class="o">=</span> <span class="n">countSlides</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h3>常量用let关键字</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">slideLimit</span> <span class="o">=</span> <span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure>


<h3>注释与C/C++和Java以及Objective-C是一样的</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">timeout</span> <span class="o">=</span> <span class="mi">20</span> <span class="c1">// in seconds</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Send a email to destination</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">sendEmail</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h3>数据类型</h3>

<p>这个也跟其他语言没啥大区别，String, Int, Bool, Double等。</p>

<h3>运算符号</h3>

<p>+, -, *, /, %, &amp;&amp;, ||, !, ==, : ?跟其他语言一致</p>

<h3>控制语句</h3>

<p>分支，循环跟其他语言也基本一致。只是条件判断的地方，跟Python一样，不用写括号：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">message</span> <span class="o">=</span> <span class="s">&quot;Who are you&quot;</span>
</span><span class='line'><span class="k">if</span> <span class="n">message</span> <span class="o">==</span> <span class="s">&quot;Unlock me&quot;</span> <span class="p">{</span>
</span><span class='line'>   <span class="c1">// something happen</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>   <span class="c1">// ignored</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">var</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// sleep for another i mins</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">var</span> <span class="n">done</span> <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'><span class="k">do</span> <span class="p">{</span>
</span><span class='line'>   <span class="c1">// continue coding</span>
</span><span class='line'><span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">done</span><span class="p">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">fruits</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;Apple&quot;</span><span class="p">,</span> <span class="s">&quot;Pear&quot;</span><span class="p">,</span> <span class="s">&quot;Cherry&quot;</span><span class="p">,</span> <span class="s">&quot;Peach&quot;</span><span class="p">]</span>
</span><span class='line'><span class="k">for</span> <span class="n">f</span> <span class="k">in</span> <span class="n">fruits</span> <span class="p">{</span>
</span><span class='line'>   <span class="c1">// eat it</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>函数</h3>

<p>函数的形式就是func name()->，括号中放参数，箭头后面是返回值，无参数就是空括号，无返回值不用写箭头。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">countSlides</span><span class="p">(</span><span class="nl">slide</span><span class="p">:</span> <span class="n">Slide</span><span class="p">,</span> <span class="nl">mine</span><span class="p">:</span> <span class="n">Bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">return</span> <span class="mi">10</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Swift的特性</h2>

<p>除了有所有编程语言所共有的特性以外，Swift有一些比较不太常见的语言特性，是学习的时候需要特别学习和理解的。</p>

<h3>选项型变量(Optionals)</h3>

<p>可能翻译的不准确。Optionals的意思就是这个变量有一个有意义的值，或者什么都不是。简单来讲，或者通俗的来理解，就是一个对象是不是nil。</p>

<p>Optional的表达方式是在类型后面加个问号，如String?表示一个字串，Int?表示一个整型。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="nl">possibleString</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span> <span class="c1">// default set to nil</span>
</span><span class='line'><span class="n">possibleString</span> <span class="o">=</span> <span class="s">&quot;Beijing&quot;</span>
</span><span class='line'><span class="k">let</span> <span class="nl">count</span><span class="p">:</span> <span class="n">Int</span><span class="o">?</span> <span class="o">=</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>获取Optional变量的值可以用叹号，如<strong>possibleString!</strong>就是取它的值。但是如果变量是没有值的(nil)，取值时会得到异常。</p>

<p>其实可以用C语言的指针来简单理解这玩意，Optional就相当于指针，取值*操作对于空指针（NULL）肯定会挂。</p>

<p>这玩意这么不好理解，到底有啥用？就是专门用在判断语句中的，可以消除== nil的这种判断：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="nl">possibleString</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span> <span class="o">=</span> <span class="s">&quot;Impossible is nothing&quot;</span>
</span><span class='line'><span class="k">if</span> <span class="k">let</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">possibleString</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="n">msg</span><span class="o">!</span><span class="p">)</span> <span class="c1">// or println(msg), they are equal</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">var</span> <span class="nl">possibleNumber</span><span class="p">:</span> <span class="n">Int</span><span class="o">?</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'><span class="k">if</span> <span class="k">var</span> <span class="n">cnt</span> <span class="o">=</span> <span class="n">possibleNumber</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">cnt</span> <span class="o">+=</span> <span class="mi">10</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这意思就是如果possibleString有值（不是nil），则赋给msg，并执行分支，等价于如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">if</span> <span class="n">possibleString</span> <span class="o">!=</span> <span class="nb">nil</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">println</span><span class="p">(</span><span class="n">possibleString</span><span class="o">!</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">println</span><span class="p">(</span><span class="s">&quot;it is null&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>怎么样，对于C/C++和Java语言来说，这的确优雅很多。而普通的定义变量的方式就不能这么用。</p>

<h3>判断空的操作符</h3>

<p>??操作如果操作数是合法值，则返回它的值，否则返回nil，这有啥用？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">a</span> <span class="o">??</span> <span class="n">b</span>
</span><span class='line'><span class="c1">// is equal to </span>
</span><span class='line'><span class="n">a</span> <span class="o">!=</span> <span class="n">nill</span> <span class="o">?</span> <span class="n">a</span><span class="o">!</span> <span class="o">:</span> <span class="n">b</span>
</span></code></pre></td></tr></table></div></figure>


<p>比如，设置字体大小，默认是32，从用户取值，fallback成默认值，可以这么写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">defaultFontSize</span> <span class="o">=</span> <span class="mi">32</span>
</span><span class='line'><span class="k">var</span> <span class="nl">userValue</span><span class="p">:</span> <span class="n">Int</span><span class="o">?</span> <span class="o">=</span> <span class="n">getUserFontSize</span><span class="p">()</span>
</span><span class='line'><span class="k">let</span> <span class="n">fontSize</span> <span class="o">=</span> <span class="n">userValue</span> <span class="o">??</span> <span class="n">defaultFontSize</span>
</span></code></pre></td></tr></table></div></figure>


<p>怎么样，又省去了nil判断，优雃了不少。</p>

<h3>引用判断操作符</h3>

<p>对象的等值性(Equivalence)与指向对象的引用的等值性一直是一个困扰很多人的问题，特别是初学者，对于Java更是这样，很多隐蔽性的Bug都出现在了等值的判断上。对于Java，==是判断引用是否指向同一个对象，而equals方法则是判断二个对象是否相同，而对象的相同则是需要自己去定义的。</p>

<p>同样，这里也是==是检查对象是否相同，而===是检查引用是否相同.</p>

<h3>范围操作符</h3>

<p>…是范围操作符，类似Python中的range()函数。</p>

<p>a…b是表示[a, b]，都是闭区间（希望数学区间的概念都没有忘记）</p>

<p>a..&lt;b是表示[a, b)，后面是开区间</p>

<p>必须保证a &lt; b，开始比结束小.</p>

<h3>函数外参数名</h3>

<p>与Objective-C一样，Swift的函数也支持外部参数名(External Parameter Names)，就是调用函数的时候也指定参数的名字，以加强程序的可读性，对于同一类型参数的函数来说特别重要。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">countSlide</span><span class="p">(</span><span class="err">#</span><span class="nl">slide</span><span class="p">:</span> <span class="n">Slide</span><span class="p">,</span> <span class="err">#</span><span class="nl">mime</span><span class="p">:</span> <span class="n">Bool</span><span class="p">,</span> <span class="err">#</span><span class="nl">message</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>   <span class="c1">/// ….</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">countSlide</span><span class="p">(</span><span class="nl">slide</span><span class="p">:</span> <span class="n">aslide</span><span class="p">,</span> <span class="nl">mine</span><span class="p">:</span> <span class="nb">false</span><span class="p">,</span> <span class="nl">message</span><span class="p">:</span> <span class="s">&quot;Go to bed&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>怎么样，这是不是大大的增加了程序的可读性呢！起码我觉得是的。相比Java（或者其他语言）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="kt">int</span> <span class="nf">countSlide</span><span class="p">(</span><span class="n">Slide</span> <span class="n">slide</span><span class="p">,</span> <span class="n">boolean</span> <span class="n">mine</span><span class="p">,</span> <span class="n">String</span> <span class="n">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">countSlide</span><span class="p">(</span><span class="n">aslide</span><span class="p">,</span> <span class="nb">false</span><span class="p">,</span> <span class="s">&quot;Not now&quot;</span><span class="p">);</span> <span class="c1">// cannot guess what parameters mean and for</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于函数声明，可以大致明白参数的用途。但是看着函数的调用，完全不知道参数都是用来干嘛的，特别是对于boolean, int等基本的数据类型。</p>

<h3>闭包</h3>

<p>闭包(Closure)是现代编程语言必不可少一个特性，它能有效的减少代码，减少对成员状态的依赖。这是函数式编程的必要特性，用闭包可以不用成员或者全局变量。</p>

<p>闭包的数学上的定义比较复杂，头发多的人都看不懂。通俗来讲闭包就是所定义的函数或者类持有它所在的定义域内的所有变量，常量和方法的引用。还是有点绕，说白了，就是一个内部定义的函数或者类，持有对外部类的所有成员的引用。</p>

<p>闭包的通常的呈现形式：</p>

<ul>
<li>（匿名）内部类</li>
<li>（匿名）内部函数</li>
<li>Lamda表达式，通常是指短小的匿名函数</li>
<li>全局类和函数其实也是闭包，只不过它们没有闭合任何外部引用而已</li>
</ul>


<p><strong>捕获</strong>的概念，当闭包引用外部变量时，就称作捕获外部变量。也就是说当你在内部函数里面访问外部变量时，就是在捕获变量。</p>

<p>各种语言中，闭包使用最多的形式就是Lamda表达式，就是一些短小的命名或匿名函数体。这也是闭包的意义所在。</p>

<p>在Swift中闭包的主要形式就是匿名或者命名函数体。对于命名函数体的定义和使用方式跟普通函数一样，只不过可以捕获变量。如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">makeIncrementor</span><span class="p">(</span><span class="err">#</span><span class="nl">step</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">var</span> <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>   <span class="k">func</span> <span class="n">incrementor</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">total</span> <span class="o">+=</span> <span class="n">step</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">step</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">incrementor</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">var</span> <span class="n">a</span> <span class="o">=</span> <span class="n">makeIncrementor</span><span class="p">(</span><span class="nl">step</span><span class="p">:</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="n">a</span><span class="p">()</span> <span class="c1">// 10</span>
</span><span class='line'><span class="n">a</span><span class="p">()</span> <span class="c1">// 20</span>
</span><span class='line'><span class="n">a</span><span class="p">()</span> <span class="c1">// 30</span>
</span></code></pre></td></tr></table></div></figure>


<p>但更多时候还是使用匿名函数体或者叫做Lamda表达式，因为这是最方便的。形式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="p">{</span> <span class="p">(</span> <span class="o">**</span><span class="n">parameters</span><span class="o">**</span> <span class="p">)</span> <span class="o">-&gt;</span> <span class="o">**</span><span class="k">return</span> <span class="n">types</span><span class="o">**</span> <span class="k">in</span>
</span><span class='line'>  <span class="o">**</span><span class="n">statements</span><span class="o">**</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>比如，定义一个遍历数组，并对每一个元素都做某种操作的函数，调用者使用时就可以用闭包来完成这某种操作：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">apply</span><span class="p">(</span><span class="err">#</span><span class="nl">list</span><span class="p">:</span> <span class="p">[</span><span class="n">Int</span><span class="p">],</span> <span class="err">#</span><span class="nl">action</span><span class="p">:</span> <span class="p">(</span><span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">())</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">item</span> <span class="k">in</span> <span class="n">list</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">action</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">var</span> <span class="n">primes</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">19</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Standard closure</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;Standard closure&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">apply</span><span class="p">(</span><span class="nl">list</span><span class="p">:</span> <span class="n">primes</span><span class="p">,</span> <span class="nl">action</span><span class="p">:</span> <span class="p">{(</span><span class="nl">item</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">()</span> <span class="k">in</span> <span class="n">println</span><span class="p">(</span><span class="n">item</span><span class="p">)})</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Simplified by removing return type</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;Removing return type&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">apply</span><span class="p">(</span><span class="nl">list</span><span class="p">:</span> <span class="n">primes</span><span class="p">,</span> <span class="nl">action</span><span class="p">:</span> <span class="p">{(</span><span class="nl">item</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="k">in</span> <span class="n">println</span><span class="p">(</span><span class="n">item</span><span class="p">)})</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Simplified by removing type</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;Removeing type&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">apply</span><span class="p">(</span><span class="nl">list</span><span class="p">:</span> <span class="n">primes</span><span class="p">,</span> <span class="nl">action</span><span class="p">:</span> <span class="p">{(</span><span class="n">item</span><span class="p">)</span>  <span class="k">in</span> <span class="n">println</span><span class="p">(</span><span class="n">item</span><span class="p">)})</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;Removing parentheses&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">apply</span><span class="p">(</span><span class="nl">list</span><span class="p">:</span> <span class="n">primes</span><span class="p">,</span> <span class="nl">action</span><span class="p">:</span> <span class="p">{</span><span class="n">item</span> <span class="k">in</span> <span class="n">println</span><span class="p">(</span><span class="n">item</span><span class="p">)})</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Simplified again with shorthand</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;Removing param and use shorthands&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">apply</span><span class="p">(</span><span class="nl">list</span><span class="p">:</span> <span class="n">primes</span><span class="p">,</span> <span class="nl">action</span><span class="p">:</span> <span class="p">{</span><span class="n">println</span><span class="p">(</span><span class="err">$</span><span class="mi">0</span><span class="p">)})</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果，闭包是函数的最后一个参数，还有另外一种写法，叫做尾后闭包(Trailing Closure)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">someFunction</span><span class="p">(</span><span class="n">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">closure</span> <span class="n">goes</span> <span class="n">here</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// With trailing closure</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;With trailing closure&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">apply</span><span class="p">(</span><span class="nl">list</span><span class="p">:</span> <span class="n">primes</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">item</span> <span class="k">in</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">apply</span><span class="p">(</span><span class="nl">list</span><span class="p">:</span> <span class="n">primes</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="err">$</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>结构体</h3>

<p>struct几乎与class有同样的功能，都能定义复杂数据结构，添加行为方法，但它们还是有区别的：</p>

<p>最大的区别就是struct是按值拷贝赋值，而class是按引用拷贝。因此，大多数情况下，还是要使用class，效率上至少会有收益。那么为啥还要有struct呢?它适用于<a href="http://en.wikipedia.org/wiki/Plain_old_data_structure">Plain old data structure or PoD</a>，也就是说一个纯数据结构，里面全都是基本类型。</p>

<p>其他场合，还是用class吧。
（是不是想起了C++著名的面试题struct vs class）</p>

<h2>这才仅仅是冰山一角</h2>

<p>这里仅是简单的介绍了Swift的一些语言特性，仅够入门使用，但足可以开始iOS之旅，光有语言还是不够的，对于任何一个平台，编程语言仅能占三成，剩下的大部分还是要学习平台提供的东西，包括开发环境，IDE，和平台提供的API（库）。对于CocoaTouch来说，它跟语言（Swift和Objective-C）基本上是无关的，现在的<a href="https://developer.apple.com/library/ios/navigation/#section=Resource%20Types&amp;topic=Reference">官方文档</a>的API说明都给出了二种语言的接口，而且Swift和Objective-C基本上可以无缝切换，所以如果已熟悉iOS的框架的，可以轻松转换。</p>

<h2>参考及资源</h2>

<ul>
<li><a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH3-XID_0">The Swift Programming Language</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps/">Using Swift with Cocoa and Objective-C</a></li>
<li><a href="http://www.devtalking.com/">程序员说</a></li>
<li><a href="http://helloswift.com.cn/">Swift中文社区</a></li>
<li><a href="http://swiftist.org/">Swiftist</a></li>
<li><a href="http://letsswift.com/">Let&rsquo;s Swift</a></li>
<li><a href="http://www.swift-open.com/">Swift开发者</a></li>
<li><a href="http://www.iswifting.com/">iSwifting</a></li>
<li><a href="http://www.swiftv.cn/">SwiftV</a></li>
<li><a href="http://swift.sh/">SwiftChina</a></li>
<li><a href="http://www.infoq.com/news/2014/06/apple-swift-learning-resources">Online Resources to Learn Apple&rsquo;s Swift Language</a></li>
<li><a href="http://swiftlang.eu/">Swift Language</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
