<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[猿轩阁]]></title>
  <link href="http://alexhilton.github.io/atom.xml" rel="self"/>
  <link href="http://alexhilton.github.io/"/>
  <updated>2014-10-23T23:17:39+08:00</updated>
  <id>http://alexhilton.github.io/</id>
  <author>
    <name><![CDATA[Alex Hilton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android应用UI架构]]></title>
    <link href="http://alexhilton.github.io/blog/2014/10/22/effective-android-ui-architecture/"/>
    <updated>2014-10-22T23:06:43+08:00</updated>
    <id>http://alexhilton.github.io/blog/2014/10/22/effective-android-ui-architecture</id>
    <content type="html"><![CDATA[<p>这个标题听起来可能有点大，其实这里主要就是讨论一个应用程序的UI组件，是全用Activity还是全用Fragment，或者是二者皆有，以及使用Activity和Fragment的一些注意事项。
<img src="http://i.stack.imgur.com/S4TpY.png"></p>

<h2>Activity or Fragment</h2>

<p>从API 11，Honeycomb开始，Google在Android之中加入了Fragment，一个轻量级的，可复用的，模块化的UI组件，并且官方也极力的推荐要尽可能的使用Fragment实现UI，尽量避免使用Activity，但是官方并没有详尽的解析为什么要这样做，因此，引发了很多人的困惑和网络上的争论</p>

<!-- more -->


<h3>一些讨论</h3>

<p><a href="https://stackoverflow.com/">StackOverflow</a>上面有很多类似的讨论，比如<a href="http://stackoverflow.com/questions/20306091/dilemma-when-to-use-fragments-vs-activities">这个</a>和<a href="http://stackoverflow.com/questions/10478233/android-need-some-clarifications-of-fragments-vs-activities-and-views">这个</a>，以及<a href="http://blog.pluralsight.com/android-fragments">这篇博客</a>和<a href="https://www.altamiracorp.com/blog/employee-posts/fragments-vs-activities-in-and">这篇</a>。</p>

<p>总体的来讲，也都是推荐使用Fragment，并尽可能的使用Fragment，除非你必须使用Activity，否则就使用Fragment。</p>

<h3>主要的区别</h3>

<p>要想真正的理解什么时候该用Activity什么时候该用Fragment，就要从根本上理解它们之间到底有什么区别，以及各自所能做的事情：</p>

<h4>Activity的优缺点</h4>

<p>Activity是Android系统的四大核心组件之一，是唯一用户可见的组件，是可视化应用程序的基础，同时也是应用程序的主要入口。
它的优点是：</p>

<ul>
<li>方便使用，简单，没有版本限制</li>
<li>可以处理系统相关的事情，比如窗体管理，对话框管理，与第三方应用交互，作为应用的入口，处理系统事件等</li>
<li>生命周期简单明了</li>
<li>不同的Activity实例的生命周期相互独立</li>
<li>有系统的ActivityManager来管理，创建和维护实例，以及栈</li>
</ul>


<p>Activity的缺点：</p>

<ul>
<li>无法完全的控制，创建和各种状态全部由Frameworks操控</li>
<li>过于庞大和复杂</li>
<li>传递参数相当费劲</li>
<li>launchMode和栈的管理过于复杂，让人捉摸不透</li>
</ul>


<p>所以，因为它有缺点，所以它适合做为第一级组件，而不适合到处都用。也因此有了Fragment的诞生。</p>

<h4>Fragment的优缺点</h4>

<p>Fragment号称是轻量级的Activity，它有着Activity的部分功能，比如有生命周期，可以显示UI元素，可以有控制逻辑，它有很多优点：</p>

<ul>
<li>可以像普通对象那样自由的创建和控制</li>
<li>因为可以得到实例，所以传递参数等会更加的容易和方便</li>
<li>不用处理系统相关的事情</li>
<li>显示方式可控制，替换，还是层叠，部分还是整体，都容易控制</li>
<li>进出动画都相对容易</li>
</ul>


<p>可以看出Fragment是实现可复用的，模块化UI的良好组件，熟悉iOS开发的人应该知道，这个Fragment跟iOS中的UIViewController是很相似的，都是MVC模式中的负责协调和控制的Controller。</p>

<h3>实用的建议</h3>

<p>那么，到此，我想我们应该能够总结出，到底什么时候该用Activity，什么时候该用Fragment了：</p>

<ul>
<li>一个应用程序必须至少要有一个Activity</li>
<li>如果你需要开放入口给第三方应用，那么要用Activity。比如原生应用中的联系人，信息，相机，图库等，因为要留有接口给第三方使用，所以要用Activity。这也是所谓的组件级复用。</li>
<li>如果要处理系统相关的事情，需要用Activity，比如横竖屏，语言变化，键盘等</li>
<li>如果非要在横屏或竖屏显示，也要用Activity</li>
<li>如果感觉用Fragment来做有很多的不方便，或者很困难，出于各种原因吧。</li>
</ul>


<p>除此外，就使用Fragment吧。因此，对于一个应用程序的UI架构就是一个Host的Activity+Fragment的方式来做。</p>

<h2>使用Activity时的注意事项</h2>

<p>Activity是学习Android开发的第一堂课，我相信有过Android开发经验的人对Activity必定非常的熟悉了，对于使用Activity要注意：</p>

<ul>
<li>除非特别需要，否则要声明configChagnes，至少orientation和keyboard以及keyboardHidden需要加上</li>
<li>减小对Activity实例的引用，尽可能用getApplication()或者getApplicationContext()来做为平台接口需要的Context参数</li>
<li>在AndroidManifest.xml的activity标签中声明全屏，透明或者没有TitleBar的属性，而不是在onCreate()中去requestWindowFeature。除非你需要动态控制</li>
<li>Activity之间传递参数用Intent，尽量传基本数据类型和数据及ArrayList，和平台提供的数据类型如Uri。对于简单的POD(Plain Old Datastructure)数据类型，可以直接由基本数据组成，不必声明对象。对于有必要存在的对象，可以实现Parcelable接口，以方便在Activity之间传递。</li>
</ul>


<h2>使用Fragment时的注意事项</h2>

<p>Fragment是由FragmentManager来管理的，每一个Activity有一个FragmentManager，管理着一个Fragment的栈，所以，Activity是系统级别的，由系统来管理ActivityManager，栈也是系统范围的。而Fragment则是每个Activity范围内的。</p>

<ul>
<li>同一个Activity中，只能有一个ID或TAG标识的Fragment实例。这很容易理解，同一个范围内，有标识的实例肯定是要唯一才行（否则还要标识干嘛）这个在布局中经常犯错，在布局中写Fragment最好不要加ID或者TAG，否则很容易出现不允许创建的错误。我的原则是如果放在布局中，就不要加ID和TAG；如果需要ID和TAG就全用代码控制。创建新实例前先到FragmentManager中查找一番，这也正是有标识的意义所在。</li>
<li>一个Activity中有一个Fragment池，实例不一定会被销毁，可能会保存在池中。这个跟第一点差不多。就好比系统会缓存Activity的实例一样，FragmentManager也会缓存Fragment实例，以方便和加速再次显示。</li>
<li>如前所述，FragmentManager的作用范围是整个Activity，所以，某一个布局ID，不能重复被Fragment替换。通常显示Fragment有二种方式，一种是层叠到某个布局上，或者把某个布局上面的Fragment替换掉，但是这个布局不能出现二次，比如布局A中有ID为id的区域，要显示为Fragment，此布局A，只能在一个Activity中显示一个，否则第二个id区域不能被Fragment成功替换。因为虽有二个ID布局的实例，但ID是相同的，对FragmentManager来说是一样的，它会认为只有一个，因为它看的是布局的ID，而不是布局的实例。</li>
<li>Fragment的生命周期反应Activity的生命周期。Fragment在显示和退出时会走一遍完整的生命周期。此外，正在显示时，就跟Activity的一样，Activity被onPause，里面的Fragment就onPause，以此类推，由此带来的问题就是，比如你在onStart()里面做了一些事情，那么，当宿主Activity被挡住，又出现时（比如接了个电话），Fragment的onStart也会被高到，所以你要想到，这些生命周期不单单在显示和退出时会走到。</li>
<li>Fragment的对用户可见性。这个问题出现在有Fragment栈的时候，也就是说每个Fragment不知道自己是否真的对用户可见。比如现在是Fragment A，又在其上面显示了Fragment B，当B显示后，A并不知道自己上面还有一个，也不知道自己对用户不可见了，同样再有一个C，B也不知。C退出后，B依然不知自己已在栈顶，对用户可见，B退后，A也不知。也就是说Fragment显示或者退出，栈里的其他Fragment无法感知。这点就不如Activity，a被b盖住后，a会走到onStop()，同样c显示后，b也能通过onStop()感知。Fragment可以从FragmentManager监听BackStackState的变化，但它只告诉你Stack变了，不告诉你是多了，还是少，还有你处的位置。有一个解决方案就是，记录页面的Path深度，再跟Fragment所在的Stack深度来比较，如果一致，那么这个Fragment就在栈顶。因为每个页面的Path深度是固定的，而Stack深度是不变化的，所以这个能准确的判断Fragment是否对用户可见，当然，这个仅针对整个页面有效，对于布局中的一个区域是无效的。</li>
<li>Fragment的事件传递。对于层叠的Fragment，其实就相当于在一个FrameLayout里面加上一堆的View，所以，如果处于顶层的Fragment没处理点击事件，那么事件就会向下层传递，直到事件被处理。比如有二个Fragment A和B，B在A上面，B只有一个简单的TextView且没处理事件，那么点击B时，会发现A里的View处理了事件。这个对于Activity也不会发生，因为事件不能跨窗体传播，上面的Activity没处理事件，也不会传给下面的Activity，即使它可见。解决之法，就是让上面的Fragment的根布局吃掉事件，为每个根ViewGroup添加onClick=&ldquo;true&#8221;。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[码农的救赎：使用Github Pages搭建博客]]></title>
    <link href="http://alexhilton.github.io/blog/2014/10/16/blogging-like-a-hacker-with-github-pages/"/>
    <updated>2014-10-16T22:18:36+08:00</updated>
    <id>http://alexhilton.github.io/blog/2014/10/16/blogging-like-a-hacker-with-github-pages</id>
    <content type="html"><![CDATA[<p><img src="http://pikipity.github.com/images/post/octopress.jpg" title="auto 200px" ></p>

<h2>人生若只如初见，都恨太晚</h2>

<p>据说有博客的人比没博客人的薪水要高很多，相传写博客也是一个高手的标配，虽然之前一直有在写（在<a href="http://blog.csdn.net/hitlion2008/">这里</a>），但是孤既不是高手，薪水还比别人少。之前一直在CSDN上面写博客，那是一个不错的社区，里面有些牛人，博客也有不错的流量，也没少参与CSDN举办的活动，获得了几本过时的技术书，但是仍感觉不爽，最痛苦的就是编辑，CSDN的在线编辑器做的不咋地，不太好用，而且经常写着写着就不动了，再刷新就啥都没了，试想下写了一下午的代码，突然死机，再打开什么都没了会是什么心情。后来就在本地写，然后粘到编辑器中，但是格式化又是一个很头疼的事情，经常是写完后要花个把小时来搞格式。再后来就用HTML写，然后把源码粘到编辑框里，也还是有格式的问题。再后来，去年一年都没怎么写，主要的原因还是一直感觉写出来的东西没有太多的干货，一心想憋出个高质量的东西来，但是肺都憋炸了，也没憋出来。</p>

<p>直到，后来发现了Github Pages，大有，人生若只如初见，都恨太晚的感觉。正如有些牛人推荐的那样，像写代码一样写博客，这感觉错不了。再有Markdown虽不如在线编辑器那样直观，但却可以手不离键盘，不动鼠标，正如命令行与GUI的对比那样，这真的是用心为码农准备的良心工具啊（此处省略感慨10000字）。</p>

<!-- more -->


<h2>手把手搭建Github Pages博客</h2>

<p>说了这么多废话，来点实际的吧，下面说说如何一步步的用Github Pages搭建博客。其实这里的东西没有原创，部分是实践中的血和泪，本人不材，用了三四天才发出第一个博客，大部分都是源自网络，如有雷同，纯属拷贝。</p>

<p><strong>Note</strong>：<em>这里的默认平台是指Linux/Unix或者Mac</em></p>

<h3>必备的技术</h3>

<p>别害怕，听起来挺高大上啊，你妹啊，写个博客还需要技术，老子写代码也不过是Google+Copy+Paste。是的，用现成的博客托管，是没有门槛，但是用Github Pages就不一样了。</p>

<ol>
<li>git</li>
<li>markdown</li>
<li>平台命令行的使用，其实就是安装和配置软件包</li>
</ol>


<p>这些都听起来很熟悉吧，是不是天天都用。所以对于码农，玩Github Pages完全不在话下。</p>

<h3>安装基本设施</h3>

<h4>git</h4>

<p>git我就不想说了，我想对于一个码农，如果没有安装git的，请自行Google吧，Linux默认都带有的，对于Mac，安装了XCode后，也会带有。</p>

<h4>Ruby</h4>

<p>我们即将用到的工具都是用Ruby实现的，如果你跟我一样只会些Python，不会Ruby，那么了没有关系，我们只需要安装Ruby，不用写代码。</p>

<ul>
<li>Mac</li>
</ul>


<p>Mac本身带有Ruby，但是版本过低，需要重新安装一个新版本</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install ruby</span></code></pre></td></tr></table></div></figure>


<p>这会安装最版本的Ruby，但还需要手动配置，把新版本的Ruby加入到PATH当中去，用</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ruby --version</span></code></pre></td></tr></table></div></figure>


<p>来验证，如果输出的是1.9.3以上的版本就Okay了。之后就可以用<em>gem</em>来安装Ruby的包了，gem是跟Python的pip很类似的一个包管理器。安装bundle和bundler:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install bundle
</span><span class='line'>gem install bundler</span></code></pre></td></tr></table></div></figure>


<p><strong>Note:</strong> <em>安装配置完新版本的Ruby后，一定要重新安装bundle和bundler，否则bundle仍会bundler指向旧版本的Ruby，后面安装会因Ruby的版本不够而失败。</em>
另外，当用gem安装包的时候有时候会出现这个错误：</p>

<blockquote><p>ERROR: While executing gem &hellip; (Gem::RemoteFetcher::FetchError)
Errno::ETIMEDOUT: Operation timed out - connect(2) for &ldquo;s3.amazonaws.com&rdquo; port 443 (<a href="https://api.rubygems.org/specs.4.8.gz">https://api.rubygems.org/specs.4.8.gz</a>)</p></blockquote>

<p>不用多说，你懂得，这是只有在伟大的天朝才会发生的，错误就是连接不上软件库，解决之法就是使用国内的Ruby   gem镜像，详细在<a href="https://ruby.taobao.org/">这里</a></p>

<ul>
<li>Linux(Ubuntu)
同样Ubuntu也带有Ruby但是它的版本也很低，可以用<em>rbenv</em>来安装和配置版本的Ruby:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd
</span><span class='line'>git clone git://github.com/sstephenson/rbenv.git .rbenv
</span><span class='line'>echo 'export PATH="$HOME/.rbenv/bin:$PATH"' &gt;&gt; ~/.bash_profile
</span><span class='line'>echo 'eval "$(rbenv init -)"' &gt;&gt; ~/.bash_profile
</span><span class='line'>git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
</span><span class='line'>source ~/.bash_profile</span></code></pre></td></tr></table></div></figure>


<p>之后安装新版的Ruby：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rbenv install 2.1.3
</span><span class='line'>rbenv local 2.1.3
</span><span class='line'>rbenv rehash</span></code></pre></td></tr></table></div></figure>


<p>同样，也需要安装新版本的bundle和bundler，如果在安装过程中又出现ruby版本不对（用ruby -v验证）就运行下<strong>rbenv local 2.1.3</strong></p>

<p>到此为止，基础设施就已经有了，可以安装关键的东西了，</p>

<h4>Octopress</h4>

<p>这个就是我们要使用的框架，它是基于<a href="https://jekyllrb.com/">Jekyll</a>的一个静态博客生成框架，Jekyll是一个静态网站生成框架，它有很多功能，也可以直接使用，但是就麻烦得多，很多东西要配置和从头写。<em>Octopress</em>就是基于Jekyll，帮我们把重复性的脏活累活全都干了，把创造性的事情（写博客）留给了我们。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'>cd octopress
</span><span class='line'>bundle install
</span><span class='line'>rake install</span></code></pre></td></tr></table></div></figure>


<h4>创建Github帐号和Github Pages</h4>

<p>我相信大多数人都已经有了Github帐号了，访问<a href="https://github.com/">Github</a>来注册帐号，然后访问<a href="https://github.io/">Github Pages</a>来创建博客空间，唯一需要注意的是Repo必须是<em>Github帐号</em>.github.io，否则不会起作用。
然后，运行：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake setup_github_pages</span></code></pre></td></tr></table></div></figure>


<p>过程中会要求你输入Github Pages的Repo地址，比如<em>git@github.com:username/username.github.io.git</em>
到此，你的博客就建立好了，运行下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate
</span><span class='line'>rake preview</span></code></pre></td></tr></table></div></figure>


<p>后用浏览器访问<a href="http://localhost:4000">http://localhost:4000</a>。就会看到你的博客了，只不过都是Octopress的默认配置。</p>

<h4>配置你的博客</h4>

<p>用<em>vim</em>或者任意一个文本编辑器打开octopress根目录下的_config.yml文件，把title,subtitle,author都改成你自己的配置，再次preview，看到你的博客了吧。</p>

<h4>添加社交分享</h4>

<p>博客必须要带有社交分享功能，否则会很令人沮丧，这会影响博客的传播。Octopress默认是带有社交分享功能的，比如Twitter, Facebook, Google Plus等，但这些全世界都通用的东西在我大天朝就是不好使。而且我相信多数小牛们还是用中文写，且面向国内猿，所以用国内的社交还是靠谱些，当然对于大牛来说，常写英文，或者面向老外的，可以考虑使用默认的。</p>

<p>网站页的分享有很多第三方的库，这里用<a href="http://www.jiathis.com">jiathis</a></p>

<ol>
<li>在_config.yml中加入<strong>social_share: true</strong></li>
<li>修改sources/_includes/post/sharing.html，增加：</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{&#37; if site.social_share &#37;}
</span><span class='line'>    {&#37; include post/social_media.html &#37;}
</span><span class='line'>{&#37; endif &#37;}</span></code></pre></td></tr></table></div></figure>


<ol>
<li>访问<a href="http://www.jiathis.com/">http://www.jiathis.com</a>获取分享的代码，放入新建的文件<strong>source/_includes/post/social_media.html</strong></li>
</ol>


<h4>添加文章评论功能</h4>

<p>同样，Octopress也默认集成有评论系统<a href="http://disqus.com/">Disqus</a>，这个是国外最大的第三方评论平台，世界都在用，除了我大天朝。这种评论平台的主要功能是帐号不再局限在某一个网站内，同样评论也局限在一个网站内，评论平台提供帐号的管理和评论内容的管理，换句话说，即使不是你的网站的注册用户，只要有评论平台的帐号就能评论你的文章，且评论的内容是保存在评论平台中的。评论平台都可以使用流行的社交账号进行评论，评论还可以转发，回复等。一句话就是评论也变成了一个以用户为中心的社区，而不再是孤立的存在于某个网站之中。</p>

<p>我天朝人民是聪明的，这么好的东西国内肯定有替代品，那就是<a href="http://www.duoshuo.com/">多说</a>。使用多说也很简单：</p>

<ol>
<li>先到多说注册，获取用户名，也就是在多说上添的<em>youname</em>.duoshuo.com中的yourname</li>
<li>在_config.yml中添加</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>duoshuo_comments: true
</span><span class='line'>duoshuo_short_name: yourname</span></code></pre></td></tr></table></div></figure>


<ol>
<li>在source/_layouts/post.html中把评论模板加入到你的网页中去</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>｛&#37; if site.duoshuo_short_name and site.duoshuo_comments == true and page.comments == true &#37;｝
</span><span class='line'>  &lt;section&gt;
</span><span class='line'>    &lt;h1&gt;Comments&lt;/h1&gt;
</span><span class='line'>    &lt;div id="comments" aria-live="polite"&gt;｛&#37; include post/duoshuo.html &#37;｝&lt;/div&gt;
</span><span class='line'>  &lt;/section&gt;
</span><span class='line'>｛&#37; endif &#37;｝</span></code></pre></td></tr></table></div></figure>


<ol>
<li>创建多说评论代码模板</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!-- Duoshuo COMMENT BEGIN --&gt;
</span><span class='line'>&lt;div class="ds-thread"&gt;&lt;/div&gt;
</span><span class='line'>&lt;script type="text/javascript"&gt;
</span><span class='line'>    var duoshuoQuery = {short_name: "yourname"};
</span><span class='line'>    (function() {
</span><span class='line'>        var ds = document.createElement('script');
</span><span class='line'>        ds.type = 'text/javascript';
</span><span class='line'>        ds.async = true;
</span><span class='line'>        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';
</span><span class='line'>        ds.charset = 'utf-8';
</span><span class='line'>        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ds);
</span><span class='line'>    })();
</span><span class='line'>&lt;/script&gt;
</span><span class='line'>&lt;!-- Duoshuo COMMENT END --&gt;</span></code></pre></td></tr></table></div></figure>


<h4>写博客</h4>

<ul>
<li>rake new_post[&ldquo;Blog Title&rdquo;]
生成一篇新的博客，用文本编辑器打开生成的文件就可以写博客了</li>
<li>rake generate
生成静态的博客文件，生成的文件在_deploy中</li>
<li>rake preview
在本地预览博客，这与发布到Github Pages后的效果是一样的</li>
<li>rake deploy
这是最后一步，就是把Octopress生成的文件（在_deploy）发布到Github上面去。这里的实际是Octopress根据你的配置用sources中的模板，生成网页（HTML，JavaScript, CSS和资源），再把这些资源推送到yourname.github.io这个Repo中去，然后访问<a href="https://*yourname*.github.io">https://*yourname*.github.io</a> 就能看到你的博客了。</li>
</ul>


<h2>保存你的代码</h2>

<p>如前所述，rake deploy只是把生成的静态网页推送到了Github的Repo上去，但是你的博客的源码，就是这个octopress文件夹还需要地方保存，所以你可以新建一个Repo来保存源码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add .
</span><span class='line'>git ci -s -m "Setup and config blogs for Github Pages"
</span><span class='line'>git remote add myrepo *some public or private repo*
</span><span class='line'>git push myrepo source</span></code></pre></td></tr></table></div></figure>


<h2>Markdown编辑器</h2>

<p>因为博客都是用Markdown语法来写的，所以你需要一个良好的Markdown本地编辑器。</p>

<ul>
<li>Linux</li>
</ul>


<p><a href="http://sourceforge.net/p/retext/home/ReText/">retext</a>，用sudo apt-get install retext来安装</p>

<ul>
<li>Mac</li>
</ul>


<p><a href="http://25.io/mou">mou</a></p>

<p>为啥木Windows，孤认为用一堆开源软件搭建博客的你，不应该用Windows。</p>

<h2>Markdown参考</h2>

<p><a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet">Markdown cheat sheet</a></p>

<p>还有些事情需要注意，就是因为你所写的Markdown，同时也会被当作模板被处理，因为要添加和扩展一些其他的模块，比如代码，分享评论等，所以，如果你的文章中有HTML的Tag&lt;>或者模板的符号%（现代的Web开发框架比如Django和Ruby on Rails，都使用此类型的模板用以生成HTML），最好使用HTML的Entity来替代，以免生成最终HTML时出错，比如上面分享和评论的代码块必须把其中的%用&amp;#37;来代替，否则会出错。详细的HTML Entities表格可以参考<a href="http://www.freeformatter.com/html-entities.html">这里</a></p>

<h2>参考文章：</h2>

<p><a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/">http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/</a>
<a href="http://beyondvincent.com/blog/2013/07/27/107-hello-page-of-github/">http://beyondvincent.com/blog/2013/07/27/107-hello-page-of-github/</a></p>
]]></content>
  </entry>
  
</feed>
