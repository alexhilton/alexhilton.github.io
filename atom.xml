<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[稀有猿诉]]></title>
  <link href="https://alexhilton.github.io/atom.xml" rel="self"/>
  <link href="https://alexhilton.github.io/"/>
  <updated>2025-06-02T21:59:19+08:00</updated>
  <id>https://alexhilton.github.io/</id>
  <author>
    <name><![CDATA[Alex Hilton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[揭秘原生View与Jetpack Compose之间的传送门]]></title>
    <link href="https://alexhilton.github.io/blog/2025/06/02/android-vies-in-compose/"/>
    <updated>2025-06-02T21:44:19+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/06/02/android-vies-in-compose</id>
    <content type="html"><![CDATA[<p>芳菲随春去，碧绿入夏来，不知不觉中<a href="https://juejin.cn/column/7367555191338467337">Compose专题</a>已经写了近40篇文章了，从Compose各组件的使用方法，到Compose的编程思想，再到内部原理和最佳实践。通过<a href="https://juejin.cn/column/7367555191338467337">这一系列的文章</a>相信对Compose已经有了足够的理解，能够在项目中进行实战和运用。学无止境，今天将继续学习，重点探讨如何在已有的项目中使用Compose。</p>

<p><a href="https://alexhilton.github.io/blog/2025/06/02/android-vies-in-compose/"><img src="file:///Users/alexhilton/Downloads/portal_2.png" title="auto auto" ></a></p>

<!-- more -->


<h2>缘起</h2>

<p>无疑Jetpack Compose是一个优秀的声明式UI框架，它与原生的View方式最大的区别，在于思考问题的方式上并不一样。声明式框架能把开发者从繁杂的命令式的UI细节中解放出来，重点思考一个好的体验应该是什么样子的，而具体的UI细节由框架来处理。尽管如此，毕竟Compose是近几年来发展起来的，现今大量的项目仍是原生View主导的。此外，Compose也还在发展中，有些特定业务领域如Camera，视频，3D渲染，还没有能力支持。因此，整合原生View和Compose是项目中很现实的一个难题，本文将重点讨论两个议题：一个是如何在原生View中嵌入Compose，另一个就是如何在Compose中嵌入原生View。</p>

<p><strong>注意：</strong> 本文中提到的两个组件ComposeView和AndroidView都仅在Jetpack Compose（for Android）生效，并不适用于跨平台的Compose Multiplatform。</p>

<h2>在原生View中嵌入Compose</h2>

<p>第一个传送门是如何进入Compose的世界。相信现在绝大多数项目都是基于原生View的，借助<a href="https://developer.android.com/reference/kotlin/androidx/compose/ui/platform/ComposeView">ComposeView</a>就可以进入到Compose的世界。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">composeView</span> <span class="p">=</span> <span class="n">ComposeView</span><span class="p">(</span><span class="n">context</span><span class="p">).</span><span class="n">apply</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">setContent</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// 这里调用Composables</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ComposeView是View的一个子类，能够作为Compose的容器，在<a href="https://developer.android.com/reference/kotlin/androidx/compose/ui/platform/ComposeView#setContent(kotlin.Function0">其setContent方法</a>)中提供一个Composable即可。ComposeView与其他View一样，可以用在View tree中，用在Fragment里和Activity里面。实际上作为平台的入口ComponentActivity用的也是ComposeView。</p>

<h3>在View层级中直接嵌入</h3>

<p>ComposeView就是一个普通的Android View，跟其他View的子类是一样的，所以可以把它放在任何可以使用View的地方，比如一个布局里面，作为一个页面的一部分。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;LinearLayout</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">xmlns:tools=</span><span class="s">&quot;http://schemas.android.com/tools&quot;</span>
</span><span class='line'>    <span class="na">android:id=</span><span class="s">&quot;@+id/container&quot;</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:orientation=</span><span class="s">&quot;vertical&quot;</span>
</span><span class='line'>    <span class="na">tools:context=</span><span class="s">&quot;.MainActivity&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;androidx.compose.ui.platform.ComposeView</span>
</span><span class='line'>        <span class="na">android:id=</span><span class="s">&quot;@+id/compose_view&quot;</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;Button</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:text=</span><span class="s">&quot;WidgetButton&quot;</span>
</span><span class='line'>        <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/LinearLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>注意：</strong> 尽管可以把ComposeView当成普通的View，直接嵌入到布局中，作为页面中的一部分，但这并不是一个好的做法，一来是不能发挥Compose的优势，另外Compose本身是有特定的生命周期的（重组），它需要知道平台的生命周期，以管控它自己的生命周期。而常规的View tree之中是没有平台生命周期的，因为常规的View tree并不关心平台的生命周期，view tree主要受窗口影响（attachToWindow，detachFromWindow），这个与平台组件的生命周期没有关系。</p>

<h3>用在Fragment中</h3>

<p>想要在某个Fragment中集成Compose的方式就是把ComposeView作为Fragment的根View即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">class</span> <span class="nc">ExampleFragmentNoXml</span> <span class="p">:</span> <span class="n">Fragment</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreateView</span><span class="p">(</span>
</span><span class='line'>        <span class="n">inflater</span><span class="p">:</span> <span class="n">LayoutInflater</span><span class="p">,</span>
</span><span class='line'>        <span class="n">container</span><span class="p">:</span> <span class="n">ViewGroup</span><span class="p">?,</span>
</span><span class='line'>        <span class="n">savedInstanceState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">?</span>
</span><span class='line'>    <span class="p">):</span> <span class="n">View</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">ComposeView</span><span class="p">(</span><span class="n">requireContext</span><span class="p">()).</span><span class="n">apply</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 当View的宿主destroy时销毁组合</span>
</span><span class='line'>            <span class="n">setViewCompositionStrategy</span><span class="p">(</span><span class="n">ViewCompositionStrategy</span><span class="p">.</span><span class="n">DisposeOnViewTreeLifecycleDestroyed</span><span class="p">)</span>
</span><span class='line'>            <span class="n">setContent</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">MaterialTheme</span> <span class="p">{</span>
</span><span class='line'>                    <span class="c1">// 进入到Compose世界</span>
</span><span class='line'>                    <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Hello Compose!&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>用在Activity中</h3>

<p>这其实是最好的方式，在一个新的页面窗口中使用Compose，这就能与其余view独立开来，是最为理想的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">class</span> <span class="nc">ExampleActivity</span> <span class="p">:</span> <span class="n">ComponentActivity</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">super</span><span class="p">.</span><span class="n">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">setContent</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">MaterialTheme</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">Greeting</span><span class="p">(</span><span class="n">name</span> <span class="p">=</span> <span class="s">&quot;compose&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">Greeting</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Text</span><span class="p">(</span><span class="n">text</span> <span class="p">=</span> <span class="s">&quot;Hello $name!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>使用建议</h3>

<p>虽然ComposeView可以当成一个普通的View来使用，但最为合理的方式就是在一个新的Activity中才使用Compose，也就是说当有一个全新的页面时，考虑使用Compose来开发，这样才能发挥出它的价值。</p>

<p>除非有特别的需求，否则不要把ComposeView作为现有页面的一部分嵌入到View tree中（也就是作为页面的一部分）。</p>

<p>至于在Fragment中使用，如果是一个全新的页面，而非现有布局的一部分，那也可以考虑使用Compose。</p>

<p><strong>注意：</strong> 其根本原因在于，我们使用Jetpack Compose并不是图它能实现什么特别的UI效果，Compose能做的事情View都能做，甚至它不能做的事情View也能做。用Compose是因为它是声明式的UI框架，在开发效率和可扩展性上面有巨大的优势。所以，只应该在想要发挥声明式框架优势的时候，才考虑使用它，并且应该从一个全新的页面开始。</p>

<h2>在Compose中嵌入原生View</h2>

<p>Jetpack Compose提供了足够丰富的组件，足以应对常规的UI，但它毕竟还不是特别的成熟，总会遇到一些场景，发现Compose无法胜任，而且并不是通过自定义组件就能够解决的，比如一些特定领域的UI，如camera，如视频，如3D渲染。或者说，已经有了自定义好的View，并不想重复开发。再或者说对于一些三方的库，它并没有对应的Compose组件。这些场景就需要把原生的View嵌入到Compose之中。</p>

<p><a href="https://developer.android.com/reference/kotlin/androidx/compose/ui/viewinterop/package-summary#AndroidView(kotlin.Function1,androidx.compose.ui.Modifier,kotlin.Function1,kotlin.Function1,kotlin.Function1">AndroidView</a>)就是专门用于把原生View嵌入到Compose中的一个特殊composable。它就像一个传送门一样，能把原生的View，无论是一个现成的自定义View，还是特定领域的View或者三方库的View，带入到Compose中，变成一个composable。</p>

<h3>AndroidView的使用方法</h3>

<p>AndroidView是一个composable，把它放在想要的位置即可。它有三个参数，一个是常规的Modifier用以约束这个composable的；另两个是lambda，一个是用于创建View的，返回一个View的实例，只会被调用一次；另一个就是用于更新View的，会被调用多次：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">CustomView</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">selectedItem</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="m">0</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 添加原生View到Compose</span>
</span><span class='line'>    <span class="n">AndroidView</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">(),</span>
</span><span class='line'>        <span class="n">factory</span> <span class="p">=</span> <span class="p">{</span> <span class="n">context</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="c1">// 创建View的实例</span>
</span><span class='line'>            <span class="n">MyView</span><span class="p">(</span><span class="n">context</span><span class="p">).</span><span class="n">apply</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// 设置View的点击事件，更新状态，这会触发重组</span>
</span><span class='line'>                <span class="n">setOnClickListener</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">selectedItem</span> <span class="p">=</span> <span class="m">1</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="n">update</span> <span class="p">=</span> <span class="p">{</span> <span class="n">view</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="c1">// 更新View的状态</span>
</span><span class='line'>            <span class="c1">// 这里读了状态，所以重组时update会被再次调用，view能拿到最新的状态</span>
</span><span class='line'>            <span class="n">view</span><span class="p">.</span><span class="n">selectedItem</span> <span class="p">=</span> <span class="n">selectedItem</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">ContentExample</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Column</span><span class="p">(</span><span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Look at this CustomView!&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">CustomView</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>注意：</strong> factory仅会被调用一次，用于创建View实例，update会被调用多次，用于更新view的状态，包括初次组合时，也就是factory执行之后，就会调用update。AndroidView函数会帮助提供View需要的参数context，以及管理View的实例，所以update中会把view当作参数传给我们，所以我们完全没有必要再用额外的状态（remember）去缓存View的实例了。</p>

<h3>使用建议</h3>

<p>虽然AndroidView是一个传送门，可以连接两个世界，但是能不用还是不要用，非必要不使用。如果能用Compose搞定的事情，还是要用Compose来搞，比如用Canvas去实现自定义组件。</p>

<p>需要使用AndroidView的场景只有三个：一是有现成的自定义View，拿过来就可以用，不想二次开发；二是三方库的View；三就是Compose确实搞不定的特定领域，如WebView，如视频，如SurfaceView或者3D渲染（OpenGL ES）等等。除以之外，不建议使用。</p>

<p>还需要特别注意的是，如果原生的View交互比较复杂，不光是点击，还涉及Touch事件处理，处理事件的同时还要不断更新View的状态，那也不应该使用它。比较理想的情况是，嵌入的这个View是一个比较纯粹的生产者，比如它只产生事件，不需要再往回更新状态；或者是一个比较纯粹的消费者，比如它就负责展示，只需要塞数据就行了。</p>

<h2>总结</h2>

<p>网上的教程或者Demo中的世界是很美好的，往往都是一个新建的项目，一个新的页面，直接就进入了Compose世界，也都在讲Compose能做的事情。但现实的世界往往不是这样子的，极少情况下是全新开始的项目，往往需要与遗留代码打交道，需要实现的需求也是多种多样的。本文中介绍了两个传送门，ComposeView和AndroidView可以方便地连接原生View和Compose两个世界，为现实项目中遇到的问题提供了一个可行的解决方案。</p>

<h3>让Compose支持OpenGL ES</h3>

<ul>
<li><a href="https://stackoverflow.com/questions/78796021/how-to-render-opengl-alongside-jetpack-compose-ui-without-covering-other-element">How to render OpenGL alongside Jetpack Compose UI without covering other elements</a></li>
<li><a href="https://www.reddit.com/r/Kotlin/comments/on36sy/experiment_to_make_opengl_work_together_with/?rdt=62185">Experiment to make OpenGL work together with Jetpack Compose</a></li>
<li><a href="https://composables.com/foundation/androidexternalsurface">AndroidExternalSurface</a></li>
<li><a href="https://youtrack.jetbrains.com/issue/CMP-3810/Using-Open-GL-with-Compose-Multiplatform">Using Open GL with Compose Multiplatform</a></li>
</ul>


<h2>References</h2>

<ul>
<li><a href="https://developer.android.com/develop/ui/compose/migrate/interoperability-apis/compose-in-views">Using Compose in Views</a></li>
<li><a href="https://developer.android.com/develop/ui/compose/migrate/interoperability-apis/views-in-compose">Using Views in Compose</a></li>
<li><a href="https://medium.com/@seungbae2/jetpack-compose-androidview-seamless-integration-of-android-views-into-compose-ui-644f217437d3">Jetpack Compose AndroidView: Seamless Integration of Android Views into Compose UI</a></li>
<li><a href="https://stackoverflow.com/questions/59995970/using-custom-views-with-jetpack-compose">Using Custom Views with Jetpack Compose</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Jetpack Compose构建创意动画]]></title>
    <link href="https://alexhilton.github.io/blog/2025/05/31/animations-in-jetpack-compose/"/>
    <updated>2025-05-31T23:19:03+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/05/31/animations-in-jetpack-compose</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自「Animating Inside and Outside the Box with Jetpack Compose」，原文链接<a href="https://medium.com/proandroiddev/animating-inside-and-outside-the-box-with-jetpack-compose-a56eba1b6af6">https://medium.com/proandroiddev/animating-inside-and-outside-the-box-with-jetpack-compose-a56eba1b6af6</a>，由Nirbhay Pherwani发布于2023年12月13日。</p></blockquote>

<p><a href="https://alexhilton.github.io/blog/2025/05/31/animations-in-jetpack-compose/"><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*YDhqS2nzvjXmvlC58vcDNQ.png" title="auto auto" ></a></p>

<!-- more -->


<h2>缘起</h2>

<p>动画能够让用户界面充满活力、引人入胜。在Android中，Jetpack Compose提供高级工具，让你轻松掌握这项强大功能，打造真正的动态UI。本文将深入探讨 Jetpack Compose 中动画的深层技术。</p>

<p><strong>译注：</strong> 虽然原文是以Jetpack Compose为基础来写的，但其实动画这块并不涉及平台特性，也适用于Compose Multiplatform。</p>

<p>我们将涵盖一系列技巧，从创建流畅的、基于物理的动效（增添真实感）到创建复杂的编排序列（为界面增添叙事质感）。无论你是想提升技能，还是仅仅想探索无限可能，本教程都将提供实用的见解，帮助你的应用不仅运行流畅，还能让用户在每次交互中都感到愉悦。</p>

<p>让我们深入探索这些动画如何改变你的 UI设计方法，使其更加直观、响应迅速，并为用户带来愉悦的体验。</p>

<h2>第 1 部分 — Jetpack Compose中的自定义动画</h2>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*C1_mzDHNHOfSZkIiULgRzw.gif" alt="游戏角色的移动" /></p>

<h3>利用自定义动画实现动态交互</h3>

<p>在本节中，我们将探索如何在 Jetpack Compose中使用高级自定义动画来创建动态且可交互的 UI 元素。我们将重点介绍一个真实示例，该示例演示了用户交互如何以有意义的方式影响动画。</p>

<h3>案例 - 交互式游戏角色移动</h3>

<p>我们将通过一个示例来说明这一概念，其中游戏角色（由面部图标表示）沿着由用户可拖动控制点确定的路径移动。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">GameCharacterMovement</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">startPosition</span> <span class="p">=</span> <span class="n">Offset</span><span class="p">(</span><span class="m">100f</span><span class="p">,</span> <span class="m">100f</span><span class="p">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">endPosition</span> <span class="p">=</span> <span class="n">Offset</span><span class="p">(</span><span class="m">250f</span><span class="p">,</span> <span class="m">400f</span><span class="p">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">controlPoint</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="n">Offset</span><span class="p">(</span><span class="m">200f</span><span class="p">,</span> <span class="m">300f</span><span class="p">))</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">position</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">Animatable</span><span class="p">(</span><span class="n">startPosition</span><span class="p">,</span> <span class="n">Offset</span><span class="p">.</span><span class="n">VectorConverter</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">controlPoint</span><span class="p">.</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">position</span><span class="p">.</span><span class="n">animateTo</span><span class="p">(</span>
</span><span class='line'>            <span class="n">targetValue</span> <span class="p">=</span> <span class="n">endPosition</span><span class="p">,</span>
</span><span class='line'>            <span class="n">animationSpec</span> <span class="p">=</span> <span class="n">keyframes</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">durationMillis</span> <span class="p">=</span> <span class="m">5000</span>
</span><span class='line'>                <span class="n">controlPoint</span><span class="p">.</span><span class="n">value</span> <span class="n">at</span> <span class="m">2500</span> <span class="c1">// 可拖动控制点控制的中间点</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">onControlPointChange</span><span class="p">:</span> <span class="p">(</span><span class="n">offset</span><span class="p">:</span> <span class="n">Offset</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">controlPoint</span><span class="p">.</span><span class="n">value</span> <span class="p">=</span> <span class="n">it</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Box</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Icon</span><span class="p">(</span>
</span><span class='line'>            <span class="n">Icons</span><span class="p">.</span><span class="n">Filled</span><span class="p">.</span><span class="n">Face</span><span class="p">,</span> <span class="n">contentDescription</span> <span class="p">=</span> <span class="s">&quot;Localized description&quot;</span><span class="p">,</span> <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                <span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">50.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">offset</span><span class="p">(</span><span class="n">x</span> <span class="p">=</span> <span class="n">position</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">x</span><span class="p">.</span><span class="n">dp</span><span class="p">,</span> <span class="n">y</span> <span class="p">=</span> <span class="n">position</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">y</span><span class="p">.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">DraggableControlPoint</span><span class="p">(</span><span class="n">controlPoint</span><span class="p">.</span><span class="n">value</span><span class="p">,</span> <span class="n">onControlPointChange</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>代码说明</h4>

<ul>
<li>GameCharacterMovement 为代表游戏角色的图标设置动画。动画路径由 controlPoint 控制，该控制点通过用户交互设置和更新。</li>
<li>Animatable 用于将图标的位置从 startPosition 平滑过渡到 endPosition。</li>
<li>LaunchedEffect 监听 controlPoint 值的变化，并在控制点移动时重新触发动画。</li>
<li>animationSpec — 这是一种配置项，用于定义动画的持续时间、延迟和缓动。它决定了动画值如何随时间变化。</li>
<li>keyframes — 允许你在动画的特定时间点指定值，从而控制动画的中间点。这对于创建复杂的、精心设计的动画特别有用。</li>
<li>keyframes 块将动画定义为一系列关键帧。在 2500 毫秒（中间点）时，角色到达控制点，然后继续移动到结束位置。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">DraggableControlPoint</span><span class="p">(</span><span class="n">controlPoint</span><span class="p">:</span> <span class="n">Offset</span><span class="p">,</span> <span class="n">onControlPointChange</span><span class="p">:</span> <span class="p">(</span><span class="n">Offset</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">localPosition</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="n">controlPoint</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">offset</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">IntOffset</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">x</span> <span class="p">=</span> <span class="n">localPosition</span><span class="p">.</span><span class="n">x</span><span class="p">.</span><span class="n">roundToInt</span><span class="p">()</span> <span class="p">-</span> <span class="m">15</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">y</span> <span class="p">=</span> <span class="n">localPosition</span><span class="p">.</span><span class="n">y</span><span class="p">.</span><span class="n">roundToInt</span><span class="p">()</span> <span class="p">-</span> <span class="m">15</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">30.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">Red</span><span class="p">,</span> <span class="n">shape</span> <span class="p">=</span> <span class="n">CircleShape</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">pointerInput</span><span class="p">(</span><span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">detectDragGestures</span><span class="p">(</span><span class="n">onDragEnd</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">onControlPointChange</span><span class="p">(</span><span class="n">localPosition</span><span class="p">)</span>
</span><span class='line'>                <span class="p">})</span> <span class="p">{</span> <span class="n">_</span><span class="p">,</span> <span class="n">dragAmount</span> <span class="p">-&gt;</span>
</span><span class='line'>                    <span class="c1">// adjust based on screen bounds</span>
</span><span class='line'>                    <span class="k">val</span> <span class="py">newX</span> <span class="p">=</span> <span class="p">(</span><span class="n">localPosition</span><span class="p">.</span><span class="n">x</span> <span class="p">+</span> <span class="n">dragAmount</span><span class="p">.</span><span class="n">x</span><span class="p">).</span><span class="n">coerceIn</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="m">600f</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">val</span> <span class="py">newY</span> <span class="p">=</span> <span class="p">(</span><span class="n">localPosition</span><span class="p">.</span><span class="n">y</span> <span class="p">+</span> <span class="n">dragAmount</span><span class="p">.</span><span class="n">y</span><span class="p">).</span><span class="n">coerceIn</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="m">600f</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">localPosition</span> <span class="p">=</span> <span class="n">Offset</span><span class="p">(</span><span class="n">newX</span><span class="p">,</span> <span class="n">newY</span><span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>代码说明</h4>

<ul>
<li>DraggableControlPoint 是一个可组合项，允许用户以交互方式更改控制点的位置。</li>
<li>拖动控制点会更新 localPosition，并在拖动手势完成（onDragEnd）后将其反馈回 GameCharacterMovement。此交互会改变动画图标的路径。</li>
</ul>


<h3>实际用例</h3>

<ol>
<li>交互式教育应用：在教育应用中，动画可用于提升学习的吸引力。例如，在天文学应用中，拖动行星沿其轨道运行即可查看不同的星座。</li>
<li>交互式故事叙述和游戏：在数字故事叙述或游戏应用中，允许用户通过可拖动元素来影响故事或游戏环境，可以创造更具沉浸感的体验。</li>
</ol>


<h2>第 2 部分 — 在 Jetpack Compose中编排复杂动画</h2>

<h3>同步多个元素以实现和谐效果</h3>

<p>在本部分中，我们将深入探讨在 Jetpack Compose 中编排（Choreographing）复杂动画的艺术。我们专注于创建同步动画，使多个元素能够无缝交互，从而提升整体用户体验。</p>

<h3>A) 连锁反应动画 — 多米诺骨牌效应</h3>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*iNeJJU3ixcdcZnQFHHSWYw.gif" alt="多米诺骨牌效应" /></p>

<p>通过设置一系列动画可以在 UI 中创建多米诺骨牌效应，其中一个动画的完成会触发下一个动画的开始。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">DominoEffect</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">animatedValues</span> <span class="p">=</span> <span class="n">List</span><span class="p">(</span><span class="m">6</span><span class="p">)</span> <span class="p">{</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">Animatable</span><span class="p">(</span><span class="m">0f</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">animatedValues</span><span class="p">.</span><span class="n">forEachIndexed</span> <span class="p">{</span> <span class="n">index</span><span class="p">,</span> <span class="n">animate</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="n">animate</span><span class="p">.</span><span class="n">animateTo</span><span class="p">(</span>
</span><span class='line'>                <span class="n">targetValue</span> <span class="p">=</span> <span class="m">1f</span><span class="p">,</span>
</span><span class='line'>                <span class="n">animationSpec</span> <span class="p">=</span> <span class="n">tween</span><span class="p">(</span><span class="n">durationMillis</span> <span class="p">=</span> <span class="m">1000</span><span class="p">,</span> <span class="n">delayMillis</span> <span class="p">=</span> <span class="n">index</span> <span class="p">*</span> <span class="m">100</span><span class="p">)</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Box</span> <span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">()){</span>
</span><span class='line'>      <span class="n">animatedValues</span><span class="p">.</span><span class="n">forEachIndexed</span> <span class="p">{</span> <span class="n">index</span><span class="p">,</span> <span class="n">value</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                <span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">50.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">offset</span><span class="p">(</span><span class="n">x</span> <span class="p">=</span> <span class="p">((</span><span class="n">index</span><span class="p">+</span><span class="m">1</span><span class="p">)</span> <span class="p">*</span> <span class="m">50</span><span class="p">).</span><span class="n">dp</span><span class="p">,</span> <span class="n">y</span> <span class="p">=</span> <span class="p">((</span><span class="n">index</span><span class="p">+</span><span class="m">1</span><span class="p">)</span> <span class="p">*</span> <span class="m">30</span><span class="p">).</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">getRandomColor</span><span class="p">(</span><span class="n">index</span><span class="p">).</span><span class="n">copy</span><span class="p">(</span><span class="n">alpha</span> <span class="p">=</span> <span class="n">value</span><span class="p">.</span><span class="n">value</span><span class="p">))</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">getRandomColor</span><span class="p">(</span><span class="n">seed</span><span class="p">:</span> <span class="n">Int</span><span class="p">):</span> <span class="n">Color</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">random</span> <span class="p">=</span> <span class="n">Random</span><span class="p">(</span><span class="n">seed</span> <span class="p">=</span> <span class="n">seed</span><span class="p">).</span><span class="n">nextInt</span><span class="p">(</span><span class="m">256</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Color</span><span class="p">(</span><span class="n">random</span><span class="p">,</span> <span class="n">random</span><span class="p">,</span> <span class="n">random</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>代码说明</h4>

<ul>
<li>animatedValues 是一个Animatable对象的列表，每个值控制一个框的 Alpha（不透明度）。</li>
<li>LaunchedEffect 会触发这些值的一系列动画，从而创建一种交错效果，即每个框在前一个框之后淡入，类似于多米诺骨牌倒下。</li>
<li>getRandomColor 函数会为每个框生成随机的灰色阴影，为序列中的每个组件添加独特的视觉元素。</li>
<li>这些框沿屏幕对角线放置，增强了多米诺骨牌效应。</li>
</ul>


<h3>B) 交互式滚动时间轴</h3>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*Kk-V0g5pEqy83NajRy_6lA.gif" alt="交互式滚动时间轴" /></p>

<p>在这个时间轴中，每个元素都会随着用户滚动而淡入并移动到位。我们将使用 LazyColumn来呈现可滚动列表，并使用Animatable来呈现动画。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">InteractiveTimeline</span><span class="p">(</span><span class="n">timelineItems</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">scrollState</span> <span class="p">=</span> <span class="n">rememberLazyListState</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">LazyColumn</span><span class="p">(</span><span class="n">state</span> <span class="p">=</span> <span class="n">scrollState</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">itemsIndexed</span><span class="p">(</span><span class="n">timelineItems</span><span class="p">)</span> <span class="p">{</span> <span class="n">index</span><span class="p">,</span> <span class="n">item</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">animatableAlpha</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">Animatable</span><span class="p">(</span><span class="m">0f</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">isVisible</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">derivedStateOf</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">scrollState</span><span class="p">.</span><span class="n">firstVisibleItemIndex</span> <span class="p">&lt;=</span> <span class="n">index</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">isVisible</span><span class="p">.</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">isVisible</span><span class="p">.</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">animatableAlpha</span><span class="p">.</span><span class="n">animateTo</span><span class="p">(</span>
</span><span class='line'>                        <span class="m">1f</span><span class="p">,</span> <span class="n">animationSpec</span> <span class="p">=</span> <span class="n">tween</span><span class="p">(</span><span class="n">durationMillis</span> <span class="p">=</span> <span class="m">1000</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">TimelineItem</span><span class="p">(</span>
</span><span class='line'>                <span class="n">text</span> <span class="p">=</span> <span class="n">item</span><span class="p">,</span>
</span><span class='line'>                <span class="n">alpha</span> <span class="p">=</span> <span class="n">animatableAlpha</span><span class="p">.</span><span class="n">value</span><span class="p">,</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">TimelineItem</span><span class="p">(</span><span class="n">text</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">alpha</span><span class="p">:</span> <span class="n">Float</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Row</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">fillMaxWidth</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">DarkGray</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="n">alpha</span> <span class="p">=</span> <span class="n">alpha</span><span class="p">))</span>
</span><span class='line'>            <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">16.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>        <span class="n">verticalAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">CenterVertically</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Text</span><span class="p">(</span>
</span><span class='line'>            <span class="n">text</span> <span class="p">=</span> <span class="n">text</span><span class="p">,</span>
</span><span class='line'>            <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">White</span><span class="p">,</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxWidth</span><span class="p">(),</span>
</span><span class='line'>            <span class="n">textAlign</span> <span class="p">=</span> <span class="n">TextAlign</span><span class="p">.</span><span class="n">Center</span><span class="p">,</span>
</span><span class='line'>            <span class="n">fontSize</span> <span class="p">=</span> <span class="m">18.</span><span class="n">sp</span><span class="p">,</span>
</span><span class='line'>            <span class="n">fontWeight</span> <span class="p">=</span> <span class="n">FontWeight</span><span class="p">.</span><span class="n">SemiBold</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>代码说明</h4>

<ul>
<li>animatableAlpha 控制每个时间轴项目的 Alpha（不透明度），初始设置为 0（完全透明）。</li>
<li>isVisible 状态源自当前滚动位置，用于确定项目是否可见。</li>
<li>当用户滚动时，LaunchedEffect会触发进入视口的项目的淡入动画。</li>
</ul>


<h4>用例</h4>

<p>此交互式时间轴非常适合那些希望以视觉吸引力十足的方式呈现一系列事件或步骤的应用。动画通过在项目进入视野时吸引用户的注意力来增强用户的参与度。</p>

<p><strong>此类动画不仅引人入胜，还可以用来引导用户关注应用中的一系列事件或操作。</strong></p>

<h2>第 3 部分 — Jetpack Compose中基于物理的真实动画</h2>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*lZ_rpGorcFzewpUJN6WPAQ.gif" alt="弹性拖拽动画" /></p>

<h3>利用物理原理增强UI动态效果</h3>

<p>在本节中，我们将探索如何使用 Jetpack Compose将物理原理融入动画，为 UI 增添一层真实感和交互性。我们将重点介绍一个弹性拖拽交互示例。</p>

<h3>拖拽时的弹性效果</h3>

<p>此示例演示了图标上的弹性拖拽交互。垂直拖动时，图标会拉伸并回弹，产生弹性效果，模拟弹簧或橡皮筋​​的行为。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">ElasticDraggableBox</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">animatableOffset</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="n">Animatable</span><span class="p">(</span><span class="m">0f</span><span class="p">))</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Box</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">().</span><span class="n">background</span><span class="p">(</span><span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">xFFFFA732</span><span class="p">)),</span> <span class="n">contentAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">Center</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                <span class="p">.</span><span class="n">offset</span><span class="p">(</span><span class="n">y</span> <span class="p">=</span> <span class="n">animatableOffset</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">draggable</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">orientation</span> <span class="p">=</span> <span class="n">Orientation</span><span class="p">.</span><span class="n">Vertical</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">state</span> <span class="p">=</span> <span class="n">rememberDraggableState</span> <span class="p">{</span> <span class="n">delta</span> <span class="p">-&gt;</span>
</span><span class='line'>                        <span class="n">animatableOffset</span> <span class="p">=</span> <span class="n">Animatable</span><span class="p">(</span><span class="n">animatableOffset</span><span class="p">.</span><span class="n">value</span> <span class="p">+</span> <span class="n">delta</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">},</span>
</span><span class='line'>                    <span class="n">onDragStopped</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">animatableOffset</span><span class="p">.</span><span class="n">animateTo</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="n">animationSpec</span> <span class="p">=</span> <span class="n">spring</span><span class="p">())</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">350.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>            <span class="n">contentAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">Center</span>
</span><span class='line'>        <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Icon</span><span class="p">(</span>
</span><span class='line'>                <span class="n">Icons</span><span class="p">.</span><span class="n">Filled</span><span class="p">.</span><span class="n">Favorite</span><span class="p">,</span>
</span><span class='line'>                <span class="n">contentDescription</span> <span class="p">=</span> <span class="s">&quot;heart&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="n">animatableOffset</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">dp</span> <span class="p">+</span> <span class="m">150.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>                <span class="n">tint</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Red</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>说明</h4>

<ul>
<li>使用 draggable 修饰符将包含图标的 Box 可组合项设置为可拖动。</li>
<li>animatableOffset 跟踪图标因拖动而产生的垂直偏移。</li>
<li>在拖动过程中，图标的大小会根据拖动量而变化，从而产生拉伸效果。</li>
<li>当拖动停止（onDragStopped）时，animatableOffset 会使用弹簧动画返回到 0f，从而使图标弹回其原始大小和位置。</li>
</ul>


<h2>第 4 节 — Jetpack Compose 中的手势动画</h2>

<h3>通过响应式手势提升用户体验</h3>

<p>在本部分中，我们将探索如何使用 Jetpack Compose 创建由用户手势控制的动画。我们将重点介绍两个示例——一个支持多点触控的可变形图像和一个由手势控制的音频波形。</p>

<h3>A) 多点触控可变形图像</h3>

<p>在本示例中，我们将创建一个图像视图，用户可以使用捏合、缩放和旋转等多点触控（Multi-touch）手势进行交互。</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*34WxcBivTWhiCY6KVSVelQ.gif" alt="多点触控可变形图像" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">TransformableImage</span><span class="p">(</span><span class="n">imageId</span><span class="p">:</span> <span class="n">Int</span> <span class="p">=</span> <span class="n">R</span><span class="p">.</span><span class="n">drawable</span><span class="p">.</span><span class="n">android</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">scale</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="m">1f</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">rotation</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="m">0f</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">offset</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="n">Offset</span><span class="p">.</span><span class="n">Zero</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Box</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">().</span><span class="n">background</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">DarkGray</span><span class="p">),</span> <span class="n">contentAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">Center</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Image</span><span class="p">(</span>
</span><span class='line'>            <span class="n">painter</span> <span class="p">=</span> <span class="n">painterResource</span><span class="p">(</span><span class="n">id</span> <span class="p">=</span> <span class="n">imageId</span><span class="p">),</span>
</span><span class='line'>            <span class="n">contentDescription</span> <span class="p">=</span> <span class="s">&quot;Transformable image&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">contentScale</span> <span class="p">=</span> <span class="n">ContentScale</span><span class="p">.</span><span class="n">Crop</span><span class="p">,</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                <span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">300.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">graphicsLayer</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">scaleX</span> <span class="p">=</span> <span class="n">scale</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">scaleY</span> <span class="p">=</span> <span class="n">scale</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">rotationZ</span> <span class="p">=</span> <span class="n">rotation</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">translationX</span> <span class="p">=</span> <span class="n">offset</span><span class="p">.</span><span class="n">x</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">translationY</span> <span class="p">=</span> <span class="n">offset</span><span class="p">.</span><span class="n">y</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">pointerInput</span><span class="p">(</span><span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">detectTransformGestures</span> <span class="p">{</span> <span class="n">_</span><span class="p">,</span> <span class="n">pan</span><span class="p">,</span> <span class="n">zoom</span><span class="p">,</span> <span class="n">rotate</span> <span class="p">-&gt;</span>
</span><span class='line'>                        <span class="n">scale</span> <span class="p">*=</span> <span class="n">zoom</span>
</span><span class='line'>                        <span class="n">rotation</span> <span class="p">+=</span> <span class="n">rotate</span>
</span><span class='line'>                        <span class="n">offset</span> <span class="p">+=</span> <span class="n">pan</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>代码说明</h4>

<ul>
<li>Image 可组合项通过 graphicsLayer 进行修改，以应用缩放、旋转和平移等变换。</li>
<li>pointerInput 带有 detectTransformGestures 接口，用于处理多点触控手势，并相应地更新缩放、旋转和偏移。</li>
</ul>


<h3>B) 手势控制波形</h3>

<p>这是一个波形可视化效果，它根据用户手势（例如滑动和捏合）改变外观，以控制幅度和频率等方面。</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*qKzb1XpUrSGKdCL-OxhtLw.gif" alt="手势控制波形" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">GestureControlledWaveform</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">amplitude</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="m">100f</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">frequency</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="m">1f</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Canvas</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>        <span class="p">.</span><span class="n">fillMaxSize</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">pointerInput</span><span class="p">(</span><span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">detectDragGestures</span> <span class="p">{</span> <span class="n">_</span><span class="p">,</span> <span class="n">dragAmount</span> <span class="p">-&gt;</span>
</span><span class='line'>                <span class="n">amplitude</span> <span class="p">+=</span> <span class="n">dragAmount</span><span class="p">.</span><span class="n">y</span>
</span><span class='line'>                <span class="n">frequency</span> <span class="p">+=</span> <span class="n">dragAmount</span><span class="p">.</span><span class="n">x</span> <span class="p">/</span> <span class="m">500f</span>
</span><span class='line'>                <span class="c1">// 根据拖拽调整频率</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="p">.</span><span class="n">background</span><span class="p">(</span>
</span><span class='line'>            <span class="n">Brush</span><span class="p">.</span><span class="n">verticalGradient</span><span class="p">(</span>
</span><span class='line'>                <span class="n">colors</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span><span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">xFF003366</span><span class="p">),</span> <span class="n">Color</span><span class="p">.</span><span class="n">White</span><span class="p">,</span> <span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">xFF66B2FF</span><span class="p">))</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">width</span> <span class="p">=</span> <span class="n">size</span><span class="p">.</span><span class="n">width</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">height</span> <span class="p">=</span> <span class="n">size</span><span class="p">.</span><span class="n">height</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">path</span> <span class="p">=</span> <span class="n">Path</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="py">halfHeight</span> <span class="p">=</span> <span class="n">height</span> <span class="p">/</span> <span class="m">2</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">waveLength</span> <span class="p">=</span> <span class="n">width</span> <span class="p">/</span> <span class="n">frequency</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">path</span><span class="p">.</span><span class="n">moveTo</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="n">halfHeight</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">x</span> <span class="k">in</span> <span class="m">0</span> <span class="n">until</span> <span class="n">width</span><span class="p">.</span><span class="n">toInt</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">theta</span> <span class="p">=</span> <span class="p">(</span><span class="m">2.0</span> <span class="p">*</span> <span class="n">Math</span><span class="p">.</span><span class="n">PI</span> <span class="p">*</span> <span class="n">x</span> <span class="p">/</span> <span class="n">waveLength</span><span class="p">).</span><span class="n">toFloat</span><span class="p">()</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">y</span> <span class="p">=</span> <span class="n">halfHeight</span> <span class="p">+</span> <span class="n">amplitude</span> <span class="p">*</span> <span class="n">sin</span><span class="p">(</span><span class="n">theta</span><span class="p">.</span><span class="n">toDouble</span><span class="p">()).</span><span class="n">toFloat</span><span class="p">()</span>
</span><span class='line'>            <span class="n">path</span><span class="p">.</span><span class="n">lineTo</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">toFloat</span><span class="p">(),</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="py">gradient</span> <span class="p">=</span> <span class="n">Brush</span><span class="p">.</span><span class="n">horizontalGradient</span><span class="p">(</span>
</span><span class='line'>            <span class="n">colors</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">Blue</span><span class="p">,</span> <span class="n">Color</span><span class="p">.</span><span class="n">Cyan</span><span class="p">,</span> <span class="n">Color</span><span class="p">.</span><span class="n">Magenta</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">drawPath</span><span class="p">(</span>
</span><span class='line'>            <span class="n">path</span> <span class="p">=</span> <span class="n">path</span><span class="p">,</span>
</span><span class='line'>            <span class="n">brush</span> <span class="p">=</span> <span class="n">gradient</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>代码说明</h4>

<ul>
<li>amplitude 和 frequency 是状态变量，分别控制波形的幅度和频率。</li>
<li>Canvas 可组合项用于绘制波形。Canvas 内部的绘制逻辑根据正弦函数计算每个 X 位置的 Y 位置，从而创建波浪效果。</li>
<li>detectDragGestures 修饰符用于根据用户拖动手势更新幅度和频率。水平拖动调整频率，垂直拖动调整幅度。</li>
<li>当用户在屏幕上拖动时，波形的形状会相应变化，从而营造出互动体验。</li>
</ul>


<h4>注意事项</h4>

<ul>
<li>这是一个基本的实现。为了获得更逼真的音频波形，你需要集成实际的音频数据。</li>
<li>可以通过调整拖动过程中幅度和频率的修改方式来微调波形对手势的响应能力。</li>
</ul>


<p>此示例演示了如何在 Compose 中创建基本的交互式波形，并且可以对其进行扩展或修改，以用于更复杂的用例或处理更复杂的手势。</p>

<h2>第 5 节 — Jetpack Compose 中的状态驱动动画模式</h2>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*nkfhmC6JjQnshL3y_izhKg.gif" alt="带动画线图" /></p>

<h3>基于数据和状态变化的UI动画</h3>

<p>本部分重点介绍如何创建由数据或UI 状态变化驱动的动画，从而增强应用的交互性和响应能力。我们将探讨两个具体示例——数据图动画和在多状态 UI 中实现状态转换。</p>

<h3>A) 数据驱动的图形动画</h3>

<p>本示例演示了一个动画线图，其中图形的路径（Path）会随着数据集的变化而变化。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">AnimatedGraphExample</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">dataPoints</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="n">generateRandomDataPoints</span><span class="p">(</span><span class="m">5</span><span class="p">))</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Column</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">fillMaxSize</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">DarkGray</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">AnimatedLineGraph</span><span class="p">(</span><span class="n">dataPoints</span> <span class="p">=</span> <span class="n">dataPoints</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Spacer</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">height</span><span class="p">(</span><span class="m">16.</span><span class="n">dp</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Button</span><span class="p">(</span>
</span><span class='line'>            <span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">dataPoints</span> <span class="p">=</span> <span class="n">generateRandomDataPoints</span><span class="p">(</span><span class="m">5</span><span class="p">)</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">align</span><span class="p">(</span><span class="n">Alignment</span><span class="p">.</span><span class="n">CenterHorizontally</span><span class="p">),</span>
</span><span class='line'>            <span class="n">colors</span> <span class="p">=</span> <span class="n">ButtonDefaults</span><span class="p">.</span><span class="n">buttonColors</span><span class="p">(</span><span class="n">containerColor</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Green</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Text</span><span class="p">(</span>
</span><span class='line'>                <span class="s">&quot;Update Data&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">fontWeight</span> <span class="p">=</span> <span class="n">FontWeight</span><span class="p">.</span><span class="n">Bold</span><span class="p">,</span>
</span><span class='line'>                <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">DarkGray</span><span class="p">,</span>
</span><span class='line'>                <span class="n">fontSize</span> <span class="p">=</span> <span class="m">18.</span><span class="n">sp</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">AnimatedLineGraph</span><span class="p">(</span><span class="n">dataPoints</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Float</span><span class="p">&gt;)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">animatableDataPoints</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">dataPoints</span><span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">Animatable</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">path</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">Path</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">dataPoints</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">animatableDataPoints</span><span class="p">.</span><span class="n">forEachIndexed</span> <span class="p">{</span> <span class="n">index</span><span class="p">,</span> <span class="n">animatable</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="n">animatable</span><span class="p">.</span><span class="n">animateTo</span><span class="p">(</span><span class="n">dataPoints</span><span class="p">[</span><span class="n">index</span><span class="p">],</span> <span class="n">animationSpec</span> <span class="p">=</span> <span class="n">TweenSpec</span><span class="p">(</span><span class="n">durationMillis</span> <span class="p">=</span> <span class="m">500</span><span class="p">))</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Canvas</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">fillMaxWidth</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">height</span><span class="p">(</span><span class="m">400.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">path</span><span class="p">.</span><span class="n">reset</span><span class="p">()</span>
</span><span class='line'>        <span class="n">animatableDataPoints</span><span class="p">.</span><span class="n">forEachIndexed</span> <span class="p">{</span> <span class="n">index</span><span class="p">,</span> <span class="n">animatable</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">x</span> <span class="p">=</span> <span class="p">(</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="p">/</span> <span class="p">(</span><span class="n">dataPoints</span><span class="p">.</span><span class="n">size</span> <span class="p">-</span> <span class="m">1</span><span class="p">))</span> <span class="p">*</span> <span class="n">index</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">y</span> <span class="p">=</span> <span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="p">-</span> <span class="p">(</span><span class="n">animatable</span><span class="p">.</span><span class="n">value</span> <span class="p">*</span> <span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">index</span> <span class="p">==</span> <span class="m">0</span><span class="p">)</span> <span class="n">path</span><span class="p">.</span><span class="n">moveTo</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="k">else</span> <span class="n">path</span><span class="p">.</span><span class="n">lineTo</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">drawPath</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">Color</span><span class="p">.</span><span class="n">Green</span><span class="p">,</span> <span class="n">style</span> <span class="p">=</span> <span class="n">Stroke</span><span class="p">(</span><span class="m">5f</span><span class="p">))</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">generateRandomDataPoints</span><span class="p">(</span><span class="n">size</span><span class="p">:</span> <span class="n">Int</span><span class="p">):</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Float</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">List</span><span class="p">(</span><span class="n">size</span><span class="p">)</span> <span class="p">{</span> <span class="n">Random</span><span class="p">.</span><span class="n">nextFloat</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>代码说明</h4>

<ul>
<li>AnimatedGraphExample 可组合项创建了一个可以更新折线图数据点的环境。</li>
<li>该图表绘制在 Canvas 中，其中 drawPath 方法使用来自 animatableDataPoints 的动画值。</li>
<li>对于图表中的每个数据点，我们需要计算其在画布上对应的 x（水平）和 y（垂直）位置。</li>
<li>x 计算 - x 位置是根据数据点的索引和画布的总宽度计算得出的。我们将数据点沿画布的宽度均匀分布。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">x</span> <span class="p">=</span> <span class="p">(</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="p">/</span> <span class="p">(</span><span class="n">dataPoints</span><span class="p">.</span><span class="n">size</span> <span class="p">-</span> <span class="m">1</span><span class="p">))</span> <span class="p">*</span> <span class="n">index</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>y 计算——y 位置是根据数据点（animatable.value）的值和画布的高度计算的。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">y</span> <span class="p">=</span> <span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="p">-</span> <span class="p">(</span><span class="n">animatable</span><span class="p">.</span><span class="n">value</span> <span class="p">*</span> <span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>路径从第一个数据点开始，然后使用 lineTo 绘制一条线到每个后续点，从而创建图形线。</li>
<li>路径基于数据点的动画值绘制，从而在数据发生变化时创建动画效果。</li>
</ul>


<h3>B) 多状态 UI 中的状态转换</h3>

<p>可以使用 Animatable 在多状态 UI 中实现状态转换，从而在不同 UI 状态之间进行动画处理。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">enum</span> <span class="k">class</span> <span class="nc">UIState</span> <span class="p">{</span> <span class="n">StateA</span><span class="p">,</span> <span class="n">StateB</span><span class="p">,</span> <span class="n">StateC</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">StateTransitionUI</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">currentState</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="n">UIState</span><span class="p">.</span><span class="n">StateA</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">fillMaxSize</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">getBackgroundColorForState</span><span class="p">(</span><span class="n">currentState</span><span class="p">)),</span>
</span><span class='line'>        <span class="n">contentAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">Center</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">AnimatedContent</span><span class="p">(</span><span class="n">currentState</span> <span class="p">=</span> <span class="n">currentState</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Button</span><span class="p">(</span>
</span><span class='line'>            <span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span> <span class="n">currentState</span> <span class="p">=</span> <span class="n">getNextState</span><span class="p">(</span><span class="n">currentState</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">align</span><span class="p">(</span><span class="n">Alignment</span><span class="p">.</span><span class="n">BottomCenter</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Next State&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">AnimatedContent</span><span class="p">(</span><span class="n">currentState</span><span class="p">:</span> <span class="n">UIState</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">AnimatedVisibility</span><span class="p">(</span>
</span><span class='line'>        <span class="n">visible</span> <span class="p">=</span> <span class="n">currentState</span> <span class="p">==</span> <span class="n">UIState</span><span class="p">.</span><span class="n">StateA</span><span class="p">,</span>
</span><span class='line'>        <span class="n">enter</span> <span class="p">=</span> <span class="n">fadeIn</span><span class="p">(</span><span class="n">animationSpec</span> <span class="p">=</span> <span class="n">tween</span><span class="p">(</span><span class="n">durationMillis</span> <span class="p">=</span> <span class="m">2000</span><span class="p">))</span> <span class="p">+</span> <span class="n">expandVertically</span><span class="p">(),</span>
</span><span class='line'>        <span class="n">exit</span> <span class="p">=</span> <span class="n">fadeOut</span><span class="p">(</span><span class="n">animationSpec</span> <span class="p">=</span> <span class="n">tween</span><span class="p">(</span><span class="n">durationMillis</span> <span class="p">=</span> <span class="m">2000</span><span class="p">))</span> <span class="p">+</span> <span class="n">shrinkVertically</span><span class="p">()</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Text</span><span class="p">(</span><span class="s">&quot;This is ${currentState.name}&quot;</span><span class="p">,</span> <span class="n">fontSize</span> <span class="p">=</span> <span class="m">32.</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 与B 和 C 的类似的代码块</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">getBackgroundColorForState</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">UIState</span><span class="p">):</span> <span class="n">Color</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">when</span> <span class="p">(</span><span class="n">state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">UIState</span><span class="p">.</span><span class="n">StateA</span> <span class="p">-&gt;</span> <span class="n">Color</span><span class="p">.</span><span class="n">Red</span>
</span><span class='line'>        <span class="n">UIState</span><span class="p">.</span><span class="n">StateB</span> <span class="p">-&gt;</span> <span class="n">Color</span><span class="p">.</span><span class="n">Green</span>
</span><span class='line'>        <span class="n">UIState</span><span class="p">.</span><span class="n">StateC</span> <span class="p">-&gt;</span> <span class="n">Color</span><span class="p">.</span><span class="n">Blue</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">getNextState</span><span class="p">(</span><span class="n">currentState</span><span class="p">:</span> <span class="n">UIState</span><span class="p">):</span> <span class="n">UIState</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">when</span> <span class="p">(</span><span class="n">currentState</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">UIState</span><span class="p">.</span><span class="n">StateA</span> <span class="p">-&gt;</span> <span class="n">UIState</span><span class="p">.</span><span class="n">StateB</span>
</span><span class='line'>        <span class="n">UIState</span><span class="p">.</span><span class="n">StateB</span> <span class="p">-&gt;</span> <span class="n">UIState</span><span class="p">.</span><span class="n">StateC</span>
</span><span class='line'>        <span class="n">UIState</span><span class="p">.</span><span class="n">StateC</span> <span class="p">-&gt;</span> <span class="n">UIState</span><span class="p">.</span><span class="n">StateA</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>代码说明</h4>

<ul>
<li>在此示例中，AnimatedVisibility 用于为每个状态下内容的出现和消失添加动画效果。这会在状态变化时添加平滑的过渡效果。</li>
<li>对于每个状态（StateA、StateB、StateC），都有一个 AnimatedVisibility 块，用于通过淡入淡出和展开/收缩动画控制其内容的可见性。</li>
<li>AnimatedVisibility 的进入和退出参数分别定义了内容可见或隐藏时的动画。</li>
</ul>


<h2>第 6 节 — 在 Compose中改变（Morphing）形状</h2>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*q82EIocVzR8XBMuG_14mdg.gif" alt="形状变形" /></p>

<p>动画形状之间的变换涉及这些形状的属性的插值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">ShapeMorphingAnimation</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">animationProgress</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">Animatable</span><span class="p">(</span><span class="m">0f</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">animationProgress</span><span class="p">.</span><span class="n">animateTo</span><span class="p">(</span>
</span><span class='line'>            <span class="n">targetValue</span> <span class="p">=</span> <span class="m">1f</span><span class="p">,</span>
</span><span class='line'>            <span class="n">animationSpec</span> <span class="p">=</span> <span class="n">infiniteRepeatable</span><span class="p">(</span>
</span><span class='line'>                <span class="n">animation</span> <span class="p">=</span> <span class="n">tween</span><span class="p">(</span><span class="m">2000</span><span class="p">,</span> <span class="n">easing</span> <span class="p">=</span> <span class="n">LinearOutSlowInEasing</span><span class="p">),</span>
</span><span class='line'>                <span class="n">repeatMode</span> <span class="p">=</span> <span class="n">RepeatMode</span><span class="p">.</span><span class="n">Reverse</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Canvas</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">40.</span><span class="n">dp</span><span class="p">).</span><span class="n">fillMaxSize</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">sizeValue</span> <span class="p">=</span> <span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">.</span><span class="n">coerceAtMost</span><span class="p">(</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">)</span> <span class="p">/</span> <span class="m">2</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">squareRect</span> <span class="p">=</span> <span class="n">Rect</span><span class="p">(</span><span class="n">center</span> <span class="p">=</span> <span class="n">center</span><span class="p">,</span> <span class="n">sizeValue</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="py">morphedPath</span> <span class="p">=</span> <span class="n">interpolateShapes</span><span class="p">(</span><span class="n">progress</span> <span class="p">=</span> <span class="n">animationProgress</span><span class="p">.</span><span class="n">value</span><span class="p">,</span> <span class="n">squareRect</span> <span class="p">=</span> <span class="n">squareRect</span><span class="p">)</span>
</span><span class='line'>        <span class="n">drawPath</span><span class="p">(</span><span class="n">morphedPath</span><span class="p">,</span> <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Blue</span><span class="p">,</span> <span class="n">style</span> <span class="p">=</span> <span class="n">Fill</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">interpolateShapes</span><span class="p">(</span><span class="n">progress</span><span class="p">:</span> <span class="n">Float</span><span class="p">,</span> <span class="n">squareRect</span><span class="p">:</span> <span class="n">Rect</span><span class="p">):</span> <span class="n">Path</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">path</span> <span class="p">=</span> <span class="n">Path</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">cornerRadius</span> <span class="p">=</span> <span class="n">CornerRadius</span><span class="p">(</span>
</span><span class='line'>        <span class="n">x</span> <span class="p">=</span> <span class="n">lerp</span><span class="p">(</span><span class="n">start</span> <span class="p">=</span> <span class="n">squareRect</span><span class="p">.</span><span class="n">width</span> <span class="p">/</span> <span class="m">2</span><span class="p">,</span> <span class="n">stop</span> <span class="p">=</span> <span class="m">0f</span><span class="p">,</span> <span class="n">fraction</span> <span class="p">=</span> <span class="n">progress</span><span class="p">),</span>
</span><span class='line'>        <span class="n">y</span> <span class="p">=</span> <span class="n">lerp</span><span class="p">(</span><span class="n">start</span> <span class="p">=</span> <span class="n">squareRect</span><span class="p">.</span><span class="n">height</span> <span class="p">/</span> <span class="m">2</span><span class="p">,</span> <span class="n">stop</span> <span class="p">=</span> <span class="m">0f</span><span class="p">,</span> <span class="n">fraction</span> <span class="p">=</span> <span class="n">progress</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">path</span><span class="p">.</span><span class="n">addRoundRect</span><span class="p">(</span>
</span><span class='line'>        <span class="n">roundRect</span> <span class="p">=</span> <span class="n">RoundRect</span><span class="p">(</span><span class="n">rect</span> <span class="p">=</span> <span class="n">squareRect</span><span class="p">,</span> <span class="n">cornerRadius</span> <span class="p">=</span> <span class="n">cornerRadius</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">path</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">lerp</span><span class="p">(</span><span class="n">start</span><span class="p">:</span> <span class="n">Float</span><span class="p">,</span> <span class="n">stop</span><span class="p">:</span> <span class="n">Float</span><span class="p">,</span> <span class="n">fraction</span><span class="p">:</span> <span class="n">Float</span><span class="p">):</span> <span class="n">Float</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="m">1</span> <span class="p">-</span> <span class="n">fraction</span><span class="p">)</span> <span class="p">*</span> <span class="n">start</span> <span class="p">+</span> <span class="n">fraction</span> <span class="p">*</span> <span class="n">stop</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>代码说明</h4>

<ul>
<li>ShapeMorphingAnimation 设置了一个无限动画，将 animationProgress 的值在 0 和 1 之间切换。</li>
<li>Canvas 可组合项用于绘制形状。在这里，我们根据画布大小定义正方形 (squareRect) 的尺寸。</li>
<li>interpolateShapes 接收当前动画进度和正方形的矩形，在圆形和正方形之间进行插值。它使用 lerp（线性插值）逐步调整圆角矩形的 cornerRadius，该矩形代表我们的变形形状。</li>
<li>当 progress 为 0 时，cornerRadius 是矩形大小的一半，使形状变为圆形。当 progress 为 1 时，cornerRadius 为 0，使形状变为正方形。</li>
</ul>


<h4>实际用例</h4>

<ul>
<li>加载和进度指示器——变形形状可用于创建更具吸引力的加载或进度指示器，以视觉上引人入胜的方式指示进度或加载状态。</li>
<li>UI 中的图标过渡——变形图标可用于根据用户操作提供视觉反馈。例如，点击播放按钮时会变形为暂停按钮，汉堡菜单图标会变形为后退箭头。</li>
<li>数据可视化——在复杂的数据可视化中，变形可以帮助在不同视图或数据状态之间过渡，使用户更容易跟踪和理解随时间或类别变化的变化。</li>
</ul>


<h2>想看雪花特效吗？</h2>

<p>我们将演示一个简单的粒子系统（Particle system）来创建雪花效果。</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*E26GhhxDZLGTpE8gMvJoHw.gif" alt="雪花特效" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">data</span> <span class="k">class</span> <span class="nc">Snowflake</span><span class="p">(</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">x</span><span class="p">:</span> <span class="n">Float</span><span class="p">,</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">y</span><span class="p">:</span> <span class="n">Float</span><span class="p">,</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">radius</span><span class="p">:</span> <span class="n">Float</span><span class="p">,</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">speed</span><span class="p">:</span> <span class="n">Float</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">SnowfallEffect</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">snowflakes</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">List</span><span class="p">(</span><span class="m">100</span><span class="p">)</span> <span class="p">{</span> <span class="n">generateRandomSnowflake</span><span class="p">()</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">infiniteTransition</span> <span class="p">=</span> <span class="n">rememberInfiniteTransition</span><span class="p">(</span><span class="n">label</span> <span class="p">=</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">offsetY</span> <span class="k">by</span> <span class="n">infiniteTransition</span><span class="p">.</span><span class="n">animateFloat</span><span class="p">(</span>
</span><span class='line'>        <span class="n">initialValue</span> <span class="p">=</span> <span class="m">0f</span><span class="p">,</span>
</span><span class='line'>        <span class="n">targetValue</span> <span class="p">=</span> <span class="m">1000f</span><span class="p">,</span>
</span><span class='line'>        <span class="n">animationSpec</span> <span class="p">=</span> <span class="n">infiniteRepeatable</span><span class="p">(</span>
</span><span class='line'>            <span class="n">animation</span> <span class="p">=</span> <span class="n">tween</span><span class="p">(</span><span class="n">durationMillis</span> <span class="p">=</span> <span class="m">5000</span><span class="p">,</span> <span class="n">easing</span> <span class="p">=</span> <span class="n">LinearEasing</span><span class="p">),</span>
</span><span class='line'>            <span class="n">repeatMode</span> <span class="p">=</span> <span class="n">RepeatMode</span><span class="p">.</span><span class="n">Restart</span>
</span><span class='line'>        <span class="p">),</span> <span class="n">label</span> <span class="p">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Canvas</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">().</span><span class="n">background</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">Black</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">snowflakes</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span> <span class="n">snowflake</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="n">drawSnowflake</span><span class="p">(</span><span class="n">snowflake</span><span class="p">,</span> <span class="n">offsetY</span> <span class="p">%</span> <span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">generateRandomSnowflake</span><span class="p">():</span> <span class="n">Snowflake</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Snowflake</span><span class="p">(</span>
</span><span class='line'>        <span class="n">x</span> <span class="p">=</span> <span class="n">Random</span><span class="p">.</span><span class="n">nextFloat</span><span class="p">(),</span>
</span><span class='line'>        <span class="n">y</span> <span class="p">=</span> <span class="n">Random</span><span class="p">.</span><span class="n">nextFloat</span><span class="p">()</span> <span class="p">*</span> <span class="m">1000f</span><span class="p">,</span>
</span><span class='line'>        <span class="n">radius</span> <span class="p">=</span> <span class="n">Random</span><span class="p">.</span><span class="n">nextFloat</span><span class="p">()</span> <span class="p">*</span> <span class="m">2f</span> <span class="p">+</span> <span class="m">2f</span><span class="p">,</span> <span class="c1">// Snowflake size</span>
</span><span class='line'>        <span class="n">speed</span> <span class="p">=</span> <span class="n">Random</span><span class="p">.</span><span class="n">nextFloat</span><span class="p">()</span> <span class="p">*</span> <span class="m">1.2f</span> <span class="p">+</span> <span class="m">1f</span>  <span class="c1">// Falling speed</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">DrawScope</span><span class="p">.</span><span class="n">drawSnowflake</span><span class="p">(</span><span class="n">snowflake</span><span class="p">:</span> <span class="n">Snowflake</span><span class="p">,</span> <span class="n">offsetY</span><span class="p">:</span> <span class="n">Float</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">newY</span> <span class="p">=</span> <span class="p">(</span><span class="n">snowflake</span><span class="p">.</span><span class="n">y</span> <span class="p">+</span> <span class="n">offsetY</span> <span class="p">*</span> <span class="n">snowflake</span><span class="p">.</span><span class="n">speed</span><span class="p">)</span> <span class="p">%</span> <span class="n">size</span><span class="p">.</span><span class="n">height</span>
</span><span class='line'>    <span class="n">drawCircle</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">White</span><span class="p">,</span> <span class="n">radius</span> <span class="p">=</span> <span class="n">snowflake</span><span class="p">.</span><span class="n">radius</span><span class="p">,</span> <span class="n">center</span> <span class="p">=</span> <span class="n">Offset</span><span class="p">(</span><span class="n">snowflake</span><span class="p">.</span><span class="n">x</span> <span class="p">*</span> <span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">newY</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>代码说明</h4>

<ul>
<li>SnowfallEffect 设置了一个包含多个雪花（Snowflake 对象）的粒子系统。</li>
<li>每个雪花都具有位置 (x, y)、半径（大小）和速度等属性。</li>
<li>rememberInfiniteTransition 和 animateFloat 用于创建连续的垂直运动效果，模拟降雪。</li>
<li>Canvas 可组合函数用于绘制每片雪花。drawSnowflake 函数根据每片雪花的速度和动画的 offsetY 计算其新的位置。</li>
<li>雪花从底部落下后会重新出现在顶部，从而产生循环降雪效果。</li>
</ul>


<h2>总结</h2>

<p>随着我们对 Jetpack Compose 动画的探索逐渐深入，我们清楚地认识到，动画不仅仅是视觉上的点缀。它们是打造引人入胜、直观且赏心悦目的用户体验的关键工具。</p>

<h3>拥抱互动性</h3>

<p>从动态游戏角色运动到交互式时间轴，我们见证了动画如何让用户交互更具吸引力和信息量。</p>

<h3>打造逼真的体验</h3>

<p>雪花飘落效果和变形形状展现了该工具包将真实感和流畅性带入数字世界的能力。这些动画有助于打造与用户产生共鸣的沉浸式体验。</p>

<h3>简化复杂性</h3>

<p>无论是编排多个元素还是制作状态转换动画，其简单易用性都令人瞩目。</p>

<h2>结束语</h2>

<p>如果你喜欢本文，请随时留下宝贵的反馈或赞赏。我一直期待与其他开发者一起学习、合作、共同成长。</p>

<p>如有任何疑问，请随时给我留言！</p>

<p>在 Medium 上关注我，获取更多文章 — <a href="https://medium.com/@pherwani37">Medium 个人资料</a>（链接：<a href="https://medium.com/@pherwani37%EF%BC%89">https://medium.com/@pherwani37%EF%BC%89</a></p>

<p>在<a href="https://linkedin.com/in/nirbhaypherwani">LinkedIn</a>（链接：<a href="https://linkedin.com/in/nirbhaypherwani%EF%BC%89%E5%92%8C">https://linkedin.com/in/nirbhaypherwani%EF%BC%89%E5%92%8C</a><a href="https://twitter.com/nirbhayph">Twitter</a>（链接：<a href="https://twitter.com/nirbhayph%EF%BC%89%E4%B8%8A%E4%B8%8E%E6%88%91%E8%81%94%E7%B3%BB%EF%BC%8C%E4%BB%A5%E4%BE%BF%E6%88%91%E4%BB%AC%E8%BF%9B%E8%A1%8C%E5%90%88%E4%BD%9C%E3%80%82">https://twitter.com/nirbhayph%EF%BC%89%E4%B8%8A%E4%B8%8E%E6%88%91%E8%81%94%E7%B3%BB%EF%BC%8C%E4%BB%A5%E4%BE%BF%E6%88%91%E4%BB%AC%E8%BF%9B%E8%A1%8C%E5%90%88%E4%BD%9C%E3%80%82</a></p>

<p>祝你动画制作愉快！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[理解Jetpack Compose中副作用函数的内部原理]]></title>
    <link href="https://alexhilton.github.io/blog/2025/05/01/understanding-side-effect-handlers/"/>
    <updated>2025-05-01T11:05:24+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/05/01/understanding-side-effect-handlers</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自「Understanding the Internals of Side-Effect Handlers in Jetpack Compose」，原文链接<a href="https://proandroiddev.com/understanding-the-internals-of-side-effect-handlers-in-jetpack-compose-d55fbf914fde">https://proandroiddev.com/understanding-the-internals-of-side-effect-handlers-in-jetpack-compose-d55fbf914fde</a>，由Jaewoong Eum发布于2025年4月10日。</p></blockquote>

<p><a href="https://alexhilton.github.io/blog/2025/05/01/understanding-side-effect-handlers/"><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*GNgL_XzYpw16hn6BxocOww.jpeg" title="auto auto" ></a></p>

<!-- more -->


<p>近年来，Jetpack Compose生态呈指数级增长，现已被广泛用于构建 Android 应用的产品级UI。现在，我们可以说 Jetpack Compose 代表了 Android UI 开发的未来。</p>

<p>Compose 最大的优势之一是其声明式（declarative）方法——它允许开发者描述 UI 应该显示的内容，而框架则负责处理 UI 在底层状态发生变化时应如何更新。这种模型将焦点从命令式（imperative）UI 转移到更直观、更具响应式的思维方式。</p>

<p>然而，尽管声明式 UI有很多优势，但妥善管理副作用也至关重要。可组合函数可能会因各种原因（例如状态或参数的变化）而被重组，如果副作用处理不当，应用的行为可能会变得不可预测。</p>

<p>在本文中，你将探索 Jetpack Compose 默认提供的副作用处理 API。你还将研究它们的内部工作流程，以更好地了解 Compose 如何在底层管理这些操作。</p>

<h2>副作用（Side Effect）是啥？</h2>

<p>副作用（Side Effect）是指发生在可组合函数作用域之外的应用状态变化。在 Jetpack Compose 中，由于状态变化、参数更新或其他事件触发的重组，可组合函数可能会频繁且不可预测地重新执行（译注：也就是说Compose的重组是不受开发者控制的）。因此，你不能假设一个可组合函数只会被调用一次。</p>

<p>换句话说，在可组合函数内部直接调用业务逻辑（例如从网络获取数据或查询数据库）是有风险的。由于潜在的重组，这些操作可能会无意中运行多次，从而导致错误或性能问题。</p>

<p>为了解决这个问题，Jetpack Compose 提供了一组专门用于以安全可控的方式管理副作用的API。这些 API包括 LaunchedEffect 、 DisposableEffect 、 SideEffect 、 rememberCoroutineScope 等等。在本文中，你将重点介绍三个最常用的处理程序—— LaunchedEffect 、 DisposableEffect 和 SideEffect ——并仔细研究它们的内部实现，以便更好地理解它们的底层工作原理。</p>

<h2>LaunchedEffect</h2>

<p>LaunchedEffect是Jetpack Compose中最常用的副作用处理 API之一。它允许你以可组合生命周期感知的方式（而非 Android 生命周期）启动协程，并确保除非指定的关键参数（keys）之一发生变化，否则不会重新执行提供的代码块。这种行为使得 LaunchedEffect 特别适合执行与特定状态相关的一次性事件，例如显示 Toast或Snackbar、记录事件或触发业务逻辑，正如你在 Now in Android 项目中的示例代码中所见：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">snackbarHostState</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">SnackbarHostState</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'><span class="k">val</span> <span class="py">isOffline</span> <span class="k">by</span> <span class="n">appState</span><span class="p">.</span><span class="n">isOffline</span><span class="p">.</span><span class="n">collectAsStateWithLifecycle</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 如果用户未连接到互联网，则显示一个Snackbar来通知他们。</span>
</span><span class='line'><span class="k">val</span> <span class="py">notConnectedMessage</span> <span class="p">=</span> <span class="n">stringResource</span><span class="p">(</span><span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">not_connected</span><span class="p">)</span>
</span><span class='line'><span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">isOffline</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">isOffline</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">snackbarHostState</span><span class="p">.</span><span class="n">showSnackbar</span><span class="p">(</span>
</span><span class='line'>            <span class="n">message</span> <span class="p">=</span> <span class="n">notConnectedMessage</span><span class="p">,</span>
</span><span class='line'>            <span class="n">duration</span> <span class="p">=</span> <span class="n">Indefinite</span><span class="p">,</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要注意的是，LaunchedEffect 会在底层创建一个新的协程作用域。这意味着它主要用于在可组合函数作用域内执行基于协程的任务，并在可组合函数离开组合时自动取消其协程。因此，LaunchedEffect 最适合用于与协程相关的操作，例如数据获取、延迟效果或事件处理，而不是简单地执行非暂停函数。现在，让我们深入探究一下，以更好地理解 LaunchedEffect 的内部工作原理。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">LaunchedEffect</span><span class="p">(</span>
</span><span class='line'>    <span class="n">key1</span><span class="p">:</span> <span class="n">Any</span><span class="p">?,</span>
</span><span class='line'>    <span class="n">block</span><span class="p">:</span> <span class="n">suspend</span> <span class="n">CoroutineScope</span><span class="p">.()</span> <span class="p">-&gt;</span> <span class="n">Unit</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">applyContext</span> <span class="p">=</span> <span class="n">currentComposer</span><span class="p">.</span><span class="n">applyCoroutineContext</span>
</span><span class='line'>    <span class="n">remember</span><span class="p">(</span><span class="n">key1</span><span class="p">)</span> <span class="p">{</span> <span class="n">LaunchedEffectImpl</span><span class="p">(</span><span class="n">applyContext</span><span class="p">,</span> <span class="n">block</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">internal</span> <span class="k">class</span> <span class="nc">LaunchedEffectImpl</span><span class="p">(</span>
</span><span class='line'>    <span class="n">parentCoroutineContext</span><span class="p">:</span> <span class="n">CoroutineContext</span><span class="p">,</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">task</span><span class="p">:</span> <span class="n">suspend</span> <span class="n">CoroutineScope</span><span class="p">.()</span> <span class="p">-&gt;</span> <span class="n">Unit</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">RememberObserver</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">scope</span> <span class="p">=</span> <span class="n">CoroutineScope</span><span class="p">(</span><span class="n">parentCoroutineContext</span><span class="p">)</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">var</span> <span class="py">job</span><span class="p">:</span> <span class="n">Job</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onRemembered</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 这不应该发生，但为了安全起见留在这里</span>
</span><span class='line'>        <span class="n">job</span><span class="o">?.</span><span class="n">cancel</span><span class="p">(</span><span class="s">&quot;Old job was still running!&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">job</span> <span class="p">=</span> <span class="n">scope</span><span class="p">.</span><span class="n">launch</span><span class="p">(</span><span class="n">block</span> <span class="p">=</span> <span class="n">task</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onForgotten</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">job</span><span class="o">?.</span><span class="n">cancel</span><span class="p">(</span><span class="n">LeftCompositionCancellationException</span><span class="p">())</span>
</span><span class='line'>        <span class="n">job</span> <span class="p">=</span> <span class="k">null</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onAbandoned</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">job</span><span class="o">?.</span><span class="n">cancel</span><span class="p">(</span><span class="n">LeftCompositionCancellationException</span><span class="p">())</span>
</span><span class='line'>        <span class="n">job</span> <span class="p">=</span> <span class="k">null</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>正如你在LaunchedEffect的内部实现中所看到的，它会创建LaunchedEffectImpl并将其存储在内存中，并将给定的键值作为参数，以便在键发生变化时重新创建 LaunchedEffectImpl 实例。</p>

<p>如果你查看内部 LaunchedEffectImpl 类，你会发现它实现了RememberObserver接口，并首先创建一个新的 CoroutineScope。然后，当可组合项进入组合阶段时，提供的 lambda 会在此范围内启动。当可组合项离开组合阶段时，协程范围会自动取消，从而确保资源得到正确清理，并避免潜在的内存泄漏或性能问题。</p>

<p>话虽如此，如果你的任务不涉及任何与协程相关的操作，而只是需要在键发生变化时重新执行，那么使用 LaunchedEffect 可能略显多余。虽然创建协程作用域的开销通常很小，但在实际不使用协程的情况下，它仍然是不必要的。在这种情况下，你可以考虑使用更轻量级的副作用处理library (<a href="https://github.com/skydoves/compose-effects?tab=readme-ov-file#rememberedeffect">RememberedEffect</a>)，它更适合非挂起（non-suspending）任务。</p>

<p>另一个常见的误解是LaunchedEffect能够感知 Android生命周期——但事实并非如此。从内部实现可以看出，LaunchedEffect的作用域完全限定于Jetpack Compose组合生命周期，与 Android组件（Activity和Fragment）的生命周期没有直接关联。</p>

<p>换句话说，它本身并不了解任何有关 Activity、Fragment 或 onStop()或 onDestroy()等生命周期事件的信息。这意味着，如果你在 LaunchedEffect 中启动一个协程，并且 Android 组件（例如 Activity）在可组合项未离开组合的情况下被停止或销毁，则该协程可能会继续运行，除非它明确与Android组件生命周期绑定。</p>

<h2>DisposableEffect</h2>

<p>DisposableEffect是Jetpack Compose 运行时提供的另一个副作用处理API。它允许你与可组合项的生命周期同步执行设置和清理逻辑。与LaunchedEffect不同，它提供了一个 DisposableEffectScope 作为接收器（receiver），使你能够定义一个清理代码块（clean-up code block），该代码块在可组合项离开组合时自动运行。这使得它非常适合管理需要显式卸载的外部资源，例如监听器、回调或广播接收器。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">lifecycleOwner</span> <span class="p">=</span> <span class="n">LocalLifecycleOwner</span><span class="p">.</span><span class="n">current</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 如果 `lifecycleOwner` 发生变化，则释放并重置效果</span>
</span><span class='line'><span class="n">DisposableEffect</span><span class="p">(</span><span class="n">lifecycleOwner</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 创建一个观察者，触发我们记住的回调以发送分析事件</span>
</span><span class='line'>  <span class="k">val</span> <span class="py">observer</span> <span class="p">=</span> <span class="n">LifecycleEventObserver</span> <span class="p">{</span> <span class="n">_</span><span class="p">,</span> <span class="n">event</span> <span class="p">-&gt;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">event</span> <span class="p">==</span> <span class="n">Lifecycle</span><span class="p">.</span><span class="n">Event</span><span class="p">.</span><span class="n">ON_RESUME</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// do something</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">event</span> <span class="p">==</span> <span class="n">Lifecycle</span><span class="p">.</span><span class="n">Event</span><span class="p">.</span><span class="n">ON_PAUSE</span> <span class="p">||</span> <span class="n">event</span> <span class="p">==</span> <span class="n">Lifecycle</span><span class="p">.</span><span class="n">Event</span><span class="p">.</span><span class="n">ON_STOP</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// do something</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Add the observer to the lifecycle</span>
</span><span class='line'>  <span class="n">lifecycleOwner</span><span class="p">.</span><span class="n">lifecycle</span><span class="p">.</span><span class="n">addObserver</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 当效果离开 Composition 时，移除观察者</span>
</span><span class='line'>  <span class="n">onDispose</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">lifecycleOwner</span><span class="p">.</span><span class="n">lifecycle</span><span class="p">.</span><span class="n">removeObserver</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的示例使用 DisposableEffect 将 LifecycleEventObserver注册到lifecycleOwner，使其能够观察生命周期变化并根据当前状态执行特定逻辑。观察者会在onDispose块内被安全地移除，确保在可组合项离开组合时进行适当的清理。现在，让我们深入了解DisposableEffect的内部工作原理。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">DisposableEffect</span><span class="p">(</span>
</span><span class='line'>    <span class="n">key1</span><span class="p">:</span> <span class="n">Any</span><span class="p">?,</span>
</span><span class='line'>    <span class="n">effect</span><span class="p">:</span> <span class="n">DisposableEffectScope</span><span class="p">.()</span> <span class="p">-&gt;</span> <span class="n">DisposableEffectResult</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">remember</span><span class="p">(</span><span class="n">key1</span><span class="p">)</span> <span class="p">{</span> <span class="n">DisposableEffectImpl</span><span class="p">(</span><span class="n">effect</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">class</span> <span class="nc">DisposableEffectImpl</span><span class="p">(</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">effect</span><span class="p">:</span> <span class="n">DisposableEffectScope</span><span class="p">.()</span> <span class="p">-&gt;</span> <span class="n">DisposableEffectResult</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">RememberObserver</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">var</span> <span class="py">onDispose</span><span class="p">:</span> <span class="n">DisposableEffectResult</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onRemembered</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">onDispose</span> <span class="p">=</span> <span class="n">InternalDisposableEffectScope</span><span class="p">.</span><span class="n">effect</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onForgotten</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">onDispose</span><span class="o">?.</span><span class="n">dispose</span><span class="p">()</span>
</span><span class='line'>        <span class="n">onDispose</span> <span class="p">=</span> <span class="k">null</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onAbandoned</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 由于未调用 [onRemembered]，因此无需执行任何操作。</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">DisposableEffectScope</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">inline</span> <span class="k">fun</span> <span class="nf">onDispose</span><span class="p">(</span>
</span><span class='line'>        <span class="n">crossinline</span> <span class="n">onDisposeEffect</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span>
</span><span class='line'>    <span class="p">):</span> <span class="n">DisposableEffectResult</span> <span class="p">=</span> <span class="k">object</span> <span class="err">: </span><span class="nc">DisposableEffectResult</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">override</span> <span class="k">fun</span> <span class="nf">dispose</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">onDisposeEffect</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如 DisposableEffect 的内部实现所示，它会创建一个 DisposableEffectImpl 实例，并使用提供的键将其存储在内存中。
每当键发生变化时，都会创建一个新的DisposableEffectImpl 实例，以便相应地重新执行该效果。</p>

<p>DisposableEffectImpl类实现了 RememberObserver 接口，并初始创建一个 DisposableEffectResult。当可组合项进入组合阶段时，效果 lambda 会在 DisposableEffectScope 中启动。退出组合时，会自动调用 DisposableEffectResult的onDispose 函数，以确保在可组合项完全从组合中移除之前正确清理资源并防止内存泄漏或性能问题。</p>

<h2>SideEffect</h2>

<p>Jetpack Compose中的SideEffect API 用于安全地将可组合项内发生的状态变化通知给外部非 Compose 管理的对象。它确保效果在重组成功后运行，使其成为触发依赖于界面最终稳定状态的副作用的理想选择。</p>

<p>使用 SideEffect可以避免在重组阶段执行的操作可能会被丢弃的风险，如果你在未采取此保护措施的情况下直接在可组合项中编写效果，则可能会发生这种情况。因此，当你需要将 Compose 状态与外部系统（例如日志记录工具、分析工具或命令式界面组件）同步时，SideEffect 至关重要，如下例所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">rememberFirebaseAnalytics</span><span class="p">(</span><span class="n">user</span><span class="p">:</span> <span class="n">User</span><span class="p">):</span> <span class="n">FirebaseAnalytics</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">analytics</span><span class="p">:</span> <span class="n">FirebaseAnalytics</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">FirebaseAnalytics</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 每次成功组合后，使用当前用户的用户类型更新 FirebaseAnalytics，</span>
</span><span class='line'>    <span class="c1">// 确保将来的分析事件已附加此元数据</span>
</span><span class='line'>    <span class="n">SideEffect</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">analytics</span><span class="p">.</span><span class="n">setUserProperty</span><span class="p">(</span><span class="s">&quot;userType&quot;</span><span class="p">,</span> <span class="n">user</span><span class="p">.</span><span class="n">userType</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">analytics</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在，让我们探索一下 SideEffect API 的底层工作原理。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">SideEffect</span><span class="p">(</span>
</span><span class='line'>    <span class="n">effect</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">currentComposer</span><span class="p">.</span><span class="n">recordSideEffect</span><span class="p">(</span><span class="n">effect</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** 当我们应用组合变化时安排运行副作用。 */</span>
</span><span class='line'><span class="k">override</span> <span class="k">fun</span> <span class="nf">recordSideEffect</span><span class="p">(</span><span class="n">effect</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">changeListWriter</span><span class="p">.</span><span class="n">sideEffect</span><span class="p">(</span><span class="n">effect</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>乍一看，上面的代码可能看似简单，但实际上却难以完全理解，这很正常。这是因为 SideEffect API与 Compose运行时底层内部机制紧密相关，尤其是 ChangeList，它用于跟踪和管理用于更新渲染UI的状态驱动变更列表。</p>

<p>根据 Compose源代码中的内部注释，SideEffect API的表示如下：</p>

<blockquote><p>安排效果在当前合成成功完成并应用更改时运行。SideEffect 可用于将副作用应用于合成管理的、未受快照支持的对象，以便在当前合成操作失败时避免这些对象处于不一致的状态。</p>

<p>副作用将始终在合成的应用调度程序上运行，并且应用器永远不会与自身、彼此并发运行，也不会将更改应用于合成树或运行 RememberObserver 事件回调。SideEffect 始终在 RememberObserver 事件回调之后运行。</p></blockquote>

<p>因此，SideEffect API 会在每次成功重组后运行。</p>

<h2>结论</h2>

<p>在本文中，你探索了 Jetpack Compose 中常用的三个主要副作用处理API。由于声明式UI（declarative UI）的特性，状态会影响运行时行为的诸多方面，因此正确地使用副作用函数对于确保任务执行的正确性和可预测性至关重要。</p>

<p>本主题最初在<a href="https://github.com/doveletter/">Dove Letter</a>（译注：链接是<a href="https://github.com/doveletter/%EF%BC%89%E4%B8%AD%E4%BB%8B%E7%BB%8D%EF%BC%8C%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E7%A7%81%E4%BA%BA%E4%BB%A3%E7%A0%81%E5%BA%93%EF%BC%8C%E6%8F%90%E4%BE%9B%E6%9C%89%E5%85%B3">https://github.com/doveletter/%EF%BC%89%E4%B8%AD%E4%BB%8B%E7%BB%8D%EF%BC%8C%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E7%A7%81%E4%BA%BA%E4%BB%A3%E7%A0%81%E5%BA%93%EF%BC%8C%E6%8F%90%E4%BE%9B%E6%9C%89%E5%85%B3</a> Android 和 Kotlin 的每日见解，涵盖 Compose、架构、行业面试问题和实用代码技巧等主题。自上线以来的短短 37 周内，Dove Letter 已拥有超过 700 名个人订阅者和 20 名企业/终身订阅者。如果你渴望深入了解 Android、Kotlin 和 Compose，请务必查看<a href="https://medium.com/@skydoves/learn-kotlin-and-android-with-dove-letter-26265da11903">“通过 Dove Letter 学习 Kotlin 和 Android”</a>（译注：链接是<a href="https://medium.com/@skydoves/learn-kotlin-and-android-with-dove-letter-26265da11903%EF%BC%89%E3%80%82">https://medium.com/@skydoves/learn-kotlin-and-android-with-dove-letter-26265da11903%EF%BC%89%E3%80%82</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shortest Path in Graph]]></title>
    <link href="https://alexhilton.github.io/blog/2025/04/26/shortest-path-in-graph/"/>
    <updated>2025-04-26T21:28:55+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/04/26/shortest-path-in-graph</id>
    <content type="html"><![CDATA[<p>图中的路径问题，特别是最短路径问题是图论中算法的核心，今天 就来总结 一下。</p>

<p><a href="https://alexhilton.github.io/blog/2025/04/26/shortest-path-in-graph/"><img src="https://www.mbloging.com/_next/image?url=https%3A%2F%2Fcdn.sanity.io%2Fimages%2Fyynr1uml%2Fproduction%2F0b7098c6c641f29656d920a12b6a36feade61e38-1024x576.jpg%3Fw%3D1024%26auto%3Dformat&w=1920&q=75" title="auto auto" ></a></p>

<!-- more -->


<h2>BFS求无权最短径</h2>

<p>对于 无权图，用BFS就能找到两个节点之间的最短路径，这是BFS的天然优势。遍历 的时候 要注意 用「圈层式」遍历，也就是说对于 当前节点，把其相邻节点遍历 完，才能算走了一步。</p>

<h2>Dijkstra求有向无环带权图的最短路径</h2>

<p>对于有向无环图DAG，带有权重的最短路径问题可以用Dijkstra算法来求解。具体参见<a href="https://alexhilton.github.io/blog/2022/09/12/understanding-dijkstra-algorithm/">Understanding Dijkstra Algorithm</a>。</p>

<h2>Floyd</h2>

<ul>
<li><p><a href="https://www.programiz.com/dsa/floyd-warshall-algorithm">Floyd-Warshall Algorithm</a></p></li>
<li><p><a href="https://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm">Floyd–Warshall algorithm(Wikipedia)</a></p></li>
<li><a href="https://www.tutorialspoint.com/data_structures_algorithms/floyd_warshall_algorithm.htm">Floyd Warshall Algorithm</a></li>
</ul>


<h2>Bellman Ford</h2>

<p>Bellman Ford算法能处理负权重，这是与其他算法不同之处。</p>

<ul>
<li><a href="https://en.wikipedia.org/wiki/Bellman%E2%80%93Ford_algorithm">Bellman–Ford algorithm(Wikipedia)</a></li>
<li><a href="https://www.programiz.com/dsa/bellman-ford-algorithm">Bellman Ford&rsquo;s Algorithm</a></li>
<li><a href="https://brilliant.org/wiki/bellman-ford-algorithm/">Bellman-Ford Algorithm</a></li>
</ul>


<h2>SPFA</h2>

<p>Shortest Path Faster Algorithm，SPFA，基于Bellman Ford优化出来的更快速的算法。SPFA is an optimization of Bellman Ford algorithm.</p>

<ul>
<li><a href="https://cp-algorithms.com/graph/bellman_ford.html">Bellman-Ford Algorithm</a></li>
<li><a href="https://stackoverflow.com/questions/7710995/shortest-paths-faster-spfa-algorithm">Shortest Paths Faster - SPFA Algorithm?</a></li>
<li><a href="https://www.ultipa.com/document/ultipa-graph-analytics-algorithms/spfa/v5.0">Shortest Path Faster Algorithm (SPFA)</a></li>
</ul>


<h2>典型问题</h2>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/cheapest-flights-within-k-stops/description/">787. K 站中转内最便宜的航班</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/cheapest-flights-within-k-stops/solutions/3637197/xi-you-yuan-su-787-k-zhan-zhong-zhuan-ne-xik1/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/minimum-cost-to-reach-destination-in-time/description/">1928. 规定时间内到达终点的最小花费</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/minimum-cost-to-reach-destination-in-time/solutions/3661240/xi-you-yuan-su-1928-gui-ding-shi-jian-ne-omo5/">题解</a> </td>
<td style="text-align:left;"> 787的变种 </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h2>References</h2>

<ul>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&amp;mid=2247488007&amp;idx=1&amp;sn=9d0dcfdf475168d26a5a4bd6fcd3505d&amp;chksm=fd9cb918caeb300e1c8844583db5c5318a89e60d8d552747ff8c2256910d32acd9013c93058f&amp;token=754098973&amp;lang=zh_CN&amp;poc_token=HBXK_Wej6Ul4b-A49RUuWn8ZDe0YvHMH9w7EGTxA">【最短路/必背模板】涵盖所有的「存图方式」与「最短路算法（详尽注释）」</a></li>
<li><a href="https://leetcode.cn/problems/cheapest-flights-within-k-stops/solutions/955290/gong-shui-san-xie-xiang-jie-bellman-ford-dc94/">【宫水三叶】运用 Bellman Ford 求解有限制的最短路问题</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入理解Jetpack Compose中的函数的执行顺序]]></title>
    <link href="https://alexhilton.github.io/blog/2025/04/26/understanding-execution-order-in-jetpack-compose/"/>
    <updated>2025-04-26T21:21:31+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/04/26/understanding-execution-order-in-jetpack-compose</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自「Understanding Execution Order in Jetpack Compose: DisposableEffect, LaunchedEffect, and Composables」，原文链接<a href="https://proandroiddev.com/understanding-execution-order-in-jetpack-compose-disposableeffect-launchedeffect-and-composables-d2d0b75b7ec8">https://proandroiddev.com/understanding-execution-order-in-jetpack-compose-disposableeffect-launchedeffect-and-composables-d2d0b75b7ec8</a>，由Sahil Thakar发布于2025年4月13日。</p></blockquote>

<p><a href="https://alexhilton.github.io/blog/2025/04/26/understanding-execution-order-in-jetpack-compose/"><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*44_HTD27S8k-mxkIc_A9zg.png" title="auto auto" ></a></p>

<!-- more -->


<p>大家好，今天我们又来聊聊Jetpack-Compose的小话题。无论对于新手还是经验丰富的开发者来说，这都是一个小话题，但却是很关键的。我们将讨论一下Jetpack Compose中副作用和可组合项（composables）的执行顺序，特别是 DisposableEffect、LaunchedEffect 和可组合函数的执行顺序以及其生命周期交互过程。</p>

<p>我们将仔细探究 DisposableEffect 和 LaunchedEffect 在可组合项之间导航切换时是如何执行的，特别关注它们在返回之前访问过的页面时的行为。（许多经验丰富的开发者会告诉我我知道这一点，但我敢打赌，你们中的很多人并不知道）。</p>

<p>那么，让我们开始吧。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">MyComposable</span><span class="p">(</span><span class="n">cartId</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">lifecycleOwner</span> <span class="p">=</span> <span class="n">LocalLifecycleOwner</span><span class="p">.</span><span class="n">current</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// DisposableEffect observes the lifecycleOwner</span>
</span><span class='line'>    <span class="n">DisposableEffect</span><span class="p">(</span><span class="n">lifecycleOwner</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="p">.</span><span class="n">e</span><span class="p">(</span><span class="s">&quot;Init&quot;</span><span class="p">,</span> <span class="s">&quot;DisposableEffect&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">onDispose</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Log</span><span class="p">.</span><span class="n">e</span><span class="p">(</span><span class="s">&quot;Init&quot;</span><span class="p">,</span> <span class="s">&quot;DisposableEffect - onDispose&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// LaunchedEffect triggers when cartId changes</span>
</span><span class='line'>    <span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">key1</span> <span class="p">=</span> <span class="n">cartId</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="p">.</span><span class="n">e</span><span class="p">(</span><span class="s">&quot;Init&quot;</span><span class="p">,</span> <span class="s">&quot;LaunchedEffect&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Scaffold is the UI container</span>
</span><span class='line'>    <span class="n">Column</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="p">.</span><span class="n">e</span><span class="p">(</span><span class="s">&quot;Init&quot;</span><span class="p">,</span> <span class="s">&quot;Column&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="c1">// You can add your screen content here</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Output</span><span class="p">:-</span>
</span><span class='line'>
</span><span class='line'><span class="n">E</span><span class="p">/</span><span class="n">Init</span><span class="p">:</span> <span class="n">Column</span>
</span><span class='line'><span class="n">E</span><span class="p">/</span><span class="n">Init</span><span class="p">:</span> <span class="n">DisposableEffect</span>
</span><span class='line'><span class="n">E</span><span class="p">/</span><span class="n">Init</span><span class="p">:</span> <span class="n">LaunchedEffect</span>
</span></code></pre></td></tr></table></div></figure>


<h2>执行顺序迷题：为什么Column先执行？</h2>

<p>答案在于这些副作用 API（DisposableEffect、LaunchedEffect）相对于组合(Composition)的实际执行时间。</p>

<h3>1. 组合阶段优先</h3>

<ul>
<li>Jetpack Compose 首先在组合期间构建UI树。</li>
<li>此时，Column 是一个可组合函数。它会在组合阶段立即执行，以构建 UI。</li>
<li>因此：Column() 首先运行 → 打出日志 “Column”。</li>
</ul>


<h3>2. 副作用在组合期间注册，但在组合完成后执行</h3>

<ul>
<li>DisposableEffect 和 LaunchedEffect 在组合期间注册其工作，
但它们的实际执行发生在组合完成后。</li>
<li>Compose 使用内部调度程序（通过 Recomposer）在提交帧后运行副作用。</li>
</ul>


<p>因此，实际时间线如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'>组合（Composition） 开始
</span><span class='line'>   → Column<span class="o">()</span> 运行 → 打印日志 <span class="s2">&quot;Column&quot;</span>
</span><span class='line'>   → 注册 DisposableEffect 代码块
</span><span class='line'>   → 注册 LaunchedEffect 代码块
</span><span class='line'>组合 结束
</span><span class='line'>→ 副作用函数开始执行
</span><span class='line'>   → DisposableEffect 执行 → 打印日志 <span class="s2">&quot;DisposableEffect&quot;</span>
</span><span class='line'>   → LaunchedEffect 启动协程 → 打印日志 <span class="s2">&quot;LaunchedEffect&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里我们讨论了composables和副作用之间的执行顺序。
那么在 LaunchedEffect和 DisposableEffect副作用函数之间，谁又将先执行呢？</p>

<p>让我们来仔细看看。</p>

<p><strong>副作用函数的执行顺序（组合完成后）：</strong></p>

<ol>
<li>DisposableEffect → 首先运行</li>
<li>LaunchedEffect → 随后运行</li>
</ol>


<p>为啥子呢？</p>

<p>此顺序由Compose运行时定义的：</p>

<ul>
<li>DisposableEffect 是同步的，用于在组合后立即处理设置/清理。</li>
<li>LaunchedEffect 会启动一个协程，而协程的启动是异步的，计划在其他同步效果（例如 DisposableEffect）之后运行。</li>
</ul>


<p>内部机制：Jetpack Compose 维护了明确定义的效果应用顺序。</p>

<ol>
<li>DisposableEffect、SideEffect、SnapshotFlow 等副作用会在组合后立即触发（同步）。</li>
<li>然后，基于协程的效果（例如 LaunchedEffect）会被调度到下一个运行（异步，通过 Recomposer）。</li>
</ol>


<p>现在，让我们看看在可组合项之间导航切换时 DisposableEffect 和 LaunchedEffect 是如何执行的，尤其关注它们在返回之前访问过的屏幕时的行为。</p>

<p>输出结果会让你大吃一惊。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">MyApp</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">navController</span> <span class="p">=</span> <span class="n">rememberNavController</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NavHost</span><span class="p">(</span><span class="n">navController</span> <span class="p">=</span> <span class="n">navController</span><span class="p">,</span> <span class="n">startDestination</span> <span class="p">=</span> <span class="s">&quot;screenA&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">composable</span><span class="p">(</span><span class="s">&quot;screenA&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">ScreenA</span><span class="p">(</span>
</span><span class='line'>                <span class="n">cartId</span> <span class="p">=</span> <span class="s">&quot;123&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">onNavigateToB</span> <span class="p">=</span> <span class="p">{</span> <span class="n">navController</span><span class="p">.</span><span class="n">navigate</span><span class="p">(</span><span class="s">&quot;screenB&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">composable</span><span class="p">(</span><span class="s">&quot;screenB&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">ScreenB</span><span class="p">(</span>
</span><span class='line'>                <span class="n">cartId</span> <span class="p">=</span> <span class="s">&quot;456&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">onNavigateBack</span> <span class="p">=</span> <span class="p">{</span> <span class="n">navController</span><span class="p">.</span><span class="n">popBackStack</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">ScreenA</span><span class="p">(</span><span class="n">cartId</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">onNavigateToB</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">DisposableEffect</span><span class="p">(</span><span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;😇 ScreenA -&gt; DisposableEffect&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">onDispose</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">println</span><span class="p">(</span><span class="s">&quot;😇 ScreenA -&gt; DisposableEffect - onDispose&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">cartId</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;😇ScreenA -&gt; LaunchedEffect&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Column</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="n">top</span> <span class="p">=</span> <span class="m">100.</span><span class="n">dp</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Button</span><span class="p">(</span><span class="n">onClick</span> <span class="p">=</span> <span class="n">onNavigateToB</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Text</span><span class="p">(</span><span class="n">text</span> <span class="p">=</span> <span class="s">&quot;Navigate To ScreenB&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">ScreenB</span><span class="p">(</span><span class="n">cartId</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">onNavigateBack</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">lifecycleOwner</span> <span class="p">=</span> <span class="n">LocalLifecycleOwner</span><span class="p">.</span><span class="n">current</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">DisposableEffect</span><span class="p">(</span><span class="n">lifecycleOwner</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;😇 ScreenB -&gt; DisposableEffect&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">onDispose</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">println</span><span class="p">(</span><span class="s">&quot;😇 ScreenB -&gt; DisposableEffect - onDispose&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">cartId</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;😇 ScreenB -&gt; LaunchedEffect&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Column</span><span class="p">{</span>
</span><span class='line'>        <span class="n">Column</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Button</span><span class="p">(</span><span class="n">onClick</span> <span class="p">=</span> <span class="n">onNavigateBack</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Back to Screen A&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Output</span><span class="p">:-</span>
</span><span class='line'>
</span><span class='line'><span class="k">when</span> <span class="n">ScreenA</span> <span class="n">init</span>
</span><span class='line'><span class="err">😇</span> <span class="n">ScreenA</span> <span class="p">-&gt;</span> <span class="n">DisposableEffect</span>
</span><span class='line'><span class="err">😇</span> <span class="n">ScreenA</span> <span class="p">-&gt;</span> <span class="n">LaunchedEffect</span>
</span><span class='line'>
</span><span class='line'><span class="n">Navigate</span> <span class="n">To</span> <span class="n">ScreenA</span> <span class="p">-&gt;</span> <span class="n">ScreenB</span>
</span><span class='line'><span class="err">😇</span> <span class="n">ScreenB</span> <span class="p">-&gt;</span> <span class="n">DisposableEffect</span>
</span><span class='line'><span class="err">😇</span> <span class="n">ScreenB</span> <span class="p">-&gt;</span> <span class="n">LaunchedEffect</span>
</span><span class='line'><span class="err">😇</span> <span class="n">ScreenA</span> <span class="p">-&gt;</span> <span class="n">DisposableEffect</span> <span class="p">-</span> <span class="n">onDispose</span>
</span><span class='line'>
</span><span class='line'><span class="n">Navigate</span> <span class="n">back</span> <span class="n">to</span> <span class="n">ScreenB</span> <span class="p">-&gt;</span> <span class="n">ScreenA</span>
</span><span class='line'><span class="err">😇</span> <span class="n">ScreenA</span> <span class="p">-&gt;</span> <span class="n">DisposableEffect</span>
</span><span class='line'><span class="err">😇</span> <span class="n">ScreenA</span> <span class="p">-&gt;</span> <span class="n">LaunchedEffect</span>
</span><span class='line'><span class="err">😇</span> <span class="n">ScreenB</span> <span class="p">-&gt;</span> <span class="n">DisposableEffect</span> <span class="p">-</span> <span class="n">onDispose</span>
</span></code></pre></td></tr></table></div></figure>


<h2>它（Jetpack Compose导航）内部实际发生了什么？</h2>

<p>Compose Navigation在 NavHost中围绕可组合项的行为遵循以下逻辑：</p>

<ol>
<li>首先进行新目的地（此处为 ScreenA）的组合。

<ul>
<li>导航切换时，Compose会立即为新屏幕创建UI。</li>
<li>新页面（此处为 ScreenA）的 DisposableEffect 和 LaunchedEffect 会在新页面组合期间或之后立即执行。</li>
</ul>
</li>
<li>在新目的地成功组合并提交到 UI 层次结构后，会处理上一个页面的可组合项（此处为 ScreenB）。

<ul>
<li>Compose 会保持上一个可组合项（此处为 ScreenB）短暂处于活动状态，直到新可组合项（此处为 ScreenA）稳定，以确保导航顺畅。</li>
<li>只有在新的可组合项（此处为 ScreenA）完全组合后，Compose 才会清理并移除（dispose）上一个可组合项（此处为 ScreenB）。</li>
</ul>
</li>
</ol>


<p>因此，导航期间的实际生命周期流程是酱婶儿的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'>导航返回 <span class="o">(</span>ScreenB → ScreenA<span class="o">)</span>
</span><span class='line'>│
</span><span class='line'>├── 1️⃣ Compose 立即创建 ScreenA
</span><span class='line'>│      ├─ ScreenA DisposableEffect executes instantly.
</span><span class='line'>│      └─ ScreenA LaunchedEffect coroutine launched.
</span><span class='line'>│
</span><span class='line'>└── 2️⃣ 在ScreenA成功运行之后:
</span><span class='line'>       └─ ScreenB DisposableEffect onDispose runs.
</span></code></pre></td></tr></table></div></figure>


<h2>为啥Compose要酱紫 搞？</h2>

<p>Compose Navigation 会谨慎处理页面的组合，以确保丝滑（seamless）的用户体验和稳定性：</p>

<ul>
<li>它不会在确保目标页面 (ScreenA) 已组合并准备就绪之前过早地处理上一个可组合项 (ScreenB)。</li>
<li>这可以避免在导航切换过程中出现视觉故障或空白屏幕。</li>
<li>只有在确保新页面安全到位后，Compose 才会触发处理上一个屏幕的操作。</li>
</ul>


<h2>Jetpack Compose NavHost内部机制（简化版本）：</h2>

<p>在调用 popBackStack() 或 navigate() 时，Compose 的 NavHost 内部的工作方式如下：</p>

<ul>
<li>新的路由组合开始（可组合项创建）。</li>
<li>成功组合并提交帧后，不再位于 NavHost 后栈中的旧可组合项节点将被标记为待处理。</li>
<li>然后，Compose 会在下一帧中运行这些已移除可组合项的处置逻辑 (onDispose)。</li>
</ul>


<p>因此，即使你在视觉上立即导航回原点，销毁式的操作（如onDispose）也会略微延迟执行，以保证界面的整体稳定性。</p>

<p>如果你有任何疑问，请留言，我会尽快回复你。💬✨
我们很快会深入探讨Jetpack Compose，敬请期待！🚀
在此之前，祝你coding愉快！🎉👨‍💻</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jetpack Compose的性能优化建议]]></title>
    <link href="https://alexhilton.github.io/blog/2025/04/22/performance-optimization-in-jetpack-compose/"/>
    <updated>2025-04-22T22:34:25+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/04/22/performance-optimization-in-jetpack-compose</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自「Performance Optimization in Jetpack Compose」，原文链接<a href="https://carrion.dev/en/posts/performance-optimization-compose/">https://carrion.dev/en/posts/performance-optimization-compose/</a>，由Ignacio Carrión，发布于2025年4月8日。</p></blockquote>

<p><a href="https://alexhilton.github.io/blog/2025/04/22/performance-optimization-in-jetpack-compose/"><img src="https://www.itmob.cn/upload/2023/01/banner-jetpack-compose-a452c3e8f1ad489a8560a4f0a9f88e07.jpg" title="auto auto" ></a></p>

<!-- more -->


<p><strong>译者按：</strong> Jetpack Compose是一个优秀的声明式UI框架，对开发者非常友好，可以高效率的撸各种UI页面和UI元素。但它仍然并不是很成熟，有些事情还做不了，而且渲染性能也略输于原生的View方式，毕竟它比原生的View多了一层组合树和渲染树。因此，在享受声明式UI带来的便捷的同时，就需要深入地了解其内部的工作机制，和学习一些高级技巧，以提升运行时的渲染性能。另外，需要 注意虽然这篇文章是针对for Android的Jetpack Compose，但大部分也适用于Compose Multiplatform。</p>

<p>性能优化对于在Jetpack Compose应用中提供流畅的用户体验至关重要。本文探讨了关键技术和最佳实践，以确保你的可组合函数高效且性能卓越。</p>

<h2>理解组合（Composition）和重组（ReComposition）</h2>

<p><strong>译注：</strong> 组合与重组是Compose中非常重要 的概念，如果不熟悉的同学可以复习一下之前的文章<a href="https://juejin.cn/post/7379437165486112805">降Compose十八掌之『潜龙勿用』| Thinking in Compose</a>和<a href="https://juejin.cn/post/7401358349877346338">降Compose十八掌之『损则有孚』| Lifecycle</a>。</p>

<p>Compose 性能的一个基本方面是了解合成和重组的工作原理：</p>

<h3>智能重组（Smart Recomposition）</h3>

<p>Compose 使用智能重组功能，仅更新界面中需要更改的部分。了解触发重组的原因以及如何最小化重组的影响范围对于性能优化至关重要。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">ExpensiveCalculation</span><span class="p">(</span><span class="n">numbers</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Int</span><span class="p">&gt;)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 不好：每次重组都会执行昂贵的操作</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">average</span> <span class="p">=</span> <span class="n">numbers</span><span class="p">.</span><span class="n">takeIf</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">isNotEmpty</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>        <span class="o">?.</span><span class="n">average</span><span class="p">()</span>
</span><span class='line'>        <span class="o">?:</span> <span class="m">0.0</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 优点：昂贵的操作被缓存，并且仅在输入发生变化时重新计算</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">cachedAverage</span> <span class="p">=</span> <span class="n">remember</span><span class="p">(</span><span class="n">numbers</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">numbers</span><span class="p">.</span><span class="n">takeIf</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">isNotEmpty</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>            <span class="o">?.</span><span class="n">average</span><span class="p">()</span>
</span><span class='line'>            <span class="o">?:</span> <span class="m">0.0</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Column</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 每次重组时都会重新计算</span>
</span><span class='line'>        <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Current Average: ${&quot;</span><span class="p">%.</span><span class="m">2f</span><span class="s">&quot;.format(average)}&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 这将使用缓存住的值</span>
</span><span class='line'>        <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Cached Average: ${&quot;</span><span class="p">%.</span><span class="m">2f</span><span class="s">&quot;.format(cachedAverage)}&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>稳定类型（Stable types）和不可变性（Immutability）</h3>

<p>稳定的类型对于Compose的智能重组系统至关重要。当Compose能够保证其 equals() 方法与其属性一致，并且属性本身不会在不触发重组的情况下发生变化时，该类型即被视为稳定类型。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// 不好：类型不稳定 - 可变属性可能会在不通知Compose的情况下发生变化</span>
</span><span class='line'><span class="n">data</span> <span class="k">class</span> <span class="nc">UserState</span><span class="p">(</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="c1">// 可变属性可以偷偷地改变</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">age</span><span class="p">:</span> <span class="n">Int</span>      <span class="c1">// 而且更改不会触发重组</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 优点：稳定类型 - 不可变属性和显式稳定性</span>
</span><span class='line'><span class="n">@Stable</span>  <span class="c1">// 告诉Compose此类型具有可预测的相等性</span>
</span><span class='line'><span class="n">data</span> <span class="k">class</span> <span class="nc">UserState</span><span class="p">(</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span>  <span class="c1">// 不可变属性</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">age</span><span class="p">:</span> <span class="n">Int</span>      <span class="c1">// 如要更改需要创建新实例</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用稳定类型有以下几个好处：</p>

<ol>
<li>更高效的重组 - 当Compose确定数据未发生变化时，它可以跳过重组部分UI，换句话说可以减少很多不必要的重组，进而提高性能</li>
<li>可预测的行为 - 数据更改始终会触发正确的UI更新</li>
<li>线程安全（Thread safety） - 不可变数据可以安全地在协程之间共享</li>
</ol>


<p><strong>译注：</strong> 这里说的应该是可以在线程之间安全地共享，协程如果没有线程切换是不会有线程安全问题的。</p>

<h2>性能优化的关键点</h2>

<h3>1. 合理地使用 remember 和 derivedStateOf 进行状态（State）管理</h3>

<p>remember 和 derivedStateOf 函数在状态管理中起到不同的作用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">UserProfile</span><span class="p">(</span><span class="n">user</span><span class="p">:</span> <span class="n">User</span><span class="p">,</span> <span class="n">items</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Item</span><span class="p">&gt;)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 缺点：每次重新组合时都重新计算</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">filteredItems</span> <span class="p">=</span> <span class="n">items</span><span class="p">.</span><span class="n">filter</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">userId</span> <span class="p">==</span> <span class="n">user</span><span class="p">.</span><span class="n">id</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 好：使用记忆缓存计算</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">cachedItems</span> <span class="p">=</span> <span class="n">remember</span><span class="p">(</span><span class="n">items</span><span class="p">,</span> <span class="n">user</span><span class="p">.</span><span class="n">id</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">items</span><span class="p">.</span><span class="n">filter</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">userId</span> <span class="p">==</span> <span class="n">user</span><span class="p">.</span><span class="n">id</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 更好的方式：使用 derivedStateOf 进行反应式计算</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">reactiveItems</span> <span class="k">by</span> <span class="n">remember</span><span class="p">(</span><span class="n">items</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">derivedStateOf</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">items</span><span class="p">.</span><span class="n">filter</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">userId</span> <span class="p">==</span> <span class="n">user</span><span class="p">.</span><span class="n">id</span> <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 当 items 发生变化时，reactiveItems 会自动更新</span>
</span><span class='line'>    <span class="c1">// 并且仅在过滤结果发生变化时触发重组</span>
</span><span class='line'>    <span class="n">LazyColumn</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">itemsIndexed</span><span class="p">(</span>
</span><span class='line'>            <span class="n">items</span> <span class="p">=</span> <span class="n">reactiveItems</span><span class="p">,</span>
</span><span class='line'>            <span class="n">key</span> <span class="p">=</span> <span class="p">{</span> <span class="n">_</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">item</span><span class="p">:</span> <span class="n">Item</span> <span class="p">-&gt;</span> <span class="n">item</span><span class="p">.</span><span class="n">id</span> <span class="p">}</span>
</span><span class='line'>        <span class="p">)</span> <span class="p">{</span> <span class="n">_</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">item</span><span class="p">:</span> <span class="n">Item</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="n">ItemRow</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>译注：</strong> 对于状态的管理，可以复习一下之前专门讲解副作用(Side effects)的文章<a href="https://juejin.cn/post/7405158681078104127">降Compose十八掌之『龙战于野』| Side Effects</a>。</p>

<h3>2. 合理地使用CompositionLocal</h3>

<p><strong>译注：</strong> 关于CompositionLocal的使用可以看前面写过的文章<a href="https://juejin.cn/post/7434543407636267071">用Compose中的CompositionLocal来暗渡陈仓</a>，下面的示例是想要说明，应该在合理的地方访问CompositionLocal里面的数据，因数对CompositionLocal的访问地方会被触发重组（<a href="https://juejin.cn/post/7401358349877346338">之前的文章有讲过</a>重组的触发是状态使用的地方，而不是定义的地方），如果在所有的地方都 直接访问CompositionLocal，特别是嵌套较深的地方也都 直接访问，那都会触发重组，但大部分其实是不必要的。像下样示例展示的那样，在一定的级别中访问CompositionLocal，然后它的内部嵌套调用直接复用数值，可以避免过度重组。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// 不好：每个子组件都访问 CompositionLocal</span>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">DeepNestedContent</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">theme</span> <span class="p">=</span> <span class="n">LocalTheme</span><span class="p">.</span><span class="n">current</span>  <span class="c1">// 直接访问</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">strings</span> <span class="p">=</span> <span class="n">LocalStrings</span><span class="p">.</span><span class="n">current</span>  <span class="c1">// 多个 CompositionLocal 访问</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">dimensions</span> <span class="p">=</span> <span class="n">LocalDimensions</span><span class="p">.</span><span class="n">current</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Column</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Text</span><span class="p">(</span>
</span><span class='line'>            <span class="n">text</span> <span class="p">=</span> <span class="n">strings</span><span class="p">.</span><span class="n">title</span><span class="p">,</span>
</span><span class='line'>            <span class="n">style</span> <span class="p">=</span> <span class="n">theme</span><span class="p">.</span><span class="n">textStyle</span><span class="p">,</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="n">dimensions</span><span class="p">.</span><span class="n">padding</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>        <span class="c1">// 具有重复 CompositionLocal 访问的更多嵌套内容</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 好：提升 CompositionLocal的值以最小化查找</span>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">ParentContent</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 单独访问 CompositionLocal 值</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">theme</span> <span class="p">=</span> <span class="n">LocalTheme</span><span class="p">.</span><span class="n">current</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">strings</span> <span class="p">=</span> <span class="n">LocalStrings</span><span class="p">.</span><span class="n">current</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">dimensions</span> <span class="p">=</span> <span class="n">LocalDimensions</span><span class="p">.</span><span class="n">current</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">DeepNestedContent</span><span class="p">(</span>
</span><span class='line'>        <span class="n">theme</span> <span class="p">=</span> <span class="n">theme</span><span class="p">,</span>
</span><span class='line'>        <span class="n">strings</span> <span class="p">=</span> <span class="n">strings</span><span class="p">,</span>
</span><span class='line'>        <span class="n">dimensions</span> <span class="p">=</span> <span class="n">dimensions</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">DeepNestedContent</span><span class="p">(</span>
</span><span class='line'>    <span class="n">theme</span><span class="p">:</span> <span class="n">Theme</span><span class="p">,</span>
</span><span class='line'>    <span class="n">strings</span><span class="p">:</span> <span class="n">Strings</span><span class="p">,</span>
</span><span class='line'>    <span class="n">dimensions</span><span class="p">:</span> <span class="n">Dimensions</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 使用传递的参数而不是查找 CompositionLocal 值</span>
</span><span class='line'>    <span class="n">Column</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Text</span><span class="p">(</span>
</span><span class='line'>            <span class="n">text</span> <span class="p">=</span> <span class="n">strings</span><span class="p">.</span><span class="n">title</span><span class="p">,</span>
</span><span class='line'>            <span class="n">style</span> <span class="p">=</span> <span class="n">theme</span><span class="p">.</span><span class="n">textStyle</span><span class="p">,</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="n">dimensions</span><span class="p">.</span><span class="n">padding</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>        <span class="c1">// 使用传递的参数进行更多嵌套内容</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3. LazyList 优化技巧</h3>

<p>高效的列表渲染对于流畅的滚动性能至关重要。以下是针对 LazyList 组件的关键优化：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="err">&lt;</span><span class="nf">T</span> <span class="p">:</span> <span class="n">Any</span><span class="p">&gt;</span> <span class="n">OptimizedList</span><span class="p">(</span><span class="n">items</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">LazyColumn</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">itemsIndexed</span><span class="p">(</span>
</span><span class='line'>            <span class="n">items</span> <span class="p">=</span> <span class="n">items</span><span class="p">,</span>
</span><span class='line'>            <span class="c1">// 稳定的key有助于Compose在更新过程中跟踪项目</span>
</span><span class='line'>            <span class="n">key</span> <span class="p">=</span> <span class="p">{</span> <span class="n">_</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">item</span><span class="p">:</span> <span class="n">T</span> <span class="p">-&gt;</span> <span class="n">item</span><span class="p">.</span><span class="n">hashCode</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>        <span class="p">)</span> <span class="p">{</span> <span class="n">_</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">item</span><span class="p">:</span> <span class="n">T</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="c1">// 每个item的内容</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>LazyList 的关键优化点：</p>

<ol>
<li>提供稳定的键，帮助Compose在更新过程中跟踪项目</li>
<li>尽可能使用固定大小以避免重新测量</li>
<li>保持项目可组合项的轻量级</li>
<li>避免在项目内容中进行不必要的分配</li>
<li>记住要为每个项目缓存昂贵的计算</li>
</ol>


<h2>测量和监控性能</h2>

<h3>Layout Inspector和Composition Traces</h3>

<p>Android Studio 中的布局检查器是一款强大的Compose界面性能调试工具。它能够帮助你深入了解应用的视图层次结构、重组计数以及应用于每个可组合项的修饰符。</p>

<p>要将布局检查器与Compose结合使用，请执行以下操作：</p>

<ol>
<li>在调试模式下运行你的应用</li>
<li>在“正在运行的设备”窗口中，你将看到一个用于切换布局检查器的按钮</li>
<li>检查Compose层次结构：

<ul>
<li>查看组件树</li>
<li>检查重组计数</li>
<li>分析修饰符链</li>
<li>检查可组合项参数</li>
</ul>
</li>
</ol>


<p><img src="https://carrion.dev/images/kotlin/layout-inspector.png" alt="Layout Inspector" /></p>

<p>布局检查器中需要监控的关键指标：</p>

<ol>
<li>重组计数 - 数值较高表示存在潜在的优化机会</li>
<li>跳过计数 - 检查可组合项是否在应该跳过重组时跳过</li>
<li>修饰符链复杂度 - 较长的修饰符链可能会影响测量/布局性能</li>
</ol>


<h3>性能测试</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Test</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">performanceTest</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">benchmarkRule</span><span class="p">.</span><span class="n">measureRepeated</span><span class="p">(</span>
</span><span class='line'>        <span class="n">packageName</span> <span class="p">=</span> <span class="s">&quot;com.example.app&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">metrics</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span><span class="n">FrameTimingMetric</span><span class="p">()),</span>
</span><span class='line'>        <span class="n">iterations</span> <span class="p">=</span> <span class="m">5</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">composeTestRule</span><span class="p">.</span><span class="n">setContent</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">YourComposable</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>最佳实践总结</h2>

<ol>
<li>使用稳定类型(Stable types)和不可变数据结构(Immutable data structures)</li>
<li>使用remember提升高开销计算</li>
<li>在惰性列表(lazy list)中实现合适的键(key)</li>
<li>最小化重组范围</li>
<li>定期分析和测量性能</li>
</ol>


<p>遵循这些优化技巧将有助于确保你的Compose UI保持响应迅速且高效，从而为你的应用提供更好的用户体验。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compose Multiplatform支持热重载(Hot Reload)了]]></title>
    <link href="https://alexhilton.github.io/blog/2025/04/12/compose-hot-reload/"/>
    <updated>2025-04-12T17:11:47+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/04/12/compose-hot-reload</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自Compose Hot Reload is Now Available，原文链接<a href="https://medium.com/@wisemuji/compose-hot-reload-is-now-available-3a9aee58b0fe">Compose Hot Reload is Now Available</a>，由<a href="https://medium.com/@wisemuji">Suhyeon Kim</a>，发布于2025年3月19日。</p></blockquote>

<p><a href="https://alexhilton.github.io/blog/2025/04/12/compose-hot-reload/"><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*FMBFWn5vJOuaM41zKE6aTg.jpeg" title="auto auto" ></a></p>

<!-- more -->


<p><strong>译注：</strong>  需要注意的是Google通过Android Studio(after Giraffe)里面的<a href="https://developer.android.com/develop/ui/compose/tooling/iterative-development">Live Edit特性</a>提供了对Android上面的Jetpack Compose的实时更新支持。但它仅支持Jetpack Compose (for Adnroid)，并不支持CMP，也即不支持JetBrains的Compose。也正因为如此JetBrains才会开发面向CMP的Hot Reload。</p>

<p>在Compose UI开发过程中，你是否经常需要构建运行？Compose 热重载现已在Maven Central中推出，可为Compose多平台（桌面）应用中的UI代码提供实时更新。我们无需重启应用即可立即查看UI代码的更改。</p>

<p>让我们来一探究竟！</p>

<h2>热重载(Hot Reload)是什么鬼？</h2>

<p>许多声明式UI框架都提供了类似概念，热重载，即可以在开发过程中提供对UI更改的近乎即时的反馈（尽管它们的名称不同！）。</p>

<p>例如隔壁的两家：</p>

<ul>
<li>Flutter热加载：<a href="https://docs.flutter.dev/tools/hot-reload">https://docs.flutter.dev/tools/hot-reload</a></li>
<li>React Native快速刷新：<a href="https://reactnative.dev/docs/fast-refresh">https://reactnative.dev/docs/fast-refresh</a></li>
</ul>


<p>热重载允许开发者实时查看代码更改，无需重启应用或重新编译整个项目。在大多数情况下，热重载会保留应用的状态，因此开发者可以继续与应用交互，而不会丢失进度或上下文。这可以帮助开发者快速演示代码更改对UI的影响，从而提高工作效率，而无需等待漫长的构建。</p>

<h2>Compose的热重载</h2>

<p>看一下官方的介绍<a href="https://github.com/JetBrains/compose-hot-reload">https://github.com/JetBrains/compose-hot-reload</a>：</p>

<blockquote><p>在Compose多平台应用中更改你的UI代码，并实时查看结果。
无需重启应用。</p></blockquote>

<p>目前，Compose Hot Reload 适用于针对桌面 JVM 的多平台项目（未来是否有可能扩展？我不确定。:D）。Compose Hot Reload 的最新版本是 v1.0.0-alpha02，于昨天（2025 年 3 月 17 日）发布。现在，开发者可以在Compose多平台应用中查看其UI代码的更改，而无需重启应用。这意味着开发者可以立即预览更改，而无需缓慢的构建和重启。</p>

<p><strong>译注：</strong> 现在（2025年4月9日）最新版本是 v1.0.0-alpha04，主要是Bugfix，目前开发中的版本是 v1.0.0-alpha05 。</p>

<h2>如何上手</h2>

<p>要开始使用Compose Hot Reload，请查看<a href="https://github.com/JetBrains/compose-hot-reload">Compose Hot Reload</a>的 GitHub 代码库。</p>

<p><strong>注意：</strong> 以下内容基于 v1.0.0-alpha02 编写。</p>

<h3>依赖要求</h3>

<ul>
<li>一个以桌面为目标的Compose Multiplatform 项目（参见<a href="https://github.com/JetBrains/compose-hot-reload#faq">其FAQ</a>）</li>
<li>Kotlin 2.1.20-Beta2 或更高版本</li>
</ul>


<p>对于 Android 应用，有一个小的解决方法：
首先，你需要从Jetpack Compose插件切换到Compose Multiplatform 插件，
然后添加一个单独的 Gradle 模块并配置桌面目标。</p>

<h3>将 Gradle 插件应用到你的项目中</h3>

<p>将 org.jetbrains.compose.hot-reload Gradle 插件添加到你的构建脚本：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">plugins</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">kotlin</span><span class="p">(</span><span class="s">&quot;multiplatform&quot;</span><span class="p">)</span> <span class="n">version</span> <span class="s">&quot;2.1.20-RC&quot;</span> <span class="c1">// &lt;- Use Kotlin 2.1.20-RC or higher!</span>
</span><span class='line'>    <span class="n">kotlin</span><span class="p">(</span><span class="s">&quot;plugin.compose&quot;</span><span class="p">)</span> <span class="n">version</span> <span class="s">&quot;2.1.20-RC&quot;</span> <span class="c1">// &lt;- Use Compose Compiler Plugin 2.1.20-RC or higher!</span>
</span><span class='line'>    <span class="n">id</span><span class="p">(</span><span class="s">&quot;org.jetbrains.compose&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">id</span><span class="p">(</span><span class="s">&quot;org.jetbrains.compose.hot-reload&quot;</span><span class="p">)</span> <span class="n">version</span> <span class="s">&quot;1.0.0-alpha02&quot;</span> <span class="c1">// &lt;- add this additionally</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>启用“OptimizeNonSkippingGroups”：</h3>

<p>将以下内容添加到你的 build.gradle.kts ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">import</span> <span class="nn">org.jetbrains.kotlin.compose.compiler.gradle.ComposeFeatureFlag</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="n">composeCompiler</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">featureFlags</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">ComposeFeatureFlag</span><span class="p">.</span><span class="n">OptimizeNonSkippingGroups</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>为UI热重载提供入口点</h3>

<p>在项目的桌面源代码集中，使用 DevelopmentEntryPoint 包装窗口内容。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">import</span> <span class="nn">org.jetbrains.compose.reload.DevelopmentEntryPoint</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">singleWindowApplication</span><span class="p">(...)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">DevelopmentEntryPoint</span> <span class="p">{</span> <span class="c1">// add this line</span>
</span><span class='line'>            <span class="n">App</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这就是我们需要折腾的全部内容。现在让我们看看它是如何工作的。</p>

<h2>Demo演示</h2>

<p>要了解Compose 热重载的实际效果，我们来看看我的示例项目<a href="https://github.com/wisemuji/compose-would-you-rather-game">“Would You Rather Game”</a>。这个项目是一个简单的 Compose 多平台桌面应用，用户可以在其中回答有趣的“Would You Rather”问题。Compose 热重载插件最近已实现。</p>

<p>你可以参考 Compose 热重载的setup提交：<a href="https://github.com/wisemuji/compose-would-you-rather-game/commit/937375cea9010733ee751dc2d464a0df21318cee">setup提交</a>。</p>

<p>如果你在项目上运行desktopRun，你会注意到桌面应用程序旁边会出现一个小的Compose图标。</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1288/format:webp/1*TXn4jUzxwcSh5IfqRqFNkA.png" alt="HotReload Icon" /></p>

<p>这将触发 Compose Hot Reload Tooling 模式，如下所示：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*37gLudPijGvh3A-rKdK_kw.png" alt="HotReload Demo" /></p>

<h3>UI更改示例</h3>

<p>假设我们想要更改<a href="https://github.com/wisemuji/compose-would-you-rather-game/blob/4e9bfc7172c7145f95190fd383169bbcdc25856f/composeApp/src/commonMain/kotlin/ui/game/GameScreen.kt#L226">GameScreen.kt</a>中的动画。</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*b4xJXpWH9oA5YohC1zsWng.gif" alt="Full Demo" /></p>

<p>看到没有！一旦我们保存文件，更改就会立即显示在正在运行的应用程序中。无需重启应用！</p>

<h2>热重载当前支持的场景</h2>

<p>目前，几乎所有代码更改都支持热重载（除了从类中删除超类型）。</p>

<p><a href="https://hashnode.com/@sellmair">Sebastian Sellmair 的视频和博客文章</a>通过多个演示展示了这些功能，并详细解释了重载的底层工作原理。</p>

<h2>局限性</h2>

<p>由于它仅支持基于 JVM 的桌面应用，因此目前尚不支持 Android 和其他平台。
此外，构建性能方面可能存在一些问题。在我的本地环境中，更改大约需要 3 到 5 秒，感觉比其他声明式UI框架中的热重载慢不少。估计它会在后面得到改善。</p>

<p>由于这是一个 Alpha 版本，因此无法保证稳定性。开发者应该预料到可能会出现一些潜在的错误和迁移挑战，正如 JetBrains 团队所指出的：“Alpha 版本意味着使用风险自负，迁移问题也需谨慎。我们打算将这个想法产品化，但尚未最终成型。” 由于该功能仍在积极开发中，因此我们应该在未来的版本中持续关注更新。</p>

<h2>提供反馈</h2>

<p>如果你遇到任何问题或有改进建议，你可以通过<a href="https://slack-chats.kotlinlang.org/t/27038699/with-compose-hot-reload-now-being-available-on-maven-central"> Kotlinlang Slack - Compose Hot Reload </a>分享你的想法。</p>

<blockquote><p>尤其欢迎提：</p>

<ul>
<li>设置时遇到的问题</li>
<li>重新加载特定代码段时遇到的问题</li>
<li>关于如何改进/功能请求的想法</li>
</ul>


<p>目前不太感兴趣的内容：</p>

<ul>
<li>构建性能：目前，“Gradle 重编译器”的速度将与你的项目速度一样快。强烈建议
启用 Gradles 配置缓存，并保持项目非常干净。其他“重编译器”也会有所帮助！（IntelliJ、Amper 等）</li>
</ul>
</blockquote>

<h2>总结</h2>

<p>我相信 Compose 中的 Hot Reload 是开发 Compose UI的一大变革。
它可以让开发人员在无需重启应用的情况下看到更改，从而加快UI开发速度，但它仍处于实验阶段。目前，它最适合个人或早期项目，你可以使用 alpha 版本进行开发。在你自己的 Compose Multiplatform 项目中试用它，体验即时UI反馈的好处！</p>

<p>我迫不及待地想看到即将到来的更新！XD</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://github.com/JetBrains/compose-hot-reload">https://github.com/JetBrains/compose-hot-reload</a></li>
<li><a href="https://blog.sellmair.io/say-hello-to-compose-hot-reload-firework">https://blog.sellmair.io/say-hello-to-compose-hot-reload-firework</a></li>
<li><a href="https://www.youtube.com/watch?v=8Z-Vuo3wTd0">Firework: Introducing Compose Hot Reload</a></li>
<li><a href="https://www.youtube.com/watch?v=I_FMnPaEBEA">How ‘Hot Reload’ is implemented for Compose</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[实战：探索Jetpack Compose中的SearchBar]]></title>
    <link href="https://alexhilton.github.io/blog/2025/04/09/searchbar-in-jetpack-compose/"/>
    <updated>2025-04-09T22:40:46+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/04/09/searchbar-in-jetpack-compose</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自Exploring Jetpack Compose: SearchBar，原文链接：<a href="https://joebirch.co/android/exploring-the-searchbar-composable/">https://joebirch.co/android/exploring-the-searchbar-composable/</a>，作者是Joe Birch。</p></blockquote>

<p>在应用内搜索内容是一项常见功能，事实上，你可以在设备上的大多数应用程序中发现此功能。在 Android 上，我们看到的此功能的常见 UI 组件是浮动搜索栏，放置在屏幕的显眼位置。在某些情况下，这还会向用户提供搜索建议，以简化搜索过程。Jetpack Compose Material3 软件包提供了对提供此功能的 SearchBar 可组合项的访问，在这篇博文中，我们将学习如何在我们自己的应用中使用它。</p>

<p><a href="https://alexhilton.github.io/blog/2025/04/09/searchbar-in-jetpack-compose/"><img src="https://joebirch.co/wp-content/uploads/2025/03/Group.png" title="auto auto" ></a></p>

<!-- more -->


<p>SearchBar 可组合项允许我们显示一个浮动的搜索组件，该组件展开后会显示可选的推荐。如上所述，这是我们在许多应用中看到的常见模式，此可组合项提供了开箱即用的解决方案。SearchBar 可组合项提供了足够的自定义功能来控制组件的外观和感觉，同时使用基于插槽(slot)的方法让我们提供输入字段以供使用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">SearchBar</span><span class="p">(</span>
</span><span class='line'>    <span class="n">inputField</span><span class="p">:</span> <span class="n">@Composable</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span>
</span><span class='line'>    <span class="n">expanded</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">,</span>
</span><span class='line'>    <span class="n">onExpandedChange</span><span class="p">:</span> <span class="p">(</span><span class="n">Boolean</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="n">shape</span><span class="p">:</span> <span class="n">Shape</span> <span class="p">=</span> <span class="n">SearchBarDefaults</span><span class="p">.</span><span class="n">inputFieldShape</span><span class="p">,</span>
</span><span class='line'>    <span class="n">colors</span><span class="p">:</span> <span class="n">SearchBarColors</span> <span class="p">=</span> <span class="n">SearchBarDefaults</span><span class="p">.</span><span class="n">colors</span><span class="p">(),</span>
</span><span class='line'>    <span class="n">tonalElevation</span><span class="p">:</span> <span class="n">Dp</span> <span class="p">=</span> <span class="n">SearchBarDefaults</span><span class="p">.</span><span class="n">TonalElevation</span><span class="p">,</span>
</span><span class='line'>    <span class="n">shadowElevation</span><span class="p">:</span> <span class="n">Dp</span> <span class="p">=</span> <span class="n">SearchBarDefaults</span><span class="p">.</span><span class="n">ShadowElevation</span><span class="p">,</span>
</span><span class='line'>    <span class="n">windowInsets</span><span class="p">:</span> <span class="n">WindowInsets</span> <span class="p">=</span> <span class="n">SearchBarDefaults</span><span class="p">.</span><span class="n">windowInsets</span><span class="p">,</span>
</span><span class='line'>    <span class="n">content</span><span class="p">:</span> <span class="n">@Composable</span> <span class="n">ColumnScope</span><span class="p">.()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>该组件为我们处理了大部分内部工作——其中两个关键部分需要我们自己提供。</p>

<ul>
<li>inputField – 这是表示内容输入的搜索字段的输入可组合项</li>
<li>content – 这是搜索栏展开时用于显示推荐的内容区域</li>
</ul>


<p>除了这些字段之外，还有一组其他属性用于确定 SearchBar 的当前状态。例如，当搜索栏处于展开状态时，可组合项的内容将显示在输入字段下方。为了能够管理这一点，我们需要为可组合项提供一些参数，用于管理此状态。首先，expanded 参数用于描述 SearchBar 是否处于展开状态（这将决定是否显示内容区域），以及 onExpandedChange 参数，用于为实现提供展开状态的更新值（然后可用于反映我们自己的状态实现）。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">var</span> <span class="py">expanded</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="k">false</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">SearchBar</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxWidth</span><span class="p">(),</span>
</span><span class='line'>    <span class="n">expanded</span> <span class="p">=</span> <span class="n">expanded</span><span class="p">,</span>
</span><span class='line'>    <span class="n">onExpandedChange</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">expanded</span> <span class="p">=</span> <span class="n">it</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>除了管理这种展开状态外，我们还需要提供用于 SearchBar 输入区域的 inputField。除了遵循可组合项的基于插槽的方法之外，这还允许可组合项遵循状态提升的概念，使我们能够完全管理 SearchBar 输入字段的状态概念。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">var</span> <span class="py">expanded</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="k">false</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">var</span> <span class="py">query</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">&lt;</span><span class="n">String</span><span class="p">?&gt;(</span><span class="k">null</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">SearchBar</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxWidth</span><span class="p">(),</span>
</span><span class='line'>    <span class="n">expanded</span> <span class="p">=</span> <span class="n">expanded</span><span class="p">,</span>
</span><span class='line'>    <span class="n">onExpandedChange</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">expanded</span> <span class="p">=</span> <span class="n">it</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="n">inputField</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// ...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>为了简化此操作，SearchBarDefaults 类为我们提供了对 InputField 可组合项的访问 - 这使我们能够访问专门为 SearchBar 实现的可组合项。不需要使用此特定可组合项，但它是专门为基于搜索的输入字段提供的便利可组合项。此可组合项采用一些关键参数，用于将其配置为在 SearchBar 中使用：</p>

<ul>
<li>expanded 和 onExpandedChange - 用于管理字段的展开状态</li>
<li>query 和 onQueryChange - 用于管理字段中显示的查询的状态</li>
</ul>


<p>除了这些核心属性外，你还会注意到对标准字段参数（如占位符、leadingIcon 和 trailingIcon）的支持。除了用于提供信息之外，我们还可以在下面的示例中看到我如何使用 trailingIcon 允许 SearchBar 在单击取消按钮时恢复到折叠状态。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">SearchBarDefaults</span><span class="p">.</span><span class="n">InputField</span><span class="p">(</span>
</span><span class='line'>    <span class="n">onSearch</span> <span class="p">=</span> <span class="p">{</span> <span class="n">expanded</span> <span class="p">=</span> <span class="k">false</span> <span class="p">},</span>
</span><span class='line'>    <span class="n">expanded</span> <span class="p">=</span> <span class="n">expanded</span><span class="p">,</span>
</span><span class='line'>    <span class="n">onExpandedChange</span> <span class="p">=</span> <span class="p">{</span> <span class="n">expanded</span> <span class="p">=</span> <span class="n">it</span> <span class="p">},</span>
</span><span class='line'>    <span class="n">placeholder</span> <span class="p">=</span> <span class="p">{</span> <span class="n">Text</span><span class="p">(</span><span class="s">&quot;What are you looking for?&quot;</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'>    <span class="n">leadingIcon</span> <span class="p">=</span> <span class="p">{</span> <span class="n">Icon</span><span class="p">(</span><span class="n">Icons</span><span class="p">.</span><span class="n">Default</span><span class="p">.</span><span class="n">Search</span><span class="p">,</span> <span class="n">contentDescription</span> <span class="p">=</span> <span class="k">null</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'>    <span class="n">trailingIcon</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">expanded</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">IconButton</span><span class="p">(</span><span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">expanded</span> <span class="p">=</span> <span class="k">false</span>
</span><span class='line'>            <span class="p">})</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">Icon</span><span class="p">(</span><span class="n">Icons</span><span class="p">.</span><span class="n">Default</span><span class="p">.</span><span class="n">Close</span><span class="p">,</span> <span class="n">contentDescription</span> <span class="p">=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="n">query</span> <span class="p">=</span> <span class="n">query</span> <span class="o">?:</span> <span class="s">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">onQueryChange</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">query</span> <span class="p">=</span> <span class="n">it</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后可以将此 InputField 可组合项的实现插入到 SearchBar 可组合项的 inputField 参数中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">var</span> <span class="py">expanded</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="k">false</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">var</span> <span class="py">query</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">&lt;</span><span class="n">String</span><span class="p">?&gt;(</span><span class="k">null</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">SearchBar</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxWidth</span><span class="p">(),</span>
</span><span class='line'>    <span class="n">expanded</span> <span class="p">=</span> <span class="n">expanded</span><span class="p">,</span>
</span><span class='line'>    <span class="n">onExpandedChange</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">expanded</span> <span class="p">=</span> <span class="n">it</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="n">inputField</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">SearchBarDefaults</span><span class="p">.</span><span class="n">InputField</span><span class="p">(</span>
</span><span class='line'>            <span class="n">onSearch</span> <span class="p">=</span> <span class="p">{</span> <span class="n">expanded</span> <span class="p">=</span> <span class="k">false</span> <span class="p">},</span>
</span><span class='line'>            <span class="n">expanded</span> <span class="p">=</span> <span class="n">expanded</span><span class="p">,</span>
</span><span class='line'>            <span class="n">onExpandedChange</span> <span class="p">=</span> <span class="p">{</span> <span class="n">expanded</span> <span class="p">=</span> <span class="n">it</span> <span class="p">},</span>
</span><span class='line'>            <span class="n">placeholder</span> <span class="p">=</span> <span class="p">{</span> <span class="n">Text</span><span class="p">(</span><span class="s">&quot;What are you looking for?&quot;</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'>            <span class="n">leadingIcon</span> <span class="p">=</span> <span class="p">{</span> <span class="n">Icon</span><span class="p">(</span><span class="n">Icons</span><span class="p">.</span><span class="n">Default</span><span class="p">.</span><span class="n">Search</span><span class="p">,</span> <span class="n">contentDescription</span> <span class="p">=</span> <span class="k">null</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'>            <span class="n">trailingIcon</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">expanded</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">IconButton</span><span class="p">(</span><span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">expanded</span> <span class="p">=</span> <span class="k">false</span>
</span><span class='line'>                    <span class="p">})</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">Icon</span><span class="p">(</span><span class="n">Icons</span><span class="p">.</span><span class="n">Default</span><span class="p">.</span><span class="n">Close</span><span class="p">,</span> <span class="n">contentDescription</span> <span class="p">=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="n">query</span> <span class="p">=</span> <span class="n">query</span> <span class="o">?:</span> <span class="s">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">onQueryChange</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">query</span> <span class="p">=</span> <span class="n">it</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>此时，我们将能够组合 SearchBar 并看到在我们的 UI 中显示的浮动组件。</p>

<p><img src="https://joebirch.co/wp-content/uploads/2025/03/sea.png" alt="SearchBar" /></p>

<p>此时我们剩下要实现的就是 SearchBar 的内容，这是 SearchBar 处于展开状态时显示的内容。此参数利用了 ColumnScope，因此此处提供的任何可组合项都将垂直堆叠。此内容区域的预期形式是用户可以选择的推荐列表，因此我们将继续编写几个 ListItem 可组合项，每个可组合项都用于向用户显示搜索推荐。当点击其中任何一项时，查询将更新为选定值，并且 SearchBar 的展开状态将重置。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">var</span> <span class="py">expanded</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="k">false</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">var</span> <span class="py">query</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">&lt;</span><span class="n">String</span><span class="p">?&gt;(</span><span class="k">null</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">SearchBar</span><span class="p">(</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">listOf</span><span class="p">(</span><span class="s">&quot;Result 1&quot;</span><span class="p">,</span> <span class="s">&quot;Result 2&quot;</span><span class="p">,</span> <span class="s">&quot;Result 3&quot;</span><span class="p">,</span> <span class="s">&quot;Result 4&quot;</span><span class="p">).</span><span class="n">forEach</span> <span class="p">{</span> <span class="n">text</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="n">ListItem</span><span class="p">(</span>
</span><span class='line'>            <span class="n">headlineContent</span> <span class="p">=</span> <span class="p">{</span> <span class="n">Text</span><span class="p">(</span><span class="n">text</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'>            <span class="n">colors</span> <span class="p">=</span> <span class="n">ListItemDefaults</span><span class="p">.</span><span class="n">colors</span><span class="p">(</span><span class="n">containerColor</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Transparent</span><span class="p">),</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">clickable</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">query</span> <span class="p">=</span> <span class="n">text</span>
</span><span class='line'>                <span class="n">expanded</span> <span class="p">=</span> <span class="k">false</span>
</span><span class='line'>            <span class="p">}.</span><span class="n">fillMaxWidth</span><span class="p">().</span><span class="n">padding</span><span class="p">(</span><span class="n">horizontal</span> <span class="p">=</span> <span class="m">16.</span><span class="n">dp</span><span class="p">,</span> <span class="n">vertical</span> <span class="p">=</span> <span class="m">8.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>有了此功能，我们现在就能够看到在浮动搜索栏下方显示的推荐。</p>

<p><img src="https://joebirch.co/wp-content/uploads/2025/03/recs.png" alt="Recommendations" /></p>

<p>有了上述内容，我们就可以实现一个浮动搜索栏，向用户显示搜索建议。使用 Material3 SearchBar 可组合项，实现在这两种不同状态之间转换的可组合项非常容易。也许你已经在应用中使用了 SearchBar，或者一直在寻找类似的功能，但无论如何，我期待看到更多应用通过 Jetpack Compose 中更广泛的组件支持来节省时间！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[实战：在Compose中优雅地实现提示]]></title>
    <link href="https://alexhilton.github.io/blog/2025/03/28/hints-in-compose/"/>
    <updated>2025-03-28T22:05:00+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/03/28/hints-in-compose</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自<a href="https://proandroiddev.com/hints-in-compose-10b6470acc58">Hints in Compose</a>，原文由<a href="https://medium.com/@vitoksmile">Viktor Mykhailiv</a>发布于2025年2月13日，文章内容巨详细，TL;DR;。</p></blockquote>

<p><a href="https://alexhilton.github.io/blog/2025/03/28/hints-in-compose/"><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*0jBirMqQV-aXKXw5gekEkQ.jpeg" title="auto auto" ></a></p>

<!-- more -->


<p>有时我们的应用需要突出显示某些 UI 组件，例如在首次登录（首次使用）时，或者当我们添加新内容（“新功能”）时。</p>

<p>在本文中，我将指导如何构建自定义解决方案来显示提示/工具提示，指向 Compose（Compose Multiplatform 和 Jetpack Compose）中的特定 UI 元素。</p>

<h2>布局层次</h2>

<p>要突出显示 UI 元素，首先我们应该了解“提示”(Hints)的主要概念。
假设我们有一个带有 TopBar、BottomNavigation 和主要操作按钮的应用程序。我们想要突出显示 TopBar 的操作、主要按钮和 BottomNavigation 中的一个项目。</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*7K0zoXqZM0ajYYZARn6I5w.png" alt="Layout hierarchy" /></p>

<p>对于我们的“提示”，我们需要绘制一个暗淡的背景（也是为了拦截触摸事件），计算突出显示的 UI 元素的位置，剪掉（屏蔽）我们的元素形状以免变暗，最后绘制一个提示（例如带有背景的文本）。</p>

<h2>1. 暗淡的背景</h2>

<p>要在所有内容之上绘制一个暗淡的背景作为覆盖或弹出窗口，我们可以：</p>

<h3>a. 使用自定义可组合项包装我们应用（根组件）的所有内容（例如带有 Modifier.background 的 Box）</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">AppContent</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">HintOverlay</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">MaterialTheme</span> <span class="p">{</span>
</span><span class='line'>         <span class="n">Scaffold</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 我的应用内容</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>b. 使用对话框</h3>

<p>通过使用对话框，我们可以在所有内容之上显示一个覆盖层（例如，在 Android 上，对话框显示在自己的窗口中）。
使用对话框时，Compose Multiplatform 中的 scrimColor 会出现问题。我们无法从 Compose 通用目标配置 scrimColor ，但每个目标（Android 除外）都为 scrimColor 提供了一个实际值。作为一种可能的解决方案，我们可以创建一个例外类来提供对话框属性并为每个目标提供实际实现。</p>

<h3>c. 使用 Popup</h3>

<p>Popup 在这里看起来更好，因为它默认不绘制 scrimColor，并且覆盖层显示在所有内容之上。</p>

<p>我会采用第三种方法，不强制手动使用 HintOverlay。</p>

<p>我还想为覆盖层背景添加 Brush 支持，而不仅仅是 Color 。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">LocalHintOverlayColor</span> <span class="p">=</span> <span class="n">staticCompositionLocalOf</span><span class="p">&lt;</span><span class="n">Color</span><span class="p">&gt;</span> <span class="p">{</span> <span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">x44000000</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="py">LocalHintOverlayBrush</span> <span class="p">=</span> <span class="n">staticCompositionLocalOf</span><span class="p">&lt;</span><span class="n">Brush</span><span class="p">?&gt;</span> <span class="p">{</span> <span class="k">null</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">HintOverlay</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Popup</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                <span class="p">.</span><span class="n">fillMaxSize</span><span class="p">()</span>
</span><span class='line'>                <span class="p">.</span><span class="n">overlayBackground</span><span class="p">()</span>
</span><span class='line'>        <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Text</span><span class="p">(</span>
</span><span class='line'>                <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">align</span><span class="p">(</span><span class="n">Alignment</span><span class="p">.</span><span class="n">Center</span><span class="p">),</span>
</span><span class='line'>                <span class="n">text</span> <span class="p">=</span> <span class="s">&quot;Draw hints here&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">White</span><span class="p">,</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 从 [LocalHintOverlayBrush] 或 [LocalHintOverlayColor] 设置 `background`。</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">Modifier</span><span class="p">.</span><span class="n">overlayBackground</span><span class="p">():</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">composed</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">LocalHintOverlayBrush</span><span class="p">.</span><span class="n">current</span><span class="o">?.</span><span class="n">let</span> <span class="p">{</span> <span class="n">background</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>        <span class="o">?:</span> <span class="n">background</span><span class="p">(</span><span class="n">LocalHintOverlayColor</span><span class="p">.</span><span class="n">current</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我可以使用CompositionLocalProvider 设置 Brush 来覆盖覆盖的背景。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">CompositionLocalProvider</span><span class="p">(</span>
</span><span class='line'>    <span class="n">LocalHintOverlayBrush</span> <span class="n">provides</span> <span class="n">Brush</span><span class="p">.</span><span class="n">linearGradient</span><span class="p">(</span>
</span><span class='line'>        <span class="n">listOf</span><span class="p">(</span>
</span><span class='line'>            <span class="n">Color</span><span class="p">.</span><span class="n">Red</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="n">alpha</span> <span class="p">=</span> <span class="m">0.5f</span><span class="p">),</span>
</span><span class='line'>            <span class="n">Color</span><span class="p">.</span><span class="n">Blue</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="n">alpha</span> <span class="p">=</span> <span class="m">0.5f</span><span class="p">),</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">),</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">HintOverlay</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*KrHuSNZT0zE-Eddz1GBA2A.png" alt="Dimmed background" /></p>

<h2>2. 计算锚点坐标</h2>

<p>要获取 Compose 中 UI 元素的坐标，我们可以使用OnGloballyPositionedModifier ，当内容的全局位置可能发生变化时，会使用布局的最终​​ LayoutCoordinates 调用该方法。</p>

<p>使用示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">Column</span><span class="p">(</span>
</span><span class='line'>    <span class="n">Modifier</span><span class="p">.</span><span class="n">onGloballyPositioned</span> <span class="p">{</span> <span class="n">coordinates</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="c1">// 这将是Column的大小。</span>
</span><span class='line'>        <span class="n">coordinates</span><span class="p">.</span><span class="n">size</span>
</span><span class='line'>        <span class="c1">// Column相对于应用程序窗口的位置。</span>
</span><span class='line'>        <span class="n">coordinates</span><span class="p">.</span><span class="n">positionInWindow</span><span class="p">()</span>
</span><span class='line'>        <span class="c1">// Column相对于 Compose 根的位置。</span>
</span><span class='line'>        <span class="n">coordinates</span><span class="p">.</span><span class="n">positionInRoot</span><span class="p">()</span>
</span><span class='line'>        <span class="c1">// 这些将是提供给布局的对齐线（此处的Column为空）。</span>
</span><span class='line'>        <span class="n">coordinates</span><span class="p">.</span><span class="n">providedAlignmentLines</span>
</span><span class='line'>        <span class="c1">// 这将是与 Column 的父级相对应的 LayoutCoordinates 实例。</span>
</span><span class='line'>        <span class="n">coordinates</span><span class="p">.</span><span class="n">parentLayoutCoordinates</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Box</span><span class="p">(</span><span class="n">Modifier</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">20.</span><span class="n">dp</span><span class="p">).</span><span class="n">background</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">Green</span><span class="p">))</span>
</span><span class='line'>    <span class="n">Box</span><span class="p">(</span><span class="n">Modifier</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">20.</span><span class="n">dp</span><span class="p">).</span><span class="n">background</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">Blue</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于我们的提示，我们需要创建一个状态来保存锚点的坐标和大小，并引入一个修改器来更新状态：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Stable</span>
</span><span class='line'><span class="k">class</span> <span class="nc">HintAnchorState</span> <span class="k">internal</span> <span class="n">constructor</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">internal</span> <span class="k">var</span> <span class="py">size</span><span class="p">:</span> <span class="n">IntSize</span> <span class="k">by</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="n">IntSize</span><span class="p">.</span><span class="n">Zero</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">internal</span> <span class="k">var</span> <span class="py">offset</span><span class="p">:</span> <span class="n">Offset</span> <span class="k">by</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="n">Offset</span><span class="p">.</span><span class="n">Zero</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">rememberHintAnchorState</span><span class="p">():</span> <span class="n">HintAnchorState</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">HintAnchorState</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">Modifier</span><span class="p">.</span><span class="n">hintAnchor</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">HintAnchorState</span><span class="p">):</span> <span class="n">Modifier</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">onGloballyPositioned</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">state</span><span class="p">.</span><span class="n">size</span> <span class="p">=</span> <span class="n">it</span><span class="p">.</span><span class="n">size</span>
</span><span class='line'>        <span class="n">state</span><span class="p">.</span><span class="n">offset</span> <span class="p">=</span> <span class="n">it</span><span class="p">.</span><span class="n">positionInWindow</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>因此，我们只需订阅所需 UI 元素的大小和坐标变化即可更新锚点的状态。
现在我们需要将此 hintAnchor 修饰符应用于我们的内容：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">topAppBarActionHintAnchor</span> <span class="p">=</span> <span class="n">rememberHintAnchorState</span><span class="p">()</span>
</span><span class='line'><span class="k">val</span> <span class="py">actionHintAnchor</span> <span class="p">=</span> <span class="n">rememberHintAnchorState</span><span class="p">()</span>
</span><span class='line'><span class="k">val</span> <span class="py">bottomNavigationHintAnchor</span> <span class="p">=</span> <span class="n">rememberHintAnchorState</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">IconButton</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>        <span class="p">.</span><span class="n">hintAnchor</span><span class="p">(</span><span class="n">topAppBarActionHintAnchor</span><span class="p">),</span>
</span><span class='line'>    <span class="n">onClick</span> <span class="p">=</span> <span class="p">{},</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">Button</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>        <span class="p">.</span><span class="n">hintAnchor</span><span class="p">(</span><span class="n">actionHintAnchor</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">4.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>    <span class="n">onClick</span> <span class="p">=</span> <span class="p">{},</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Action&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BottomNavigationItem</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>        <span class="p">.</span><span class="n">hintAnchor</span><span class="p">(</span><span class="n">topAppBarActionHintAnchor</span><span class="p">),</span>
</span><span class='line'>    <span class="c1">//... 传入其他需要的参数</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><strong>注意：</strong> 修饰符顺序在 Compose 中始终很重要，我们在 hintAnchor 后设置 4.dp，以便在此按钮周围留出额外空间（锚点的尺寸将比实际按钮的尺寸大 4.dp）。</p></blockquote>

<p>HintOverlay 可组合项需要进行一些更改才能使用 HintAnchorState为此锚点绘制提示。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">HintOverlay</span><span class="p">(</span>
</span><span class='line'>    <span class="n">anchors</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">HintAnchorState</span><span class="p">&gt;,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">fillMaxSize</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">overlayBackground</span><span class="p">(</span><span class="n">anchors</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 从 [LocalHintOverlayBrush] 或 [LocalHintOverlayColor] 设置“background”。</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">Modifier</span><span class="p">.</span><span class="n">overlayBackground</span><span class="p">(</span>
</span><span class='line'>    <span class="n">anchors</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">HintAnchorState</span><span class="p">&gt;,</span>
</span><span class='line'><span class="p">):</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">composed</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">backgroundBrush</span> <span class="p">=</span> <span class="n">LocalHintOverlayBrush</span><span class="p">.</span><span class="n">current</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">backgroundColor</span> <span class="p">=</span> <span class="n">LocalHintOverlayColor</span><span class="p">.</span><span class="n">current</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">drawWithCache</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">onDrawWithContent</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">backgroundBrush</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">drawRect</span><span class="p">(</span><span class="n">backgroundBrush</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">drawRect</span><span class="p">(</span><span class="n">backgroundColor</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">anchors</span><span class="p">().</span><span class="n">forEach</span> <span class="p">{</span> <span class="n">anchor</span> <span class="p">-&gt;</span>
</span><span class='line'>                <span class="n">drawRect</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Red</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">topLeft</span> <span class="p">=</span> <span class="n">anchor</span><span class="p">.</span><span class="n">offset</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">size</span> <span class="p">=</span> <span class="n">anchor</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">toSize</span><span class="p">(),</span>
</span><span class='line'>                    <span class="n">style</span> <span class="p">=</span> <span class="n">Stroke</span><span class="p">(</span><span class="n">width</span> <span class="p">=</span> <span class="m">5f</span><span class="p">),</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">drawContent</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在我们只需在锚点周围画一个红色矩形：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*EqvV4AHsimwvwZxajIgtXg.png" alt="Anchors" /></p>

<p>但如果我们在移动设备上运行，我们会在 Android 上得到错误的数字：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*2wennrPOIcKArOK4MuayAQ.png" alt="With Window Insets" /></p>

<p>该问题与 WindowInsets 有关。让我们减去这些 insets 来修复它：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">fun</span> <span class="nf">Modifier</span><span class="p">.</span><span class="n">hintAnchor</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">HintAnchorState</span><span class="p">):</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">composed</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">statusBarInsets</span> <span class="p">=</span> <span class="n">WindowInsets</span><span class="p">.</span><span class="n">statusBars</span><span class="p">.</span><span class="n">getTop</span><span class="p">(</span><span class="n">LocalDensity</span><span class="p">.</span><span class="n">current</span><span class="p">).</span><span class="n">toFloat</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">onGloballyPositioned</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">state</span><span class="p">.</span><span class="n">size</span> <span class="p">=</span> <span class="n">it</span><span class="p">.</span><span class="n">size</span>
</span><span class='line'>        <span class="n">state</span><span class="p">.</span><span class="n">offset</span> <span class="p">=</span> <span class="n">it</span><span class="p">.</span><span class="n">positionInWindow</span><span class="p">()</span>
</span><span class='line'>            <span class="c1">// 修复 Android 上的 WindowInsets</span>
</span><span class='line'>            <span class="p">.</span><span class="n">minus</span><span class="p">(</span><span class="n">Offset</span><span class="p">(</span><span class="n">x</span> <span class="p">=</span> <span class="m">0f</span><span class="p">,</span> <span class="n">y</span> <span class="p">=</span> <span class="n">statusBarInsets</span><span class="p">))</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*LlrCLPAEgpk7q--X7i3UsA.png" alt="Fixed window insets" /></p>

<h2>3. 剪辑出锚点的形状</h2>

<p>要剪辑形状，我们将使用 Path 和 PathOperation 。修改 hintAnchor Modifier 以接受 Shape ，它将用于在锚点周围设置所需的形状。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">fun</span> <span class="nf">Modifier</span><span class="p">.</span><span class="n">hintAnchor</span><span class="p">(</span>
</span><span class='line'>    <span class="n">state</span><span class="p">:</span> <span class="n">HintAnchorState</span><span class="p">,</span>
</span><span class='line'>    <span class="n">shape</span><span class="p">:</span> <span class="n">Shape</span> <span class="p">=</span> <span class="n">RectangleShape</span><span class="p">,</span>
</span><span class='line'><span class="p">):</span> <span class="n">Modifier</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">state</span><span class="p">.</span><span class="n">shape</span> <span class="p">=</span> <span class="n">shape</span>
</span><span class='line'>    <span class="c1">//..onGloballyPositioned</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Stable</span>
</span><span class='line'><span class="k">class</span> <span class="nc">HintAnchorState</span> <span class="k">internal</span> <span class="n">constructor</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//...其他的状态放这里</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">internal</span> <span class="k">var</span> <span class="py">shape</span><span class="p">:</span> <span class="n">Shape</span> <span class="k">by</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="n">RectangleShape</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>根据提供的形状，我们可以创建一个轮廓，用于将锚点的形状从背景中剪掉：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">internal</span> <span class="k">fun</span> <span class="nf">Modifier</span><span class="p">.</span><span class="n">overlayBackground</span><span class="p">(</span>
</span><span class='line'>    <span class="n">anchors</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">HintAnchorState</span><span class="p">&gt;,</span>
</span><span class='line'><span class="p">):</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">composed</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">backgroundBrush</span> <span class="p">=</span> <span class="n">LocalHintOverlayBrush</span><span class="p">.</span><span class="n">current</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">backgroundColor</span> <span class="p">=</span> <span class="n">LocalHintOverlayColor</span><span class="p">.</span><span class="n">current</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">layoutDirection</span> <span class="p">=</span> <span class="n">LocalLayoutDirection</span><span class="p">.</span><span class="n">current</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">density</span> <span class="p">=</span> <span class="n">LocalDensity</span><span class="p">.</span><span class="n">current</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">drawWithCache</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 准备背景路径</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">path</span> <span class="p">=</span> <span class="n">Path</span><span class="p">().</span><span class="n">apply</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">lineTo</span><span class="p">(</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="m">0f</span><span class="p">)</span>
</span><span class='line'>            <span class="n">lineTo</span><span class="p">(</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">)</span>
</span><span class='line'>            <span class="n">lineTo</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">)</span>
</span><span class='line'>            <span class="n">lineTo</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="m">0f</span><span class="p">)</span>
</span><span class='line'>            <span class="n">close</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">anchors</span><span class="p">().</span><span class="n">forEach</span> <span class="p">{</span> <span class="n">anchor</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="c1">// 为锚点准备路径</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">anchorPath</span> <span class="p">=</span> <span class="n">Path</span><span class="p">()</span>
</span><span class='line'>            <span class="n">anchorPath</span><span class="p">.</span><span class="n">addOutline</span><span class="p">(</span>
</span><span class='line'>                <span class="n">anchor</span><span class="p">.</span><span class="n">shape</span><span class="p">.</span><span class="n">createOutline</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">size</span> <span class="p">=</span> <span class="n">anchor</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">toSize</span><span class="p">(),</span>
</span><span class='line'>                    <span class="n">layoutDirection</span> <span class="p">=</span> <span class="n">layoutDirection</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">density</span> <span class="p">=</span> <span class="n">density</span><span class="p">,</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>            <span class="n">anchorPath</span><span class="p">.</span><span class="n">translate</span><span class="p">(</span><span class="n">anchor</span><span class="p">.</span><span class="n">offset</span><span class="p">)</span>
</span><span class='line'>            <span class="n">anchorPath</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// 裁剪掉锚点</span>
</span><span class='line'>            <span class="n">path</span><span class="p">.</span><span class="n">op</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">anchorPath</span><span class="p">,</span> <span class="n">PathOperation</span><span class="p">.</span><span class="n">Xor</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">onDrawWithContent</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 我们不仅仅绘制路径，而不是像以前一样绘制矩形</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">backgroundBrush</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">drawPath</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">backgroundBrush</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">drawPath</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">backgroundColor</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">drawContent</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>让我们传递 CircleShape 和 RoundedCornerShape 来看看提示现在是什么样子：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*i2dWMv3Wa9at-fzGiKm8KQ.png" alt="Clip" /></p>

<p>此时，我们知道如何绘制背景覆盖层、计算锚点的位置以及如何剪裁背景。</p>

<h2>4. 绘制提示</h2>

<p>在实际绘制之前，我们应该定义提示需要呈现哪些信息。</p>

<p>为了不强制只提供文本，我们采用slot方法。通过定义slot，我们允许使用任何所需的composables。</p>

<p>我将介绍一个新的类 Hint 来保存我们的Composable内容：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Stable</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Hint</span> <span class="k">internal</span> <span class="n">constructor</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">internal</span> <span class="k">var</span> <span class="py">content</span><span class="p">:</span> <span class="n">@Composable</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span> <span class="k">by</span> <span class="n">mutableStateOf</span><span class="p">({})</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">rememberHint</span><span class="p">(</span><span class="n">content</span><span class="p">:</span> <span class="n">@Composable</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">):</span> <span class="n">Hint</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">remember</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Hint</span><span class="p">().</span><span class="n">also</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">content</span> <span class="p">=</span> <span class="n">content</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>并将此 Hint 添加为 HintAnchorState 的一部分：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Stable</span>
</span><span class='line'><span class="k">class</span> <span class="nc">HintAnchorState</span> <span class="k">internal</span> <span class="n">constructor</span><span class="p">(</span>
</span><span class='line'>    <span class="k">internal</span> <span class="k">val</span> <span class="py">hint</span><span class="p">:</span> <span class="n">Hint</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//...其他的状态放这里</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">rememberHintAnchorState</span><span class="p">(</span><span class="n">hint</span><span class="p">:</span> <span class="n">Hint</span><span class="p">):</span> <span class="n">HintAnchorState</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">remember</span><span class="p">(</span><span class="n">hint</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">HintAnchorState</span><span class="p">(</span><span class="n">hint</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在 HintOverlay 内部，我们可以采用最简单的解决方案 — BoxWithConstraints ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">HintOverlay</span><span class="p">(</span>
</span><span class='line'>    <span class="n">anchors</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">HintAnchorState</span><span class="p">&gt;,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'>    <span class="n">BoxWithConstraints</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">fillMaxSize</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">overlayBackground</span><span class="p">(</span><span class="n">anchors</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">anchors</span><span class="p">().</span><span class="n">forEach</span> <span class="p">{</span> <span class="n">anchor</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>                <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">graphicsLayer</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">translationX</span> <span class="p">=</span> <span class="n">anchor</span><span class="p">.</span><span class="n">offset</span><span class="p">.</span><span class="n">x</span>
</span><span class='line'>                        <span class="n">translationY</span> <span class="p">=</span> <span class="n">anchor</span><span class="p">.</span><span class="n">offset</span><span class="p">.</span><span class="n">y</span> <span class="p">+</span> <span class="n">anchor</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span>
</span><span class='line'>                    <span class="p">},</span>
</span><span class='line'>            <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">anchor</span><span class="p">.</span><span class="n">hint</span><span class="p">.</span><span class="n">content</span><span class="p">()</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>修改应用程序内容：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">topAppBarHint</span> <span class="p">=</span> <span class="n">rememberHint</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">OutlinedButton</span><span class="p">(</span><span class="n">onClick</span> <span class="p">=</span> <span class="p">{})</span> <span class="p">{</span> <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Hint for TopAppBar&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">val</span> <span class="py">topAppBarActionHintAnchor</span> <span class="p">=</span> <span class="n">rememberHintAnchorState</span><span class="p">(</span><span class="n">topAppBarHint</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="py">actionHint</span> <span class="p">=</span> <span class="n">rememberHint</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Hint for Action&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">val</span> <span class="py">actionHintAnchor</span> <span class="p">=</span> <span class="n">rememberHintAnchorState</span><span class="p">(</span><span class="n">actionHint</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="py">bottomNavigationHint</span> <span class="p">=</span> <span class="n">rememberHint</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Row</span><span class="p">(</span>
</span><span class='line'>        <span class="n">verticalAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">CenterVertically</span><span class="p">,</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Spacer</span><span class="p">(</span><span class="n">Modifier</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">32.</span><span class="n">dp</span><span class="p">).</span><span class="n">background</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">Magenta</span><span class="p">,</span> <span class="n">CircleShape</span><span class="p">))</span>
</span><span class='line'>        <span class="n">Spacer</span><span class="p">(</span><span class="n">Modifier</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">8.</span><span class="n">dp</span><span class="p">))</span>
</span><span class='line'>        <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Hint for BottomNavigation&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">val</span> <span class="py">bottomNavigationHintAnchor</span> <span class="p">=</span> <span class="n">rememberHintAnchorState</span><span class="p">(</span><span class="n">bottomNavigationHint</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>结果如下：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*mMenE2fp2jph6YUBlxX4pA.png" alt="Hint for action" /></p>

<p>让我们引入一个应用程序特定的代码来绘制提示背景。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">rememberHintContainer</span><span class="p">(</span><span class="n">content</span><span class="p">:</span> <span class="n">@Composable</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">):</span> <span class="n">Hint</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">rememberHint</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="n">top</span> <span class="p">=</span> <span class="m">8.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">Yellow</span><span class="p">,</span> <span class="n">shape</span> <span class="p">=</span> <span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">16.</span><span class="n">dp</span><span class="p">))</span>
</span><span class='line'>                <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">16.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>        <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">CompositionLocalProvider</span><span class="p">(</span>
</span><span class='line'>                <span class="n">LocalTextStyle</span> <span class="n">provides</span> <span class="n">TextStyle</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Black</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">fontSize</span> <span class="p">=</span> <span class="m">12.</span><span class="n">sp</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">fontWeight</span> <span class="p">=</span> <span class="n">FontWeight</span><span class="p">.</span><span class="n">Light</span><span class="p">,</span>
</span><span class='line'>                <span class="p">),</span>
</span><span class='line'>            <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">content</span><span class="p">()</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*xn8pxlU_nUQvywbtqVwUtw.png" alt="Hint2" /></p>

<p>我们遇到了 2 个问题：</p>

<ol>
<li>水平对齐，提示应与其锚点居中对齐。</li>
<li>BottomNavigation 的提示超出了屏幕范围。</li>
</ol>


<p>让我们改用自定义布局并修复这些问题。</p>

<p>要测量和布局多个可组合项，请使用 Layout。此composable允许我们手动测量和布局子项。所有更高级别的布局（如 Column 和 Row）都是使用 Layout 实现的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">internal</span> <span class="k">fun</span> <span class="nf">HintsContainer</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="n">anchors</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">HintAnchorState</span><span class="p">&gt;,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">anchors</span> <span class="p">=</span> <span class="n">anchors</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Layout</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">overlayBackground</span><span class="p">(</span><span class="n">anchors</span><span class="p">),</span>
</span><span class='line'>        <span class="n">content</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">anchors</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">hint</span><span class="p">.</span><span class="n">content</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span> <span class="n">measurables</span><span class="p">,</span> <span class="n">constraints</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="c1">// 测量每一个提示</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">placeables</span> <span class="p">=</span> <span class="n">measurables</span><span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">measurable</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="n">measurable</span><span class="p">.</span><span class="n">measure</span><span class="p">(</span>
</span><span class='line'>                <span class="n">constraints</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="n">minWidth</span> <span class="p">=</span> <span class="m">0</span><span class="p">,</span> <span class="n">minHeight</span> <span class="p">=</span> <span class="m">0</span><span class="p">)</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 将布局尺寸设置得尽可能大</span>
</span><span class='line'>        <span class="n">layout</span><span class="p">(</span><span class="n">constraints</span><span class="p">.</span><span class="n">maxWidth</span><span class="p">,</span> <span class="n">constraints</span><span class="p">.</span><span class="n">maxHeight</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 将每个提示相对于其锚点放置</span>
</span><span class='line'>            <span class="n">placeables</span><span class="p">.</span><span class="n">forEachIndexed</span> <span class="p">{</span> <span class="n">index</span><span class="p">,</span> <span class="n">placeable</span> <span class="p">-&gt;</span>
</span><span class='line'>                <span class="k">val</span> <span class="py">anchor</span> <span class="p">=</span> <span class="n">anchors</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// 将此提示居中对齐</span>
</span><span class='line'>                <span class="k">val</span> <span class="py">x</span> <span class="p">=</span> <span class="p">(</span><span class="n">anchor</span><span class="p">.</span><span class="n">offset</span><span class="p">.</span><span class="n">x</span><span class="p">.</span><span class="n">toInt</span><span class="p">()</span> <span class="p">-</span> <span class="p">(</span><span class="n">placeable</span><span class="p">.</span><span class="n">width</span> <span class="p">-</span> <span class="n">anchor</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">)</span> <span class="p">/</span> <span class="m">2</span><span class="p">)</span>
</span><span class='line'>                    <span class="c1">// 修复超出屏幕的坐标</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">coerceAtLeast</span><span class="p">(</span><span class="m">0</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">coerceAtMost</span><span class="p">(</span><span class="n">constraints</span><span class="p">.</span><span class="n">maxWidth</span> <span class="p">-</span> <span class="n">placeable</span><span class="p">.</span><span class="n">width</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// 把这个提示放在它的锚点下面</span>
</span><span class='line'>                <span class="k">var</span> <span class="py">y</span> <span class="p">=</span> <span class="p">(</span><span class="n">anchor</span><span class="p">.</span><span class="n">offset</span><span class="p">.</span><span class="n">y</span><span class="p">.</span><span class="n">toInt</span><span class="p">()</span> <span class="p">+</span> <span class="n">anchor</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">)</span>
</span><span class='line'>                    <span class="c1">// 如果超出屏幕，则修复 y 坐标</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">coerceAtMost</span><span class="p">(</span><span class="n">constraints</span><span class="p">.</span><span class="n">maxHeight</span> <span class="p">-</span> <span class="n">placeable</span><span class="p">.</span><span class="n">height</span><span class="p">)</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">y</span> <span class="p">&lt;</span> <span class="n">anchor</span><span class="p">.</span><span class="n">offset</span><span class="p">.</span><span class="n">y</span> <span class="p">+</span> <span class="n">anchor</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="c1">// 提示与锚点重叠，请将此提示放在其锚点上方</span>
</span><span class='line'>                    <span class="n">y</span> <span class="p">=</span> <span class="n">anchor</span><span class="p">.</span><span class="n">offset</span><span class="p">.</span><span class="n">y</span><span class="p">.</span><span class="n">toInt</span><span class="p">()</span> <span class="p">-</span> <span class="n">placeable</span><span class="p">.</span><span class="n">height</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">placeable</span><span class="p">.</span><span class="n">placeRelative</span><span class="p">(</span><span class="n">x</span> <span class="p">=</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="p">=</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*syuJkuAd-_BgiYfFP8bKgQ.png" alt="Hint3" /></p>

<p>因为我们允许传递任何可组合项作为提示，所以调用者可以完全控制提示的外观，例如，我们可以只使用 Text ，或者使用包含许多子项的复杂 Row 。</p>

<h2>5. 如何控制提示？</h2>

<p>我们静态地添加了提示以将其显示在屏幕上。但真正产品应用程序并非如此。让我们引入 HintController 来控制何时显示提示。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Stable</span>
</span><span class='line'><span class="k">class</span> <span class="nc">HintController</span> <span class="k">internal</span> <span class="n">constructor</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">internal</span> <span class="k">var</span> <span class="py">hint</span> <span class="k">by</span> <span class="n">mutableStateOf</span><span class="p">&lt;</span><span class="n">HintAnchorState</span><span class="p">?&gt;(</span><span class="k">null</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">show</span><span class="p">(</span><span class="n">hint</span><span class="p">:</span> <span class="n">HintAnchorState</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">hint</span> <span class="p">=</span> <span class="n">hint</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">rememberHintController</span><span class="p">():</span> <span class="n">HintController</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">controller</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">HintController</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">controller</span><span class="p">.</span><span class="n">hint</span><span class="o">?.</span><span class="n">let</span> <span class="p">{</span> <span class="n">hint</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="n">HintOverlay</span><span class="p">(</span><span class="n">anchor</span> <span class="p">=</span> <span class="n">hint</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">controller</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>修改应用程序内容，以便在我们点击锚点时显示提示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">hintController</span> <span class="p">=</span> <span class="n">rememberHintController</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">IconButton</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>        <span class="p">.</span><span class="n">hintAnchor</span><span class="p">(</span><span class="n">topAppBarActionHintAnchor</span><span class="p">,</span> <span class="n">CircleShape</span><span class="p">),</span>
</span><span class='line'>    <span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">hintController</span><span class="p">.</span><span class="n">show</span><span class="p">(</span><span class="n">topAppBarActionHintAnchor</span><span class="p">)</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">BottomNavigationItem</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>        <span class="p">.</span><span class="n">hintAnchor</span><span class="p">(</span>
</span><span class='line'>            <span class="n">bottomNavigationHintAnchor</span><span class="p">,</span>
</span><span class='line'>            <span class="n">shape</span> <span class="p">=</span> <span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">50f</span><span class="p">),</span>
</span><span class='line'>        <span class="p">),</span>
</span><span class='line'>    <span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">hintController</span><span class="p">.</span><span class="n">show</span><span class="p">(</span><span class="n">bottomNavigationHintAnchor</span><span class="p">)</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">Button</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>        <span class="p">.</span><span class="n">hintAnchor</span><span class="p">(</span><span class="n">actionHintAnchor</span><span class="p">,</span> <span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">16.</span><span class="n">dp</span><span class="p">))</span>
</span><span class='line'>        <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">4.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>    <span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">hintController</span><span class="p">.</span><span class="n">show</span><span class="p">(</span><span class="n">actionHintAnchor</span><span class="p">)</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>注意：我们不再需要显示的 HintOverlay ，它现在变得内置了。</p></blockquote>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*jIOTXOSnHVeL_jjyEx1gdg.png" alt="Control" /></p>

<p>现在我们可以逐一显示提示，但还有两个部分缺失：如何关闭提示，以及如何覆盖覆盖颜色。</p>

<p>对提示控制器进行更改以允许传递覆盖颜色：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">rememberHintController</span><span class="p">(</span><span class="n">overlay</span><span class="p">:</span> <span class="n">Brush</span><span class="p">):</span> <span class="n">HintController</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">rememberHintController</span><span class="p">(</span><span class="n">overlay</span> <span class="p">=</span> <span class="n">LocalHintOverlayBrush</span> <span class="n">provides</span> <span class="n">overlay</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">rememberHintController</span><span class="p">(</span><span class="n">overlay</span><span class="p">:</span> <span class="n">Color</span> <span class="p">=</span> <span class="n">HintOverlayColorDefault</span><span class="p">):</span> <span class="n">HintController</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">rememberHintController</span><span class="p">(</span><span class="n">overlay</span> <span class="p">=</span> <span class="n">LocalHintOverlayColor</span> <span class="n">provides</span> <span class="n">overlay</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">rememberHintController</span><span class="p">(</span><span class="n">overlay</span><span class="p">:</span> <span class="n">ProvidedValue</span><span class="p">&lt;*&gt;):</span> <span class="n">HintController</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">controller</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">HintController</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">controller</span><span class="p">.</span><span class="n">hint</span><span class="o">?.</span><span class="n">let</span> <span class="p">{</span> <span class="n">hint</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="n">CompositionLocalProvider</span><span class="p">(</span><span class="n">overlay</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">HintOverlay</span><span class="p">(</span><span class="n">anchor</span> <span class="p">=</span> <span class="n">hint</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">controller</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>为了消除我们的提示，让我们引入以下变化：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Stable</span>
</span><span class='line'><span class="k">class</span> <span class="nc">HintController</span> <span class="k">internal</span> <span class="n">constructor</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">internal</span> <span class="k">var</span> <span class="py">hint</span> <span class="k">by</span> <span class="n">mutableStateOf</span><span class="p">&lt;</span><span class="n">HintAnchorState</span><span class="p">?&gt;(</span><span class="k">null</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">show</span><span class="p">(</span><span class="n">hint</span><span class="p">:</span> <span class="n">HintAnchorState</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">hint</span> <span class="p">=</span> <span class="n">hint</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">dismiss</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">hint</span> <span class="p">=</span> <span class="k">null</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们使用 Popup 作为覆盖层的容器，如果用户点击 Android 上的返回按钮(BACK)，Popup 就会被关闭。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">internal</span> <span class="k">fun</span> <span class="nf">HintOverlay</span><span class="p">(</span>
</span><span class='line'>    <span class="n">anchor</span><span class="p">:</span> <span class="n">HintAnchorState</span><span class="p">,</span>
</span><span class='line'>    <span class="n">onDismiss</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Popup</span><span class="p">(</span>
</span><span class='line'>        <span class="n">onDismissRequest</span> <span class="p">=</span> <span class="n">onDismiss</span><span class="p">,</span>
</span><span class='line'>        <span class="c1">// 设置可聚焦以处理按压back事件</span>
</span><span class='line'>        <span class="n">properties</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">PopupProperties</span><span class="p">(</span><span class="n">focusable</span> <span class="p">=</span> <span class="k">true</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//...在这里画出我们的提示</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">internal</span> <span class="k">fun</span> <span class="nf">HintsContainer</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="n">anchor</span><span class="p">:</span> <span class="n">HintAnchorState</span><span class="p">,</span>
</span><span class='line'>    <span class="n">onDismiss</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Layout</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">overlayBackground</span><span class="p">(</span><span class="n">anchor</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">clickable</span><span class="p">(</span>
</span><span class='line'>                <span class="n">interactionSource</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>                <span class="c1">// 禁用ripple</span>
</span><span class='line'>                <span class="n">indication</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>                <span class="n">onClick</span> <span class="p">=</span> <span class="n">onDismiss</span><span class="p">,</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>结果演示视频 <a href="https://youtu.be/eo49PKlhO5Y">https://youtu.be/eo49PKlhO5Y</a></p>

<p>现在，HintController 允许我们按时间显示一个提示，但如果我们想按顺序显示多个提示，则没有实际的队列。</p>

<p>可以扩展 HintController 并添加暂停修饰符以知道提示的显示时间（例如，在显示提示后立即执行某项操作）。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Stable</span>
</span><span class='line'><span class="k">class</span> <span class="nc">HintController</span> <span class="k">internal</span> <span class="n">constructor</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">var</span> <span class="py">queue</span> <span class="p">=</span> <span class="n">mutableStateListOf</span><span class="p">&lt;</span><span class="n">HintAnchorState</span><span class="p">&gt;()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">internal</span> <span class="k">val</span> <span class="py">hint</span><span class="p">:</span> <span class="n">HintAnchorState</span><span class="p">?</span> <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="n">queue</span><span class="p">.</span><span class="n">firstOrNull</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">pendingRequests</span> <span class="p">=</span> <span class="n">mutableMapOf</span><span class="p">&lt;</span><span class="n">HintAnchorState</span><span class="p">,</span> <span class="n">Continuation</span><span class="p">&lt;</span><span class="n">Unit</span><span class="p">&gt;&gt;()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">show</span><span class="p">(</span><span class="n">hint</span><span class="p">:</span> <span class="n">HintAnchorState</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">suspendCoroutine</span> <span class="p">{</span> <span class="n">continuation</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="n">pendingRequests</span><span class="p">[</span><span class="n">hint</span><span class="p">]</span> <span class="p">=</span> <span class="n">continuation</span>
</span><span class='line'>            <span class="n">queue</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">hint</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">show</span><span class="p">(</span><span class="k">vararg</span> <span class="n">hint</span><span class="p">:</span> <span class="n">HintAnchorState</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">show</span><span class="p">(</span><span class="n">hint</span><span class="p">.</span><span class="n">toList</span><span class="p">())</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">show</span><span class="p">(</span><span class="n">hints</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">HintAnchorState</span><span class="p">&gt;)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">suspendCoroutine</span> <span class="p">{</span> <span class="n">continuation</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="n">pendingRequests</span><span class="p">[</span><span class="n">hints</span><span class="p">.</span><span class="n">last</span><span class="p">()]</span> <span class="p">=</span> <span class="n">continuation</span>
</span><span class='line'>            <span class="n">queue</span><span class="p">.</span><span class="n">addAll</span><span class="p">(</span><span class="n">hints</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">internal</span> <span class="k">fun</span> <span class="nf">onDismissed</span><span class="p">(</span><span class="n">hint</span><span class="p">:</span> <span class="n">HintAnchorState</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">pendingRequests</span><span class="p">[</span><span class="n">hint</span><span class="p">]</span><span class="o">?.</span><span class="n">let</span> <span class="p">{</span> <span class="n">continuation</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="n">continuation</span><span class="p">.</span><span class="n">resume</span><span class="p">(</span><span class="n">Unit</span><span class="p">)</span>
</span><span class='line'>            <span class="n">pendingRequests</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="n">hint</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">queue</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="n">hint</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">dismiss</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">pendingRequests</span><span class="p">.</span><span class="n">values</span>
</span><span class='line'>            <span class="p">.</span><span class="n">forEach</span> <span class="p">{</span> <span class="n">continuation</span> <span class="p">-&gt;</span>
</span><span class='line'>                <span class="n">continuation</span><span class="p">.</span><span class="n">resumeWithException</span><span class="p">(</span><span class="n">CancellationException</span><span class="p">(</span><span class="s">&quot;Hint was dismissed&quot;</span><span class="p">))</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="n">pendingRequests</span><span class="p">.</span><span class="n">clear</span><span class="p">()</span>
</span><span class='line'>        <span class="n">queue</span><span class="p">.</span><span class="n">clear</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在为了在应用程序内部显示提示，我们需要一个 CoroutineScope ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">coroutineScope</span> <span class="p">=</span> <span class="n">rememberCoroutineScope</span><span class="p">()</span>
</span><span class='line'><span class="k">val</span> <span class="py">hintController</span> <span class="p">=</span> <span class="n">rememberHintController</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 现在我们可以从提示本身中忽略所有待处理的提示</span>
</span><span class='line'><span class="k">val</span> <span class="py">topAppBarHint</span> <span class="p">=</span> <span class="n">rememberHintContainer</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">OutlinedButton</span><span class="p">(</span>
</span><span class='line'>        <span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">hintController</span><span class="p">.</span><span class="n">dismiss</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span> <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Hint for TopAppBar&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 显示 1 条提示</span>
</span><span class='line'><span class="n">BottomNavigationItem</span><span class="p">(</span>
</span><span class='line'>    <span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">coroutineScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">hintController</span><span class="p">.</span><span class="n">show</span><span class="p">(</span><span class="n">bottomNavigationHintAnchor</span><span class="p">)</span>
</span><span class='line'>            <span class="n">scaffoldState</span><span class="p">.</span><span class="n">snackbarHostState</span><span class="p">.</span><span class="n">showSnackbar</span><span class="p">(</span><span class="s">&quot;One hint was shown&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 连续显示多个提示</span>
</span><span class='line'><span class="n">Button</span><span class="p">(</span>
</span><span class='line'>    <span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">coroutineScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">hintController</span><span class="p">.</span><span class="n">show</span><span class="p">(</span>
</span><span class='line'>                <span class="n">topAppBarActionHintAnchor</span><span class="p">,</span>
</span><span class='line'>                <span class="n">actionHintAnchor</span><span class="p">,</span>
</span><span class='line'>                <span class="n">bottomNavigationHintAnchor</span><span class="p">,</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>            <span class="n">scaffoldState</span><span class="p">.</span><span class="n">snackbarHostState</span><span class="p">.</span><span class="n">showSnackbar</span><span class="p">(</span><span class="s">&quot;Many hints were shown&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><strong>注意：</strong> 如果我们通过调用 hintController.dismiss() 来关闭提示，则 hintController.show 之后的代码将不会被调用。</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">coroutineScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">hintController</span><span class="p">.</span><span class="n">show</span><span class="p">(</span><span class="n">topAppBarActionHintAnchor</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">// 如果通过调用 hintController.dismiss 关闭了之前的提示，则不会显示 Snackbar</span>
</span><span class='line'>    <span class="n">scaffoldState</span><span class="p">.</span><span class="n">snackbarHostState</span><span class="p">.</span><span class="n">showSnackbar</span><span class="p">(</span><span class="s">&quot;One hint was shown&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最终结果如这个视频演示 <a href="https://youtu.be/tyZUNJLEVxQ">https://youtu.be/tyZUNJLEVxQ</a>：我们可以显示单个提示，也可以显示提示列表。</p>

<p>由于该项目使用 Compose Multiplatform，我们可以针对不同的目标运行该应用程序：</p>

<ul>
<li>Android结果演示 <a href="https://youtu.be/BVBCipnbIUc">https://youtu.be/BVBCipnbIUc</a></li>
<li>iOS结果演示 <a href="https://youtu.be/Z1uasddgqwo">https://youtu.be/Z1uasddgqwo</a></li>
</ul>


<h2>总结</h2>

<p>Compose 和 Kotlin Multiplatform 是一个强大的组合，它允许我们使用 Kotlin 来实现 UI 和业务逻辑。CMP 库仅与Jetpack Compose Android 项目完全兼容。</p>

<p>可以在 GitHub 上查看我的repo：<a href="https://github.com/vitoksmile/ComposeHints">https://github.com/vitoksmile/ComposeHints</a>。</p>

<p>感谢你的阅读，期待在 GitHub 上获得你的Star :)。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[实战：在Compose中绘制睡眠时间线]]></title>
    <link href="https://alexhilton.github.io/blog/2025/03/26/draw-sleep-timeline-graph-in-compose/"/>
    <updated>2025-03-26T21:41:40+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/03/26/draw-sleep-timeline-graph-in-compose</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自<a href="https://proandroiddev.com/sleep-timeline-graph-in-compose-15c99f9a4af0">Draw sleep timeline graph in Compose</a>，原文由<a href="https://medium.com/@vitoksmile">Viktor Mykhailiv</a>发布于2025年1月31日。</p></blockquote>

<p><strong>译者按：</strong> 我们在前面的<a href="https://juejin.cn/column/7367555191338467337">降Compose十八掌</a>系列中讲解过在Compose自定义绘制的方法，可以先温习一下<a href="https://juejin.cn/post/7381826917086920742">上一篇文章</a>。这篇文章是提升自定义绘制技巧的一个非常好的实战例子。</p>

<p><a href="https://alexhilton.github.io/blog/2025/03/26/draw-sleep-timeline-graph-in-compose/"><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*OUAsgvNoNx9VpSk9Eyqgzg.jpeg" title="auto auto" ></a></p>

<!-- more -->


<p>当内置组件不能完全满足我们的应用需求时，自定义绘图非常有用。本文提供了创建自定义睡眠时间线图表的指南，类似于你在<a href="https://play.google.com/store/apps/details?id=com.fitbit.FitbitMobile">Fitbit 应用</a>中找到的图表。</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*cA9uPgAG29Gu2AhajArq9w.jpeg" alt="Screenshots from Fitbit Android app" /></p>

<h2>在 Compose 中如何绘图？</h2>

<p>要开始在 Compose 中绘图，我们可以使用绘图Modifier或 Canvas可组合函数，这为我们提供了 DrawScope — 一种声明式、无状态的API，用于绘制形状和路径，而无需消费者维护底层状态。DrawScope实现还提供了尺寸信息，并且变幻是相对于本地平移完成的。</p>

<blockquote><p><strong>注意：</strong> Jetpack Compose（仅限 Android）和 Compose Multiplatform（桌面、Android、iOS、Web）具有类似的绘图 API。下面的屏幕截图是在桌面（macOS）上制作的，但所有平台上的结果都是相同的（查看最后一张屏幕截图）。</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">Canvas</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">rotate</span><span class="p">(</span><span class="n">degrees</span> <span class="p">=</span> <span class="m">45F</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">drawRect</span><span class="p">(</span>
</span><span class='line'>            <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Gray</span><span class="p">,</span>
</span><span class='line'>            <span class="n">topLeft</span> <span class="p">=</span> <span class="n">Offset</span><span class="p">(</span><span class="n">x</span> <span class="p">=</span> <span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="p">/</span> <span class="m">3F</span><span class="p">,</span> <span class="n">y</span> <span class="p">=</span> <span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="p">/</span> <span class="m">3F</span><span class="p">),</span>
</span><span class='line'>            <span class="n">size</span> <span class="p">=</span> <span class="n">size</span> <span class="p">/</span> <span class="m">3F</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*_qkChFEn25kC_cfgiRXgKg.png" alt="Compose中的自定义绘制" /></p>

<h2>啥是睡眠时间表？</h2>

<p>我们可以在 Health Connect 中读取或写入睡眠数据。睡眠数据显示为会话，可分为以下睡眠阶段：</p>

<ul>
<li>清醒：用户在睡眠周期内清醒。</li>
<li>浅睡眠：用户处于浅睡眠周期。</li>
<li>深睡眠：用户处于深睡眠周期。</li>
<li>REM：用户处于 REM 睡眠周期。</li>
</ul>


<p>这些值表示用户在一定时间范围内经历的睡眠类型。SleepSessionRecord 数据类型包含两部分：</p>

<ol>
<li>整个睡眠过程，涵盖整个睡眠时间。</li>
<li>睡眠过程中的各个阶段，例如浅睡眠或深睡眠。</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">record</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">SleepSessionRecord</span><span class="p">(</span>
</span><span class='line'>        <span class="n">startTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-28T21:10:10Z&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="n">endTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-29T07:32:13Z&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="n">startZoneOffset</span> <span class="p">=</span> <span class="n">UtcOffset</span><span class="p">(</span><span class="n">hours</span> <span class="p">=</span> <span class="m">2</span><span class="p">),</span>
</span><span class='line'>        <span class="n">endZoneOffset</span> <span class="p">=</span> <span class="n">UtcOffset</span><span class="p">(</span><span class="n">hours</span> <span class="p">=</span> <span class="m">2</span><span class="p">),</span>
</span><span class='line'>        <span class="n">stages</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span>
</span><span class='line'>            <span class="n">SleepSessionRecord</span><span class="p">.</span><span class="n">Stage</span><span class="p">(</span>
</span><span class='line'>                <span class="n">startTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-28T21:10:10Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="n">endTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-28T23:15:13Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="k">type</span> <span class="p">=</span> <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">Light</span><span class="p">,</span>
</span><span class='line'>            <span class="p">),</span>
</span><span class='line'>            <span class="n">SleepSessionRecord</span><span class="p">.</span><span class="n">Stage</span><span class="p">(</span>
</span><span class='line'>                <span class="n">startTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-28T23:15:13Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="n">endTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-29T01:56:32Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="k">type</span> <span class="p">=</span> <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">Deep</span><span class="p">,</span>
</span><span class='line'>            <span class="p">),</span>
</span><span class='line'>            <span class="n">SleepSessionRecord</span><span class="p">.</span><span class="n">Stage</span><span class="p">(</span>
</span><span class='line'>                <span class="n">startTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-29T01:56:13Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="n">endTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-29T03:16:22Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="k">type</span> <span class="p">=</span> <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">Light</span><span class="p">,</span>
</span><span class='line'>            <span class="p">),</span>
</span><span class='line'>            <span class="n">SleepSessionRecord</span><span class="p">.</span><span class="n">Stage</span><span class="p">(</span>
</span><span class='line'>                <span class="n">startTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-29T03:16:22Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="n">endTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-29T04:32:13Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="k">type</span> <span class="p">=</span> <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">REM</span><span class="p">,</span>
</span><span class='line'>            <span class="p">),</span>
</span><span class='line'>            <span class="n">SleepSessionRecord</span><span class="p">.</span><span class="n">Stage</span><span class="p">(</span>
</span><span class='line'>                <span class="n">startTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-29T04:32:13Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="n">endTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-29T05:12:56Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="k">type</span> <span class="p">=</span> <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">Deep</span><span class="p">,</span>
</span><span class='line'>            <span class="p">),</span>
</span><span class='line'>            <span class="n">SleepSessionRecord</span><span class="p">.</span><span class="n">Stage</span><span class="p">(</span>
</span><span class='line'>                <span class="n">startTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-29T05:12:56Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="n">endTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-29T07:32:13Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="k">type</span> <span class="p">=</span> <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">Light</span><span class="p">,</span>
</span><span class='line'>            <span class="p">),</span>
</span><span class='line'>            <span class="n">SleepSessionRecord</span><span class="p">.</span><span class="n">Stage</span><span class="p">(</span>
</span><span class='line'>                <span class="n">startTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-28T22:11:56Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="n">endTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-28T22:17:13Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="k">type</span> <span class="p">=</span> <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">Awake</span><span class="p">,</span>
</span><span class='line'>            <span class="p">),</span>
</span><span class='line'>            <span class="n">SleepSessionRecord</span><span class="p">.</span><span class="n">Stage</span><span class="p">(</span>
</span><span class='line'>                <span class="n">startTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-28T22:39:56Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="n">endTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-28T22:51:13Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="k">type</span> <span class="p">=</span> <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">Awake</span><span class="p">,</span>
</span><span class='line'>            <span class="p">),</span>
</span><span class='line'>            <span class="n">SleepSessionRecord</span><span class="p">.</span><span class="n">Stage</span><span class="p">(</span>
</span><span class='line'>                <span class="n">startTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-29T04:47:56Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="n">endTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-29T04:54:13Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="k">type</span> <span class="p">=</span> <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">Awake</span><span class="p">,</span>
</span><span class='line'>            <span class="p">),</span>
</span><span class='line'>        <span class="p">),</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>需要一点数学计算</h2>

<p>在睡眠期间，我们可以在不同时刻多次处于同一阶段。我们需要计算相对于睡眠的起点和终点。</p>

<p>要在 Compose 中绘制矩形，我们需要 topOffset 和 size。</p>

<p><img src="" alt="Math" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">calculate</span><span class="p">(</span>
</span><span class='line'>    <span class="n">canvasSize</span><span class="p">:</span> <span class="n">Size</span><span class="p">,</span>
</span><span class='line'>    <span class="n">recordStartTime</span><span class="p">:</span> <span class="n">Instant</span><span class="p">,</span>
</span><span class='line'>    <span class="n">recordEndTime</span><span class="p">:</span> <span class="n">Instant</span><span class="p">,</span>
</span><span class='line'>    <span class="n">stages</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">SleepSessionRecord</span><span class="p">.</span><span class="n">Stage</span><span class="p">&gt;,</span>
</span><span class='line'><span class="p">):</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">SleepStageDrawPoint</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">totalDuration</span> <span class="p">=</span> <span class="p">(</span><span class="n">recordEndTime</span> <span class="p">-</span> <span class="n">recordStartTime</span><span class="p">).</span><span class="n">inWholeSeconds</span><span class="p">.</span><span class="n">toFloat</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">coerceAtLeast</span><span class="p">(</span><span class="m">1f</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">stages</span><span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">stage</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">stageOffset</span> <span class="p">=</span>
</span><span class='line'>            <span class="p">(</span><span class="n">stage</span><span class="p">.</span><span class="n">startTime</span> <span class="p">-</span> <span class="n">recordStartTime</span><span class="p">).</span><span class="n">inWholeSeconds</span> <span class="p">/</span> <span class="n">totalDuration</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">stageDuration</span> <span class="p">=</span>
</span><span class='line'>            <span class="p">(</span><span class="n">stage</span><span class="p">.</span><span class="n">endTime</span> <span class="p">-</span> <span class="n">stage</span><span class="p">.</span><span class="n">startTime</span><span class="p">).</span><span class="n">inWholeSeconds</span><span class="p">.</span><span class="n">toFloat</span><span class="p">()</span> <span class="p">/</span> <span class="n">totalDuration</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">SleepStageDrawPoint</span><span class="p">(</span>
</span><span class='line'>            <span class="n">topLeft</span> <span class="p">=</span> <span class="n">Offset</span><span class="p">(</span><span class="n">x</span> <span class="p">=</span> <span class="n">canvasSize</span><span class="p">.</span><span class="n">width</span> <span class="p">*</span> <span class="n">stageOffset</span><span class="p">,</span> <span class="n">y</span> <span class="p">=</span> <span class="m">0f</span><span class="p">),</span>
</span><span class='line'>            <span class="n">size</span> <span class="p">=</span> <span class="n">canvasSize</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="n">width</span> <span class="p">=</span> <span class="n">canvasSize</span><span class="p">.</span><span class="n">width</span> <span class="p">*</span> <span class="n">stageDuration</span><span class="p">),</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>绘制</h2>

<p>让我们构建自定义 Canvas 来绘制睡眠过程的一个阶段，例如深度睡眠。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">SleepSessionCanvas</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="n">record</span><span class="p">:</span> <span class="n">SleepSessionRecord</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Spacer</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">.</span><span class="n">drawWithCache</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">points</span> <span class="p">=</span> <span class="n">calculate</span><span class="p">(</span>
</span><span class='line'>                <span class="n">canvasSize</span> <span class="p">=</span> <span class="n">size</span><span class="p">,</span>
</span><span class='line'>                <span class="n">recordStartTime</span> <span class="p">=</span> <span class="n">record</span><span class="p">.</span><span class="n">startTime</span><span class="p">,</span>
</span><span class='line'>                <span class="n">recordEndTime</span> <span class="p">=</span> <span class="n">record</span><span class="p">.</span><span class="n">endTime</span><span class="p">,</span>
</span><span class='line'>                <span class="n">stages</span> <span class="p">=</span> <span class="n">record</span><span class="p">.</span><span class="n">stages</span><span class="p">.</span><span class="n">filter</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="k">type</span> <span class="p">==</span> <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">Deep</span> <span class="p">},</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">onDrawWithContent</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// 画背景</span>
</span><span class='line'>                <span class="n">drawRoundRect</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">LightGray</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">topLeft</span> <span class="p">=</span> <span class="n">Offset</span><span class="p">(</span><span class="n">x</span> <span class="p">=</span> <span class="m">0f</span><span class="p">,</span> <span class="n">y</span> <span class="p">=</span> <span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="p">/</span> <span class="m">4f</span><span class="p">),</span>
</span><span class='line'>                    <span class="n">size</span> <span class="p">=</span> <span class="n">size</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="n">height</span> <span class="p">=</span> <span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="p">/</span> <span class="m">2f</span><span class="p">),</span>
</span><span class='line'>                    <span class="n">cornerRadius</span> <span class="p">=</span> <span class="n">CornerRadius</span><span class="p">(</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="p">/</span> <span class="m">2f</span><span class="p">),</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// 绘制阶段点</span>
</span><span class='line'>                <span class="n">points</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span> <span class="n">point</span> <span class="p">-&gt;</span>
</span><span class='line'>                    <span class="n">drawRect</span><span class="p">(</span>
</span><span class='line'>                        <span class="n">topLeft</span> <span class="p">=</span> <span class="n">point</span><span class="p">.</span><span class="n">topLeft</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">size</span> <span class="p">=</span> <span class="n">point</span><span class="p">.</span><span class="n">size</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">xFF673AB7</span><span class="p">),</span>
</span><span class='line'>                    <span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果我们使用之前定义的睡眠会话运行项目，我们将看到 3 个矩形：1 个灰色矩形表示背景，2 个紫色矩形表示深度睡眠阶段。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">SleepSessionCanvas</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>        <span class="p">.</span><span class="n">fillMaxWidth</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">height</span><span class="p">(</span><span class="m">320.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">16.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>    <span class="n">record</span> <span class="p">=</span> <span class="n">record</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*ANITvvaUEuuwwcACzY21qA.png" alt="深度睡眠阶段" /></p>

<p>为了绘制睡眠过程的所有阶段（清醒、快速眼动、浅睡眠和深睡眠），我们需要进行一些调整，将每个阶段类型垂直绘制为列组件，办法是逐行绘制并对下一行应用一些偏移量（offset）。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">SleepSessionCanvas</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="n">record</span><span class="p">:</span> <span class="n">SleepSessionRecord</span><span class="p">,</span>
</span><span class='line'>    <span class="n">stageHeight</span><span class="p">:</span> <span class="n">Dp</span> <span class="p">=</span> <span class="m">48.</span><span class="n">dp</span><span class="p">,</span>
</span><span class='line'>    <span class="n">stagesSpacing</span><span class="p">:</span> <span class="n">Dp</span> <span class="p">=</span> <span class="m">16.</span><span class="n">dp</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">colors</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">mapOf</span><span class="p">(</span>
</span><span class='line'>            <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">Awake</span> <span class="n">to</span> <span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">xFFFF9800</span><span class="p">),</span>
</span><span class='line'>            <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">Light</span> <span class="n">to</span> <span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">xFF2196F3</span><span class="p">),</span>
</span><span class='line'>            <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">Deep</span> <span class="n">to</span> <span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">xFF673AB7</span><span class="p">),</span>
</span><span class='line'>            <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">REM</span> <span class="n">to</span> <span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">xFF795548</span><span class="p">),</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">stageHeightPx</span> <span class="p">=</span> <span class="n">with</span><span class="p">(</span><span class="n">LocalDensity</span><span class="p">.</span><span class="n">current</span><span class="p">)</span> <span class="p">{</span> <span class="n">stageHeight</span><span class="p">.</span><span class="n">toPx</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">stagesSpacingPx</span> <span class="p">=</span> <span class="n">with</span><span class="p">(</span><span class="n">LocalDensity</span><span class="p">.</span><span class="n">current</span><span class="p">)</span> <span class="p">{</span> <span class="n">stagesSpacing</span><span class="p">.</span><span class="n">toPx</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Spacer</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">requiredHeight</span><span class="p">(</span><span class="n">stageHeight</span> <span class="p">*</span> <span class="n">colors</span><span class="p">.</span><span class="n">size</span> <span class="p">+</span> <span class="n">stagesSpacing</span> <span class="p">*</span> <span class="p">(</span><span class="n">colors</span><span class="p">.</span><span class="n">size</span> <span class="p">-</span> <span class="m">1</span><span class="p">))</span>
</span><span class='line'>            <span class="p">.</span><span class="n">drawWithCache</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">val</span> <span class="py">stages</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">Awake</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">REM</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">Light</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">Deep</span><span class="p">,</span>
</span><span class='line'>                <span class="p">).</span><span class="n">map</span> <span class="p">{</span> <span class="k">type</span> <span class="p">-&gt;</span>
</span><span class='line'>                    <span class="k">type</span> <span class="n">to</span> <span class="n">calculate</span><span class="p">(</span>
</span><span class='line'>                        <span class="n">canvasSize</span> <span class="p">=</span> <span class="n">size</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="n">height</span> <span class="p">=</span> <span class="n">stageHeightPx</span><span class="p">),</span>
</span><span class='line'>                        <span class="n">recordStartTime</span> <span class="p">=</span> <span class="n">record</span><span class="p">.</span><span class="n">startTime</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">recordEndTime</span> <span class="p">=</span> <span class="n">record</span><span class="p">.</span><span class="n">endTime</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">stages</span> <span class="p">=</span> <span class="n">record</span><span class="p">.</span><span class="n">stages</span><span class="p">.</span><span class="n">filter</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="k">type</span> <span class="p">==</span> <span class="k">type</span> <span class="p">},</span>
</span><span class='line'>                    <span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">onDrawWithContent</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">var</span> <span class="py">offset</span> <span class="p">=</span> <span class="m">0f</span>
</span><span class='line'>                    <span class="n">stages</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span> <span class="p">(</span><span class="k">type</span><span class="p">,</span> <span class="n">points</span><span class="p">)</span> <span class="p">-&gt;</span>
</span><span class='line'>                        <span class="n">translate</span><span class="p">(</span><span class="n">top</span> <span class="p">=</span> <span class="n">offset</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                            <span class="c1">// 画背景</span>
</span><span class='line'>                            <span class="n">drawRoundRect</span><span class="p">(</span>
</span><span class='line'>                                <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">LightGray</span><span class="p">,</span>
</span><span class='line'>                                <span class="n">topLeft</span> <span class="p">=</span> <span class="n">Offset</span><span class="p">(</span><span class="n">x</span> <span class="p">=</span> <span class="m">0f</span><span class="p">,</span> <span class="n">y</span> <span class="p">=</span> <span class="n">stageHeightPx</span> <span class="p">/</span> <span class="m">4</span><span class="p">),</span>
</span><span class='line'>                                <span class="n">size</span> <span class="p">=</span> <span class="n">size</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="n">height</span> <span class="p">=</span> <span class="n">stageHeightPx</span> <span class="p">/</span> <span class="m">2</span><span class="p">),</span>
</span><span class='line'>                                <span class="n">cornerRadius</span> <span class="p">=</span> <span class="n">CornerRadius</span><span class="p">(</span><span class="n">stageHeightPx</span> <span class="p">/</span> <span class="m">2</span><span class="p">),</span>
</span><span class='line'>                            <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                            <span class="c1">// 绘制阶段点</span>
</span><span class='line'>                            <span class="n">points</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span> <span class="n">point</span> <span class="p">-&gt;</span>
</span><span class='line'>                                <span class="n">drawRect</span><span class="p">(</span>
</span><span class='line'>                                    <span class="n">topLeft</span> <span class="p">=</span> <span class="n">point</span><span class="p">.</span><span class="n">topLeft</span><span class="p">,</span>
</span><span class='line'>                                    <span class="n">size</span> <span class="p">=</span> <span class="n">point</span><span class="p">.</span><span class="n">size</span><span class="p">,</span>
</span><span class='line'>                                    <span class="n">color</span> <span class="p">=</span> <span class="n">colors</span><span class="p">.</span><span class="n">getValue</span><span class="p">(</span><span class="k">type</span><span class="p">),</span>
</span><span class='line'>                                <span class="p">)</span>
</span><span class='line'>                            <span class="p">}</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                        <span class="n">offset</span> <span class="p">+=</span> <span class="n">stageHeightPx</span> <span class="p">+</span> <span class="n">stagesSpacingPx</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*iXIS4tbsvx5AhTtRqlWi7A.png" alt="最终的图形" /></p>

<h3>添加文本</h3>

<p>要在 Compose 中绘制文本，我们通常可以使用 Text 可组合项。但是，在我们的示例中，我们处于 DrawScope 中，我们可以使用 DrawScope.drawText()方法。</p>

<p>绘制文本与其他绘制命令略有不同。通常，我们为绘制命令提供绘制形状/图像的大小（宽度和高度）。对于文本，有几个参数可以控制渲染文本的大小，例如字体大小、字体、连字符和字母间距。我们需要使用 TextMeasurer 来获取文本的测量大小，具体取决于上述因素。</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*QB1QvINWUWMlpRoPSzrcUQ.png" alt="Desktop效果" /></p>

<p><img src="https://miro.medium.com/v2/resize:fit:2000/format:webp/1*U_LBREiTciw2F3ghYiHqCw.jpeg" alt="Android和iOS效果" /></p>

<p>请到我的Github repo中查找完整示例代码：<a href="https://github.com/vitoksmile/Sleep-timeline-graph">https://github.com/vitoksmile/Sleep-timeline-graph</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[高效地在Jetpack Compose中设计UI组件]]></title>
    <link href="https://alexhilton.github.io/blog/2025/03/16/effective-compose-components/"/>
    <updated>2025-03-16T20:37:18+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/03/16/effective-compose-components</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自<a href="https://proandroiddev.com/designing-effective-ui-components-in-jetpack-compose-cb8d18f7f888">Designing Effective UI Components in Jetpack Compose</a>，原文作者是Jaewoong Eum，原文发布于2025年2月7日。</p></blockquote>

<p><strong>译者按：</strong> 本文适合有一定Jetpack Compose经验的开发者阅读，假定读者熟悉Jetpack Compose的基本使用方法，以及熟悉常见 的Slot设计模式。否则理解上可能会有一些困难。</p>

<p><a href="https://alexhilton.github.io/blog/2025/03/16/effective-compose-components/"><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/0*PwVzAjyhIPGIgrT0" title="auto auto" ></a></p>

<!-- more -->


<p>自<a href="https://android-developers.googleblog.com/2021/07/jetpack-compose-announcement.html"> Google 宣布 Jetpack Compose 1.0 稳定版</a>以来，许多公司都已采用 Jetpack Compose 来利用其众多优势。随着 Compose 在 Android 生态系统中的广泛采用，库和 SDK 也开始集成对 Compose 的支持。</p>

<p>传统上，在基于 XML 的项目中，UI 组件以自定义视图的形式提供，并通过属性（attributes）提供可自定义的选项。虽然这种方法可以轻松地将组件集成到 XML 布局中，但它带来了一些挑战，例如在多个组件之间应用主题样式时不一致，以及由于底层 View 类公开的方法而导致的 API 滥用。</p>

<p>与传统的自定义视图相比，Jetpack Compose 提供了一种完全不同的组件设计策略。其声明式结构允许更直观、更灵活的 API 设计。这种转变不仅有利于库和 SDK 开发人员，也有利于构建共享 UI 组件的大型团队，使他们能够实施更好的做法、减少误用并增强整体开发人员体验。</p>

<p>在本文中，你将发现在 Jetpack Compose 中设计 UI 组件的有效策略，借鉴<a href="https://getstream.io/video/sdk/android/"> Stream Video SDK </a>的最佳实践。</p>

<h2>Modifier的最佳实践</h2>

<p><a href="https://developer.android.com/develop/ui/compose/modifiers">Modifier </a>是 Jetpack Compose 中一个功能强大的 API，可让你以链式和可组合的方式装饰和增强 UI 元素。但是，应谨慎使用它，因为它的属性可以传播到其他可组合函数，如果管理不当，可能会导致意想不到的效果。</p>

<p>Modifier函数的顺序尤其重要，因为每个函数都会修改前一个函数返回的Modifier或从可组合项外部传递的Modifier。此顺序直接影响最终输出。在本节中，我们将探讨三个关键原则和最佳实践，它们可以指导你在 Jetpack Compose 中设计有效且可预测的 UI 组件 API。</p>

<h3>1. 将Modifier应用到组件最顶层的布局</h3>

<p>Jetpack Compose 中的Modifier会通过布局层次结构向下传递，但理想情况下，它们应仅应用于可组合函数中最顶层的布局节点。在层次结构中的任意级别应用Modifier可能会导致意外行为，并增加用户误用的可能性，从而使组件更难以预测且更难以有效使用。</p>

<p>例如，假设你想要创建一个代表圆形按钮的组件，如下例所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">RoundedButton</span><span class="p">(</span>
</span><span class='line'>  <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>  <span class="n">onClick</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Button</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">.</span><span class="n">clip</span><span class="p">(</span><span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">32.</span><span class="n">dp</span><span class="p">)),</span>
</span><span class='line'>    <span class="n">onClick</span> <span class="p">=</span> <span class="n">onClick</span>
</span><span class='line'>  <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Text</span><span class="p">(</span>
</span><span class='line'>      <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">10.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>      <span class="n">text</span> <span class="p">=</span> <span class="s">&quot;Rounded&quot;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是，你不应将 Modifier 应用于 Text ，而应应用于 Button ，后者是布局层次结构中最顶层的可组合函数，如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">RoundedButton</span><span class="p">(</span>
</span><span class='line'>  <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>  <span class="n">onClick</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Button</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">clip</span><span class="p">(</span><span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">32.</span><span class="n">dp</span><span class="p">)),</span>
</span><span class='line'>    <span class="n">onClick</span> <span class="p">=</span> <span class="n">onClick</span>
</span><span class='line'>  <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Text</span><span class="p">(</span>
</span><span class='line'>      <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">10.</span><span class="n">dp</span><span class="p">),</span> <span class="c1">// 别这么干</span>
</span><span class='line'>      <span class="n">text</span> <span class="p">=</span> <span class="s">&quot;Rounded&quot;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>自定义可组合函数 RoundedButton 的主要用途是表示 Button ，而不是 Text 。因此，你应避免转移所创建主要组件的焦点或用途。</p>

<p>此外，如果布局层次结构变得复杂，并且你在可组合函数的中间级别应用Modifier，则用户可能很难预测提供的Modifier参数最终会影响哪个组件。这种不明确性可能会导致混淆和误用。</p>

<p>如果你想让用户灵活地修改按钮的内部内容，你可以使用插槽来实现，如下例所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">RoundedButton</span><span class="p">(</span>
</span><span class='line'>  <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>  <span class="n">onClick</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span>
</span><span class='line'>  <span class="n">content</span><span class="p">:</span> <span class="n">@Composable</span> <span class="n">RowScope</span><span class="p">.()</span> <span class="p">-&gt;</span> <span class="n">Unit</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Button</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">.</span><span class="n">clip</span><span class="p">(</span><span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">32.</span><span class="n">dp</span><span class="p">)),</span>
</span><span class='line'>    <span class="n">onClick</span> <span class="p">=</span> <span class="n">onClick</span>
</span><span class='line'>  <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">content</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2. 对Modifier使用单个参数</h3>

<p>你可能想知道是否可以接受多个 Modifier 参数以应用于布局层次结构中的特定组件，同时限制组件的结构，如下例所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">RoundedButton</span><span class="p">(</span>
</span><span class='line'>  <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>  <span class="n">textModifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>  <span class="n">onClick</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Button</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">.</span><span class="n">clip</span><span class="p">(</span><span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">32.</span><span class="n">dp</span><span class="p">)),</span>
</span><span class='line'>    <span class="n">onClick</span> <span class="p">=</span> <span class="n">onClick</span>
</span><span class='line'>  <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Text</span><span class="p">(</span>
</span><span class='line'>      <span class="n">modifier</span> <span class="p">=</span> <span class="n">textModifier</span><span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">10.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>      <span class="n">text</span> <span class="p">=</span> <span class="s">&quot;Rounded&quot;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是，Modifier 本质上被设计为一个单一的、可链接的参数，使用户能够定义 Composable 函数的外部行为和外观。在 Composable 中引入多个 Modifier 参数会增加不必要的复杂性，增加误用的风险，并且偏离了 Jetpack Compose 保持 API 直观和可预测的原则。</p>

<p>最好使用基于插槽的方法，让用户能够灵活地自定义内部内容。例如，你可以定义一个插槽（slot），让用户提供自定义内容，同时仍保留单个Modifier以进行外部自定义，而不是添加多个Modifier参数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">RoundedButton</span><span class="p">(</span>
</span><span class='line'>  <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>  <span class="n">onClick</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span>
</span><span class='line'>  <span class="n">content</span><span class="p">:</span> <span class="n">@Composable</span> <span class="n">RowScope</span><span class="p">.()</span> <span class="p">-&gt;</span> <span class="n">Unit</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Button</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">.</span><span class="n">clip</span><span class="p">(</span><span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">32.</span><span class="n">dp</span><span class="p">)),</span>
</span><span class='line'>    <span class="n">onClick</span> <span class="p">=</span> <span class="n">onClick</span>
</span><span class='line'>  <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">content</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3. 避免跨组件重复使用Modifier</h3>

<p>设计组件时的另一个重要考虑因素是避免重复使用提供的 Modifier 实例。一些开发人员可能会担心为每个组件创建新的 Modifier 实例可能会导致内存使用量增加或对性能产生负面影响，尤其是在具有大量Modifier的复杂布局层次结构中。</p>

<p>然而，由于 Jetpack Compose 中Modifier实现的优化性质，这种担忧通常是没有根据的。Modifier旨在应用于可组合函数中的单个布局节点，以确保行为清晰且可预测。如果在布局层次结构中不同级别的多个可组合项中使用相同的Modifier，则可能导致意外的副作用和不可预测的行为，从而损害组件的一致性和可用性。</p>

<p>例如，考虑这样一种情况，其中相同的 Modifier 参数在整个布局层次结构中重复使用，如下例所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">MyButtons</span><span class="p">(</span>
</span><span class='line'>  <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>  <span class="n">onClick</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Column</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Button</span><span class="p">(</span>
</span><span class='line'>      <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">,</span>
</span><span class='line'>      <span class="n">onClick</span> <span class="p">=</span> <span class="n">onClick</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">Text</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">10.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>        <span class="n">text</span> <span class="p">=</span> <span class="s">&quot;Rounded&quot;</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Button</span><span class="p">(</span>
</span><span class='line'>      <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">,</span>
</span><span class='line'>      <span class="n">onClick</span> <span class="p">=</span> <span class="n">onClick</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">Text</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">10.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>        <span class="n">text</span> <span class="p">=</span> <span class="s">&quot;Not Rounded&quot;</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>乍一看，代码似乎运行正常。但是，当你在调用点修改Modifier时，你会注意到意外的行为，可能会以意想不到的方式改变整个布局。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">MyButtons</span><span class="p">(</span>
</span><span class='line'>  <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>    <span class="p">.</span><span class="n">clip</span><span class="p">(</span><span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">32.</span><span class="n">dp</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">Blue</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span> <span class="p">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>为了确保行为正确并避免意外问题，你应避免在多个组件中重复使用Modifier。在本节中，你了解了在设计 Compose 组件时管理Modifier的最佳实践。接下来，让我们通过实现主题来深入了解如何提供一致的 UI 样式。</p>

<h2>主题确保 UI 一致性</h2>

<p>现在，假设你需要提供多种 Compose 组件，这些组件应共享一致的样式。如果这些组件是独立提供的，那么维护这些组件之间一致样式的责任就完全落在用户身上。这可能非常具有挑战性，因为每个组件可能会公开不同的 API 来自定义其样式，从而使同步变得繁琐且容易出错。</p>

<p>在这种情况下，你可以从 Compose Material 库提供的<a href="https://developer.android.com/develop/ui/compose/designsystems/material3#material-theming"> MaterialTheme API </a>中汲取灵感。关键在于确保组件样式一致，同时允许用户无缝自定义并在各个组件之间保持一致的样式。</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/0*AyJL0G8NsCGWX9_Q" alt="Theming Consistency" /></p>

<p>Compose 的<a href="https://getstream.io/video/sdk/"> Stream Video SDK </a>通过提供名为<a href="https://getstream.io/video/docs/android/ui-components/video-theme/"> VideoTheme </a>的专用主题 API 展示了最佳实践。此 VideoTheme API 可确保 SDK 提供的所有 Compose 组件的样式一致，包括颜色、尺寸、排版、形状、涟漪效果等。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">setContent</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">VideoTheme</span><span class="p">(</span>
</span><span class='line'>        <span class="n">colors</span> <span class="p">=</span> <span class="n">StreamColors</span><span class="p">.</span><span class="n">defaultColors</span><span class="p">().</span><span class="n">copy</span><span class="p">(</span><span class="n">appBackground</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Black</span><span class="p">),</span>
</span><span class='line'>        <span class="n">dimens</span> <span class="p">=</span> <span class="n">StreamDimens</span><span class="p">.</span><span class="n">defaultDimens</span><span class="p">().</span><span class="n">copy</span><span class="p">(</span><span class="n">callAvatarSize</span> <span class="p">=</span> <span class="m">72.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>        <span class="n">shapes</span> <span class="p">=</span> <span class="n">StreamShapes</span><span class="p">.</span><span class="n">defaultShapes</span><span class="p">().</span><span class="n">copy</span><span class="p">(</span>
</span><span class='line'>            <span class="n">avatar</span> <span class="p">=</span> <span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">8.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>            <span class="n">callButton</span> <span class="p">=</span> <span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">16.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>            <span class="n">callControls</span> <span class="p">=</span> <span class="n">RectangleShape</span><span class="p">,</span>
</span><span class='line'>            <span class="n">callControlsButton</span> <span class="p">=</span> <span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">8.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">CallContent</span><span class="p">(</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">(),</span>
</span><span class='line'>            <span class="n">call</span> <span class="p">=</span> <span class="n">call</span><span class="p">,</span>
</span><span class='line'>            <span class="n">onBackPressed</span> <span class="p">=</span> <span class="p">{</span> <span class="n">finish</span><span class="p">()</span> <span class="p">},</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过将 Stream SDK 提供的组件与 VideoTheme 包装在一起（如上例所示），自定义样式将自动一致地应用于所有组件。这种方法使用户能够轻松保持其 UI 的一致性，同时调整主题以满足其应用程序的设计要求。</p>

<h3>实现自定义主题</h3>

<p>让我们深入研究如何实现自定义主题。第一步是定义设计规范，这些规范将在你的组件之间共享或为用户提供自定义功能。考虑包括颜色、形状和尺寸等方面，因为这些通常是确保设计系统一致性的最重要因素。</p>

<p>例如，在 Stream SDK 中，组件所需的所有颜色集均在<a href="https://github.com/GetStream/stream-video-android/blob/c12db8cb6367e10682be3ab323d50dfcc59032f3/stream-video-android-ui-compose/src/main/kotlin/io/getstream/video/android/compose/theme/StreamColors.kt#L24"> StreamColors </a>类中预定义，为用户提供了一种无缝的方式来保持其整个 UI 的一致性。以下是 Stream SDK 如何通过结构良好的颜色集确保一致性的示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">public</span> <span class="n">data</span> <span class="k">class</span> <span class="nc">StreamColors</span><span class="p">(</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">brandPrimary</span><span class="p">:</span> <span class="n">Color</span><span class="p">,</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">brandPrimaryLt</span><span class="p">:</span> <span class="n">Color</span><span class="p">,</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">brandPrimaryDk</span><span class="p">:</span> <span class="n">Color</span><span class="p">,</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">brandSecondary</span><span class="p">:</span> <span class="n">Color</span><span class="p">,</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">brandSecondaryTransparent</span><span class="p">:</span> <span class="n">Color</span><span class="p">,</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">brandCyan</span><span class="p">:</span> <span class="n">Color</span><span class="p">,</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">brandGreen</span><span class="p">:</span> <span class="n">Color</span><span class="p">,</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">brandYellow</span><span class="p">:</span> <span class="n">Color</span><span class="p">,</span>
</span><span class='line'>    <span class="p">..</span>
</span><span class='line'>  <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来，你应该创建一个<a href="https://developer.android.com/develop/ui/compose/compositionlocal"> CompositionLocal </a>来保存设计规范。这将允许你的组件和用户通过使用 StreamTheme.colors 调用在自定义主题的上下文中无缝访问这些规范。</p>

<p><strong>译注：</strong> CompositionLocal是Compose中用于在上下文函数调用中，隐式的传递常量性质参数的方法，可以参考这篇文章<a href="https://juejin.cn/post/7434543407636267071">用Compose中的CompositionLocal来暗渡陈仓</a>，以了解CompositionLocal的详细用法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Local providers for various properties we connect to our components, for styling.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="py">LocalColors</span> <span class="p">=</span> <span class="n">compositionLocalOf</span><span class="p">&lt;</span><span class="n">StreamColors</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">error</span><span class="p">(</span><span class="s">&quot;No colors provided! Make sure to wrap all usages of Stream components in a VideoTheme.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="n">interface</span> <span class="n">StreamTheme</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Retrieves the current [StreamColors] at the call site&#39;s position in the hierarchy.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">val</span> <span class="py">colors</span><span class="p">:</span> <span class="n">StreamColors</span>
</span><span class='line'>        <span class="n">@Composable</span> <span class="n">@ReadOnlyComposable</span>
</span><span class='line'>        <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="n">LocalColors</span><span class="p">.</span><span class="n">current</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后，你需要利用<a href="https://developer.android.com/develop/ui/compose/compositionlocal"> CompositionLocal </a>将这些设计规范封装在自定义主题中。这种方法允许你在整个可组合层次结构中高效地提供和传播你的设计规范。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">public</span> <span class="k">fun</span> <span class="nf">VideoTheme</span><span class="p">(</span>
</span><span class='line'>    <span class="n">isInDarkMode</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="n">isSystemInDarkTheme</span><span class="p">(),</span>
</span><span class='line'>    <span class="n">colors</span><span class="p">:</span> <span class="n">StreamColors</span> <span class="p">=</span> <span class="n">StreamColors</span><span class="p">.</span><span class="n">defaultColors</span><span class="p">(),</span>
</span><span class='line'>    <span class="n">content</span><span class="p">:</span> <span class="n">@Composable</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">CompositionLocalProvider</span><span class="p">(</span>
</span><span class='line'>        <span class="n">LocalColors</span> <span class="n">provides</span> <span class="n">colors</span><span class="p">,</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">content</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在，你的所有组件都应假设它们都包含在自定义主题（例如本例中的 VideoTheme）中，并使用提供的设计规范来确保整个组件集的样式一致。这种方法不仅使你的组件 API 能够采用统一的样式，还允许用户利用这些设计规范进行自定义，从而同时提高灵活性和一致性。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">VideoRendererCallContent</span><span class="p">(</span>
</span><span class='line'>    <span class="n">call</span><span class="p">:</span> <span class="n">Call</span><span class="p">,</span>
</span><span class='line'>    <span class="n">video</span><span class="p">:</span> <span class="n">ParticipantState</span><span class="p">.</span><span class="n">Video</span><span class="p">,</span>
</span><span class='line'>    <span class="n">onRendered</span><span class="p">:</span> <span class="p">(</span><span class="n">View</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span> <span class="p">=</span> <span class="p">{},</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">VideoRenderer</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">fillMaxSize</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">VideoTheme</span><span class="p">.</span><span class="n">colors</span><span class="p">.</span><span class="n">baseSheetTertiary</span><span class="p">),</span> <span class="c1">// use pre-defined color styles</span>
</span><span class='line'>        <span class="n">call</span> <span class="p">=</span> <span class="n">call</span><span class="p">,</span>
</span><span class='line'>        <span class="n">video</span> <span class="p">=</span> <span class="n">video</span><span class="p">,</span>
</span><span class='line'>        <span class="n">onRendered</span> <span class="p">=</span> <span class="n">onRendered</span><span class="p">,</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">MyScreen</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">VideoRendererCallContent</span><span class="p">(..)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// some complicated components</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MainActivity</span> <span class="p">:</span> <span class="n">ComponentActivity</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">super</span><span class="p">.</span><span class="n">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>         <span class="n">setContent</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">VideoTheme</span> <span class="p">{</span>
</span><span class='line'>               <span class="n">MyScreen</span><span class="p">()</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种方法不仅对于实现 API（库或 SDK）有效，对于构建应用程序也同样有效，因为它能够使用结构良好、预定义的设计规范轻松维护设计一致性。对于实际示例和实际用例，你可以在<a href="https://github.com/GetStream/stream-video-android/blob/c12db8cb6367e10682be3ab323d50dfcc59032f3/stream-video-android-ui-compose/src/main/kotlin/io/getstream/video/android/compose/theme/VideoTheme.kt"> GitHub </a>上探索实际最佳实践。</p>

<h2>可定制性</h2>

<p>在实现 UI 组件时，尤其是对于库或 SDK，为 UI 和 UX 行为提供强大的自定义和灵活性至关重要。这可确保用户可以轻松重复使用组件并根据其特定要求进行调整。你可以采用各种策略在 Jetpack Compose 中有效地实现这种级别的可定制性。</p>

<h3>1. 利用样式类</h3>

<p>如果你希望为特定组件提供更具针对性的定制，请考虑提供专用的样式类。此类可以定义并允许用户轻松修改组件的 UI 和 UX 行为以满足他们的特定需求。</p>

<p>一个很好的例子是 TextStyle ，它是 Compose UI 库提供的默认类：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Immutable</span>
</span><span class='line'><span class="k">class</span> <span class="nc">TextStyle</span> <span class="k">internal</span> <span class="n">constructor</span><span class="p">(</span>
</span><span class='line'>  <span class="p">..</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">constructor</span><span class="p">(</span>
</span><span class='line'>        <span class="n">color</span><span class="p">:</span> <span class="n">Color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Unspecified</span><span class="p">,</span>
</span><span class='line'>        <span class="n">fontSize</span><span class="p">:</span> <span class="n">TextUnit</span> <span class="p">=</span> <span class="n">TextUnit</span><span class="p">.</span><span class="n">Unspecified</span><span class="p">,</span>
</span><span class='line'>        <span class="n">fontWeight</span><span class="p">:</span> <span class="n">FontWeight</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>        <span class="n">fontStyle</span><span class="p">:</span> <span class="n">FontStyle</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>        <span class="n">fontSynthesis</span><span class="p">:</span> <span class="n">FontSynthesis</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>        <span class="n">fontFamily</span><span class="p">:</span> <span class="n">FontFamily</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>        <span class="p">..</span>
</span><span class='line'>     <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如上面的代码所示，TextStyle 类封装了 Text 可组合项的所有样式属性。只需将 TextStyle 实例传递给 Text 可组合项，你就可以轻松自定义其设计，如下例所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">Text</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>        <span class="p">.</span><span class="n">fillMaxWidth</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="n">top</span> <span class="p">=</span> <span class="m">16.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>    <span class="n">text</span> <span class="p">=</span> <span class="s">&quot;Stats&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">style</span> <span class="p">=</span> <span class="n">TextStyle</span><span class="p">(</span>
</span><span class='line'>        <span class="n">fontSize</span> <span class="p">=</span> <span class="m">16.</span><span class="n">sp</span><span class="p">,</span>
</span><span class='line'>        <span class="n">lineHeight</span> <span class="p">=</span> <span class="m">24.</span><span class="n">sp</span><span class="p">,</span>
</span><span class='line'>        <span class="n">fontWeight</span> <span class="p">=</span> <span class="n">FontWeight</span><span class="p">(</span><span class="m">600</span><span class="p">),</span>
</span><span class='line'>        <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">White</span><span class="p">,</span>
</span><span class='line'>        <span class="n">textAlign</span> <span class="p">=</span> <span class="n">TextAlign</span><span class="p">.</span><span class="n">Center</span><span class="p">,</span>
</span><span class='line'>    <span class="p">),</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用样式类的优点是，它们允许组件开发人员将所有设计规范整合到一个集中的类中。这种方法可以防止设计元素分散在多个布局中，从而使代码库更简洁、更易于管理。</p>

<p>对于用户来说，样式类提供了一种直接且直观的修改设计的方法。此外，用户可以在多个布局中重复使用相同的样式实例，从而更方便地在不同布局中应用一致的自定义。</p>

<p>一个潜在的缺点是，由于<a href="https://getstream.io/blog/jetpack-compose-stability/#jetpack-compose-phases">重组机制（Recomposition）</a>，每当输入发生变化时，Compose 运行时都会比较样式类的所有属性，以确定是否需要重组。与直接在可组合函数中定义单个参数相比，这使其成本略高。然而，从 API 设计的角度来看，改进的用户体验和简化的 API 管理通常超过了这一成本，因此在许多情况下，这是一种值得的权衡。</p>

<h3>2. 借助插槽（Slots）的灵活性</h3>

<p>增强自定义灵活性的另一种有效策略是提供接受可组合函数的插槽，让用户根据自己的需求定义特定的实现。通过提供默认实现，你可以确保用户无需付出额外努力即可利用所提供的功能，同时仍然可以根据需要进行自定义。</p>

<p>例如，Stream Video SDK 提供的 CallContent 组件是一个高级 API，它集成了多个子组件，包括顶部应用栏、视频渲染器、布局结构、网格参与者等。虽然 CallContent API 包含默认实现以方便使用，但它还通过允许通过插槽参数进行自定义来确保灵活性，如以下代码所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">fun</span> <span class="nf">CallContent</span><span class="p">(</span>
</span><span class='line'>    <span class="n">call</span><span class="p">:</span> <span class="n">Call</span><span class="p">,</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="n">style</span><span class="p">:</span> <span class="n">VideoRendererStyle</span> <span class="p">=</span> <span class="n">RegularVideoRendererStyle</span><span class="p">(),</span>
</span><span class='line'>    <span class="n">appBarContent</span><span class="p">:</span> <span class="n">@Composable</span> <span class="p">(</span><span class="n">call</span><span class="p">:</span> <span class="n">Call</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">CallAppBar</span><span class="p">(..)</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="n">videoRenderer</span><span class="p">:</span> <span class="n">@Composable</span> <span class="p">(..)</span> <span class="p">-&gt;</span> <span class="n">Unit</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">ParticipantVideo</span><span class="p">(..)</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="n">videoContent</span><span class="p">:</span> <span class="n">@Composable</span> <span class="n">RowScope</span><span class="p">.(</span><span class="n">call</span><span class="p">:</span> <span class="n">Call</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">ParticipantsLayout</span><span class="p">(..)</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">..</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种方法允许用户实现自己的顶部应用栏、视频渲染器、布局结构、网格参与者等自定义版本。此外，另一种有效的策略是将相似类型的组件分组，并通过插槽使它们可自定义，这通常称为复合组件模式。</p>

<p>复合组件模式涉及创建一个父组件来管理子组件集合，通过为每个子组件公开插槽来提供自定义。此模式允许用户替换或自定义单个子组件，同时保持整体结构和功能的一致性。</p>

<p>想象一下视频通话屏幕上的控制面板包含多个操作按钮，如下图所示：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:886/format:webp/0*mNh-EWJlyCobHHed" alt="Control Panel" /></p>

<p>有些用户可能喜欢不同的操作按钮顺序，例如将麦克风按钮放在第一位，而其他用户可能希望根据其特定用例添加、删除或自定义按钮。在这种情况下，复合组件模式被证明在满足这些不同的要求方面非常有效，例如下面的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">public</span> <span class="k">fun</span> <span class="nf">ControlActions</span><span class="p">(</span>
</span><span class='line'>    <span class="n">call</span><span class="p">:</span> <span class="n">Call</span><span class="p">,</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="n">actions</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;(</span><span class="n">@Composable</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">)&gt;</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">LazyRow</span><span class="p">(</span>
</span><span class='line'>            <span class="n">verticalAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">CenterVertically</span><span class="p">,</span>
</span><span class='line'>            <span class="n">horizontalArrangement</span> <span class="p">=</span> <span class="n">Arrangement</span><span class="p">.</span><span class="n">spacedBy</span><span class="p">(</span>
</span><span class='line'>                <span class="n">VideoTheme</span><span class="p">.</span><span class="n">dimens</span><span class="p">.</span><span class="n">spacingM</span><span class="p">,</span>
</span><span class='line'>                <span class="n">Alignment</span><span class="p">.</span><span class="n">CenterHorizontally</span><span class="p">,</span>
</span><span class='line'>            <span class="p">),</span>
</span><span class='line'>        <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">items</span><span class="p">(</span><span class="n">actions</span><span class="p">)</span> <span class="p">{</span> <span class="n">action</span> <span class="p">-&gt;</span>
</span><span class='line'>                <span class="n">action</span><span class="p">.</span><span class="n">invoke</span><span class="p">()</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码演示了一个接受 Composable 函数列表的单个插槽，然后使用 Row 或 LazyRow 进行渲染。这种方法允许你提供高度灵活的组件 API，同时保持对组件布局预期结构的控制。</p>

<p>之后，你还可以提供默认实现，如下所示，以增加便利性。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">public</span> <span class="k">fun</span> <span class="nf">buildDefaultCallControlActions</span><span class="p">(</span>
</span><span class='line'>    <span class="n">onCallAction</span><span class="p">:</span> <span class="p">(</span><span class="n">CallAction</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span>
</span><span class='line'><span class="p">):</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">@Composable</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">listOf</span><span class="p">(</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">ToggleCameraAction</span><span class="p">(</span>
</span><span class='line'>                <span class="n">onCallAction</span> <span class="p">=</span> <span class="n">onCallAction</span><span class="p">,</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">ToggleMicrophoneAction</span><span class="p">(</span>
</span><span class='line'>                <span class="n">onCallAction</span> <span class="p">=</span> <span class="n">onCallAction</span><span class="p">,</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">FlipCameraAction</span><span class="p">(</span>
</span><span class='line'>                <span class="n">onCallAction</span> <span class="p">=</span> <span class="n">onCallAction</span><span class="p">,</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">public</span> <span class="k">fun</span> <span class="nf">ControlActions</span><span class="p">(</span>
</span><span class='line'>    <span class="n">call</span><span class="p">:</span> <span class="n">Call</span><span class="p">,</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="n">onCallAction</span><span class="p">:</span> <span class="p">(</span><span class="n">CallAction</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span> <span class="p">=</span> <span class="p">{</span> <span class="n">DefaultOnCallActionHandler</span><span class="p">.</span><span class="n">onCallAction</span><span class="p">(</span><span class="n">call</span><span class="p">,</span> <span class="n">it</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'>    <span class="n">actions</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;(</span><span class="n">@Composable</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">)&gt;</span> <span class="p">=</span> <span class="n">buildDefaultCallControlActions</span><span class="p">(</span><span class="n">onCallAction</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如需了解更多<a href="https://getstream.io/video/docs/android/ui-components/call/call-controls/"> ControlActions </a>的真实示例，你可以探索<a href="https://github.com/GetStream/stream-video-android/blob/c12db8cb6367e10682be3ab323d50dfcc59032f3/stream-video-android-ui-compose/src/main/kotlin/io/getstream/video/android/compose/ui/components/call/controls/ControlActions.kt#L48"> GitHub </a>上的实现。</p>

<h3>3. 使用主题进行定制</h3>

<p>设计 Compose 组件时的另一个常见挑战是，随着组件层次结构的变大，提供清晰、直接的可定制性变得更加困难。例如，假设你想为组件多个部分使用的视频渲染器提供可定制性，但 UI 层次结构嵌套很深且很复杂，如下例所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">CallContent</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">ParticipantsLayout</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">ParticipantsRegularGrid</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">OrientationVideoRenderer</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">LazyVerticalGrid</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">VideoRenderer</span><span class="p">()</span> <span class="c1">// &lt;-- users want to customize this renderer style</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">FloatingVideoRenderer</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">VideoRenderer</span><span class="p">()</span> <span class="c1">// &lt;-- users want to customize this renderer style</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这种情况下，将插槽或样式参数从最顶层的组件一直传递到 VideoRenderer 组件并不理想。随着你在不同组件之间添加更多可定制性，最顶层的组件 (CallContent) 可能会因大量插槽和样式参数而变得过载。这不仅使你的 API 更难维护，而且还增加了用户混淆或误用的可能性，因为不清楚哪个参数用于什么用途。</p>

<p>为了解决这个问题，你可以利用自定义主题和<a href="https://developer.android.com/develop/ui/compose/compositionlocal"> CompositionLocal</a>来实现可定制性，同时保持 API 更清晰、更易于管理，如下例所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Immutable</span>
</span><span class='line'><span class="k">public</span> <span class="n">data</span> <span class="k">class</span> <span class="nc">VideoRendererStyle</span><span class="p">(</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">backgroundColor</span><span class="p">:</span> <span class="n">Color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Black</span><span class="p">,</span>
</span><span class='line'>    <span class="p">..</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="py">LocalVideoRendererStyle</span> <span class="p">=</span> <span class="n">compositionLocalOf</span><span class="p">&lt;</span><span class="n">VideoRendererStyle</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">error</span><span class="p">(</span><span class="s">&quot;No VideoRendererStyle provided! Make sure to wrap all usages of Stream components in a VideoTheme.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">public</span> <span class="k">fun</span> <span class="nf">VideoTheme</span><span class="p">(</span>
</span><span class='line'>    <span class="n">videoRendererStyle</span><span class="p">:</span> <span class="n">VideoRendererStyle</span> <span class="p">=</span> <span class="n">VideoRendererStyle</span><span class="p">(),</span>
</span><span class='line'>    <span class="n">content</span><span class="p">:</span> <span class="n">@Composable</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">CompositionLocalProvider</span><span class="p">(</span>
</span><span class='line'>        <span class="n">LocalVideoRendererStyle</span> <span class="n">provides</span> <span class="n">videoRendererStyle</span><span class="p">,</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">content</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在，你可以通过在不同的组件中使用提供的样式来确保组件样式的一致性，而无需将它们作为参数反复传递。此外，用户可以通过创建自己的自定义主题轻松自定义样式，如下例所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">setContent</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">VideoTheme</span><span class="p">(</span>
</span><span class='line'>        <span class="n">videoRendererStyle</span> <span class="p">=</span> <span class="n">VideoRendererStyle</span><span class="p">(</span><span class="n">backgroundColor</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Blue</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">..</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你希望更广泛地应用此策略并高效地管理更多样式，则可以将它们合并为一个类，例如 StreamStyles ，并提供统一的样式类，而不是 CompositionLocal 中的多个单独样式。有些同学可能会担心 CompositionLocal 带来的性能影响，因为它会在值更改时触发布局层次结构的重组，但主题通常不会在应用程序中频繁更新。它们通常是静态的，以确保设计一致性，因此在这种情况下使用 CompositionLocal 是一种合适且有效的选择。</p>

<h2>预览（Preview）的兼容性</h2>

<p>提供预览非常重要，尤其是在构建组件 API 时，因为它们允许开发人员直接在 Android Studio 中可视化和验证他们的 UI 设计。
一些同学依靠<a href="https://developer.android.com/develop/ui/compose/tooling#live-edit-literals"> Live Literals </a>来动态展示预览中的变化，而其他同学则使用屏幕截图测试来确保其组件的视觉一致性。因此，在实现 Compose 组件时，必须确保它们与 Android Studio 中的预览功能完全兼容，如下面的屏幕截图所示：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/0*R74xLmTnWswi86ww" alt="Preview" /></p>

<p>有时，你的组件可能会产生副作用，例如在发出网络请求或处理动态状态后渲染图像，这可能会导致预览出现故障。在这种情况下，你可以利用<a href="https://developer.android.com/develop/ui/compose/tooling/previews#localinspectionmode"> LocalInspectionMode</a>。</p>

<p>LocalInspectionMode 允许你确定可组合项是否在预览模式下呈现，从而使你可以呈现专门用于预览目的的专用布局。这种方法可确保预览保持功能，即使你的组件依赖于复杂的逻辑或外部资源。你可以从<a href="https://github.com/skydoves/landscapist"> Landscapist </a>中找到一个用于网络图像加载的 Jetpack Compose 库的真实示例，它演示了处理预览的最佳实践。</p>

<p>下面的可组合函数会检查它是否处于预览模式。如果是，它会渲染静态图像，而不是执行诸如获取网络数据之类的副作用。这种方法允许用户为 GlideImage 可组合函数构建自己的预览，而不会在预览渲染期间遇到运行时错误。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">public</span> <span class="k">fun</span> <span class="nf">GlideImage</span><span class="p">(</span>
</span><span class='line'>  <span class="n">imageModel</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Any</span><span class="p">?,</span>
</span><span class='line'>  <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>  <span class="n">previewPlaceholder</span><span class="p">:</span> <span class="n">Painter</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>  <span class="p">..</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">LocalInspectionMode</span><span class="p">.</span><span class="n">current</span> <span class="p">&amp;&amp;</span> <span class="n">previewPlaceholder</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">Image</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">,</span>
</span><span class='line'>        <span class="n">painter</span> <span class="p">=</span> <span class="n">previewPlaceholder</span><span class="p">,</span>
</span><span class='line'>        <span class="p">..</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// complex logic about requesting network data and render it</span>
</span><span class='line'>  <span class="p">..</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>为了增强项目中的整体预览策略，请考虑探索<a href="https://getstream.io/blog/effective-compose-preview/">设计有效的 UI 以增强 Compose 预览</a>。此资源提供了有价值的见解和技术，可有效优化你的 Compose 预览。</p>

<h2>结论</h2>

<p>在本文中，我们探讨了在 Jetpack Compose 中制作有效 UI 组件的策略，重点关注最佳实践，例如高效处理Modifier、确保设计与主题一致、实施可定制性策略以及增强预览兼容性。设计直观且强大的 API 始终是一项挑战，但努力终将获得回报，因为用户体验和开发者满意度显著提升。</p>

<p>如果你对本文有任何疑问或反馈，可以在 Twitter<a href="https://twitter.com/github_skydoves"> @github_skydoves </a>或<a href="https://github.com/skydoves"> GitHub </a>上找到作者。如果你想随时了解 Stream 的最新动态，请在 Twitter 上关注我们<a href="https://twitter.com/getstream_io"> @getstream_io</a>，获取更多精彩的技术内容。</p>

<p>老规矩，祝你编码愉快！ &ndash; <a href="https://github.com/skydoves">Jaewoong</a></p>

<p>最初<a href="https://getstream.io/blog/designing-effective-compose/">发布于 GetStream.io</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding Algorithm Tarjan]]></title>
    <link href="https://alexhilton.github.io/blog/2025/03/07/understanding-algorithm-tarjan/"/>
    <updated>2025-03-07T20:45:57+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/03/07/understanding-algorithm-tarjan</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p><a href="https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm">Tarjan算法</a>是用于寻找图中强连通组件的高效算法。通常叫做「割点」或者「割边」，也叫做桥，也就是说如果去掉了某个节点，或者某条边，图中的连通分量数量会增加，那么这样的节点就是割点，这样的边就是桥。</p>

<p>比如说，下面这个图中的节点2就是一个「割点」：</p>

<p><a href="https://alexhilton.github.io/blog/2025/03/07/understanding-algorithm-tarjan/"><img src="https://oi-wiki.org/graph/images/cut1.svg" title="auto auto" ></a></p>

<!-- more -->


<p>而下面这个图中的红色的边就是「桥」：</p>

<p><img src="https://oi-wiki.org/graph/images/bridge1.svg" alt="Cut edge/Bridge" /></p>

<h2>Tarjan&rsquo;s Algorithm</h2>

<p>寻找「割点」和「桥」的朴素方法是，遍历每一个节点，或者边，尝试去掉它，然后查看连通分量的数量有没有增加，显然这样复杂度很高至少是O(n<sup>2</sup>)的，所以要介绍一个常用的算法：Tarjan。</p>

<p>为了简单，假定图的节点为0~n-1，需要两个辅助数组disc[n]用以表示每个节点被访问到的次序，或者说被访问到的时间戳，需要注意，这个对于图中节点来说是唯一的，且与每个节点是一一对应的，代表着遍历过程中访问到每个节点的次序。目的是用于唯一标识每个节点，以及节点在遍历中的次序。</p>

<p>另一个辅助数组是low[n]，它记录的是当前节点所在的子树中被访问到的最早的节点，也就是强连通分量子树的根。也就是说low[u]的值是包含u在内的子树的根，它一定是最早被访问的。原理在于，强连通分量一定有环，那么从当前节点u再往回返回到的u之前的节点时，就形成了环，也即是连通分量，low[u]就记录着这个连通分量的根，也即最早被访问到的节点。显然，当low[u] = u时，就找到了这个根节点，当然也找到了一个强连通分量，如果在遍历过程中记录顶点，那么当low[u] = u时，记录过的顶点就都在一个强连通分量里面。</p>

<p>需要注意的是，这里遍历的方法要用DFS，因为DFS肯定能以最快的方式找到环，回到已遍历过的节点。</p>

<h2>典型题目</h2>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/critical-connections-in-a-network/description/">1192. 查找集群内的关键连接</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/critical-connections-in-a-network/solutions/3599268/xi-you-yuan-su-1192-cha-zhao-ji-qun-nei-8wm0m/">题解</a> </td>
<td style="text-align:left;"> 板子题 </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h2>关联知识</h2>

<p><a href="https://en.wikipedia.org/wiki/Strongly_connected_component">强连通分量</a>，强连通分量是指图中的一组相互均可达的节点组成的子集。注意，强连通分量里面的节点，只需要相互均可达，并不要求直接有边连接。</p>

<p>不同的强连通分量之间的连接（即边或者顶点）即是「割点」和「桥」。</p>

<p>寻找强连通分量的算法，除了Tarjan以外，还有<a href="https://en.wikipedia.org/wiki/Kosaraju%27s_algorithm">Kosaraju算法</a>。</p>

<h2>References</h2>

<ul>
<li><a href="https://www.geeksforgeeks.org/tarjan-algorithm-find-strongly-connected-components/">Tarjan’s Algorithm to find Strongly Connected Components</a></li>
<li><a href="https://www.baeldung.com/cs/scc-tarjans-algorithm">Finding Strongly Connected Components: Tarjan’s Algorithm</a></li>
<li><a href="https://oi-wiki.org/graph/cut/">割点和桥</a></li>
<li><a href="https://leetcode.cn/problems/critical-connections-in-a-network/solutions/2078647/mobanjibie-by-lao-song-2f-1r0d/?envType=study-plan-v2&amp;envId=graph-theory">Tarjan 算法的模板题（Java 版本）</a></li>
<li><a href="https://www.geeksforgeeks.org/strongly-connected-components/">Strongly Connected Components</a></li>
<li><a href="https://www.geeksforgeeks.org/kosarajus-algorithm-in-c/">Kosaraju’s Algorithm in C</a></li>
<li><a href="https://www.baeldung.com/cs/kosaraju-algorithm-scc">Finding Strongly Connected Components: Kosaraju’s Algorithm</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[不使用Jetpack Compose的10个理由]]></title>
    <link href="https://alexhilton.github.io/blog/2025/03/06/reasons-not-to-use-jetpack-compose/"/>
    <updated>2025-03-06T22:25:19+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/03/06/reasons-not-to-use-jetpack-compose</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自<a href="https://sonique6784.medium.com/10-reasons-to-not-use-jetpack-compose-719de5d37c9e">10 reasons to NOT use Jetpack Compose</a>，原文发布于2024年9月24日。</p></blockquote>

<p><strong>译者按：</strong> 软件开发行业从不缺少优秀的工具，当然也没有银弹。身为开发者要学会选择合适的工具，避免出现手里拿着锤子，看什么都是钉子。那么就需要搞清楚两个事情，一个是面临的到底是什么样的问题，以及每种工具它的合适场景是什么。没有对与错，只有合适不合适。这篇文章就是帮助大家更清晰地了解到Jetpack Compose适用的场景，帮助Android开发者做出最合适的选择。</p>

<h2>简介</h2>

<p>Jetpack Compose 是一款出色的 UI 工具包，受到 Android 社​​区的热烈欢迎。它提供了一种为你的 Android 应用构建令人愉悦的 UI 的现代方式。</p>

<p><a href="https://alexhilton.github.io/blog/2025/03/06/reasons-not-to-use-jetpack-compose/"><img src="https://www.sixt.tech/assets/jetpack-compose/jetpack-compose.png" title="auto auto" ></a></p>

<!-- more -->


<p>我确实喜欢 Jetpack Compose，但与任何技术一样，它也有一些注意事项。在本文中，我们将了解在什么情况下使用 View 系统更为明智以及原因。</p>

<h2>1. 尽可能减少依赖</h2>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*BSFMClR4UbDbGhkXdfHhqg.png" alt="Compose Dependencies" /></p>

<p>如果你需要尽可能少的依赖项，这可能是出于兼容性或安全性目的，那么使用 View 系统可能会更好。View 系统不需要额外的导入。它位于 Android 系统内部，与 Jetpack Compose 不同，后者需要大量依赖项，这会增加包占用空间和运行时的内存使用量，并为额外的风险打开大门。</p>

<h2>2. 性能</h2>

<p>View 系统自 Android 的第一个版本以来就一直存在，它非常成熟，15 年来已经进行了大量优化，对于复杂的布局，其性能通常比 Jetpack Compose 更好。Jetpack Compose 在每次迭代中都在改进，有时已经比 View 更好，请关注这个领域，View 可能很快就会失去性能之王的桂冠！</p>

<h2>3. Espresso测试</h2>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*xEebB2vruLxuGrxeoePu0g.png" alt="Espresso测试" /></p>

<p>如果你有大量基于 View 的 Espresso 测试，或者想要使用 Android Studio 中的测试记录功能，最好避免使用 Jetpack Compose，或者只考虑将 Jetpack Compose 用于新的页面。无法轻松将于View 的 Espresso 测试迁移到 Compose。此外<a href="https://developer.android.com/studio/test/other-testing-tools/espresso-test-recorder">记录 Espresso 测试功能</a>不适用于 Compose。但是，可以<a href="https://developer.android.com/develop/ui/compose/testing">手动编写 Espresso </a>来测试 Compose。</p>

<h2>4. 稳定性和成熟度</h2>

<p>我们在「性能」部分简要提到了这一点。Jetpack Compose 已有 3 年历史，每次发布都会有所改进，但有时可能会出现错误。此外，许多 Compose 功能仍处于实验阶段，需要注解才能使用。使用实验性功能可能会给你的业务带来潜在的问题。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// 有些特性，如Modifier，Layout和Material Design是实验性质的，需要显式的用OptInt。</span>
</span><span class='line'><span class="n">@OptIn</span><span class="p">(</span><span class="n">ExperimentalMaterialApi</span><span class="o">::</span><span class="k">class</span><span class="p">)</span>
</span><span class='line'><span class="n">@OptIn</span><span class="p">(</span><span class="n">@ExperimentalFoundationApi</span><span class="o">::</span><span class="k">class</span><span class="p">)</span>
</span><span class='line'><span class="n">@OptIn</span><span class="p">(</span><span class="n">ExperimentalComposeUiApi</span><span class="o">::</span><span class="k">class</span><span class="p">)</span>
</span><span class='line'><span class="n">@OptIn</span><span class="p">(</span><span class="n">ExperimentalLayoutApi</span><span class="o">::</span><span class="k">class</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你需要非常高的成熟度和稳定性，你可能希望坚持使用View 系统。</p>

<h2>5. 功能缺失</h2>

<p>View 系统是 Android 历史的一部分。许多 Android 功能首先在 View 上可用，然后移植到 Compose，通常 Compose 可能只提供一个包装器（例如 Google Maps）。因此，你可能希望保留 View 系统，直到这些功能在 Compose 上可用。请注意，你可以使用 AndroidView 访问那些仅限 View 的功能，Compose 最终会实现这一点。</p>

<h2>6. 广泛应用于现有应用中</h2>

<p>在你的职业生涯中，你很可能需要处理 View。许多大公司即使采用了 Jetpack Compose，仍然使用 View。将 View 页面迁移到 Compose 可能会带来高昂的成本，而对最终客户而言，价值相对较低。大多数公司选择逐步采用 Compose，使用 View 系统来维护较旧的 UI。你可能需要 View 技能才能有效地将 View 转换为 Compose。</p>

<h2>7.APK 大小</h2>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*MyanicOBr--xVFZUqSaxEg.png" alt="APK大小" /></p>

<p>如果你担心软件包的大小，你可以重新考虑是否采用 Jetpack Compose。它将使你的软件包大小至少<a href="https://www.reddit.com/r/androiddev/comments/1c5vjhi/i_see_your_enterprisegrade_jetpack_compose_11mb/">增加几MB</a>，虽然你可以启用<a href="https://r8.googlesource.com/r8/+/refs/heads/master/compatibility-faq.md#r8-full-mode"> R8 完整模式</a>以进一步减小大小。但是，View 系统的占用的额外空间几乎为零，因为组件是系统的一部分，不需要额外的库。</p>

<h2>8. 与旧设备的兼容性</h2>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*C-GWYdBlBQfjl4jHLexP7Q.png" alt="老旧设备你" /></p>

<p>Jetpack Compose 最高可兼容 Android API 21（Lollipop🍭 、Android 5.0）。如果你想要针对性地适配以前的 Android 版本，则必须使用 View。</p>

<h2>9. 嵌入和物联网设备</h2>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*WMYdpUZ4oDT6Axy2GSp0CQ.png" alt="物联网设备" /></p>

<p>单一用途的设备（自助服务终端、支付终端、自助结账）通常只运行一个应用，并且 CPU 和 RAM 资源有限。对于这些设备来说，Jetpack Compose 可能太重了，可能需要 Android 开发人员使用 View 系统来适应设备规格。这些设备也可能运行比较旧的Android版本，如 4.0 版。</p>

<h2>10. 你不想学习新东西</h2>

<p>也许你已经接近职业生涯的尾声，或者想要转到其他领域，那么在某些情况下，学习 Jetpack Compose 是没有意义的。学习曲线有点陡峭，因为与 View 相比，这是一种非常新的 UI 开发方法。不过，学习它可能很有用，因为其他框架（如 React 和 Flutter）也使用了某些类似的原理。</p>

<h2>结论</h2>

<p>Jetpack Compose 是一款出色的 UI 工具包，无疑是 Android 的未来，但它并不是唯一的 UI 工具包，View 已经证明它工作得很好，虽然有些人认为它是遗留的，但最好选择适合你的需求和限制的框架。
无论你选择哪种框架，玩得开心！Android 开发丰富多样，作为 Android 开发人员，我们的职责就是利用这些优势。</p>

<p>感谢你阅读本文，希望你喜欢并学到一些东西。请帮忙点赞，以表示你的支持！</p>

<p>本文由<a href="http://androiddev.news/"> Android 开发者新闻</a>赞助，在<a href="https://play.google.com/store/apps/details?id=sonique.fr.adn"> Play 商店下载</a>应用程序。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[理解Android中的内存泄漏以及如何让LeakCanary来帮忙]]></title>
    <link href="https://alexhilton.github.io/blog/2025/03/01/understanding-memory-leaks/"/>
    <updated>2025-03-01T11:05:54+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/03/01/understanding-memory-leaks</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自<a href="https://proandroiddev.com/understanding-memory-leaks-in-android-how-leakcanary-can-help-4768df60f646">Understanding Memory Leaks in Android &amp; How LeakCanary Can Help</a>，原文发布于2024年12月27日。</p></blockquote>

<p><strong>译者注：</strong> 关于内存优化，笔者也曾经写过两篇文章，侧重于内存问题的深入分析，如有兴趣可以作为拓展阅读：<a href="https://juejin.cn/post/7277489569958756364">让你不再惧怕内存优化</a>和<a href="https://juejin.cn/post/7287913786038992915">Android应用性能剖析全攻略</a>。</p>

<p><a href="https://alexhilton.github.io/blog/2025/03/01/understanding-memory-leaks/"><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*Sx4veSpq_Z1oYBsP5Q7nwQ.jpeg" title="auto auto" ></a></p>

<!-- more -->


<p>作为 Android 开发者，管理内存是构建高性能应用的一个最关键方面。开发者面临的一个最常见问题是内存泄漏。这些泄漏会对应用的性能和用户体验产生负面影响，导致运行缓慢、崩溃甚至电池耗尽你。但别担心——有一种解决方案可以让发现和修复内存泄漏变得更容易，那就是LeakCanary。</p>

<p>在这篇文章中，我们将首先探讨什么是内存泄漏、为什么会发生内存泄漏，然后介绍 LeakCanary 作为检测和修复 Android 应用程序中这些泄漏的强大工具。</p>

<h2>什么是内存泄漏？</h2>

<p>当你的应用保留不再需要的内存时，就会发生内存泄漏。简单来说，当不再使用的对象没有从内存中正确清除时，就会发生内存泄漏，从而导致你的应用消耗了不必要的内存。随着时间的推移，这可能会导致性能下降，在极端情况下，还会导致应用崩溃。</p>

<h2>内存泄漏为何如此危险？</h2>

<p>内存泄漏乍一看似乎无害，但它可能会给你的 Android 应用带来严重问题：</p>

<ol>
<li><strong>内存使用量增加：</strong> 当内存未释放时，应用会不断消耗更多资源，导致内存消耗过高。</li>
<li><strong>性能下降：</strong> 随着时间的推移，内存中保存的对象越来越多，应用会变得越来越慢，导致延迟和用户体验不佳。</li>
<li><strong>应用崩溃：</strong> 如果内存消耗达到临界水平，你的应用可能会崩溃甚至强制关闭。</li>
<li><strong>电池耗尽：</strong> 内存泄漏可能导致进程在后台运行，从而比预期更快地耗尽设备电池。</li>
</ol>


<h2>Android 中内存泄漏的常见原因</h2>

<ol>
<li><strong>保存对上下文的引用：</strong> 如果你在静态变量或单例中保存对 Activity 或 Context 的引用，它将永远不会被垃圾回收，因为系统仍会考虑正在使用的 Activity 或 Context。</li>
<li><strong>内部类和匿名类：</strong> 它们隐式保存对外部类（通常是 Activity 或 Fragment）的引用，从而防止它们被垃圾回收。</li>
<li><strong>未关闭的资源：</strong> 完成后不关闭 Cursor、Stream 或数据库连接等资源可能会导致内存堆积。</li>
<li><strong>事件侦听器：</strong> 如果你向 UI 元素添加侦听器（例如 OnClickListener），但在不再需要它们后没有将其删除，这些对象可能会泄漏内存。</li>
</ol>


<h2>LeakCanary 如何帮助检测 Android 中的内存泄漏</h2>

<p>现在我们了解了内存泄漏可能导致的问题，让我们来讨论一下可以帮助我们检测内存泄漏的工具：LeakCanary。</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/0*xas01FOk-1FlwDFe.png" alt="LeakCanary" /></p>

<p>LeakCanary 是一个适用于 Android 的开源内存泄漏检测库。它旨在自动识别开发过程中应用中的内存泄漏，让你在影响用户之前修复它们。</p>

<ul>
<li>当发生内存泄漏时，LeakCanary 会自动触发堆转储，对其进行分析，并向开发人员提供一份报告，指出泄漏发生的位置。这使开发人员能够更轻松地发现和解决内存泄漏，以免导致性能问题。</li>
</ul>


<h3>LeakCanary 如何工作？</h3>

<p>LeakCanary 的工作原理是监控应用的内存并分析堆转储以识别不应该存在的对象。当检测到内存泄漏时，它会生成一份报告，显示泄漏发生的位置，从而帮助你找出根本原因。</p>

<ol>
<li><strong>堆转储：</strong> 当 LeakCanary 检测到潜在泄漏时，它会进行堆转储（应用内存的快照），并将其与垃圾回收后的堆进行比较。如果它发现不应保留的对象，它会将其标记为泄漏。</li>
<li><strong>泄漏的对象：</strong> LeakCanary 会向你显示哪些对象被保存在内存中以及引用链中，帮助你识别导致泄漏的对象以及它仍被保留的原因。</li>
<li><strong>通知：</strong> 每当 LeakCanary 发现内存泄漏时，它都会在应用的调试版本中通知你。你可以快速访问报告并开始解决问题。</li>
</ol>


<p>LeakCanary 自动检测以下对象的泄漏：</p>

<ul>
<li>销毁的 Activity 实例</li>
<li>销毁的 Fragment 实例</li>
<li>销毁的 fragment View 实例</li>
<li>清除的 ViewModel 实例</li>
<li>销毁的 Service 实例</li>
</ul>


<h3>如何将 LeakCanary 集成到 Android 项目中？</h3>

<p>要将 LeakCanary 集成到 Android 项目中，请按照以下步骤操作：</p>

<ul>
<li><strong>添加 LeakCanary 依赖项：</strong> 在 build.gradle 文件（应用程序级别）中，添加以下内容：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='Groovy'><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">debugImplementation</span> <span class="s1">&#39;com.squareup.leakcanary:leakcanary-android:2.9.1&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>初始化 LeakCanary：</strong> LeakCanary 在调试构建类型中自动初始化。但是，你可以在 Application 类中手动初始化它：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyApplication</span> <span class="kd">extends</span> <span class="n">Application</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">LeakCanary</span><span class="o">.</span><span class="na">isInAnalyzerProcess</span><span class="o">(</span><span class="k">this</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span> <span class="c1">// LeakCanary is in heap analysis process</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">LeakCanary</span><span class="o">.</span><span class="na">install</span><span class="o">(</span><span class="k">this</span><span class="o">);</span> <span class="c1">// Initialize LeakCanary</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>在调试模式下运行应用程序</strong>，LeakCanary 将在开发阶段检测内存泄漏。</li>
</ul>


<h3>如何在生产版本中使用 LeakCanary？</h3>

<p>虽然 LeakCanary 专为调试和开发而设计，但在生产环境中使用它时应谨慎。它可能会影响应用性能，并可能不必要地暴露与内存相关的数据。但是，如果你出于某种原因需要在生产环境中启用它，则可以有条件地仅在某些构建版本中添加 LeakCanary：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Groovy'><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">releaseImplementation</span> <span class="s1">&#39;com.squareup.leakcanary:leakcanary-android-no-op:2.9.1&#39;</span> <span class="c1">// No-op for release</span>
</span><span class='line'>    <span class="n">debugImplementation</span> <span class="s1">&#39;com.squareup.leakcanary:leakcanary-android:2.9.1&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样，LeakCanary 仅在调试版本中处于活动状态，而无操作版本则用于生产。</p>

<h3>你将采取什么步骤来修复 LeakCanary 报告的内存泄漏？</h3>

<p>当 LeakCanary 报告内存泄漏时，请按照以下步骤解决：</p>

<ol>
<li><p><strong>分析泄漏报告：</strong> LeakCanary 提供一份详细的报告，其中包含一个对象引用链，显示泄漏发生的位置。</p></li>
<li><p><strong>识别泄漏对象：</strong> 查找意外保存在内存中的对象（如 Activity、Fragment 或 Context）。</p></li>
<li><p><strong>修复泄漏：</strong></p>

<ul>
<li>避免将 Activity 或 Context 引用存储在静态变量或长寿命对象中。</li>
<li>确保关闭 Cursor、Stream 等资源。</li>
<li>在不再需要时删除侦听器和回调。</li>
</ul>
</li>
<li><strong>测试修复：</strong> 进行更改后，重新运行你的应用以确认内存泄漏已解决。</li>
</ol>


<h3>LeakCanary 有哪些局限性？</h3>

<p>虽然 LeakCanary 是一款出色的工具，但它也有一些局限性：</p>

<ul>
<li><strong>并非所有泄漏都能被检测到：</strong> LeakCanary 专注于 Java 堆内存泄漏，但它可能无法检测本机内存泄漏或低级问题。</li>
<li><strong>对性能的影响：</strong> 由于堆分析过程，在开发过程中运行 LeakCanary 可能会稍微减慢你的应用速度。</li>
<li><strong>不能取代良好的内存管理：</strong> 虽然 LeakCanary 有助于检测泄漏，但开发人员仍应遵循内存管理的最佳实践，以防止泄漏发生。</li>
</ul>


<h2>结论</h2>

<p>内存管理对于确保 Android 应用高效运行至关重要。LeakCanary 是一款功能强大的工具，可帮助你在内存泄漏影响应用性能之前检测并解决内存泄漏问题。通过遵循最佳实践并将 LeakCanary 集成到你的开发过程中，你可以确保你的应用保持优化状态并且不会出现与内存相关的问题。</p>

<p>检查你是否已在 Android 应用程序中完成以下所有操作：</p>

<ol>
<li><a href="https://developers.google.com/maps/documentation/places/android-sdk/memory-best-practices#rel-unused">释放未使用的资源。</a></li>
<li><a href="https://developers.google.com/maps/documentation/places/android-sdk/memory-best-practices#unreg">不再需要时取消注册监听器。</a></li>
<li><a href="https://developers.google.com/maps/documentation/places/android-sdk/memory-best-practices#cancel-tasks">不需要时取消任务。</a></li>
<li><a href="https://developers.google.com/maps/documentation/places/android-sdk/memory-best-practices#fwd-lifecyc">发生命周期方法以释放资源。</a></li>
<li><a href="https://developers.google.com/maps/documentation/places/android-sdk/memory-best-practices#latest-versions">使用最新版本的 SDK。</a></li>
</ol>


<h2>参考</h2>

<ul>
<li><a href="https://developers.google.com/maps/documentation/places/android-sdk/memory-best-practices">https://developers.google.com/maps/documentation/places/android-sdk/memory-best-practices</a></li>
<li><a href="https://square.github.io/leakcanary/">https://square.github.io/leakcanary/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[选择Retrofit还是Ktor：给Android开发者的指南]]></title>
    <link href="https://alexhilton.github.io/blog/2025/02/26/retrofit-vs-ktor/"/>
    <updated>2025-02-26T22:50:55+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/02/26/retrofit-vs-ktor</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自<a href="https://proandroiddev.com/when-to-use-retrofit-and-when-to-use-ktor-a-guide-for-android-developers-918491dcf69a">When to Use Retrofit and When to Use Ktor: A Guide for Android Developers</a></p></blockquote>

<p>作为 Android 开发人员，为你的项目选择正确的 HTTP 客户端是一项关键的决定。当今最受欢迎的两个选项莫过于 Retrofit 和 Ktor。虽然Retrofit 多年来一直是事实上的标准，但 Ktor 因其现代架构和灵活性而势头强劲。</p>

<p><a href="https://alexhilton.github.io/blog/2025/02/26/retrofit-vs-ktor/"><img src="https://robotqa.com/blog/wp-content/uploads/2024/06/202406120818248.png" title="auto auto" ></a></p>

<!-- more -->


<p>在本文中，我们将探讨你应该选择 Retrofit 或 Ktor 的场景，以及它们的优势如何满足你的应用要求。</p>

<h2>了解基础知识</h2>

<p>先来了解一下基础知识：</p>

<h3>Retrofit</h3>

<p>Retrofit 是 Square 开发的适用于 Android 和 Java 的类型安全 HTTP 客户端。它将 API 调用抽象为声明式接口，并使用 Gson 或 Moshi 等库无缝地将 JSON 解析为 Java/Kotlin 对象。</p>

<h3>Ktor</h3>

<p>Ktor 由 JetBrains 开发，是一款基于 Kotlin 的异步框架，用于构建联网应用程序。它不仅仅是一个 HTTP 客户端，而是一个多用途框架，让你能够使用同一个库构建后端服务并发出网络请求。</p>

<h2>何时使用 Retrofit？</h2>

<h3>1. 你需要简单和可读性</h3>

<p>如果你更喜欢使用预定义接口以直观的方式进行 API 调用，Retrofit 是一个绝佳的选择。</p>

<p>例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">interface</span> <span class="n">ApiService</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">@GET</span><span class="p">(</span><span class="s">&quot;posts&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">getPosts</span><span class="p">():</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Post</span><span class="p">&gt;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用 Retrofit，你可以预先定义 API 结构并专注于业务逻辑。</p>

<h3>2. 你的团队已经熟悉 Retrofit</h3>

<p>如果你的团队已有使用 Retrofit 的经验，那么坚持使用它可以降低学习曲线并加速开发。</p>

<h3>3. 你需要开箱即用的功能</h3>

<p>Retrofit 提供强大的功能，例如：</p>

<ul>
<li>自动解析 JSON 响应。</li>
<li>内置对 OkHttp 拦截器的支持。</li>
<li>轻松实现重试、缓存和日志记录。</li>
</ul>


<h3>4. 你在多语言环境中工作</h3>

<p>Retrofit 非常适合涉及 Java 和 Kotlin 的项目，因此它对于遗留代码库来说是一个绝佳的选择。</p>

<h3>5.你需要一个庞大的社区和资源</h3>

<p>Retrofit 的成熟意味着丰富的文档、教程和社区支持，这使其成为许多团队更安全的选择。</p>

<h2>何时使用 Ktor？</h2>

<h3>1. 你需要高度可定制性</h3>

<p>Ktor 允许你构建 HTTP 客户端，并对请求构建、日志记录和自定义管道进行细粒度的控制。</p>

<p>例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">client</span> <span class="p">=</span> <span class="n">HttpClient</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">install</span><span class="p">(</span><span class="n">JsonFeature</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">serializer</span> <span class="p">=</span> <span class="n">KotlinxSerializer</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2. 你想利用 Kotlin Multiplatform</h3>

<p>Ktor 的多平台支持是其突出的功能之一。如果你正在为 Android、iOS 和其他平台构建应用程序，Ktor 可确保你在所有平台上使用相同的网络逻辑。</p>

<h3>3. 你正在构建轻量级或模块化应用程序</h3>

<p>Ktor 的模块化设计使其成为轻量级应用程序或网络堆栈需要精简和集中的项目的理想选择。</p>

<h3>4.你需要异步通信</h3>

<p>Ktor 原生使用协程，这使得处理并发比传统的基于回调的方法更简单、更高效。</p>

<h3>5. 你需要统一的后端和前端代码</h3>

<p>借助 Ktor，你可以使用相同的框架构建服务器端 API 和移动应用程序，从而简化开发并确保一致性。</p>

<h2>你应该选择哪一个？</h2>

<p>用一张表格来总结一下两者各自的特点：</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> 特点 </th>
<th style="text-align:center;"> Retrofit </th>
<th style="text-align:center;"> Ktor </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> 易于使用 </td>
<td style="text-align:center;"> 高 </td>
<td style="text-align:center;"> 中等 </td>
</tr>
<tr>
<td style="text-align:center;"> Kotlin-first 设计 </td>
<td style="text-align:center;"> 否 </td>
<td style="text-align:center;"> 是 </td>
</tr>
<tr>
<td style="text-align:center;"> 跨平台支持 </td>
<td style="text-align:center;"> 否 </td>
<td style="text-align:center;"> 是 </td>
</tr>
<tr>
<td style="text-align:center;"> 可定制性 </td>
<td style="text-align:center;"> 中等 </td>
<td style="text-align:center;"> 高 </td>
</tr>
<tr>
<td style="text-align:center;"> 学习曲线 </td>
<td style="text-align:center;"> 低 </td>
<td style="text-align:center;"> 中等 </td>
</tr>
<tr>
<td style="text-align:center;"> 社区支持 </td>
<td style="text-align:center;"> 规模很大 </td>
<td style="text-align:center;"> 快速发展 </td>
</tr>
<tr>
<td style="text-align:center;"> 与协程集成 </td>
<td style="text-align:center;"> 通过添加suspend </td>
<td style="text-align:center;"> 是（集成了原生协程） </td>
</tr>
<tr>
<td style="text-align:center;"> 后端能力 </td>
<td style="text-align:center;"> 否 </td>
<td style="text-align:center;"> 是 </td>
</tr>
</tbody>
</table>


<h3>如果符合以下情况则选择 Retrofit：</h3>

<ul>
<li>你正在开发一个 Kotlin 或 Java 项目，其中简单性和快速开发是首要任务。</li>
<li>你的项目依赖于久经考验的工具和广泛的社区支持。</li>
<li>你需要对 REST API 进行最低限度的配置。</li>
</ul>


<h3>以下情况请选择 Ktor：</h3>

<ul>
<li>你正在构建一个 Kotlin Multiplatform 项目。</li>
<li>你需要一个现代、灵活的网络堆栈。</li>
<li>你需要同时支持前端和后端开发。</li>
</ul>


<h2>结论</h2>

<p>在 Retrofit 和 Ktor 之间进行选择取决于你的项目需求和你的团队对这些工具的熟悉程度。Retrofit 是传统 Android 项目的可靠选择，而 Ktor 则在现代 Kotlin 优先和多平台应用程序中表现出色。了解这些差异将有助于你为下一个 Android 应用做出正确的选择。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一文带你理解OkHttp中的Gzip压缩]]></title>
    <link href="https://alexhilton.github.io/blog/2025/02/25/understanding-okhttp-gzip-compression/"/>
    <updated>2025-02-25T22:28:09+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/02/25/understanding-okhttp-gzip-compression</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自<a href="ttps://medium.com/tech-insider/okhttps-gzip-compression-904919638458">OkHttp’s Gzip Compression</a>，原文发布于2020年5月1日。本文假定读者对HTTP有基本的了解，以及使用过OkHttp，否则理解起来可能会一点困难。</p></blockquote>

<p><strong>译注：</strong> OkHttp确实会自动添加gzip并处理响应。但如果显示的给请求添加除了gzip之外的字段，如&#8221;Accept-Encoding: gzip, deflate, br&#8221;，那么就需要手动处理响应。其实一般时候我们并不需要手动设置，除非是模拟浏览器时（比如用了浏览器的UA），或者某些服务器强制deflate字段。更多的信息可以<a href="https://stackoverflow.com/questions/51901333/okhttp-3-how-to-decompress-gzip-deflate-response-manually-using-java-android">看这里</a>。</p>

<p><a href="https://alexhilton.github.io/blog/2025/02/25/understanding-okhttp-gzip-compression/"><img src="https://img-blog.csdnimg.cn/879e064594104e0ab5671f6710ffea24.png" title="auto auto" ></a></p>

<!-- more -->


<p>压缩是一种简单有效的节省带宽和加快移动用户交互速度的方法。当用户点击你的页面屏幕时，会调用你的服务器来提供请求的响应。响应越大，屏幕上显示数据的时间就越长。通过压缩，即使你的访问者的互联网连接速度非常慢并且你的 API 响应过于繁重，他们也能享受快速加载。</p>

<h2>这是如何工作的呢？</h2>

<p><strong>Gzip 会找到相似的字符串，并用一些占位符临时替换这些字符串，以缩小整体大小。</strong>如果你使用大量重复文本，并且有大量空格， 这也没有问题。你可以使用 Gzip 压缩你的响应主体以及请求主体。由于文件小得多，此操作可大大减少传输时间。</p>

<p><strong>注意：</strong>如果你尝试使用postman，它会默认在header的隐藏部分中添加 Accept-Encoding: gzip字段。</p>

<blockquote><p>重要提示：OkHttp 也会自动在请求中添加字段 Accept-Encoding 并自动识别响应中的 Content-Encoding，因此会自行解压缩响应数据，因此无需单独设置，但假设当我们必须将压缩的请求数据发送到服务器时，我们就必须编写自己的拦截器。</p></blockquote>

<p>这种压缩的棘手之处在于请求者和服务器都知道可以发送压缩文件。你必须告诉服务器您接受这种编码，然后它才会提供。该协议分为两部分：</p>

<ul>
<li>请求者发送一个header，告知服务器它接受压缩内容：Accept-Encoding：gzip</li>
<li>服务器使用此header确认你的请求：Content-Encoding：gzip</li>
</ul>


<p>说得够多的了，我想你还有耐心，所以让我们看一些代码。</p>

<h2>编写自己的拦截器</h2>

<p>先决条件：了解 OkHttp 中的<a href="https://square.github.io/okhttp/features/interceptors/">拦截器（Interceptors）</a>。</p>

<ol>
<li>解开 Gzip 响应：在请求header中添加 Accept-Encoding: gzip，并在获取响应时在其响应header中查找 Content-Encoding: gzip。如果存在则解压缩，否则直接返回响应。</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">okhttp3.Headers</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">okhttp3.Interceptor</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">okhttp3.Request</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">okhttp3.Response</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">okhttp3.ResponseBody</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">okio.GzipSource</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">okio.Okio</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GzipInterceptor</span> <span class="kd">implements</span> <span class="n">Interceptor</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Response</span> <span class="nf">intercept</span><span class="o">(</span><span class="n">Chain</span> <span class="n">chain</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Request</span><span class="o">.</span><span class="na">Builder</span> <span class="n">newRequest</span> <span class="o">=</span> <span class="n">chain</span><span class="o">.</span><span class="na">request</span><span class="o">().</span><span class="na">newBuilder</span><span class="o">();</span>
</span><span class='line'>        <span class="n">newRequest</span><span class="o">.</span><span class="na">addHeader</span><span class="o">(</span><span class="s">&quot;Accept-Encoding&quot;</span><span class="o">,</span> <span class="s">&quot;gzip&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Response</span> <span class="n">response</span> <span class="o">=</span> <span class="n">chain</span><span class="o">.</span><span class="na">proceed</span><span class="o">(</span><span class="n">newRequest</span><span class="o">.</span><span class="na">build</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">isGzipped</span><span class="o">(</span><span class="n">response</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nf">unzip</span><span class="o">(</span><span class="n">response</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">response</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Response</span> <span class="nf">unzip</span><span class="o">(</span><span class="kd">final</span> <span class="n">Response</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="na">body</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">response</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">GzipSource</span> <span class="n">gzipSource</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">GzipSource</span><span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="na">body</span><span class="o">().</span><span class="na">source</span><span class="o">());</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">bodyString</span> <span class="o">=</span> <span class="n">Okio</span><span class="o">.</span><span class="na">buffer</span><span class="o">(</span><span class="n">gzipSource</span><span class="o">).</span><span class="na">readUtf8</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ResponseBody</span> <span class="n">responseBody</span> <span class="o">=</span> <span class="n">ResponseBody</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="na">body</span><span class="o">().</span><span class="na">contentType</span><span class="o">(),</span> <span class="n">bodyString</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Headers</span> <span class="n">strippedHeaders</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">headers</span><span class="o">().</span><span class="na">newBuilder</span><span class="o">()</span>
</span><span class='line'>                <span class="o">.</span><span class="na">removeAll</span><span class="o">(</span><span class="s">&quot;Content-Encoding&quot;</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">removeAll</span><span class="o">(</span><span class="s">&quot;Content-Length&quot;</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">response</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">()</span>
</span><span class='line'>                <span class="o">.</span><span class="na">headers</span><span class="o">(</span><span class="n">strippedHeaders</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">body</span><span class="o">(</span><span class="n">responseBody</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">message</span><span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="na">message</span><span class="o">())</span>
</span><span class='line'>                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Boolean</span> <span class="nf">isGzipped</span><span class="o">(</span><span class="n">Response</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">response</span><span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">&quot;Content-Encoding&quot;</span><span class="o">)</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">response</span><span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">&quot;Content-Encoding&quot;</span><span class="o">).</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;gzip&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>创建 Gzip 请求：如果你的请求过大，那么我们可以使用它来压缩我们的请求。为了通知服务器，我们将在请求header中添加 Content-Encoding: gzip。</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">okhttp3.Interceptor</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">okhttp3.MediaType</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">okhttp3.Request</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">okhttp3.RequestBody</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">okhttp3.Response</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">okio.BufferedSink</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">okio.GzipSink</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">okio.Okio</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GzipInterceptor</span> <span class="kd">implements</span> <span class="n">Interceptor</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span> <span class="kd">public</span> <span class="n">Response</span> <span class="nf">intercept</span><span class="o">(</span><span class="n">Interceptor</span><span class="o">.</span><span class="na">Chain</span> <span class="n">chain</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Request</span> <span class="n">originalRequest</span> <span class="o">=</span> <span class="n">chain</span><span class="o">.</span><span class="na">request</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">originalRequest</span><span class="o">.</span><span class="na">body</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">originalRequest</span><span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">&quot;Content-Encoding&quot;</span><span class="o">)</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">chain</span><span class="o">.</span><span class="na">proceed</span><span class="o">(</span><span class="n">originalRequest</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Request</span> <span class="n">compressedRequest</span> <span class="o">=</span> <span class="n">originalRequest</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">()</span>
</span><span class='line'>                <span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">&quot;Content-Encoding&quot;</span><span class="o">,</span> <span class="s">&quot;gzip&quot;</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">method</span><span class="o">(</span><span class="n">originalRequest</span><span class="o">.</span><span class="na">method</span><span class="o">(),</span> <span class="n">gzip</span><span class="o">(</span><span class="n">originalRequest</span><span class="o">.</span><span class="na">body</span><span class="o">()))</span>
</span><span class='line'>                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">chain</span><span class="o">.</span><span class="na">proceed</span><span class="o">(</span><span class="n">compressedRequest</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">RequestBody</span> <span class="nf">gzip</span><span class="o">(</span><span class="kd">final</span> <span class="n">RequestBody</span> <span class="n">body</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">RequestBody</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span> <span class="kd">public</span> <span class="n">MediaType</span> <span class="nf">contentType</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">body</span><span class="o">.</span><span class="na">contentType</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">long</span> <span class="nf">contentLength</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="c1">// 事先不知道请求内容的长度</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">writeTo</span><span class="o">(</span><span class="n">BufferedSink</span> <span class="n">sink</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">BufferedSink</span> <span class="n">gzipSink</span> <span class="o">=</span> <span class="n">Okio</span><span class="o">.</span><span class="na">buffer</span><span class="o">(</span><span class="k">new</span> <span class="nf">GzipSink</span><span class="o">(</span><span class="n">sink</span><span class="o">));</span>
</span><span class='line'>                <span class="n">body</span><span class="o">.</span><span class="na">writeTo</span><span class="o">(</span><span class="n">gzipSink</span><span class="o">);</span>
</span><span class='line'>                <span class="n">gzipSink</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">};</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>好了，就到这里吧，如果你愿意的话，可以赞一下。</p>

<p>参考资料：</p>

<ol>
<li><a href="https://square.github.io/okhttp/">https://square.github.io/okhttp/</a></li>
<li><a href="https://www.apphp.com/tutorials/index.php?page=gzip-and-deflate-compression-in-web-development">https://www.apphp.com/tutorials/index.php?page=gzip-and-deflate-
compression-in-web-development</a></li>
<li><a href="https://www.youtube.com/watch?v=Mjab_aZsdxw">https://en.wikipedia.org/wiki/Gzip</a></li>
<li><a href="https://www.youtube.com/watch?v=Mjab_aZsdxw">https://www.youtube.com/watch?v=Mjab_aZsdxw</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[详解DiffUtils、Myers算法和 Jetpack Compose]]></title>
    <link href="https://alexhilton.github.io/blog/2025/02/24/diffutils-and-jetpack-compose/"/>
    <updated>2025-02-24T22:33:47+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/02/24/diffutils-and-jetpack-compose</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自<a href="https://proandroiddev.com/diffutils-myers-algorithm-and-jetpack-compose-028c726e574d">《DiffUtils, Myers’ Algorithm and Jetpack Compose》</a>，原文发布于2024年12月27日。</p></blockquote>

<p>在 Android UI 开发领域，DiffUtils 是优化 RecyclerView 中列表更新的必备工具。DiffUtils 是一个实用程序类，它计算将一个列表转换为另一个列表所需的<strong>最小更改</strong>，并仅更新 UI 中已更改的部分，从而<strong>节省性能并减少不必要的重绘</strong>。这个强大的工具依赖于<strong>Myers算法</strong>，这是一种在两个序列之间找到<strong>最短编辑脚本（Shortest edit script）</strong>的有效方法。</p>

<p><a href="https://alexhilton.github.io/blog/2025/02/24/diffutils-and-jetpack-compose/"><img src="https://www.pngmart.com/files/Android-App-Development-PNG-Free-Download.png" title="auto auto" ></a></p>

<!-- more -->


<p>但在 Jetpack Compose 中，是没有DiffUtils的，这又是为什么呢？</p>

<p>在这篇博客中，我将详细分析 DiffUtils 的工作原理、它与 Myers 算法的联系、为什么它是现代 Android 开发的重要组成部分，并探讨为什么 DiffUtil 在 Compose 中是不必要的、Compose 如何优化 UI 更新，以及你应该使用什么来代替。</p>

<p>让我们开始吧！</p>

<h2>DiffUtils 是什么？</h2>

<p>DiffUtils 是 Android 中的一个实用程序，它可以比较两个列表并生成一系列更新操作，例如：</p>

<ul>
<li>插入：添加新项目。</li>
<li>删除：移除过时的项目。</li>
<li>移动：重新排序现有项目。</li>
</ul>


<p>然后可以应用这些操作来有效地更新列表，最大限度地减少不必要的重绘或重新计算。这在 RecyclerView 等性能至关重要的组件中特别有用。</p>

<h3>DiffUtils 的工作原理</h3>

<blockquote><p>DiffUtil 使用 Eugene W. Myers 的差异算法来计算将一个列表转换为另一个列表所需的最少更新次数。Myers 的算法不处理移动的项目，因此 DiffUtil 对结果进行第二次遍历以检测移动的项目。&ndash; <a href="https://developer.android.com/reference/androidx/recyclerview/widget/DiffUtil">https://developer.android.com/reference/androidx/recyclerview/widget/DiffUtil</a></p></blockquote>

<p>Android 中的 DiffUtils 基于 Myers 算法，用于比较列表并找出它们之间的差异。Myers 算法和 DiffUtils 的目标是相同的：确定将一个序列（列表）转换为另一个序列（列表）所需的最小更改次数，包括插入、删除和移动。从本质上讲，DiffUtils 通过识别以下内容来计算两个列表之间的差异：</p>

<ol>
<li>最长公共子序列 (LCS)：新旧列表之间保持不变的元素。</li>
<li>编辑操作：将旧列表转换为新列表所需的插入、删除和移动。</li>
</ol>


<p><strong>关键见解：</strong>
DiffUtils使用 LCS 的概念来最小化更改（插入和删除），并且还针对移动进行了优化——这是基于列表的比较所特有的功能，其中元素不仅被删除和插入，而且还被重新定位。</p>

<h3>Myers 算法：DiffUtils 的基础</h3>

<p>Myers 算法于 1986 年推出，旨在计算两个序列之间的<strong>最短编辑脚本 (SES，Shortest Edit Script)</strong>。它找到将一个序列转换为另一个序列所需的最少操作数。这些操作包括：</p>

<ul>
<li>插入</li>
<li>删除</li>
<li>匹配（按顺序排列的公共元素）</li>
</ul>


<h4>Myers 算法的关键概念</h4>

<p>Myers 算法旨在找到将一个序列（例如，旧列表）转换为另一个序列（新列表）所需的最少<strong>插入、删除和移动</strong>次数。该算法基于<strong>编辑距离（Edit Distance）</strong>的概念，并专门计算将一个序列转换为另一个序列的一系列操作。</p>

<p>Myers 算法在计算<strong>最短的编辑操作序列</strong>方面特别有效，从而最小化所需的总更改次数。核心思想是找到两个序列之间的<strong>最长公共子序列 (LCS)</strong>，然后确定将旧序列转换为新序列的最小操作。</p>

<p>最长公共子序列 (LCS)：Myers 算法首先确定两个列表之间的 LCS。LCS 表示不需要修改的元素。</p>

<p><strong>编辑图：</strong></p>

<ul>
<li>该算法将转换可视化为一个图，其中每条路径
代表一系列操作（插入、删除或匹配）。</li>
<li>通过该图的最短路径对应于最短编辑脚本
（SES）。</li>
</ul>


<p><strong>优化：</strong></p>

<ul>
<li>Myers 算法使用动态规划来减少计算开销，实现高效的 O(ND) 时间复杂度，其中 N 和 D 是序列的长度和它们之间的距离。</li>
</ul>


<h3>DiffUtils 实际应用示例</h3>

<p>让我们考虑两个列表：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// Old list</span>
</span><span class='line'><span class="na">[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</span>
</span><span class='line'><span class="c1">// New List</span>
</span><span class='line'><span class="na">[&quot;a&quot;, &quot;d&quot;, &quot;c&quot;, &quot;b&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li><strong>确定 LCS</strong>：此处的 LCS 为 [&ldquo;a&rdquo;] 。</li>
<li><strong>计算编辑脚本</strong>：</li>
<li>删除“b”（旧列表）。</li>
<li>将“d”移到“c”之前。</li>
<li>在“c”之后插入“b”。</li>
<li><strong>应用更改</strong>：使用这些最少的操作将旧列表转换为新列表。</li>
</ol>


<h3>DiffUtils 在 RecyclerView 中的作用</h3>

<p>在 RecyclerView 中，每次更新都涉及计算哪些项目发生了变化、哪些项目被添加以及哪些项目被删除。单纯地更新整个列表可能会导致卡顿或无响应等性能问题。DiffUtils 通过以下方式解决此问题：</p>

<ul>
<li>最小化更改：仅执行必要的更新。</li>
<li>优化性能：实现流畅的动画和高效的列表更新。</li>
<li>减少重绘：仅重新渲染受影响的项目，从而提高整体 UI 响应能力。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="c1">// 第1步: 创建一个DiffUtil.Callback</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyDiffCallback</span> <span class="kd">extends</span> <span class="n">DiffUtil</span><span class="o">.</span><span class="na">Callback</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">oldList</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">newList</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">MyDiffCallback</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">oldList</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">newList</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">oldList</span> <span class="o">=</span> <span class="n">oldList</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">newList</span> <span class="o">=</span> <span class="n">newList</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getOldListSize</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">oldList</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getNewListSize</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">newList</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">areItemsTheSame</span><span class="o">(</span><span class="kt">int</span> <span class="n">oldItemPosition</span><span class="o">,</span> <span class="kt">int</span> <span class="n">newItemPosition</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">oldList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">oldItemPosition</span><span class="o">).</span><span class="na">equals</span><span class="o">(</span><span class="n">newList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">newItemPosition</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">areContentsTheSame</span><span class="o">(</span><span class="kt">int</span> <span class="n">oldItemPosition</span><span class="o">,</span> <span class="kt">int</span> <span class="n">newItemPosition</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">oldList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">oldItemPosition</span><span class="o">).</span><span class="na">equals</span><span class="o">(</span><span class="n">newList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">newItemPosition</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 第2步: 计算差异</span>
</span><span class='line'><span class="n">DiffUtil</span><span class="o">.</span><span class="na">DiffResult</span> <span class="n">diffResult</span> <span class="o">=</span> <span class="n">DiffUtil</span><span class="o">.</span><span class="na">calculateDiff</span><span class="o">(</span>
</span><span class='line'>    <span class="k">new</span> <span class="nf">MyDiffCallback</span><span class="o">(</span><span class="n">oldList</span><span class="o">,</span> <span class="n">newList</span><span class="o">)</span>
</span><span class='line'><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 第3步: 派发更新</span>
</span><span class='line'><span class="n">myAdapter</span><span class="o">.</span><span class="na">submitList</span><span class="o">(</span><span class="n">newList</span><span class="o">);</span>
</span><span class='line'><span class="n">diffResult</span><span class="o">.</span><span class="na">dispatchUpdatesTo</span><span class="o">(</span><span class="n">myAdapter</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>DiffUtils 是一款功能强大的工具，用于处理 Android 中的列表更新，确保高效且最小的更改。通过利用 Myers 算法，它可以计算出将一个列表转换为另一个列表的最短编辑脚本。了解其工作原理不仅可以提高你对 Android 开发的掌握，还可以帮助你优化 RecyclerView 的性能。</p>

<h2>为什么 Compose 不需要 DiffUtils</h2>

<p>Jetpack Compose 建立在<strong>声明性 UI 原则</strong>之上，这意味着你可以根据当前状态<strong>描述 UI 应该是</strong>什么样子，而 Compose 会处理其余的事情。</p>

<p><strong>命令式 UI（视图）：</strong></p>

<ul>
<li>通过确定需要应用哪些更改，你可以手动更新 UI 组件。</li>
<li>DiffUtil 等工具对于计算列表的最小更新以控制性能必不可少。</li>
</ul>


<p><strong>声明式 UI（Compose）：</strong></p>

<ul>
<li>你描述给定状态下的 UI 应该是什么样子，而不是如何更改它。</li>
<li>Compose 会自动重新组合受状态更改影响的 UI 部分。</li>
</ul>


<p>在 Compose 中，<strong>状态驱动 UI，重组处理更新</strong>。DiffUtils 无需计算增量，因为系统会自动优化要重新渲染的内容。</p>

<p>以下是 Compose 不再需要 DiffUtils 的主要原因：</p>

<ol>
<li><strong>状态驱动的UI</strong></li>
</ol>


<p>在 Compose 中，当状态发生变化时，UI 会自动重组。你无需手动计算列表之间的差异；Compose 会为你处理。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">items</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateListOf</span><span class="p">(</span><span class="s">&quot;Apple&quot;</span><span class="p">,</span> <span class="s">&quot;Banana&quot;</span><span class="p">,</span> <span class="s">&quot;Cherry&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">LazyColumn</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">items</span><span class="p">(</span><span class="n">items</span><span class="p">)</span> <span class="p">{</span> <span class="n">item</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="n">Text</span><span class="p">(</span><span class="n">text</span> <span class="p">=</span> <span class="n">item</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你从 items 中添加或删除项目，Compose 将仅重组 UI 中受影响的部分。无需 DiffUtils！</p>

<ol>
<li><strong>内置优化</strong></li>
</ol>


<p>Compose 使用 LazyColumn 和 LazyRow 中的键来优化项目渲染。通过为每个项目指定一个唯一键，Compose 可以识别哪些项目已更改、已添加或已移除。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">LazyColumn</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">items</span><span class="p">(</span><span class="n">items</span> <span class="p">=</span> <span class="n">yourList</span><span class="p">,</span> <span class="n">key</span> <span class="p">=</span> <span class="p">{</span> <span class="n">item</span> <span class="p">-&gt;</span> <span class="n">item</span><span class="p">.</span><span class="n">id</span> <span class="p">})</span> <span class="p">{</span> <span class="n">item</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="n">Text</span><span class="p">(</span><span class="n">text</span> <span class="p">=</span> <span class="n">item</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>该key确保 Compose 有效地仅更新受影响的项目，类似于 DiffUtils 所做的。</p>

<ol>
<li><strong>智能重组</strong></li>
</ol>


<p>Compose 可以智能地跳过未发生改变的 UI 元素的重组。使用 Remember 和 RememberSaveable 等工具，你可以进一步优化重组行为。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">RememberExample</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">count</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="m">0</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Button</span><span class="p">(</span><span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span> <span class="n">count</span><span class="p">.</span><span class="n">value</span><span class="p">++</span> <span class="p">})</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Clicked ${count.value} times&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 在这里，当状态发生变化时，只有Button中的Text，而不是整个组件，会发生重组</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Compose 中的重组：</strong></p>

<ul>
<li>Compose 会观察状态变化。当特定 UI 元素的状态发生变化时，只会重组该元素（及其依赖项）。</li>
<li>系统会完全跳过未更改的 UI 元素。</li>
</ul>


<p><strong>Views 中的 DiffUtils：</strong></p>

<ul>
<li>需要明确计算列表的新旧状态之间的变化。</li>
<li>然后分派计算出的更改以更新 RecyclerView。</li>
</ul>


<h3>在 Compose 中用什么来代替 DiffUtils</h3>

<p>虽然你不需要 DiffUtils ，但 Compose 提供了实现类似优化的工具：</p>

<ol>
<li>带 Keys 的 LazyColumn</li>
</ol>


<p>使用 key 可以有效地识别和管理列表中的更改。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">LazyColumn</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">items</span><span class="p">(</span><span class="n">items</span> <span class="p">=</span> <span class="n">yourList</span><span class="p">,</span> <span class="n">key</span> <span class="p">=</span> <span class="p">{</span> <span class="n">item</span> <span class="p">-&gt;</span> <span class="n">item</span><span class="p">.</span><span class="n">id</span> <span class="p">})</span> <span class="p">{</span> <span class="n">item</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="n">Text</span><span class="p">(</span><span class="n">text</span> <span class="p">=</span> <span class="n">item</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>SnapshotStateList</li>
</ol>


<p>若要以被动方式管理列表，请使用 SnapshotStateList 。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">items</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateListOf</span><span class="p">(</span><span class="s">&quot;Apple&quot;</span><span class="p">,</span> <span class="s">&quot;Banana&quot;</span><span class="p">,</span> <span class="s">&quot;Cherry&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="n">Button</span><span class="p">(</span><span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span> <span class="n">items</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="s">&quot;Date&quot;</span><span class="p">)</span> <span class="p">})</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Add Item&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">LazyColumn</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">items</span><span class="p">(</span><span class="n">items</span><span class="p">)</span> <span class="p">{</span> <span class="n">item</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="n">Text</span><span class="p">(</span><span class="n">text</span> <span class="p">=</span> <span class="n">item</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>SubcomposeLayout</li>
</ol>


<p>对于复杂的场景，SubcomposeLayout 可以精确控制要重组的内容。</p>

<h2>相关的面试问题</h2>

<ol>
<li>为什么 Jetpack Compose 不需要 DiffUtils ？</li>
</ol>


<p>Compose 依赖于声明性 UI 模型。它会根据状态变化自动更新 UI，无需像 DiffUtil 那样手动计算列表差异。使用 LazyColumn 中的键可确保高效更新，而无需使用外部工具。</p>

<ol>
<li>Jetpack Compose 处理列表更新的方式与 RecyclerView 有何不同？</li>
</ol>


<p>Compose 不依赖手动差异计算 (DiffUtils)，而是观察状态变化并仅重组受影响的组件。这是通过使用键和 Compose 的重组逻辑在内部管理的。</p>

<ol>
<li><p>在 Android 开发中，声明式 UI 与命令式 UI 相比有哪些优势？</p></li>
<li><p>代码更简单：声明式 UI 通过关注内容而不是方式来减少样板代码。</p></li>
<li>自动状态管理：Compose 根据状态变化自动更新 UI。</li>
<li>可测试性提高：无状态可组合项可以独立测试。</li>
<li>一致性：重组确保 UI 始终反映当前状态。</li>
<li><p>Compose 中的重组是什么？它与 RecyclerView 中的传统视图失效有何不同？</p></li>
<li><p>重组：当 Compose 检测到状态变化时发生。它仅重新生成受变化影响的 UI 部分。</p></li>
<li>视图失效：在 RecyclerView 中，失效会触发视图重绘，如果没有 DiffUtil 之类的工具，这可能会很低效。</li>
<li><p>何时应在 Compose 中使用 Remember 和 RememberSaveable？</p></li>
<li><p>使用 Remember 在单个组合生命周期内存储状态。</p></li>
<li>使用 RememberSaveable 在配置更改（如屏幕旋转）期间保留状态。</li>
<li>Compose 如何决定要重组 UI 的哪些部分？</li>
</ol>


<p>Compose 会跟踪每个可组合项中的状态读取。当状态发生变化时，只有读取已更改状态的可组合项才会被重组。</p>

<ol>
<li>在 Compose 中实现 LazyColumn 以显示项目列表并添加按钮来更新列表。确保它能够高效更新。</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">LazyColumnExample</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">items</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateListOf</span><span class="p">(</span><span class="s">&quot;Apple&quot;</span><span class="p">,</span> <span class="s">&quot;Banana&quot;</span><span class="p">,</span> <span class="s">&quot;Cherry&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Column</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Button</span><span class="p">(</span><span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span> <span class="n">items</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="s">&quot;Date&quot;</span><span class="p">)</span> <span class="p">})</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Add Item&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">LazyColumn</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">items</span><span class="p">(</span><span class="n">items</span><span class="p">,</span> <span class="n">key</span> <span class="p">=</span> <span class="p">{</span> <span class="n">it</span> <span class="p">})</span> <span class="p">{</span> <span class="n">item</span> <span class="p">-&gt;</span>
</span><span class='line'>                <span class="n">Text</span><span class="p">(</span><span class="n">text</span> <span class="p">=</span> <span class="n">item</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>识别并修复 Compose 组件中不必要的重组。</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">LazyColumn</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">items</span><span class="p">(</span><span class="n">items</span> <span class="p">=</span> <span class="n">list</span><span class="p">,</span> <span class="n">key</span> <span class="p">=</span> <span class="p">{</span> <span class="n">item</span> <span class="p">-&gt;</span> <span class="n">item</span><span class="p">.</span><span class="n">id</span> <span class="p">})</span> <span class="p">{</span> <span class="n">item</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="n">Text</span><span class="p">(</span><span class="n">text</span> <span class="p">=</span> <span class="n">item</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li><p>诊断 LazyColumn 中的滞后：</p></li>
<li><p>检查关键参数：确保每个项目都有唯一的键。</p></li>
<li>使用分析工具：使用 Android Studio 的Compose 调试器分析重组计数。</li>
<li>优化项目渲染：避免在 LazyColumn 中使用的可组合函数中进行大量计算。</li>
<li>调试列表更新中的不一致行为：</li>
</ol>


<p>确保数据源稳定并符合 UI 预期。使用SnapshotStateList 可以帮助保持反应性。</p>

<ol>
<li>SnapshotStateList 和 ArrayList 之间的区别：</li>
</ol>


<p>SnapshotStateList 是被动的；更改会自动触发 Compose 中的重组。ArrayList 不是被动的，需要手动通知 UI 更新。</p>

<ol>
<li>使用 SubcomposeLayout</li>
</ol>


<p>SubcomposeLayout 是 Jetpack Compose 中一个强大的布局工具，可让你按需组合布局的各个部分。这对于 UI 的某些部分占用大量资源或可能无法立即使用的情况尤其有用，例如从网络或数据库加载图像。SubcomposeLayout 允许按需组合布局的各个部分。</p>

<p>示例：动态加载图像并显示占位符，直到准备好为止。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">ImageWithPlaceholder</span><span class="p">(</span><span class="n">imageUrl</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">placeholder</span><span class="p">:</span> <span class="n">Painter</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Box</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">SubcomposeLayout</span> <span class="p">{</span> <span class="n">constraints</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="c1">// First, compose the placeholder</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">placeholderLayout</span> <span class="p">=</span> <span class="n">subcompose</span><span class="p">(</span><span class="m">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">Image</span><span class="p">(</span><span class="n">painter</span> <span class="p">=</span> <span class="n">placeholder</span><span class="p">,</span> <span class="n">contentDescription</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span> <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">())</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Compose the image once it&#39;s loaded</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">imageLayout</span> <span class="p">=</span> <span class="n">subcompose</span><span class="p">(</span><span class="m">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">AsyncImage</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">model</span> <span class="p">=</span> <span class="n">imageUrl</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">contentDescription</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">(),</span>
</span><span class='line'>                    <span class="n">contentScale</span> <span class="p">=</span> <span class="n">ContentScale</span><span class="p">.</span><span class="n">Crop</span>
</span><span class='line'>                <span class="p">)</span><span class="err">你</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Return the max size for the layout</span>
</span><span class='line'>            <span class="n">layout</span><span class="p">(</span><span class="n">constraints</span><span class="p">.</span><span class="n">maxWidth</span><span class="p">,</span> <span class="n">constraints</span><span class="p">.</span><span class="n">maxHeight</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">placeholderLayout</span><span class="p">[</span><span class="m">0</span><span class="p">].</span><span class="n">measure</span><span class="p">(</span><span class="n">constraints</span><span class="p">).</span><span class="n">placeRelative</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">)</span>
</span><span class='line'>                <span class="n">imageLayout</span><span class="p">[</span><span class="m">0</span><span class="p">].</span><span class="n">measure</span><span class="p">(</span><span class="n">constraints</span><span class="p">).</span><span class="n">placeRelative</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Preview</span>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">ImageWithPlaceholderPreview</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">ImageWithPlaceholder</span><span class="p">(</span>
</span><span class='line'>        <span class="n">imageUrl</span> <span class="p">=</span> <span class="s">&quot;https://www.example.com/image.jpg&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">placeholder</span> <span class="p">=</span> <span class="n">painterResource</span><span class="p">(</span><span class="n">id</span> <span class="p">=</span> <span class="n">R</span><span class="p">.</span><span class="n">drawable</span><span class="p">.</span><span class="n">placeholder_image</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>SubcomposeLayout：此布局允许你根据需要组合布局的各个部分。在这里，我们首先组合占位符，然后在图像准备好后组合图像。</li>
<li>subcompose()：此函数用于组合布局的各个部分。subcompose 函数返回 MeasureResult 对象列表，然后你可以测量这些对象并将其放置在屏幕上。</li>
<li>AsyncImage：我们使用 coil-compose 库中的 AsyncImage 异步加载图像。加载时，会显示占位符。</li>
<li>占位符：首先显示占位符。图像准备好后，它会接管。</li>
</ul>


<p>此方法可帮助你通过减少不必要的重新组合和更优雅地处理图像或数据等动态内容来创建更高效​​的 UI。</p>

<ol>
<li><p>将旧版 RecyclerView 迁移到 Compose：</p></li>
<li><p>用 LazyColumn 替换 RecyclerView。</p></li>
<li>将适配器逻辑移至可组合函数。</li>
<li>使用 Remember 或 SnapshotStateList 进行状态管理。</li>
<li>使用 Keys 进行优化。</li>
</ol>


<h2>结论</h2>

<ul>
<li>Compose 不需要 DiffUtils，因为它建立在声明性和状态驱动的架构上。</li>
<li>带有 key 的 LazyColumn 和 SnapshotStateList 提供类似的优化。</li>
<li>智能重组可确保高效的 UI 更新，从而减少手动优化的需要。</li>
</ul>


<p>通过拥抱 Compose 的声明性特性，你可以专注于构建美观、响应迅速的 UI，而无需担心列表更新的复杂性。</p>

<p>Happy Composing！</p>

<h2>参考文献</h2>

<ol>
<li>Myers, E. (1986)。O(ND) 差分算法及其变体。ACM编程语言和系统事务，1(2)，251–266。</li>
<li><a href="https://developer.android.com/reference/androidx/recyclerview/widget/DiffUtil">Android 开发者文档 — DiffUtils</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compose多平台 (CMP) 开发的四个实用技巧]]></title>
    <link href="https://alexhilton.github.io/blog/2025/02/04/tips-to-migrate-to-kmp/"/>
    <updated>2025-02-04T17:21:07+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/02/04/tips-to-migrate-to-kmp</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自<a href="https://proandroiddev.com/4-useful-tips-for-compose-kotlin-multiplatform-kmp-8809ba1cac51">Four useful tips for Compose Kotlin Multiplatform (KMP)</a></p></blockquote>

<p><strong>译注：</strong> 这篇文章虽然比较短，但提到的问题还是比较具体和典型的，针对CMP项目的一些配置还是很有借鉴意义的。</p>

<p><a href="https://alexhilton.github.io/blog/2025/02/04/tips-to-migrate-to-kmp/"><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j9tap6mygsqvxh6aauc8.png" title="auto auto" ></a></p>

<!-- more -->


<h2>简介</h2>

<p>正如我在上一篇文章<a href="https://medium.com/@lizarraga.iosu/a-complete-migration-of-a-multi-module-app-to-compose-kotlin-multiplatform-kmp-682905266bde">《将多模块应用程序完全迁移到 Compose Kotlin Multiplatform (KMP)》</a>中所说，上个月我一直在将现有的多模块应用程序迁移到 Compose Multiplatform，除此之外，我还从头开始创建一个新的 Compose Multiplatform 多模块项目。在这两个项目中，我都遇到了相同的“问题”或者说“阻碍”，因此，如果您正在迁移或从头开始启动 CMP 项目，那么本文就是为你量身定做的。</p>

<h2>提示 1：预览</h2>

<p>KMP 不支持 commonMain 目录Compose组件的预览，因此我想到了在 androidMain 目录中创建它们，并且它们的预览运行得很好。</p>

<blockquote><p><strong>译注：</strong>此文原文发布于2024年12月初，彼时非Android侧的源码确实无法Preview，后来JetBrains解决了这个问题，通过一个<a href="https://plugins.jetbrains.com/plugin/16541-compose-multiplatform-ide-support">支持桌面Compose的插件</a>。</p></blockquote>

<p>例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>commonMain/com/example/feature/component/FeatureScreen.kt
</span><span class='line'>androidMain/com/example/feature/component/FeatureScreenPreview.kt
</span></code></pre></td></tr></table></div></figure>


<h2>提示 2：BackHandler</h2>

<p>KMP 不支持 BackHandler 操作，因此我创建了一个用于屏幕的expect函数，并在 androidMain 中的actual函数上添加了 BackHandler 操作，并将 iosMain 留空（因为我在 iOS 中没有找到类似的操作）。</p>

<p>例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// commonMain/ com.example.feature.component.FeatureScreen.kt</span>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="n">expect</span> <span class="k">fun</span> <span class="nf">FeatureScreen</span><span class="p">(</span>
</span><span class='line'>    <span class="n">viewModel</span><span class="p">:</span> <span class="n">FeatureScreenViewModel</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">internal</span> <span class="k">fun</span> <span class="nf">Content</span><span class="p">(</span>
</span><span class='line'>    <span class="n">viewModel</span><span class="p">:</span> <span class="n">FeatureScreenViewModel</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// androidMain/ com.example.feature.component.FeatureScreenActual.kt (needs a name different from common)</span>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="n">actual</span> <span class="k">fun</span> <span class="nf">FeatureScreen</span><span class="p">(</span>
</span><span class='line'>    <span class="n">viewModel</span><span class="p">:</span> <span class="n">WorkScreenViewModel</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">BackHandler</span> <span class="p">{</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">onIntent</span><span class="p">(</span><span class="n">WorkIntent</span><span class="p">.</span><span class="n">Back</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Content</span><span class="p">(</span>
</span><span class='line'>        <span class="n">viewModel</span> <span class="p">=</span> <span class="n">viewModel</span><span class="p">,</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// extra: I have joined the preview in this same class to have it better organized.</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// iosMain/ com.example.feature.component.FeatureScreenActual.kt (needs a name different from common)</span>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="n">actual</span> <span class="k">fun</span> <span class="nf">FeatureScreen</span><span class="p">(</span>
</span><span class='line'>    <span class="n">viewModel</span><span class="p">:</span> <span class="n">WorkScreenViewModel</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Content</span><span class="p">(</span>
</span><span class='line'>        <span class="n">viewModel</span> <span class="p">=</span> <span class="n">viewModel</span><span class="p">,</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>提示 3：测试模拟</h2>

<p>我喜欢使用 <a href="https://mockk.io/">mockk</a> 库进行模拟测试，在撰写本文时，KMP 尚不支持该库，因此我决定在 androidUnitTest 目录中创建 UnitTest，并将库依赖项添加到 androidUnitTest.dependencies {} 块中。</p>

<p>对于此类测试，我使用了支持 KMP 的 kotlin-test jetbrains 库。</p>

<p>例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">mockk</span> <span class="p">=</span> <span class="p">{</span> <span class="n">group</span> <span class="p">=</span> <span class="s">&quot;io.mockk&quot;</span><span class="p">,</span> <span class="n">name</span> <span class="p">=</span> <span class="s">&quot;mockk&quot;</span><span class="p">,</span> <span class="n">version</span><span class="p">.</span><span class="n">ref</span> <span class="p">=</span> <span class="s">&quot;mockk-version&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="n">kotlin</span><span class="p">-</span><span class="n">test</span> <span class="p">=</span> <span class="p">{</span> <span class="n">group</span> <span class="p">=</span> <span class="s">&quot;org.jetbrains.kotlin&quot;</span><span class="p">,</span> <span class="n">name</span> <span class="p">=</span> <span class="s">&quot;kotlin-test&quot;</span><span class="p">,</span> <span class="n">version</span><span class="p">.</span><span class="n">ref</span> <span class="p">=</span> <span class="s">&quot;kotlin-version&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// feature build.gradle.kts</span>
</span><span class='line'><span class="n">kotlin</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sourceSets</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">androidUnitTest</span><span class="p">.</span><span class="n">dependencies</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">implementation</span><span class="p">(</span><span class="n">libs</span><span class="p">.</span><span class="n">mockk</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">commonTest</span><span class="p">.</span><span class="n">dependencies</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">implementation</span><span class="p">(</span><span class="n">libs</span><span class="p">.</span><span class="n">kotlin</span><span class="p">.</span><span class="n">test</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>androidUnitTest/com/example/feature/usecase/UseCaseTest.kt
</span></code></pre></td></tr></table></div></figure>


<h2>提示 4：UI 测试</h2>

<p><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/compose-test.html">官方的 Compose 多平台 UI 测试指南</a>指出，必须使用commonTest 目录进行 UI 测试，但我更喜欢使用androidInstrumentedTest目录，因为使用这种方法，我可以将单元测试与 UI 测试分开，并且我可以直接从同一个测试类执行它们，并从目录运行所有 UI 测试。</p>

<p>例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">mockk</span><span class="p">-</span><span class="n">android</span> <span class="p">=</span> <span class="p">{</span> <span class="n">group</span> <span class="p">=</span> <span class="s">&quot;io.mockk&quot;</span><span class="p">,</span> <span class="n">name</span> <span class="p">=</span> <span class="s">&quot;mockk-android&quot;</span><span class="p">,</span> <span class="n">version</span><span class="p">.</span><span class="n">ref</span> <span class="p">=</span> <span class="s">&quot;mockk-version&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="n">ui</span><span class="p">-</span><span class="n">test</span><span class="p">-</span><span class="n">junit4</span><span class="p">-</span><span class="n">android</span> <span class="p">=</span> <span class="p">{</span> <span class="n">group</span> <span class="p">=</span> <span class="s">&quot;androidx.compose.ui&quot;</span><span class="p">,</span> <span class="n">name</span> <span class="p">=</span> <span class="s">&quot;ui-test-junit4-android&quot;</span><span class="p">,</span> <span class="n">version</span><span class="p">.</span><span class="n">ref</span> <span class="p">=</span> <span class="s">&quot;uiTestJunit4AndroidVersion&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="n">ui</span><span class="p">-</span><span class="n">test</span><span class="p">-</span><span class="n">manifest</span> <span class="p">=</span> <span class="p">{</span> <span class="n">group</span> <span class="p">=</span> <span class="s">&quot;androidx.compose.ui&quot;</span><span class="p">,</span> <span class="n">name</span> <span class="p">=</span> <span class="s">&quot;ui-test-manifest&quot;</span><span class="p">,</span> <span class="n">version</span><span class="p">.</span><span class="n">ref</span> <span class="p">=</span> <span class="s">&quot;uiTestManifestVersion&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="n">kotlin</span><span class="p">-</span><span class="n">test</span> <span class="p">=</span> <span class="p">{</span> <span class="n">group</span> <span class="p">=</span> <span class="s">&quot;org.jetbrains.kotlin&quot;</span><span class="p">,</span> <span class="n">name</span> <span class="p">=</span> <span class="s">&quot;kotlin-test&quot;</span><span class="p">,</span> <span class="n">version</span><span class="p">.</span><span class="n">ref</span> <span class="p">=</span> <span class="s">&quot;kotlin-version&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// feature build.gradle.kts</span>
</span><span class='line'><span class="n">plugins</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="n">alias</span><span class="p">(</span><span class="n">libs</span><span class="p">.</span><span class="n">plugins</span><span class="p">.</span><span class="n">compose</span><span class="p">.</span><span class="n">multiplatform</span><span class="p">)</span>
</span><span class='line'>    <span class="n">alias</span><span class="p">(</span><span class="n">libs</span><span class="p">.</span><span class="n">plugins</span><span class="p">.</span><span class="n">compose</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">kotlin</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sourceSets</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">androidInstrumentedTest</span><span class="p">.</span><span class="n">dependencies</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">implementation</span><span class="p">(</span><span class="n">libs</span><span class="p">.</span><span class="n">mockk</span><span class="p">.</span><span class="n">android</span><span class="p">)</span>
</span><span class='line'>            <span class="n">implementation</span><span class="p">(</span><span class="n">libs</span><span class="p">.</span><span class="n">ui</span><span class="p">.</span><span class="n">test</span><span class="p">.</span><span class="n">junit4</span><span class="p">.</span><span class="n">android</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">commonTest</span><span class="p">.</span><span class="n">dependencies</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">implementation</span><span class="p">(</span><span class="n">libs</span><span class="p">.</span><span class="n">kotlin</span><span class="p">.</span><span class="n">test</span><span class="p">)</span>
</span><span class='line'>            <span class="n">@OptIn</span><span class="p">(</span><span class="n">ExperimentalComposeLibrary</span><span class="o">::</span><span class="k">class</span><span class="p">)</span>
</span><span class='line'>            <span class="n">implementation</span><span class="p">(</span><span class="n">compose</span><span class="p">.</span><span class="n">uiTest</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="n">dependencies</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">debugImplementation</span><span class="p">(</span><span class="n">libs</span><span class="p">.</span><span class="n">ui</span><span class="p">.</span><span class="n">test</span><span class="p">.</span><span class="n">manifest</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>androidInstrumentedTest/com/example/feature/component/ScreenAndroidTest.kt
</span></code></pre></td></tr></table></div></figure>


<h2>结论</h2>

<p>在本文中，我们看到了一些 Compose Multiplatform 技巧，希望您觉得它们有用。感谢您阅读本文，欢迎提供任何反馈。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于Android 16你想知道的都在这里]]></title>
    <link href="https://alexhilton.github.io/blog/2025/01/02/android-16-is-comming/"/>
    <updated>2025-01-02T22:14:32+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/01/02/android-16-is-comming</id>
    <content type="html"><![CDATA[<p>2025年的Android新版本来的比2024年稍早了一些。今年Google非常反常地提前就发布了Android的<a href="https://developer.android.com/about/versions/16">新版本Android 16 Baklava</a>，整体的计划比往年提前了2～3个月。另外，谷歌把<a href="https://www.androidfaithful.com/android-16-code-name/">Android 16的代码命名为「Baklava」</a>,这与先前的字母表顺序的点心食物命名方式截然不同，不过「Baklava」巴克拉瓦，又称果仁蜜饼，是一种口味浓郁、甜蜜的土耳其酥皮点心。</p>

<p><a href="https://alexhilton.github.io/blog/2025/01/02/android-16-is-comming/"><img src="https://www.android-user.de/wp-content/uploads/2024/11/20241101-Android-16-Baklava-Beitragsbild.jpg" title="auto auto" ></a></p>

<!-- more -->


<h2>谷歌的发布计划</h2>

<p>从<a href="https://developer.android.com/about/versions/16">官方的消息</a>来看会在24年结束Preview，在25年1月其实是Q1就开始Beta release，并在Q2进入Platform Stability，预计上半年就可能会正式发布，整体的节奏较往年提前了约2～3个月（往年是Q1会有Preview，Q2发布Beta,6~7月左右开始Platform Stability，Q3 9月～10月正式发布）。</p>

<p><img src="file:///Users/alexhilton/Downloads/android-16-release.webp" alt="图1. Android 16的发布计划" /></p>

<p>不过现仍在非常为初始的Preview阶段，后面可能会有变数，官方也没有给具体的计划。但有一点是确定的，那就是今年Android 16的发布肯定较往年会提拉一些，至少提拉2个月。</p>

<p>对于应用开发者来说，更为关心的是API的发布情况，一般情况下API会较系统版本提前一个季度就会正式稳定下来（也即不会再有大的变动），换句话说，今年在Q2就能得到较为稳定的API版本，当然比往年还是有提拉的。</p>

<p><img src="file:///Users/alexhilton/Downloads/android16-api-release.webp" alt="图2. Android 16 API的发布计划" /></p>

<p>发布计划不受我们控制，了解一下就可以了，下面我们看一下如何用条件区分这些新的API。</p>

<h2>区分使用新的API的方式</h2>

<p>如果应用不是运行在最新的版本，那么新的API不应该被执行，因此我们需要用条件来区分不同的API版本，用<a href="https://developer.android.com/reference/android/os/Build.VERSION#SDK_INT">SDK_INT</a>和<a href="https://developer.android.com/reference/android/os/Build.VERSION_CODES">VERSION_CODES</a>就可以做到。当然，需要先在Android Studio中把SDK中的Android 16 Preview版本下载下来才能编译。</p>

<p><img src="file:///Users/alexhilton/Downloads/install-baklava-sdk.png" alt="图3. 升级SDK" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">SDK_INT</span> <span class="p">&gt;=</span> <span class="n">VERSION_CODES</span><span class="p">.</span><span class="n">BAKLAVA</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 使用Android 16中才有的API</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>为了能更细致地区分版本，Android 16新增加了一个新的版本常量<a href="https://developer.android.com/reference/android/os/Build.VERSION#SDK_INT_FULL">SDK_INT_FULL</a>，并在<a href="https://developer.android.com/reference/android/os/Build.VERSION_CODES_FULL">VERSION_CODES_FULL</a>中定义了具体的常量值。它可以粒度更细地检查API的版本，分为Major版本和Minor版本。以往的SDK_INT只能区分大的版本（Major版本），这是它们最大的不同。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">SDK_INT_FULL</span> <span class="p">&gt;=</span> <span class="n">VERSION_CODES_FULL</span><span class="p">.[</span><span class="n">MAJOR</span> <span class="n">or</span> <span class="n">MINOR</span> <span class="n">RELEASE</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 用Major版本或者Minor版本才有的API</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>每个Major版本可能会多个Minor版本，如果不想麻烦，可以用<a href="https://developer.android.com/reference/android/os/Build#getMinorSdkVersion%28int%29">Build.getMinorSdkVersion()</a>来从VERSION_CODES_FULL中取出Minor版本号。</p>

<p><strong>注意：</strong> SDK_INT_FULL，VERSION_CODES_FULL以及getMinorSdkVersion都是Android 16中新增的API，确保把SDK升级到最新才可以编译成功。</p>

<p>接下来我们重点来看一下新一代的Android带来了哪些变化。</p>

<h2>新的功能和新的API</h2>

<p>很不幸，Android 16并没有带来全新的功能。只有一些小的新API。</p>

<h3>用户体验和系统UI</h3>

<p>提供一些的新的API以更好更灵活的控制系统的行为。</p>

<h4>可预见的返回更新</h4>

<p>Android 16增加了新的API以使能手势导航中的可预见返回系统动画，比如从应用返回到桌面的动画。使用新的<a href="https://developer.android.com/reference/android/window/OnBackInvokedDispatcher#PRIORITY_SYSTEM_NAVIGATION_OBSERVER">PRIORITY_SYSTEM_NAVIGATION_OBSERVER</a>向系统注册一个回调<a href="https://developer.android.com/reference/android/window/OnBackInvokedDispatcher#registerOnBackInvokedCallback(int,%20android.window.OnBackInvokedCallback">onBackInvokedCallback</a>)，每当系统处理一个返回导航时就能够收到<a href="https://developer.android.com/reference/android/window/OnBackInvokedCallback#onBackInvoked(">onBackInvoked</a>)回调，而不影响常规的返回导航流程。</p>

<p>Android 16还增加了两个API <a href="https://developer.android.com/reference/android/window/SystemOnBackInvokedCallbacks#finishAndRemoveTaskCallback(android.app.Activity">finishAndRemoveTaskCallback</a>)和<a href="https://developer.android.com/reference/android/window/SystemOnBackInvokedCallbacks#moveTaskToBackCallback(android.app.Activity">moveTaskToBackCallback</a>)。通过向<a href="https://developer.android.com/reference/android/window/OnBackInvokedDispatcher">OnBackInvokedDispatcher</a>注册这些回调，当执行返回手势时系统就能触发具体的行为和播放相关的动画。</p>

<h4>更加丰富的震感反馈</h4>

<p>Android 16增加了<a href="https://developer.android.com/reference/android/os/vibrator/package-summary">震感API</a>，能让应用定义震感效果的振幅和频率的曲线，同时屏蔽设备的差异。</p>

<h3>性能和电池</h3>

<p>Android 16提供了新的API以帮助收集应用的洞察。</p>

<h4>系统触发的分析</h4>

<p><a href="https://developer.android.com/about/versions/15/features#app-start-info">Android 15</a>添加的<a href="https://developer.android.com/reference/android/os/ProfilingManager">ProfilingManager</a>能让应用请求分析数据集。然而，这个分析必须由应用来发起，一些像启动过程以及ANR就很抓取得到（因为应用必须要先正常启动起来后，才能调用ProfilingManager去获取分析数据）。</p>

<p>为了解决这个问题，Android 16在ProfilingManager中增加了系统触发的分析数据。应用可以注册感兴趣的特定场景的trace，诸如冷起动或者ANR，系统会替应用开启和停止trace。trace收集完毕后，结果会传到应用的data目录。</p>

<h3>ApplicationStartInfo中增加Start component</h3>

<p>ApplicationStateInfo是在Android 15增加的，让应用能够看到进程启动原因，启动类型，启动时间等一系列诊断数据。Android 16增加了方法<a href="">getStartComponent</a>以辨识哪种组件类型触发的启动，这对于优化应用启动过程将会非常有帮助。</p>

<h3>更好的（后台）任务反查</h3>

<p>API <a href="https://developer.android.com/reference/android/app/job/JobScheduler#getPendingJobReason(int">JobScheduler#getPendingJobReason()</a>)能返回任何处于待处理的原因。当然，一个任务可能由于很多种原因待处理。</p>

<p>在Android 16中，增加了一个新的API <a href="https://developer.android.com/reference/android/app/job/JobScheduler#getPendingJobReasons(int">JobScheduler#getPendingJobReasons(int jobId)</a>)，用以返回任务处于待处理的多个原因，比如缘于开发者设置了显性的限制或者系统设置的隐性限制。</p>

<p>还增加了一个API <a href="https://developer.android.com/reference/android/app/job/JobScheduler#getPendingJobReasonsHistory(int">JobScheduler#getPendingJobReasonsHistory(int jobId)</a>)，用以返回最近的限制变更列表。</p>

<p>推荐使用这些API来调试为何后台任务没被执行，尤其是当看到特定任务的成功率降低时，或者特定任务完成有延迟时。例如，在后台更新桌面小部件时失败或者预先拉取任务在应用启动前失败等等。</p>

<p>这也能够更好的帮助你明白因为系统定义的限制还是因为显性的限制而导致特定的任务未执行完成。</p>

<h3>自适应刷新频率</h3>

<p>Android 15引入的自适应刷新频率(Adaptive refresh rate ARR)通过离散化的VSync步长能够让屏幕刷新频率适配内容频率。这会降低功耗同时消除潜在的掉帧。</p>

<p>Android 16增加了方法<a href="https://developer.android.com/reference/android/view/Display#hasArrSupport(">hasArrSupport</a>)和方法<a href="https://developer.android.com/reference/android/view/Display#getSuggestedFrameRate(int">getSuggestedFrameRate(int)</a>)以及<a href="https://developer.android.com/reference/android/view/Display#getSupportedRefreshRates(">getSupportedRefreshRates()</a>)，让应用容易利用ARR。Jetpack中的很多组件在内部实现上已经利用ARR以增强平滑的滑动，详细的可<a href="https://developer.android.com/media/optimize/performance/frame-rate">参见了此文章</a>。</p>

<h3>连接</h3>

<p>WiFi可以用来室内定位，Android 16增加了对WiFi位置安全性的支持，通过<a href="https://developer.android.com/reference/android/net/wifi/rtt/SecureRangingConfig">这个特性</a>。</p>

<h3>媒体</h3>

<h4>照片选择增强</h4>

<p><a href="https://developer.android.com/training/data-storage/shared/photopicker">照片选择器(photo picker)</a>提供了一个安全且内置的方式让应用在用户授权的情况下从存储中选择媒体文件。</p>

<p>Android 16带来的增强点有：</p>

<ul>
<li>嵌入式的图片选择器：<a href="https://developer.android.com/reference/android/widget/photopicker/package-summary">新的API</a>能够让应用把图片选择器嵌入到自己的视图中。这会让图片选择看起来更像是应用整体的一部分。后续的Jetpack中会提供可嵌入的图片选择器。</li>
<li>图片选择器支持云搜索：<a href="https://developer.android.com/sdk/api_diff/b-dp2-incr/changes/pkg_android.provider">新的API</a>在图片选择器将支持云搜索。</li>
</ul>


<h3>隐私</h3>

<h4>健康连接更新</h4>

<p>开发者Preview版本中的健康连接增加了ACTIVITY_INTENSITY（活动强度），依据世界健康组织（WHO）给出的指南中定义的一个新的数据类型。每一条记录将必须包括开始时间，结束时间以及活动强度。</p>

<h4>隐私沙盒</h4>

<p>Android 16集成了<a href="https://developers.google.com/privacy-sandbox/overview/android">Android隐私沙盒</a>的最新版本，这是一项为保护用户隐私而持续进行的工作。可以查看<a href="https://developer.android.com/design-for-safety/privacy-sandbox/program-overview">网站内容</a>以了解更多。</p>

<h2>行为变更</h2>

<p>比起新的API，Android 16带来的行为变更更值得我们关注，因为这会直接影响所有应用，无论targetSdkVersion是否是Baklava。</p>

<h3>核心功能</h3>

<h4>JobScheduler配额优化</h4>

<p>从Android 16开始，以基于以下因素来调整常规任务和加急任务的运行时配额：</p>

<ul>
<li>应用处于<a href="https://developer.android.com/topic/performance/appstandby">哪个等待区</a>：在Android 16中，活跃的等待区会减少限制。</li>
<li>如果任务开始执行时应用处于头部状态：在Android 16中，任务启动时，如果应用是用户可见的且应用变成可见后仍在继续执行，会加入到运行时配额中。</li>
<li>如果任务执行时正在运行一个前台服务：在Android 16中，当正在执行一个前台服务时，正在执行的任务将加入到运行时配额中。如果任务是用于用户数据传送，建议<a href="https://developer.android.com/develop/background-work/background-tasks/uidt">考虑替换方案</a>。</li>
</ul>


<p>这些变动将会影响由WorkManager，JobScheduler和DownloadManager调度的任务。如果要调试为何一个任务被终止了，建议通过调用<a href="https://developer.android.com/reference/androidx/work/WorkInfo#getStopReason(">WorkInfo.getStopReason()</a>)来打印日志。</p>

<p>也可以通过Android 16新增加的API <a href="https://developer.android.com/partners/android-16/features#feature-pending-job-reason-history">JobScheduler#getPendingJobReasonsHistory</a>来了解为何任务未执行。</p>

<p>另外，在Android 16上还可以通过adb命令强制调整运行时任务配额，以方便测试：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'><span class="c"># 取消头部状态配额限制</span>
</span><span class='line'>adb shell am compat <span class="nb">enable </span>OVERRIDE_QUOTA_ENFORCEMENT_TO_TOP_STARTED_JOBS &lt;APP_PACKAGE_NAME&gt;
</span><span class='line'>
</span><span class='line'><span class="c"># 设置等待区</span>
</span><span class='line'>adb shell am <span class="nb">set</span>-standby-bucket &lt;APP_PACKAGE_NAME&gt; active<span class="p">|</span>working_set<span class="p">|</span>frequent<span class="p">|</span>rare<span class="p">|</span>restricted
</span><span class='line'>
</span><span class='line'><span class="c"># 获取所处的等待区状态</span>
</span><span class='line'>adb shell am get-standby-bucket &lt;APP_PACKAGE_NAME&gt;
</span></code></pre></td></tr></table></div></figure>


<h3>用户体验和系统UI</h3>

<p>Android 16废弃了无障碍公告(announcement)，一种使用<a href="https://developer.android.com/reference/android/view/View#announceForAccessibility(java.lang.CharSequence">announceForAccessibility</a>)或者派发<a href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent#TYPE_ANNOUNCEMENT">TYPE_ANNOUNCEMENT</a>引起的无障碍事件。这些公告会造成Talkback和屏幕发声的混乱，容易被滥用，一些可行的替换方案有：</p>

<ul>
<li>对于像窗口变化之类的极重要的UI变化，可以用<a href="https://developer.android.com/reference/android/app/Activity#setTitle(java.lang.CharSequence">Activity.setTitle(CharSequence)</a>)和<a href="https://developer.android.com/reference/android/view/View#setAccessibilityPaneTitle(java.lang.CharSequence">setAccessibilityPaneTitle(java.lang.CharSequence)</a>)。在Compose中使用<a href="https://developer.android.com/reference/kotlin/androidx/compose/ui/semantics/package-summary#(androidx.compose.ui.semantics.SemanticsPropertyReceiver">Modifier.semantics { paneTitle = &ldquo;paneTitle&rdquo; }</a>.liveRegion)。</li>
<li>告知用户重要UI变化，使用<a href="https://developer.android.com/reference/android/view/View#setAccessibilityLiveRegion(int">setAccessibilityLiveRegion(int)</a>)。在Compose中，用<a href="https://developer.android.com/reference/kotlin/androidx/compose/ui/semantics/package-summary#(androidx.compose.ui.semantics.SemanticsPropertyReceiver">Modifier.semantics { liveRegion = LiveRegionMode.[Polite|Assertive]}</a>.liveRegion)。这些也要小心使用，因为每当View刷新就会触发一个无障碍事件。</li>
<li>通知用户有错误，发送一个类型为<a href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent#CONTENT_CHANGE_TYPE_ERROR">AccessibilityEvent#CONTENT_CHANGE_TYPE_ERROR</a>的无障碍事件，并且设置<a href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo#setError(java.lang.CharSequence">AccessibilityNodeInfo#setError(CharSequence)</a>)，或者<a href="https://developer.android.com/reference/android/widget/TextView#setError(java.lang.CharSequence">TextView#setError(CharSequence)</a>)。</li>
</ul>


<p>可以<a href="https://developer.android.com/reference/android/view/View#announceForAccessibility(java.lang.CharSequence">看文档</a>)以了解废弃announceForAccessibility的细节以及推荐的替代方案。</p>

<h2>适配建议</h2>

<p>到目前为止，我们能了解到的Android 16的变化就这么多，总的来看增量变化并不多，新的API 都是一些小的细节上的增强；行为的变更也很少很少，只涉及后台任务和无障碍。新的API不会影响现有的应用，行为变更也不多，可以说对于绝大多数应用来说影响甚微。</p>

<p>现在仍是开发者Preview阶段，只有亲儿子Pixel系列会收到OTA版本，我们了解一下就可以了。即使是应用可能会受到行为变更的影响，也不用着急，建议再等2～3个月，等到有更多的厂商发出Beta版本了，并且API也稳定了时再做适配也不迟。</p>

<h2>References</h2>

<ul>
<li><a href="https://developer.android.com/about/versions/16/features">Features and APIs</a></li>
<li><a href="https://android-developers.googleblog.com/2024/11/the-first-developer-preview-android16.html">The First Developer Preview of Android 16</a></li>
<li><a href="https://android-developers.googleblog.com/2024/12/second-developer-preview-android16.html">The Second Developer Preview of Android 16</a></li>
<li><a href="https://developer.android.com/about/versions/16/behavior-changes-16">Behavior changes: Apps targeting Android 16 or higher</a></li>
<li><a href="https://developer.android.com/about/versions/16/behavior-changes-all">Behavior changes: all apps</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[群星闪耀的大前端开发]]></title>
    <link href="https://alexhilton.github.io/blog/2024/12/10/a-brief-history-of-cross-platform-development/"/>
    <updated>2024-12-10T22:01:05+08:00</updated>
    <id>https://alexhilton.github.io/blog/2024/12/10/a-brief-history-of-cross-platform-development</id>
    <content type="html"><![CDATA[<p>乔帮主发布iPhone以降，把世界推向了智能手机时代，随之而来的是移动互联网大潮，一时间移动应用开发变得炙手可热起来，渐渐的超越了传统桌面端和传统前端，成为了主流。随之而来的就是重复开发的问题，同样的业务需要在Android上面实现一次，在iOS上面实现一次，通常也需要在Mobile Web（移动端H5）实现一次，自此跨端开发成了移动互联时代一个必须要攻克的难题。</p>

<p><a href="https://alexhilton.github.io/blog/2024/12/10/a-brief-history-of-cross-platform-development/"><img src="https://www.ropstam.com/wp-content/uploads/2023/09/Best-Cross-Platform-App-Development-Frameworks.jpg" title="auto auto" ></a></p>

<!-- more -->


<h2>大前端开发简史</h2>

<p>工程师的使命是<strong>把不可能变可能，把可能变简单，把简单变优雅</strong>。如果能用同一套代码在不同的端侧都运行，那将是再美好不过的了，毕竟对于端侧业务逻辑一样的，但却要用不同的编程语言，不同的框架，不同的平台，不同的团队各开发一次。如果能够做到「开发一次，多端运行」，将极大的节省人力物力和财力，开发效率也将大大提升。遂业界一直在探索如何跨移动端开发，也即只用一套代码，开发一次，就可以在Android端，iOS端和移动Web端三端运行。</p>

<h3>史前时代：Hybrid app</h3>

<p>最先出来的框架是Hybrid app（<a href="https://phonegap.com/">PhoneGap</a>和<a href="https://cordova.apache.org/docs/en/latest/">Cordova</a>），利用Android端和iOS端都对WebView有较好的支持，因此用移动前端（也即网页）的方式来开发应用，绝大多数的业务逻辑都在网页里，Android端和iOS端都是用WebView去展示网页，对于JavaScript在网页中无法实现的，与平台强相关的事情可以通过JavaScript Bridge来调用平台实现的API，称之为JsBridge。</p>

<p>这种架构非常简单，对于Android和iOS来说，使用一个WebView，再实现一些native API就可以了，其余的都是标准的移动前端。得益于平台对HTML 5的支持，以及像jQuery Mobile等优秀的前端库的加持，无论是开发体验还是使用体验，Hybrid app并不差。最重的是它跨平台性特别好，性价比超高，对于UI部分很重，交互 也不复杂的以展示为主的页面来说，这是性价比超高的实现方式。</p>

<p>这个可以称之为史前时代。</p>

<h3>黑暗时代：不成熟的各种尝试</h3>

<p>Hybrid app方式虽然可行，但在不同的终端上面体验差距很明显。对于性能较好的中高端设备，因为设备整体性能较好，Hybrid app体验尚可，虽然与原生UI相比仍有差距，但属于可接受范围。但对于中低端设备来说，WebView不但性能差，而且兼容性不好，体验严重差于原生UI。另外，如果UI交互变得复杂，或者对体验和实时性操作要求比较高（如文档编辑类等）Hybrid方式与原生更是相距甚远。工程师们开始尝试新的方案。</p>

<p>比如坊间有用json格式来定义UI，定义好格式后，每个端拿到一坨json数据解析，然后生成UI。这其实都算不上是框架，其实就是用json来描述一个页面，解析与构建UI仍是由每个端自己搞，顶多算是一种UI描述格式。但难以通用，并且只能描述UI的静态结构，无法有动态的行为之类的。这种方案也曾有不少大厂用过，它非常适用于局部的，并不复杂的UI，业务逻辑固定，但UI排版样式可能随时会变页面。但要说用它来写整个应用，是不现实的。</p>

<p>这期间Google也做了尝试，搞出一个叫做<a href="https://developers.google.com/j2objc">j2objc的工具</a>，它能把Java代码翻译 成为Objective&#45;C代码，转换后的Objective-C代码无需修改可以直接编译运行。显然，这个工具并不适用于UI，因为UI都是与平台强相关的，需要大量的依赖于平台的SDK，并不是把代码「翻译」过来就完事了。这个工具适用于非UI部分的业务逻辑代码，效果也非常的好，经其转换后的代码可以直接编译运行。据说Google自己也在用，当时的GMS产品Google Inbox等都用j2objc达到了70%代码共用。</p>

<p>这是大前端的一个黑暗时代，虽然大家都在尝试，但始终没有一个比较理想的完整的解决方案。</p>

<h3>黎明的署光：划时代的ReactNative</h3>

<p>Hybrid方式最大的问题在于WebView是性能和体验的瓶颈，WebView之所以是瓶颈 在于它是一个完全的浏览器，它要完全支持JavaScript，HTML和CSS。但随着HTML5和Web前端技术的发展，有很多库可能只用JavaScript来实现。JavaScript独立出来与Node.js结合（严谨的说是JS引挚），同样可以做前端，但却少了HTML和CSS的拖累，沿着这个思路非死不可（彼时叫做Facebook，现在叫做Meta）推出了一个跨移动端平台的开发框架ReactNative。它是基于Facebook的React框架，做了面向移动端的延伸。它的主要实现方法是用React来写页面，这是一个基于JavaScript语言的声明式UI框架，加入了一个虚拟DOM层，用以屏蔽频繁的DOM改动，然后再把虚拟DOM转成一个渲染树，最后由Node开出口子，把渲染树用Native的API去实现，由此实现了原生UI。</p>

<p>ReactNative可以实现跨三端，页面用React写好后，不用修改就可以在Web，Android和iOS上运行。一经发布引发了巨大反响，坊间众人皆拍大腿「卧草，还可以这样玩儿啊！」。</p>

<p>ReactNative是划时代的，因为它确定了跨端框架的基本结构：声明式UI，虚拟DOM和渲染树，用原生API去实现渲染树（映射为Native的组件，或者用Native graphics API去实现渲染树）。后续的跨端框架基本上都是这个路子。</p>

<h3>群星闪耀的当下</h3>

<p>时光荏苒，移动互联大潮已经过了十几年，技术也层出不穷，新的框架在不断的涌现。现如今跨端这一领域百花齐放，群星闪耀，各大框架经过几年的沉淀与发展已经比较成熟。除了<a href="https://reactnative.dev/">ReactNative</a>以外，还有了NativeScript，Flutter以及CMP。这其中<a href="https://nativescript.org/">NativeScript</a>其实与ReactNative差不多，唯一的区别在于它允许用JavaScript家族语言（如<a href="https://www.typescriptlang.org/">TypeScript</a>和<a href="https://coffeescript.org/">CoffeeScript</a>），以及不限制开发框架，可以用Vue.js或者Angular.js来写UI。</p>

<p>当然，最为广泛流行，业界使用最多的当属于Flutter和ReactNative，CMP作为一颗新星也越来越受关注。</p>

<h2>流行框架对比</h2>

<p>这里简要对比一下最为流行的ReactNative和Flutter以及新星CMP，以方便使用者做出更好的选择。</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> 框架 </th>
<th style="text-align:center;"> 开发者 </th>
<th style="text-align:center;"> 开发语言 </th>
<th style="text-align:center;"> UI开发库 </th>
<th style="text-align:center;"> 支持的端 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> ReactNative </td>
<td style="text-align:center;"> Meta </td>
<td style="text-align:center;"> JavaScript </td>
<td style="text-align:center;"> React </td>
<td style="text-align:center;"> Android, iOS, Web </td>
</tr>
<tr>
<td style="text-align:center;"> Flutter </td>
<td style="text-align:center;"> Google </td>
<td style="text-align:center;"> Dart </td>
<td style="text-align:center;"> </td>
<td style="text-align:center;"> Android, iOS, Desktop, Web </td>
</tr>
<tr>
<td style="text-align:center;"> CMP </td>
<td style="text-align:center;"> JetBrains </td>
<td style="text-align:center;"> Kotlin </td>
<td style="text-align:center;"> Jetpack Compose </td>
<td style="text-align:center;"> Android, iOS, Desktop, Web </td>
</tr>
</tbody>
</table>


<p>ReactNative和Flutter都相对较成熟和稳定了，使用者也较多，社区很活跃。ReactNative更适合移动端，而Flutter能跨的端和CMP要更多一些。此外，Flutter和CMP与其他框架最大的区别在于它使用Skia库构建了一个渲染引挚，可以直接把渲染树渲染成为平台支持的更为底层的canvas，直接接入native层的graphics API而不是映射成native组件，为此，它的渲染效率更为高效一些，进而性能更优一些，可以把它们想像成为一个浏览器。</p>

<p>技术栈也不一样，ReactNative是基于Node和JavaScript，属于前端技术栈，与前端融合更为紧密一些；而CMP是基于Kotlin和JVM与Android更为紧密一些，属于Java派系；而Flutter自成一派。</p>

<h2>选择是痛苦的</h2>

<p>实事求是的来说<a href="https://flutter.dev/">Flutter</a>是当前最为成熟 也最为完备的一个跨端框架，只不过可能学习成本略大，对于大部分同学来说Dart是一门小众的编程语言。而ReactNative最大的问题就在于React，它太前端化了，对于客户端同学来说写一坨HTML式的标签还是相当难受的。</p>

<p>应该说Flutter已经非常成功了，达到了它应该有高度，实现了它的价值，换句话说它的前景也不是特别明朗了，因为它已经很成熟了，所以有传言谷歌内部也在裁撤Flutter的研发资源。ReactNative也一样，这么多年了，版本还没有到1.0。</p>

<p><img src="https://blog.droidchef.dev/content/images/size/w1000/2022/11/Flutter-vs-Jetpack-Compose-Header--2-.png" alt="图1. Flutter vs CMP" /></p>

<p>而CMP刚刚兴起，使用起来非常的方便和简单，它的安装与配置是所有框架之中最为简便的（只需要安装一个Android Studio的插件，其余的都是编译插件和依赖，并不像Flutter和ReactNative都需要在开发机器上安装其他东西），前途无量，非常值得投入。并且Flutter对于谷歌来说九牛一毛，是非常不起眼的东西，谷歌毕竟家大业大，像谷歌和Meta等巨头现在都在狂卷AI，其他的小业务都不受重视。</p>

<p>但CMP不一样，JetBrains本身就是专门搞开发工具的，这是他们的主业肯定 会好好搞，把CMP与其IDE深度结合，对于开发者使用起来那就相当的方便了。事实上JetBrains已经开始弄了，它的最新的<a href="https://www.jetbrains.com/fleet/">IDE Fleet</a>（一个通用的IDE）将会深度绑定CMP，非常值得期待。</p>

<p>综合考虑，给出的建议就是如果是<strong>一个纯新的项目，特别是MVP阶段，不要犹豫就是用Flutter</strong>。而如果是<strong>现有项目，想要跨端，就选择CMP</strong>，它是对现有项目最为友好的一个。除非你是资源前端且是React粉，否则不要考虑ReactNative。</p>

<h2>框架只能解决一部分问题</h2>

<p>最后想说的是，对于跨端开发，框架只能解决一小部分问题。</p>

<p>跨端开发最难的地方在于合理的架构和团队的协同。架构需要做好层与层的隔离，特别是把与平台强相关的API做好隔离层，以最大限度 的共用代码，如果到处都是粗粒度的平台相关的实现，复杂度将急剧上升，那最后会变成多端的拼盘而非一个跨端项目。人员的协作应该以功能为单位来划分而不能再以端的维度，要彻底消灭端的思维，要以UI，功能和业务逻辑角度来思考问题，这样才能更好的协作。总之跨端对团队的要求更高，否则只会制造更多的问题。</p>

<p>人的问题永远要比技术问题要复杂一些，举个最简单的例子，以往每个端各自为政，Android端某个同学犯了错，顶多就是Android端不能用了，可能最多就3.25。真跨端了以后，再犯错那可就是所有端都搞挂了，可能最少是3.25起步，这里头的差别还是相当大的，如果没有强有力的大一点的老板来推，是很难推得动的。</p>

<p>研发同学都喜欢折腾，光完成业务是很无聊的，也不可能出成绩，都想方设法的搞出点「技术产出」（俗称造轮子）。记得ReactNative刚出来时，坊间很热情都在把其引入到各自的业务中去，但最终的结果是，没有人会真的在业务中重点使用，而是都花心思搞出了一套属于自己的跨端框架，并且向其他团队推广。年终汇报时，PPT很漂亮：「老板您看，我们不光完成了业务，还搞了一套跨端框架，它比ReactNative好在哪里，已经在我们的业务使用了，也给其他团队推广了」。相反，假如你真的使用了跨端，你咋 汇报？「老板，您看，我们用了别人的跨端技术，成功的实现了跨端，原来三个端15个人能做完的事情，现在只需要8个人！」。老板听了，很激动，3.25终于找到人选了，开猿节流也有着落了！</p>

<p>Anyway，总的来说跨端开发更适合业务不复杂，UI交互也不重的中小型App，或者那种UI占比较小非UI逻辑占比大的应用（最典型的就是浏览器），才能发挥出最大的价值。一个比较简单的判断标准就是，如果每个端的研发人员都超过10个人，可能就不太适合用跨平台的开发方式。</p>

<h2>References</h2>

<ul>
<li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/cross-platform-frameworks.html">The Six Most Popular Cross-Platform App Development Frameworks</a></li>
<li><a href="https://developers.google.com/j2objc">What J2ObjC is</a></li>
<li><a href="https://github.com/google/j2objc">A Java to iOS Objective-C translation tool and runtime.</a></li>
<li><a href="https://hackernoon.com/getting-started-with-react-native-for-windows-and-macos">Getting started with React Native for Windows &amp; macOS</a></li>
<li><a href="https://medium.com/@ankit-detroja/react-native-or-flutter-in-2024-7cfb0605698f">React native or Flutter in 2024</a></li>
<li><a href="https://leancode.co/blog/flutter-vs-react-native">Flutter vs. React Native: A Detailed Comparison for 2024</a></li>
<li><a href="https://nateshmbhat.medium.com/flutter-vs-react-native-performance-benchmarks-you-cant-miss-%EF%B8%8F-2e31905df9b4">Flutter Vs React Native : Performance Benchmarks you can’t miss ! 🔥⚡️ [Part -1]</a></li>
<li><a href="https://medium.com/newsoft-official/compose-multiplatform-vs-flutter-771673612c61">Compose Multiplatform VS. Flutter</a></li>
<li><a href="https://infinitelambda.com/flutter-kotlin-multiplatform-native-comparison/">FLUTTER VS KOTLIN MULTIPLATFORM VS NATIVE</a></li>
<li><a href="https://www.miquido.com/blog/kotlin-multiplatform-vs-flutter/">Flutter vs. Kotlin Multiplatform Mobile</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
