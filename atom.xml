<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[稀有猿诉]]></title>
  <link href="http://toughcoder.net/atom.xml" rel="self"/>
  <link href="http://toughcoder.net/"/>
  <updated>2022-08-18T23:17:41+08:00</updated>
  <id>http://toughcoder.net/</id>
  <author>
    <name><![CDATA[Alex Hilton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[二叉树从入门到放弃]]></title>
    <link href="http://toughcoder.net/blog/2022/08/18/binary-tree-made-easy/"/>
    <updated>2022-08-18T21:59:41+08:00</updated>
    <id>http://toughcoder.net/blog/2022/08/18/binary-tree-made-easy</id>
    <content type="html"><![CDATA[<p>树是非常常见的一种数据结构，有着广泛的应用，而二叉树又是树中最最常见的树，值得好好的学习和总结。
树的定义可以<a href="https://www.programiz.com/dsa/trees">参考这里</a>，二叉树Binary Tree的定义<a href="http://cslibrary.stanford.edu/110/BinaryTrees.html#:~:text=A%20binary%20tree%20is%20made%20of%20nodes%2C%20where,binarytree%20with%20no%20elements%20--%20the%20empty%20tree.">在这里</a>，还有<a href="https://www.javatpoint.com/binary-search-tree">二叉搜索树Binar Search Tree</a>。</p>

<p><a href="http://toughcoder.net/blog/2022/08/18/binary-tree-made-easy/"><img src="https://ts1.cn.mm.bing.net/th/id/R-C.0443658c5d6fda4db7615ed681a39cca?rik=H4456L%2b5IJAkrg&riu=http%3a%2f%2f108.61.119.12%2fwp-content%2fuploads%2f2014%2f10%2fbinary-tree-1-pre-order.gif&ehk=d%2bxB8RQ0QrVVDnUp8Zeo2ICWUFYmxcqCWMc2WIGlzmY%3d&risl=&pid=ImgRaw&r=0" title="auto auto" ></a></p>

<!-- more -->


<h2>二叉树的常规遍历</h2>

<p>二叉树的常规遍历，其实也是<strong>深度优先</strong>遍历，分为三种先序，中序和后序。这里的所谓的前中后，是指<strong>子节点相对于根节点而言的</strong>。对于一个最小的二叉树，也就是只有一个左子节点和右子节点的树来说，先序，就是左右子节点在根节点之后，也即根在最前面，中序就是根在左右中间，而后序则是根在最后。以这个『1, 2, 3』为倒的最小树来说，前序即是[1, 2, 3]，中序是[2, 1, 3]而后序 是[2, 3, 1]。</p>

<p><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XWH6osdb--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/3072o3znskwf4wkbqshz.png" alt="" /></p>

<p>但从整体树来看，遍历的顺序仍旧是<strong>从左下到右下</strong>，所以需要先找到最左下的一颗最小子树。</p>

<h3>递归式</h3>

<h3>迭代式</h3>

<h3>逆序遍历</h3>

<p>前面说了，二叉树的常规遍历仍旧是从左下向右下的，如果看成数组，那就相当于是从前往后的。但有些情况吧，逆序遍历会更方便，也跟数组一样，有时候从后向前遍历更为合适。逆序遍历并不难，只需要把左右子树的处理换个位置就行了，先找到最右下的最小子树，从右下往左下走。</p>

<h3>典型题目</h3>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">  <a href="https://leetcode.cn/problems/flatten-binary-tree-to-linked-list/">114. 二叉树展开为链表</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/flatten-binary-tree-to-linked-list/solution/114-er-cha-shu-zhan-kai-wei-lian-biao-by-3mke/">题解</a></td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/most-frequent-subtree-sum/">508. 出现次数最多的子树元素和</a> </td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/most-frequent-subtree-sum/solution/by-alexhilton-ab5a/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/convert-bst-to-greater-tree/">538. 把二叉搜索树转换为累加树</a> </td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/convert-bst-to-greater-tree/solution/by-alexhilton-c8a0/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">105. 从前序与中序遍历序列构造二叉树</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/solution/by-alexhilton-q14h/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h2>二叉树的层序遍历</h2>

<p>也即是广度优先遍历，但普通的广度优先一般没啥用，实际题目中用的最多是层序遍历。</p>

<h3>基础广度优先遍历</h3>

<h3>层序遍历</h3>

<h3>典型题目</h3>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/">102. 二叉树的层序遍历</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/solution/by-alexhilton-iv95/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/find-bottom-left-tree-value/">513. 找树左下角的值</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/find-bottom-left-tree-value/solution/by-alexhilton-m79i/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/find-largest-value-in-each-tree-row/">515. 在每个树行中找最大值</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/find-largest-value-in-each-tree-row/solution/by-alexhilton-6j1a/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/complete-binary-tree-inserter/">919. 完全二叉树插入器</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/complete-binary-tree-inserter/solution/by-alexhilton-msqn/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/add-one-row-to-tree/">623. 在二叉树中增加一行</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/add-one-row-to-tree/solution/623-zai-er-cha-shu-zhong-zeng-jia-yi-xin-4hn1/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/maximum-level-sum-of-a-binary-tree/">1161. 最大层内元素和</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/maximum-level-sum-of-a-binary-tree/solution/by-alexhilton-anlb/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/deepest-leaves-sum/">1302. 层数最深叶子节点的和</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/deepest-leaves-sum/solution/1302-ceng-shu-zui-shen-xie-zi-jie-dian-d-o5my/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h2>路径相关问题</h2>

<p>路径定义不尽相同，有些路径是从根节点到叶子的算路径，有些则不必，前面说的都是竖着的路径，也就是从根节点出发到叶子节点，而有些则可以横着的，比如从左子节点经过根节点到右边节点的路径。路径相关的问题很多，且难度上升级一个量级，通常涉及动态规划。</p>

<h3>典型问题</h3>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/binary-tree-maximum-path-sum/">124. 二叉树中的最大路径和</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/binary-tree-maximum-path-sum/solution/124-er-cha-shu-zhong-de-zui-da-lu-jing-h-deqd/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/diameter-of-binary-tree/">543. 二叉树的直径</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/diameter-of-binary-tree/solution/by-alexhilton-0ncn/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/">236. 二叉树的最近公共祖先</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/solution/by-alexhilton-l5q4/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h2>二叉搜索树</h2>

<p>二叉搜索树Binary Search Tree（常简称作BST），是一种特殊的二叉树，它保证左子树小于根节点小于右子树。
<img src="https://leetcode.com/problems/binary-search-tree-iterator/Figures/173/appr_1.png" alt="" /></p>

<h3>典型题目</h3>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/validate-binary-search-tree/">98. 验证二叉搜索树</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/validate-binary-search-tree/solution/by-alexhilton-eqbp/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-search-tree/">235. 二叉搜索树的最近公共祖先</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-search-tree/solution/by-alexhilton-yvgi/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h2>参考资料</h2>

<ul>
<li><a href="https://blog.csdn.net/Real_Fool_/article/details/113930623">数据结构：树(Tree)【详解】</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/90255760">数据结构中&#8221;树&#8221;的全面讲解</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/443034942">数据结构&mdash;树（彻底理解递归算法）</a></li>
<li><a href="https://leetcode.cn/problems/binary-tree-preorder-traversal/solution/er-cha-shu-de-qian-xu-bian-li-by-leetcode-solution/">二叉树的前序遍历</a></li>
<li><a href="https://leetcode.cn/problems/binary-tree-inorder-traversal/solution/er-cha-shu-de-zhong-xu-bian-li-by-leetcode-solutio/">二叉树的中序遍历</a></li>
<li><a href="https://leetcode.cn/problems/binary-tree-inorder-traversal/solution/dong-hua-yan-shi-94-er-cha-shu-de-zhong-xu-bian-li/">动画演示+三种实现 94. 二叉树的中序遍历</a></li>
<li><a href="https://leetcode.cn/problems/binary-tree-postorder-traversal/solution/er-cha-shu-de-hou-xu-bian-li-by-leetcode-solution/">二叉树的后序遍历</a></li>
<li><a href="https://leetcode.cn/problems/binary-tree-postorder-traversal/solution/bang-ni-dui-er-cha-shu-bu-zai-mi-mang-che-di-chi-t/">「代码随想录」帮你对二叉树不再迷茫，彻底吃透前中后序递归法（递归三部曲）和迭代法（不统一写法与统一写法）
</a></li>
<li><a href="https://leetcode.cn/problems/binary-tree-preorder-traversal/solution/leetcodesuan-fa-xiu-lian-dong-hua-yan-shi-xbian-2/">史上最全遍历二叉树详解</a></li>
<li><a href="https://leetcode.cn/problems/binary-tree-preorder-traversal/solution/tu-jie-er-cha-shu-de-si-chong-bian-li-by-z1m/">图解 二叉树的四种遍历</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[表达式求值问题总结]]></title>
    <link href="http://toughcoder.net/blog/2022/08/18/solve-expression-evaluation/"/>
    <updated>2022-08-18T21:15:04+08:00</updated>
    <id>http://toughcoder.net/blog/2022/08/18/solve-expression-evaluation</id>
    <content type="html"><![CDATA[<p>在模拟范畴内表达式运算求值是比较典型的一类问题。</p>

<p><a href="http://toughcoder.net/blog/2022/08/18/solve-expression-evaluation/"><img src="https://www.wikihow.com/images/thumb/7/73/Evaluate-an-Algebraic-Expression-Step-9.jpg/aid3181794-v4-728px-Evaluate-an-Algebraic-Expression-Step-9.jpg" title="auto auto" ></a></p>

<!-- more -->


<h2>问题分类</h2>

<p>表达式类问题一般输入都是以字串形式，所以第一个要点就是把一个字符串按语义拆解为符号，操作符和操作数。</p>

<p>第二个要点就是表达式的运算。</p>

<p>形式上又可分为后缀式和中缀式（也即正常顺序）。</p>

<p>操作符有些是只有加减法，有些则四则运算都有，这个会让难度上一个层次。</p>

<p>最难搞的就是括号，如果有括号的话，会让难度直接上一个数量级。</p>

<p>绝大多数场景都要用到栈，对于复杂的运算（四则）和有括号，因为涉及优先级和嵌套，所以要用到双栈，一个栈存操作符，一个栈存操作数。</p>

<h2>要点分析</h2>

<p>第一步就是拆解字串，把其分解成为<strong>操作符，符号</strong>和<strong>操作数</strong>。在拆解的时候最重要的就是当遇到某一个类型分类时，要把它当成一个整体全都解析出来，直到遇到不同类别的字符。比如说『-234+5』这样一个字串，第一个是符号，它不能单独存在，必须与其后的数字组合起来，这一坨直到加号『+』为止，是一个整体操作数<em>-234</em>。</p>

<p><strong>符号</strong>一般只出现在字符串的开头，具体的就是整个字串的第1个字符，以及等号右边的第1个字符（如果有等号的话）。</p>

<h2>典型问题</h2>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/solve-the-equation/">640. 求解方程</a> </td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/solve-the-equation/solution/640-qiu-jie-fang-cheng-by-alexhilton-39m8/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/fraction-addition-and-subtraction/">592. 分数加减运算</a> </td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/fraction-addition-and-subtraction/solution/by-alexhilton-u0c1/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h2>参考资料</h2>

<ul>
<li><a href="https://blog.csdn.net/dl962454/article/details/121533289">表达式求值、后缀表达式、计算器系列</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/115807632">LeetCode 题解 | 224.基本计算器</a></li>
<li><a href="https://blog.csdn.net/qq_44831907/article/details/115434570">leetcode 227 基本计算器：表达式通用解题模板</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1804025">(Leetcode 2021 刷题计划) 150. 逆波兰表达式求值</a></li>
<li><a href="https://segmentfault.com/a/1190000005659574">[Leetcode] Basic Calculator/Evaluate Expression 设计计算器/中缀表达式求值</a></li>
<li><a href="https://github.com/SharingSource/LogicStack-LeetCode/wiki/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AE%A1%E7%AE%97">表达式计算</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[秘密武器之单调栈]]></title>
    <link href="http://toughcoder.net/blog/2022/08/15/secret-weapon-monotonic-stack/"/>
    <updated>2022-08-15T23:50:29+08:00</updated>
    <id>http://toughcoder.net/blog/2022/08/15/secret-weapon-monotonic-stack</id>
    <content type="html"><![CDATA[<p>除了在树的遍历，DFS等常规场景使用栈(Stack)以外，针对某些特定的问题，还能以栈为主要手段进行非常巧妙的解题，栈中数据（通常是整数）的存储以<strong>单调递增</strong>或者<strong>单调递减</strong>的形式，新的元素入栈前通常要把小于它的或者大于它的元素出栈，习惯称之为<strong>单调栈</strong>。</p>

<p><a href="http://toughcoder.net/blog/2022/08/15/secret-weapon-monotonic-stack/"><img src="https://tse3-mm.cn.bing.net/th/id/OIP-C.G8tf8vP5EZFKle0-aE0fIwHaE6?pid=ImgDet&rs=1" title="auto auto" ></a></p>

<p>问题的常规解的时间复杂度通常会达到O(n<sup>2</sup>)或者O(nlog<sup>n</sup>)，但使用单调栈可以达到O(n)，思路非常的巧妙。</p>

<!-- more -->


<h2>单调栈的特点</h2>

<p>单调栈使用的数据结构就是栈，通常存储整数，可以入栈元素的下标，也可以直接把元素入栈。一般当需要计算元素之间的跨度时，比如像求面积，或者求天数时，这需要用元素的下标来计算，所以这时把元素下标入栈更为方便；其他情况直接入栈元素就可以。</p>

<p>单调栈，有二个重要的特性，一是栈，也要<strong>后进先出（FILO）</strong>，二是单调性，栈中的元素要么是递增的要么是递 减的。具体就单调性而言分为两类：</p>

<ol>
<li>单调<strong>递增栈:</strong>元素在栈中从栈底到栈顶是由大到小的，由此，<strong>出栈的序列</strong>是由小到大的，是递增的</li>
<li>单调<strong>递减栈:</strong>元素在栈中从栈底到栈顶是由小到大的，由此，<strong>出栈的序列</strong>是由大到小的，是递减的</li>
</ol>


<p>为了保持单调性，在入栈的时候，需要把破坏单调性的元素出栈，直到能够保持单调性。</p>

<p>可能不同的文章对单调性定义不同，有些是以栈中的顺序为主，有些是以出栈的序列为主，但只是概念上的不同理解而已，本质上并不无差别。本文将以<strong>出栈序列</strong>来定义。</p>

<h2>单调栈的适用性及其代码流程</h2>

<p>单调栈利用<strong>后进先出</strong>和单调性能够在一个一维数组中选出一个『下一个更大元素』或者『下一个更小元素』的序列，从而实现某些问题的解。</p>

<h3>代码流程</h3>

<p>它的典型流程，以单调递增栈为例，是：</p>

<ol>
<li>遍历输入列表（或者数组）</li>
<li>如果栈为空，或者当前元素（以下标形式或者元素）大于栈顶，直接入栈</li>
<li>否则，进行<strong>清栈：</strong>依据题目中<strong>某些约束条件</strong>，需要把栈中小于当前元素的元素出栈，然后把当前元素入栈</li>
<li>遍历完后，可能还需要清栈，栈中剩余的肯定 是不直接满足某些约束条件的，通常是对栈中元素直接以某些边界条件去计算结果</li>
</ol>


<p>另外，在实战中，还可以使用『哨兵』来简化逻辑，通常作为栈底，比如把-1（具体的数值需要依题而定）放在栈底，那么判断栈是否为空时就需要检查 是否忆到了哨兵元素。</p>

<h3>适用性</h3>

<p>单调栈应用范围不算大，它仅适合解决<strong>NEG问题</strong>，即Next Greater Element，下一个<strong>更大</strong>元素。注意，这里也可以更小的元素，也可以是前一个。</p>

<p>以一个简单的例子来说明，比如，有一个数组<strong>nums = [2, 1, 2, 4, 3]</strong>，返回一个等长数组，每个元素是当前索引在原数组中的『下一个更大』元素，如果没有就存-1。比如输入<strong>[2,1,2,4,3]</strong>就返回<strong>[4,2,4,-1,-1]</strong>。</p>

<p>这是典型的<strong>NEG问题</strong>。暴力解法容易想到，二次遍历就能找到，但会达到O(n<sup>2</sup>)的复杂度。</p>

<p>单调栈就能派上用场：整体思路就是还没有找到『更大』元素的元素先入栈，<strong>约束条件</strong>就是『更大的元素』，<strong>清栈</strong>就是把栈中小于当前元素的元素都弹出，因为它们已找到了『更大』元素，具体的：</p>

<ol>
<li>从前往后遍历，因为需要修改对应索引的值，所以栈中存索引比较方便</li>
<li>栈为空，或者当前元素[i]小于栈顶，就直接入栈</li>
<li>否则，清栈，把栈中小于当前元素出栈，因为它们忆找到『更大』元素了，就是当前元素[i]</li>
<li>遍历完成后，栈中可能有剩余元素，需要清栈，这些元素都没有找到『更大』元素的，直接存-1即可</li>
</ol>


<p>明显，这里用的是单调递增栈。只遍历一次，所有元素最多只入栈一次，所以时间复杂度是O(n)。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span><span class="o">[]</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
</span><span class='line'><span class="n">Stack</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">stack</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;&gt;();</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">||</span> <span class="n">nums</span><span class="o">[</span><span class="n">stack</span><span class="o">.</span><span class="na">peek</span><span class="o">()]</span> <span class="o">&gt;</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// 清栈</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(!</span><span class="n">stack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">nums</span><span class="o">[</span><span class="n">stack</span><span class="o">.</span><span class="na">peek</span><span class="o">()]</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>             <span class="n">result</span><span class="o">[</span><span class="n">stack</span><span class="o">.</span><span class="na">pop</span><span class="o">()]</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="c1">// 清栈</span>
</span><span class='line'><span class="k">while</span> <span class="o">(!</span><span class="n">stack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">result</span><span class="o">[</span><span class="n">stack</span><span class="o">.</span><span class="na">pop</span><span class="o">()]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>同一套路</h3>

<p>NEG是一类问题，用单调栈可解，但问题可能会被包装成各种问题，需要能够脱去外衣和内衣看到问题的本质。</p>

<p>比如，输入的是每日温度，找温度更高的一天，或者以身高为背景的问题，如只能看到比你矮的人的发型，如只能与比你矮的人交朋友等等。</p>

<h2>典型题目</h2>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/trapping-rain-water/">42. 接雨水</a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/next-greater-element-i/">496. 下一个更大元素 I</a> </td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/next-greater-element-i/solution/by-alexhilton-z1m1/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/next-greater-element-ii/">503. 下一个更大元素 II</a> </td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/next-greater-element-ii/solution/by-alexhilton-m4xs/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/daily-temperatures/">739. 每日温度</a> </td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/daily-temperatures/solution/by-alexhilton-vy0r/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/largest-rectangle-in-histogram">84. 柱状图中最大的矩形</a> </td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/largest-rectangle-in-histogram/solution/84-zhu-zhuang-tu-zhong-zui-da-de-ju-xing-nk72/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/maximal-rectangle">85. 最大矩形</a> </td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/maximal-rectangle/solution/by-alexhilton-zwd6/">题解</a>  </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/max-chunks-to-make-sorted-ii/">768. 最多能完成排序的块 II</a> </td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/max-chunks-to-make-sorted-ii/solution/768-zui-duo-neng-wan-cheng-pai-xu-de-kua-pp4l/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h2>参考资料</h2>

<ul>
<li><a href="https://liuzhenglaichn.gitbook.io/algorithm/monotonic-stack">Monotonic Stack</a></li>
<li><a href="https://x-czh.github.io/Algorithms-LeetCode/Topics/Monotonic-Stack-&amp;-Queue.html">Monotonic Stack &amp; Queue</a></li>
<li><a href="https://blog.csdn.net/lucky52529/article/details/89155694">[数据结构]——单调栈</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/346536592">算法学习笔记(67): 单调栈</a></li>
<li><a href="https://oi-wiki.org/ds/monotonous-stack/">单调栈</a></li>
<li><a href="https://www.cnblogs.com/liang24/p/14200734.html">单调栈技巧总结</a></li>
<li><a href="https://github.com/labuladong/fucking-algorithm/blob/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97/%E5%8D%95%E8%B0%83%E6%A0%88.md">单调栈</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/26465701">刷题笔记6（浅谈单调栈）</a></li>
<li><a href="https://www.jianshu.com/p/6bbd3653a57f">单调栈和应用实践</a></li>
<li><a href="https://blog.csdn.net/nirendao/article/details/119065757">单调栈(monotonic stack)揭秘</a></li>
<li><a href="https://blog.csdn.net/Hanx09/article/details/108434955">单调栈与单调队列算法详解及LeetCode经典题目（Python）</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MarkDown之数学公式]]></title>
    <link href="http://toughcoder.net/blog/2022/07/13/math-symbols-in-markdown-made-easy/"/>
    <updated>2022-07-13T21:35:58+08:00</updated>
    <id>http://toughcoder.net/blog/2022/07/13/math-symbols-in-markdown-made-easy</id>
    <content type="html"><![CDATA[<p>有时候文档里面会涉及一些数学公式，用常规的格式都难以得到满意的效果。</p>

<p>数学公式方面<a href="https://www.latex-project.org/">Latex</a>是最为专业的，Markdown也是支持Latex的。</p>

<p><a href="http://toughcoder.net/blog/2022/07/13/math-symbols-in-markdown-made-easy/"><img src="https://img95.699pic.com/photo/40176/0613.gif_wh860.gif" title="auto auto" ></a></p>

<!-- more -->


<h2>各种Markdown编辑器的支持情况</h2>

<h3>LeetCode题解</h3>

<p>它是直接支持的，用\$\$来标识就好了。用双\$\$\$\$来居中。</p>

<p>比如$\vec{AB}$就是一个向量。</p>

<h3>MacDown编辑器</h3>

<p>不支持Latex，但支持<a href="https://en.wikipedia.org/wiki/TeX">TeX</a>和<a href="https://en.wikipedia.org/wiki/MathML">MathML</a></p>

<p>A_s<sup>T</sup> = B</p>

<h3>Octopress</h3>

<p>Latex和MathML貌似都不支持。如果要支持，可以引入三方插件。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://www.jianshu.com/p/4460692eece4">Markdown 数学公式语法</a></li>
<li><a href="https://blog.csdn.net/jyfu2_12/article/details/79207643">markdown最全数学公式速查</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/158156773">一篇文章教会你如何在Markdown文档中插入数学公式</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/441454622">MarkDown数学公式</a></li>
<li><a href="https://www.latexlive.com/home">LaTeX公式编辑器ver1.6.</a></li>
<li><a href="https://www.runoob.com/markdown/md-tutorial.html">Markdown 教程</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java集合操作集锦]]></title>
    <link href="http://toughcoder.net/blog/2022/06/14/java-collection-opertions-made-easy/"/>
    <updated>2022-06-14T23:36:34+08:00</updated>
    <id>http://toughcoder.net/blog/2022/06/14/java-collection-opertions-made-easy</id>
    <content type="html"><![CDATA[<p>集合是最为常见的容器，在日常工作之中经常用到，一些集合的常规操作以及不同的集合之间的转换，虽然看似是基础中的基础，但实践中会发现并不是那么显而易见的，特别是涉及boxing的时候，这篇就是想总结 出一些最优的方式来进行集合操作和转换。</p>

<p><strong>注意</strong>：这里集合的意思是容器，是一个更为宽泛的概念，包括数组，列表，Map，Set等。</p>

<p><a href="http://toughcoder.net/blog/2022/06/14/java-collection-opertions-made-easy/"><img src="https://tse4-mm.cn.bing.net/th/id/OIP-C.rLPIzmZk6G7fV6TCQsotWAHaHa?pid=ImgDet&rs=1" title="auto auto" ></a></p>

<!-- more -->


<h2>核心理念</h2>

<p>不造轮子，也就是说尽可能的复用JDK里面的函数库，无论是数组结构，还是针对数组结构的操作。</p>

<p>另外，就是尽可能的用函数化，也即是Stream API来完成，因为这更直观，当然 这里不能为了用而用，还是要保持代码的简洁和易懂。</p>

<p>另外，集合中存放的都是对象，也就是Object的子类，但对于基础数据如int，float等并不是对象，但集合中难免会存放基础数据，这就涉及了<a href="https://docs.oracle.com/javase/tutorial/java/data/autoboxing.html">Autoboxing</a>，通常会有一定的性能开销，但最大的麻烦在于有时候在不同的集合中来回转换时autoboxing不起作用，就需要一些额外的操作。</p>

<p>这里为了简化说明，涉及对象的都用String对象，基础数据类型都用int，这样既简单又具体普适代表性。</p>

<p>本文代码所在<a href="https://github.com/alexhilton/EffectiveAlgorithm/blob/main/datastructure/src/main/java/CollectionTricks.java">位置请看这里</a>。</p>

<h2>一维集合</h2>

<p>包括，数组，列表，Set，以及Queue和Stack。</p>

<h3>列表</h3>

<p>为啥要先说列表呢，因为列表是最为常用的集合，并且它的函数式操作也是最为容易理解的，所以我们就从它开始。</p>

<h4>其他集合转化为列表</h4>

<ul>
<li>Arrays.asList()</li>
<li>List.of()</li>
</ul>


<h4>列表的经典操作</h4>

<ul>
<li>遍历</li>
<li>转化</li>
<li>过滤</li>
<li>折叠</li>
<li>最大值</li>
<li>最小值</li>
<li>求和</li>
<li>求平均值</li>
<li>转化为数组</li>
</ul>


<h4>带有索引来遍历</h4>

<p>很多时候，带有索引来遍历列表或者数组很有用，但很不幸，没有直接方法，要不然就只能用for-loop。</p>

<p>最好的方法，就是借助IntStream</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">IntStream</span><span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">names</span><span class="o">.</span><span class="na">length</span><span class="o">)</span>
</span><span class='line'>       <span class="o">.</span><span class="na">mapToObj</span><span class="o">(</span><span class="n">i</span> <span class="o">-&gt;</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;#%d: %s %d&quot;</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">names</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">names</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">length</span><span class="o">()))</span>
</span><span class='line'>       <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>数组</h3>

<h4>初始化数组</h4>

<ul>
<li>声明数组时，可以直接使用花括号来初始化，数组的尺寸可以省略，因为编译器能从初始化时推断出来</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span><span class="o">[]</span> <span class="n">a</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">};</span>
</span><span class='line'><span class="kt">int</span><span class="o">[][]</span> <span class="n">b</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">},</span>
</span><span class='line'>    <span class="o">{</span><span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">},</span>
</span><span class='line'>    <span class="o">{</span><span class="mi">7</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">}</span>
</span><span class='line'><span class="o">};</span>
</span><span class='line'><span class="n">String</span><span class="o">[]</span> <span class="n">names</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;James Harden&quot;</span><span class="o">,</span> <span class="s">&quot;Kevin Durant&quot;</span><span class="o">,</span> <span class="s">&quot;Kyrie Irving&quot;</span><span class="o">};</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>如果不能在声明时初始化，那就只能用数组的下标来进行单个赋值了</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span><span class="o">[]</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">3</span><span class="o">];</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">};</span> <span class="c1">// compile error</span>
</span><span class='line'><span class="n">a</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'><span class="n">a</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'><span class="n">a</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>数组操作</h4>

<ul>
<li>常用的操作都在<a href="https://docs.oracle.com/javase/8/docs/api/index.html">System.arraycopy</a>和<a href="https://docs.oracle.com/javase/8/docs/api/index.html">Arrays</a></li>
<li>数组通过Arrays.stream()可以直接转为Stream，然后就可以像列表那样直接进行各种操作了</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// 数组求和</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span>
</span><span class='line'>        <span class="n">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">a</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">sum</span><span class="o">()</span>
</span><span class='line'><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 二维数组，找行和最大值</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span>
</span><span class='line'>        <span class="n">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">b</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">row</span> <span class="o">-&gt;</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">row</span><span class="o">).</span><span class="na">sum</span><span class="o">())</span>
</span><span class='line'>                <span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="nl">Integer:</span><span class="o">:</span><span class="n">compareTo</span><span class="o">).</span><span class="na">get</span><span class="o">()</span>
</span><span class='line'><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 二维数组求和</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span>
</span><span class='line'>        <span class="n">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">b</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">flatMapToInt</span><span class="o">(</span><span class="n">row</span> <span class="o">-&gt;</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">row</span><span class="o">))</span>
</span><span class='line'>                <span class="o">.</span><span class="na">sum</span><span class="o">()</span>
</span><span class='line'><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">names</span><span class="o">).</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">IntStream</span><span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">names</span><span class="o">.</span><span class="na">length</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">mapToObj</span><span class="o">(</span><span class="n">i</span> <span class="o">-&gt;</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;#%d: %s %d&quot;</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">names</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">names</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">length</span><span class="o">()))</span>
</span><span class='line'>        <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// outputs</span>
</span><span class='line'><span class="c1">//6</span>
</span><span class='line'><span class="c1">//24</span>
</span><span class='line'><span class="c1">//45</span>
</span><span class='line'><span class="c1">//James Harden</span>
</span><span class='line'><span class="c1">//Kevin Durant</span>
</span><span class='line'><span class="c1">//Kyrie Irving</span>
</span><span class='line'><span class="c1">//#0: James Harden 12</span>
</span><span class='line'><span class="c1">//#1: Kevin Durant 12</span>
</span><span class='line'><span class="c1">//#2: Kyrie Irving 12</span>
</span></code></pre></td></tr></table></div></figure>


<h4>数组转为列表</h4>

<ul>
<li>如果数组的元素是Object，可以直接使用Arrays.asList来转换</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">nameList</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">names</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">nameList</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'> <span class="c1">//output</span>
</span><span class='line'> <span class="c1">//[James Harden, Kevin Durant, Kyrie Irving]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>但如果数组元素是基础数据，则不能直接使用Arrays.asList</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">aToList</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">a</span><span class="o">);</span> <span class="c1">// compile error</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">a</span><span class="o">));</span>
</span><span class='line'><span class="c1">// [[I@38af3868]</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于基础类型，Arrays.asList会把整个数组当成一个对象，结果的列表会变成List of array，也即是一个数组对象的列表，里面每个元素是数组对象，数组本身也是一个Object。这就与预期结果不一样，预期结果应该是List<Integer>，结果却变成了List&lt;int[]>。</p>

<p>可以用Stream来完成正确的转换。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">aToList</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">a</span><span class="o">)</span>
</span><span class='line'>                            <span class="o">.</span><span class="na">boxed</span><span class="o">()</span>
</span><span class='line'>                            <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">aToList</span><span class="o">);</span>
</span><span class='line'><span class="c1">// [1, 2, 3]</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果是Java 16，可以直接写成：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">aToList</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">a</span><span class="o">).</span><span class="na">boxed</span><span class="o">().</span><span class="na">toList</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<h4>列表转化为数组</h4>

<p>一般来说应该尽可能用列表，因为列表是可以自己管理长度，很多时候我们并不知道集合的长度。</p>

<p>但有时候吧，因为接口或者各种原因，它需要的又是数组，这就需要从列表转化为数组。</p>

<p>如果列表里的元素是对象的话，可以直接使用List#toArray，如果是基础类型的话，就需要做一下转换：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span><span class="o">[]</span> <span class="n">nameArray</span> <span class="o">=</span> <span class="n">nameList</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'><span class="n">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">nameArray</span><span class="o">).</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</span><span class='line'><span class="c1">// James Harden</span>
</span><span class='line'><span class="c1">// Kevin Durant</span>
</span><span class='line'><span class="c1">// Kyrie Irving</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span><span class="o">[]</span> <span class="n">aArray</span> <span class="o">=</span>
</span><span class='line'>       <span class="n">aToList</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>                  <span class="o">.</span><span class="na">mapToInt</span><span class="o">(</span><span class="nl">Integer:</span><span class="o">:</span><span class="n">intValue</span><span class="o">)</span>
</span><span class='line'>                  <span class="o">.</span><span class="na">toArray</span><span class="o">();</span>
</span><span class='line'><span class="n">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">aArray</span><span class="o">).</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</span><span class='line'><span class="c1">//1</span>
</span><span class='line'><span class="c1">//2</span>
</span><span class='line'><span class="c1">//3</span>
</span></code></pre></td></tr></table></div></figure>


<h2>二维集合</h2>

<p>二维数组（矩阵），嵌套列表，Map，图。</p>

<h3>创建和初始化</h3>

<p>二维数组的创建和初始化可以参考 上面数组的一节，就不重复了，主要就是在声明的时候可以直接初始化。</p>

<h4>嵌套列表的创建和初始化</h4>

<ul>
<li>Arrays.asList或者List.of</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">lists</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span>
</span><span class='line'>        <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&quot;James&quot;</span><span class="o">,</span> <span class="s">&quot;Harden&quot;</span><span class="o">),</span>
</span><span class='line'>        <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&quot;Kevin&quot;</span><span class="o">,</span> <span class="s">&quot;Durant&quot;</span><span class="o">),</span>
</span><span class='line'>        <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&quot;Kyrie&quot;</span><span class="o">,</span> <span class="s">&quot;Irving&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="n">ageHeights</span> <span class="o">=</span> <span class="n">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span>
</span><span class='line'>        <span class="n">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">35</span><span class="o">,</span> <span class="mi">200</span><span class="o">),</span>
</span><span class='line'>        <span class="n">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">32</span><span class="o">,</span> <span class="mi">211</span><span class="o">),</span>
</span><span class='line'>        <span class="n">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">30</span><span class="o">,</span> <span class="mi">192</span><span class="o">)</span>
</span><span class='line'><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">lists</span><span class="o">);</span>
</span><span class='line'><span class="c1">// [[James, Harden], [Kevin, Durant], [Kyrie, Irving]]</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ageHeights</span><span class="o">);</span>
</span><span class='line'><span class="c1">// [[35, 200], [32, 211], [30, 192]]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>转化</h3>

<h4>嵌套列表转化为二维数组</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span><span class="o">[][]</span> <span class="n">nameArrays</span> <span class="o">=</span> <span class="n">lists</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>        <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">row</span> <span class="o">-&gt;</span> <span class="n">row</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="n">String</span><span class="o">[]::</span><span class="k">new</span><span class="o">))</span>
</span><span class='line'>        <span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="n">String</span><span class="o">[][]::</span><span class="k">new</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">deepToString</span><span class="o">(</span><span class="n">nameArrays</span><span class="o">));</span>
</span><span class='line'><span class="c1">// [[James, Harden], [Kevin, Durant], [Kyrie, Irving]]</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span><span class="o">[][]</span> <span class="n">ageArrays</span> <span class="o">=</span> <span class="n">ageHeights</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>        <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">row</span> <span class="o">-&gt;</span> <span class="n">row</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">mapToInt</span><span class="o">(</span><span class="nl">Integer:</span><span class="o">:</span><span class="n">intValue</span><span class="o">).</span><span class="na">toArray</span><span class="o">())</span>
</span><span class='line'>        <span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]::</span><span class="k">new</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">deepToString</span><span class="o">(</span><span class="n">ageArrays</span><span class="o">));</span>
</span><span class='line'><span class="c1">// [[35, 200], [32, 211], [30, 192]]</span>
</span></code></pre></td></tr></table></div></figure>


<h4>二维数组转化为列表</h4>

<p>这里又分两种情况，一种是把二维数组展平为一维列表，另外，就是转化为嵌套列表</p>

<ul>
<li>二维数组展平为一维列表</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">nameList</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">nameArrays</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="nl">Arrays:</span><span class="o">:</span><span class="n">stream</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">nameList</span><span class="o">);</span>
</span><span class='line'><span class="c1">// [James, Harden, Kevin, Durant, Kyrie, Irving]</span>
</span><span class='line'>
</span><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">ageList</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">ageArrays</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">flatMapToInt</span><span class="o">(</span><span class="nl">Arrays:</span><span class="o">:</span><span class="n">stream</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">mapToObj</span><span class="o">(</span><span class="nl">Integer:</span><span class="o">:</span><span class="n">valueOf</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ageList</span><span class="o">);</span>
</span><span class='line'><span class="c1">// [35, 200, 32, 211, 30, 192]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>二维数组转化为嵌套列表
有了前面一维的方法，这个就好办了，无非就是多一层转换</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">nameNList</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">nameArrays</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">Arrays:</span><span class="o">:</span><span class="n">asList</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">nameNList</span><span class="o">);</span>
</span><span class='line'><span class="c1">// [[James, Harden], [Kevin, Durant], [Kyrie, Irving]]</span>
</span><span class='line'>
</span><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="n">ageNList</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">ageArrays</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">row</span> <span class="o">-&gt;</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">row</span><span class="o">).</span><span class="na">boxed</span><span class="o">().</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">()))</span>
</span><span class='line'>        <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ageNList</span><span class="o">);</span>
</span><span class='line'><span class="c1">// [[35, 200], [32, 211], [30, 192]]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Map操作和转化</h3>

<p>Map也是非常常用的数组结构，它的特点是键值的映射关系，优点是快速查询、删除和修改，能达到常数O（1）级别，在日常使用中特别常见。</p>

<h4>Map的遍历</h4>

<p>遍历有很多方法，这里列出四种最常见的遍历方式</p>

<ol>
<li>forEach，里面lambda的参数是key, value键值对</li>
<li>通过entrySet，这里是把entry转化为一个Set</li>
<li>通过keySet，把所有的Key转成一个Set</li>
<li>通过values，把所有的Value，转成一个Collection类型。</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
</span><span class='line'><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;Guard&quot;</span><span class="o">,</span> <span class="s">&quot;James Harden&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;Forward&quot;</span><span class="o">,</span> <span class="s">&quot;Kevin Durant&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;Point Guard&quot;</span><span class="o">,</span> <span class="s">&quot;Kyrie Irving&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">map</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span>
</span><span class='line'>         <span class="o">(</span><span class="n">k</span><span class="o">,</span> <span class="n">v</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">k</span> <span class="o">+</span> <span class="s">&quot; -&gt; &quot;</span> <span class="o">+</span> <span class="n">v</span><span class="o">)</span>
</span><span class='line'><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">map</span><span class="o">.</span><span class="na">entrySet</span><span class="o">().</span><span class="na">forEach</span><span class="o">(</span><span class="n">entry</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; -&gt; &quot;</span> <span class="o">+</span> <span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">()));</span>
</span><span class='line'>
</span><span class='line'><span class="n">map</span><span class="o">.</span><span class="na">keySet</span><span class="o">().</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">map</span><span class="o">.</span><span class="na">values</span><span class="o">().</span><span class="na">stream</span><span class="o">().</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然还有基础的遍历方法，如用for-loop或者用Iterator，就不重复了，网上一搜一大把。</p>

<h4>Map转成列表</h4>

<p>Map毕竟是二维数组结构，它里面有key和value，列表是一维数组，在转化的过程，涉及选择key还是选择value，要依实际目的决定。</p>

<p>而且需要注意的是Map并没有直接生成stream的方法，要想使用Stream API只能使用entrySet().stream()。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">guards</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">entrySet</span><span class="o">().</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>                <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">entry</span> <span class="o">-&gt;</span> <span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">().</span><span class="na">contains</span><span class="o">(</span><span class="s">&quot;Guard&quot;</span><span class="o">))</span>
</span><span class='line'>                <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">::</span><span class="n">getValue</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">guards</span><span class="o">);</span>
</span><span class='line'><span class="c1">// [James Harden, Kyrie Irving]</span>
</span><span class='line'>
</span><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">positions</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">keySet</span><span class="o">().</span><span class="na">stream</span><span class="o">().</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">positions</span><span class="o">);</span>
</span><span class='line'><span class="c1">// [Forward, Guard, Point Guard]</span>
</span><span class='line'>
</span><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">players</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">values</span><span class="o">().</span><span class="na">stream</span><span class="o">().</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">players</span><span class="o">);</span>
</span><span class='line'><span class="c1">// [Kevin Durant, James Harden, Kyrie Irving]</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Map转成数组</h4>

<p>可以把key, value转成数组，也可以把key和value转成数组。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span><span class="o">[]</span> <span class="n">keyArray</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">keySet</span><span class="o">().</span><span class="na">toArray</span><span class="o">(</span><span class="n">String</span><span class="o">[]::</span><span class="k">new</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">deepToString</span><span class="o">(</span><span class="n">keyArray</span><span class="o">));</span>
</span><span class='line'><span class="c1">// [Forward, Guard, Point Guard]</span>
</span><span class='line'><span class="n">String</span><span class="o">[]</span> <span class="n">valueArray</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">values</span><span class="o">().</span><span class="na">toArray</span><span class="o">(</span><span class="n">String</span><span class="o">[]::</span><span class="k">new</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">deepToString</span><span class="o">(</span><span class="n">valueArray</span><span class="o">));</span>
</span><span class='line'><span class="c1">// [Kevin Durant, James Harden, Kyrie Irving]</span>
</span></code></pre></td></tr></table></div></figure>


<p>但如果是Stream，比如用了entrySet().stream()或者keySet().stream()之后，就没有办法直接转成数组了，这时只能先转成列表，再转成数组。</p>

<h2>多维集合</h2>

<p>多维数组</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://www.techiedelight.com/convert-list-of-lists-to-2d-array-java/">Convert a List of Lists to a 2D array in Java</a></li>
<li><a href="https://stackoverflow.com/questions/960431/how-can-i-convert-listinteger-to-int-in-java">How can I convert List<Integer> to int[] in Java?</a></li>
<li><a href="https://stackoverflow.com/questions/1073919/how-to-convert-int-into-listinteger-in-java">How to convert int[] into List<Integer> in Java?</a></li>
<li><a href="https://stackoverflow.com/questions/11447780/convert-two-dimensional-array-to-list-in-java">Convert two dimensional array to List in java?</a></li>
<li><a href="https://stackoverflow.com/questions/18552005/is-there-a-concise-way-to-iterate-over-a-stream-with-indices-in-java-8">Is there a concise way to iterate over a stream with indices in Java 8?</a></li>
<li><a href="https://www.geeksforgeeks.org/how-to-iterate-hashmap-in-java/">How to Iterate HashMap in Java?</a></li>
<li><a href="https://stackhowto.com/convert-hashmap-to-list-in-java/">Convert Hashmap to List in Java</a></li>
<li><a href="https://www.techiedelight.com/convert-map-array-java/">Convert Map to an array in Java</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Camera 2 API学习之小结]]></title>
    <link href="http://toughcoder.net/blog/2022/05/08/summary-of-camera-2-api-project/"/>
    <updated>2022-05-08T15:59:15+08:00</updated>
    <id>http://toughcoder.net/blog/2022/05/08/summary-of-camera-2-api-project</id>
    <content type="html"><![CDATA[<p>通过前面的<a href="http://toughcoder.net/blog/2022/04/24/camera-2-handling-3a-parameters/">一系列文章</a>，到现在已经算是学完了Camera 2 API的使用了，也做出一个具体基础功能的相机应用，目前可称得上是一个1.0版本了，后续会在此基础上进行迭代。本篇先进行一个小结。</p>

<p><a href="http://toughcoder.net/blog/2022/05/08/summary-of-camera-2-api-project/"><img src="https://tse1-mm.cn.bing.net/th/id/R-C.21389bf92d6ddcd68a53cbcf118eb665?rik=D%2f7xkH%2b7FC115w&riu=http%3a%2f%2ffindnerd.s3.amazonaws.com%2fimagedata%2f8364%2f8364.jpg&ehk=K55%2fBz%2favKGvIksdqHHaPCN3z%2bIIaDp9xclEICTNIOc%3d&risl=&pid=ImgRaw&r=0" title="auto auto" ></a></p>

<script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"></script>


<script>mermaid.initialize({startOnLoad:true});</script>




<!-- more -->


<h2>整体架构</h2>

<p><a href="http://toughcoder.net/blog/2022/05/06/camera-2-record-video/">上一篇文章</a>加入了录像模式，让整体复杂度又提升了一个层次，需要做一次业务逻辑抽离。前面一直使用CameraContext作为整体外部调用的接口，一部分业务逻辑，如启动预览，打开相机，关闭相机，和拍照都放在了CameraContext之中。现在因为多了录像模式，且涉及模式切换，如果仍都把逻辑放入到CameraContext之中，会非常的混乱，于是需要引入新的组件：</p>

<div class="mermaid">
classDiagram
CameraScene <|-- BaseScene
BaseScene <|-- PhotoScene
BaseScene <|-- VideoScene
PhotoOutputConfig -&#45;|&gt; OutputConfig
VideoOutputConfig -&#45;|&gt; OutputConfig
PhotoScene *-- PhotoOutputConfig
VideoScene *-- VideoOutputConfig
BaseScene <-- CameraContext
BaseScene *-- CameraAgent
CameraContext <-- CameraAgent
class CameraScene {
    &lt;&lt;interface&gt;&gt;
    attachCameraContext(CameraContext cameraContext)
    attachSaveAgent(PhotoSaveAgent saveAgent)
    activate()
    onResume()
    onPause()
    deactivate()
    clickShutter(Consumer~PhotoCaptureStatus~ consumer)
    updatePreviewSurface(Surface surface)
    setFlashMode(FlashMode flashMode)
    changeOutputConfig(OutputConfig config)
    switchCamera(Config.CameraFacing facing)
    addPreviewSizeListener(Consumer~CameraSize~ consumer)
    addStatusListener(Consumer~SceneStatus~ consumer)
    getSupportedFlashModes() List~FlashMode~
    FlashMode getFlashMode()
    getSupportedOutputConfigs() List~OutputConfig~
    getOutputConfig() OutputConfig
}
class BaseScene {
    Context context
    CameraContext.CameraThreadHandler cameraHandler
    List~Consumer~CameraSize~~ previewSizeListeners
    List~Consumer~SceneStatus~~ moduleStatusListeners
    List~FlashMode~ supportedFlashModes

    CameraContext cameraContext
    CameraAgent cameraAgent
    Surface previewSurface
    PhotoSaveAgent saveAgent
    FlashMode flashMode
    
    notifyStatus(SceneStatus status)
    notifyPreviewSize(CameraSize size)
    generateOutputTargets() List~Surface~
    checkCameraContext()
    onCameraAvailable()
}
class VideoScene {
    Surface recorderSurface
    MediaRecorder mediaRecorder
    File emptyFile
    List~VideoOutputConfig~ supportedOutputConfigs
    VideoOutputConfig currentOutputConfig
}
class PhotoScene {
    Optional~OrientationEventListener~ orientationEventListener
    int deviceOrientation
    List~PhotoOutputConfig~ supportedOutputConfigs
    PhotoOutputConfig currentOutputConfig
}
class OutputConfig {
    int id
    String displayName
    Config.PictureRatio ratio
}
class PhotoOutputConfig {
    int width
    int height
    int format
}
class VideoOutputConfig {
    int width
    int height
    int fps
}
class CameraContext {
   Context context
    CameraManagerWrapper cameraManager
    Map~Config.CameraFacing, CameraAgent~ cameraCache
    HandlerThread cameraManageThread
    CameraThreadHandler cameraThreadHandler
    CameraAgent currentCamera
    
    attachThread()
    detachThread()
    openCamera()
    closeCamera()
    createScene()
    getCurrentCamera() CameraAgent
}
class CameraAgent {
    CameraCharacteristics characteristics
    Optional~CameraDevice~ cameraDevice
    Optional~CameraCaptureSession~ captureSession
    PreviewCaptureCallback previewCallback
    CaptureRequest.Builder requestBuilder
    CameraParameters parameters
    
    calculateSupportedRatios() List~PhotoOutputConfig~
    getFlashModes() List~FlashMode~
    calculateVideoRecordMode() List~VideoOutputConfig~
    connect()
    disconnect()
    startPreview(List~Surface~)
    stopPreview()
    capturePhoto()
    setFlashMode(FlashMode mode)
}
</div>


<h3>CameraScene和BaseScene</h3>

<p>一个Scene可以定义为一个典型的用户使用场景，比如拍照场景和录像场景，场景是业务逻辑的主要实现者，它的前面是UI层，后面则是平台API封装层。</p>

<h3>VideoScene和PhotoScene</h3>

<p>目前为止两个使用场景，PhotoScenne负责拍照，从UI处接收命令，完成拍照；VideoScene则负责录像。</p>

<p><a href="https://postimg.cc/c6pwmfHj"><img src="https://i.postimg.cc/4NdPX5TJ/camera2.png" alt="camera2.png" /></a></p>

<h3>与CameraContext的关系</h3>

<p>现在CameraContext则是一个纯的线程管理和camera open/close管理，除此之外的其他逻辑全部都挪到了Scene中去。Scene与Context的关系是组合关系，Scene的所有操作都应该只发生在CameraContext的线程中。</p>

<h2>线程模型</h2>

<p>三个长驻线程，一个是主线程负责UI交互，一个是CameraContext线程，负责所有的业务逻辑，还有一个是存储，一旦结果出来了后余下的所有事情都在存储线程中。</p>

<div class="mermaid">
sequenceDiagram
    MainThread-&gt;>CameraManageThread: startPreview
    CameraManageThread-&#45;&gt;>MainThread: onPreviewSize
    MainThread->>CameraManageThread: capturePhoto
    CameraManageThread-&#45;&gt;>MainThread: captureStatus
    CameraManageThread-) ImageSaveThread: onCaptureComplete
    ImageSaveThread-&#45;&gt;>MainThread: onThumbnailArrive
</div>


<h2>组件通信</h2>

<p>通过接口进行隔离，均不产生强依赖关系。因为数据 都不复杂，所以用Consumer就可以了，具体的状态根据不同的场景定义一些enum即可。</p>

<h3>camera状态反馈</h3>

<p>用于隔离Scene和CameraAgent，反馈camera的连接状态，方便做一些与camera强相关的业务处理，比如一些事情（预览和拍照）只能是在camera处于连接状态才能做的事。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">cameraContext</span><span class="o">.</span><span class="na">openCamera</span><span class="o">(</span><span class="n">Config</span><span class="o">.</span><span class="na">currentFacing</span><span class="o">,</span> <span class="n">status</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">onCameraAvailable</span><span class="o">();</span>
</span><span class='line'>        <span class="n">notifyStatus</span><span class="o">(</span><span class="n">SceneStatus</span><span class="o">.</span><span class="na">ACTIVE</span><span class="o">);</span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Scene状态反馈</h3>

<p>隔离UI和CameraScene，UI的状态，如一些按扭的可点态和显示与隐藏，以及一些显示内容需要知道CameraScene的状态，当CameraScene处于ACTIVE状态时UI才会完全处于可用态。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">Consumer</span><span class="o">&lt;</span><span class="n">SceneStatus</span><span class="o">&gt;</span> <span class="n">moduleStatusListener</span> <span class="o">=</span> <span class="n">status</span> <span class="o">-&gt;</span> <span class="n">mainHandler</span><span class="o">.</span><span class="na">post</span><span class="o">(</span>
</span><span class='line'>        <span class="o">()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">statusView</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">status</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">status</span> <span class="o">==</span> <span class="n">SceneStatus</span><span class="o">.</span><span class="na">ACTIVE</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">onSceneActive</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">onSceneInactive</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>预览尺寸变化 反馈</h3>

<p>比较纯，就是用于控制Surface的显示，它需要反馈当前预览的尺寸和比例。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">Consumer</span><span class="o">&lt;</span><span class="n">CameraSize</span><span class="o">&gt;</span> <span class="n">previewSizeListener</span> <span class="o">=</span> <span class="n">size</span> <span class="o">-&gt;</span> <span class="n">mainHandler</span><span class="o">.</span><span class="na">post</span><span class="o">(</span>
</span><span class='line'>        <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">viewFinder</span><span class="o">.</span><span class="na">setAspectRatio</span><span class="o">(</span><span class="n">size</span><span class="o">.</span><span class="na">height</span><span class="o">,</span> <span class="n">size</span><span class="o">.</span><span class="na">width</span><span class="o">)</span>
</span><span class='line'><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>拍照状态反馈</h3>

<p>这个仅在拍照时才需要。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="n">Consumer</span><span class="o">&lt;</span><span class="n">PhotoCaptureStatus</span><span class="o">&gt;</span> <span class="n">captureStatusListener</span> <span class="o">=</span> <span class="n">status</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">LOG_TAG</span><span class="o">,</span> <span class="s">&quot;capture status &quot;</span> <span class="o">+</span> <span class="n">status</span><span class="o">);</span>
</span><span class='line'>    <span class="n">statusView</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">&quot;Capture Status: &quot;</span> <span class="o">+</span> <span class="n">status</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">status</span> <span class="o">==</span> <span class="n">PhotoCaptureStatus</span><span class="o">.</span><span class="na">STARTED</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">overlayView</span><span class="o">.</span><span class="na">setBackground</span><span class="o">(</span><span class="k">new</span> <span class="nf">ColorDrawable</span><span class="o">(</span><span class="n">Color</span><span class="o">.</span><span class="na">argb</span><span class="o">(</span><span class="mi">150</span><span class="o">,</span> <span class="mi">255</span><span class="o">,</span> <span class="mi">255</span><span class="o">,</span> <span class="mi">255</span><span class="o">)));</span>
</span><span class='line'>        <span class="n">mainHandler</span><span class="o">.</span><span class="na">postDelayed</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">overlayView</span><span class="o">.</span><span class="na">setBackground</span><span class="o">(</span><span class="kc">null</span><span class="o">),</span> <span class="n">Config</span><span class="o">.</span><span class="na">CAPTURE_ANIM_DURATION</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">status</span> <span class="o">==</span> <span class="n">PhotoCaptureStatus</span><span class="o">.</span><span class="na">COMPLETED</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">shutterView</span><span class="o">.</span><span class="na">setClickable</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>        <span class="n">cameraSwitchView</span><span class="o">.</span><span class="na">setClickable</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">status</span> <span class="o">==</span> <span class="n">PhotoCaptureStatus</span><span class="o">.</span><span class="na">FAILED</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">thumbnailSwitcher</span><span class="o">.</span><span class="na">setClickable</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>        <span class="n">shutterView</span><span class="o">.</span><span class="na">setClickable</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>        <span class="n">cameraSwitchView</span><span class="o">.</span><span class="na">setClickable</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">};</span>
</span></code></pre></td></tr></table></div></figure>


<h2>后续计划</h2>

<p>架构仍需要优化，后面会加入新的功能，未完待续。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Camera2之录像]]></title>
    <link href="http://toughcoder.net/blog/2022/05/06/camera-2-record-video/"/>
    <updated>2022-05-06T22:38:03+08:00</updated>
    <id>http://toughcoder.net/blog/2022/05/06/camera-2-record-video</id>
    <content type="html"><![CDATA[<p><a href="http://toughcoder.net/blog/2022/04/24/camera-2-handling-3a-parameters/">前面的文章</a>都是集中在拍照模式，对于相机来说拍照与录像是两个最为基础的功能，这篇文章来看一下使用Camera2如何实现一个简单的录像功能。</p>

<p><a href="http://toughcoder.net/blog/2022/05/06/camera-2-record-video/"><img src="https://tse1-mm.cn.bing.net/th/id/R-C.d5e9195041cc351bd041464e996c1333?rik=kBPfq9at8eScog&riu=http%3a%2f%2fpublic.hudl.com%2fassets%2f562f9fbbd4c96106101813f7%2fbball_record.jpg&ehk=eigfVMaCv6ym1Sx4NimQfPnoJ%2frkdPMPlQrVoR9uFm8%3d&risl=&pid=ImgRaw&r=0" title="auto auto" ></a></p>

<!-- more -->


<h2>录像原理和流程</h2>

<p>录像相较于拍照来说，业务逻辑要稍简单一些，因为大部分功能的实现要靠<a href="https://developer.android.com/reference/android/media/MediaRecorder">MediaRecorder</a>。Camera2的API界线划分比较清楚，camera只负责输出图像帧，至于如何编码成为视频则是多媒体部分（也即MediaRecorder）的事情。</p>

<p>所以，实现录像功能，需要提供一个MediaRecorder，把其Surface作为camera的目标输出，同时作为MediaRecorder的输入，这就建立了它们的连接。</p>

<h3>录像的主要流程</h3>

<p>有以下几个关键的步骤需要做：</p>

<h4>1. 选择要使用的分辨率</h4>

<p>从CameraAgent中读取支持的分辨率。简单起见，可以用全高清来当默认值width=1920，height=1080，fps=30。</p>

<h4>2. 准备目标Surface</h4>

<p>可以用<a href="https://developer.android.com/reference/android/media/MediaCodec">MediaCodec</a>来创建一个Surface，用<a href="https://developer.android.com/reference/android/media/MediaCodec#createPersistentInputSurface(">createPersistentInputSurface</a>)方法，这个会传给CameraAgent用作配置session。</p>

<h4>3. 准备MediaRecorder</h4>

<p>创建实例，用步骤1作为video配置，步骤2 的Surface当作input surface，然后还要prepare，否则一些资源不会生效如Surface的buffer。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">setupMediaRecorder</span><span class="o">(</span><span class="n">VideoOutputConfig</span> <span class="n">mode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">recorderSurface</span> <span class="o">=</span> <span class="n">MediaCodec</span><span class="o">.</span><span class="na">createPersistentInputSurface</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">mediaRecorder</span> <span class="o">=</span> <span class="n">createRecorder</span><span class="o">(</span><span class="n">mode</span><span class="o">.</span><span class="na">width</span><span class="o">,</span> <span class="n">mode</span><span class="o">.</span><span class="na">height</span><span class="o">,</span> <span class="n">mode</span><span class="o">.</span><span class="na">fps</span><span class="o">);</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">mediaRecorder</span><span class="o">.</span><span class="na">prepare</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="n">LOG_TAG</span><span class="o">,</span> <span class="s">&quot;failed to prepare MediaRecorder: &quot;</span> <span class="o">+</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">MediaRecorder</span> <span class="nf">createRecorder</span><span class="o">(</span><span class="kt">int</span> <span class="n">width</span><span class="o">,</span> <span class="kt">int</span> <span class="n">height</span><span class="o">,</span> <span class="kt">int</span> <span class="n">fps</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">MediaRecorder</span> <span class="n">recorder</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">Build</span><span class="o">.</span><span class="na">VERSION</span><span class="o">.</span><span class="na">SDK_INT</span> <span class="o">&gt;=</span> <span class="n">Build</span><span class="o">.</span><span class="na">VERSION_CODES</span><span class="o">.</span><span class="na">S</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">recorder</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">MediaRecorder</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">recorder</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">MediaRecorder</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">recorder</span><span class="o">.</span><span class="na">setAudioSource</span><span class="o">(</span><span class="n">MediaRecorder</span><span class="o">.</span><span class="na">AudioSource</span><span class="o">.</span><span class="na">MIC</span><span class="o">);</span>
</span><span class='line'>    <span class="n">recorder</span><span class="o">.</span><span class="na">setVideoSource</span><span class="o">(</span><span class="n">MediaRecorder</span><span class="o">.</span><span class="na">VideoSource</span><span class="o">.</span><span class="na">SURFACE</span><span class="o">);</span>
</span><span class='line'>    <span class="n">recorder</span><span class="o">.</span><span class="na">setOutputFormat</span><span class="o">(</span><span class="n">MediaRecorder</span><span class="o">.</span><span class="na">OutputFormat</span><span class="o">.</span><span class="na">MPEG_4</span><span class="o">);</span>
</span><span class='line'>    <span class="n">recorder</span><span class="o">.</span><span class="na">setOutputFile</span><span class="o">(</span><span class="n">emptyVideoFile</span><span class="o">(</span><span class="n">context</span><span class="o">));</span>
</span><span class='line'>    <span class="n">recorder</span><span class="o">.</span><span class="na">setVideoEncodingBitRate</span><span class="o">(</span><span class="mi">1_0_000_000</span><span class="o">);</span>
</span><span class='line'>    <span class="n">recorder</span><span class="o">.</span><span class="na">setVideoSize</span><span class="o">(</span><span class="n">width</span><span class="o">,</span> <span class="n">height</span><span class="o">);</span>
</span><span class='line'>    <span class="n">recorder</span><span class="o">.</span><span class="na">setVideoFrameRate</span><span class="o">(</span><span class="n">fps</span><span class="o">);</span>
</span><span class='line'>    <span class="n">recorder</span><span class="o">.</span><span class="na">setVideoEncoder</span><span class="o">(</span><span class="n">MediaRecorder</span><span class="o">.</span><span class="na">VideoEncoder</span><span class="o">.</span><span class="na">H264</span><span class="o">);</span>
</span><span class='line'>    <span class="n">recorder</span><span class="o">.</span><span class="na">setAudioEncoder</span><span class="o">(</span><span class="n">MediaRecorder</span><span class="o">.</span><span class="na">AudioEncoder</span><span class="o">.</span><span class="na">AAC</span><span class="o">);</span>
</span><span class='line'>    <span class="n">recorder</span><span class="o">.</span><span class="na">setInputSurface</span><span class="o">(</span><span class="n">recorderSurface</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">recorder</span><span class="o">.</span><span class="na">setOnErrorListener</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="n">recorder</span><span class="o">.</span><span class="na">setOnErrorListener</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">recorder</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>到此，Surface和MediaRecorder就处于ready状态了</p>

<h4>4. 使用常规view finder的Surface和第2步的Surface来启动预览</h4>

<p>就是启动常规的预览即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">cameraAgent</span><span class="o">.</span><span class="na">startPreview</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">previewSurface</span><span class="o">,</span> <span class="n">recorderSurface</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<h4>5. 现在就处于Ready状态了，可以随时录像</h4>

<h4>6. 调用MediaRecorder#start/stop/pause/resume来录像</h4>

<h2>录像的分辨率选择</h2>

<p>尺寸比例可以固定在16：9，因为这是较为通用的比例尺寸：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">VideoOutputConfig</span><span class="o">&gt;</span> <span class="nf">calculateVideoRecordMode</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">StreamConfigurationMap</span> <span class="n">configurationMap</span> <span class="o">=</span> <span class="n">characteristics</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">CameraCharacteristics</span><span class="o">.</span><span class="na">SCALER_STREAM_CONFIGURATION_MAP</span><span class="o">);</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Size</span><span class="o">&gt;</span> <span class="n">supportedSizes</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">configurationMap</span><span class="o">.</span><span class="na">getOutputSizes</span><span class="o">(</span><span class="n">MediaRecorder</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">supportedSizes</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>            <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">size</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>                <span class="kd">final</span> <span class="kt">float</span> <span class="n">ratio</span> <span class="o">=</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span> <span class="n">size</span><span class="o">.</span><span class="na">getWidth</span><span class="o">()</span> <span class="o">/</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span> <span class="n">size</span><span class="o">.</span><span class="na">getHeight</span><span class="o">();</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">ratio</span> <span class="o">-</span> <span class="n">Config</span><span class="o">.</span><span class="na">PictureRatio</span><span class="o">.</span><span class="na">WIDE</span><span class="o">.</span><span class="na">ratio</span><span class="o">)</span> <span class="o">&lt;=</span> <span class="n">CameraSize</span><span class="o">.</span><span class="na">EPS</span><span class="o">;</span>
</span><span class='line'>            <span class="o">})</span>
</span><span class='line'>            <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">size</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>                <span class="kt">float</span> <span class="n">rfps</span> <span class="o">=</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span> <span class="n">configurationMap</span><span class="o">.</span><span class="na">getOutputMinFrameDuration</span><span class="o">(</span><span class="n">MediaRecorder</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">size</span><span class="o">)</span> <span class="o">/</span> <span class="mi">1_000_000_000</span><span class="o">.</span><span class="mi">0</span><span class="n">f</span><span class="o">;</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">fps</span> <span class="o">=</span> <span class="n">rfps</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="n">f</span> <span class="o">?</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="mf">1.0f</span> <span class="o">/</span> <span class="n">rfps</span><span class="o">)</span> <span class="o">:</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>                <span class="k">return</span> <span class="k">new</span> <span class="nf">VideoOutputConfig</span><span class="o">(</span><span class="n">size</span><span class="o">.</span><span class="na">getWidth</span><span class="o">(),</span> <span class="n">size</span><span class="o">.</span><span class="na">getHeight</span><span class="o">(),</span> <span class="n">fps</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}).</span><span class="na">filter</span><span class="o">(</span><span class="n">vrm</span> <span class="o">-&gt;</span> <span class="n">vrm</span><span class="o">.</span><span class="na">fps</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>录像之闪光灯</h2>

<p>闪光灯主要是用于拍照，但录像也是支持闪光灯的，当然还是要看硬件的配置，如果characteristics.get(<a href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics#FLASH_INFO_AVAILABLE">CameraCharacteristics.FLASH_INFO_AVAILABLE</a>)为true，那就可以在录像中使用闪光灯，不过一般情况下，只有OFF和TORCH两种模式，因为录像是一个持续的输出帧的过程，其余的模式没有意义。</p>

<h2>开始录像之后的流程</h2>

<p>录像准备妥当后，准备目标文件，监听用户事件，按下快门后开始录像，再次点击后结束录像，然后释放MediaRecorder，最后把文件写入媒体数据库。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Camera2拍照之3A处理]]></title>
    <link href="http://toughcoder.net/blog/2022/04/24/camera-2-handling-3a-parameters/"/>
    <updated>2022-04-24T21:17:03+08:00</updated>
    <id>http://toughcoder.net/blog/2022/04/24/camera-2-handling-3a-parameters</id>
    <content type="html"><![CDATA[<p><a href="http://toughcoder.net/blog/2022/04/13/camera-2-take-snapshot/">前面一篇文章</a>介如了如何进行拍照，但那是最为基本的操作，还不够，作为相机还需要处理3A相关的参数和状态，以得到更好的拍照效果，这篇文章就来详细的学习一下如何处理最基础的3A。</p>

<p><a href="http://toughcoder.net/blog/2022/04/24/camera-2-handling-3a-parameters/"><img src="https://3q9z5d3wyxnn1bhwik46zlyr-wpengine.netdna-ssl.com/wp-content/uploads/2013/01/mattcameradiagram2.png" title="auto auto" ></a></p>

<script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"></script>


<script>mermaid.initialize({startOnLoad:true});</script>




<!-- more -->


<h2><a href="https://source.android.com/devices/camera/camera3_3Amodes">基础知识</a></h2>

<p>3A，也即是AF &ndash; <a href="https://en.wikipedia.org/wiki/Autofocus">Auto Focus</a>（自动对焦）, <a href="https://www.sony.com/electronics/support/articles/00014979">AE</a> &ndash; Auto Exposure（自动爆光）和 AWB &ndash; Auto White Balance（自动白平衡），是拍照里面最为基础的三参数，对拍照的效果有直接影响。</p>

<p>大多数情况下，是不需要做特别的处理的，只要是一款合格的相机（无论是单反，卡片机，还是智能手机）都有自动模式，也就是说相机硬件系统会运行在一组自动的参数之下，也是默认的，基本的和常用的模式，用户不需要特别调整。只有在手动模式，或者称为高级模式的时候，才需要用户去设置特别的参数，以达到更为惊艳的拍照效果，或者应对更为复杂的拍摄条件，当然手动模式需要用户具备专业的知识，否则得到的拍摄效果会比auto模式还要差。</p>

<h2>常规的参数设置</h2>

<p> 旧的API中只需要从Camera对象中拿到Parameters对象，它像一个Map，更改其中的值就可以了。Camera 2略有变化 ，但总体思想是一样的，仍是类似于Map，键-值式的设置具体的参数，我们来看一下。</p>

<h3>关键的对象</h3>

<p>基类是<a href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata?hl=en">CameraMetadata</a>，它里面以键-值形式定义了参数，类似于一个Map，但它的键并不是单纯的String，值也并不是简单的数据类型如整数或者字串，而是全部都搞成了对象，以一种比较复杂的泛型的方式搞出来的，但就具体使用上面与Map一样，就get/set就好了，虽然都是对象，但都能autobox。</p>

<div class="mermaid">
classDiagram
    CameraMetadata <|-- CaptureRequest
    CameraMetadata <|-- CaptureResult
    CaptureRequest *-- Builder
    
    class CameraMetadata {
    }
    
    class CaptureRequest {
    }
    
    class Builder {
    }
    
    class CaptureResult {
    }
</div>


<p>更为具体的，把下发参数都用<a href="https://developer.android.com/reference/android/hardware/camera2/CaptureRequest?hl=en">CaptureRequest</a>来封装，也就是说上层对底层下发的参数请求，放于此对象中；而从底层读参数的状态，或者说读取某些参数的值则放在了<a href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult?hl=en">CaptureResult</a>里面。</p>

<p>CaptureRequest通常是在下发请求时要去从其Builder中生成的；而CaptureResult则是在CaptureCallback中由底层传上来的。</p>

<h3>参数设置的流程</h3>

<p>根据不同的参数需要可以在预览时，或者拍照时下发参数，方法基本上是一样的，都是通过请求下去的：CameraCaptureSession#setRepeatingRequest，CameraCaptureSession#capture。</p>

<p>在下发请求前需要通过<a href="https://developer.android.com/reference/android/hardware/camera2/CaptureRequest.Builder?hl=en">CaptureRequest#Builder</a>创建请求，而参数就是在此时以键-值方式设置下去的。CaptureRequest是一个Immutable的对象，只能过构建者模式Builder来改变和生成。</p>

<div class="mermaid">
sequenceDiagram
    CameraAgent -&gt;> CameraDevice: createCaptureRequest
    CameraDevice -&#45;&gt;> CameraAgent: CaptureRequest.Builder
    CameraAgent -&gt;> CameraCaptureSession: setRepeatingRequest
    CameraAgent -&gt;> CameraCaptureSession: capture
    CameraCaptureSession -&#45;&gt;> CameraAgent: CaptureCallback.onCaptureStarted
    CameraCaptureSession -&#45;&gt;> CameraAgent: CaptureCallback.onCaptureProgressed
    CameraCaptureSession -&#45;&gt;> CameraAgent: CaptureCallback.onCaptureCompleted
</div>


<h3>常见的预览参数设置</h3>

<p>把3A都设置为Auto即可，能满足需求：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">applyCommonParameters</span><span class="o">(</span><span class="n">CaptureRequest</span><span class="o">.</span><span class="na">Builder</span> <span class="n">requestBuilder</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">requestBuilder</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">CaptureRequest</span><span class="o">.</span><span class="na">CONTROL_MODE</span><span class="o">,</span> <span class="n">CaptureRequest</span><span class="o">.</span><span class="na">CONTROL_MODE_AUTO</span><span class="o">);</span>
</span><span class='line'>    <span class="n">requestBuilder</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">CaptureRequest</span><span class="o">.</span><span class="na">CONTROL_AF_MODE</span><span class="o">,</span> <span class="n">CaptureRequest</span><span class="o">.</span><span class="na">CONTROL_AF_MODE_CONTINUOUS_PICTURE</span><span class="o">);</span>
</span><span class='line'>    <span class="n">requestBuilder</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">CaptureRequest</span><span class="o">.</span><span class="na">CONTROL_AWB_MODE</span><span class="o">,</span> <span class="n">CaptureRequest</span><span class="o">.</span><span class="na">CONTROL_AWB_MODE_AUTO</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">applyForPreview</span><span class="o">(</span><span class="n">CaptureRequest</span><span class="o">.</span><span class="na">Builder</span> <span class="n">previewBuilder</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">applyCommonParameters</span><span class="o">(</span><span class="n">previewBuilder</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">previewBuilder</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">CaptureRequest</span><span class="o">.</span><span class="na">CONTROL_AE_MODE</span><span class="o">,</span> <span class="n">CaptureRequest</span><span class="o">.</span><span class="na">CONTROL_AE_MODE_ON</span><span class="o">);</span>
</span><span class='line'>    <span class="n">previewBuilder</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">CaptureRequest</span><span class="o">.</span><span class="na">CONTROL_AE_PRECAPTURE_TRIGGER</span><span class="o">,</span> <span class="n">CaptureRequest</span><span class="o">.</span><span class="na">CONTROL_AE_PRECAPTURE_TRIGGER_IDLE</span><span class="o">);</span>
</span><span class='line'>    <span class="n">previewBuilder</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">CaptureRequest</span><span class="o">.</span><span class="na">CONTROL_AE_LOCK</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">previewBuilder</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">CaptureRequest</span><span class="o">.</span><span class="na">CONTROL_CAPTURE_INTENT</span><span class="o">,</span> <span class="n">CaptureRequest</span><span class="o">.</span><span class="na">CONTROL_CAPTURE_INTENT_PREVIEW</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">applyFlashMode</span><span class="o">(</span><span class="n">previewBuilder</span><span class="o">,</span> <span class="n">ApplyType</span><span class="o">.</span><span class="na">PREVIEW</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>常见的拍照参数设置</h3>

<p>相较于preview无明显变化，只不过需要添加一些成片相关的设置，如图片质量，旋转等：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">applyForStillCapture</span><span class="o">(</span><span class="n">CaptureRequest</span><span class="o">.</span><span class="na">Builder</span> <span class="n">requestBuilder</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">applyCommonParameters</span><span class="o">(</span><span class="n">requestBuilder</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">requestBuilder</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">CaptureRequest</span><span class="o">.</span><span class="na">JPEG_QUALITY</span><span class="o">,</span> <span class="o">(</span><span class="kt">byte</span><span class="o">)</span> <span class="mi">92</span><span class="o">);</span>
</span><span class='line'>    <span class="n">requestBuilder</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">CaptureRequest</span><span class="o">.</span><span class="na">JPEG_ORIENTATION</span><span class="o">,</span> <span class="n">jpegRotation</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">requestBuilder</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">CaptureRequest</span><span class="o">.</span><span class="na">CONTROL_CAPTURE_INTENT</span><span class="o">,</span> <span class="n">CaptureRequest</span><span class="o">.</span><span class="na">CONTROL_CAPTURE_INTENT_STILL_CAPTURE</span><span class="o">);</span>
</span><span class='line'>    <span class="n">requestBuilder</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">CaptureRequest</span><span class="o">.</span><span class="na">CONTROL_AE_PRECAPTURE_TRIGGER</span><span class="o">,</span> <span class="n">CaptureRequest</span><span class="o">.</span><span class="na">CONTROL_AE_PRECAPTURE_TRIGGER_IDLE</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">applyFlashMode</span><span class="o">(</span><span class="n">requestBuilder</span><span class="o">,</span> <span class="n">ApplyType</span><span class="o">.</span><span class="na">CAPTURE</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果就是普通的拍照需求，以上这次常规的参数设置就足够了。</p>

<h2>闪光灯</h2>

<p>闪光灯是拍照过程中非常重要的参数，也会显著的影响拍照效果，但与旧的Camera不同，Camera 2中打闪的过程比较复杂，并不是把四种闪光灯模式设置下去就能完事儿的，还涉及AE状态的处理，需要仔细学习和研究。</p>

<p>闪光灯模式，现代的闪光灯共有四种模式：关闭，自动，打开和常亮：</p>

<ul>
<li>关闭 &ndash; 也就是关闭闪光灯，无论什么条件下都不打闪</li>
<li>自动 &ndash; 拍照时，依据AE自动爆光时的光线情况，决定是否需要打闪</li>
<li>打开 &ndash; 拍照时，打闪</li>
<li>常亮 &ndash; 像手电筒一样一直打开闪光灯，预览和拍照时都可生效。注意不能常亮时间太长，否则会引起手机温度过高，耗电过快，甚至可能此起主板烧断。</li>
</ul>


<p>通过在CaptureRequest中设置，键为<a href="https://developer.android.com/reference/android/hardware/camera2/CaptureRequest?hl=en#FLASH_MODE">CaptureRequest.FLASH_MODE</a>，但与旧的不一样，它的值只有三个：</p>

<ul>
<li><a href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata?hl=en#FLASH_MODE_OFF">FLASH_MODE_OFF</a></li>
<li><a href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata?hl=en#FLASH_MODE_SINGLE">FLASH_MODE_SINGLE</a></li>
<li><a href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata?hl=en#FLASH_MODE_TORCH">FLASH_MODE_TORCH</a></li>
</ul>


<p>与预期的四种模式并不匹配，并且如果你下发上面的模式会发现，OFF和TORCH还是符合预期的，分别对应着关闭和常亮。但是即使是SINGLE也并不是打开，它打闪的时间很短，拍照还没有完成就一闪而过，并且具体的打闪的时机，似乎与AE过程并不匹配。前面提到了闪光灯是与自动爆光（AE）过程关联特别大的，只有当AE收敛后打闪才是最合适的时机，并且打闪过程要持续到拍照结束。这里涉及AE状态的处理，并且真实下发的FLASH_MODE并不是SINGLE。</p>

<p><strong>注意</strong>：闪光灯的自动和打开状态仅对拍照过程生效，预览过程是不生效的，所以设置什么值都一样。下面的讨论也是针对拍照过程中的。</p>

<h3>闪光灯打开模式实现方法</h3>

<p>仔细查阅文档可以发现，自动和打开，其实与AE有关，并且AE有两种模式疑似与闪光灯有关系：</p>

<ol>
<li><a href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata#CONTROL_AE_MODE_ON_AUTO_FLASH">ON_AUTO_FLASH</a></li>
<li><a href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata#CONTROL_AE_MODE_ON_ALWAYS_FLASH">ON_ALWAYS_FLASH</a></li>
<li><a href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata#CONTROL_AE_MODE_ON_AUTO_FLASH_REDEYE">ON_AUTO_FLASH_REDEYE</a></li>
</ol>


<p>但直接把AE设置为以上的方式，也不能实现自动打闪和打闪，这两种情况与AE强相关，受AE状态控制，需要处理AE的状态，依据状态的不同然后换思路去实现。</p>

<p>一种实现方式是，真实下发的闪光灯状态是TORCH，但要受AE状态来控制，先触发<a href="https://developer.android.com/reference/android/hardware/camera2/CaptureRequest?hl=en#CONTROL_AE_PRECAPTURE_TRIGGER">AE_PRECAPTURE_TRIGGER</a>，然后监听AE状态变化，当其从<a href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata#CONTROL_AE_STATE_SEARCHING">SEARCHING</a>变为<a href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata#CONTROL_AE_STATE_CONVERGED">收敛</a>时，或者变为<a href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata#CONTROL_AE_STATE_FLASH_REQUIRED">FLASH_REQUIRED</a>时，就直接下发TORCH，直到拍照结束onCaptureCompleted，恢复为正常的状态。</p>

<div class="mermaid">
flowchart TD
    capturePhoto -&#45;> flashMode
    flashMode{FlashMode is ON or AUTO}
    flashMode == No ==> doCapture
    flashMode == Yes ==> preCapture
    preCapture[capture with request<br/>AE_PRECAPTURE_TRIGGER to START]
    preCapture -&#45;> aeSearching
    aeSearching[AE state is searching]
    aeSearching -&#45;> aeConverged
    aeConverged[AE state is converged or flashRequired]
    aeConverged -&#45;> flashTorch
    flashTorch[set flashMode to TORCH]
    flashTorch -&#45;> doCapture
    doCapture -&#45;> onCaptureCompleted
    onCaptureCompleted -&#45;> flashSingle
    flashSingle[set flashMode to SINGLE]
</div>


<p>需要注意的是，预拍照请求是通过单次请求capture下发的，其CaptureCallback可以与预览使用同一个。另外就是AE收敛过程的处理是在onCaptureProgressed中处理的，而其最终的状态是在onCaptureCompleted中的。</p>

<h3>闪灯光自动模式实现方式</h3>

<p>自动模式，与打开时类似，也是当需要打闪的时候直接下发TORCH，只不过，需要在预拍照时，看到AE的状态为FLASH_REQUIRED时，再去下发TORCH，否则就是OFF。</p>

<div class="mermaid">
sequenceDiagram
    CameraAgent -&gt;> CameraCaptureSession: capture AE_PRECAPTURE START
    CameraCaptureSession -&#45;&gt;> CameraAgent: onCaptureProgressed AE PRECAPTURE
    CameraCaptureSession -&#45;&gt;> CameraAgent: onCaptureProgressed AE SEARCHING
    CameraCaptureSession -&#45;&gt;> CameraAgent: onCaptureProgressed AE CONVERGED
    CameraCaptureSession -&#45;&gt;> CameraAgent: onCaptureProgressed AE FLASH_REQUIRED
    CameraAgent -&gt;> CameraCaptureSession: capture FLASH TORCH
    CameraCaptureSession -&#45;&gt;> CameraAgent: onCaptureCompleted
    CameraAgent -&gt;> CameraCaptureSession: setRepeatRequest FLASH SINGLE or OFF
</div>


<p><br/>
总结以上，那么下发flash mode需要做一些修改：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">applyFlashMode</span><span class="o">(</span><span class="n">CaptureRequest</span><span class="o">.</span><span class="na">Builder</span> <span class="n">requestBuilder</span><span class="o">,</span> <span class="n">ApplyType</span> <span class="n">type</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">LOG_TAG</span><span class="o">,</span> <span class="s">&quot;applyFlashMode mode &quot;</span> <span class="o">+</span> <span class="n">flashMode</span> <span class="o">+</span> <span class="s">&quot;, applyType &quot;</span> <span class="o">+</span> <span class="n">type</span><span class="o">);</span>
</span><span class='line'>    <span class="n">FlashMode</span> <span class="n">applyFlashMode</span> <span class="o">=</span> <span class="n">flashMode</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">switch</span> <span class="o">(</span><span class="n">type</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">PRECAPTURE:</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">CAPTURE:</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">((</span><span class="n">flashMode</span> <span class="o">==</span> <span class="n">FlashMode</span><span class="o">.</span><span class="na">AUTO</span> <span class="o">||</span> <span class="n">flashMode</span> <span class="o">==</span> <span class="n">FlashMode</span><span class="o">.</span><span class="na">ON</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">flashRequired</span><span class="o">)</span>  <span class="o">{</span>
</span><span class='line'>                <span class="n">applyFlashMode</span> <span class="o">=</span> <span class="n">FlashMode</span><span class="o">.</span><span class="na">TORCH</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">LOG_TAG</span><span class="o">,</span> <span class="s">&quot;applyFlashMode apply flash mode &quot;</span> <span class="o">+</span> <span class="n">applyFlashMode</span><span class="o">);</span>
</span><span class='line'>    <span class="n">requestBuilder</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">CaptureRequest</span><span class="o">.</span><span class="na">FLASH_MODE</span><span class="o">,</span> <span class="n">applyFlashMode</span><span class="o">.</span><span class="na">value</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">applyFlashMode</span> <span class="o">==</span> <span class="n">FlashMode</span><span class="o">.</span><span class="na">AUTO</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">requestBuilder</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">CaptureRequest</span><span class="o">.</span><span class="na">CONTROL_AE_MODE</span><span class="o">,</span> <span class="n">CaptureRequest</span><span class="o">.</span><span class="na">CONTROL_AE_MODE_ON_AUTO_FLASH</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">applyFlashMode</span> <span class="o">==</span> <span class="n">FlashMode</span><span class="o">.</span><span class="na">ON</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">requestBuilder</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">CaptureRequest</span><span class="o">.</span><span class="na">CONTROL_AE_MODE</span><span class="o">,</span> <span class="n">CaptureRequest</span><span class="o">.</span><span class="na">CONTROL_AE_MODE_ON_ALWAYS_FLASH</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">requestBuilder</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">CaptureRequest</span><span class="o">.</span><span class="na">CONTROL_AE_MODE</span><span class="o">,</span> <span class="n">CaptureRequest</span><span class="o">.</span><span class="na">CONTROL_AE_MODE_ON</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于打闪需要，现在capturePhoto方法已变成了三个方法，或者分为三个主要的步骤，一是预拍照，二是拍照，三是拍照后的流程：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nf">capturePhoto</span><span class="o">(</span><span class="n">Consumer</span><span class="o">&lt;</span><span class="n">PhotoCaptureStatus</span><span class="o">&gt;</span> <span class="n">consumer</span><span class="o">,</span> <span class="n">PhotoSaveAgent</span> <span class="n">imageSaveAgent</span><span class="o">,</span> <span class="kt">int</span> <span class="n">orientation</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">LOG_TAG</span><span class="o">,</span> <span class="s">&quot;takeSnapshot&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">cameraDevice</span><span class="o">.</span><span class="na">isPresent</span><span class="o">()</span> <span class="o">||</span> <span class="o">!</span><span class="n">captureSession</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">LOG_TAG</span><span class="o">,</span> <span class="s">&quot;takeSnapshot, cannot snap&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">consumer</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">parameters</span><span class="o">.</span><span class="na">setFlashRequired</span><span class="o">(</span><span class="n">previewCallback</span><span class="o">.</span><span class="na">flashRequired</span><span class="o">());</span>
</span><span class='line'>    <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">needPreCapture</span> <span class="o">=</span> <span class="n">parameters</span><span class="o">.</span><span class="na">needPreCapture</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Runnable</span> <span class="n">actionPostCapture</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">needPreCapture</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">actionPostCapture</span> <span class="o">=</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">LOG_TAG</span><span class="o">,</span> <span class="s">&quot;postCapture reset flash status for post capture.&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">parameters</span><span class="o">.</span><span class="na">applyForPreview</span><span class="o">(</span><span class="n">requestBuilder</span><span class="o">);</span>
</span><span class='line'>            <span class="n">previewCallback</span><span class="o">.</span><span class="na">setAEState</span><span class="o">(</span><span class="n">CameraParameters</span><span class="o">.</span><span class="na">Preview3AState</span><span class="o">.</span><span class="na">PICTURE_TAKEN</span><span class="o">);</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">captureSession</span><span class="o">.</span><span class="na">get</span><span class="o">().</span><span class="na">setRepeatingRequest</span><span class="o">(</span><span class="n">requestBuilder</span><span class="o">.</span><span class="na">build</span><span class="o">(),</span> <span class="n">previewCallback</span><span class="o">,</span> <span class="n">cameraHandler</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">CameraAccessException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">};</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">final</span> <span class="kt">int</span> <span class="n">jpegOrientation</span> <span class="o">=</span> <span class="n">CameraUtils</span><span class="o">.</span><span class="na">calculateRelativeRotation</span><span class="o">(</span><span class="n">characteristics</span><span class="o">,</span> <span class="n">orientation</span><span class="o">);</span>
</span><span class='line'>    <span class="n">parameters</span><span class="o">.</span><span class="na">setJpegRotation</span><span class="o">(</span><span class="n">jpegOrientation</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">PhotoStillCapture</span> <span class="n">stillCapture</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">PhotoStillCapture</span><span class="o">(</span><span class="n">consumer</span><span class="o">,</span> <span class="n">imageSaveAgent</span><span class="o">,</span> <span class="n">actionPostCapture</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">final</span> <span class="n">Runnable</span> <span class="n">action</span> <span class="o">=</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">LOG_TAG</span><span class="o">,</span> <span class="s">&quot;capture doCapture&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">captureSession</span><span class="o">.</span><span class="na">get</span><span class="o">().</span><span class="na">capture</span><span class="o">(</span>
</span><span class='line'>                    <span class="n">stillCapture</span><span class="o">.</span><span class="na">generateRequest</span><span class="o">(</span><span class="n">cameraDevice</span><span class="o">.</span><span class="na">get</span><span class="o">(),</span> <span class="n">imageSaveAgent</span><span class="o">.</span><span class="na">getOutputTarget</span><span class="o">(),</span> <span class="n">parameters</span><span class="o">),</span>
</span><span class='line'>                    <span class="n">stillCapture</span><span class="o">.</span><span class="na">getCaptureCallback</span><span class="o">(),</span>
</span><span class='line'>                    <span class="n">cameraHandler</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">CameraAccessException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">needPreCapture</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">pendingCaptureAction</span> <span class="o">=</span> <span class="n">action</span><span class="o">;</span>
</span><span class='line'>        <span class="n">preCapture</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">action</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
</span><span class='line'>        <span class="n">pendingCaptureAction</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">preCapture</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">LOG_TAG</span><span class="o">,</span> <span class="s">&quot;preCapture&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">CaptureRequest</span><span class="o">.</span><span class="na">Builder</span> <span class="n">builder</span> <span class="o">=</span> <span class="n">cameraDevice</span><span class="o">.</span><span class="na">get</span><span class="o">().</span><span class="na">createCaptureRequest</span><span class="o">(</span><span class="n">CameraDevice</span><span class="o">.</span><span class="na">TEMPLATE_PREVIEW</span><span class="o">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Surface</span> <span class="n">surface</span> <span class="o">:</span> <span class="n">previewSurfaces</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">builder</span><span class="o">.</span><span class="na">addTarget</span><span class="o">(</span><span class="n">surface</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">parameters</span><span class="o">.</span><span class="na">applyForPreCapture</span><span class="o">(</span><span class="n">builder</span><span class="o">);</span>
</span><span class='line'>        <span class="n">previewCallback</span><span class="o">.</span><span class="na">setAEState</span><span class="o">(</span><span class="n">CameraParameters</span><span class="o">.</span><span class="na">Preview3AState</span><span class="o">.</span><span class="na">WAITING_PRECAPTURE</span><span class="o">);</span>
</span><span class='line'>        <span class="n">captureSession</span><span class="o">.</span><span class="na">get</span><span class="o">().</span><span class="na">capture</span><span class="o">(</span><span class="n">builder</span><span class="o">.</span><span class="na">build</span><span class="o">(),</span> <span class="n">previewCallback</span><span class="o">,</span> <span class="n">cameraHandler</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">CameraAccessException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>CameraParameters对象</h2>

<p>为了方便3A以及拍照参数的管理，创建一个新的对象CameraParameters专门用于预览和拍照相关的参数和配置管理。此对象仅与CameraAgent交互，并且由CameraAgent持有。</p>

<div class="mermaid">
classDiagram
    PhotoStillCapture *&#45;- CameraParameters
    CameraAgent *&#45;- CameraParameters
    
    class CameraParameters {
    }
    
    class PhotoStillCapture {
    }
    
    class CameraAgent {
    }
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android ADB Made Easy]]></title>
    <link href="http://toughcoder.net/blog/2022/04/14/android-adb-made-easy/"/>
    <updated>2022-04-14T22:35:57+08:00</updated>
    <id>http://toughcoder.net/blog/2022/04/14/android-adb-made-easy</id>
    <content type="html"><![CDATA[<h2>Android ADB 命令大全</h2>

<p>ADB意即Android Debug Bridge是安卓开发（不止是应用开发）最为常用的工具，这里将总结一下该命令的使用。</p>

<p><a href="http://toughcoder.net/blog/2022/04/14/android-adb-made-easy/"><img src="https://tse1-mm.cn.bing.net/th/id/R-C.104b94c261017f8ecfad7fc7fcb9015e?rik=vQKR84tQzptEUA&riu=http%3a%2f%2fdriverslab.ru%2fimages%2fpost%2fandroid_adb.png&ehk=D9ws5sG7Gj7E%2bpfEQsJTjHS6MIem4%2f0P9z69aI6R7GA%3d&risl=&pid=ImgRaw&r=0&sres=1&sresct=1" title="auto auto" ></a></p>

<!-- more -->


<h2>比较有用的常规命令</h2>

<table>
<thead>
<tr>
<th> Commands </th>
<th> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Usage&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </th>
<th> Descriptions </th>
</tr>
</thead>
<tbody>
<tr>
<td> adb wait-for-devices </td>
<td> </td>
<td> 等待设备，只有设备成功连接后才停止等待 </td>
</tr>
<tr>
<td> adb devices </td>
<td> </td>
<td> 列出当前所有已连接的设备 </td>
</tr>
<tr>
<td> adb logcat -c </td>
<td> </td>
<td> 清除logcat的buffer </td>
</tr>
</tbody>
</table>


<h2>参考资料</h2>

<ul>
<li><a href="https://adbshell.com/commands">ADB Shell</a></li>
<li><a href="https://www.cnblogs.com/sjjg/p/6028580.html">adb shell 大全</a></li>
<li><a href="https://developer.android.com/studio/command-line/adb">官方教程 Android Debug Bridge</a></li>
<li><a href="https://gist.github.com/Pulimet/5013acf2cd5b28e55036c82c91bd56d8">Adb useful commands list</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Camera 2学习之拍照基础]]></title>
    <link href="http://toughcoder.net/blog/2022/04/13/camera-2-take-snapshot/"/>
    <updated>2022-04-13T21:31:01+08:00</updated>
    <id>http://toughcoder.net/blog/2022/04/13/camera-2-take-snapshot</id>
    <content type="html"><![CDATA[<p>前面<a href="http://toughcoder.net/blog/2022/03/04/camera-2-preview-and-improvement/">一篇文章</a>讲解了如何建立预览，下一步就是进行拍照了，这是相机类的核心业务，TL;DR。</p>

<p><a href="http://toughcoder.net/blog/2022/04/13/camera-2-take-snapshot/"><img src="https://tse4-mm.cn.bing.net/th/id/OIP-C.teE5837-ZJPLgV6e410swAHaFN?pid=ImgDet&rs=1" title="auto auto" ></a></p>

<script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"></script>


<script>mermaid.initialize({startOnLoad:true});</script>




<!-- more -->


<h2>拍照的基本流程</h2>

<p>先简单的总结 一下，有个印象，后面会逐一详细的讲解：</p>

<ol>
<li>需要一个目标输出，以接收camera的输出。Camera2的API界线划分的比较清楚，Camera只负责拍照成像，并且输出的结果不再像以前那样直接返回一个jpeg byte array，是一个中间结果，需要一个目标输出进行收集并处理。</li>
<li>需要一个CameraCaptureSession.CaptureCallback，以监听拍照流程状态</li>
<li>需要存储模块做最终的结果保存</li>
</ol>


<p>整体架构图：</p>

<div class="mermaid">
classDiagram
    OnImageAvailableListener  <|-- PhotoSaveAgent
    PhotoWriteTask --|> Runnable
    PhotoResultObserver <|-- PhotoSaveAgent
    PhotoSaveAgent ..|> PhotoWriteTask
    CaptureCallback  <|-- PhotoStillCapture
    PhotoSaveAgent *-- PhotoResult
    PhotoWriteTask *-- PhotoResult
    PhotoResultObserver --* PhotoStillCapture   
    class PhotoSaveAgent {
        imageReader
        photoQueue
        executor
        +config(int width, int height, int format)
        +Surface getOutputTarget()
        onImageAvailable()
        onCaptureStart()
        onCaptureComplete()
    }
    
    class OnImageAvailableListener {
        &lt;&lt;interface&gt;&gt;
        onImageAvailable(Image image)
    }
    
    class Runnable {
        &lt;&lt;interface&gt;&gt;
        run()
    }
    
    class PhotoWriteTask {
        &lt;&lt;interface&gt;&gt;
        run()
    }
    
    class PhotoResultObserver {
        &lt;&lt;interface&gt;&gt;
        onCaptureStart(CaptureRequest request, long timestamp, long frame, String filename)
        onCaptureComplete(CaptureRequest request, CaptureResult result)
    }
    
    class PhotoResult {
        CaptureRequest captureRequest
        long timestamp
        long frameNumber
        String filename
        CaptureResult captureResult
        Image image
    }
    
    class CaptureCallback {
        &lt;&lt;interface&gt;&gt;
        onCaptureStarted()
        onCaptureProgressed()
        onCaptureCompleted()
        onCaptureFailed()
    }
    
    class PhotoStillCapture {
        Date dateTaken
        String filename
        Consumer consumer
        PhotoResultObserver resultObserver
        +generateRequest()
        +generateCaptureCallback()
    }
</div>


<h2>存储模块</h2>

<p>存储模块的主要职责是提供目标输出给CameraAgent，收集拍照结果，并做后续的保存工作。它与CameraAgent是独立开来的，并没有直接的关系。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>save
</span><span class='line'>  |-- PhotoSaveAgent
</span><span class='line'>  |-- PhotoWriteTask</span></code></pre></td></tr></table></div></figure>


<h3>关键的组件</h3>

<h4>ImageReader拍照结果收集器</h4>

<h4>PhotoSaveAgent用以封装和对外交互</h4>

<h4>PhotoWriteTask专门负责把jpeg结果进行文件保存和媒体库的记录创建</h4>

<h4>结果队列</h4>

<p>因为结果会来源于ImageReader#OnImageAvailable和onCaptureComplete，需要合并两个异步回调的以合成最终结果，并且两个回调均是异步的，先后顺序 也不一样，因此需要一个队列。</p>

<p>因为查询比较多，所以，这里用一个哈希表来当作队列，键为CaptureRequest，而值为PhotoResult。</p>

<h3>线程模型</h3>

<p>会有一个HandlerThread，以保证存储模块相关的操作全部都发生在自己的HandlerThread里面，这里存储模块的主要的工作线程。当与外部交互 时，特别是有外部的回调过来时，都要及时的转入自己的工作线程进行后续处理，以保证线程的安全性。</p>

<p>ImageReader的回调OnImageAvailable也要放在自己的工作线程中。</p>

<p>还需要一个线程池专门用于jpeg结果的保存。因为文件的I/O是CPU密集型的耗时操作，如果放在主工作线程中，会造成阻塞，并且可能会多个拍照结果要处理，所以需要一个专门的线程池。</p>

<h3>对外交互</h3>

<h4>接收camera size</h4>

<p>因为创建ImageReader时需要指定一个尺寸，而这个尺寸必须 来自于camera，也就是说必须 是camera针对 某一配置所能支持的尺寸，并要符合一定的约束。这个尺寸最终会作用到目标输出Surface上面，从而影响拍照结果。</p>

<h4>提供一个返回Surface的接口给外部</h4>

<p>Camera 2的所有输出都是以Surface形式的中间结果（实质上都是一些buffer），所以需要提供一个Surface给CameraAgent。这个Surface可以从创建好了的ImageReader中直接获取。</p>

<h4>实现一个拍照结果观察者</h4>

<p>除了上述三个以外，不暴露任何公开的方法。</p>

<h3>主要工作流程</h3>

<p>此模块需要在Activity中进行初始化，和生命周期的管理，比如在onCreate时进行初始化，在onDestroy中进行销毁。</p>

<p>初始化时，要先准备工作线程HandlerThread，并启动。之后要把初始化工作都尽可能的放在工作线程中，以不阻塞外部调用线程。</p>

<p>之后是创建ImageReader，这个需要外部输入尺寸，一旦ImageReader创建完成，就会处于ready状态。</p>

<p>PhotoSaveAgent是对外交互的对象，在CameraContext中会使用此对象，主要是：</p>

<ol>
<li>当CameraAgent对象创建好了后，计算出来了picture size后，通知camera size给PhotoSaveAgent，PhotoSaveAgent知道此size后便可以创建ImageReader</li>
<li>拍照时，获取目标输出Surface，来源是第1步创建好后的ImageReader</li>
<li>拍照时接收拍照状态</li>
</ol>


<div class="mermaid">
stateDiagram-v2
    [*] &#45;&#45;> Setup
    Setup &#45;&#45;> Config
    Config &#45;&#45;> ReadyForImage
    ReadyForImage &#45;&#45;> CollectPhotoResult
    CollectPhotoResult &#45;&#45;> SavePhoto
    SavePhoto &#45;&#45;> ReadyForImage
    SavePhoto &#45;&#45;> TearDown
    TearDown &#45;&#45;> [*]
</div>


<h4>拍照结果收集</h4>

<p>一旦PhotoSaveAgent处于ready状态后，就可以随时收集拍照结果，拍照的结果全部是以回调的形式被动通知的，二个是来自于拍照模块，一个是ImageReader：</p>

<ol>
<li>拍照开始</li>
<li>拍照结束</li>
<li>ImageReader通知onImageAvailable</li>
</ol>


<p>需要注意，前面的三个回调拍照开始肯定 最先来，但后面的拍照结束和onImageAvailable谁先谁后真不一定，理论上来说是拍照结束来的早一些，但也不绝对，因此在逻辑处理上不能强依赖这两者的午后顺序。</p>

<p>主要的流程是：</p>

<ol>
<li>拍照开始时，在结果队列中添加记录，以CaptureRequest为key，并创建PhotoResult对象；</li>
<li>拍照结束回调中，以CaptureRequest为key，查询结果，向PhotoResult对象添加CaptureResult，并检查PhotoResult的状态，如果PhotoResult的CaptureResult和Image对象都齐全了，就说明拍照结果已集齐，这时就可以移除队列并进行保存了；</li>
<li>在onImageAvailable中，流程稍复杂些，因为这个回调只有一个Image对象，需要与队列中的PhotoResult对象进行匹配，就是通过拍照时的timestamp进行匹配，这是唯一的标识了，遍历队列，如果找到了就更新PhotoResult，并检查是否集齐，如已集齐则移除队列并进行结果保存。</li>
</ol>


<p>另外需要注意的是，拍照开始和拍照结束两个回调的调用线程不确定，所以需要进行转换，先转到PhotoSaveAgent的工作线程中再去处理，这样可以保证PhotoSaveAgent的所有操作都在自己的线程中，不需要再做额外的线程安全性保护。</p>

<h4>拍照结果保存</h4>

<p>在拍照结果回调中，以及onImageAvailable回调中检查PhotoResult是否集齐，集齐后，就可以进行结果保存。</p>

<p>主要流程如下：</p>

<ol>
<li>创建PhotoWriteTask，它实现了Runnable接口，以方便在线程池中使用</li>
<li>向线程池提交任务</li>
<li>在创建任务的时候，要把需要的信息都保存下来。特别需要注意的是，需要从Image中把jpeg byte array拷贝出来。因为ImageReader内部会用Image池子去不断的接收从外部输入（拍照时就是camera sensor）的结果，所以onImageAvailable中传过来的Image需要尽快的释放（即Image#close），以保证ImageReader能正常工作。PhotoWriteTask虽然是单独的线程池，但文件的I/O过程不可控，可能长也可能短，假如简单的持有Image对象，可能会导致Image对象无法及时被释放，从而导致ImageReader不能正常工作。因此需要在创建任务的时候就赶紧把jpeg bytes从Image中拷贝出来。</li>
<li>具体的写入过程比较清晰，向MediaProvider中写入文件即可。</li>
</ol>


<h2>拍照模块</h2>

<p>这是最为核心的一部分。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>snapshot
</span><span class='line'>    |-- PhotoCaptureStatus
</span><span class='line'>    |-- PhotoResult
</span><span class='line'>    |-- PhotoResultObserver
</span><span class='line'>    |-- PhotoStillCapture</span></code></pre></td></tr></table></div></figure>


<h3>关键组件</h3>

<ol>
<li>PhotoResultObserver，拍照结果观察者接口，用于向外部通知拍照结果，两个方法，一个是拍照开始，一个是拍照结束。注意拍照失败也是调用拍照结束，只不过没有CaptureResult。</li>
<li>PhotoResult，这是合成后的拍照结果对象，里面包含着拍照结果的一切信息，如文件名，参数，CaptureRequest，CaptureResult和Image。是一个POJO，仅做状态和数据的保存，无逻辑。</li>
<li>PhotoStillCapture，可理解为拍照对象，用以封装拍照参数，生成CaptureRequest和处理CaptureCallback。</li>
</ol>


<h3>线程模型</h3>

<p>这属于核心业务，所以它是在CameraContext的工作线程中的。</p>

<h3>对外交互</h3>

<p>通过PhotoResultObserver来通知外部拍照的结果状态。</p>

<h3>工作流程</h3>

<p>CameraContext中拉回拍照接口，并转入到自己的工作线程中。CameraAgent增加拍照接口，这是主要的功能入口。</p>

<div class="mermaid">
sequenceDiagram
    CameraActivity ->> CameraAgent: takePhoto
    CameraAgent ->> PhotoSaveAgent: getOutputTarget
    CameraAgent -&#45;>> CameraActivity: started
    CameraAgent -&#45;>> CameraActivity: ongoing
    CameraAgent -&#45;>> PhotoSaveAgent: onCaptureStart
    CameraAgent -&#45;>> CameraActivity: completed
    CameraAgent -&#45;>> PhotoSaveAgent: onCaptureComplete
    PhotoSaveAgent ->> PhotoWriteTask: savePhoto
    PhotoWriteTask -&#45;>> CameraActivity: thumbnailArrived
</div>


<p>CameraAgent会在其capturePhoto方法，创建一个PhotoStillCapture对象，然后调用CameraCaptureSession#capture方法进行拍照。拍照请求由PhotoStillCapture生成，CaptureCallback亦由PhotoStillCapture对象处理。</p>

<p>创建PhotoStillCapture对象是会锁定一些参数，如当前的旋转，文件名字（通常以时间戳为文件名字）， 以及PhotoResultObserver。</p>

<p>生成拍照请求CaptureRequest时，会传入一些拍照需要的参数，如旋转，如图片质量等等。</p>

<p>在CatpureCallback中，做一些简单处理，然后回调PhotoResultObserver。</p>

<p>到此，拍照模块的事情 就做完，它就要是拍照的前期工作，与外部做连接，下发请求就基本上完整了。拍照结果的收集则是存储模块的事情 了。</p>

<h2>状态反馈</h2>

<p>从整个拍照交互来说，也是需要状态反馈的，最为基础的交互逻辑是，为了保证拍照的成功率，当下发拍照请求后，到拍照结束前，也就是CaptureCallback#onCaptureCompleted或者CaptureCallback#onCaptureFailed这两个回调回来之前，是不可以下发新的拍照请求的。</p>

<div class="mermaid">
classDiagram
    CameraActivity &#45;&#45;|> Consumer
    Consumer &#45;&#45;&ast; PhotoStillCapture
    CaptureCallback <|&#45;&#45; PhotoStillCapture
    
    class Consumer {
        &lt;&lt;interface&gt;&gt;
        +accept(PhotoCaptureStatus status)
    }
    
    class CameraActivity {
    }
    
    class PhotoStillCapture {
        consumer
    }
    
    class CaptureCallback {
        &lt;&lt;interface&gt;&gt;
        onCaptureStarted()
        onCaptureProgressed()
        onCaptureCompleted()
        onCaptureFailed()
    }
</div>


<p>那么交互 层面也需要知道拍照状态，以方便进行UI管控，比如说当下发了拍照请求后，就把快门shutter设置为disabled，在拍照结束后再恢复为enabled的；此外还有拍照动画，也需要知道状态。</p>

<p>但UI交互层只知道状态就可以了，并不需要特别的数据，所以 这一路的状态通过简单的Consumer即可实现，仅在拍照模块中定义一些简单的状态就可以了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">enum</span> <span class="n">PhotoCaptureStatus</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">STARTED</span><span class="o">,</span>
</span><span class='line'>    <span class="n">ONGOING</span><span class="o">,</span>
</span><span class='line'>    <span class="n">FAILED</span><span class="o">,</span>
</span><span class='line'>    <span class="n">COMPLETED</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为拍照是由UI层触发的，所以在调用CameraContext时，就提供一个接收状态的Consumer就可以了，这样就把UI层和逻辑层分离开了，逻辑层接收Consumer作为参数，在关键的节点就回报状态；UI层负责处理感兴趣的状态就可以了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">takePhoto</span><span class="o">(</span><span class="n">View</span> <span class="n">view</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">shutterView</span><span class="o">.</span><span class="na">setEnabled</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">cameraFactory</span><span class="o">.</span><span class="na">takePhoto</span><span class="o">(</span><span class="n">status</span> <span class="o">-&gt;</span> <span class="n">mainHandler</span><span class="o">.</span><span class="na">post</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">captureStatusListener</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">status</span><span class="o">)));</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然别忘记了，在Consumer中要做线程切换，UI的处理只以在主线程中。</p>

<h2>缩略图处理</h2>

<p>缩短略图是一个非常重要的拍照结果展示，用以告诉用户拍照成功了，并且是预览结果成片的入口，因此需要做二个事情：</p>

<ol>
<li>监听拍照结果，注意这里并不是说要监听拍照状态，而是要监听拍照结果，因为只有得到最终结果jpeg array后，才可以从这里创建缩略图，并展示 出来。</li>
<li>点击缩略图时要能够进行结果成片的展示，所以，还需要知道拍照结果的文件路径，或者说Uri</li>
</ol>


<p>以上两个信息，都在PhotoSaveAgent里面，因此需要建立UI层与存储模块之间的连接，但其实存储层只是一个数据来源，它并不负责缩略图的业务，而且缩略图的来源可能的不止存储模块，还能来源于直接的数据库查询。</p>

<div class="mermaid">
classDiagram
    ThumbnailObserver <|-- CameraActivity
    CameraActivity --* Thumbnail
    ThumbnailObserver --* PhotoSaveAgent
    
    class CameraActivity {
        thumbnailArrived(Thumbnail thumbnaill)
    }
    
    class PhotoSaveAgent {
        +addThumbnailObserver()
    }
    
    class Thumbnail {
        bitmap
        uri
    }
    
    class ThumbnailObserver {
        &lt;&lt;interface&gt;&gt;
        thumbnailArrived(Thumbnail thumbnail)
    }
</div>


<p>为此，新建一个缩略图模块，里面有一个Thumbnail对象，是一个POJO用以代表缩略图的相关信息，如Bitmap和Uri；还有一个ThumbnailObserver的接口，用以让数据源告诉观察者，一个新的缩略图对象生成了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Thumbnail</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Uri</span> <span class="n">uri</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">mime</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Bitmap</span> <span class="n">bitmap</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Thumbnail</span><span class="o">(</span><span class="n">Uri</span> <span class="n">uri</span><span class="o">,</span> <span class="n">String</span> <span class="n">mime</span><span class="o">,</span> <span class="n">Bitmap</span> <span class="n">bitmap</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">uri</span> <span class="o">=</span> <span class="n">uri</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">mime</span> <span class="o">=</span> <span class="n">mime</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">bitmap</span> <span class="o">=</span> <span class="n">bitmap</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Bitmap</span> <span class="nf">getBitmap</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">bitmap</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Intent</span> <span class="nf">generateAction</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Intent</span><span class="o">(</span><span class="n">Intent</span><span class="o">.</span><span class="na">ACTION_VIEW</span><span class="o">);</span>
</span><span class='line'>        <span class="n">intent</span><span class="o">.</span><span class="na">setDataAndType</span><span class="o">(</span><span class="n">uri</span><span class="o">,</span> <span class="n">mime</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">intent</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ThumbnailObserver</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">thumbnailArrived</span><span class="o">(</span><span class="n">Thumbnail</span> <span class="n">thumbnail</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如此，UI层与PhotoSaveAgent就分离开来了，它们之间的联系只有ThumbnailObserver接口，UI层就实现接口，负责收到缩略图后的展示工作：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>   <span class="kd">private</span> <span class="kd">final</span> <span class="n">ThumbnailObserver</span> <span class="n">thumbnailObserver</span> <span class="o">=</span> <span class="n">thumbnail</span> <span class="o">-&gt;</span> <span class="n">mainHandler</span><span class="o">.</span><span class="na">post</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">updateThumbnail</span><span class="o">(</span><span class="n">thumbnail</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">updateThumbnail</span><span class="o">(</span><span class="n">Thumbnail</span> <span class="n">thumbnail</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">thumbnailSwitcher</span><span class="o">.</span><span class="na">setEnabled</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>        <span class="n">thumbnailSwitcher</span><span class="o">.</span><span class="na">setTag</span><span class="o">(</span><span class="n">thumbnail</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">((</span><span class="n">ImageView</span><span class="o">)</span> <span class="n">thumbnailSwitcher</span><span class="o">.</span><span class="na">getNextView</span><span class="o">()).</span><span class="na">setImageBitmap</span><span class="o">(</span><span class="n">thumbnail</span><span class="o">.</span><span class="na">getBitmap</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">thumbnailSwitcher</span><span class="o">.</span><span class="na">showNext</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// when init PhotoSaveAgent, register the thumbnail observer</span>
</span><span class='line'>    <span class="n">imageSaveAgent</span><span class="o">.</span><span class="na">addThumbnailObserver</span><span class="o">(</span><span class="n">thumbnailObserver</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">viewLastPhoto</span><span class="o">(</span><span class="n">View</span> <span class="n">view</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">thumbnailSwitcher</span><span class="o">.</span><span class="na">getTag</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">LOG_TAG</span><span class="o">,</span> <span class="s">&quot;No thumbnail, you should take photo first.&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">Thumbnail</span> <span class="n">thumbnail</span> <span class="o">=</span> <span class="o">(</span><span class="n">Thumbnail</span><span class="o">)</span> <span class="n">thumbnailSwitcher</span><span class="o">.</span><span class="na">getTag</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Intent</span> <span class="n">action</span> <span class="o">=</span> <span class="n">thumbnail</span><span class="o">.</span><span class="na">generateAction</span><span class="o">();</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">startActivity</span><span class="o">(</span><span class="n">action</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ActivityNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">LOG_TAG</span><span class="o">,</span> <span class="s">&quot;Unfortunately, we cannot view the photo.&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>而对于PhotoSaveAgent则需要在PhotoWriteTask里面，最后一步，也即文件保存完毕后，生成缩略图，因为是需要Uri的，所以必须是要在最后才能生成缩略图，并通过ThumbnailObserver回调：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>   <span class="c1">// in PhotoWriteTask</span>
</span><span class='line'>   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">///// other codes</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Thumbnail</span> <span class="n">t</span> <span class="o">=</span> <span class="n">generateThumbnail</span><span class="o">(</span><span class="n">fileUri</span><span class="o">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">ThumbnailObserver</span> <span class="n">to</span> <span class="o">:</span> <span class="n">thumbnailObservers</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">to</span><span class="o">.</span><span class="na">thumbnailArrived</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Thumbnail</span> <span class="nf">generateThumbnail</span><span class="o">(</span><span class="n">Uri</span> <span class="n">uri</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">Thumbnail</span><span class="o">(</span><span class="n">uri</span><span class="o">,</span> <span class="n">mime</span><span class="o">,</span> <span class="n">extractThumbnailBitmap</span><span class="o">(</span><span class="n">jpeg</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Bitmap</span> <span class="nf">extractThumbnailBitmap</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">jpegArray</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">target</span> <span class="o">=</span> <span class="mi">480</span><span class="o">;</span>
</span><span class='line'>        <span class="n">BitmapFactory</span><span class="o">.</span><span class="na">Options</span> <span class="n">options</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BitmapFactory</span><span class="o">.</span><span class="na">Options</span><span class="o">();</span>
</span><span class='line'>        <span class="n">options</span><span class="o">.</span><span class="na">inJustDecodeBounds</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="n">BitmapFactory</span><span class="o">.</span><span class="na">decodeByteArray</span><span class="o">(</span><span class="n">jpegArray</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">jpegArray</span><span class="o">.</span><span class="na">length</span><span class="o">,</span> <span class="n">options</span><span class="o">);</span>
</span><span class='line'>        <span class="n">options</span><span class="o">.</span><span class="na">inSampleSize</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">options</span><span class="o">.</span><span class="na">outWidth</span><span class="o">,</span> <span class="n">options</span><span class="o">.</span><span class="na">outHeight</span><span class="o">)</span> <span class="o">/</span> <span class="n">target</span><span class="o">;</span>
</span><span class='line'>        <span class="n">options</span><span class="o">.</span><span class="na">inJustDecodeBounds</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="n">Bitmap</span> <span class="n">bitmap</span> <span class="o">=</span> <span class="n">BitmapFactory</span><span class="o">.</span><span class="na">decodeByteArray</span><span class="o">(</span><span class="n">jpegArray</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">jpegArray</span><span class="o">.</span><span class="na">length</span><span class="o">,</span> <span class="n">options</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Matrix</span> <span class="n">matrix</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Matrix</span><span class="o">();</span>
</span><span class='line'>        <span class="n">matrix</span><span class="o">.</span><span class="na">postRotate</span><span class="o">(</span><span class="n">jpegOrientation</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Bitmap</span> <span class="n">rotated</span> <span class="o">=</span> <span class="n">Bitmap</span><span class="o">.</span><span class="na">createBitmap</span><span class="o">(</span><span class="n">bitmap</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">bitmap</span><span class="o">.</span><span class="na">getWidth</span><span class="o">(),</span> <span class="n">bitmap</span><span class="o">.</span><span class="na">getHeight</span><span class="o">(),</span> <span class="n">matrix</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">rotated</span> <span class="o">!=</span> <span class="n">bitmap</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">bitmap</span><span class="o">.</span><span class="na">recycle</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">rotated</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>拍照动画</h2>

<p>拍照动画的目的就在于给用户一个直观 的感觉，特别是拍照开始了，至于拍照结束倒是不用特别的，这人一般在缩略图那里体现。</p>

<p>主要做两个动画，一个是快门shutter的动画，这个是在快门点击时就可以去做了，主要是一个缩放的动画，把缩放的动画正着放一遍（缩小0.75倍），再reverse（放大到正常大小）即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">takePhoto</span><span class="o">(</span><span class="n">View</span> <span class="n">view</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">shutterView</span><span class="o">.</span><span class="na">setEnabled</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ScaleAnimation</span> <span class="n">anim</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ScaleAnimation</span><span class="o">(</span><span class="mi">1</span><span class="n">f</span><span class="o">,</span> <span class="mf">0.75f</span><span class="o">,</span> <span class="mi">1</span><span class="n">f</span><span class="o">,</span> <span class="mf">0.75f</span><span class="o">,</span>
</span><span class='line'>                <span class="n">Animation</span><span class="o">.</span><span class="na">RELATIVE_TO_SELF</span><span class="o">,</span> <span class="mf">0.5f</span><span class="o">,</span> <span class="n">Animation</span><span class="o">.</span><span class="na">RELATIVE_TO_SELF</span><span class="o">,</span> <span class="mf">0.5f</span><span class="o">);</span>
</span><span class='line'>        <span class="n">anim</span><span class="o">.</span><span class="na">setDuration</span><span class="o">(</span><span class="n">Config</span><span class="o">.</span><span class="na">CAPTURE_ANIM_DURATION</span> <span class="o">/</span> <span class="mi">2</span><span class="o">);</span>
</span><span class='line'>        <span class="n">anim</span><span class="o">.</span><span class="na">setInterpolator</span><span class="o">(</span><span class="k">new</span> <span class="nf">AccelerateDecelerateInterpolator</span><span class="o">());</span>
</span><span class='line'>        <span class="n">anim</span><span class="o">.</span><span class="na">setFillAfter</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>        <span class="n">anim</span><span class="o">.</span><span class="na">setRepeatMode</span><span class="o">(</span><span class="n">Animation</span><span class="o">.</span><span class="na">REVERSE</span><span class="o">);</span>
</span><span class='line'>        <span class="n">anim</span><span class="o">.</span><span class="na">setRepeatCount</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="n">shutterView</span><span class="o">.</span><span class="na">startAnimation</span><span class="o">(</span><span class="n">anim</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">cameraFactory</span><span class="o">.</span><span class="na">takePhoto</span><span class="o">(</span><span class="n">status</span> <span class="o">-&gt;</span> <span class="n">mainHandler</span><span class="o">.</span><span class="na">post</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">captureStatusListener</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">status</span><span class="o">)));</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外一个就是在拍照开始时的动画，这个动画的时机是在硬件真的开始拍照时做，也即是要在CaptureCallback#onCaptureStarted时去做，需要特别注意的是，这个时间是由硬件决定的，所以只有在onCaptureStarted回调时去做才是最恰当的。</p>

<p>至于动画的形式，一般是通过预览区域的闪动实现，比如可以用一个与预览Surface一样大小的View，改变它的颜色，给用户一种预览闪动的效果即可。这里的overlayView是一个盖在预览上面的透明的View，在做动画时给它设置为半透明的白色：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">private</span> <span class="kd">final</span> <span class="n">Consumer</span><span class="o">&lt;</span><span class="n">PhotoCaptureStatus</span><span class="o">&gt;</span> <span class="n">captureStatusListener</span> <span class="o">=</span> <span class="n">status</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">LOG_TAG</span><span class="o">,</span> <span class="s">&quot;capture status &quot;</span> <span class="o">+</span> <span class="n">status</span><span class="o">);</span>
</span><span class='line'>    <span class="n">statusView</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">&quot;Capture Status: &quot;</span> <span class="o">+</span> <span class="n">status</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">status</span> <span class="o">==</span> <span class="n">PhotoCaptureStatus</span><span class="o">.</span><span class="na">STARTED</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">overlayView</span><span class="o">.</span><span class="na">setBackground</span><span class="o">(</span><span class="k">new</span> <span class="nf">ColorDrawable</span><span class="o">(</span><span class="n">Color</span><span class="o">.</span><span class="na">argb</span><span class="o">(</span><span class="mi">150</span><span class="o">,</span> <span class="mi">255</span><span class="o">,</span> <span class="mi">255</span><span class="o">,</span> <span class="mi">255</span><span class="o">)));</span>
</span><span class='line'>        <span class="n">mainHandler</span><span class="o">.</span><span class="na">postDelayed</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">overlayView</span><span class="o">.</span><span class="na">setBackground</span><span class="o">(</span><span class="kc">null</span><span class="o">),</span> <span class="n">Config</span><span class="o">.</span><span class="na">CAPTURE_ANIM_DURATION</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">status</span> <span class="o">==</span> <span class="n">PhotoCaptureStatus</span><span class="o">.</span><span class="na">COMPLETED</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">shutterView</span><span class="o">.</span><span class="na">setEnabled</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">status</span> <span class="o">==</span> <span class="n">PhotoCaptureStatus</span><span class="o">.</span><span class="na">FAILED</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">shutterView</span><span class="o">.</span><span class="na">setEnabled</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">};</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac画图工具]]></title>
    <link href="http://toughcoder.net/blog/2022/04/01/diagrams-drawing-made-easy/"/>
    <updated>2022-04-01T23:30:44+08:00</updated>
    <id>http://toughcoder.net/blog/2022/04/01/diagrams-drawing-made-easy</id>
    <content type="html"><![CDATA[<p>在平时开发中，经常需要画各种图形，比如流程图，架构图和UML图等等。找到一个好用且高效的工具能事半功倍，现在就来总结一下在Mac上面有哪些好用的画图工具。</p>

<p><a href="http://toughcoder.net/blog/2022/04/01/diagrams-drawing-made-easy/"><img src="https://www.pcwdld.com/wp-content/uploads/Cade-Network-diagramming-tool.jpg" title="auto auto" ></a></p>

<!-- more -->


<h2>厘清需求</h2>

<p>还是要先厘清需求明确问题。需求也比较明确，最好是免费，用户友好，支持导出各种图片格式，能支持常见的各种图形，如流程图，架构图和UML图等。</p>

<h2>桌面软件</h2>

<p>桌面软件大部分都是付费的，但也有一些是免费的，以下的值得尝试，这些都是专业公司开发的，在功能，易用性和稳定性上面要好一些。</p>

<table>
<thead>
<tr>
<th> &nbsp;&nbsp;&nbsp;&nbsp;Name&nbsp;&nbsp;&nbsp;&nbsp; </th>
<th style="text-align:center;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;付费情况&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </th>
<th style="text-align:center;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下载安装&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </th>
<th style="text-align:center;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;支持平台&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </th>
<th> &nbsp;&nbsp;&nbsp;&nbsp;说明&nbsp;&nbsp;&nbsp;&nbsp; </th>
</tr>
</thead>
<tbody>
<tr>
<td> <a href="https://www.nchsoftware.com/chart/index.html?ref=cj&amp;cjevent=27d37b109b8711eb808b01840a180511">ClickCharts</a> </td>
<td style="text-align:center;"> 基础版本免费 </td>
<td style="text-align:center;"> <a href="https://www.nchsoftware.com/chart/clickchartspmaci.zip">网站下载</a> </td>
<td style="text-align:center;"> Windows<br/>Mac<br/>Android </td>
<td> 界面接近Visio<br/>功能比较齐全 </td>
</tr>
<tr>
<td> <a href="http://pencil.evolus.vn/">Pencil</a> </td>
<td style="text-align:center;"> 开源且免费 </td>
<td style="text-align:center;"> <a href="http://pencil.evolus.vn/dl/V3.1.0.ga/Pencil-3.1.0.ga.dmg">网站下载</a> </td>
<td style="text-align:center;"> Windows<br/>Mac<br/>Linux </td>
<td> 是一款开源软件，免费使用<br/>不好的地方是文档较少 </td>
</tr>
</tbody>
</table>


<h2>在线工具</h2>

<p>除了桌面软件以外，还有很多在线的图形工具，非常的好用。随着Browser性能越来越强，现在Web端的体验也是相当的好，可以优先选择Web端。</p>

<h3><a href="https://app.diagrams.net/">Draw.io</a></h3>

<p>这个相当有名气，用的也比较广泛，一般来讲能够满足日常需求。</p>

<h3>基于JavaScript的图形库</h3>

<p>还有很多用JavaScript实现的图表库也相当的棒，有在线的编辑工具，并且很多都支持语法脚本，支持云存储，也支持把结果以图片形式下载到本地，非常的实用。</p>

<table>
<thead>
<tr>
<th> Name </th>
<th style="text-align:center;">  &nbsp;&nbsp;&nbsp;&nbsp;在线编辑工具&nbsp;&nbsp;&nbsp;&nbsp; </th>
<th> &nbsp;&nbsp;&nbsp;&nbsp;说明&nbsp;&nbsp;&nbsp;&nbsp; </th>
</tr>
</thead>
<tbody>
<tr>
<td> <a href="https://mermaid-js.github.io/mermaid/#/">mermaid</a> </td>
<td style="text-align:center;"> <a href="https://mermaid.live/edit#pako:eNpVkM-KwkAMxl8l5OSCfYEeBG3Vi6Cgt46H0InOIPOHdMoibd99p5aF3ZyS7_t9IWTANmjGEp9C0cCtVh5ybZvKiO2So-4ORbEZj5zABc_vEXarY4DOhBitf34t_G6GoBpOM8aQjPWvabGqT_7seYS6OVFMId7_OrfvMMK-sReT1_93jHBOHZoHlQ8qWhKoSD4IrtGxOLI6nz7MisJk2LHCMrea5KVQ-SlzfdSUeK9tCoJlkp7XSH0K17dvf-eFqS3lL7hFnH4ABg5bBA">mermaid live</a> </td>
<td> </td>
</tr>
<tr>
<td> <a href="https://bramp.github.io/js-sequence-diagrams/">js-sequence-diagrams</a></td>
<td style="text-align:center;"> </td>
<td></td>
</tr>
<tr>
<td> <a href="http://flowchart.js.org/">flowchatjs</a> </td>
<td style="text-align:center;"> </td>
<td></td>
</tr>
</tbody>
</table>


<p><br/>
更多的在线工具可以参考<a href="http://toughcoder.net/blog/2022/03/28/blog-image-bed-made-easy/">前一篇文章</a>。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://www.makeuseof.com/tag/free-flowchart-makers-mac/">The 7 Best Free Mac Flowchart Makers for Quick and Easy Diagrams</a></li>
<li><a href="https://www.softwaretestinghelp.com/flowchart-software/">10 Best Free Flowchart Software For Windows And Mac</a></li>
<li><a href="https://machow2.com/flowcharts-for-mac-the-best-software/">10 Best Flowchart Software of 2022 For Pros</a></li>
<li><a href="https://zapier.com/blog/flowchart-diagramming-software/">The best flowchart software and diagram tools in 2022</a></li>
<li><a href="https://www.techrepublic.com/article/five-free-web-based-tools-that-make-diagramming-a-snap/">Five free web-based tools that make diagramming a snap</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[博客图形图像解决办法]]></title>
    <link href="http://toughcoder.net/blog/2022/03/28/blog-image-bed-made-easy/"/>
    <updated>2022-03-28T20:46:51+08:00</updated>
    <id>http://toughcoder.net/blog/2022/03/28/blog-image-bed-made-easy</id>
    <content type="html"><![CDATA[<p>一个好的博客必须要图文并茂，但图片是一个大问题，用GitHub pages搭建的博客最为蛋疼的就是图床问题，被图床问题困扰了很久，需要花点时间好好的解决一下子了。</p>

<p><a href="http://toughcoder.net/blog/2022/03/28/blog-image-bed-made-easy/"><img src="https://cdn.writermag.com/2016/12/blogs-versus-articles.jpg" title="auto auto" ></a></p>

<!-- more -->


<h2>图片始终是痛点</h2>

<p>曾经用过七牛，免额满了后就没有再用了。</p>

<p>后来用微博，但后来微博不允许外链了，不但不能再用了，之前存在微博的图片也都无法访问了。</p>

<p>免费的图床也一直都有，但都不长久，这东西很难盈利，运营不过多久就会关了，还要再找新的。一个字就是蛋疼。</p>

<h2>厘清需求</h2>

<p>要想解决问题，需要先把问题澄清，问题源于图片需求。</p>

<ul>
<li>非原创性图片，用于splash，或者说明和阐述一些细节的</li>
<li>原创图片，手动画的一些图片</li>
<li>截屏，手机截屏，或者电脑屏幕截图，用于展示过程说明或者运行结果</li>
<li>原创图形，如流程图，结构图，架构图，设计图或者UML图</li>
</ul>


<p>在博客中使用的图形与图像，就是以上四种。</p>

<h2>如何解决问题</h2>

<p>针对 不同的需求用不同的解法。</p>

<h3>非原创性图片用链接</h3>

<p>对于非原创性图片，尽可能的在网络上搜索，使用网络图片，这是最为省事的。</p>

<p>搜索的时候要注意：</p>

<ol>
<li>尽是用<a href="https://cn.bing.com/">Bing</a>来搜索</li>
<li>图片不能被墙，要都能访问的</li>
<li>注意版权，别侵权</li>
</ol>


<h3>原创性图片和截屏找图床</h3>

<p>没办法，这个只能找图床来解决了。后面再单独拿出来说。</p>

<h3>原创图形用画图库</h3>

<p>对于一些原创性的图形，要寻找画图库来解决，就是那种内嵌在网页里面的，用脚本或者源码去画图的图形库。后面单独说。</p>

<h2>痛点治疗方案</h2>

<p>通过上面来分析，如何找到图床和画图库，就成解决痛点的关键。</p>

<h3>图床用<a href="https://postimages.org/">postimages</a></h3>

<p>看似绕来绕去，仍还是需要寻找图床。但其实还是不一样，通过上面分析，发现仅有少量的原创图片和截屏需要图床，所以整体量并不大。用GitHub就可以了，空间是够的不是问题，问题就在于稳定性，毕竟访问GitHub经常抽风（不是GitHub server本身抽风，而是网络抽风），另外就是CDN加速。即使GitHub能正常访问，但是还是太慢了，对于常规的push/pull还好，但图片肯定会明显感觉到很慢，必须寻找CDN加速方法。</p>

<ul>
<li>新建一个repo，专门用于博客图床</li>
<li>寻找CDN加速方法</li>
</ul>


<p>网络上还真有大把的人用GitHub用作图床，方法有两种：</p>

<ol>
<li>直接在GitHub issues中上传图片，<a href="https://dev.to/adityatyagi/host-images-for-free-on-github-3d1c">这篇文章有详细讨论</a></li>
<li>创建一个repo，<a href="https://fizzy.cc/use-github-repo-to-host-images/">可以看这篇文章</a>，讲的很详细</li>
</ol>


<p>方法1非常的简单和方便，对于图片需求量不大的话，非常合适，而且它不占用repo的空间配额。目前先用方法1。如果 后面图片量确实大的话，再考虑切到方案2.</p>

<p><strong>注意</strong>：GitHub貌似做了屏蔽，不让上传图片，可能是因为上传的图片太多了，hold不住了，所以做了限制。</p>

<h3>专用图床</h3>

<p>目前发现<a href="https://postimages.org/">postimages</a>比较好用，先用这个吧。</p>

<ul>
<li><a href="https://www.bettertechtips.com/blogging/image-hosting-blog/">7 Free Image Hosting Sites to Save Your Blog Storage</a></li>
<li><a href="https://blogpros.com/blog/2016/03/host-blog-images-free">10 Reliable Websites to Host Your Blog Images for Free</a></li>
</ul>


<h3>寻找JavaScript图形库</h3>

<p>这个现成方案很多，就需要找一个合适的。</p>

<p>我们的需求是：</p>

<ol>
<li>最好是内嵌在网页中的</li>
<li>免费，毕竟需求量不是很大，偶尔才需要画图，没必要花钱</li>
<li>支持常见的图形和图表，如流程图，结构图，架构图和UML图</li>
<li>使用方式当然越简单越好</li>
</ol>


<p>可行的的方案：</p>

<ul>
<li><a href="https://modeling-languages.com/javascript-drawing-libraries-diagrams/">20+ JavaScript libraries to draw your own diagrams</a></li>
<li><a href="https://www.chartjs.org/">Chart.js</a> 这个是图表，也就是统计数据的图表（柱图饼图散列图等）。</li>
<li><a href="https://hackernoon.com/my-top-13-javascript-diagram-libraries-g2a53z6u">My Top 13 JavaScript Diagram Libraries</a></li>
<li><a href="https://ourcodeworld.com/articles/read/159/top-5-best-free-diagrams-javascript-libraries">Top 5 : Best free diagrams javascript libraries</a></li>
</ul>


<p>目前来看<a href="http://mermaid-js.github.io/mermaid/#/">mermaid</a>和<a href="http://flowchart.js.org/">FlowChart.js</a>比较符合需求，它们都可以内嵌到网页里面，且功能较强大。而mermaid的语法更简洁一些，我们可以先从mermaid开始尝试。目前最重要的事情是，如何把图形内嵌到博客中，把链路先跑通。</p>

<h3><a href="https://mermaid-js.github.io/mermaid/#/">mermaid</a></h3>

<p>语法简单，与Markdown类似，同时库比较简单，方便集成。比较符合我们的需求。就先从它开始。</p>

<p>集成方法，非常简单，先引入库，然后定义一个class=&ldquo;mermaid&#8221;的<div> tag即可。因为Markdown是支持内嵌HTML tag的，所以可以直接在Markdown中写。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script&gt;</span><span class="nx">mermaid</span><span class="p">.</span><span class="nx">initialize</span><span class="p">({</span><span class="nx">startOnLoad</span><span class="o">:</span><span class="kc">true</span><span class="p">});</span><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;mermaid&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>graph TD;
</span><span class='line'>    A--&gt;B;
</span><span class='line'>    A--&gt;C;
</span><span class='line'>    B--&gt;D;
</span><span class='line'>    C--&gt;D;
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>效果就是这样：</p>

<script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"></script>


<script>mermaid.initialize({startOnLoad:true});</script>




<div class="mermaid">
graph TD;    A&#45;&#45;>B;    A&#45;&#45;>C;    B&#45;&#45;>D;    C&#45;&#45;>D;
</div>


<p><br/></p>

<h3>用entity解决转义问题</h3>

<p>因为Markdown以及一些静态博客框架如Jekyll或者Octopress会对一些字符进行转义，因此有些时候会造成最终结果是mermaid运行出错：Syntax error in graph</p>

<p>原因就在于一些字符被Mardown以及博客框架用作特殊用途了。因此需要转义，在mardown源码中用HTML Entity来代替被转换的字符即可。因为mermaid是JavaScript库，它是在DOM都渲染好了之后才对div tag进行处理，而HTML enity能保证在DOM中是正确的字符，又恰是在mermaid处理之前，因此可以得到符合预期的结果，而且是用Markdown编辑器预览，以及最终博客里面都能得到符合预期的结果。</p>

<p>常见的需要做转义的字符：</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> &nbsp;&nbsp;&nbsp;&nbsp;预期字符&nbsp;&nbsp;&nbsp;&nbsp; </th>
<th style="text-align:center;"> &nbsp;&nbsp;&nbsp;&nbsp;HTML Entity&nbsp;&nbsp;&nbsp;&nbsp; </th>
<th> &nbsp;&nbsp;&nbsp;&nbsp;说明&nbsp;&nbsp;&nbsp;&nbsp; </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> &#45; </td>
<td style="text-align:center;"> &amp;#45; </td>
<td> 单个&#45;不需要，当其与&gt;组合时需要  </td>
</tr>
<tr>
<td style="text-align:center;"> &lt;&lt; </td>
<td style="text-align:center;"> &amp;lt;&amp;lt; </td>
<td> 单个不需要，两个在一起就需要  </td>
</tr>
<tr>
<td style="text-align:center;"> &gt;&gt; </td>
<td style="text-align:center;"> &amp;gt;&amp;gt; </td>
<td> 单个不需要，两个在一起就需要 </td>
</tr>
</tbody>
</table>


<p><br/><br/>
这里是常见的HTML Entity参考：</p>

<ul>
<li><a href="https://www.w3schools.com/html/html_entities.asp">HTML entities</a></li>
<li><a href="https://dev.w3.org/html5/html-author/charref">HTML entities table</a></li>
<li><a href="https://www.freeformatter.com/html-entities.html">HTML Entity List</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LeetCode Hot 100 归档]]></title>
    <link href="http://toughcoder.net/blog/2022/03/17/leetcode-hot-100-archives/"/>
    <updated>2022-03-17T23:40:15+08:00</updated>
    <id>http://toughcoder.net/blog/2022/03/17/leetcode-hot-100-archives</id>
    <content type="html"><![CDATA[<p><a href="https://leetcode-cn.com/problem-list/2cktkvj/">LeetCode热门100</a> 刷题归档.</p>

<p><a href="http://toughcoder.net/blog/2022/03/17/leetcode-hot-100-archives/"><img src="https://img.tukuppt.com/png_preview/00/03/28/I7XmLxWIHx.jpg!/fw/780" title="auto auto" ></a></p>

<!-- more -->


<table>
<thead>
<tr>
<th> Problems </th>
<th style="text-align:center;">  &nbsp;&nbsp;&nbsp;&nbsp;Solutions&nbsp;&nbsp;&nbsp;&nbsp;  </th>
<th style="text-align:center;">  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Code Archives&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  </th>
<th style="text-align:center;"> 主要算法 </th>
</tr>
</thead>
<tbody>
<tr>
<td> <a href="https://leetcode.cn/problems/two-sum/">1. 两数之和</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/two-sum/solution/liang-shu-zhi-he-by-alexhilton-y3eb/">题解</a> </td>
<td style="text-align:center;"> <a href="https://github.com/alexhilton/EffectiveAlgorithm/blob/main/leetcode/src/main/java/hot100/P001TwoSum.java">代码归档</a> </td>
<td style="text-align:center;"> 双指针，对撞指针，哈希 </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/add-two-numbers/">2. 两数相加</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/add-two-numbers/solution/add-two-by-alexhilton-vaw0/">题解</a> </td>
<td style="text-align:center;"><a href="https://github.com/alexhilton/EffectiveAlgorithm/blob/main/leetcode/src/main/java/hot100/P002AddTwoNumbers.java">代码归档</a> </td>
<td></td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/">3. 无重复字符的最长子串</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/solution/wu-zhong-fu-by-alexhilton-ecxc/">题解</a> </td>
<td style="text-align:center;"> <a href="https://github.com/alexhilton/EffectiveAlgorithm/blob/main/leetcode/src/main/java/hot100/P003LongestSubstring.java">代码归档</a> </td>
<td style="text-align:center;"> 同向双指针，哈希 </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/median-of-two-sorted-arrays/">4. 寻找两个正序数组的中位数</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/median-of-two-sorted-arrays/solution/4-by-alexhilton-xnk5/">题解</a> </td>
<td style="text-align:center;"> <a href="https://github.com/alexhilton/EffectiveAlgorithm/blob/main/leetcode/src/main/java/hot100/P004FindMedian.java">代码归档</a> </td>
<td></td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/longest-palindromic-substring/">5. 最长回文子串</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/longest-palindromic-substring/solution/5-zui-chang-hui-wen-zi-chuan-by-alexhilt-6kvt/">题解</a> </td>
<td style="text-align:center;"> <a href="https://github.com/alexhilton/EffectiveAlgorithm/blob/main/leetcode/src/main/java/hot100/P005LongestPalindrome.java">代码归档</a> </td>
<td></td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/regular-expression-matching">10. 正则表达式匹配</a> </td>
<td style="text-align:center;"> 题解 </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/container-with-most-water">11. 盛最多水的容器</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/container-with-most-water/solution/by-alexhilton-1va8/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> 双指针 </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/3sum/">15. 三数之和</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/3sum/solution/15-san-shu-zhi-he-by-alexhilton-0ucz/">题解</a> </td>
<td style="text-align:center;"> <a href="https://github.com/alexhilton/EffectiveAlgorithm/blob/main/effectiveoffer/src/main/java/array/ArrayQuestions.java">代码归档</a> </td>
<td style="text-align:center;"> 排序，双指针 </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/letter-combinations-of-a-phone-number">17. 电话号码的字母组合</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/letter-combinations-of-a-phone-number/solution/by-alexhilton-7d4f/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> 回溯 </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">19. 删除链表的倒数第 N 个结点</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/solution/19-shan-chu-lian-biao-de-dao-shu-di-n-ge-xa3i/">题解</a> </td>
<td style="text-align:center;"> <a href="https://github.com/alexhilton/EffectiveAlgorithm/blob/main/effectiveoffer/src/main/java/linkedlist/DoublePointers.java">代码归档</a> </td>
<td></td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/valid-parentheses/">20. 有效的括号</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/valid-parentheses/solution/by-alexhilton-8tcu/">题解</a> </td>
<td style="text-align:center;"> <a href="">代码归档</a> </td>
<td></td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/merge-two-sorted-lists/">21. 合并两个有序链表</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/merge-two-sorted-lists/solution/21-he-bing-liang-ge-you-xu-lian-biao-by-2pafg/">题解</a> </td>
<td style="text-align:center;"> <a href="https://github.com/alexhilton/EffectiveAlgorithm/blob/main/leetcode/src/main/java/hot100/P021MergeList.java">代码归档</a> </td>
<td style="text-align:center;"> 归并排序思想 </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/generate-parentheses">22. 括号生成</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/generate-parentheses/solution/by-alexhilton-9yxt/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> 回溯 </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/merge-k-sorted-lists">23. 合并K个升序链表</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/top-k-frequent-elements/solution/by-alexhilton-xhxc/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> 归并，分治，最小堆 </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/next-permutation">31. 下一个排列</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/next-permutation/solution/by-alexhilton-7qwt/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/longest-valid-parentheses">32. 最长有效括号</a> </td>
<td style="text-align:center;"> 题解 </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/search-in-rotated-sorted-array">33. 搜索旋转排序数组</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/search-in-rotated-sorted-array/solution/by-alexhilton-eulp/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> 二分查找 </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array">34. 在排序数组中查找元素的第一个和最后一个位置</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/solution/by-alexhilton-vgm8/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> 二分查找 </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/combination-sum">39. 组合总和</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/combination-sum/solution/by-alexhilton-1dzy/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> 回溯 </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/trapping-rain-water">42. 接雨水</a> </td>
<td style="text-align:center;"> 题解 </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/permutations">46. 全排列</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/permutations-ii/solution/by-alexhilton-m337/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/rotate-image">48. 旋转图像</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/rotate-image/solution/by-alexhilton-5das/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> 模拟 </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/group-anagrams/">49. 字母异位词分组</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/group-anagrams/solution/49-zi-mu-yi-wei-ci-fen-zu-by-alexhilton-ni22/">题解</a> </td>
<td style="text-align:center;"> <a href="https://github.com/alexhilton/EffectiveAlgorithm/blob/main/leetcode/src/main/java/hot100/P049GroupAnagrams.java">代码归档</a> </td>
<td></td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/maximum-subarray">53. 最大子数组和</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/maximum-subarray/solution/by-alexhilton-21zr/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> DP </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/jump-game">55. 跳跃游戏</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/jump-game/solution/by-alexhilton-wjej/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> DP </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/merge-intervals">56. 合并区间</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/merge-intervals/solution/by-alexhilton-a3ie/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> BST </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/unique-paths">62. 不同路径</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/unique-paths/solution/by-alexhilton-zdrr/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> 动态规划 </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/minimum-path-sum">64. 最小路径和</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/minimum-path-sum/solution/by-alexhilton-40r3/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> 动态规划 </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/climbing-stairs/">70. 爬楼梯</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/climbing-stairs/solution/by-alexhilton-7zms/">题解</a> </td>
<td style="text-align:center;"> <a href="https://github.com/alexhilton/EffectiveAlgorithm/blob/main/leetcode/src/main/java/hot100/P070ClimbStairs.java">代码归档</a> </td>
<td style="text-align:center;"> DP </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/edit-distance">72. 编辑距离</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/edit-distance/solution/by-alexhilton-cjmy/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> DP </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/sort-colors">75. 颜色分类</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/sort-colors/solution/by-alexhilton-lx1m/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> 计数排序 </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/minimum-window-substring">76. 最小覆盖子串</a> </td>
<td style="text-align:center;"> 题解 </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/subsets">78. 子集</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/subsets/solution/by-alexhilton-1ego/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> 回溯 </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/word-search">79. 单词搜索</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/word-search/solution/79-dan-ci-sou-suo-by-alexhilton-2luf/">题解</a> </td>
<td style="text-align:center;"> <a href="https://github.com/alexhilton/EffectiveAlgorithm/blob/main/leetcode/src/main/java/hot100/P079WordSearch.java">代码归档</a> </td>
<td style="text-align:center;"> 回溯 </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/largest-rectangle-in-histogram">84. 柱状图中最大的矩形</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/largest-rectangle-in-histogram/solution/84-zhu-zhuang-tu-zhong-zui-da-de-ju-xing-nk72/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> 单调栈 </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/maximal-rectangle">85. 最大矩形</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/maximal-rectangle/solution/by-alexhilton-zwd6/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> 单调栈 </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/binary-tree-inorder-traversal">94. 二叉树的中序遍历</a> </td>
<td style="text-align:center;"> 题解 </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/unique-binary-search-trees">96. 不同的二叉搜索树</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/unique-binary-search-trees/solution/by-alexhilton-y089/">题解</a> </td>
<td style="text-align:center;"> <a href="https://github.com/alexhilton/EffectiveAlgorithm/blob/main/leetcode/src/main/java/hot100/P096BSTKinds.java">代码归档</a> </td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/validate-binary-search-tree">98. 验证二叉搜索树</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/validate-binary-search-tree/solution/by-alexhilton-eqbp/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/symmetric-tree">101. 对称二叉树</a> </td>
<td style="text-align:center;"> 题解 </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/binary-tree-level-order-traversal">102. 二叉树的层序遍历</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/solution/by-alexhilton-iv95/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree">104. 二叉树的最大深度</a> </td>
<td style="text-align:center;"> 题解 </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal">105. 从前序与中序遍历序列构造二叉树</a> </td>
<td style="text-align:center;"> 题解 </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/flatten-binary-tree-to-linked-list">114. 二叉树展开为链表</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/flatten-binary-tree-to-linked-list/solution/114-er-cha-shu-zhan-kai-wei-lian-biao-by-3mke/">题解</a> </td>
<td style="text-align:center;"> <a href="https://github.com/alexhilton/EffectiveAlgorithm/blob/main/leetcode/src/main/java/hot100/P114FlattenTree.java">代码归档</a> </td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock">121. 买卖股票的最佳时机</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/solution/by-alexhilton-pv84/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> 动态规划 </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/binary-tree-maximum-path-sum">124. 二叉树中的最大路径和</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/binary-tree-maximum-path-sum/solution/124-er-cha-shu-zhong-de-zui-da-lu-jing-h-deqd/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/longest-consecutive-sequence">128. 最长连续序列</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/longest-consecutive-sequence/solution/by-alexhilton-ip97/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/single-number/">136. 只出现一次的数字</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/single-number/solution/136-zhi-chu-xian-yi-ci-de-shu-zi-by-alex-1ta2/">题解</a> </td>
<td style="text-align:center;"> <a href="https://github.com/alexhilton/EffectiveAlgorithm/blob/main/effectiveoffer/src/main/java/numbers/Binaries.java">代码归档</a> </td>
<td></td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/word-break">139. 单词拆分</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/word-break/solution/by-alexhilton-qhsa/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/linked-list-cycle/">141. 环形链表</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/linked-list-cycle/solution/141-huan-xing-lian-biao-by-alexhilton-pzk1/">题解</a> </td>
<td style="text-align:center;"> <a href="https://github.com/alexhilton/EffectiveAlgorithm/blob/main/effectiveoffer/src/main/java/linkedlist/DoublePointers.java">代码归档</a> </td>
<td></td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/linked-list-cycle-ii/">142. 环形链表 II</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/linked-list-cycle-ii/solution/by-alexhilton-u2dm/">题解</a> </td>
<td style="text-align:center;"> <a href="https://github.com/alexhilton/EffectiveAlgorithm/blob/main/effectiveoffer/src/main/java/linkedlist/DoublePointers.java">代码归档</a> </td>
<td></td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/lru-cache">146. LRU 缓存</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/lru-cache/solution/by-alexhilton-xdf0/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/sort-list/">148. 排序链表</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/sort-list/solution/by-alexhilton-tqk5/">题解</a> </td>
<td style="text-align:center;"> <a href="">代码归档</a> </td>
<td style="text-align:center;"> 归并排序 </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/maximum-product-subarray">152. 乘积最大子数组</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/maximum-product-subarray/solution/by-alexhilton-mbgo/">题解</a> </td>
<td style="text-align:center;"> <a href="https://github.com/alexhilton/EffectiveAlgorithm/blob/main/leetcode/src/main/java/hot100/P152MaxProduct.java">代码归档</a> </td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/min-stack">155. 最小栈</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/insert-delete-getrandom-o1/solution/by-alexhilton-8cad/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> 栈 </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/intersection-of-two-linked-lists/">160. 相交链表</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/intersection-of-two-linked-lists/solution/by-alexhilton-jhos/">题解</a> </td>
<td style="text-align:center;"> <a href="https://github.com/alexhilton/EffectiveAlgorithm/blob/main/effectiveoffer/src/main/java/linkedlist/DoublePointers.java">代码归档</a> </td>
<td></td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/majority-element/">169. 多数元素</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/majority-element/solution/by-alexhilton-upn7/">题解</a> </td>
<td style="text-align:center;"> <a href="">代码归档</a> </td>
<td></td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/house-robber">198. 打家劫舍</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/house-robber/solution/by-alexhilton-kmj8/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/number-of-islands">200. 岛屿数量</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/number-of-islands/solution/200-dao-yu-shu-liang-by-alexhilton-cexx/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> BSF,DFS </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/reverse-linked-list/">206. 反转链表</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/reverse-linked-list/solution/206-fan-zhuan-lian-biao-by-alexhilton-6ttd/">题解</a> </td>
<td style="text-align:center;"> <a href="https://github.com/alexhilton/EffectiveAlgorithm/blob/main/leetcode/src/main/java/hot100/P206ReverseList.java">代码归档</a> </td>
<td></td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/course-schedule">207. 课程表</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/course-schedule/solution/by-alexhilton-r7hf/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/implement-trie-prefix-tree">208. 实现 Trie (前缀树)</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/implement-trie-prefix-tree/solution/by-alexhilton-8p2z/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/kth-largest-element-in-an-array">215. 数组中的第K个最大元素</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/kth-largest-element-in-an-array/solution/215-shu-zu-zhong-de-di-kge-zui-da-yuan-s-0lm6/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/maximal-square">221. 最大正方形</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/maximal-square/solution/by-alexhilton-s7fg/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/invert-binary-tree">226. 翻转二叉树</a> </td>
<td style="text-align:center;"> 题解 </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/palindrome-linked-list/">234. 回文链表</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/palindrome-linked-list/solution/by-alexhilton-pcab/">题解</a> </td>
<td style="text-align:center;"> <a href="https://github.com/alexhilton/EffectiveAlgorithm/blob/main/effectiveoffer/src/main/java/linkedlist/ReverseList.java">代码归档</a> </td>
<td></td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree">236. 二叉树的最近公共祖先</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/solution/by-alexhilton-l5q4/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> 前序遍历 </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/product-of-array-except-self">238. 除自身以外数组的乘积</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/product-of-array-except-self/solution/by-alexhilton-42tu/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/sliding-window-maximum">239. 滑动窗口最大值</a> </td>
<td style="text-align:center;"> 题解 </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/search-a-2d-matrix-ii">240. 搜索二维矩阵 II</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/search-a-2d-matrix-ii/solution/by-alexhilton-3uh0/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/meeting-rooms-ii">253. 会议室 II</a> </td>
<td style="text-align:center;"> 题解 </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/perfect-squares">279. 完全平方数</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/perfect-squares/solution/by-alexhilton-rkb7/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> 动态规划，完全背包 </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/move-zeroes/">283. 移动零</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/move-zeroes/solution/by-alexhilton-y9fs/">题解</a> </td>
<td style="text-align:center;"> <a href="">代码归档</a> </td>
<td></td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/find-the-duplicate-number">287. 寻找重复数</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/find-the-duplicate-number/solution/by-alexhilton-qk6u/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> 二分查找 </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/serialize-and-deserialize-binary-tree">297. 二叉树的序列化与反序列化</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/serialize-and-deserialize-binary-tree/solution/by-alexhilton-806a/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/longest-increasing-subsequence">300. 最长递增子序列</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/longest-increasing-subsequence/solution/by-alexhilton-8ynf/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/remove-invalid-parentheses">301. 删除无效的括号</a> </td>
<td style="text-align:center;"> 题解 </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-cooldown">309. 最佳买卖股票时机含冷冻期</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-cooldown/solution/by-alexhilton-3btu/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> DP </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/burst-balloons">312. 戳气球</a> </td>
<td style="text-align:center;"> 题解 </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/coin-change">322. 零钱兑换</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/coin-change/solution/322-ling-qian-dui-huan-by-alexhilton-pqum/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> 动态规划，背包问题 </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/house-robber-iii">337. 打家劫舍 III</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/house-robber-iii/solution/by-alexhilton-wpnk/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/counting-bits/">338. 比特位计数</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/counting-bits/solution/338-bi-te-wei-ji-shu-by-alexhilton-ft3h/">题解</a> </td>
<td style="text-align:center;"> <a href="https://github.com/alexhilton/EffectiveAlgorithm/blob/main/effectiveoffer/src/main/java/numbers/Binaries.java">代码归档</a> </td>
<td></td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/top-k-frequent-elements">347. 前 K 个高频元素</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/top-k-frequent-elements/solution/by-alexhilton-xhxc/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> 最小堆 </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/decode-string">394. 字符串解码</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/decode-string/solution/by-alexhilton-dihu/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> 栈，模拟 </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/evaluate-division/">399. 除法求值</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/evaluate-division/solution/399-chu-fa-qiu-zhi-by-alexhilton-euqp/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> 图搜索 </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/queue-reconstruction-by-height">406. 根据身高重建队列</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/queue-reconstruction-by-height/solution/by-alexhilton-g9k3/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/partition-equal-subset-sum">416. 分割等和子集</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/partition-equal-subset-sum/solution/by-alexhilton-xxp8/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> 动态规划 </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/path-sum-iii">437. 路径总和 III</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/path-sum-iii/solution/by-alexhilton-5ayx/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/find-all-anagrams-in-a-string/">438. 找到字符串中所有字母异位词</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/find-all-anagrams-in-a-string/solution/438-zhao-dao-zi-fu-chuan-zhong-suo-you-z-e1jq/">题解</a> </td>
<td style="text-align:center;"> <a href="https://github.com/alexhilton/EffectiveAlgorithm/blob/main/leetcode/src/main/java/hot100/P438FindAnagrams.java">代码归档</a> </td>
<td></td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/find-all-numbers-disappeared-in-an-array">448. 找到所有数组中消失的数字</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/find-all-numbers-disappeared-in-an-array/solution/448-zhao-dao-suo-you-shu-zu-zhong-xiao-s-4uv6/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/hamming-distance/">461. 汉明距离</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/hamming-distance/solution/by-alexhilton-0opr/">题解</a> </td>
<td style="text-align:center;"> <a href="https://github.com/alexhilton/EffectiveAlgorithm/blob/main/effectiveoffer/src/main/java/numbers/Binaries.java">代码归档</a> </td>
<td></td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/target-sum">494. 目标和</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/target-sum/solution/by-alexhilton-7pnd/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> 动态规划，背包问题 </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/convert-bst-to-greater-tree">538. 把二叉搜索树转换为累加树</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/convert-bst-to-greater-tree/solution/by-alexhilton-c8a0/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> 中序遍历 </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/diameter-of-binary-tree">543. 二叉树的直径</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/diameter-of-binary-tree/solution/by-alexhilton-0ncn/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/subarray-sum-equals-k/">560. 和为 K 的子数组</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/subarray-sum-equals-k/solution/by-alexhilton-eh11/">题解</a> </td>
<td style="text-align:center;"> <a href="https://github.com/alexhilton/EffectiveAlgorithm/blob/main/effectiveoffer/src/main/java/array/ArrayQuestions.java">代码归档</a> </td>
<td style="text-align:center;"> 数组，前缀和，哈希 </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/shortest-unsorted-continuous-subarray">581. 最短无序连续子数组</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/shortest-unsorted-continuous-subarray/solution/by-alexhilton-xdl5/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/merge-two-binary-trees">617. 合并二叉树</a> </td>
<td style="text-align:center;"> 题解 </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/task-scheduler">621. 任务调度器</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/task-scheduler/solution/by-alexhilton-aaof/">题解</a> </td>
<td style="text-align:center;"> <a href="https://github.com/alexhilton/EffectiveAlgorithm/blob/main/leetcode/src/main/java/hot100/P621TaskScheduler.java">代码归档</a> </td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/palindromic-substrings/">647. 回文子串</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/palindromic-substrings/solution/647-hui-wen-zi-chuan-by-alexhilton-t79d/">题解</a> </td>
<td style="text-align:center;"> <a href="https://github.com/alexhilton/EffectiveAlgorithm/blob/main/effectiveoffer/src/main/java/strings/Palindrome.java">代码归档</a> </td>
<td></td>
</tr>
<tr>
<td> <a href="https://leetcode.cn/problems/daily-temperatures">739. 每日温度</a> </td>
<td style="text-align:center;"> <a href="https://leetcode.cn/problems/daily-temperatures/solution/by-alexhilton-vy0r/">题解</a> </td>
<td style="text-align:center;"> 代码归档 </td>
<td style="text-align:center;"> 单调栈 </td>
</tr>
</tbody>
</table>


<!--
| []() | [题解]() | [代码归档]() |
-->


<p><br />
<br />
<br />
<strong>注意</strong>：题目版权归 <a href="https://leetcode-cn.com/">LeetCode</a> 所有。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LeetCode刷题计划]]></title>
    <link href="http://toughcoder.net/blog/2022/03/17/leetcode-learning-plans/"/>
    <updated>2022-03-17T23:33:39+08:00</updated>
    <id>http://toughcoder.net/blog/2022/03/17/leetcode-learning-plans</id>
    <content type="html"><![CDATA[<p>多说无益，还是要撸。从<a href="https://leetcode-cn.com/problem-list/2cktkvj/">Hot100</a>开始，这是比较基础的一套题目，非常适合入手。</p>

<p><a href="http://toughcoder.net/blog/2022/03/17/leetcode-learning-plans/"><img src="https://pic1.zhimg.com/v2-5efc27df05c686f2496e631f3cd44958_r.jpg" title="auto auto" ></a></p>

<!-- more -->


<h2>在本地编码</h2>

<p>浏览器编辑和调试代码毕竟还是不太方便，所以还需要在本地调试和编码，然后再到网站上面去提交。</p>

<p>创建一个新的module，为leetcode，然后同时创建测试代码。<a href="https://github.com/alexhilton/EffectiveAlgorithm/tree/main/leetcode">完整代码在这里</a>。</p>

<h2>要先学习，再去解题</h2>

<p>刷题是在练习，如果一道题，有思路，或者已经知道如何解决，那么可以去解题，力争一遍AC，并要优化代码细节。</p>

<p>但如果完全没有思路，或者除了蛮力法和常规方法外，想不到更好的方案，但其实有更好的方法，那这题做起来其实就没有多大意思了，因为在不借外力的情况下，想不出更好的方案。</p>

<p>所以，还是需要先去学习相关的知识，然后再去练习。比如先去看书，或者看LeetBook，学习到相关的知识以后，再去找类似的题目去解题。</p>

<p>对于书中（常规书籍或者LeetBook）的示例，重点是要看懂和理解，当然也要敲一遍运行一下，以完全理解思路和编码细节。但不应该花过多的时间，比如寻找更多解法等，这是没有必要的。因为一定可以找到与书中一样的题，或者至少有类似的题，解题时可以尝试不同的解法，比如蛮力法，改良法和书中建议的方法。这样效率更高，因为题中有更全的测试用例，也能更好的比较运行结果。最后 写题解进行总结。</p>

<p>但一定一定不能为了刷而刷，比如不经思考直接去看评论或者题解，这样是没有意义的。</p>

<h2>每一道题要尝试多种解法</h2>

<p>一定要自己思考，并尝试多种解法。从直观蛮力法开始，做好效率分析，争取每次提交都有提升。</p>

<p>实在没思路时，先看题目本身的提示，再看题解或者网上其他人的解法。然后写自己的解法，不要照抄。</p>

<p>发散思维是相当重要的，这无论是在面试中还是在实际工作中都是极其重要的，因为任何问题都不止一个解法。面试时更喜欢问，有没有其他解法，有没有更好的解法，所以尝试多种解法是相当有益的。</p>

<h2>力争做到Beat 100%</h2>

<p>重点是时间上，要力争做到beat 100%，至少要beat 90%。</p>

<p>空间不做特别要求，尽量不用额外空间，做到至少beat 50%吧。当然也没有必要为了优化而优化，比如针对LeetCode的测试特点进行优化，这是没有必要的。</p>

<h2>做完后要写题解</h2>

<p>把题目的分析，和各种解法写一写。</p>

<h2>引申知识点的学习总结成文</h2>

<p>对于题目中引申出来的知识点要进行学习并另外总结成文，放在博客之中。</p>

<h2>博客之中归档</h2>

<p>博客之中用一篇文章来记录所做的题目，对应的题解和完整代码。</p>

<ul>
<li><a href="http://toughcoder.net/blog/2022/03/17/leetcode-hot-100-archives/">LeetCode Hot 100 归档</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interview Algorithm and LeetCode]]></title>
    <link href="http://toughcoder.net/blog/2022/03/16/algorithms-made-easy/"/>
    <updated>2022-03-16T21:44:25+08:00</updated>
    <id>http://toughcoder.net/blog/2022/03/16/algorithms-made-easy</id>
    <content type="html"><![CDATA[<p>这个是面试的必备技能，而且特别是外企和一线大厂都很喜欢问算法题目，所以这也是一个必须跨跃的门槛。</p>

<p>这东西与当年ACM/ICPC以及中学的信息技术竞赛是同一套东西，核心就是算法和数据结构，目的就是训练逻辑思维能力，建模的能力和问题分析与解决的能力，当然 对于提升解决问题的能力还是很有帮助的。</p>

<p>很惭愧，当年没有学好（ACM/ICPC 2008年亚洲区域赛合肥赛区只拿到优胜奖 Honorable Mention），现在是时候好好补习一下了。</p>

<p><a href="http://toughcoder.net/blog/2022/03/16/algorithms-made-easy/"><img src="https://tse3-mm.cn.bing.net/th/id/OIP-C.57PbuYOIlWq6wvAuK8tp9gHaEK?pid=ImgDet&rs=1" title="auto auto" ></a></p>

<!-- more -->


<h2>优质书籍</h2>

<p>核心的书籍就是算法和数据结构，市面上书籍甚多，比较优质的有如下</p>

<h3>基石</h3>

<p>数据结构与算法是基础中的基础。</p>

<ul>
<li><a href="">数据结构与算法图解</a></li>
<li><a href="">算法图解</a></li>
<li><a href="">编程的修炼</a></li>
<li><a href="">编程玑珠</a></li>
<li><a href="">数学之美</a> 这个更偏数学一些，不过数学更是基石中的基石</li>
</ul>


<h3>以面试题为主线的书</h3>

<p>另外，还有一套书是以面试题为主线，辅助以介绍基础知识的书，非常之实用。</p>

<ul>
<li><a href="">剑指Offer 2 专项突破版</a></li>
<li><a href="">剑指Offer 1</a></li>
<li><a href="">程序员面试金典 第6版</a></li>
<li><a href="">编程之美：微软技术面试心得</a></li>
</ul>


<h2>数据结构和算法可视化</h2>

<p>这本身就是一个研究领域。但对于理解各种算法是非常有帮助的。</p>

<ul>
<li><a href="https://visualgo.net/en">VisuAlgo</a></li>
<li><a href="https://algorithm-visualizer.org/">Algorithm Visualizer</a></li>
<li><a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html">Data Structure Visualizations</a></li>
<li><a href="https://bost.ocks.org/mike/algorithms/">Visualizing Algorithms</a></li>
<li><a href="https://github.com/topics/algorithm-visualization">GitHub topic #algorithm-visualization</a></li>
<li><a href="https://github.com/algorithm-visualizer/algorithm-visualizer">Interactive Online Platform that Visualizes Algorithms from Code</a></li>
</ul>


<h2>LeetCode</h2>

<p>现在最火的就是刷题，就是在LeetCode（力扣）上面刷题，网上各种攻略以及题解都非常之多。</p>

<ul>
<li><a href="https://books.halfrost.com/leetcode/">LeetCode Cookbook</a></li>
<li><a href="https://www.zhihu.com/question/280279208">大家都是如何刷 LeetCode 的？</a></li>
<li><a href="https://blog.csdn.net/fuxuemingzhu/article/details/105183554">刷完 900 多道算法题的首次总结：LeetCode 应该怎么刷？</a></li>
<li><a href="https://www.zhihu.com/question/36738189">LeetCode按照怎样的顺序来刷题比较好？</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/349940945">Leetcode面试高频题分类刷题总结</a></li>
<li><a href="https://www.cnblogs.com/grandyang/p/4606334.html">LeetCode All in One 题目讲解汇总</a></li>
<li><a href="https://www.programmercarl.com/">代码随想录</a></li>
<li><a href="https://liuzhenglaichn.gitbook.io/algorithm/">Algorithm</a></li>
<li><a href="https://sharingsource.github.io/">宫水三叶の刷题日记</a></li>
<li><a href="https://oi-wiki.org/">OI wiki</a></li>
</ul>


<p>另外，在<a href="https://github.com">GitHub</a>上面，也有大量的优质的LeetCode资源：</p>

<ul>
<li><a href="https://github.com/azl397985856/leetcode">LeetCode Solutions: A Record of My Problem Solving Journey</a></li>
<li><a href="https://github.com/haoel/leetcode">LeetCode Problems&#8217; Solutions</a>.   耗子叔出品的</li>
<li><a href="https://github.com/soulmachine/leetcode">LeetCode题解，151道题完整版</a></li>
<li><a href="https://github.com/doocs/leetcode">LeetCode solutions in any programming language</a></li>
<li><a href="https://github.com/MisterBooo/LeetCodeAnimation">Demonstrate all the questions on LeetCode in the form of animation</a>.  以动画的形式帮助你理解题解，非常棒的项目</li>
<li><a href="https://github.com/youngyangyang04/leetcode-master">《代码随想录》LeetCode 刷题攻略：200道经典题目刷题顺序，共60w字的详细图解，视频难点剖析，50余张思维导图，支持C++，Java，Python，Go，JavaScript等多语言版本，从此算法学习不再迷茫</a></li>
<li><a href="https://github.com/yuanguangxin/LeetCode">LeetCode刷题记录与面试整理</a></li>
<li><a href="https://github.com/qiyuangong/leetcode">Python &amp; JAVA Solutions for Leetcode</a></li>
<li><a href="https://github.com/fishercoder1534/Leetcode">Solutions to LeetCode problems; updated daily. Subscribe to my YouTube channel for more.</a></li>
<li><a href="https://github.com/SharingSource/LogicStack-LeetCode">公众号「宫水三叶的刷题日记」刷穿 LeetCode 系列文章源码</a></li>
<li><a href="https://github.com/labuladong/fucking-algorithm">刷算法全靠套路，认准 labuladong 就够了</a></li>
</ul>


<p>力扣与ACM OJ最大的区别就是在于它对编程语言支持丰富，并且并不限制你使用标准库，比如C++可以用STL，比如Java可以用Collections，除非题目中有特别的限制，这个需要注意，就是在解题的时候思维不能受到局限，比如查询相关的题目，首先能想到的就是Map，但一般在ACM OJ时，通常不会往Map上想，因为是不允许使用现成的库的（起码当年我训练的时候是这样的），但LeetCode上面并没有这样的限制（其实这很符合实际项目），所以思维要打开，另外就是可以多多尝试，有没有限制试过后就知道了。</p>

<h2>更多的练习题</h2>

<p>力扣是以面试为核心，它上面的题集都集中在面试，特别是大厂和外企的常见面试题目。</p>

<p>之外，就是各种OJ了，这是各种信息竞赛算法竞赛和ACM的训练基地，题目也更广泛，难度也相当的高。</p>

<ul>
<li><a href="https://tco21.topcoder.com/">TopCoder</a></li>
<li><a href="https://codeforces.com/">CodeForces</a></li>
<li><a href="https://atcoder.jp/">AtCoder</a></li>
<li><a href="http://poj.org/">北大ACM OJ</a></li>
<li><a href="https://acm.hdu.edu.cn/">杭电ACM OJ</a></li>
<li><a href="https://hr.nowcoder.com/">牛客</a></li>
<li><a href="https://zoj.pintia.cn/home/news">渐大ZOJ</a></li>
</ul>


<h2>参考资料</h2>

<ul>
<li><a href="https://www.cnblogs.com/gzshan/p/10910831.html">【剑指Offer】剑指offer题目汇总 </a></li>
<li><a href="https://zhuanlan.zhihu.com/p/56200260">面试必刷-《剑指offer》刷题小结</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java中整数基础知识]]></title>
    <link href="http://toughcoder.net/blog/2022/03/08/java-integer-basics/"/>
    <updated>2022-03-08T20:32:18+08:00</updated>
    <id>http://toughcoder.net/blog/2022/03/08/java-integer-basics</id>
    <content type="html"><![CDATA[<p>最近做了一道题，非常有意思，题本身很简单，但涉及到整数的最大值以及最小值，当写测试用例的时候，却犯了一个错误，发现最小整数并不是0xFFFFFFFF，我们来仔细看一下。</p>

<p><a href="http://toughcoder.net/blog/2022/03/08/java-integer-basics/"><img src="https://cdn.softwaretestinghelp.com/wp-content/qa/uploads/2020/06/Java-integer.png" title="auto auto" ></a></p>

<!-- more -->


<h2>整数基础</h2>

<p>Java中，整数都是有符号的，最高位是符号位，0表示正数，1表示负数。有四种，byte，short，int和long。</p>

<ul>
<li>byte 8位，-2<sup>7</sup> ~ 2<sup>7</sup> - 1，-128 ~ 127, 0x80 ~ 0x7F</li>
<li>short 16位，-2<sup>15</sup> ~ 2<sup>15</sup> - 1，-32768 ~ 32767, 0x8000 ~ 0x7FFF</li>
<li>int 32位，-2<sup>31</sup> ~ 2<sup>31</sup> -1，-2147483648 ~ 2147483647, 0x8000000 ~ 0x7FFFFFFF</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;Max byte %d, 0x%X, half 0x%X&quot;</span><span class="o">,</span> <span class="n">Byte</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">,</span> <span class="n">Byte</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">,</span> <span class="n">Byte</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">/</span><span class="mi">2</span><span class="o">));</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;Min byte %d, 0x%X, half 0x%X&quot;</span><span class="o">,</span> <span class="n">Byte</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">,</span> <span class="n">Byte</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">,</span> <span class="o">(</span><span class="kt">byte</span><span class="o">)(</span><span class="n">Byte</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">/</span><span class="mi">2</span><span class="o">)));</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;Max short %d, 0x%X, half 0x%X&quot;</span><span class="o">,</span> <span class="n">Short</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">,</span> <span class="n">Short</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">,</span> <span class="n">Short</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">/</span><span class="mi">2</span><span class="o">));</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;Min short %d, 0x%X, half 0x%X&quot;</span><span class="o">,</span> <span class="n">Short</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">,</span> <span class="n">Short</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">,</span> <span class="o">(</span><span class="kt">short</span><span class="o">)</span> <span class="o">(</span><span class="n">Short</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">/</span><span class="mi">2</span><span class="o">)));</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;Max Int %d, 0x%X, half 0x%X&quot;</span><span class="o">,</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">,</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">,</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">/</span><span class="mi">2</span><span class="o">));</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;Min Int %d, 0x%X, half 0x%X&quot;</span><span class="o">,</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">,</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">,</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">/</span><span class="mi">2</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Outputs</span>
</span><span class='line'><span class="c1">//Max byte 127, 0x7F, half 0x3F</span>
</span><span class='line'><span class="c1">//Min byte -128, 0x80, half 0xC0</span>
</span><span class='line'><span class="c1">//Max short 32767, 0x7FFF, half 0x3FFF</span>
</span><span class='line'><span class="c1">//Min short -32768, 0x8000, half 0xC000</span>
</span><span class='line'><span class="c1">//Max Int 2147483647, 0x7FFFFFFF, half 0x3FFFFFFF</span>
</span><span class='line'><span class="c1">//Min Int -2147483648, 0x80000000, half 0xC0000000</span>
</span></code></pre></td></tr></table></div></figure>


<h3>细节和原理</h3>

<p>值得注意的是，16进制的数值与直觉预期并不一样，特别是负数。正数是一致的，比如int，一共是32位，最高位是符号，所以真正数值部分是31位，那么最大的int就是0x7FFFFFF。</p>

<p>但负数，也即是最小的int，却与直觉完全不一样。按照直觉，负数最高位是1，那最小的int应该是0xFFFFFFFF啊，为何确是0x80000000呢？原因就是整数的编码方式并不是直接的二进制形式的，是以<a href="https://baike.baidu.com/item/%E8%A1%A5%E7%A0%81/6854613">补码的形式</a>，也就是说在内部实现中，用二进制表示一个整数的时候，是以二进制补码形式（转成二进制后还要求其补码，才是真实的二进制和16进制形式）。</p>

<p>简单来说，补码是一种二进制编码形式，正数的补码就是它的本身，而负数的补码是其取反后加1，可以<a href="https://en.wikipedia.org/wiki/Two%27s_complement">参考百科上的定义</a>。</p>

<p>负数的转换：原码取反加1，即是补码，补码再转补码即得到原码（也可以补码减1再取反即是原码），符号位在转换过程中一直不变。</p>

<p><strong>注意：</strong>补码的严谨说法是2的补码（Twi&rsquo;s Complement），并不称作二进制补码。补码是为了能用加法的方式来计算减法。因此原码转补码时，取反加1，补码求原码时再求补码，避免用减法（虽然减1后再取反也能求得原码，但需要用到减法）。</p>

<h3>非10进制字面常量是补码形式</h3>

<p>在日常代码中，为了方便，通常都用16进制来写一些整数常量，这里就特别要注意了。16进制的字面常量，不会再进行补码转换，会当成补码直接使用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;Literal %d, 0x%X&quot;</span><span class="o">,</span> <span class="mh">0xffffffff</span><span class="o">,</span> <span class="mh">0xffffffff</span><span class="o">));</span>
</span><span class='line'><span class="c1">//Literal -1, 0xFFFFFFFF</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以，你写的0xFFFFFFFF是补码形式，它的原码是减1再取反，（32个1）减1，最低位变成0，前面31个1，再取反，就只剩下最后一位是1和最高位的符号位，因此是-1，注意符号位是不变的，在转换过程中。</p>

<p>而最小的整数是-2<sup>31</sup>，原码 形式应该是0x80000000，先取反变成了0xFFFFFFFF，再加1，符号位最高位不变的情况下，其余全变成了0，所以是0x80000000。</p>

<h2>最小整数</h2>

<p>开篇时说了，当时错误的认为0xFFFFFFFF是最小的整数，这里犯的第一个严重错误是，误把二进制的补码当成了原码，代码中的16进制（二进制）都是补码形式的，它的原码是0x80000001即-1。这个错误是比较明显的。</p>

<p>但另外的问题就是，假如都是二进制原码的情况下，为啥最小的整数是0x80000000而不是0xFFFFFFFFF。这是理解上的误区，整数的定义是，最高位是符号位，所以常规认知是全是1的情况是最大的数，加上符号不就变成最小的了么？这是以10进制思维，也就是二进制转换成为10进制后的想法。计算机只认识二进制，在最高位是1（负数）的情况下，哪个数最小？当然0x80000000最小啊，它除了符号位全是0，肯定 小于0xFFFFFFFF，因此从二进制的角度来理解，0x80000000是最小的整数。</p>

<p>而0xFFFFFFFF（原码）则是第2小的负整数，最高位是符号位，其余31位全是1，它的补码是0x80000001：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;Literal %d 0x%X&quot;</span><span class="o">,</span> <span class="mh">0x80000001</span><span class="o">,</span> <span class="mh">0x80000001</span><span class="o">));</span>
</span><span class='line'><span class="c1">//Literal -2147483647 0x80000001</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>计算机中是以二进制补码来存储整数的，所以要从计算机的角度来理解比较，就是要用二进制的补码来比较两个数的大小。</strong></p>

<p>再次强调，<strong>我们写的源码当中的二进制（无论是字面常量，还是打印输出）都是补码形式，计算机看到的也是补码，比较也是补码，只有当转换成为10进制时，才会还原为原码并进行10进制转换</strong>。</p>

<p>由此得出，（注意，程序员眼睛看到的16进制全是补码形式）：</p>

<ul>
<li>0x80000000是最小的负数，原码为0x80000000，-2<sup>31</sup></li>
<li>0x80000001，第2小的负数（最小的0x80000000再加上1），原码为0xFFFFFFFF，-(2<sup>31</sup>-1)</li>
<li>0xFFFFFFFF，是-1，原码为0x80000001。它是最大的负数（-1是最大的负数）。0xFFFFFFFF（全是1）肯定 最大啊，最高位是1，是负数，所以是最大的负数。</li>
</ul>


<h2>一些有意思的值</h2>

<h3>Integer.MAX_VALUE + 1 = Integer.MIN_VALUE</h3>

<p>按理说应该溢出了，但如果以16进制去计算，就是这样的结果：0x7FFFFFFF + 1 = 0x80000000</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;Max in %d (0x%X) + 1 = %d (0x%X)&quot;</span><span class="o">,</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">,</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">,</span> <span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">+</span><span class="mi">1</span><span class="o">),</span> <span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">+</span><span class="mi">1</span><span class="o">)));</span>
</span><span class='line'><span class="c1">// Max in 2147483647 (0x7FFFFFFF) + 1 = -2147483648 (0x80000000)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Integer.MIN_VALUE - 1 = Integer.MAX_VALUE</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;Min in %d (0x%X) - 1 = %d (0x%X)&quot;</span><span class="o">,</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">,</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">,</span> <span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">-</span><span class="mi">1</span><span class="o">),</span> <span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">-</span><span class="mi">1</span><span class="o">)));</span>
</span><span class='line'><span class="c1">//Min in -2147483648 (0x80000000) - 1 = 2147483647 (0x7FFFFFFF)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参考资料</h2>

<ul>
<li><a href="https://zhuanlan.zhihu.com/p/103239461">为什么0xffffffff是-1？（计算机对整型的存储）</a></li>
<li><a href="https://www.cnblogs.com/zhangziqiu/archive/2011/03/30/computercode.html">原码, 反码, 补码 详解 </a></li>
<li><a href="https://segmentfault.com/a/1190000021511009">一文读懂原码、反码与补码</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/99082236">二进制的原码、反码、补码</a></li>
<li><a href="https://www.ruanyifeng.com/blog/2009/08/twos_complement.html">关于2的补码</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Camera 2教程之预览与加强]]></title>
    <link href="http://toughcoder.net/blog/2022/03/04/camera-2-preview-and-improvement/"/>
    <updated>2022-03-04T19:27:56+08:00</updated>
    <id>http://toughcoder.net/blog/2022/03/04/camera-2-preview-and-improvement</id>
    <content type="html"><![CDATA[<p><a href="http://toughcoder.net/blog/2022/02/28/camera2-api-made-easy/">前一篇文章</a>讲解了如何使用这套新的API，但仍有很多可以提升的空间，这篇重点来讲讲，如何提升预览画质和做一些加强。</p>

<p><a href="http://toughcoder.net/blog/2022/03/04/camera-2-preview-and-improvement/"><img src="https://www.edumobile.org/wp-content/uploads/2015/05/Camera-Preview-Example-in-Android-Programming.jpg" title="auto auto" ></a></p>

<!-- more -->


<h2>线程模型</h2>

<p>因为相机是属于硬件，操作起来可能会耗时，这套新的API也特别注意，因此加了很多异步化处理，所有的请求结果全是通过回调来进行的，并且需要调用者来指定一个回调所使用的线程。因此，我们需要一个专门用于camera操作的线程，用HandlerThread就可以，并把它控制在Activity的生命周期之中，比如在onCreate时启动此线程，在onDestroy时关闭。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>    <span class="n">attachCameraThread</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onDestroy</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onDestroy</span><span class="o">();</span>
</span><span class='line'>     <span class="n">detachCameraThread</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>所有与camera相关的操作，均要在相机专属的HandlerThread中调用，与其他线程（如主线程）的交互均通过回调处理。</p>

<h2>关键对象</h2>

<p>为了进一步的封装和方便管理，需要两个关键对象的封装。</p>

<h3>CameraContext</h3>

<p>一个是CameraContext，负责管理相机的线程，外部所有的方法调用均应该通过它来进行，我们的目的是要把所有的相机相关操作封装在自己的线程里面，因此，暴露给外面的接口，必须统一，并且在开放的方法中加入线程检查，如果还没有启动HandlerThread，就报错，调用者需要先attachThread：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CameraContext</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">LOG_TAG</span> <span class="o">=</span> <span class="n">CameraContext</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getSimpleName</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">CameraManagerWrapper</span> <span class="n">cameraManager</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">volatile</span> <span class="n">HandlerThread</span> <span class="n">cameraManageThread</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">volatile</span> <span class="n">CameraThreadHandler</span> <span class="n">cameraThreadHandler</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">volatile</span> <span class="n">CameraAgent</span> <span class="n">currentCamera</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">CameraContext</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">cameraManager</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">CameraManagerWrapper</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">attachThread</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">LOG_TAG</span><span class="o">,</span> <span class="s">&quot;attachThread&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">cameraThreadHandler</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">cameraThreadHandler</span><span class="o">.</span><span class="na">removeCallbacksAndMessages</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">cameraManageThread</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">cameraManageThread</span><span class="o">.</span><span class="na">isAlive</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">cameraManageThread</span><span class="o">.</span><span class="na">quitSafely</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">cameraManageThread</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">HandlerThread</span><span class="o">(</span><span class="s">&quot;Camera Management Thread&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">cameraManageThread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>        <span class="n">cameraThreadHandler</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">CameraThreadHandler</span><span class="o">(</span><span class="n">cameraManageThread</span><span class="o">.</span><span class="na">getLooper</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">detachThread</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">LOG_TAG</span><span class="o">,</span> <span class="s">&quot;detachThread&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">cameraManageThread</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">cameraManageThread</span><span class="o">.</span><span class="na">isAlive</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>             <span class="n">cameraManageThread</span><span class="o">.</span><span class="na">quitSafely</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">checkThread</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">cameraManageThread</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="o">!</span><span class="n">cameraManageThread</span><span class="o">.</span><span class="na">isAlive</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">CameraSetupException</span><span class="o">(</span><span class="s">&quot;attachThread must be called before any other method invocations.&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">openCamera</span><span class="o">(</span><span class="n">Consumer</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">consumer</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">checkThread</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Runnable</span> <span class="n">actionOpen</span> <span class="o">=</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>              <span class="c1">// ...</span>
</span><span class='line'>        <span class="o">};</span>
</span><span class='line'>        <span class="n">Message</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">Message</span><span class="o">.</span><span class="na">obtain</span><span class="o">(</span><span class="n">cameraThreadHandler</span><span class="o">,</span> <span class="n">actionOpen</span><span class="o">);</span>
</span><span class='line'>        <span class="n">msg</span><span class="o">.</span><span class="na">what</span> <span class="o">=</span> <span class="n">CameraThreadHandler</span><span class="o">.</span><span class="na">MSG_OPEN_CAMERA</span><span class="o">;</span>
</span><span class='line'>        <span class="n">msg</span><span class="o">.</span><span class="na">sendToTarget</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">closeCamera</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">checkThread</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Runnable</span> <span class="n">actionClose</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">Message</span> <span class="n">msgClose</span> <span class="o">=</span> <span class="n">Message</span><span class="o">.</span><span class="na">obtain</span><span class="o">(</span><span class="n">cameraThreadHandler</span><span class="o">,</span> <span class="n">actionClose</span><span class="o">);</span>
</span><span class='line'>        <span class="n">msgClose</span><span class="o">.</span><span class="na">what</span> <span class="o">=</span> <span class="n">CameraThreadHandler</span><span class="o">.</span><span class="na">MSG_CLOSE_CAMERA</span><span class="o">;</span>
</span><span class='line'>        <span class="n">msgClose</span><span class="o">.</span><span class="na">sendToTarget</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>CameraAgent</h3>

<p>还需要对CameraDevice进行封装，把CameraCaptureSession，以及RequestBuilder，封装在内，并且在三大回调Device State Callback，Session State Callback以及Session Capture Callback也都封装在内，因此这些东西的生命周期全都是在CameraDevice内部的。</p>

<p>设计要点：</p>

<ul>
<li>CameraAgent不开放接口给外部，它只能开放给CameraContext使用</li>
<li>对象是对camera device的完整封装，对象本身一直可用，与CameraDevice是否打开无直接关系</li>
<li>随时可以查询静态配置属性，创建对象时就要传入id和CameraCharacteristics</li>
<li>有连接状态，也即打开对应的CameraDevice，动态配置属性查询，以及像启动预览，必须要是连接状态</li>
<li>拍照应该在预览状态内</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">CameraAgent</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">LOG_TAG</span> <span class="o">=</span> <span class="n">CameraAgent</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getSimpleName</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">CameraCharacteristics</span> <span class="n">characteristics</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">CameraContext</span><span class="o">.</span><span class="na">CameraThreadHandler</span> <span class="n">cameraHandler</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Executor</span> <span class="n">executor</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">CameraDevice</span><span class="o">&gt;</span> <span class="n">cameraDevice</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">CameraCaptureSession</span><span class="o">&gt;</span> <span class="n">captureSession</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">CameraDevice</span><span class="o">.</span><span class="na">StateCallback</span> <span class="n">stateCallback</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CameraDevice</span><span class="o">.</span><span class="na">StateCallback</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onOpened</span><span class="o">(</span><span class="nd">@NonNull</span> <span class="n">CameraDevice</span> <span class="n">camera</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">LOG_TAG</span><span class="o">,</span> <span class="s">&quot;Device Status: onOpened&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">cameraDevice</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">camera</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onDisconnected</span><span class="o">(</span><span class="nd">@NonNull</span> <span class="n">CameraDevice</span> <span class="n">camera</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">LOG_TAG</span><span class="o">,</span> <span class="s">&quot;Device Status: onDisconnected&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">cameraDevice</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onError</span><span class="o">(</span><span class="nd">@NonNull</span> <span class="n">CameraDevice</span> <span class="n">camera</span><span class="o">,</span> <span class="kt">int</span> <span class="n">error</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">cameraDevice</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">CameraCaptureSession</span><span class="o">.</span><span class="na">StateCallback</span> <span class="n">regularSessionCallback</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CameraCaptureSession</span><span class="o">.</span><span class="na">StateCallback</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onConfigured</span><span class="o">(</span><span class="nd">@NonNull</span> <span class="n">CameraCaptureSession</span> <span class="n">session</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">LOG_TAG</span><span class="o">,</span> <span class="s">&quot;Session State: onConfigured&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">captureSession</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">session</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onConfigureFailed</span><span class="o">(</span><span class="nd">@NonNull</span> <span class="n">CameraCaptureSession</span> <span class="n">session</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">captureSession</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClosed</span><span class="o">(</span><span class="nd">@NonNull</span> <span class="n">CameraCaptureSession</span> <span class="n">session</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">LOG_TAG</span><span class="o">,</span> <span class="s">&quot;Session State: onClosed&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="kd">super</span><span class="o">.</span><span class="na">onClosed</span><span class="o">(</span><span class="n">session</span><span class="o">);</span>
</span><span class='line'>            <span class="n">captureSession</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">CameraCaptureSession</span><span class="o">.</span><span class="na">CaptureCallback</span> <span class="n">captureCallback</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CameraCaptureSession</span><span class="o">.</span><span class="na">CaptureCallback</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCaptureStarted</span><span class="o">(</span><span class="nd">@NonNull</span> <span class="n">CameraCaptureSession</span> <span class="n">session</span><span class="o">,</span> <span class="nd">@NonNull</span> <span class="n">CaptureRequest</span> <span class="n">request</span><span class="o">,</span> <span class="kt">long</span> <span class="n">timestamp</span><span class="o">,</span> <span class="kt">long</span> <span class="n">frameNumber</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">super</span><span class="o">.</span><span class="na">onCaptureStarted</span><span class="o">(</span><span class="n">session</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">timestamp</span><span class="o">,</span> <span class="n">frameNumber</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">CaptureRequest</span><span class="o">.</span><span class="na">Builder</span> <span class="n">requestBuilder</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CameraAgent</span><span class="o">(</span><span class="n">String</span> <span class="n">id</span><span class="o">,</span> <span class="n">CameraCharacteristics</span> <span class="n">cameraCharacteristics</span><span class="o">,</span> <span class="n">CameraContext</span><span class="o">.</span><span class="na">CameraThreadHandler</span> <span class="n">handler</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">characteristics</span> <span class="o">=</span> <span class="n">cameraCharacteristics</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">cameraHandler</span> <span class="o">=</span> <span class="n">handler</span><span class="o">;</span>
</span><span class='line'>        <span class="n">executor</span> <span class="o">=</span> <span class="n">command</span> <span class="o">-&gt;</span> <span class="n">handler</span><span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="n">command</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">cameraDevice</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>
</span><span class='line'>        <span class="n">captureSession</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>
</span><span class='line'>        <span class="n">previewSize</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>
</span><span class='line'>        <span class="n">errorCode</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">String</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">boolean</span> <span class="nf">connected</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">cameraDevice</span><span class="o">.</span><span class="na">isPresent</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CameraDevice</span><span class="o">.</span><span class="na">StateCallback</span> <span class="nf">getDeviceStateCallback</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">stateCallback</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">connect</span><span class="o">(</span><span class="nd">@NonNull</span> <span class="n">CameraManagerWrapper</span> <span class="n">wrapper</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">LOG_TAG</span><span class="o">,</span> <span class="s">&quot;connect&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">wrapper</span><span class="o">.</span><span class="na">openCamera</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">cameraHandler</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">disconnect</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">LOG_TAG</span><span class="o">,</span> <span class="s">&quot;disconnect&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">captureSession</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">captureSession</span><span class="o">.</span><span class="na">get</span><span class="o">().</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">cameraDevice</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">cameraDevice</span><span class="o">.</span><span class="na">get</span><span class="o">().</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">startPreview</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">stopPreview</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>启动预览</h2>

<p>新的这套API并没有直接设置预览大小或者图片大小的地方，camera的输出都是Surface，底层是通过Surface的大小来做具体的尺寸。本质上都是数据在流动，其实都是buffer，Surface也是buffer，设定了Surface的大小，也就确定了输出buffer的大小，camera硬件也就知道了大小。</p>

<h3>用SurfaceView就可以</h3>

<p>预览是camera的输出，是另外一些组件的输入，API设计已做好了衔接，Surface就是中间的桥梁，Surface作为SurfaceView（可理解为屏幕）的输入，它可以作为camera的输出，由此便把camera的预览显示了出来。在布局文件中用SurfaceView来充当Activity的布局，由此便能得到Surface，再把它塞给camera即可。</p>

<p>需要重点说一下尺寸的约束，想让预览的Surface反应camera预览的尺寸，因此SurfaceView要是wrap_content的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;androidx.constraintlayout.widget.ConstraintLayout</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">xmlns:app=</span><span class="s">&quot;http://schemas.android.com/apk/res-auto&quot;</span>
</span><span class='line'>    <span class="na">xmlns:tools=</span><span class="s">&quot;http://schemas.android.com/tools&quot;</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:background=</span><span class="s">&quot;@color/black&quot;</span>
</span><span class='line'>    <span class="na">tools:context=</span><span class="s">&quot;.CameraActivity&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;net.toughcoder.effectivecamera.AutoFitSurfaceView</span>
</span><span class='line'>        <span class="na">android:id=</span><span class="s">&quot;@+id/view_finder&quot;</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">app:layout_constraintTop_toTopOf=</span><span class="s">&quot;parent&quot;</span>
</span><span class='line'>        <span class="na">app:layout_constraintLeft_toLeftOf=</span><span class="s">&quot;parent&quot;</span>
</span><span class='line'>        <span class="na">app:layout_constraintLeft_toRightOf=</span><span class="s">&quot;parent&quot;</span>
</span><span class='line'>        <span class="na">app:layout_constraintBottom_toBottomOf=</span><span class="s">&quot;parent&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>如何选择预览尺寸</h3>

<p>输入的约束条件是一个比例，比如流行的预览比例是4：3，16：9或者全屏，这个比例是长边与短边的比值，这个可以作为用户体验层面的一个约束，或者叫做设置，尺寸的选择应该遵守此约束。</p>

<p>另外一个约束就是屏幕尺寸，预览的大小应该能刚好满足屏幕尺寸即可，超出屏幕其实就浪费了，没有必要。</p>

<p>所以，选择预览尺寸的策略就是保证比例和刚好满足屏幕。</p>

<p>每个camera都有支持的一组预览尺寸，按照 我们的策略从其中选择一个就可以了。预览尺寸从静态配置中就可以读得到，不需要连接状态，因此，可以在创建好CameraAgent对象后就可以进行尺寸选择，屏幕尺寸随时可获利，比例约束是一个设置随时可读取，因此这是可行的。</p>

<p>当选择好了预览尺寸后，要把它设置到SurfaceView中去，以让SurfaceView调整自身的大小。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Strategies:</span>
</span><span class='line'><span class="cm"> *  1) preview size should not be bigger than screen, which is not necessary.</span>
</span><span class='line'><span class="cm"> *  2) ratio should match.</span>
</span><span class='line'><span class="cm"> *  3) pick the largest one.</span>
</span><span class='line'><span class="cm"> *  4) if not found, use screen size.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">private</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">CameraSize</span><span class="o">&gt;</span> <span class="nf">calculatePreviewSize</span><span class="o">(</span><span class="n">Point</span> <span class="n">screenSize</span><span class="o">,</span> <span class="kt">float</span> <span class="n">ratio</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">width</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">screenSize</span><span class="o">.</span><span class="na">x</span><span class="o">,</span> <span class="n">screenSize</span><span class="o">.</span><span class="na">y</span><span class="o">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">height</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">round</span><span class="o">(</span><span class="n">width</span> <span class="o">*</span> <span class="n">ratio</span><span class="o">),</span> <span class="n">screenSize</span><span class="o">.</span><span class="na">y</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">final</span> <span class="kt">int</span> <span class="n">limit</span> <span class="o">=</span> <span class="n">screenSize</span><span class="o">.</span><span class="na">x</span> <span class="o">*</span> <span class="n">screenSize</span><span class="o">.</span><span class="na">y</span><span class="o">;</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">LOG_TAG</span><span class="o">,</span> <span class="s">&quot;screen size &quot;</span> <span class="o">+</span> <span class="n">screenSize</span><span class="o">.</span><span class="na">x</span> <span class="o">+</span> <span class="s">&quot; x &quot;</span> <span class="o">+</span> <span class="n">screenSize</span><span class="o">.</span><span class="na">y</span> <span class="o">+</span>
</span><span class='line'>            <span class="s">&quot;, ratio &quot;</span> <span class="o">+</span> <span class="n">ratio</span> <span class="o">+</span> <span class="s">&quot;, desired width-&gt;&quot;</span> <span class="o">+</span> <span class="n">width</span> <span class="o">+</span> <span class="s">&quot;, height-&gt;&quot;</span> <span class="o">+</span> <span class="n">height</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">StreamConfigurationMap</span> <span class="n">streamMap</span> <span class="o">=</span> <span class="n">characteristics</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">CameraCharacteristics</span><span class="o">.</span><span class="na">SCALER_STREAM_CONFIGURATION_MAP</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Size</span><span class="o">[]</span> <span class="n">surfaceSizes</span> <span class="o">=</span> <span class="n">streamMap</span><span class="o">.</span><span class="na">getOutputSizes</span><span class="o">(</span><span class="n">Surface</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">surfaceSizes</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">surfaceSizes</span> <span class="o">=</span> <span class="n">streamMap</span><span class="o">.</span><span class="na">getOutputSizes</span><span class="o">(</span><span class="n">ImageFormat</span><span class="o">.</span><span class="na">PRIVATE</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">CameraSize</span><span class="o">&gt;</span> <span class="n">supportedSize</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">surfaceSizes</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>            <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">CameraSize:</span><span class="o">:</span><span class="k">new</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">size</span> <span class="o">-&gt;</span> <span class="n">size</span><span class="o">.</span><span class="na">height</span> <span class="o">*</span> <span class="n">size</span><span class="o">.</span><span class="na">width</span> <span class="o">&lt;=</span> <span class="n">limit</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">sorted</span><span class="o">(</span><span class="nl">CameraSize:</span><span class="o">:</span><span class="n">compare</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">LOG_TAG</span><span class="o">,</span> <span class="s">&quot;supportedSize &quot;</span> <span class="o">+</span> <span class="n">supportedSize</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">supportedSize</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">filter</span><span class="o">(</span><span class="n">size</span> <span class="o">-&gt;</span> <span class="n">size</span><span class="o">.</span><span class="na">matchRatio</span><span class="o">(</span><span class="n">ratio</span><span class="o">)).</span><span class="na">findFirst</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<h2>确保关闭</h2>

<p>相机是一种硬件资源，当退出的时候要能确保它是关闭状态的，也就是说要确保CameraAgent#disconnect能执行，且要执行完成，执行完成的意思是，你需要收到onDisconnected的回调。</p>

<p>这就要求我们在detachThread，即退出相机线程的时候，要小心处理好尚未来得及执行（如有）的操作，因为所有的操作都会转到相机线程中去，是通过消息队列，所以操作可能还在排队中尚未真正执行。</p>

<p>具体做法是，直接移除掉未得到执行的open和其他操作。如果有pending状态的关闭，则要先让其执行，并且把关闭线程的操作放到CameraDevice State Callcback的onDisconnect中，也就是说待CameraDevice完全关闭完成后，才可以终止相机线程：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">detachThread</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">LOG_TAG</span><span class="o">,</span> <span class="s">&quot;detachThread&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">cameraThreadHandler</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Drop all pending open actions</span>
</span><span class='line'>        <span class="n">cameraThreadHandler</span><span class="o">.</span><span class="na">removeMessages</span><span class="o">(</span><span class="n">CameraThreadHandler</span><span class="o">.</span><span class="na">MSG_OPEN_CAMERA</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">cameraThreadHandler</span><span class="o">.</span><span class="na">hasMessages</span><span class="o">(</span><span class="n">CameraThreadHandler</span><span class="o">.</span><span class="na">MSG_CLOSE_CAMERA</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Ensure close actions are dispatched.</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">50</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="c1">// Drop all other messages.</span>
</span><span class='line'>        <span class="n">cameraThreadHandler</span><span class="o">.</span><span class="na">removeCallbacksAndMessages</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">// TODO: technically speaking, should do this in handler thread</span>
</span><span class='line'>    <span class="c1">// since all connect/disconnect are done inside handler thread</span>
</span><span class='line'>    <span class="c1">// status might not be synced with caller&#39;s thread.</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">cameraManageThread</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">cameraManageThread</span><span class="o">.</span><span class="na">isAlive</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">currentCamera</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">currentCamera</span><span class="o">.</span><span class="na">connected</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">currentCamera</span><span class="o">.</span><span class="na">addDisconnectedAction</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">cameraManageThread</span><span class="o">.</span><span class="na">quitSafely</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">cameraManageThread</span><span class="o">.</span><span class="na">quitSafely</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Camera2 API Made Easy]]></title>
    <link href="http://toughcoder.net/blog/2022/02/28/camera2-api-made-easy/"/>
    <updated>2022-02-28T23:42:34+08:00</updated>
    <id>http://toughcoder.net/blog/2022/02/28/camera2-api-made-easy</id>
    <content type="html"><![CDATA[<p>从Android 5.0 （API 21）开始谷歌废弃了<a href="https://developer.android.com/reference/android/hardware/Camera">Camera</a>，并提供了一套新的API，称之为<a href="https://developer.android.com/reference/android/hardware/camera2/package-summary">Camera 2</a>，不再是大而全的一个类了，也使用了更多的回调以异步化，流程与参数的控制更加的灵活，但也变得更加的复杂了，今天就来学习一下这套新API的使用方法。</p>

<p><a href="http://toughcoder.net/blog/2022/02/28/camera2-api-made-easy/"><img src="https://www.upphone.com/wp-content/uploads/2020/07/android-camera-settings.jpg" title="auto auto" ></a></p>

<!-- more -->


<h2>基本使用大法</h2>

<p>新的这一套API使用起来略复杂，涉及的较多的对象，可以按照如下步骤来使用。</p>

<h3>Step 1: 申请相机使用权限</h3>

<p>自从Android M（6.0）以后，对权限的限制比以前严格多了，必须要在运行时动态的去申请权限，征得用户同意后，方可正常使用。</p>

<p>需要在AndroidManifest中声明相机权限：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&quot;android.permission.CAMERA&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>注意</strong>：官方还建议在manifest中声明<a href="https://developer.android.com/guide/topics/manifest/uses-feature-element?hl=en">use camera feature</a>，但用处不大，这主要是给Google Play用的，Google Play可以根据这些方便精准投递你的app，如设备无camera硬件，或者硬件配置不支持，就不会安装，但就国内的市场来说基本用不到。</p>

<p>但这还不够，还需要在运行时动态检查，如果未授权，则要去申请，如仍被用户拒绝，则可直接退出，因为相机应用嘛，没有相机权限啥也做不了。一般来说，这个过程放在onCreate中做就可以了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>    <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_camera</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">ContextCompat</span><span class="o">.</span><span class="na">checkSelfPermission</span><span class="o">(</span><span class="n">getApplicationContext</span><span class="o">(),</span> <span class="n">Manifest</span><span class="o">.</span><span class="na">permission</span><span class="o">.</span><span class="na">CAMERA</span><span class="o">)</span> <span class="o">==</span>
</span><span class='line'>            <span class="n">PackageManager</span><span class="o">.</span><span class="na">PERMISSION_GRANTED</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">setupCamera</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">requestPermissions</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">[]{</span><span class="n">Manifest</span><span class="o">.</span><span class="na">permission</span><span class="o">.</span><span class="na">CAMERA</span><span class="o">},</span> <span class="n">REQ_CODE_PERM</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onRequestPermissionsResult</span><span class="o">(</span><span class="kt">int</span> <span class="n">requestCode</span><span class="o">,</span> <span class="nd">@NonNull</span> <span class="n">String</span><span class="o">[]</span> <span class="n">permissions</span><span class="o">,</span> <span class="nd">@NonNull</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">grantResults</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onRequestPermissionsResult</span><span class="o">(</span><span class="n">requestCode</span><span class="o">,</span> <span class="n">permissions</span><span class="o">,</span> <span class="n">grantResults</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">requestCode</span> <span class="o">==</span> <span class="n">REQ_CODE_PERM</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">grantResults</span><span class="o">.</span><span class="na">length</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">grantResults</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="n">PackageManager</span><span class="o">.</span><span class="na">PERMISSION_GRANTED</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">setupCamera</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="n">getApplicationContext</span><span class="o">(),</span>
</span><span class='line'>                    <span class="s">&quot;To use this app you must grant CAMERA permission.&quot;</span><span class="o">,</span>
</span><span class='line'>                    <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_LONG</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>            <span class="n">finish</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>注意</strong>：不建议放在onResume中去做，因为可能会造成死循环，比如权限申请，虽然看起来像一个对话框，但其实是一个Activity，也就是说从权限授权那个弹窗页面回来，是会走onResume的，如果用户同意授予了还好，直接就往下走流程了，假如用户拒绝了权限，检查发现权限还未授予，会继续去申请，这就会死循环了。</p>

<p>权限申请是必须要做，且要处理好，在应用的入口做好处理，保证后面的流程权限是有的，这样可以为业务逻辑减轻复担，里面就可以不用管权限了。基于这样的假设：要么权限已授予，要么就不会走进来（无权限时应该直接退出）。</p>

<h3>Step 2: 获取相机的配置情况</h3>

<p>处理好了权限以后，就要真正开始搞了，无论你的use case是什么，第一步肯定 是获取相机的配置信息情况，也就是说要搞清楚有几个硬件camera可以用，它的能力是什么（输出能满足什么样的需求），它的特点是什么（前置还是后置）。这里最主要用到的是就是<a href="https://developer.android.com/reference/android/hardware/camera2/CameraManager">CameraManager</a>对象，它是一个注册在ServiceManager里面的独立service，所以可以通过Context来获取：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">cameraManager</span> <span class="o">=</span> <span class="o">(</span><span class="n">CameraManager</span><span class="o">)</span> <span class="n">context</span><span class="o">.</span><span class="na">getSystemService</span><span class="o">(</span><span class="n">Context</span><span class="o">.</span><span class="na">CAMERA_SERVICE</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后就是获取当前有多少可用的摄像头：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span><span class="o">[]</span> <span class="n">ids</span> <span class="o">=</span> <span class="n">cameraManager</span><span class="o">.</span><span class="na">getCameraIdList</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个列表就是当前可用的camera，用一个String形式的id来标识，查询具体的摄像头的能力和配置都需要传入对应的id，比如说简单的dump一下信息：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">enumerateCameras</span><span class="o">(</span><span class="n">Consumer</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">consumer</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">cameraIds</span> <span class="o">=</span> <span class="n">cameraManager</span><span class="o">.</span><span class="na">getCameraIdList</span><span class="o">();</span>
</span><span class='line'>   <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">status</span> <span class="o">=</span> <span class="n">cameraIds</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>                <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">cameraManager:</span><span class="o">:</span><span class="n">getCameraCharacteristics</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">CameraContext:</span><span class="o">:</span><span class="n">dumpCameraInfo</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">dumpCameraInfo</span><span class="o">(</span><span class="n">CameraCharacteristics</span> <span class="n">characteristics</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">StringBuilder</span><span class="o">();</span>
</span><span class='line'>    <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;{Physical Id: &quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">characteristics</span><span class="o">.</span><span class="na">getPhysicalCameraIds</span><span class="o">());</span>
</span><span class='line'>    <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;, Facing: &quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">facing</span> <span class="o">=</span> <span class="n">characteristics</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">CameraCharacteristics</span><span class="o">.</span><span class="na">LENS_FACING</span><span class="o">);</span>
</span><span class='line'>    <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">facing</span> <span class="o">==</span> <span class="n">CameraMetadata</span><span class="o">.</span><span class="na">LENS_FACING_FRONT</span> <span class="o">?</span> <span class="s">&quot;FRONT&quot;</span> <span class="o">:</span> <span class="s">&quot;BACK&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;}&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为大多数场景都是默认使用后摄，但要先把找出来：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>   <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">cameraIds</span> <span class="o">=</span> <span class="n">cameraManager</span><span class="o">.</span><span class="na">getCameraIdList</span><span class="o">();</span>
</span><span class='line'>   <span class="n">cameraIds</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>            <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">id</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">CameraCharacteristics</span> <span class="n">cc</span> <span class="o">=</span> <span class="n">cameraManager</span><span class="o">.</span><span class="na">getCameraCharacteristics</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span><span class='line'>                        <span class="k">if</span> <span class="o">(</span><span class="n">cc</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">CameraCharacteristics</span><span class="o">.</span><span class="na">LENS_FACING</span><span class="o">)</span> <span class="o">==</span> <span class="n">CameraMetadata</span><span class="o">.</span><span class="na">LENS_FACING_BACK</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                            <span class="n">currentCamera</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">CameraAgent</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">cc</span><span class="o">,</span> <span class="n">cameraThreadHandler</span><span class="o">);</span>
</span><span class='line'>                            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>            <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为官方的CameraManager封装略差一些，以及它的每一个方法都要检查权限异常，所以做一下进一步的简单封装：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">CameraManagerWrapper</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">CameraManager</span> <span class="n">cameraManager</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">CameraManagerWrapper</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">cameraManager</span> <span class="o">=</span> <span class="o">(</span><span class="n">CameraManager</span><span class="o">)</span> <span class="n">context</span><span class="o">.</span><span class="na">getSystemService</span><span class="o">(</span><span class="n">Context</span><span class="o">.</span><span class="na">CAMERA_SERVICE</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">getCameraIdList</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">cameraManager</span><span class="o">.</span><span class="na">getCameraIdList</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">CameraAccessException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">CameraCharacteristics</span> <span class="nf">getCameraCharacteristics</span><span class="o">(</span><span class="n">String</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">cameraManager</span><span class="o">.</span><span class="na">getCameraCharacteristics</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">CameraAccessException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Step 3：打开相机</h3>

<p>找到了摄像头，下一步就可以尝试打开并使用了。通过<a href="https://developer.android.com/reference/android/hardware/camera2/CameraManager#openCamera(java.lang.String,%20android.hardware.camera2.CameraDevice.StateCallback,%20android.os.Handler">CameraManager#openCamera</a>)来获取<a href="https://developer.android.com/reference/android/hardware/camera2/CameraDevice">CameraDevice</a>对象，这里的CameraDevice就是一个摄像头的封装，后面所有的操作都要在它上面进行。还需要提供一个<a href="https://developer.android.com/reference/android/hardware/camera2/CameraDevice.StateCallback">CameraDevice.StateCallback</a>，以及一个Handler，它是用于StateCallback运行的线程，也就是说StateCallback的几个方法都是在Handler所在的线程中运行的。</p>

<p>因为打开摄像头是需要去操作硬件的，所以可能会耗时，因此，在这里引入了异步的回调，用以通知打开的结果CameraManager#openCamera是没有任何返回值的，结果 是通过StateCallback来通知给应用程序，且是运行在指定的<a href="https://developer.android.com/reference/android/os/Handler">Handler</a>中的，如果不传Handler，那么StateCallback就会运行在主线程中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">private</span> <span class="n">CameraDevice</span><span class="o">.</span><span class="na">StateCallback</span> <span class="n">stateCallback</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CameraDevice</span><span class="o">.</span><span class="na">StateCallback</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onOpened</span><span class="o">(</span><span class="nd">@NonNull</span> <span class="n">CameraDevice</span> <span class="n">camera</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">LOG_TAG</span><span class="o">,</span> <span class="s">&quot;Device Status: onOpened&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">cameraDevice</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">camera</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onDisconnected</span><span class="o">(</span><span class="nd">@NonNull</span> <span class="n">CameraDevice</span> <span class="n">camera</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">LOG_TAG</span><span class="o">,</span> <span class="s">&quot;Device Status: onDisconnected&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">cameraDevice</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>
</span><span class='line'>        <span class="n">errorCode</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onError</span><span class="o">(</span><span class="nd">@NonNull</span> <span class="n">CameraDevice</span> <span class="n">camera</span><span class="o">,</span> <span class="kt">int</span> <span class="n">error</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">cameraDevice</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>
</span><span class='line'>        <span class="n">errorCode</span> <span class="o">=</span> <span class="n">error</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">cameraManager</span><span class="o">.</span><span class="na">openCamera</span><span class="o">(</span><span class="n">backId</span><span class="o">,</span> <span class="n">stateCallback</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>打开操作仅是一个开端，本身也没有特别复杂的，就是需要在StateCallback中做好处理就可以了。</p>

<h3>Step 4： 创建拍照会话</h3>

<p>下一步就是要创建拍照会话，对于每一个CameraDevice，打开了以后，要想使用必须创建一个<a href="https://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession">CameraCaptureSession</a>，所有的use case都需要通过有效的CameraCaptureSeesion对象来实现（如预览和拍照），CameraDevice对象本身提供的功能并不多。与打开类似，也需要提供一个<a href="https://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession.StateCallback">CameraCaptureSession.StateCallback</a>以接收创建session的结果，同时也要提供一个StateCallback使用的线程Handler：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">CameraCaptureSession</span><span class="o">.</span><span class="na">StateCallback</span> <span class="n">regularSessionCallback</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CameraCaptureSession</span><span class="o">.</span><span class="na">StateCallback</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onConfigured</span><span class="o">(</span><span class="nd">@NonNull</span> <span class="n">CameraCaptureSession</span> <span class="n">session</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">LOG_TAG</span><span class="o">,</span> <span class="s">&quot;Session State: onConfigured&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">captureSession</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">session</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onConfigureFailed</span><span class="o">(</span><span class="nd">@NonNull</span> <span class="n">CameraCaptureSession</span> <span class="n">session</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">captureSession</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClosed</span><span class="o">(</span><span class="nd">@NonNull</span> <span class="n">CameraCaptureSession</span> <span class="n">session</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">LOG_TAG</span><span class="o">,</span> <span class="s">&quot;Session State: onClosed&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onClosed</span><span class="o">(</span><span class="n">session</span><span class="o">);</span>
</span><span class='line'>        <span class="n">captureSession</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">createCaptureSession</span><span class="o">(</span><span class="n">Surface</span> <span class="n">surface</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">SessionConfiguration</span> <span class="n">sessionConfig</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SessionConfiguration</span><span class="o">(</span>
</span><span class='line'>            <span class="n">SessionConfiguration</span><span class="o">.</span><span class="na">SESSION_REGULAR</span><span class="o">,</span>
</span><span class='line'>            <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="k">new</span> <span class="nf">OutputConfiguration</span><span class="o">(</span><span class="n">surface</span><span class="o">)),</span>
</span><span class='line'>            <span class="n">executor</span><span class="o">,</span>
</span><span class='line'>            <span class="n">regularSessionCallback</span><span class="o">);</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">cameraDevice</span><span class="o">.</span><span class="na">get</span><span class="o">().</span><span class="na">createCaptureSession</span><span class="o">(</span><span class="n">sessionConfig</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">CameraAccessException</span> <span class="n">ignored</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要注意，同时需要提供一个camera的输出目标，比如预览的Surface。另外就是，创建CaptureSession是有2个API的，以前常用的是<a href="https://developer.android.com/reference/android/hardware/camera2/CameraDevice#createCaptureSession(java.util.List%3Candroid.view.Surface%3E,%20android.hardware.camera2.CameraCaptureSession.StateCallback,%20android.os.Handler">createCaptureSession(List<Surface> outputs, CameraCaptureSession.StateCallback callback, Handler handler)</a>)，但这个方法已被标记为Deprecated的了，推荐使用<a href="https://developer.android.com/reference/android/hardware/camera2/CameraDevice#createCaptureSession(android.hardware.camera2.params.SessionConfiguration">createCaptureSession(SessionConfiguration config)</a>)。这两者基本没区别，所需要传入的参数 都差不多，唯一不同的就是供回调所使用的线程，旧的API是用Handler，新的这个要求是<a href="https://developer.android.com/reference/java/util/concurrent/Executor">Executor</a>，这里有些不太一致，但容易解决，通过Handler可以很容易的创建出来一个Executor：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">executor</span> <span class="o">=</span> <span class="n">command</span> <span class="o">-&gt;</span> <span class="n">handler</span><span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="n">command</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Step 5：请求预览</h3>

<p>有了CameraCaptureSession对象以后，就可以启动预览了，这个是相机类应用的最为基础的一个use case。</p>

<p>主要是通过<a href="https://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession#setRepeatingRequest(android.hardware.camera2.CaptureRequest,%20android.hardware.camera2.CameraCaptureSession.CaptureCallback,%20android.os.Handler">setRepeatingRequest</a>)这个方法，需要提供一个<a href="https://developer.android.com/reference/android/hardware/camera2/CaptureRequest">CaptureRequest</a>，一个<a href="https://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession.CaptureCallback">CaptureCallback</a>以及一个供回调使用的Handler，其实，这一步通常与Step 4融合在一起：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="c1">// 省略的代码</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onConfigured</span><span class="o">(</span><span class="nd">@NonNull</span> <span class="n">CameraCaptureSession</span> <span class="n">session</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">LOG_TAG</span><span class="o">,</span> <span class="s">&quot;Session State: onConfigured&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">captureSession</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">session</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">// In session state callback</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">captureSession</span><span class="o">.</span><span class="na">get</span><span class="o">().</span><span class="na">setRepeatingRequest</span><span class="o">(</span><span class="n">requestBuilder</span><span class="o">.</span><span class="na">build</span><span class="o">(),</span> <span class="n">captureCallback</span><span class="o">,</span> <span class="n">cameraHandler</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">CameraAccessException</span> <span class="n">ignored</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>   <span class="c1">// 省略的代码</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">CameraCaptureSession</span><span class="o">.</span><span class="na">CaptureCallback</span> <span class="n">captureCallback</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CameraCaptureSession</span><span class="o">.</span><span class="na">CaptureCallback</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCaptureStarted</span><span class="o">(</span><span class="nd">@NonNull</span> <span class="n">CameraCaptureSession</span> <span class="n">session</span><span class="o">,</span> <span class="nd">@NonNull</span> <span class="n">CaptureRequest</span> <span class="n">request</span><span class="o">,</span> <span class="kt">long</span> <span class="n">timestamp</span><span class="o">,</span> <span class="kt">long</span> <span class="n">frameNumber</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCaptureStarted</span><span class="o">(</span><span class="n">session</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">timestamp</span><span class="o">,</span> <span class="n">frameNumber</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">doStartPreview</span><span class="o">(</span><span class="n">Surface</span> <span class="n">surface</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">SessionConfiguration</span> <span class="n">sessionConfig</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SessionConfiguration</span><span class="o">(</span>
</span><span class='line'>            <span class="n">SessionConfiguration</span><span class="o">.</span><span class="na">SESSION_REGULAR</span><span class="o">,</span>
</span><span class='line'>            <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="k">new</span> <span class="nf">OutputConfiguration</span><span class="o">(</span><span class="n">surface</span><span class="o">)),</span>
</span><span class='line'>            <span class="n">executor</span><span class="o">,</span>
</span><span class='line'>            <span class="n">regularSessionCallback</span><span class="o">);</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">requestBuilder</span> <span class="o">=</span> <span class="n">cameraDevice</span><span class="o">.</span><span class="na">get</span><span class="o">().</span><span class="na">createCaptureRequest</span><span class="o">(</span><span class="n">CameraDevice</span><span class="o">.</span><span class="na">TEMPLATE_PREVIEW</span><span class="o">);</span>
</span><span class='line'>        <span class="n">requestBuilder</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">CaptureRequest</span><span class="o">.</span><span class="na">CONTROL_AF_MODE</span><span class="o">,</span> <span class="n">CaptureResult</span><span class="o">.</span><span class="na">CONTROL_AF_MODE_CONTINUOUS_PICTURE</span><span class="o">);</span>
</span><span class='line'>        <span class="n">requestBuilder</span><span class="o">.</span><span class="na">addTarget</span><span class="o">(</span><span class="n">surface</span><span class="o">);</span>
</span><span class='line'>        <span class="n">sessionConfig</span><span class="o">.</span><span class="na">setSessionParameters</span><span class="o">(</span><span class="n">requestBuilder</span><span class="o">.</span><span class="na">build</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">cameraDevice</span><span class="o">.</span><span class="na">get</span><span class="o">().</span><span class="na">createCaptureSession</span><span class="o">(</span><span class="n">sessionConfig</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">CameraAccessException</span> <span class="n">ignored</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>总结</h2>

<p>前面说了这么多，其实关键的就是三个对象和三个回调，三个对象分别是</p>

<ul>
<li>CameraManager &ndash; 用以获取静态的配置信息</li>
<li>CameraDevice &ndash; 用以创建拍照会话</li>
<li>CameraCaptureSession &ndash; 用以启动预览和进行拍照</li>
</ul>


<p>三大回调分别是：</p>

<ul>
<li>CameraDevice.StateCallback &ndash; 用于获取CameraDevice</li>
<li>CameraCaptureSession.StateCallback &ndash; 用于获取拍照会话</li>
<li>CameraCaptureSession.CaptureCallback &ndash; 用于获取预览和拍照的结果</li>
</ul>


<p>再有就是，提供回调的时候要提供一个回调发生的线程，通过Handler或者Executor来指定。因为硬件操作可能会耗时甚至完全卡死，所以回调和线程是用来实现异步的。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://www.freecodecamp.org/news/android-camera2-api-take-photos-and-videos/">Android Camera2 – How to Use the Camera2 API to Take Photos and Videos</a></li>
<li><a href="https://juejin.cn/post/6844904062798790663">Android Camera-Camera2使用</a></li>
<li><a href="https://www.jianshu.com/p/9a2e66916fcb">Android Camera2 教程 · 第一章 · 概览</a></li>
<li><a href="https://developer.aliyun.com/article/678342">android Camera2 API使用详解</a></li>
<li><a href="https://blog.csdn.net/afei__/article/details/85342597">Android Camera2 之 CameraDevice 详解</a></li>
<li><a href="https://www.jianshu.com/p/cad777db008e">Camera2开发(2)之CameraDevice类</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Camera App开发学习路线]]></title>
    <link href="http://toughcoder.net/blog/2022/02/11/android-camera-app-ramp-up/"/>
    <updated>2022-02-11T20:59:14+08:00</updated>
    <id>http://toughcoder.net/blog/2022/02/11/android-camera-app-ramp-up</id>
    <content type="html"><![CDATA[<p>对于智能手机来说相机是非常重要的一个功能，它是影像的生产者，是新时代社交（图片，视频）内容的基础。后面我们将重点学习 一下安卓平台的Camera app开发。</p>

<p><a href="http://toughcoder.net/blog/2022/02/11/android-camera-app-ramp-up/"><img src="https://www.xda-developers.com/files/2018/09/best-android-camera.png" title="auto auto" ></a></p>

<!-- more -->


<h2><a href="https://developer.android.com/reference/android/hardware/camera2/package-summary">Camera 2 API</a></h2>

<p>学习如何使用新的API，以实例的方式来学习新一套API如何使用，最终成果将会是一个简单的，具有基础功能的Camera App。</p>

<p>有以下文档可供参考：</p>

<ul>
<li><a href="https://developer.android.com/training/camera2">Official training docs</a></li>
<li><a href="https://developer.android.com/training/camera">Camera</a></li>
</ul>


<p>同时谷歌也有一些官方的样例可供参考：</p>

<ul>
<li><a href="https://github.com/googlearchive/android-Camera2Basic">android-Camera2Basic</a></li>
<li><a href="https://github.com/googlearchive/android-Camera2Video">android-Camera2Video</a></li>
<li><a href="https://github.com/googlearchive/android-Camera2Raw">android-Camera2Raw</a></li>
<li><a href="https://github.com/android/camera-samples">Camera Samples Repository</a></li>
</ul>


<p>AOSP源码中的<a href="https://cs.android.com/android/platform/superproject/+/master:packages/apps/Camera2/">Camera2</a>也是值得学习和参考 的。</p>

<h2>Frameworks</h2>

<p>在学习完API如何使用以后，还需要深入学习一下API下面的框架层。正所谓知其然，更要知其所以然，看了Demo以及文档后谁都会有API，要想加深理解，就必须继续深挖。</p>

<p>这部分没有什么捷径，只能去啃<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/hardware/camera2/">AOSP的源码</a>了。</p>

<h2><a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/av/services/camera/libcameraservice/CameraService.cpp?q=cameraservice">CameraService</a></h2>

<p>这是Frameworks层的最后一环，它连接着Java层和HAL层，主要负责camera device的管理，如权限，打开与关闭的管理，在Android M之前并不是独立的进程，是放在media.server一起的，后来独立成为一个单独的系统级别的进程cameraserver，在ServiceManager中的名字是media.camera，可以通过如下命令查看它的状态：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>adb shell dumpsys media.camera</span></code></pre></td></tr></table></div></figure>


<h2><a href="https://developer.android.com/jetpack">Jetpack</a>中的<a href="https://developer.android.com/training/camerax">CameraX</a></h2>

<p>这是谷歌封装的库，用以简化API的调用，加快app开发进度。</p>

<h2>深入了解业务架构与技术栈</h2>

<p><a href="https://source.android.google.cn/devices/camera">AOSP中的文档也值得学习</a></p>

<h2><a href="https://source.codeaurora.org/quic/la/platform/packages/apps/SnapdragonCamera/tree/">SnapdragonCamera</a></h2>

<p>相机是技术栈当中最为复杂的一个，SoC平台是至关重要的，所以Qcom的SnapdragonCamera也是值得深入学习的。</p>

<h2>相机业务知识学习</h2>

<h2>封装</h2>

<p>相机是非常受硬件限制的，不同的SoC平台，不同的OEM厂商，以及不同的Android版本，API以及具体细节差异巨大，这给Camera app开发带来非常大的适配工作，那么可以把Camera app核心的业务封装成一个库，这样可以简化开发。</p>

<h2>架构</h2>

<p>如何架构一个Camera app。</p>

<h2>扩展功能</h2>

<p>除基本的拍照录像功能以外，可以扩展一些功能。</p>

<h2>优秀开源项目</h2>

<h3><a href="https://github.com/react-native-camera/react-native-camera">react-native-camera</a></h3>

<h3><a href="https://github.com/CameraKit/camerakit-android">camerakit-android</a></h3>

<h3><a href="https://github.com/google/cameraview">cameraview</a></h3>

<h3><a href="https://github.com/natario1/CameraView">CameraView</a></h3>

<h3><a href="https://github.com/RedApparat/Fotoapparat">Fotoapparat</a></h3>

<h3><a href="https://github.com/Skykai521/StickerCamera">StickerCamera</a></h3>

<h3><a href="https://github.com/CJT2325/CameraView">CameraView</a></h3>

<h3><a href="https://github.com/CainKernel/CainCamera">CainCamera</a></h3>

<h3><a href="https://github.com/aserbao/AndroidCamera">AndroidCamera</a></h3>

<h3><a href="https://github.com/nekocode/CameraFilter">CameraFilter</a></h3>

<h3><a href="https://github.com/florent37/CameraFragment">CameraFragment</a></h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入学习Java虚拟机知识]]></title>
    <link href="http://toughcoder.net/blog/2022/02/08/study-further-the-java-virtual-machine/"/>
    <updated>2022-02-08T20:33:27+08:00</updated>
    <id>http://toughcoder.net/blog/2022/02/08/study-further-the-java-virtual-machine</id>
    <content type="html"><![CDATA[<p>Java编程语言的真核心是其<a href="https://www.geeksforgeeks.org/jvm-works-jvm-architecture/">虚拟机（Java Virtual Machine or JVM）</a>，JVM是真正的让Java宣言『Write Once，Run Anywhere』变成现实，JVM封装并隔离了不同的OS，JVM有它自己的标准和规范，从而凡是符合JVM的『代码』都可以在JVM上运行。Java编程语言并不是直接运行在JVM上面的，Java语言只是套在JVM上面的一层语言规则。</p>

<p><a href="http://toughcoder.net/blog/2022/02/08/study-further-the-java-virtual-machine/"><img src="https://javatutorial.net/wp-content/uploads/2017/10/write-once-run-anywhere-jvm.png" title="auto auto" ></a></p>

<!-- more -->


<p>准确的说JVM接收的是一套叫做<a href="https://www.javatpoint.com/java-bytecode">字节码（Bytecode）</a>的东西，只要是能把一套语法规则『翻译』成为符合JVM规范的字节码，就可以在JVM上面运行，除了正统的Java之外，<a href="https://scala-lang.org/">Scala</a>，<a href="http://www.groovy-lang.org/">Groovy</a>，以及<a href="https://kotlinlang.org/">Kotlin</a>等等都是这样实现的，它们编译之后得到的就是字节码文件，字节码文件可直接运行在JVM之上。</p>

<p>那么字节码才是Java编程语言的真核心，值得深入研究和学习。前面写过<a href="http://toughcoder.net/blog/2022/01/23/android-reverse-engineering-tricks/">一篇介绍安卓高级逆向方法的文章</a>，里面涉及到一些JVM的高级技术，还需要进一步的深入学习一下，以能更好的理解插件化和热修复的核心原理。</p>

<h2><a href="https://docs.oracle.com/javase/7/docs/api/java/lang/ClassLoader.html">ClassLoader</a></h2>

<p>除了标准Java中的以外，在Android当中的<a href="https://developer.android.com/reference/java/lang/ClassLoader">ClassLoader</a>也要深入学习一下，这个是相当多的逆向技术的基础，基本的原理和流程如委托机制看文章或者文档就可以了。</p>

<ul>
<li><a href="https://www.baeldung.com/java-classloaders">Class Loaders in Java</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/51374915">老大难的 Java ClassLoader 再不理解就老了</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/136083521">深入理解Android ClassLoader</a></li>
<li><a href="http://gityuan.com/2017/03/19/android-classloader/">Android类加载器ClassLoader</a></li>
</ul>


<p>需要重点记住的就是两点核心要点，一是ClassLoader是类的作用域，它是类的沙箱，同一个ClassLoader里面只能有一个类，必须唯一，但不同的ClassLoader对象，可以有同样的类。这里类的意思是全量类名，也即其packageName+ClassName，Fully Qualified Name。第二就是惰性加载机制，也就是说，对于同一个ClassLoader对象，一个类只会加载一次，加载过了，就不会再去loadClass了。</p>

<p>根据这两个核心要点，就理解了各种热修复的原理了，惰性加载机制决定了热生效和冷生效，因为ClassLoader只加载一次，所以Class替换的方式，只能下次启动生效（准确的说是下次需要loadClass时生效）。而替换的方法就是把修复的patch的想办法放在常规的前面，这样就会优先加载要替换的类了。</p>

<p><strong>注意</strong>：Android中并不是官方Java的bytecode，而一种叫做dex的东西，它是在编译时把标准Class文件经过转化再打包到一起形成的，最初安卓的VM叫做Dalvik，所以就把它的字节码命名为dex意即Dalvik Executable，这是dex的由来。虽然目标格式不一样，但是dex与class是可以自由转换的，且dex的生成在编译为标准class之后的，所以字节码的一切工具，对于安卓也都可以用。</p>

<p>Android中的ClassLoader，重点是DexPathList，它里面决定了各个dex的顺序，插件和热修复基本上都是在dex的顺序 上做文章，要么是把新的dex放在最前面，要么是找到原dex，然后替换，这就是核心原理，也是这一套逆向方法的可行之处。</p>

<h2><a href="https://www.oracle.com/technical-resources/articles/java/javareflection.html">反射</a></h2>

<p>也即是运行时修改代码的能力，它是直接去修改JVM中的代码，也即是修改bytecode。纯编译型语言如C/C++是不可能有这种能力的。Java有这种能力是因为JVM的存在，编译只是把源码『翻译』成字节码。</p>

<p><a href="https://www.baeldung.com/java-reflection">Guide to Java Reflection</a></p>

<p>原生东西不好用，还是用三方库来反射<a href="https://github.com/jOOQ/jOOR">jOOR</a>。</p>

<h2><a href="https://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/intro.html">JNI</a></h2>

<p>一些三方的号称可以热修复的工具如exposed和Andfix这些东西，之所以能够实现，是因为JVM本身就开了口子支持JNI，为了能让方法能让JVM找得到，就需要一个method table，而此method table是可以被修改的。
<a href="https://www.baeldung.com/jni">Guide to JNI (Java Native Interface)</a></p>

<p><a href="https://blog.csdn.net/createchance/article/details/53783490">Java Native Interface(JNI)从零开始详细教程</a></p>

<p><a href="https://www.cnblogs.com/DengGao/p/jni.html">java native方法与JNI实现</a></p>

<p><a href="https://www.zhihu.com/question/38509124">JNI本身会降低效率吗？</a></p>

<p>如果JNI接口较多，较复杂，建议用<a href="http://www.swig.org/">SWIG</a>，参见它的<a href="http://www.swig.org/Doc1.3/Java.html#java_overview">说明文档</a>。</p>

<p>Swig有点重了，这个库也相当的好用<a href="https://github.com/spotify/JniHelpers">JniHelpers</a>。</p>

<h2><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/reflection/proxy.html">动态代理</a></h2>

<p>除了官方JDK支持的以接口为基础的动态代理 方式之外，还有其他几种以子类化方式实现动态代理，但它们都是基于ASM的。</p>

<p><a href="https://www.baeldung.com/java-dynamic-proxies">Dynamic Proxies in Java</a></p>

<p><a href="https://www.cnblogs.com/techyc/p/3455950.html">Java的动态代理(dynamic proxy)</a></p>

<p><a href="https://www.cnblogs.com/bryan31/p/15266725.html">动态代理大揭秘，带你彻底弄清楚动态代理！</a></p>

<ul>
<li><a href="https://github.com/cglib/cglib">cglib</a></li>
<li><a href="https://www.javassist.org/">Javassist</a></li>
<li><a href="https://bytebuddy.net/#/">Byte Buddy</a></li>
</ul>


<h2><a href="https://en.wikipedia.org/wiki/Java_code_coverage_tools">代码覆盖率检测</a></h2>

<p><a href="http://cobertura.github.io/cobertura/">Cobertura</a></p>

<p><a href="https://github.com/jacoco/jacoco">JaCoCo</a></p>

<p><a href="https://www.baeldung.com/jacoco">Intro to JaCoCo</a></p>

<h2>Mock</h2>

<p>这是自动化测试以及单元测试必然会用到的利器。</p>

<p><a href="https://site.mockito.org/">Mockito</a></p>

<p><a href="https://easymock.org/">EasyMock</a></p>

<h2><a href="https://asm.ow2.io/">ASM</a></h2>

<p>这是一个神器，专门用来处理字节码的，所有其他的Java底层工具都是基于它来实现的，足可见它的牛逼之处。</p>

<p><a href="https://www.baeldung.com/java-asm">A Guide to Java Bytecode Manipulation with ASM</a></p>

<h2><a href="https://www.tutorialsteacher.com/ioc/dependency-injection">Dependency Injection</a></h2>

<ul>
<li><a href="https://www.vogella.com/tutorials/DependencyInjection/article.html">Using dependency injection in Java</a></li>
<li><a href="https://www.codejava.net/coding/what-is-dependency-injection-with-java-code-example">What is Dependency Injection with Java Code Example</a></li>
<li><a href="https://www.edureka.co/blog/what-is-dependency-injection/">What Is Dependency Injection? – Know How To Implement Dependency Injection</a></li>
</ul>


<h2><a href="https://en.wikipedia.org/wiki/Aspect-oriented_programming">AOP</a></h2>

<ul>
<li><a href="https://mvolkmann.github.io/JavaUserGroup/AOP.pdf">Aspect-Oriented Programming (AOP)in Java</a></li>
<li><a href="https://o7planning.org/10257/java-aspect-oriented-programming-with-aspectj">Java Aspect Oriented Programming with AspectJ (AOP)</a></li>
<li><a href="https://www.javatpoint.com/spring-aop-example">Spring AOP Example</a></li>
<li><a href="https://www.eclipse.org/aspectj/">AspectJ</a></li>
<li><a href="https://github.com/eclipse/org.aspectj">Aspectj source</a></li>
<li><a href="https://www.baeldung.com/aspectj">Intro to AspectJ</a></li>
</ul>


<h2>研究字节码的意义</h2>

<p>所有这些基于字节码的工具和技术存在的意义，是帮助我们如何更好的写出Java代码，而并不是纯粹去做一些逆向工程的事情。比如，效率工具，测试工具，调试工具和动态生成代码的技术等等。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://zhuanlan.zhihu.com/p/94498015">史上最通俗易懂的ASM教程</a></li>
<li><a href="https://www.jianshu.com/p/26e99d39b3fb">Java字节码处理框架ASM设计思想解析</a></li>
<li><a href="https://blog.51cto.com/lsieun/2924583">Java ASM系列一：Core API</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
