<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[稀有猿诉]]></title>
  <link href="http://toughcoder.net/atom.xml" rel="self"/>
  <link href="http://toughcoder.net/"/>
  <updated>2018-07-31T20:33:56+08:00</updated>
  <id>http://toughcoder.net/</id>
  <author>
    <name><![CDATA[Alex Hilton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[年轻人的第一篇OpenGL ES 2.0教程]]></title>
    <link href="http://toughcoder.net/blog/2018/07/31/introduction-to-opengl-es-2-dot-0/"/>
    <updated>2018-07-31T22:36:29+08:00</updated>
    <id>http://toughcoder.net/blog/2018/07/31/introduction-to-opengl-es-2-dot-0</id>
    <content type="html"><![CDATA[<h2>Before we go</h2>

<p>在高性能graphics领域，特别是3D graphics领域，<a href="https://www.khronos.org/opengl/">OpenGL</a>无疑是目前的最佳选择，虽然，现在有很多集成度高的三方的库或者SDK，但是学习一下OpenGL仍然是非常有好处的，你可以了解基本的computer graphics的概念，这会让你在使用它们的时候更加的从容。</p>

<p>OpenGL是一个跨平台的高性能3D渲染API，<a href="https://www.khronos.org/opengles/">OpenGL ES</a>是它的嵌入式平台版本。<br/></p>

<p><a href="http://toughcoder.net/blog/2018/07/31/introduction-to-opengl-es-2-dot-0/"><img src="https://wx1.sinaimg.cn/mw690/870ad0baly1fttb78m9ytj21e00dwq3w.jpg"></a></p>

<p>我们即将踏上学习OpenGL ES 2.0之旅，主要针对于Android平台，会有一系列文章来分享学习OpenGL ES的总结。<br/></p>

<p>主要编程语言将使用Kotlin，对于Kotlin还不熟悉的同学可以先看前面的<a href="http://toughcoder.net/blog/2018/05/17/introduction-to-kotlin-programming-language/">介绍</a>和<a href="http://toughcoder.net/blog/2018/06/09/kotlin-exercise-programmer-calendar/">实例</a>来快速的熟悉一下。</p>

<!-- more -->


<p>Android上面的OpenGL ES一共有三个版本，1.0，2.0以及现在的3.x(3.1, 3.2)，其中1.0是旧式的API，与桌面版本的OpenGL非常接近，但是却不太好用。从2.0开始，API有较大变化，具体的渲染相关使用专门的着色语言来表达
矩阵的处理放到一个单独的类Matrix中，这样解耦后，学习起来和理解起来相对容易，API也不会依赖于具体的对象，直接使用static式的GLES20或者GLES30就好了。3.0是向后兼容的，它完全兼容2.0。所以，从2.0开始学习，是一个
比较好的选择，而且2.0被Android 2.3以后的SDK支持，应该说目前所有的设备API上面都是支持OpenGL ES 2.0的（当然，具体的支持情况还看硬件GPU）。<br/></p>

<p>为了方便，在此系列文章中，OpenGL，或者OpenGL ES或者GL，都是指OpenGL ES 2.0。<br/>
关于平台，虽然我们是基于Android平台来学习，但是OpenGL是跨平台的，所有平台的GL的API（OpenGL, ES，或者WebGL，或者水果平台）长的都类似，方法名字，以及参数都差不多。虽然不可以直接使用，但是当作参考都没有问题。</p>

<h2>开发环境搭建</h2>

<p>首先是Android app的开发环境搭建，这个不多说了，大家自行Google。SDK版本最好高一点，至少要是5.0 (API 20)以上吧。<br/>
其次是Kotlin语言的支持，如是是Android Studio 3.0以上的版本，自带支持，不用折腾。否则可以参考<a href="https://kotlinlang.org/">官方网站的指导</a>。<br/>
涉及到SDK相关的东西就是Activity，我们是有页面显示的，所以必须要有一个Activity，这个都懂得。主要是widget就是<a href="https://developer.android.com/reference/android/opengl/GLSurfaceView">android.oepngl.GLSurfaceView</a>，
以及<a href="https://developer.android.com/reference/android/opengl/GLSurfaceView.Renderer">android.opengl.GLSurfaceView.Renderer</a>。GLSurfaceView是Android平台专门用于OpenGL绘制的组件，我们只需要创建一个
实例，然后做一些基本的配置就好了，每个例子的配置都是很类似。重点就是要实现一个GLSurfaceView.Renderer，这个是OpenGL开发的重点。</p>

<h3>Step by step guide</h3>

<p>首先，新建一个Android app项目，注意带上Kotlin支持，默认是钩上的。名字随意，比如叫EffectiveGL。<br/>
然后，在项目新建一个空白Activity，不用钩选backward compat和创建layout，因为我们只用一个GLSurfaceView，用不着layout文件，另外，我们是用Kotlin，Kotlin是用Anko来用代码写布局。<br/>
再有，在Activity里面，创建一个GLSurfaceView对象，然后当作Activity的布局。<br/>
最后，实现一个Renderer接口，塞给GLSurfaceView，并对其做简单的配置。<br/>
最终，一个准备好开发OpenGL的基本代码是这样子的，这些基础的准备工作，后面的示例中会略掉。<br/></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">HelloPoints</span> <span class="p">:</span> <span class="n">Activity</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="n">lateinit</span> <span class="k">var</span> <span class="py">glSurfaceView</span><span class="p">:</span> <span class="n">GLSurfaceView</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">super</span><span class="p">.</span><span class="n">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
</span><span class='line'>        <span class="n">title</span> <span class="p">=</span> <span class="s">&quot;Play with Points&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">glSurfaceView</span> <span class="p">=</span> <span class="n">GLSurfaceView</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span><span class='line'>        <span class="n">setContentView</span><span class="p">(</span><span class="n">glSurfaceView</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">glSurfaceView</span><span class="p">.</span><span class="n">setEGLContextClientVersion</span><span class="p">(</span><span class="m">2</span><span class="p">)</span>
</span><span class='line'>        <span class="n">glSurfaceView</span><span class="p">.</span><span class="n">setRenderer</span><span class="p">(</span><span class="n">PointsRender</span><span class="p">)</span>
</span><span class='line'>        <span class="n">glSurfaceView</span><span class="p">.</span><span class="n">renderMode</span> <span class="p">=</span> <span class="n">GLSurfaceView</span><span class="p">.</span><span class="n">RENDERMODE_CONTINUOUSLY</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onResume</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">super</span><span class="p">.</span><span class="n">onResume</span><span class="p">()</span>
</span><span class='line'>        <span class="n">glSurfaceView</span><span class="p">.</span><span class="n">onResume</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onPause</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">super</span><span class="p">.</span><span class="n">onPause</span><span class="p">()</span>
</span><span class='line'>        <span class="n">glSurfaceView</span><span class="p">.</span><span class="n">onPause</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">companion</span> <span class="k">object</span> <span class="nc">PointsRender</span> <span class="p">:</span> <span class="n">GLSurfaceView</span><span class="p">.</span><span class="n">Renderer</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">override</span> <span class="k">fun</span> <span class="nf">onDrawFrame</span><span class="p">(</span><span class="n">p0</span><span class="p">:</span> <span class="n">GL10</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">override</span> <span class="k">fun</span> <span class="nf">onSurfaceChanged</span><span class="p">(</span><span class="n">p0</span><span class="p">:</span> <span class="n">GL10</span><span class="p">?,</span> <span class="n">p1</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">p2</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">override</span> <span class="k">fun</span> <span class="nf">onSurfaceCreated</span><span class="p">(</span><span class="n">p0</span><span class="p">:</span> <span class="n">GL10</span><span class="p">?,</span> <span class="n">p1</span><span class="p">:</span> <span class="n">EGLConfig</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>基础概念理解</h2>

<p>有一些基础中的基础的概念需要理解一下，才能开始码代码。刚接触这么多概念，可能还没有理解它们，没有关系，先建立一个大概印象，随着学习的深入，就慢慢理解它们了。</p>

<h3>GL context</h3>

<p>GL API的调用，虽然都是static形式的，没有限制，在哪里都能直接call，但是实际上它是有一个上下文环境的，叫GL context（目前阶段先这么叫着吧，不是太严谨哈）。这有点听不懂，用人话说，
就是所有的GL API的调用都要在GLSurfaceView.Renderer的三个方法里面来call，就是方法的调用栈必须从这几个方法开始。在其他地方call是没有效果的：<br/>
onSurfaceCreated<br/>
onSurfaceChanged<br/>
onDrawFrame</p>

<h3>GL的坐标系</h3>

<p>OpenGL的坐标系是所谓的右手坐标系。<br/>
<img src="https://wx1.sinaimg.cn/mw690/870ad0baly1fttb78m52qj20m80cimy0.jpg" alt="Right hand" /><br/>
首先它是三维的笛卡尔坐标系：原点在屏幕正中，x轴从屏幕左向右，最左是-1，最右是1；y轴从屏幕下向上，最下是-1，最上是1；z轴从屏幕里面向外，最里面是-1，最外面是1。
<br/>
<img src="https://wx2.sinaimg.cn/mw690/870ad0baly1fttb78m40wj20dw07oaam.jpg" alt="Right hand 2" /></p>

<h3>shader</h3>

<p>GL ES 2.0与1.0版本最大的区别在于，把渲染相关的操作用一个专门的叫作着色语言的程序来表达，全名叫作<a href="https://de.wikipedia.org/wiki/OpenGL_ES_Shading_Language">OpenGL ES Shading language</a>，它是一个编程语言，与C语言非常类似，能够直接操作矩阵和向量，运行在GPU之上
专门用于图形渲染。它又分为两种，一个叫做顶点着色器（vertex shader），另一个叫做片元着色器（fragment shader）。前者用来指定几何形状的顶点；后者用于指定每个顶点的着色。
每个GL程序必须要有一个vertex shader和一个fragment shader，且它们是相互对应的。（相互对应，意思是vertex shader必须要有一个fragment shader，反之亦然，但并不一定是一一对应）。当然，也是可以复用的，
比如同一个vertex shader，可能会多个fragment shader来表达不同的着色方案。</p>

<h3>坐标值和颜色值</h3>

<p>坐标正常的取值范围都是-1到1，且是float类型。
颜色值是0到1，也是float类型，0是空（无的意思，比如黑色，或者全透明），1是有（全的意思，比如白色，或者不透明），有些API是使用0～255，这时就需要转换一下。
其实呢，写成超过此范围的值也是可以的，比如坐标传2，或者颜色写成5，OpenGL会处理成为它的合理的取值之内，用clamp的方式，超过的会被砍掉，如传5，相当于传1。</p>

<p>好了，准备工作差不多了，我们来撸代码吧。</p>

<h2>年轻人的第一个OpenGL程序</h2>

<p>我们的目标是画一个红色的点，就是这个样子的：
<img src="https://wx1.sinaimg.cn/mw690/870ad0baly1fttb78m3yhj20u01o0t9k.jpg" alt="Final result" />
<br/></p>

<p><strong>注意</strong>: 鉴于方便理解，我们暂时只做一些2D的渲染，也不调整view port，因为这会涉及比较复杂的Model View Projection矩阵的设置。</p>

<p>最终的代码就是这个样子的，重点看一下Renderer的实现，后面详细讲解：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">const</span> <span class="k">val</span> <span class="py">TAG</span> <span class="p">=</span> <span class="s">&quot;HelloPoints&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">HelloPoints</span> <span class="p">:</span> <span class="n">Activity</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="n">lateinit</span> <span class="k">var</span> <span class="py">glSurfaceView</span><span class="p">:</span> <span class="n">GLSurfaceView</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">super</span><span class="p">.</span><span class="n">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
</span><span class='line'>        <span class="n">title</span> <span class="p">=</span> <span class="s">&quot;Play with Points&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">glSurfaceView</span> <span class="p">=</span> <span class="n">GLSurfaceView</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span><span class='line'>        <span class="n">setContentView</span><span class="p">(</span><span class="n">glSurfaceView</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">glSurfaceView</span><span class="p">.</span><span class="n">setEGLContextClientVersion</span><span class="p">(</span><span class="m">2</span><span class="p">)</span>
</span><span class='line'>        <span class="n">glSurfaceView</span><span class="p">.</span><span class="n">setRenderer</span><span class="p">(</span><span class="n">PointsRender</span><span class="p">)</span>
</span><span class='line'>        <span class="n">glSurfaceView</span><span class="p">.</span><span class="n">renderMode</span> <span class="p">=</span> <span class="n">GLSurfaceView</span><span class="p">.</span><span class="n">RENDERMODE_CONTINUOUSLY</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onResume</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">super</span><span class="p">.</span><span class="n">onResume</span><span class="p">()</span>
</span><span class='line'>        <span class="n">glSurfaceView</span><span class="p">.</span><span class="n">onResume</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onPause</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">super</span><span class="p">.</span><span class="n">onPause</span><span class="p">()</span>
</span><span class='line'>        <span class="n">glSurfaceView</span><span class="p">.</span><span class="n">onPause</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">companion</span> <span class="k">object</span> <span class="nc">PointsRender</span> <span class="p">:</span> <span class="n">GLSurfaceView</span><span class="p">.</span><span class="n">Renderer</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">private</span> <span class="n">const</span> <span class="k">val</span> <span class="py">VERTEX_SHADER</span> <span class="p">=</span>
</span><span class='line'>                <span class="s">&quot;void main() {\n&quot;</span> <span class="p">+</span>
</span><span class='line'>                        <span class="s">&quot;gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\n&quot;</span> <span class="p">+</span>
</span><span class='line'>                        <span class="s">&quot;gl_PointSize = 20.0;\n&quot;</span> <span class="p">+</span>
</span><span class='line'>                        <span class="s">&quot;}\n&quot;</span>
</span><span class='line'>        <span class="k">private</span> <span class="n">const</span> <span class="k">val</span> <span class="py">FRAGMENT_SHADER</span> <span class="p">=</span>
</span><span class='line'>                <span class="s">&quot;void main() {\n&quot;</span> <span class="p">+</span>
</span><span class='line'>                        <span class="s">&quot;gl_FragColor = vec4(1., 0., 0.0, 1.0);\n&quot;</span> <span class="p">+</span>
</span><span class='line'>                        <span class="s">&quot;}\n&quot;</span>
</span><span class='line'>        <span class="k">private</span> <span class="k">var</span> <span class="py">mGLProgram</span><span class="p">:</span> <span class="n">Int</span> <span class="p">=</span> <span class="p">-</span><span class="m">1</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">override</span> <span class="k">fun</span> <span class="nf">onDrawFrame</span><span class="p">(</span><span class="n">p0</span><span class="p">:</span> <span class="n">GL10</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">GLES20</span><span class="p">.</span><span class="n">glClear</span><span class="p">(</span><span class="n">GLES20</span><span class="p">.</span><span class="n">GL_COLOR_BUFFER_BIT</span><span class="p">)</span>
</span><span class='line'>            <span class="n">GLES20</span><span class="p">.</span><span class="n">glUseProgram</span><span class="p">(</span><span class="n">mGLProgram</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">GLES20</span><span class="p">.</span><span class="n">glDrawArrays</span><span class="p">(</span><span class="n">GLES20</span><span class="p">.</span><span class="n">GL_POINTS</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">override</span> <span class="k">fun</span> <span class="nf">onSurfaceChanged</span><span class="p">(</span><span class="n">p0</span><span class="p">:</span> <span class="n">GL10</span><span class="p">?,</span> <span class="n">p1</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">p2</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">GLES20</span><span class="p">.</span><span class="n">glViewport</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="n">p1</span><span class="p">,</span> <span class="n">p2</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">override</span> <span class="k">fun</span> <span class="nf">onSurfaceCreated</span><span class="p">(</span><span class="n">p0</span><span class="p">:</span> <span class="n">GL10</span><span class="p">?,</span> <span class="n">p1</span><span class="p">:</span> <span class="n">EGLConfig</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">GLES20</span><span class="p">.</span><span class="n">glClearColor</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="m">0f</span><span class="p">,</span> <span class="m">0f</span><span class="p">,</span> <span class="m">1f</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">val</span> <span class="py">vsh</span> <span class="p">=</span> <span class="n">GLES20</span><span class="p">.</span><span class="n">glCreateShader</span><span class="p">(</span><span class="n">GLES20</span><span class="p">.</span><span class="n">GL_VERTEX_SHADER</span><span class="p">)</span>
</span><span class='line'>            <span class="n">GLES20</span><span class="p">.</span><span class="n">glShaderSource</span><span class="p">(</span><span class="n">vsh</span><span class="p">,</span> <span class="n">VERTEX_SHADER</span><span class="p">)</span>
</span><span class='line'>            <span class="n">GLES20</span><span class="p">.</span><span class="n">glCompileShader</span><span class="p">(</span><span class="n">vsh</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">val</span> <span class="py">fsh</span> <span class="p">=</span> <span class="n">GLES20</span><span class="p">.</span><span class="n">glCreateShader</span><span class="p">(</span><span class="n">GLES20</span><span class="p">.</span><span class="n">GL_FRAGMENT_SHADER</span><span class="p">)</span>
</span><span class='line'>            <span class="n">GLES20</span><span class="p">.</span><span class="n">glShaderSource</span><span class="p">(</span><span class="n">fsh</span><span class="p">,</span> <span class="n">FRAGMENT_SHADER</span><span class="p">)</span>
</span><span class='line'>            <span class="n">GLES20</span><span class="p">.</span><span class="n">glCompileShader</span><span class="p">(</span><span class="n">fsh</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">mGLProgram</span> <span class="p">=</span> <span class="n">GLES20</span><span class="p">.</span><span class="n">glCreateProgram</span><span class="p">()</span>
</span><span class='line'>            <span class="n">GLES20</span><span class="p">.</span><span class="n">glAttachShader</span><span class="p">(</span><span class="n">mGLProgram</span><span class="p">,</span> <span class="n">vsh</span><span class="p">)</span>
</span><span class='line'>            <span class="n">GLES20</span><span class="p">.</span><span class="n">glAttachShader</span><span class="p">(</span><span class="n">mGLProgram</span><span class="p">,</span> <span class="n">fsh</span><span class="p">)</span>
</span><span class='line'>            <span class="n">GLES20</span><span class="p">.</span><span class="n">glLinkProgram</span><span class="p">(</span><span class="n">mGLProgram</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">GLES20</span><span class="p">.</span><span class="n">glValidateProgram</span><span class="p">(</span><span class="n">mGLProgram</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">val</span> <span class="py">status</span> <span class="p">=</span> <span class="n">IntArray</span><span class="p">(</span><span class="m">1</span><span class="p">)</span>
</span><span class='line'>            <span class="n">GLES20</span><span class="p">.</span><span class="n">glGetProgramiv</span><span class="p">(</span><span class="n">mGLProgram</span><span class="p">,</span> <span class="n">GLES20</span><span class="p">.</span><span class="n">GL_VALIDATE_STATUS</span><span class="p">,</span> <span class="n">status</span><span class="p">,</span> <span class="m">0</span><span class="p">)</span>
</span><span class='line'>            <span class="n">Log</span><span class="p">.</span><span class="n">d</span><span class="p">(</span><span class="n">TAG</span><span class="p">,</span> <span class="s">&quot;validate shader program: &quot;</span> <span class="p">+</span> <span class="n">GLES20</span><span class="p">.</span><span class="n">glGetProgramInfoLog</span><span class="p">(</span><span class="n">mGLProgram</span><span class="p">))</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>示例代码讲解</h2>

<h3>基础设施</h3>

<p>先来看一下Activity的onCreate/onResume和onPause这三个方法。先是在onCreate里面创建一个GLSurfaceView实例，设置为content view，因为我们要使用OpenGL ES 2.0，所以要setEGLContextClientVersion(2)。然后，再
设置一个Renderer实例，渲染模式(render mode)分为两种，一个是GLSurfaceView主动刷新(continuously)，不停的回调Renderer的onDrawFrame，另外一种叫做被动刷新（when dirty），就是当请求刷新时才调一次onDrawFrame。<br/>
这里我们用continuously的方式。
<br/>
至于onResume/onPause，API要求是要调用一下GLSurfaceView的onResume和onPause，照做就好，对于我们的示例来说，其实调与不调看不出区别。这只是影响离开Activity页面时的性能，我们学习初期，可以不予关注。</p>

<h3>Renderer之onSurfaceCreated</h3>

<p>这个是最先被回调到的方法，告诉你系统层面，已经ready了，你可以开始做你的事情了。一般我们会在此方法里面做一些初始化工作，比如编译链接shader程序，初始化buffer等。我们一行一行的来分析：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">GLES20</span><span class="p">.</span><span class="n">glClearColor</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="m">0f</span><span class="p">,</span> <span class="m">0f</span><span class="p">,</span> <span class="m">1f</span><span class="p">)</span> <span class="c1">// 参数顺序 r, g, b, a</span>
</span></code></pre></td></tr></table></div></figure>


<p>这句是告诉OpenGL，给我把背景，或者叫作画布，画成黑色，不透明。比较绕人的说法是用参数指定的(r, g, b, a)这个颜色来初始化颜色缓冲区（color buffer）。目前就理解成为画面背景色就可以了。</p>

<p>接下来的这一坨是编译和链接shader程序：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">vsh</span> <span class="p">=</span> <span class="n">GLES20</span><span class="p">.</span><span class="n">glCreateShader</span><span class="p">(</span><span class="n">GLES20</span><span class="p">.</span><span class="n">GL_VERTEX_SHADER</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>创建一个vertex shader程序，返回的是它的句柄，此返回值会用在后续操作的参数，所以，要用变量记录下来。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">GLES20</span><span class="p">.</span><span class="n">glShaderSource</span><span class="p">(</span><span class="n">vsh</span><span class="p">,</span> <span class="n">VERTEX_SHADER</span><span class="p">)</span> <span class="c1">// 告诉OpenGL，这一坨字串里面是vertex shader的源码。</span>
</span><span class='line'><span class="n">GLES20</span><span class="p">.</span><span class="n">glCompileShader</span><span class="p">(</span><span class="n">vsh</span><span class="p">)</span> <span class="c1">// 编译vertex shader</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来的三行，是编译fragment shader，跟vertex shader是一样的。
然后是创建shader program并把shader链到上头去。同样的，先创建一个shader program句柄，后面要用，所以要记录一下，因为要在此方法外使用program句柄，所以要用全局变量来记录。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">mGLProgram</span> <span class="p">=</span> <span class="n">GLES20</span><span class="p">.</span><span class="n">glCreateProgram</span><span class="p">()</span> <span class="c1">// 创建shader program句柄</span>
</span><span class='line'><span class="n">GLES20</span><span class="p">.</span><span class="n">glAttachShader</span><span class="p">(</span><span class="n">mGLProgram</span><span class="p">,</span> <span class="n">vsh</span><span class="p">)</span> <span class="c1">// 把vertex shader添加到program</span>
</span><span class='line'><span class="n">GLES20</span><span class="p">.</span><span class="n">glAttachShader</span><span class="p">(</span><span class="n">mGLProgram</span><span class="p">,</span> <span class="n">fsh</span><span class="p">)</span> <span class="c1">// 把fragment shader添加到program</span>
</span><span class='line'><span class="n">GLES20</span><span class="p">.</span><span class="n">glLinkProgram</span><span class="p">(</span><span class="n">mGLProgram</span><span class="p">)</span> <span class="c1">// 做链接，可以理解为把两种shader进行融合，做好投入使用的最后准备工作</span>
</span></code></pre></td></tr></table></div></figure>


<p>到此，其实shader program的准备工作已经做完了，但是如果shader编译或者链接过程出错了怎么办呢？能不能提早发现呢？当然，有办法检查一下，就是用接下来的这几句：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">GLES20</span><span class="p">.</span><span class="n">glValidateProgram</span><span class="p">(</span><span class="n">mGLProgram</span><span class="p">)</span> <span class="c1">// 让OpenGL来验证一下我们的shader program，并获取验证的状态</span>
</span><span class='line'><span class="k">val</span> <span class="py">status</span> <span class="p">=</span> <span class="n">IntArray</span><span class="p">(</span><span class="m">1</span><span class="p">)</span>
</span><span class='line'><span class="n">GLES20</span><span class="p">.</span><span class="n">glGetProgramiv</span><span class="p">(</span><span class="n">mGLProgram</span><span class="p">,</span> <span class="n">GLES20</span><span class="p">.</span><span class="n">GL_VALIDATE_STATUS</span><span class="p">,</span> <span class="n">status</span><span class="p">,</span> <span class="m">0</span><span class="p">)</span> <span class="c1">// 获取验证的状态</span>
</span><span class='line'><span class="n">Log</span><span class="p">.</span><span class="n">d</span><span class="p">(</span><span class="n">TAG</span><span class="p">,</span> <span class="s">&quot;validate shader program: &quot;</span> <span class="p">+</span> <span class="n">GLES20</span><span class="p">.</span><span class="n">glGetProgramInfoLog</span><span class="p">(</span><span class="n">mGLProgram</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果有语法错误，编译错误，或者状态出错，这一步是能够检查出来的。如果一切正常，则取出来的status[0]为0。</p>

<h3>Renderer之onSurfaceChanged</h3>

<p>此回调，会在surface发生改变时，通常是size发生变化。这里我们改变一下视角。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">GLES20</span><span class="p">.</span><span class="n">glViewport</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="n">p1</span><span class="p">,</span> <span class="n">p2</span><span class="p">)</span> <span class="c1">// 参数是left, top, width, height</span>
</span></code></pre></td></tr></table></div></figure>


<p>就是要指定OpenGL的可视区域(view port)，（0, 0）是左上角，然后是width和height。
我们目前只学习2D绘制，所以，先不管三维视角的处理。</p>

<h3>Renderer之onDrawFrame</h3>

<p>这个是最重要的方法，没有之一。前面两个，只会在surface created时调一次。而此方法是用来绘制每帧的，所以每次刷新都会被调一次，所有的绘制都发生在这里。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">GLES20</span><span class="p">.</span><span class="n">glClear</span><span class="p">(</span><span class="n">GLES20</span><span class="p">.</span><span class="n">GL_COLOR_BUFFER_BIT</span><span class="p">)</span> <span class="c1">// 清除颜色缓冲区，因为我们要开始新一帧的绘制了，所以先清理，以免有脏数据。</span>
</span><span class='line'><span class="n">GLES20</span><span class="p">.</span><span class="n">glUseProgram</span><span class="p">(</span><span class="n">mGLProgram</span><span class="p">)</span> <span class="c1">// 告诉OpenGL，使用我们在onSurfaceCreated里面准备好了的shader program来渲染</span>
</span><span class='line'><span class="n">GLES20</span><span class="p">.</span><span class="n">glDrawArrays</span><span class="p">(</span><span class="n">GLES20</span><span class="p">.</span><span class="n">GL_POINTS</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span> <span class="c1">// 开始渲染，发送渲染点的指令， 第二个参数是offset，第三个参数是点的个数。目前只有一个点，所以是1。</span>
</span></code></pre></td></tr></table></div></figure>


<h3>vertex shader</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">private</span> <span class="n">const</span> <span class="k">val</span> <span class="py">VERTEX_SHADER</span> <span class="p">=</span>
</span><span class='line'>                <span class="s">&quot;void main() {\n&quot;</span> <span class="p">+</span>
</span><span class='line'>                        <span class="s">&quot;gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\n&quot;</span> <span class="p">+</span>
</span><span class='line'>                        <span class="s">&quot;gl_PointSize = 20.0;\n&quot;</span> <span class="p">+</span>
</span><span class='line'>                        <span class="s">&quot;}\n&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>shader语言跟C语言很像，它有一个主函数，也叫void main(){}。<br/>
gl_Position是一个内置变量，用于指定顶点，它是一个点，三维空间的点，所以用一个四维向量来赋值。vec4是四维向量的类型，vec4()是它的构造方法。等等，三维空间，不是（x, y, z）三个吗？咋用vec4呢？
四维是叫做<a href="https://en.wikipedia.org/wiki/Homogeneous_coordinates">齐次坐标</a>，它的几何意义仍是三维，先了解这么多，记得对于2D的话，第四位永远传1.0就可以了。这里，是指定原点(0, 0, 0)作为顶点，就是说想在原点位置画一个点。gl_PointSize是另外一个内置变量，用于指定点的大小。<br/>
这个shader就是想在原点画一个尺寸为20的点。</p>

<h3>fragment shader</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">private</span> <span class="n">const</span> <span class="k">val</span> <span class="py">FRAGMENT_SHADER</span> <span class="p">=</span>
</span><span class='line'>                <span class="s">&quot;void main() {\n&quot;</span> <span class="p">+</span>
</span><span class='line'>                        <span class="s">&quot;gl_FragColor = vec4(1., 0., 0.0, 1.0);\n&quot;</span> <span class="p">+</span>
</span><span class='line'>                        <span class="s">&quot;}\n&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>gl_FragColor是fragment shader的内置变量，用于指定当前顶点的颜色，四个分量（r, g, b, a）。这里是想指定为红色，不透明。</p>

<h2>Fun time</h2>

<p>更改一些参数，看看会发生什么:<br/></p>

<ol>
<li>改变onSurfaceCreated中的glClearColor的颜色值</li>
<li>改变gl_Position</li>
<li>改变gl_PointSize</li>
<li>改变gl_FragColor</li>
</ol>


<h2>One more thing</h2>

<p>此系列教程会共存在同一个Android app项目里面，所以我们会随着代码的增加而进行一系列的重构，但是这与我们的主题OpenGL无关，如果是单纯学习OpenGL，可以略过此节。</p>

<p>因为，每个教程会讲解不同的点，对Activity可能有不同的需求，所以，一个教程对应着一个Activity，这样就需要一个列表来作为路由目录页面：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">HomeActivity</span> <span class="p">:</span> <span class="n">Activity</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">super</span><span class="p">.</span><span class="n">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
</span><span class='line'>        <span class="n">title</span> <span class="p">=</span> <span class="s">&quot;Learn OpenGL ES Effectively&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">verticalLayout</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">textView</span><span class="p">(</span><span class="s">&quot;Welcome to the world of OpenGL ES&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">gravity</span> <span class="p">=</span> <span class="n">Gravity</span><span class="p">.</span><span class="n">CENTER</span>
</span><span class='line'>            <span class="p">}.</span><span class="n">onClick</span> <span class="p">{</span> <span class="n">startActivity</span><span class="p">&lt;</span><span class="n">HelloPoints</span><span class="p">&gt;()</span> <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参考资料</h2>

<ul>
<li><a href="https://sites.google.com/site/webglbook/">《WebGL Programming Guide》</a> <br/>
WebGL跟OpenGL ES 2.0相差无几，可以直接参考。这本书最大好处是讲解比较清晰，层次递进，代码完整，非常适合初学者上手。</li>
<li><a href="http://opengles-book.com/es2/index.html">《OpenGL® ES 2.0 Programming Guide》</a> <br/>
这本书比较啰嗦和枯燥，它更接近于规范，非常详尽严谨的讲述，但是讲解过少，示例也少。所以，它更适合于有一定基础，想要更深入的全面的理解某一概念时看，不适合入门。<br/>
所以，这两本书加起来看效果最佳，先入门，理解基本概念，然后再通过后者全面理解，巩固加强。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[金州王朝已经建立，老詹可以就此退役]]></title>
    <link href="http://toughcoder.net/blog/2018/06/11/golden-state-worriors-rule/"/>
    <updated>2018-06-11T22:42:00+08:00</updated>
    <id>http://toughcoder.net/blog/2018/06/11/golden-state-worriors-rule</id>
    <content type="html"><![CDATA[<p>2017-18NBA赛季总决赛金州勇士气势如虹连胜四场横扫老詹带领的骑士，成功卫冕，同时也标志着一个赛季结束了。</p>

<p><a href="http://toughcoder.net/blog/2018/06/11/golden-state-worriors-rule/"><img src="http://pic-bucket.nosdn.127.net/photo/0005/2018-06-09/DJS3KU0Q4TM10005NOS.jpg"></a></p>

<!-- more -->


<p><img src="http://puep.qpic.cn/coral/Q3auHgzwzM4fgQ41VTF2rNfzNxVA5l6bgzBOnVGAhnIhHVhKDIXvlg/0/" alt="cahp2" /></p>

<h3>王朝的根基稳</h3>

<p>但是我们却能看到金州王朝已经悄然建立。跟前几年，特别是15-16赛季，勇士输掉的那一年相比，今年的勇士显示出了强大的实力，很多人都说由于杜兰特的加入，但是如果仅是两年前的队伍即使加一个阿杜，也不见得能赢下今年的西决和总决赛，还有最关键的是，现在的库里，汤神，格林和阿杜都已升级了：</p>

<ol>
<li>库里补齐了对抗</li>
</ol>


<p>三分还是那样的日天，但最明显的变化是突破内线能力大大增强，能把球上进，以及防守不再是漏洞。以前，特别是15-16赛季，每当三分不灵光的时候，突破很费劲，即使杀进去了，不是被帽就是没能上进。但是今年好很多，在西决的时候，以及总决赛可以看到突破进去以后球很少丢，都能得分。</p>

<p><img src="http://pic-bucket.nosdn.127.net/photo/0005/2018-06-09/DJRPKB2O4TM10005NOS.jpg" alt="Steph" />
2. 汤神还是那个汤神</p>

<p>绝境我佛显慈悲，每逢绝境汤神必发威。汤神无球像机器一样准。另外，汤神也越来越持球攻了。</p>

<p><img src="http://pic-bucket.nosdn.127.net/photo/0005/2018-06-04/DJEQ42V84TM10005NOS.jpg" alt="Klay" /></p>

<ol>
<li>格林更加成熟</li>
</ol>


<p>防守还是那样凶悍，但是更加成熟了，脾气能控制一些了。
<img src="http://pic-bucket.nosdn.127.net/photo/0005/2018-06-07/DJMJAUD64TM10005NOS.jpg" alt="draymon" /></p>

<ol>
<li>阿杜更擅长要位硬扛了</li>
</ol>


<p>外线还是保持着变态的命中率，突破也很犀利，但是杜兰特最大的变化是，每当球队遇到困难，外线手感不好时，就会到三秒区外维要位，然后背身打，像传统的大前锋那样进攻，由于身高优势，脚步灵活，投篮技术好，所以成功率特别高，单打基本通吃，夹击时可以选择分球。与传统大前锋：邓肯，加内特，诺维茨基等很像。这个是很重要的，因为你外线手感不可能一直好，突破由于防守也不可能总有机会，当你一切的惯用得分手段都没有效果时，内线强打往往是得分的手段。所以，成功的球队，必须要有一个像邓肯和KG那样，能在内线要位强打的球员。而目前KD做的比以前好太多了。而像火箭，为什么G7会输，三分27中0,问题不大，问题在于，你三分手感不好的时候没有一个稳定的得分点了，假如有邓肯，加内特，能内线要位背身强打的球员在，就可以让他人来打，起码能保证分差不被拉大。
<img src="http://pic-bucket.nosdn.127.net/photo/0005/2018-06-09/DJRN39IF4TM10005NOS.jpg" alt="KD" /></p>

<h3>健康是最大的敌人</h3>

<p>四大天王，都处在职业的巅峰时期，而且他们化学反应很好，格林擅长防守和助攻，KD和汤神可以无球，所以，他们不会有球权的冲突。并不是所有的球星组合最后都能成功，就好比今年的雷霆，安东尼，乔治以及威少，哪个不是全明星级别的，甚至更高，但是常规赛战线不佳 ，首轮更是被浓眉哥横扫。球星在一起，一个必要条件是每个人必须要无私，要出让球权，要有擅长防守的，以及擅长无球，还要有内线强打的。所以，你看当年凯尔特人三巨头KG，皮皮和雷阿伦，组合一年就能夺冠。勇士目前来看至少球星之间可以完好共存，就差钱了，但这不是大问题，以勇士管理层的水平，不会轻易让王朝结束，通过合理运作，解决好薪资帽，至少未来三年内，勇士都是总冠军的强有力争夺者，最重要的是球员和教练都要保持健康。</p>

<p><img src="http://pic-bucket.nosdn.127.net/photo/0005/2018-06-09/DJRVEP224TM10005NOS.jpg" alt="big4" /></p>

<p>怀念一下我凯三老，他们是输给了时间，如果可以年轻三岁，他们还能再拿两冠，三老老去，也毁了隆指导和帕金斯。</p>

<p><img src="http://i1.hoopchina.com.cn/u/1107/05/091/4157091/960f1526.jpg" alt="big3" /></p>

<h3>老詹靠运气，但也不易</h3>

<p>再说说骑士和老詹，今年的骑士也是非常的不顺当，常规赛战绩平平，经过多次交易换人，最终以东部第四进入季后赛，第一轮很惊险与步行者大战七场，最终凭着老詹的最后一口气成功晋级。然后就遇到了不争气的猛龙，常规赛东部冠军啊，哪怕你赢个一场两场的也行啊，最正常的结局应该是猛龙4：2干掉骑士，但是，人有时候要信命，德罗赞和洛瑞可能没去拜佛，竟然被老詹一口气横扫回家了，四场打的一场比一场差，最后气势都没有了就回家钓鱼去了。所以，还是像上面讲的，一个没有内线强打的球队，光靠所谓后场双枪是难以走的远的，猛龙以及西步的开拓者都是此类，另外伊巴卡也是个软蛋，愧对四少的称号。东决倒是精彩，残阵绿杉拖了七场，当然，绿杉军不可能赢的，因为当球队遇到困难是需要球星来救场的，而绿凯的两个球星都在场下只能为兄弟们加油，所以今年老詹的运气相当好，一路到总决赛，但也不易，老詹也是脱了一层皮，场场四十多分钟，倒也刷了一堆好数据，得了老汉的意。
<img src="http://pic-bucket.nosdn.127.net/photo/0005/2018-06-09/DJRT1QG04TM10005NOS.jpg" alt="lbj" />
虽然，不是特别喜欢勇士，但更重要的是喜欢老詹，靠着牛的身体，推土机式的打法，投篮姿式僵尸一样难看。16年总决赛，蓄意跨人，是的，这本是比赛的一部分，你想激怒格林，但你可以演的入戏一点嘛，余光也看得到格林倒了，你何必先看一眼，又想一下，然后 再 跨呢？当然啦，那一年，勇士一是输给了自己，球队缺少硬支撑，当水花失准时，库里突破又被严防，没有现在杜兰特之类的人能够强硬得分;二是输给了厄文。事实也证明厄文才是真大腿。</p>

<h3>国内解说档次太低</h3>

<p>还要鄙视一下解说员杨毅，在第四场第四节，勇士确实胜利之时，另外解说问杨，有什么想法时，杨非要提杜兰特投敌一事，明知道这本就会引起球迷争论，真是哪壶不开提哪壶，讨厌这个人，身为解说员要公平公正的说人话。</p>

<h3>历史会证明阿杜离开是正确的</h3>

<p><img src="http://puep.qpic.cn/coral/Q3auHgzwzM4fgQ41VTF2rNAoia9tQWSkpfNVAOoFzYVU3FJLjLiaVqyg/0/" alt="KD" /></p>

<p>杜离开雷霆是正确的选择：威少是一介草莽，有勇无谋的人，球商低，拿到球一头往篮下冲，不管几个人在堵他，也不管别人位置如何，或者直接三分就扔，靠着身体天赋能得些分。所以威少成不了大事儿，因为处理关键球的能力太次了，又不会把球给其他人。16年西决，如果关键球多给杜兰特处理，也许一切都不一样了。所以威少不是一个能够争取总冠军的帮手，另外，雷霆的管理层太次，要不然，当然四少，也不会走了三个，从雷霆出来的人后来发展的相当 的不错，包括维特斯等人。杜兰特肯定是对管理寒了心，所以才出走的，勇士的气氛和现有的基础以及未来的希望吸引了他，只不过不巧的是刚刚勇士击败了雷霆而已，就是这么不巧，让好好的一个转会，弄得球迷和媒体口水快能把阿杜淹死了。所以，杜兰特肯定会留在勇士，多拿几个总冠军，把光芒放无限大，以压住说闲话的人。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kotlin实战学习：撸一个程序猿老黄历]]></title>
    <link href="http://toughcoder.net/blog/2018/06/09/kotlin-exercise-programmer-calendar/"/>
    <updated>2018-06-09T16:10:24+08:00</updated>
    <id>http://toughcoder.net/blog/2018/06/09/kotlin-exercise-programmer-calendar</id>
    <content type="html"><![CDATA[<h2>Talk is cheap, let&rsquo;s code</h2>

<p><a href="http://toughcoder.net/blog/2018/05/17/introduction-to-kotlin-programming-language/">前面一篇文章</a>介绍Kotlin的基础知识，但光有知识是不够的，最重要的是要能在实战中使用Kotlin，这才不枉我们学习一回。这里就用纯Kotlin来开发一个简单的Android应用，以展示如何在实际项目中使用Kotlin。</p>

<p><a href="http://toughcoder.net/blog/2018/06/09/kotlin-exercise-programmer-calendar/"><img src="https://www.rootinfosol.com/sites/default/files/2017-05/Android%20kotlin%20banner.jpg" width="640"></a></p>

<h2>走上Kotlin开发之路</h2>

<p>在前面文章的尾部，我们展示了如何创建一个基于Kotlin安卓应用，但是过于简单，因为仅是代码换成了Kotlin，布局还是在用XML，这并没有用到Kotlin的全部。为了更加方便的开发Android应用，发挥Kotlin语言的巨大优势，JetBrains在发布Kotlin的同时，也发布一个专门用于Android开发的配套的库Anko，它最大的优势就是以DSL的方式来创建UI，下面我们来介绍一下Anko。</p>

<!-- more -->


<h2><a href="https://github.com/Kotlin/anko">Anko</a></h2>

<h3>Anko是什么鬼，以及为何要用它</h3>

<p>Anko库的目的是提高Android开发的效率，用Kotlin语言的优势。它有四大部分：Anko commons，Anko layouts，Anko SQLite和Anko Coroutines，这里我们不复制官方的介绍了，关于这四部分可以看一下官方的<a href="https://github.com/Kotlin/anko">wiki</a>。
其实，最大的变化就是布局，常规的Android项目，我们一般都是用XML来写布局XML呢，其实也没有啥大问题，在各种开发工具和开源库的帮忙下，效率也不低，但XML最大的问题就是啰嗦，要不然现在也不会被JSON取代。
当然，我们可以像前面的KotlinHello，显示的那样，布局使用XML，代码使用Kotlin，这没有任何问题，但Kotlin语言最大的特点是简洁，所以，使用Anko可以，非常简洁的，用更少的代码来实现同样的功能，代码少了，效率也就高了。</p>

<h3>如何使用Anko</h3>

<p>重写KotlinHello，来展示一下如何在项目中使用Anko，继续打开上篇文章中的KotlinHello项目，在app下面的build.gradle中的dependencies中添加：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">implementation</span> <span class="s">&quot;org.jetbrains.anko:anko:$anko_version&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在其顶部定义anko_version变量：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">ext</span><span class="p">.</span><span class="n">anko_version</span> <span class="p">=</span> <span class="err">&#39;</span><span class="m">0.10</span><span class="p">.</span><span class="m">5</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>重新gradle sync一下，完成后，就可以使用了。</p>

<p>编辑HelloActivity.kt，在onCreate里面，把除了super.onCreate以外的都删除，然后添加：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'>    <span class="k">val</span> <span class="py">colorTable</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span><span class="s">&quot;#ff0000&quot;</span><span class="p">,</span> <span class="s">&quot;#00ff00&quot;</span><span class="p">,</span> <span class="s">&quot;#0000ff&quot;</span><span class="p">,</span> <span class="s">&quot;#ffff00&quot;</span><span class="p">,</span> <span class="s">&quot;#00ffff&quot;</span><span class="p">,</span> <span class="s">&quot;#ff00ff&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">verticalLayout</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">name</span> <span class="p">=</span> <span class="n">editText</span><span class="p">()</span>
</span><span class='line'>        <span class="n">button</span><span class="p">(</span><span class="s">&quot;Say Hello&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">onClick</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">val</span> <span class="py">randomIndex</span> <span class="p">=</span> <span class="p">(</span><span class="n">Math</span><span class="p">.</span><span class="n">random</span><span class="p">()</span> <span class="p">*</span> <span class="n">colorTable</span><span class="p">.</span><span class="n">size</span><span class="p">).</span><span class="n">toInt</span><span class="p">()</span>
</span><span class='line'>                <span class="n">setBackgroundColor</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">parseColor</span><span class="p">(</span><span class="n">colorTable</span><span class="p">[</span><span class="n">randomIndex</span><span class="p">]))</span>
</span><span class='line'>                <span class="n">toast</span><span class="p">(</span><span class="s">&quot;Hello, ${name.text}! with color ${colorTable[randomIndex]}&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行起来，就是这个样子的：</p>

<p><img src="https://wx3.sinaimg.cn/mw690/870ad0baly1fs57e1fmtpg20a00k0dgi.gif" alt="Kotlin Hello version 1" /></p>

<p>页面有点丑，稍美化下，展示如何添加布局的属性：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'>        <span class="n">padding</span> <span class="p">=</span> <span class="n">dip</span><span class="p">(</span><span class="m">20</span><span class="p">)</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">name</span> <span class="p">=</span> <span class="n">editText</span><span class="p">()</span>
</span><span class='line'>        <span class="n">name</span><span class="p">.</span><span class="n">lparams</span><span class="p">(</span><span class="n">width</span> <span class="p">=</span> <span class="n">matchParent</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">topMargin</span> <span class="p">=</span> <span class="n">dip</span><span class="p">(</span><span class="m">20</span><span class="p">)</span>
</span><span class='line'>            <span class="n">bottomMargin</span> <span class="p">=</span> <span class="n">dip</span><span class="p">(</span><span class="m">30</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最终就是这个样子了：</p>

<p><img src="https://wx4.sinaimg.cn/mw690/870ad0baly1fs57e1foj9g20a00k0js2.gif" alt="Kotlin Hello version 2" /></p>

<p>贴下完整代码：
app/build.gradle:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">apply</span> <span class="n">plugin</span><span class="p">:</span> <span class="err">&#39;</span><span class="n">com</span><span class="p">.</span><span class="n">android</span><span class="p">.</span><span class="n">application</span><span class="err">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">apply</span> <span class="n">plugin</span><span class="p">:</span> <span class="err">&#39;</span><span class="n">kotlin</span><span class="p">-</span><span class="n">android</span><span class="err">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">apply</span> <span class="n">plugin</span><span class="p">:</span> <span class="err">&#39;</span><span class="n">kotlin</span><span class="p">-</span><span class="n">android</span><span class="p">-</span><span class="n">extensions</span><span class="err">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">ext</span><span class="p">.</span><span class="n">anko_version</span> <span class="p">=</span> <span class="err">&#39;</span><span class="m">0.10</span><span class="p">.</span><span class="m">5</span><span class="err">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">android</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">compileSdkVersion</span> <span class="m">27</span>
</span><span class='line'>    <span class="n">defaultConfig</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">applicationId</span> <span class="s">&quot;net.toughcoder.kotlinhello&quot;</span>
</span><span class='line'>        <span class="n">minSdkVersion</span> <span class="m">21</span>
</span><span class='line'>        <span class="n">targetSdkVersion</span> <span class="m">27</span>
</span><span class='line'>        <span class="n">versionCode</span> <span class="m">1</span>
</span><span class='line'>        <span class="n">versionName</span> <span class="s">&quot;1.0&quot;</span>
</span><span class='line'>        <span class="n">testInstrumentationRunner</span> <span class="s">&quot;android.support.test.runner.AndroidJUnitRunner&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">buildTypes</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">release</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">minifyEnabled</span> <span class="k">false</span>
</span><span class='line'>            <span class="n">proguardFiles</span> <span class="n">getDefaultProguardFile</span><span class="p">(</span><span class="err">&#39;</span><span class="n">proguard</span><span class="p">-</span><span class="n">android</span><span class="p">.</span><span class="n">txt</span><span class="err">&#39;</span><span class="p">),</span> <span class="err">&#39;</span><span class="n">proguard</span><span class="p">-</span><span class="n">rules</span><span class="p">.</span><span class="n">pro</span><span class="err">&#39;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">dependencies</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">implementation</span> <span class="n">fileTree</span><span class="p">(</span><span class="n">dir</span><span class="p">:</span> <span class="err">&#39;</span><span class="n">libs</span><span class="err">&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">:</span> <span class="p">[</span><span class="err">&#39;</span><span class="p">*.</span><span class="n">jar</span><span class="err">&#39;</span><span class="p">])</span>
</span><span class='line'>    <span class="n">implementation</span><span class="s">&quot;org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version&quot;</span>
</span><span class='line'>    <span class="n">implementation</span> <span class="err">&#39;</span><span class="n">com</span><span class="p">.</span><span class="n">android</span><span class="p">.</span><span class="n">support</span><span class="p">:</span><span class="n">appcompat</span><span class="p">-</span><span class="n">v7</span><span class="p">:</span><span class="m">27.1</span><span class="p">.</span><span class="m">1</span><span class="err">&#39;</span>
</span><span class='line'>    <span class="n">implementation</span> <span class="err">&#39;</span><span class="n">com</span><span class="p">.</span><span class="n">android</span><span class="p">.</span><span class="n">support</span><span class="p">.</span><span class="n">constraint</span><span class="p">:</span><span class="n">constraint</span><span class="p">-</span><span class="n">layout</span><span class="p">:</span><span class="m">1.1</span><span class="p">.</span><span class="m">0</span><span class="err">&#39;</span>
</span><span class='line'>    <span class="n">implementation</span> <span class="s">&quot;org.jetbrains.anko:anko:$anko_version&quot;</span>
</span><span class='line'>    <span class="n">testImplementation</span> <span class="err">&#39;</span><span class="n">junit</span><span class="p">:</span><span class="n">junit</span><span class="p">:</span><span class="m">4.12</span><span class="err">&#39;</span>
</span><span class='line'>    <span class="n">androidTestImplementation</span> <span class="err">&#39;</span><span class="n">com</span><span class="p">.</span><span class="n">android</span><span class="p">.</span><span class="n">support</span><span class="p">.</span><span class="n">test</span><span class="p">:</span><span class="n">runner</span><span class="p">:</span><span class="m">1.0</span><span class="p">.</span><span class="m">2</span><span class="err">&#39;</span>
</span><span class='line'>    <span class="n">androidTestImplementation</span> <span class="err">&#39;</span><span class="n">com</span><span class="p">.</span><span class="n">android</span><span class="p">.</span><span class="n">support</span><span class="p">.</span><span class="n">test</span><span class="p">.</span><span class="n">espresso</span><span class="p">:</span><span class="n">espresso</span><span class="p">-</span><span class="n">core</span><span class="p">:</span><span class="m">3.0</span><span class="p">.</span><span class="m">2</span><span class="err">&#39;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>HelloActivity.kt:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">HelloActivity</span> <span class="p">:</span> <span class="n">AppCompatActivity</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">super</span><span class="p">.</span><span class="n">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="py">colorTable</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span><span class="s">&quot;#ff0000&quot;</span><span class="p">,</span> <span class="s">&quot;#00ff00&quot;</span><span class="p">,</span> <span class="s">&quot;#0000ff&quot;</span><span class="p">,</span> <span class="s">&quot;#ffff00&quot;</span><span class="p">,</span> <span class="s">&quot;#00ffff&quot;</span><span class="p">,</span> <span class="s">&quot;#ff00ff&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">verticalLayout</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">padding</span> <span class="p">=</span> <span class="n">dip</span><span class="p">(</span><span class="m">20</span><span class="p">)</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">name</span> <span class="p">=</span> <span class="n">editText</span><span class="p">()</span>
</span><span class='line'>            <span class="n">name</span><span class="p">.</span><span class="n">lparams</span><span class="p">(</span><span class="n">width</span> <span class="p">=</span> <span class="n">matchParent</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">topMargin</span> <span class="p">=</span> <span class="n">dip</span><span class="p">(</span><span class="m">20</span><span class="p">)</span>
</span><span class='line'>                <span class="n">bottomMargin</span> <span class="p">=</span> <span class="n">dip</span><span class="p">(</span><span class="m">30</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">button</span><span class="p">(</span><span class="s">&quot;Say Hello&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">onClick</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">val</span> <span class="py">randomIndex</span> <span class="p">=</span> <span class="p">(</span><span class="n">Math</span><span class="p">.</span><span class="n">random</span><span class="p">()</span> <span class="p">*</span> <span class="n">colorTable</span><span class="p">.</span><span class="n">size</span><span class="p">).</span><span class="n">toInt</span><span class="p">()</span>
</span><span class='line'>                    <span class="n">setBackgroundColor</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">parseColor</span><span class="p">(</span><span class="n">colorTable</span><span class="p">[</span><span class="n">randomIndex</span><span class="p">]))</span>
</span><span class='line'>                    <span class="n">toast</span><span class="p">(</span><span class="s">&quot;Hello, ${name.text}! with color ${colorTable[randomIndex]}&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>实战，撸一个程序猿老黄历</h2>

<p>一个KotlinHello，还是过于toy，我们再来一个稍复杂点的小项目，以练手，考虑到Kotlin带来最大变化就是用Anko来写布局，所以我们弄个布局稍复杂的，所以，可以撸一个程序猿老黄历，它功能比较简单，主要就是布局，又不涉及网络，所以适合初学者练手。</p>

<h3>需求理解</h3>

<p>动手之前，先理解一下需求。我们要撸的是这个版本的<a href="http://sandbox.runjs.cn/show/ydp3it7b/">程序员老黄历</a>。
原理呢很简单，预定义一些事件，工具，饮品，方位等，然后用当前日期算出一个随机index，从预定义中取出一批，然后展示出来。其实呢，对于逻辑部分的代码，我们照抄就好，不用太关心。重点，是布局如何用Anko来实现。</p>

<h3>上手开撸</h3>

<ol>
<li>新建一个package: calendar</li>
</ol>


<p><img src="https://wx4.sinaimg.cn/mw690/870ad0baly1fs57e1j897j20wb0e0q6f.jpg" alt="create package calendar" /></p>

<ol>
<li>在calendar中新建一个empty activity: CalendarActivity</li>
</ol>


<p><img src="https://wx4.sinaimg.cn/mw690/870ad0baly1fs57e1g2rbj20mc0ix75e.jpg" alt="create calendar activity" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">CalendarActivity</span> <span class="p">:</span> <span class="n">AppCompatActivity</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">super</span><span class="p">.</span><span class="n">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
</span><span class='line'>        <span class="n">title</span> <span class="p">=</span> <span class="s">&quot;Programmer Calendar&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>点击KotlinHello中的button时，跳到CalendarActivity</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">onClick</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// other codes</span>
</span><span class='line'>    <span class="n">startActivity</span><span class="p">&lt;</span><span class="n">CalendarActivity</span><span class="p">&gt;()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>开始撸布局
整体布局分五块：头部的日期，宜事抬头，宜事详细，坏事抬头，坏事详细，底部方向和指数。这其中，头部日期，可以用一个TextView来解决。宜和坏，是一样的，可以复用，宜（坏）事详细是一个列表，底部也是一个列表，但因为数目和每条内容是固定的，所以可以用三个View来解决。</li>
</ol>


<p>总结：</p>

<ol>
<li>根布局要是一个ScrollView，因为如果内容多时，或者屏幕太小时，可能会有超出屏幕的地方，所以根布局要能滑动。</li>
<li>中间好/坏， 以及好坏的具体事件，要用一个LinearLayout把两个包起来，因为好/坏的高度是由具体事件决定的，又要填充背景色，所以包上一层LinearLayout不可避免。</li>
<li>这样一来，从上到下，一个LinearLayout就可以了</li>
</ol>


<h3>运行效果</h3>

<p>最终运行效果：</p>

<p><img src="https://wx1.sinaimg.cn/mw690/870ad0baly1fs57e1i18vj20u01o0adk.jpg" height="720" width="360" alt="Final result of programmer calendar" /></p>

<h3>最终代码</h3>

<p>CalendarActivity，负责布局和展示</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">CalendarActivity</span> <span class="p">:</span> <span class="n">AppCompatActivity</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">super</span><span class="p">.</span><span class="n">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
</span><span class='line'>        <span class="n">title</span> <span class="p">=</span> <span class="s">&quot;程序猿老黄历&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="py">calendar</span> <span class="p">=</span> <span class="n">ProgrammerCalendar</span><span class="p">()</span>
</span><span class='line'>        <span class="n">scrollView</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">verticalLayout</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">val</span> <span class="py">dateString</span> <span class="p">=</span> <span class="n">buildSpanned</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">append</span><span class="p">(</span><span class="n">calendar</span><span class="p">.</span><span class="n">genTodayString</span><span class="p">(),</span> <span class="n">Bold</span><span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">val</span> <span class="py">dateLabel</span> <span class="p">=</span> <span class="n">textView</span><span class="p">(</span><span class="n">dateString</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">id</span> <span class="p">=</span> <span class="n">View</span><span class="p">.</span><span class="n">generateViewId</span><span class="p">()</span>
</span><span class='line'>                    <span class="n">textColor</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">BLACK</span>
</span><span class='line'>                    <span class="n">textSize</span> <span class="p">=</span> <span class="n">sp</span><span class="p">(</span><span class="m">6.4f</span><span class="p">).</span><span class="n">toFloat</span><span class="p">()</span>
</span><span class='line'>                    <span class="n">singleLine</span> <span class="p">=</span> <span class="k">true</span>
</span><span class='line'>                    <span class="n">textAlignment</span> <span class="p">=</span> <span class="n">View</span><span class="p">.</span><span class="n">TEXT_ALIGNMENT_CENTER</span>
</span><span class='line'>                <span class="p">}.</span><span class="n">lparams</span><span class="p">(</span><span class="n">width</span> <span class="p">=</span> <span class="n">matchParent</span><span class="p">,</span> <span class="n">height</span> <span class="p">=</span> <span class="n">wrapContent</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">topMargin</span> <span class="p">=</span> <span class="n">dip</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">bottomMargin</span> <span class="p">=</span> <span class="n">dip</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">val</span> <span class="err">(</span><span class="py">goodList</span><span class="p">,</span> <span class="n">badList</span><span class="p">)</span> <span class="p">=</span> <span class="n">calendar</span><span class="p">.</span><span class="n">genTodayLuck</span><span class="p">()</span>
</span><span class='line'>                <span class="n">generateLuck</span><span class="p">(</span><span class="s">&quot;宜&quot;</span><span class="p">,</span> <span class="n">Color</span><span class="p">.</span><span class="n">parseColor</span><span class="p">(</span><span class="s">&quot;#ffee44&quot;</span><span class="p">),</span> <span class="n">Color</span><span class="p">.</span><span class="n">parseColor</span><span class="p">(</span><span class="s">&quot;#dddddd&quot;</span><span class="p">),</span> <span class="n">goodList</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">generateLuck</span><span class="p">(</span><span class="s">&quot;忌&quot;</span><span class="p">,</span> <span class="n">Color</span><span class="p">.</span><span class="n">parseColor</span><span class="p">(</span><span class="s">&quot;#ff4444&quot;</span><span class="p">),</span> <span class="n">Color</span><span class="p">.</span><span class="n">parseColor</span><span class="p">(</span><span class="s">&quot;#aaaaaa&quot;</span><span class="p">),</span> <span class="n">badList</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// Direction</span>
</span><span class='line'>                <span class="k">val</span> <span class="py">directionDetail</span> <span class="p">=</span> <span class="n">buildSpanned</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">append</span><span class="p">(</span><span class="s">&quot;座位朝向：&quot;</span><span class="p">,</span> <span class="n">Bold</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">append</span><span class="p">(</span><span class="s">&quot;面向&quot;</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">append</span><span class="p">(</span><span class="n">calendar</span><span class="p">.</span><span class="n">genDirection</span><span class="p">(),</span> <span class="n">foregroundColor</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">GREEN</span><span class="p">))</span>
</span><span class='line'>                    <span class="n">append</span><span class="p">(</span><span class="s">&quot;写程序，BUG最少。&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">val</span> <span class="py">direction</span> <span class="p">=</span> <span class="n">extraLabel</span><span class="p">(</span><span class="n">directionDetail</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// Drink</span>
</span><span class='line'>                <span class="k">val</span> <span class="py">drinkDetail</span> <span class="p">=</span> <span class="n">buildSpanned</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">append</span><span class="p">(</span><span class="s">&quot;今日饮品：&quot;</span><span class="p">,</span> <span class="n">Bold</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">append</span><span class="p">(</span><span class="n">calendar</span><span class="p">.</span><span class="n">genDrinks</span><span class="p">())</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">val</span> <span class="py">drink</span> <span class="p">=</span> <span class="n">extraLabel</span><span class="p">(</span><span class="n">drinkDetail</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">val</span> <span class="py">girlDetail</span> <span class="p">=</span> <span class="n">buildSpanned</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">append</span><span class="p">(</span><span class="s">&quot;女神亲近指数：&quot;</span><span class="p">,</span> <span class="n">Bold</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">append</span><span class="p">(</span><span class="n">calendar</span><span class="p">.</span><span class="n">genGirlsIndex</span><span class="p">())</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">val</span> <span class="py">girl</span> <span class="p">=</span> <span class="n">extraLabel</span><span class="p">(</span><span class="n">girlDetail</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">fun</span> <span class="nf">@AnkoViewDslMarker</span> <span class="n">_LinearLayout</span><span class="p">.</span><span class="n">extraLabel</span><span class="p">(</span><span class="n">detail</span><span class="p">:</span> <span class="n">CharSequence</span><span class="p">):</span> <span class="n">TextView</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">textView</span><span class="p">(</span><span class="n">detail</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">textSize</span> <span class="p">=</span> <span class="n">sp</span><span class="p">(</span><span class="m">5</span><span class="p">).</span><span class="n">toFloat</span><span class="p">()</span>
</span><span class='line'>            <span class="n">horizontalPadding</span> <span class="p">=</span> <span class="n">dip</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>
</span><span class='line'>            <span class="n">verticalPadding</span> <span class="p">=</span> <span class="n">dip</span><span class="p">(</span><span class="m">6</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">fun</span> <span class="nf">@AnkoViewDslMarker</span> <span class="n">_LinearLayout</span><span class="p">.</span><span class="n">generateLuck</span><span class="p">(</span><span class="k">type</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'>                                                              <span class="n">typeColor</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span>
</span><span class='line'>                                                              <span class="n">detailColor</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span>
</span><span class='line'>                                                              <span class="n">eventList</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="p">&gt;&gt;)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">linearLayout</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">orientation</span> <span class="p">=</span> <span class="n">LinearLayout</span><span class="p">.</span><span class="n">HORIZONTAL</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">val</span> <span class="py">good</span> <span class="p">=</span> <span class="n">textView</span><span class="p">(</span><span class="k">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">id</span> <span class="p">=</span> <span class="n">View</span><span class="p">.</span><span class="n">generateViewId</span><span class="p">()</span>
</span><span class='line'>                <span class="n">textColor</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">WHITE</span>
</span><span class='line'>                <span class="n">textSize</span> <span class="p">=</span> <span class="n">sp</span><span class="p">(</span><span class="m">14</span><span class="p">).</span><span class="n">toFloat</span><span class="p">()</span>
</span><span class='line'>                <span class="n">textAlignment</span> <span class="p">=</span> <span class="n">View</span><span class="p">.</span><span class="n">TEXT_ALIGNMENT_CENTER</span>
</span><span class='line'>                <span class="n">gravity</span> <span class="p">=</span> <span class="n">Gravity</span><span class="p">.</span><span class="n">CENTER</span>
</span><span class='line'>                <span class="n">backgroundColor</span> <span class="p">=</span> <span class="n">typeColor</span>
</span><span class='line'>            <span class="p">}.</span><span class="n">lparams</span><span class="p">(</span><span class="n">width</span> <span class="p">=</span> <span class="n">dip</span><span class="p">(</span><span class="m">100</span><span class="p">),</span> <span class="n">height</span> <span class="p">=</span> <span class="n">matchParent</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">val</span> <span class="py">goodDetail</span> <span class="p">=</span> <span class="n">verticalLayout</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">id</span> <span class="p">=</span> <span class="n">View</span><span class="p">.</span><span class="n">generateViewId</span><span class="p">()</span>
</span><span class='line'>                <span class="n">eventList</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">val</span> <span class="py">caption</span> <span class="p">=</span> <span class="n">textView</span><span class="p">(</span><span class="n">it</span><span class="p">[</span><span class="n">ProgrammerCalendar</span><span class="p">.</span><span class="n">NAME</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">textColor</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">BLACK</span>
</span><span class='line'>                        <span class="n">textSize</span> <span class="p">=</span> <span class="n">sp</span><span class="p">(</span><span class="m">6</span><span class="p">).</span><span class="n">toFloat</span><span class="p">()</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="k">val</span> <span class="py">detail</span> <span class="p">=</span> <span class="n">textView</span><span class="p">(</span><span class="n">it</span><span class="p">[</span><span class="n">ProgrammerCalendar</span><span class="p">.</span><span class="n">DESCRIPTION</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">textColor</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">GRAY</span>
</span><span class='line'>                        <span class="n">textSize</span> <span class="p">=</span> <span class="n">sp</span><span class="p">(</span><span class="m">5</span><span class="p">).</span><span class="n">toFloat</span><span class="p">()</span>
</span><span class='line'>                        <span class="n">horizontalPadding</span> <span class="p">=</span> <span class="n">dip</span><span class="p">(</span><span class="m">2</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="n">horizontalPadding</span> <span class="p">=</span> <span class="n">dip</span><span class="p">(</span><span class="m">15</span><span class="p">)</span>
</span><span class='line'>                <span class="n">backgroundColor</span> <span class="p">=</span> <span class="n">detailColor</span>
</span><span class='line'>                <span class="n">verticalPadding</span> <span class="p">=</span> <span class="n">dip</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}.</span><span class="n">lparams</span><span class="p">(</span><span class="n">width</span> <span class="p">=</span> <span class="n">matchParent</span><span class="p">,</span> <span class="n">height</span> <span class="p">=</span> <span class="n">wrapContent</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ProgrammerCalendar，这里是业务逻辑</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">ProgrammerCalendar</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">companion</span> <span class="k">object</span> <span class="nc">EventKey</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">const</span> <span class="k">val</span> <span class="py">NAME</span> <span class="p">=</span> <span class="s">&quot;name&quot;</span>
</span><span class='line'>        <span class="n">const</span> <span class="k">val</span> <span class="py">GOOD</span> <span class="p">=</span> <span class="s">&quot;good&quot;</span>
</span><span class='line'>        <span class="n">const</span> <span class="k">val</span> <span class="py">BAD</span> <span class="p">=</span> <span class="s">&quot;bad&quot;</span>
</span><span class='line'>        <span class="n">const</span> <span class="k">val</span> <span class="py">WEEKEND</span> <span class="p">=</span> <span class="s">&quot;weekend&quot;</span>
</span><span class='line'>        <span class="n">const</span> <span class="k">val</span> <span class="py">DATE</span> <span class="p">=</span> <span class="s">&quot;date&quot;</span>
</span><span class='line'>        <span class="n">const</span> <span class="k">val</span> <span class="py">TYPE</span> <span class="p">=</span> <span class="s">&quot;type&quot;</span>
</span><span class='line'>        <span class="n">const</span> <span class="k">val</span> <span class="py">DESCRIPTION</span> <span class="p">=</span> <span class="s">&quot;description&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">weeks</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span> <span class="s">&quot;日&quot;</span><span class="p">,</span> <span class="s">&quot;一&quot;</span><span class="p">,</span> <span class="s">&quot;二&quot;</span><span class="p">,</span> <span class="s">&quot;三&quot;</span><span class="p">,</span> <span class="s">&quot;四&quot;</span><span class="p">,</span> <span class="s">&quot;五&quot;</span><span class="p">,</span> <span class="s">&quot;六&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">directions</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span><span class="s">&quot;北方&quot;</span><span class="p">,</span> <span class="s">&quot;东北方&quot;</span><span class="p">,</span> <span class="s">&quot;东方&quot;</span><span class="p">,</span> <span class="s">&quot;东南方&quot;</span><span class="p">,</span> <span class="s">&quot;南方&quot;</span><span class="p">,</span> <span class="s">&quot;西南方&quot;</span><span class="p">,</span> <span class="s">&quot;西方&quot;</span><span class="p">,</span> <span class="s">&quot;西北方&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">activities</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;写单元测试&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;写单元测试将减少出错&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;写单元测试会降低你的开发效率&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;洗澡&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;你几天没洗澡了？&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;会把设计方面的灵感洗掉&quot;</span><span class="p">,</span> <span class="n">WEEKEND</span> <span class="n">to</span> <span class="s">&quot;true&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;锻炼一下身体&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;能量没消耗多少，吃得却更多&quot;</span><span class="p">,</span> <span class="n">WEEKEND</span> <span class="n">to</span> <span class="s">&quot;true&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;抽烟&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;抽烟有利于提神，增加思维敏捷&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;除非你活够了，死得早点没关系&quot;</span><span class="p">,</span> <span class="n">WEEKEND</span> <span class="n">to</span> <span class="s">&quot;true&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;白天上线&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;今天白天上线是安全的&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;可能导致灾难性后果&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;重构&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;代码质量得到提高&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;你很有可能会陷入泥潭&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;使用%t&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;你看起来更有品位&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;别人会觉得你在装逼&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;跳槽&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;该放手时就放手&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;鉴于当前的经济形势，你的下一份工作未必比现在强&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;招人&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;你面前这位有成为牛人的潜质&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;这人会写程序吗？&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;面试&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;面试官今天心情Xiao很好&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;面试官不爽，会拿你出气&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;提交辞职申请&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;公司找到了一个比你更能干更便宜的家伙，巴不得你赶快滚蛋&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;鉴于当前的经济形势，你的下一份工作未必比现在强&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;申请加薪&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;老板今天心情很好&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;公司正在考虑裁员&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;晚上加班&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;晚上是程序员精神最好的时候&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;&quot;</span><span class="p">,</span> <span class="n">WEEKEND</span> <span class="n">to</span> <span class="s">&quot;true&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;在妹子面前吹牛&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;改善你矮穷挫的形象&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;会被识破&quot;</span><span class="p">,</span> <span class="n">WEEKEND</span> <span class="n">to</span> <span class="s">&quot;true&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;撸管&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;避免缓冲区溢出&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;强撸灰飞烟灭&quot;</span><span class="p">,</span> <span class="n">WEEKEND</span> <span class="n">to</span> <span class="s">&quot;true&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;浏览成人网站&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;重拾对生活的信心&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;你会心神不宁&quot;</span><span class="p">,</span> <span class="n">WEEKEND</span> <span class="n">to</span> <span class="s">&quot;true&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;命名变量\&quot;%v\&quot;&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;写超过%l行的方法&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;你的代码组织的很好，长一点没关系&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;你的代码将混乱不堪，你自己都看不懂&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;提交代码&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;遇到冲突的几率是最低的&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;你遇到的一大堆冲突会让你觉得自己是不是时间穿越了&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;代码复审&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;发现重要问题的几率大大增加&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;你什么问题都发现不了，白白浪费时间&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;开会&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;写代码之余放松一下打个盹，有益健康&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;小心被扣屎盆子背黑锅&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;打DOTA&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;你将有如神助&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;你会被虐的很惨&quot;</span><span class="p">,</span> <span class="n">WEEKEND</span> <span class="n">to</span> <span class="s">&quot;true&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;晚上上线&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;晚上是程序员精神最好的时候&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;你白天已经筋疲力尽了&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;修复BUG&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;你今天对BUG的嗅觉大大提高&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;新产生的BUG将比修复的更多&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;设计评审&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;设计评审会议将变成头脑风暴&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;人人筋疲力尽，评审就这么过了&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;需求评审&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;上微博&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;今天发生的事不能错过&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;今天的微博充满负能量&quot;</span><span class="p">,</span> <span class="n">WEEKEND</span> <span class="n">to</span> <span class="s">&quot;true&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;上AB站&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;还需要理由吗？&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;满屏兄贵亮瞎你的眼&quot;</span><span class="p">,</span> <span class="n">WEEKEND</span> <span class="n">to</span> <span class="s">&quot;true&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;玩FlappyBird&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;今天破纪录的几率很高&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;除非你想玩到把手机砸了&quot;</span><span class="p">,</span> <span class="n">WEEKEND</span> <span class="n">to</span> <span class="s">&quot;true&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">specials</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">DATE</span> <span class="n">to</span> <span class="s">&quot;20140214&quot;</span><span class="p">,</span> <span class="n">TYPE</span> <span class="n">to</span> <span class="s">&quot;BAD&quot;</span><span class="p">,</span> <span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;待在男（女）友身边&quot;</span><span class="p">,</span> <span class="n">DESCRIPTION</span> <span class="n">to</span> <span class="s">&quot;脱团火葬场，入团保平安。&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">tools</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span><span class="s">&quot;Eclipse写程序&quot;</span><span class="p">,</span> <span class="s">&quot;MSOffice写文档&quot;</span><span class="p">,</span> <span class="s">&quot;记事本写程序&quot;</span><span class="p">,</span> <span class="s">&quot;Windows8&quot;</span><span class="p">,</span> <span class="s">&quot;Linux&quot;</span><span class="p">,</span> <span class="s">&quot;MacOS&quot;</span><span class="p">,</span> <span class="s">&quot;IE&quot;</span><span class="p">,</span> <span class="s">&quot;Android设备&quot;</span><span class="p">,</span> <span class="s">&quot;iOS设备&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">varNames</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span><span class="s">&quot;jieguo&quot;</span><span class="p">,</span> <span class="s">&quot;huodong&quot;</span><span class="p">,</span> <span class="s">&quot;pay&quot;</span><span class="p">,</span> <span class="s">&quot;expire&quot;</span><span class="p">,</span> <span class="s">&quot;zhangdan&quot;</span><span class="p">,</span> <span class="s">&quot;every&quot;</span><span class="p">,</span> <span class="s">&quot;free&quot;</span><span class="p">,</span> <span class="s">&quot;i1&quot;</span><span class="p">,</span> <span class="s">&quot;a&quot;</span><span class="p">,</span> <span class="s">&quot;virtual&quot;</span><span class="p">,</span> <span class="s">&quot;ad&quot;</span><span class="p">,</span> <span class="s">&quot;spider&quot;</span><span class="p">,</span> <span class="s">&quot;mima&quot;</span><span class="p">,</span> <span class="s">&quot;pass&quot;</span><span class="p">,</span> <span class="s">&quot;ui&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">drinks</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span><span class="s">&quot;水&quot;</span><span class="p">,</span> <span class="s">&quot;茶&quot;</span><span class="p">,</span> <span class="s">&quot;红茶&quot;</span><span class="p">,</span> <span class="s">&quot;绿茶&quot;</span><span class="p">,</span> <span class="s">&quot;咖啡&quot;</span><span class="p">,</span> <span class="s">&quot;奶茶&quot;</span><span class="p">,</span> <span class="s">&quot;可乐&quot;</span><span class="p">,</span> <span class="s">&quot;鲜奶&quot;</span><span class="p">,</span> <span class="s">&quot;豆奶&quot;</span><span class="p">,</span> <span class="s">&quot;果汁&quot;</span><span class="p">,</span> <span class="s">&quot;果味汽水&quot;</span><span class="p">,</span> <span class="s">&quot;苏打水&quot;</span><span class="p">,</span> <span class="s">&quot;运动饮料&quot;</span><span class="p">,</span> <span class="s">&quot;酸奶&quot;</span><span class="p">,</span> <span class="s">&quot;酒&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">today</span> <span class="p">=</span> <span class="n">GregorianCalendar</span><span class="p">()</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">iday</span> <span class="p">=</span> <span class="n">today</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="n">Calendar</span><span class="p">.</span><span class="n">YEAR</span><span class="p">)</span> <span class="p">*</span> <span class="m">10000</span> <span class="p">+</span> <span class="p">(</span><span class="n">today</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="n">Calendar</span><span class="p">.</span><span class="n">MONTH</span><span class="p">)</span> <span class="p">+</span> <span class="m">1</span><span class="p">)</span> <span class="p">*</span> <span class="m">100</span> <span class="p">+</span> <span class="n">today</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="n">Calendar</span><span class="p">.</span><span class="n">DAY_OF_MONTH</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">fun</span> <span class="nf">random</span><span class="p">(</span><span class="n">seed</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">index</span><span class="p">:</span> <span class="n">Int</span><span class="p">):</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">var</span> <span class="py">n</span> <span class="p">=</span> <span class="n">seed</span> <span class="p">%</span> <span class="m">11117</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="k">in</span> <span class="m">0</span> <span class="n">until</span> <span class="m">100</span><span class="p">+</span><span class="n">index</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">n</span> <span class="p">*=</span> <span class="n">n</span>
</span><span class='line'>            <span class="n">n</span> <span class="p">%=</span> <span class="m">11117</span>   <span class="c1">// 11117 是个质数</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">n</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">fun</span> <span class="nf">isSomeday</span><span class="p">():</span> <span class="n">Boolean</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">today</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="n">Calendar</span><span class="p">.</span><span class="n">MONTH</span><span class="p">)</span> <span class="p">==</span> <span class="m">5</span> <span class="p">&amp;&amp;</span> <span class="n">today</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="n">Calendar</span><span class="p">.</span><span class="n">DAY_OF_MONTH</span><span class="p">)</span> <span class="p">==</span> <span class="m">4</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">fun</span> <span class="nf">star</span><span class="p">(</span><span class="n">num</span><span class="p">:</span> <span class="n">Int</span><span class="p">):</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">var</span> <span class="py">result</span> <span class="p">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>        <span class="k">var</span> <span class="py">i</span> <span class="p">=</span> <span class="m">0</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="p">&lt;</span> <span class="n">num</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">result</span> <span class="p">+=</span> <span class="s">&quot;★&quot;</span>
</span><span class='line'>            <span class="n">i</span><span class="p">++</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">while</span><span class="p">(</span><span class="n">i</span> <span class="p">&lt;</span> <span class="m">5</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">result</span> <span class="p">+=</span> <span class="s">&quot;☆&quot;</span>
</span><span class='line'>            <span class="n">i</span><span class="p">++</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">fun</span> <span class="nf">isWeekend</span><span class="p">():</span> <span class="n">Boolean</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">today</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="n">Calendar</span><span class="p">.</span><span class="n">DAY_OF_WEEK</span><span class="p">)</span> <span class="p">==</span> <span class="m">0</span> <span class="p">||</span> <span class="n">today</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="n">Calendar</span><span class="p">.</span><span class="n">DAY_OF_WEEK</span><span class="p">)</span> <span class="p">==</span> <span class="m">6</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 从 activities 中随机挑选 size 个</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">fun</span> <span class="nf">pickRandomActivity</span><span class="p">(</span><span class="n">activities</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="p">&gt;&gt;,</span> <span class="n">size</span><span class="p">:</span> <span class="n">Int</span><span class="p">):</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="p">&gt;&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">pickedEvents</span> <span class="p">=</span> <span class="n">activities</span><span class="p">.</span><span class="n">pickRandom</span><span class="p">(</span><span class="n">size</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">pickedEvents</span><span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">parse</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 从数组中随机挑选 size 个</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">fun</span> <span class="err">&lt;</span><span class="nf">T</span><span class="p">&gt;</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;.</span><span class="n">pickRandom</span><span class="p">(</span><span class="n">size</span><span class="p">:</span> <span class="n">Int</span><span class="p">):</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">var</span> <span class="py">result</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">toMutableList</span><span class="p">()</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="k">in</span> <span class="m">0</span> <span class="n">until</span> <span class="k">this</span><span class="p">.</span><span class="n">size</span> <span class="p">-</span> <span class="n">size</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">index</span> <span class="p">=</span> <span class="n">random</span><span class="p">(</span><span class="n">iday</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span> <span class="p">%</span> <span class="n">result</span><span class="p">.</span><span class="n">size</span>
</span><span class='line'>            <span class="n">result</span><span class="p">.</span><span class="n">removeAt</span><span class="p">(</span><span class="n">index</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 解析占位符并替换成随机内容</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">fun</span> <span class="nf">parse</span><span class="p">(</span><span class="n">event</span><span class="p">:</span> <span class="n">Map</span><span class="p">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="p">&gt;):</span> <span class="n">Map</span><span class="p">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">var</span> <span class="py">result</span> <span class="p">=</span> <span class="n">event</span><span class="p">.</span><span class="n">toMutableMap</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="p">[</span><span class="n">NAME</span><span class="p">]</span><span class="o">?.</span><span class="n">indexOf</span><span class="p">(</span><span class="s">&quot;%v&quot;</span><span class="p">)</span> <span class="p">!=</span> <span class="p">-</span><span class="m">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">result</span><span class="p">[</span><span class="n">NAME</span><span class="p">]</span> <span class="p">=</span> <span class="n">result</span><span class="p">[</span><span class="n">NAME</span><span class="p">]</span><span class="o">?.</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;%v&quot;</span><span class="p">,</span> <span class="n">varNames</span><span class="p">[</span><span class="n">random</span><span class="p">(</span><span class="n">iday</span><span class="p">,</span> <span class="m">12</span><span class="p">)</span> <span class="p">%</span> <span class="n">varNames</span><span class="p">.</span><span class="n">size</span><span class="p">])</span><span class="o">!!</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="p">[</span><span class="n">NAME</span><span class="p">]</span><span class="o">?.</span><span class="n">indexOf</span><span class="p">(</span><span class="s">&quot;%t&quot;</span><span class="p">)</span> <span class="p">!=</span> <span class="p">-</span><span class="m">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">result</span><span class="p">[</span><span class="n">NAME</span><span class="p">]</span> <span class="p">=</span> <span class="n">result</span><span class="p">[</span><span class="n">NAME</span><span class="p">]</span><span class="o">?.</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;%t&quot;</span><span class="p">,</span> <span class="n">tools</span><span class="p">[</span><span class="n">random</span><span class="p">(</span><span class="n">iday</span><span class="p">,</span> <span class="m">11</span><span class="p">)</span> <span class="p">%</span> <span class="n">tools</span><span class="p">.</span><span class="n">size</span><span class="p">])</span><span class="o">!!</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="p">[</span><span class="n">NAME</span><span class="p">]</span><span class="o">?.</span><span class="n">indexOf</span><span class="p">(</span><span class="s">&quot;%l&quot;</span><span class="p">)</span> <span class="p">!=</span> <span class="p">-</span><span class="m">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">result</span><span class="p">[</span><span class="n">NAME</span><span class="p">]</span> <span class="p">=</span> <span class="n">result</span><span class="p">[</span><span class="n">NAME</span><span class="p">]</span><span class="o">?.</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;%l&quot;</span><span class="p">,</span> <span class="p">(</span><span class="n">random</span><span class="p">(</span><span class="n">iday</span><span class="p">,</span> <span class="m">12</span><span class="p">)</span> <span class="p">%</span> <span class="m">247</span> <span class="p">+</span> <span class="m">30</span><span class="p">).</span><span class="n">toString</span><span class="p">())</span><span class="o">!!</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span><span class="p">.</span><span class="n">toMap</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 添加预定义事件</span>
</span><span class='line'>    <span class="c1">// Should return two lists: GOOD list and BAD list, the item of list is a map(dictionary)</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">fun</span> <span class="nf">pickSpecials</span><span class="p">(</span><span class="n">goodList</span><span class="p">:</span> <span class="n">MutableList</span><span class="p">&lt;</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="p">&gt;&gt;,</span> <span class="n">badList</span><span class="p">:</span> <span class="n">MutableList</span><span class="p">&lt;</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="p">&gt;&gt;)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">specials</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">iday</span><span class="p">.</span><span class="n">toString</span><span class="p">()</span> <span class="p">==</span> <span class="n">it</span><span class="p">[</span><span class="n">DATE</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">it</span><span class="p">[</span><span class="n">TYPE</span><span class="p">]</span> <span class="p">==</span> <span class="n">GOOD</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">goodList</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="n">it</span><span class="p">[</span><span class="n">NAME</span><span class="p">]</span><span class="o">!!</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="n">it</span><span class="p">[</span><span class="n">DESCRIPTION</span><span class="p">]</span><span class="o">!!</span><span class="p">))</span>
</span><span class='line'>                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">badList</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="n">it</span><span class="p">[</span><span class="n">NAME</span><span class="p">]</span><span class="o">!!</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="n">it</span><span class="p">[</span><span class="n">DESCRIPTION</span><span class="p">]</span><span class="o">!!</span><span class="p">))</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 生成今日运势</span>
</span><span class='line'>    <span class="c1">// Two part: from specials events and random picked from activities</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">genTodayLuck</span><span class="p">():</span> <span class="n">Pair</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="p">&gt;&gt;,</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="p">&gt;&gt;&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">var</span> <span class="py">theActivities</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">isWeekend</span><span class="p">())</span> <span class="n">activities</span><span class="p">.</span><span class="n">filter</span> <span class="p">{</span> <span class="n">it</span><span class="p">[</span><span class="n">WEEKEND</span><span class="p">]</span> <span class="p">==</span> <span class="s">&quot;true&quot;</span> <span class="p">}</span> <span class="k">else</span> <span class="n">activities</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="py">goodList</span> <span class="p">=</span> <span class="n">ArrayList</span><span class="p">&lt;</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="p">&gt;&gt;()</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">badList</span> <span class="p">=</span> <span class="n">ArrayList</span><span class="p">&lt;</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="p">&gt;&gt;()</span>
</span><span class='line'>        <span class="n">pickSpecials</span><span class="p">(</span><span class="n">goodList</span><span class="p">,</span> <span class="n">badList</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="py">numGood</span> <span class="p">=</span> <span class="n">random</span><span class="p">(</span><span class="n">iday</span><span class="p">,</span> <span class="m">98</span><span class="p">)</span> <span class="p">%</span> <span class="m">3</span> <span class="p">+</span> <span class="m">2</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">numBad</span> <span class="p">=</span> <span class="n">random</span><span class="p">(</span><span class="n">iday</span><span class="p">,</span> <span class="m">87</span><span class="p">)</span> <span class="p">%</span> <span class="m">3</span> <span class="p">+</span> <span class="m">2</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">pickedEvents</span> <span class="p">=</span> <span class="n">pickRandomActivity</span><span class="p">(</span><span class="n">theActivities</span><span class="p">,</span> <span class="n">numGood</span> <span class="p">+</span> <span class="n">numBad</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Add random picked from activities to GOOD/BAD list</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="k">in</span> <span class="m">0</span> <span class="n">until</span> <span class="n">numGood</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">goodList</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="n">pickedEvents</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">NAME</span><span class="p">]</span><span class="o">!!</span><span class="p">,</span> <span class="n">DESCRIPTION</span> <span class="n">to</span> <span class="n">pickedEvents</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">GOOD</span><span class="p">]</span><span class="o">!!</span><span class="p">))</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="k">in</span> <span class="m">0</span> <span class="n">until</span> <span class="n">numBad</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">badList</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="n">pickedEvents</span><span class="p">[</span><span class="n">numGood</span> <span class="p">+</span> <span class="n">i</span><span class="p">][</span><span class="n">NAME</span><span class="p">]</span><span class="o">!!</span><span class="p">,</span> <span class="n">DESCRIPTION</span> <span class="n">to</span> <span class="n">pickedEvents</span><span class="p">[</span><span class="n">numGood</span> <span class="p">+</span> <span class="n">i</span><span class="p">][</span><span class="n">BAD</span><span class="p">]</span><span class="o">!!</span><span class="p">))</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Pair</span><span class="p">(</span><span class="n">goodList</span><span class="p">,</span> <span class="n">badList</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">genTodayString</span><span class="p">():</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;今天是&quot;</span> <span class="p">+</span> <span class="n">today</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="n">Calendar</span><span class="p">.</span><span class="n">YEAR</span><span class="p">)</span> <span class="p">+</span>
</span><span class='line'>                <span class="s">&quot;年&quot;</span> <span class="p">+</span> <span class="p">(</span><span class="n">today</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="n">Calendar</span><span class="p">.</span><span class="n">MONTH</span><span class="p">)</span> <span class="p">+</span> <span class="m">1</span><span class="p">)</span> <span class="p">+</span>
</span><span class='line'>                <span class="s">&quot;月&quot;</span> <span class="p">+</span> <span class="n">today</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="n">Calendar</span><span class="p">.</span><span class="n">DAY_OF_MONTH</span><span class="p">)</span> <span class="p">+</span>
</span><span class='line'>                <span class="s">&quot;日 星期&quot;</span> <span class="p">+</span> <span class="n">weeks</span><span class="p">[</span><span class="n">today</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="n">Calendar</span><span class="p">.</span><span class="n">DAY_OF_WEEK</span><span class="p">)</span> <span class="p">-</span> <span class="m">1</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">genDirection</span><span class="p">():</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">index</span> <span class="p">=</span> <span class="n">random</span><span class="p">(</span><span class="n">iday</span><span class="p">,</span> <span class="m">2</span><span class="p">)</span> <span class="p">%</span> <span class="n">directions</span><span class="p">.</span><span class="n">size</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">directions</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">genGirlsIndex</span><span class="p">():</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">star</span><span class="p">(</span><span class="n">random</span><span class="p">(</span><span class="n">iday</span><span class="p">,</span> <span class="m">6</span><span class="p">)</span> <span class="p">%</span> <span class="m">5</span> <span class="p">+</span> <span class="m">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">genDrinks</span><span class="p">():</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">drinks</span><span class="p">.</span><span class="n">pickRandom</span><span class="p">(</span><span class="m">2</span><span class="p">).</span><span class="n">joinToString</span><span class="p">(</span><span class="s">&quot;, &quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>完整的代码可以到这里<a href="https://github.com/alexhilton/KotlinHello">下载</a>。</p>

<h3>用到的新特性</h3>

<p>从代码中看到，除了上一篇文章外，还用到了一些Kotlin语言的特性：</p>

<h4>Ranges</h4>

<p>可以理解为区间，用于按某些范围来迭代，看一下例子中genTodayLuck方法就能明白。下面也简单的补充下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="k">in</span> <span class="m">1.</span><span class="p">.</span><span class="m">10</span><span class="p">)</span> <span class="c1">// 等同于for (int i = 1; i &lt;= 10; i++)</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="k">in</span> <span class="m">0</span> <span class="n">until</span> <span class="m">10</span><span class="p">)</span> <span class="c1">// 等同于for (int i = 0; i &lt; 10; i++)</span>
</span></code></pre></td></tr></table></div></figure>


<p>自己可以体会上面的两个不同，还有就是还可以用于if判断：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="k">in</span> <span class="m">1.</span><span class="p">.</span><span class="m">10</span><span class="p">)</span> <span class="c1">// if (1 &lt;= a &amp;&amp; a &lt;= 10)</span>
</span></code></pre></td></tr></table></div></figure>


<p>默认步长是1, 当然也可以自定义：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="k">in</span> <span class="m">1.</span><span class="p">.</span><span class="m">10</span> <span class="n">step</span> <span class="m">2</span><span class="p">)</span> <span class="c1">// =&gt; for (int i = 1; i &lt;= 10; i += 2)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Extension function</h4>

<p>可以给已存在的类添加方法，非继承也非组合的方式，与Object-C中的Category很像。这会让在基于某个类，执行某种操作时，非常的简洁，比如此例中的pickRandom方法，如果常规实现是把列表作为一个参数传入，但是用了Extension function后，使用的时候就仿佛这是Collection本身提供的一个方法一样，可读性与简洁性大大提升。</p>

<h4>Companion object</h4>

<p>与内部类概念类似，就是想在一个类的内部再声明一个类，就要用companion object，引用companion object的成员时可以省略它的类的名字，如示例中，在CalendarActivity中引用ProgrammerCalendar的companion object EventKeys时可以省略:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">ProgrammerCalendar</span><span class="p">.</span><span class="n">DESCRIPTION</span>
</span></code></pre></td></tr></table></div></figure>


<h4>const关键字</h4>

<p>上一篇文章，介绍过变量用var声明，常量用val来声明，那关键字const又是什么鬼呢？原来它用于声明类的顶级属性（用人话说，就是非内部类），其作用相当于Java中的static final：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">const</span> <span class="k">val</span> <span class="py">NAME</span> <span class="p">=</span> <span class="s">&quot;name&quot;</span> <span class="c1">//相当于Java中的public static final String NAME = &quot;name&quot;;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参考资料</h2>

<ul>
<li><a href="https://www.sitepoint.com/building-a-ui-with-kotlin-and-anko/">Building a UI with Kotlin and Anko</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[学习Kotlin，看这一篇就够了]]></title>
    <link href="http://toughcoder.net/blog/2018/05/17/introduction-to-kotlin-programming-language/"/>
    <updated>2018-05-17T20:51:21+08:00</updated>
    <id>http://toughcoder.net/blog/2018/05/17/introduction-to-kotlin-programming-language</id>
    <content type="html"><![CDATA[<h2>人生苦短，要用Kotlin</h2>

<p>这是一种对程序猿更为友好的语言，可以减少开发者的工作量，原本由开发者干的事情，其实很多都可以由编译器实现了，这是一种更为高级的语言。Java虽然严谨，但却过于繁琐，太啰嗦了，一个小事情却要写大量的代码，而且有些代码又是非常机械式的，在实际编码过程中都是用IDE来自动生成。Java，C，C++，Object C这些都是上世纪的编程语言。</p>

<p><a href="http://toughcoder.net/blog/2018/05/17/introduction-to-kotlin-programming-language/"><img src="https://fossbytes.com/wp-content/uploads/2017/09/Kotlin-programming-language-course.png"></a></p>

<p>现在到了新时代了，编程也发展了很多，像lambda表达式，函数式编程，等等一些新的概念和范式在涌现。所以就有了新时代的编程语言，像水果的Swift，Groovy，Scala，以及Java阵营的Kotlin。Kotlin是新一代的编程语言，与Java完美融合，简洁，方便，可以大大提高程序可读性，特别是对于Android开发者来说。水果推出了Swift以解放水果平台的开发者，而Kotlin就是来解放Android开发者的。</p>

<!-- more -->


<p>虽然说Kotlin可以用在任何可以用Java的地方，但目前主要就是两大领域服务端，以及Android应用开发，特别是有了Google官方的支持，所以Kotlin对于Android开发者的意义更为重大，身为一个Android猿，是一定要学习一下这门现代的编程语言的，因为当你学过了之后 ，你会发现，之前写的代码都是在浪费生命。</p>

<h2>Development environment setup</h2>

<p>有三种方式</p>

<h3>命令行</h3>

<p>其实，这是最好的方式，因为配置起来非常的方便。到<a href="https://kotlinlang.org/docs/tutorials/command-line.html">官网</a>去下载编译器，解压，然后把kotlinc/bin/放到PATH环境变量里面，就可以了。如果要配置Vim，还需要安装一下插件，大神们早就把插件准备好了，只需要<a href="https://github.com/udalov/kotlin-vim">下载</a>，然后按照官方方法安装即可，其实就是把解压后的东西拷贝到相应的目录里面就好了。</p>

<h3>Idea IntellJ</h3>

<p>这个看<a href="https://kotlinlang.org/docs/tutorials/getting-started.html">官方文档</a>就可以了，孤未亲测，如遇困难请自行Google。</p>

<h3>Android Studio</h3>

<p>因为Kotlin官已支持了Android Studio，而Google也支持了，总而言之就是在Android Studio中可以直接使用Kotlin。所以， Android Stuido 3.0以后的版本无需特殊配置，就可以用例Kotlin了。</p>

<p>对于刚开始学习Kotlin而言呢，孤推荐使用命令行的方式，而不要使用Android Studio，特别是直接创建一个基于Kotlin的Android项目，因为此时对语言还不够熟悉，直接上项目，会迷失在项目配置，frameworks以及语言基础之中。刚学习一门语言的时候要先学习基本的语法以及语言本身的特性，这最好先绕开框架和项目，会更容易上手一些。</p>

<h2>Hello world</h2>

<p>这是所有编程语言的入门必学课程，目的是让学习者快速的体验一下一门语言，我们也不用多想，照着一个字母，一个字母的把示例敲进去就好了：</p>

<ol>
<li>选择喜欢的文本编辑器，如Vim hello.kt，Kotlin的文件扩展名是*.kt，我们遵循就好。<br/></li>
<li>一字不差的敲进去:</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">package</span> <span class="nn">hello</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">main</span><span class="p">(</span><span class="n">args</span><span class="p">:</span> <span class="n">Array</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Hello, world&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后，保存文件<br/>
3. 回到命令行，编译源码，如果一切顺利会得到一个叫hello.jar的文件，这就是kotlin的最终输出，也就是它的目标文件.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kotlinc hello.kt -include-runtime -d hello.jar
</span></code></pre></td></tr></table></div></figure>


<p><br/>
4. 运行，这里跟Kotlin其实已经没啥关系了，因为经过编译得到的是一个标准的Jar文件，像运行其他jar一样运行就好了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>java -jar hello.jar
</span></code></pre></td></tr></table></div></figure>


<p>就会得到输出Hello, world到此，第一个Kotlin程序已经完成，是不是很酷，已经迫不及待的想深入学习了！往下看吧。</p>

<h2>The basics</h2>

<h3>语句结构</h3>

<p>一行一个语句（先不纠结语句与表达式的区别），不用加分号，不用打分号，光这个就可以节省多少时间呢？是不是感觉人生都浪费在了分号上面。如果想在一行写多个语句，前面的要加上分号。</p>

<p>缩进规则与Java一致，用四个空格，也可以用tab，或者不加缩进，只要没人打你。</p>

<p>语句块需要加上花括号{}。总之，语句结构与Java很类似。</p>

<h3>变量</h3>

<p>用var来声明变量，用val来声明常量，因为Kotlin是静态强类型语言（也就是说每个变量在编译的时候必须知道类型）声明时需要带上类型，方法是在变量名的后面加冒号，空格跟上类型名字，与Pascal差不多。如果声明时直接定义，则可以不用指定类型，编译器会根据定义表达式来推测它的类型。示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">var</span> <span class="py">str</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'><span class="k">val</span> <span class="py">i</span><span class="p">:</span> <span class="n">Int</span>
</span><span class='line'><span class="k">var</span> <span class="py">str</span> <span class="p">=</span> <span class="s">&quot;Hello, world&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>语句和表达式</h3>

<p>主要想说一下语句和表达式的区别，简单来说就是表达式是有值的，可以放在变量赋值的右边，而语句是没有值的，不能放在赋值的右边</p>

<h3>基本运算</h3>

<p>不多说了，跟Java一样</p>

<h3>注释</h3>

<p>这个跟Java也一样：
// 单行注释
/<em> </em>/  多行注释
/<em>* </em>/ documentation</p>

<h3>函数</h3>

<p>以fun关键字来定义一个函数格式为：<em>fun 函数名(参数): 返回类型 {函数体}</em>，如:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">foo</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="p">):</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">name</span><span class="p">.</span><span class="n">length</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>命名参数和默认值，调用函数时可以把参数的名字带上，以增加可读性。声明函数时可以用默认值 ，以更好的支持函数的重载。如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">foo</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">number</span><span class="p">:</span> <span class="n">Int</span> <span class="p">=</span> <span class="m">42</span><span class="p">,</span> <span class="n">toUpper</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">):</span> <span class="n">String</span> <span class="p">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用时，可以指定参数的名字：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">foo</span><span class="p">(</span><span class="s">&quot;a)</span>
</span><span class='line'><span class="n">foo</span><span class="p">(</span><span class="s">&quot;b&quot;</span><span class="p">,</span> <span class="n">number</span> <span class="p">=</span> <span class="m">1</span><span class="p">)</span>
</span><span class='line'><span class="n">foo</span><span class="p">(</span><span class="s">&quot;c&quot;</span><span class="p">,</span> <span class="n">toUpper</span> <span class="p">=</span> <span class="k">true</span><span class="p">)</span>
</span><span class='line'><span class="n">foo</span><span class="p">(</span><span class="n">name</span> <span class="p">=</span> <span class="s">&quot;d&quot;</span><span class="p">,</span> <span class="n">number</span> <span class="p">=</span> <span class="m">2</span><span class="p">,</span> <span class="n">toUpper</span> <span class="p">=</span> <span class="k">false</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>表达式体如果一个函数体内只有一个表达式，且有返回值时，那么，可以直接把返回值放在函数 的后面，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">foo</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="p">):</span> <span class="n">String</span> <span class="p">=</span> <span class="n">name</span><span class="p">.</span><span class="n">toUpperCase</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>甚至还可以把返回类型的声明给省略掉，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">foo</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">=</span> <span class="n">name</span><span class="p">.</span><span class="n">toUpperCase</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>跟Java不一样的是，Kotlin的函数可以声明为toplevel也就是跟class一个级别，也就是说不必非放在类里面，也就是说跟C和C++是类似的。此外，还可以函数赋值给一个变量，这个变量就像其他变量一样。</p>

<h3>类与对象</h3>

<h4>类的声明与对象创建</h4>

<p>用class来声明一个类型，用:来继承父类或者实现接口，不需要使用new来创建对象：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">Person</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">var</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>   <span class="k">var</span> <span class="py">age</span><span class="p">:</span> <span class="n">Int</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>假如，一个类，是空的，没有内容，那么花括号{}是可以省略的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span></code></pre></td></tr></table></div></figure>


<p>创建对象：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">var</span> <span class="py">someone</span> <span class="p">=</span> <span class="n">Person</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Primary constructor</h4>

<p>构造方法，有所谓的primary constructor，可以直接写在类名的后面：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">Person</span> <span class="n">constructor</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>一般情况下，constructor 可以省略掉：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>初始化块因为primary constructor不能包含代码，所以，想要做些初始化工作就可以放在初始化块里面(initializer block)，也可以在定义属性时直接使用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">firstName</span><span class="p">:</span> <span class="n">String</span> <span class="p">=</span> <span class="n">name</span>
</span><span class='line'>    <span class="n">init</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;First initializer block that prints ${name}&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>一般情况下，如果声明的属性变量在primary constructor中都有赋值（通过initializer block）的话，可以有更简洁的表达方式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="k">var</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="k">var</span> <span class="py">age</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这相当于：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="n">theName</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">theAge</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">var</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span> <span class="p">=</span> <span class="n">theName</span>   <span class="k">var</span> <span class="py">age</span><span class="p">:</span> <span class="n">Int</span> <span class="p">=</span> <span class="n">theAge</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果primary construct前面要声明属性，或者有annotation的话，关键字constructor不能省略：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">Person</span> <span class="k">public</span> <span class="n">@Inect</span> <span class="n">constructor</span><span class="p">(</span><span class="k">var</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Secondary constructor</h4>

<p>如果primary constructor不能满足需求怎么办呢？还可以声明其他constructor，所谓的secondary constructor:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">Person</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">var</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span> <span class="n">constructor</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="err">）</span><span class="p">{</span>
</span><span class='line'>       <span class="k">this</span><span class="p">.</span><span class="n">name</span> <span class="p">=</span> <span class="n">name</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>是不是看起来舒服一些，因为跟Java一样了，可以把primary constfuctor和second constructor联合起来一起用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="k">var</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">constructor</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">parrent</span><span class="p">:</span> <span class="n">Person</span><span class="p">)</span> <span class="p">:</span> <span class="k">this</span><span class="p">(</span><span class="n">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">parrent</span><span class="p">.</span><span class="n">addChild</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里要把secondary construct尽可能delegate到primary constructor，这里的delegate的意思就是primary constructor会在second constructor之前 执行，还有就是initiailzer block都是在primary construct中执行的，这就能保证initiliazer block在second constructor之前执行。即使没有显示的声明primary constructor，编译器还是会生成一个默认的primary constructor以及把secondary constructor默认的delegate到primary constrcutor上面。也就是说，会保证primary constructor以及initializer block执行在second constructor前面：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">Constructors</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">init</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;Initializer block&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">constructor</span><span class="p">(</span><span class="n">i</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;second constructor&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">main</span><span class="p">(</span><span class="n">args</span><span class="p">:</span> <span class="n">Array</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">c</span> <span class="p">=</span> <span class="n">Constructors</span><span class="p">(</span><span class="m">3</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Initializer block
</span><span class='line'>second constructor
</span></code></pre></td></tr></table></div></figure>


<h4>属性和访问方法</h4>

<p>Kotlin会为声明的属性生成默认的setter和getter：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="k">var</span> <span class="py">name</span><span class="p">:</span> <span class="n">Strring</span><span class="p">,</span> <span class="k">var</span> <span class="py">age</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="py">p</span> <span class="p">=</span> <span class="n">Person</span><span class="p">(</span><span class="s">&quot;Kevin&quot;</span><span class="p">,</span> <span class="m">24</span><span class="p">)</span>
</span><span class='line'><span class="n">p</span><span class="p">.</span><span class="n">getName</span><span class="p">()</span> <span class="c1">// 返回&quot;Kevin&quot;</span>
</span><span class='line'><span class="n">p</span><span class="p">.</span><span class="n">setAge</span><span class="p">(</span><span class="m">32</span><span class="p">)</span> <span class="c1">// age变成了32</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果想自定义setter和getter，也是可以的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">Person</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>        <span class="k">set</span><span class="p">(</span><span class="n">n</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="p">==</span> <span class="k">null</span> <span class="p">||</span> <span class="n">n</span> <span class="p">==</span> <span class="s">&quot;&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">name</span> <span class="p">=</span> <span class="s">&quot;Unkown&quot;</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">name</span> <span class="p">=</span> <span class="n">n</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">get</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">name</span> <span class="p">==</span> <span class="s">&quot;Unkwon&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="s">&quot;Nobody&quot;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">name</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>定义类的方法</h4>

<p>跟声明普通函数一样，只不过是放在了类里面：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="k">val</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="k">val</span> <span class="py">age</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">report</span><span class="p">()</span> <span class="p">=</span> <span class="s">&quot;My name is $name, and I&#39;m $age&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果，要覆写父类的方法，需要使用在方法声明时加上override关键字。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">Doggy</span><span class="p">(</span><span class="k">val</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">:</span> <span class="n">Animal</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">yell</span><span class="p">()</span> <span class="p">=</span> <span class="s">&quot;Barking from $name&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>访问权限</h4>

<p>访问权限也跟Java类似分为public，protected，private以及internal，前三个意义也都一样，只不过默认值不一样，在Java里，如果对成员没有指明，则是package scope，也就是同一个package可以访问，但是Kotlin默认是public的。</p>

<p>internal是module内部可见，有点类似于Java中的package，但是module定义跟package不一样，module是一组编译在一起的Kotlin文件，它跟编译打包有关系，简单的理解它的范围要比package要大。</p>

<p>还有就是类，默认是不可被继承的，相当于final class。如果想要允许继承就要在声明类的时候加上open。</p>

<h3>字串</h3>

<p>概念就不说了，大部分与Java一模一样的，像支持的方法等。唯一需要说的就是字串模板，就是说把其他类型转化为字串时，有较Java更为方便的方式：直接用$来把变量嵌入到字串之中，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">msg</span> <span class="p">=</span> <span class="s">&quot;Error 1&quot;</span>
</span><span class='line'><span class="k">val</span> <span class="py">count</span> <span class="p">=</span> <span class="m">32</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="s">&quot;We got message $msg&quot;</span><span class="p">)</span> <span class="c1">//等同于&quot;We got message &quot; + msg</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="s">&quot;Total is $count&quot;</span><span class="p">)</span> <span class="c1">// Total is 32</span>
</span></code></pre></td></tr></table></div></figure>


<h3>lambda表达式</h3>

<p>首先要介绍一个概念，高阶函数，其实就是把另外函数当作参数的函数，或者说产生一个函数，也即把函数作为返回值 的函数。前面说过，函数是一级对象，可以像常规变量一样来使用，所以，就能把函数作为参数或者返回值来使用高阶函数。lambda表达式就是为高阶函数更方便使用而生的。</p>

<h4>lambda 表达式</h4>

<p>作为新时代的编程语言，都会支持函数式编程，而lambda表达 式又是函数式编程里面必不可少的一份子。其实啥是lambda表达式呢？说的简单点就是没有名字的函数，非常简短的，通常都是一两句话的没有名字的函数。就是长这个样子{A, B -> C}，这里面A，B是参数，C是表达式，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">sum</span> <span class="p">=</span> <span class="p">{</span> <span class="n">x</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">y</span><span class="err">：</span> <span class="n">Int</span> <span class="p">-&gt;</span> <span class="n">x</span> <span class="p">+</span> <span class="n">y</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中，参数的类型是可以省略的，因为编译器能从上下文中推测出来:
max(strings, { a, b -> a.length &lt; b.length }
表达式部分，可以不止一个，最后一个表达式作为返回值。</p>

<p>当把一个lambda表达作为最后一参数，传给某个函数时，可以直接把lambda表达式写在参数的外面，比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">product</span> <span class="p">=</span> <span class="n">items</span><span class="p">.</span><span class="n">fold</span><span class="p">(</span><span class="m">1</span><span class="p">)</span> <span class="p">{</span> <span class="n">acc</span><span class="p">,</span> <span class="n">e</span> <span class="p">-&gt;</span> <span class="n">acc</span> <span class="p">*</span> <span class="n">e</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>而当lambda是唯一的参数时，也可以把参数的括号省略掉：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">run</span> <span class="p">{</span> <span class="n">println</span><span class="p">(</span><span class="s">&quot;Hello, world&quot;</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>还有就是，如果lambda表达中只有一个参数，那么参数也可以省略，直接写表达式:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">eval</span><span class="p">{</span> <span class="n">x</span> <span class="p">*</span> <span class="n">x</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>函数类型</h4>

<p>前面提到了函数是可以像普通变量一样使用的一级类，也就是说它是一个类型。它的具体形式是: (A, B)->C，其中括号内的是参数，C是返回类型，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">sum</span><span class="p">:</span> <span class="p">(</span><span class="n">Int</span><span class="p">,</span> <span class="n">Int</span><span class="p">)-&gt;</span><span class="n">Int</span> <span class="p">=</span> <span class="p">{</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="p">-&gt;</span> <span class="n">x</span> <span class="p">+</span> <span class="n">y</span> <span class="p">}</span>
</span><span class='line'><span class="k">val</span> <span class="py">square</span><span class="p">:</span> <span class="p">(</span><span class="n">Int</span><span class="p">)-&gt;</span><span class="n">Int</span> <span class="p">=</span> <span class="p">{</span> <span class="n">x</span> <span class="p">-&gt;</span> <span class="n">x</span> <span class="p">*</span> <span class="n">x</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>为啥要提一下函数类型呢，因为有时需要声明高阶函数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">walk</span><span class="p">(</span><span class="n">f</span><span class="p">:</span> <span class="p">(</span><span class="n">Int</span><span class="p">)-&gt;</span><span class="n">Int</span><span class="p">)</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">run</span><span class="p">(</span><span class="n">f</span><span class="p">:</span> <span class="p">()-&gt;</span><span class="n">Unit</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Unit是一个特殊的返回值，相当于void，意思就是此函数没有返回值。</p>

<h3>集合</h3>

<p>其实大部分跟Java是一样的。只不过有一些函数式的操作，要多注意使用，从而让代码更简洁，如：</p>

<ul>
<li>遍历</li>
<li>过滤</li>
<li>映射</li>
<li>排序</li>
<li>折叠</li>
<li>分组</li>
<li>归类</li>
</ul>


<p>这些操作，对于大家应该都不难理解，就不一一解释了，来断代码就知道了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">collectionTests</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">list</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span><span class="s">&quot;Apple&quot;</span><span class="p">,</span> <span class="s">&quot;Google&quot;</span><span class="p">,</span> <span class="s">&quot;Microsoft&quot;</span><span class="p">,</span> <span class="s">&quot;Facebook&quot;</span><span class="p">,</span> <span class="s">&quot;Twitter&quot;</span><span class="p">,</span> <span class="s">&quot;Intel&quot;</span><span class="p">,</span> <span class="s">&quot;QualComm&quot;</span><span class="p">,</span> <span class="s">&quot;Tesla&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">// 遍历，以进行某种操作</span>
</span><span class='line'>    <span class="n">list</span><span class="p">.</span><span class="n">forEach</span><span class="p">{</span> <span class="n">println</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="c1">//按条件进行过滤，返回条件为true的</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">short</span> <span class="p">=</span> <span class="n">list</span><span class="p">.</span><span class="n">filter</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">length</span> <span class="p">&lt;</span> <span class="m">6</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="n">short</span><span class="p">)</span> <span class="c1">// [Apple, Intel, Tesla]</span>
</span><span class='line'>    <span class="c1">// 把列表元素映射成为另外一种元素</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">lenList</span> <span class="p">=</span> <span class="n">list</span><span class="p">.</span><span class="n">map</span><span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">length</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Length of each item $lenList&quot;</span><span class="p">)</span> <span class="c1">//Length of each item [5, 6, 9, 8, 7, 5, 8, 5]</span>
</span><span class='line'>    <span class="c1">// 按某种条件进行排序</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">ordered</span> <span class="p">=</span> <span class="n">list</span><span class="p">.</span><span class="n">sortedBy</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">length</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Sorted by length $ordered&quot;</span><span class="p">)</span> <span class="c1">// Sorted by length [Apple, Intel, Tesla, Google, Twitter, Facebook, QualComm, Microsoft]</span>
</span><span class='line'>    <span class="c1">// 折叠，用累积的结果继续遍历</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">joint</span> <span class="p">=</span> <span class="n">list</span><span class="p">.</span><span class="n">fold</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">partial</span><span class="p">,</span> <span class="n">item</span> <span class="p">-&gt;</span> <span class="k">if</span> <span class="p">(</span><span class="n">partial</span> <span class="p">!=</span> <span class="s">&quot;&quot;</span><span class="p">)</span>  <span class="s">&quot;$partial, $item&quot;</span> <span class="k">else</span> <span class="n">item</span> <span class="p">})</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Joint list with comma $joint&quot;</span><span class="p">)</span> <span class="c1">// Joint list with comma Apple, Google, Microsoft, Facebook, Twitter, Intel, QualComm, Tesla</span>
</span><span class='line'>    <span class="c1">//分组，用某种条件 把列表分成两组</span>
</span><span class='line'>    <span class="k">val</span> <span class="err">(</span><span class="py">first</span><span class="p">,</span> <span class="n">second</span><span class="p">)</span> <span class="p">=</span> <span class="n">list</span><span class="p">.</span><span class="n">partition</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">length</span> <span class="p">&lt;</span> <span class="m">6</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Length shorter than 6 $first&quot;</span><span class="p">)</span> <span class="c1">// Length shorter than 6 [Apple, Intel, Tesla]</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Longer than 6 $second&quot;</span><span class="p">)</span> <span class="c1">// Longer than 6 [Google, Microsoft, Facebook, Twitter, QualComm]</span>
</span><span class='line'>    <span class="c1">// 归类，按某种方法把元素归类，之后变成了一个Map</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">bucket</span> <span class="p">=</span> <span class="n">list</span><span class="p">.</span><span class="n">groupBy</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">length</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;$bucket is a map now&quot;</span><span class="p">)</span> <span class="c1">//{5=[Apple, Intel, Tesla], 6=[Google], 9=[Microsoft], 8=[Facebook, QualComm], 7=[Twitter]} is a map now</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>null处理</h3>

<p>为了有效的减少空指针异常，Kotlin加入了Nullable类型，核心的原理是这样的：声明类型的时候要明确的告诉编译器，这个变量是否可能为null，如果可能为null，那么可以赋null给这个变量，并且在使用此变量时必须检查是否为null；假如这个变量不可能为null，那么是不可以赋null给此变量的。也就是说，编译器会帮忙做一些检查，以减少NullPointerException的发生。</p>

<h4>Nullable变量</h4>

<p>默认的变量声明都是不可为null的，如:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">var</span> <span class="py">safe</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'><span class="n">safe</span> <span class="p">=</span> <span class="k">null</span> <span class="c1">// 会有compile error</span>
</span></code></pre></td></tr></table></div></figure>


<p>要想允许变量为null，要在类型后面加一个问号，以告诉编译器这是一个nullable类型：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">var</span> <span class="py">danger</span><span class="p">:</span> <span class="n">String</span><span class="p">?</span>
</span><span class='line'><span class="n">danger</span> <span class="p">=</span> <span class="k">null</span> <span class="c1">// OKay</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用时，nullable不能直接使用，必须检查是否为null:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">safe</span><span class="p">.</span><span class="n">length</span> <span class="c1">// okay</span>
</span><span class='line'><span class="n">danger</span><span class="p">.</span><span class="n">length</span> <span class="c1">// compile error, danger could be null</span>
</span></code></pre></td></tr></table></div></figure>


<h4>检查Nullable的真伪</h4>

<p>可以用传统方式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">len</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">danger</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="n">danger</span><span class="p">.</span><span class="n">length</span> <span class="k">else</span> <span class="p">-</span><span class="m">1</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Safe call</h5>

<p>既然有Nullable类型，自然就有配套的方式来更方便的使用它：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">len</span> <span class="p">=</span> <span class="n">danger</span><span class="o">?.</span><span class="n">length</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果danger是null就返回null，否则返回长度，注意它的返回值是一个Int?（又是一个Nullable类型)。这个还能链起来：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">bob</span><span class="o">?.</span><span class="n">department</span><span class="o">?.</span><span class="n">head</span><span class="o">?.</span><span class="n">name</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果任何一环为null，则直接返回null。是不是感觉省了好多if (a == null)判断。</p>

<h5>Elvis operator</h5>

<p>假如不能接受safe call返回的null，咋办呢？想提供默认值的呢？也有方式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">len</span> <span class="p">=</span> <span class="n">danger</span><span class="o">?.</span><span class="n">length</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">len</span> <span class="o">?:</span> <span class="p">-</span><span class="m">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>稍有点绕哈，首先，danger?.length返回一个Int?吧，那么?:的作用就是如果len是null，那么就返回-1,否则返回它的值。</p>

<h5>强制取值符！！</h5>

<p>它的作用是如果Nullable变量为null就抛出NullPointerException，如果正常的话就取其值，返回的类型是一个non-null类型：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">len</span> <span class="p">=</span> <span class="n">danger</span><span class="o">!!</span><span class="p">.</span><span class="n">length</span> <span class="c1">// get length or NullPointerException</span>
</span></code></pre></td></tr></table></div></figure>


<p>尽管，编译器可以帮助我们做一些事情，但是现实的项目中的大量的NPE并不是直接来源于，可以方便追踪的赋值为null，而多是发生在多线程环境中，以及非常复杂的逻辑之中，编译器能否追踪到并警示，还有待考察。另外，就是虽有利器，但是要运用恰当，何时用允许null，何时不允许，还是要靠工程师的设计能力，比如尽可能返回空列表，空Map，或者空字串，而不是直接简单的返回null，这就能减少一定的NPE。</p>

<h2>Exercises</h2>

<p>光是看书或者看教程是比较乏味的，学习编程最重要的是要上手去练习，这样能加深印象，更好的理解书中或者教程中所讲的概念和知识点。官方也准备了一个非常好的练习项目叫Kotlin-koans，非常适配初学习者来练手。
下面说一下如何使用这个练习项目：</p>

<ol>
<li>到<a href="https://github.com/Kotlin/kotlin-koans">官网</a>去下载后，解压</li>
<li>用Android Studio打开此项目，一切提示都回答yes</li>
<li>要想运行测试前需要先编译一下项目，否则会提示找不到基础的测试类，找到Gradle窗口，一般在右侧，点开找到kotlin-koans->Tasks->build->build，运行它</li>
<li>现在就可以用先进的TDD方式来学习Kotlin了，在Project视图下面，可以看到kotlin-koans项目，里面有两个，一个是java，一个是tests，这两个目录里面的子目录都是一一对应的，先运行tests下面的，会失败，然后编辑java/下面的对应的代码，直到测试通过。</li>
</ol>


<h2>Essence of Kotlin</h2>

<p>致此，我们可以看出Kotlin这门语言的设计的核心理念：简洁，这是Kotlin的核心理念，所以我们看到，一些机械的，重复的，可以从上下文中推测 出来的都 可以省略，以增加可读性。我们在使用Kotlin的时候要践行此理念，把语言的特性发挥到最大。
当然，简洁，不是牺牲可读性的方式来缩短代码，而是要使用语言中的标准的简洁的表达方式，比如lambda表达式，省略参数等。</p>

<p>要注意参考<a href="http://kotlinlang.org/docs/reference/coding-conventions.html">Kotlin conventions</a>以及<a href="https://android.github.io/kotlin-guides/">Android Kotlin conventions</a>以写出更加简洁和容易理解的代码。</p>

<h2>Android dev setup</h2>

<p>我们来新建一个项目，用纯Kotlin实现一个Hello, world Android应用，来展示一下如何在Android中使用Kotlin:</p>

<p><strong>注意</strong>: 这里使用的是Android Studio 3.1.2版本，默认就支持Kotlin，如果使用小于3.0的版本需要安装Kotlin插件，可自行Google，孤还是建议先升级AS吧。</p>

<ol>
<li>新建一个项目，其实流程跟新建一个普通Android Studio项目是一样一样的，从Android Studio3.0起，新建项目时就会有一个Checkbox，问你要不要添加Kotlin。这里把它选上。
<img src="https://wx2.sinaimg.cn/mw690/870ad0baly1frgfq2b7odj20p40ixwfe.jpg" alt="Step 1" /></li>
<li>就直接下一步就好
<img src="https://wx2.sinaimg.cn/mw690/870ad0bagy1frfm0n9r38j20p40ixq4g.jpg" alt="Step 2" /></li>
<li>Next，创建一个empty activity
<img src="https://wx2.sinaimg.cn/mw690/870ad0baly1frgfqcxzruj20p40ixmy3.jpg" alt="Step 3" /></li>
<li>Finish<br/>
<img src="https://wx3.sinaimg.cn/mw690/870ad0baly1frgfqcz4tpj20p40ixdgr.jpg" alt="Step 4" /></li>
<li>布局跟其他新建的Android项目无差别
<img src="https://wx1.sinaimg.cn/mw690/870ad0baly1frgfqd39n2j20sp0io78b.jpg" alt="Step 5" /></li>
<li>代码已经是Kotlin的了
<img src="https://wx4.sinaimg.cn/mw690/870ad0baly1frgfqczcpmj20nz0cegmo.jpg" alt="Step 6" /></li>
<li>直接显示&#8221;Hello, world&#8221;略显无聊，所以加一下点击事件：</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">HelloActivity</span> <span class="p">:</span> <span class="n">AppCompatActivity</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">super</span><span class="p">.</span><span class="n">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
</span><span class='line'>        <span class="n">setContentView</span><span class="p">(</span><span class="n">R</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">activity_hello</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="py">colorTable</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span><span class="s">&quot;#ff0000&quot;</span><span class="p">,</span> <span class="s">&quot;#00ff00&quot;</span><span class="p">,</span> <span class="s">&quot;#0000ff&quot;</span><span class="p">,</span> <span class="s">&quot;#ffff00&quot;</span><span class="p">,</span> <span class="s">&quot;#00ffff&quot;</span><span class="p">,</span> <span class="s">&quot;#ff00ff&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">label</span> <span class="p">=</span> <span class="n">findViewById</span><span class="p">&lt;</span><span class="n">TextView</span><span class="p">&gt;(</span><span class="n">R</span><span class="p">.</span><span class="n">id</span><span class="p">.</span><span class="n">label</span><span class="p">)</span>
</span><span class='line'>        <span class="n">label</span><span class="p">.</span><span class="n">setOnClickListener</span> <span class="p">{</span> <span class="n">view</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">randomIndex</span> <span class="p">=</span> <span class="p">(</span><span class="n">Math</span><span class="p">.</span><span class="n">random</span><span class="p">()</span> <span class="p">*</span> <span class="n">colorTable</span><span class="p">.</span><span class="n">size</span><span class="p">).</span><span class="n">toInt</span><span class="p">()</span>
</span><span class='line'>            <span class="n">view</span><span class="p">.</span><span class="n">setBackgroundColor</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">parseColor</span><span class="p">(</span><span class="n">colorTable</span><span class="p">[</span><span class="n">randomIndex</span><span class="p">]))</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实，整体来看，布局和项目的结构还是按照Android的方式来，唯一的不同是代码可以用Kotlin来写了。</p>

<h2>Good to go</h2>

<p>至此，Kotlin就算入门了，可以使用Kotlin来构建应用程序了，或者在你的项目中应用Kotlin了。</p>

<h2>参考资料和有用的资料分享</h2>

<ul>
<li><a href="https://kotlinlang.org/docs/reference/">官方文档</a></li>
<li><a href="https://www.kotlinresources.com/">Awesome Kotlin Resources</a></li>
<li><a href="https://developer.android.com/kotlin/">Kotlin and Android</a></li>
<li><a href="https://developer.android.com/kotlin/resources">Resources to Learn Kotlin</a></li>
<li><a href="https://learnxinyminutes.com/docs/kotlin/">Learn Kotlin in Y minutes</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初识微信小程序]]></title>
    <link href="http://toughcoder.net/blog/2017/01/16/mini-program-the-first-impression/"/>
    <updated>2017-01-16T22:03:35+08:00</updated>
    <id>http://toughcoder.net/blog/2017/01/16/mini-program-the-first-impression</id>
    <content type="html"><![CDATA[<p>微信小程序，可以说是最近比较火的一个话题了，到处都是小程序的新闻，于是孤也来凑一凑热闹，花了几个小时撸了一个程序员老黄历，来体验一下小程序。</p>

<p><a href="http://toughcoder.net/blog/2017/01/16/mini-program-the-first-impression/"><img src="https://img.alicdn.com/imgextra/i1/715978679/TB2Fuqbc4XlpuFjSsphXXbJOXXa_!!715978679.gif"></a></p>

<!-- more -->


<h2>体验小程序</h2>

<p>张小龙做事情还是很专业的，小程序的<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/index.html">开发文档</a>，注册流程，<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/devtools.html?t=2017112">开发工具</a>等都相当的完备，可与一些流行的开发平台媲美，不像其他国内的大厂，发布出来的东西，你按文档一步步操作都会出错。</p>

<p>所以，花几分钟时间读一读官文档就可以了，这里也不做准备重复文档。如何注册小程序，如何创建项目，如何搭建页面，照着文档做就可以了。作为体验官，从创建的基础项目开始就可以了，在app.json的pages列表中新添加一项时，开发工具就会自动创建page的目录，里面就有了标准的4个文件。然后分别修改就可以了。开发工具还是比较给力的，自动补全很强大，标准的JS以及平台的API都有自动补全，所以开发体验还是相当好的，所需要的知识就是标准的前端和微信平台的API。</p>

<p>代码在<a href="https://github.com/alexhilton/wechatminiprogram">这里</a>下载。</p>

<h2>小程序的本质</h2>

<p>脱去它那华丽的外衣，来看它的本质，其实体验过React Native的同学应该不会陌生，它的语法与RN很相似。可以这么说，没有非死不可的React Native可能就不会有今天的小程序。</p>

<p>最终在微信上看到的东西，都是由原生View来渲染的。这也是小程序与微信其他平台的最大区别。它的具体渲染原理，也与React native是一致的：编译完了，就是一个JS文件，交给微信来渲染，JS层有Virtual DOM，以及防止过多操作DOM的DOM diff。原生里面根据JS命令生成一个Node tree，由此再生成一个原生的View tree，把这个View tree渲染出来就是看到的页面了。至于平台API，理解成JSBridge就可以了。</p>

<p>关于更详细的小程序原理可参考<a href="https://mp.weixin.qq.com/s?__biz=MzIwNjQwMzUwMQ==&amp;mid=2247484837&amp;idx=1&amp;sn=29677c131aa6e2e68c1c47d3d847a9b4&amp;chksm=97236767a054ee718b08488c396bb342b90f28f11f68940d796c1f00f8cbac66cfb933121cb7&amp;mpshare=1&amp;scene=1&amp;srcid=0116a3fngVdcOBlquwBFfQEL&amp;key=7bdbb59233068edd2e9e41a905bb93bb630ea3bede3038db56d1479b415764dda35df9abf9015513b25eff1921c1791feda6e909b1c6ae05c3053de7bc272bba955c540a83b8a74d029d0ce370e01cd4&amp;ascene=0&amp;uin=MjQ2OTY4MDQ2NA%3D%3D&amp;devicetype=iMac+MacBookPro11%2C2+OSX+OSX+10.11.6+build&amp;lpar;15G1212&amp;rpar;&amp;version=12010210&amp;nettype=WIFI&amp;fontScale=100&amp;pass_ticket=7sJ42zJLD92bfTMSYrZSQCkU5DnK2xz4xhyYLRTGPrk6XIlr7thT07kjGSJYkQK1">这篇文章</a>。</p>

<h2>小程序的定位</h2>

<p>起初孤还想多撸几个小程序，但是在注册时却发现，小程序是不对个人开发者开放的，它只对政府，媒体，公司或者个体户开放注册，且认证审核非常严格，并且，一次注册只能开发一个小程序，换句话说，跟普通客户端的开发者帐号很大不同，客户端帐号注册后，可以开发任意多个应用。由此，可以看出小程序的定位，它只开放给服务提供商，目前服务在微信上有三种方式：订阅号，服务号和企业号。小程序，只是企业服务于用户的另外一种方式：它用最新的动态化技术，以前端开发的方式，用原生应用来渲染，提升开发体验和用户体验。它跟企业号本质上没有区别，能做的事情也不比企业号多。</p>

<p>其实，理解起来，小程序和现有的各种号的区别就是React Native与HTML5的区别，它们能做的事情是一样的，超过H5本身的东西，都需要原生应用来提供（React Native里叫API，H5里叫JSBridge）。它们的区别就在于开发体验&ndash;新的开发思想(react)，JFX；以及用户体验&ndash;渲染方式是原生 的方式，所以与原生 应用的体验是一样的。</p>

<h2>张小龙的克制</h2>

<p>一开始孤去注册，还很生气：这鸟东西竟然把个人开发者挡在外。但思考了一下，就明白了，这样做是非常正确的。为了防止小程序被滥用，失控，就好比安卓市场水果应用商店一样，各种应用参差不齐，病毒，木马，色情泛滥成灾，对微信平台本身也是一个威胁。可以看得出张小龙确实是一个非常出色的产品设计者，对于克制做得相当出色，全面放开小程序，可以迅速的出现大片大片的小程序，因为个人开发者的队伍是非常大的，这在数据上会非常的好看：看，小程序一开放就形成大平台了；看，程序有几十万的程序了，有近百万的下载量了；看，安卓和水果的猿们要失业了；看安卓市场们和水果应用商店要被小程序干掉了。</p>

<p>东西多了，不见得是好事，多了，就意味着杂了，乱了，不好管理了。从开发者注册入口严格把控，并且，每个注册的人只能开发一款小程序，这是非常聪明的决策，可以说是恰 到好处。另外一方面，只对团体开放，小程序就变成了一种插件，另外一种运营方式，而不是对安卓市场和水果应用商店 的一种竞争。如果对个人开发者开放注册，那么会有大量克隆安卓应用和水果应用的小程序出现，会对安卓市场和水果应用商店造成竞争，东西多了，杂了，对微信本身也是一种负担，微信会变得更加臃肿，更加耗费资源，更加的笨拙。</p>

<p>懂得产品和克制的张小龙做出的小程序对微信会有正向的促进作用。慢慢的其他大厂也会推出类似的东西，但我相信能对宿主应用产生正向促进的少。因为这东西会产生很多好看的数据，对KPI，对升官加薪都是大大的好。</p>

<p>多说一句，现在产品汪们都不敢拍脑袋了，因为会被开发challenge的很惨，于是现在流行用数据说话，但数据好就一定是好的产品设计么？很不一定，最简单的例子，16年支付宝多次的社交尝试（敬业福，校园日记，改密漏洞），数据上一定都非常好，但结果怎么样呢？这些超级app里（手机淘宝，微信，支付宝，UC等等），你随便做个功能，不用推广也可以达到DAU百万级，可以秒杀其他小厂辛苦砸钱的小app，但这又有何意义呢？就能说比小app做得好么？有种你离开超级app，做成独立app，再拿数据出来试试！好的产品一定是小而美，而非大而全，相信随着用户的科学素养的提升，这些臃肿的傻全黑粗，迟早被淘汰。</p>

<h2>安卓猿和水果猿大可不必担心</h2>

<p>小程序一发布，就有媒体说，<a href="http://news.mydrivers.com/1/500/500595.htm">好多应用可以卸载了</a>，<a href="http://it.sohu.com/20161228/n477174998.shtml">安卓和水果要失业了</a>，这些都是标题党，赚眼球，增加PV而已。其实大可不必担心。前面提到了，张小龙是懂得克制的人，他不可能让小程序泛滥，因为一旦泛滥，必然危及微信本身，会让微信本身变得非常难用，想想其他所谓的超级app（手机淘宝，支付宝等等），为什么难用，还不因为它里面有太多太多的东西（插件）了。另外，前面也提到，小程序之于公众号，就如React Native之于H5，它只是换了一种渲染方式而已，能做的事情没有变多，超出H5本身的东西都是需要宿主提供API的，所以小程序不可能提供超出微信本身功能的API，那样一来微信岂不是变成了一个操作系统了么？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为猿七年有余，痒否？痛否？]]></title>
    <link href="http://toughcoder.net/blog/2017/01/04/lessons-after-seven-years-of-programming/"/>
    <updated>2017-01-04T21:56:31+08:00</updated>
    <id>http://toughcoder.net/blog/2017/01/04/lessons-after-seven-years-of-programming</id>
    <content type="html"><![CDATA[<p>还未有感，已然岁末，犹叹时之箭逝去如斯也，稍纵命再减一。回首望，为猿七年有余已，虽不成气候，亦未全蹉跎。略做小结，以不惘逝去之时日，亦会大益于尔后路途。若博文能助足下之一二，孤将甚悦。</p>

<h2>职业是无数个连接起来的马拉松</h2>

<p>小学时，我们很清楚的知道5年后就毕业了（孤当年是五四制，现在貌似有的地方也是），无论多么讨厌老师或者 同学，或者学校，都知道最多忍5年就结束了；初中高中也一样，三四年样子，很快就过去了，多少欢乐悲喜都会很快的过去；大学更是如此，从入学进校园那天起你就开始倒计时，知道四年后的一天要离开，再怎么珍惜，再怎么蹉跎，时间仍然以它亘古不变的速度在向着一个方向跑着。</p>

<p><a href="http://toughcoder.net/blog/2017/01/04/lessons-after-seven-years-of-programming/"><img src="https://img.alicdn.com/imgextra/i2/715978679/TB2K0EEb8NkpuFjy0FaXXbRCVXa_!!715978679.jpg"></a></p>

<!-- more -->


<p>可职场呢？过了5年，你还在工作，还得工作；过了10年，过20年，30年甚至40年后，我们仍要工作。即使离职，也还要再入职，而且新工作跟之前没有本质的区别。明白了职场是一个40年的大周期，所以，这是一个超长的马拉松，没有中考冲刺，没有高考冲刺，更没有考个好大学，就可以随便玩了。没必要玩了命的冲刺，那样也没有好效果。更重要的是持续不断的学习，对，持续几十年的学习。</p>

<h2>成为高手，或者大牛的唯一途径是不断的学习</h2>

<p>不要梦想着进入大公司，进入牛逼的团队，坐在大牛旁边，或者多参加线下活动就可以成为大牛。这都是图样图奶衣物。大公司为什么要你？牛逼的团队为什么要你？首先你要是要有点本事才行；想要得到牛人的指点，是靠运气的。可能是电视剧看多了：你掉进山谷中，然后遇到了一个白猿，肚子里藏着九阳真经？或者滚下山谷，看到一个大雕，学会独孤九剑？芸芸众生全国数以百万计的程序猿，你觉得能遇到大神的机会有几成？大神愿意与你交流的机会又有多大？梦想大神手把手教你？除非你是他炮友。</p>

<p>当然，也确实有人足够幸运能够得到高人指点一二。但我们相信绝大多数人，即使牛人在你身边，你也没有足够的机会让他指点。公司雇我们来，是让我们干活的，让我们产生价值，为公司赚钱的。牛人的任务更重，事情更多，凭什么还让人指导你。</p>

<p>大公司资源和资料是多，培训的机会也多，但是也要你自己去看，去听去学习啊。各种线下活动，打广告的占大多数，其他的演讲也大都是提及皮毛，想要学到干货是不可能的，几十分钟他能讲出来多少？你又能领悟多少？所以线下活动是推广，开拓视野（能听到很多概念），拓宽人脉（确实能认识好多人，牛人和同水平的人）的好机会，而不是学习的机会。</p>

<p>一句话，想要成为高手，还是要去脚踏实地的学习，去啃书，去读代码，去撸代码，别无他法。关于这方面，可以参考一位大牛的<a href="http://www.techug.com/how-to-became-tech-giant">文章</a>，我觉得很在理。</p>

<h2>选择一个行业，或者一门技术，然后深耕</h2>

<p>虽然，不提倡像某些人那做什么五年计划，因为我们所处的行业，公司，项目，人事等变化的太快了，这些变化都是不确定因素，会打乱所有的计划，特别是长期计划。但是我们还是要有目标的，我相信对于大部分人，最终极的目标无非就是财务自由。如何才能财务自由，运气确实有一定作用，但更重要的还是要硬实力。什么是硬实力？也就是你能解决别人解决不了的问题，比如老板想作某一块的业务，你对业务规则特别熟悉，能带队帮老板搞定；再如，技术上遇到了问题，你能搞得定。没有实力，光有运气，即使你遇到了淘宝的崛起，现在也未必能财务自由。</p>

<p>硬实力从何而来？无非是积累。积累什么？才会越来越值钱？无非是行业或者技术。</p>

<p>什么是行业？汽车，是一个行业，金融是一个行业，服装是一个行业，旅游出行是一个行业等等；什么又是技术？安全，音频，Webkit，图像，深度学习等都是技术。身处一个行业，可能技术并不复杂用的都是常规技术，但是你能够对一一个行业深入的了解，它有哪些游戏规则，有什么坑，有什么政策法规，有什么风险，怎么样做才会有最大收益，这些都是只有从事行业有一定时间后才会知晓的。技术，就更好理解了，使用封装好的技术是容易的，比如像WebView，使用起来很方便，但它的技术实现—WebKit却是非常复杂的，没个几年时间是搞不清楚的。</p>

<p>当然，能始终在同一个领域（无论是行业还是技术）深耕是不容易的，要靠运气的。但是要明白，只有深耕一个行业，或者一门技术才会让自己的价值最大化。所以，当有选择时，尽可能的向着目标靠近。</p>

<h2>责任重于技术</h2>

<p>程序员的工作，无论是互联网，还是企业软件，都是工程，都是对技术的应用。大多数情况下，大多数人在工作中不会遇到技术上无法解决的问题，或者世界级的难题。换句话说，工作中遇到的问题，即使你不会，或者不知道怎么解决，通过查阅资料，书籍，网络和同事的帮助，很快就可以解决。再者，把代码写好，做足测试，加强健壮，这些事情，也并不是需要太高深，太前沿的技术。只要用心就能做的很不错。</p>

<p>相反，那些工作做的糟糕的人，并不是因为技术水平很差，别人对他的评价一定是不负责任，正所谓态度决定一切，态度产生的后果就是责任。即使技术水平一般，但是态度很认真，工作很负责，这就是优秀的员工，也是对公司更有价值的员工；而一些即使技术很强，但是却态度差，不负责任，这类人就是混吃混喝等死的人，是迟早要被拨掉的毒瘤。</p>

<h2>成为一个专业的程序猿</h2>

<p>这里的专业，更多的是指形式，做事的方法，解释什么是专业前，先看一些例子，什么叫不专业：</p>

<ul>
<li>电话面试时，不问对方能不能听清楚，就blahblahblah的开讲，结果讲了有十分钟，对方叹了一口气说，不好意思，信号不好，没听清。。。</li>
<li>比如电话面试时，候选人说我先找一个方便的地方，找到后，打电话过来，说找到了，然后就开始电面了，这是候选人打过来的电话啊。。。</li>
<li>比如开会迟到，比如开会时扯闲篇儿。。。</li>
<li>没弄清楚事情原委就妄下结论，特别是脾气急的人，甚至开始骂人。。。</li>
</ul>


<p>我相信这类事情举不胜举，我也非常肯定的相信，猿媛们在日常的工作也经常遇到这样的事情。我们针对此类事情常常会回应“不专业”，对，这就是不专业。反过来就是专业：
电面前，先都问清楚对方是否能听清楚，然后再blahblah；候选人告诉你，我现在方便了可以电面了，这是一个通知啊。你要挂掉，然后再打过去；开会有明确的主题，不要迟到；弄清原委后，再骂人。。。等等。</p>

<h2>闻道有先后，术业有专攻，如是而已。</h2>

<p>知识是无穷无尽的，总有你不知道的，总有你不会的，即使你当了几十年的程序猿，号称啥都会，人送外号万事通，但想把你问倒，也不是难事儿，一个学校里的孩子也有你不知道的知识。软件行业，分为众多领域，都说隔行如隔山，但是不同的领域也有鸿沟，比如做客户端，后端，前端，驱动，游戏引擎，图形图像，安全等等。所以，我们要保持一颗求知的心和一个谦虚的态度，即使你是前端大牛，但当你遇到驱动上的问题，你就是个白痴，就要虚心的去学习，去向别人请教。</p>

<p>另外，就是面试时，身为掌握生杀大权的面试官，更是要拿出对候选人的尊重，不能因为别人的出身（非科班或大专），经历（小公司，外包公司），经验（经验少，项目无亮点），不是很对口（你需要客户端，他大部分经验是前端）等非技术原因，而在面试时故意刁难，或者“明摆着不想要你，但是为了应付领导不得不面试”，或者因为其他原因来鄙视候选人（曾遇到过，一个外企的人，鄙视国内公司的人，说国内都是抄外企的）。正所谓疑人不用，用人不疑，身为面试官，你可以pass掉这个人，这是你的权利，但是你必须尊重别人，即使这个人能力确实不咋地。谁都有低头的时候，外企就牛么？国内的外企不也是总部的外包，竟干点杂活儿，Motorola当年多么牛逼，待遇也好，招人也挑得不行，现在不也都树倒猢孙散！老话讲不要装逼，迟早遭雷劈！</p>

<h2>如何停止迷茫的眼和沉降浮躁的心</h2>

<p>每当迷茫的时候，都是对未来想太多，当下做的太少导致的；每当浮躁的时候，都是期望的太多，做到的又太少时导致的。无论将来，你怎么样，将去向哪里，最关键的，是要从当前开始，你无法梦想着直接飞到那里，没有直升机，也没有热气球可以拨地而起，只能从当前开始，脚踏实地的，一步一个脚印的往前走。
这还是有点空，有点鸡汤，下面来说说具体如何做：</p>

<ul>
<li><p>首先，搞清楚你自己的做什么的？</p>

<p>  对，死写代码的。写哪一层代码的？安卓？水果？应用？Frameworks？驱动？哪一领域的？图形图像？Webkit?网络？BlueTooth?金融？安全？什么，不写代码，只是维护解bug（有相当部分的人，比如安卓整机方案的人都是只维护解解bug），也一样，哪一层的？哪一领域的，搞清楚；</p></li>
<li>然后，弄清楚自己是干啥的了，这就好办了，把你该做的事情，做好，做熟悉，做到你只用半天时间就能完成一天该做的事情。</li>
</ul>


<p> 写代码，要学习如何把代码写的又好又快，也就 是能快速的完成指定需求，bug又少，升华一下，又包括把代码写得清爽，易懂，结构合理，命名易懂等等，这个是基本功的修炼，且一直被人忽视，因为几乎所有公司的KPI里不会涉及到代码的好与坏，顶多是bug的多与少，crash率，性能和稳定性，这些是软件的指标，而非代码，衡量代码好与坏，最好的办法是看接手你代码的人的反应，看他骂你的次数。代码的修炼可以看《代码大全》《整洁代码之道》这些书，更重要的是看优秀的开源代码。</p>

<ul>
<li><p>另一个，就是熟悉现有的代码，争取做到，每当一个新需求过来时，你知道要改动哪些类，要在哪里添加新代码；改bug时，你想一想，就知道bug大概出现在什么位置，是哪个类，哪个方法导致 的了问题。</p></li>
<li><p>还有就是熟悉业务逻辑，任何软件都是为了实现业务而做的，熟悉业务逻辑，先是你负责的小模块的逻辑，然后是整个软件的业务逻辑，这对新评估需求，解bug，都非常有好处，你会站在一个整体的角度去思考。有一些具体的指标，比如你可以整理了需求文档，以及由此可以产生各种测试用例和场景，这对你验证代码的正确性很有帮助。</p></li>
<li><p>之后，就是准备好，并备份常用的测试环境，测试数据和测试用例，有新的需求，和解bug后，也都要整理并添加到测试库中，方便自测和回归。虽然有QA来保证软件质量，但是我们的软件，拿到给QA前起码要是能work的，需求要能满足的。总而言之，专业的程序员自己是要做足够的测试的。而测试，有时候不是那么的方便，比如，对于客户端而言，常发生的事情是，后端数据还没好，你需要mock数据；有些数据是少数场景才出现的，也需要mock着来测试；上线前要在测试环境里，用测试服务器来测试；等等。这里的意思是，如果你经常需要这些东西，比如mock数据啊，代理啊，等等，就要去花点心思，整理并备份，甚至想办法，写代码也好，用开源库也好，搭建好方便使用的测试环境，这对开发来说是很有帮助的。可能你会有印象，一个bug，改起来很容易，但是验证它却很困难，要挂代理，mock数据，模拟特殊场景，调整网络环境等等。</p></li>
<li><p>还要备份常用的环境配置，比如你的代码会针对不同的场景有不同的定制，这时，最好的方式是各拷贝一份，每一份都配置好，而不是用不同的分支，即使这也能做到。原因有二:</p>

<ul>
<li>代码分支虽然可以区分不同的代码，但是环境依赖配置往往不会在repo里，意味着你切了分支后，还是要去搞一下环境配置，弄一弄依赖；</li>
<li>另外一个原因是并行的问题，假设你在A版本的分支上正在开发新功能，这时B版本（假设A与B是给不同客户的，二个分支有差别）要修Bug，你说你是切分支方便，还是说到另外一个目录去搞方便，我觉得还是这种物理隔离的要好。</li>
</ul>
</li>
</ul>


<p> 混了几年的后，我们深知，环境配置也是开发的一部分，而这通常都很麻烦，会让一个看起来十分钟搞定的事情，最终变成搞了二天，可能还没有搞定。现在的代码都很复杂，复杂之处在于，它本身不复杂，但是依赖特别复杂。大家常折腾开源软件，应该知道，一个库本身本身可能不复杂，但想要用它，要安装配置一坨一坨的依赖，试想一下，如果不用包管理器(apt-get，brew，pip之类）的，你自己手动去装一个opencv试试，或者直接编译它的源码试试。</p>

<ul>
<li><p>上面这些做到了后，我相信份内的事情对于你来说，都不是事儿了。这时，就要去深入学习了，把你所依赖的东西搞清楚。比如你用到了网络库，像OkHttp，像Retrofit，它们为什么比原生的要好用？它主要的原理是什么？它的封装思想？再如图片加载库UIL，Picasso等，它的原理是什么？所依赖的底层库，封装的都特别好，用起来很方便，越是这样的库，如果你只知道怎么用，那就完了。因为即使没用过的人，花几分钟看下教程也都知道怎么用。只有深入了解实现细节，并学习使用高级用法，才能不惘你用过一回这些优秀的库。</p></li>
<li><p>此外，无论是哪个领域，哪一层，性能调优都是一个高手的象征，项目的性能调优工作一般都是由高手来负责的。所以，如果你学习，并实践过性能调优，对技能的提升绝对是一个大推力，面试时也会是一个大大的加分项。</p></li>
<li><p>最后，就是用心，认真的对待工作，认真对待每一行代码，每一个bug。即使你不喜欢现在的工作，即使你觉得你现在就是在浪费时间，浪费生命，每天都改改bug，毫无乐趣，但你也要认真对待，把工作做好。所谓拿人钱财替人消灾，你拿了公司的薪水，就要把工作做好，他日你能高就，那是另外一回事，是他日的事情，今天你在这儿，就要把该做的事情做好。如果特别浮躁，眼高手低，总是糊弄，你觉得你能高就么？老板会把更重要的事情交给你？虽然，这个世界千奇百怪，确实有人不是因为技能得到了更高的工资，更好的工作，但我相信大部分情况下，还是成正比的，待遇比你好的人还是有正面的理由的。如果你不服，那么就更要用心的去努力，他日高就时，证明给别人看：老子比你们都强！</p></li>
</ul>


<p>如果你能做上面建议的几点，略加坚持，不出半年，肯定会有质的变化。</p>

<h2>去他妈的职业规划和长期计划</h2>

<p>职业规划是一个方法论的东西，比他妈的设计模式还不靠谱。长期计划更是害人的东西，超过一年的计划，甚至 超过6个月都是扯蛋。你去问那些大牛，没几个有他妈的明确的职业规划和长期计划的。他们的共同特点 是：擅长深挖，能啃书，能读代码，思维活跃，思路清晰，解决问题时，人家的思路就比你的更优雅。
为什么说这玩意没卵用，是因为现实生活中变化真的太快了。项目，做几个月之后 可能就不做了；人员，今天张三离职了，明天李四转岗了；没等你做完呢？需求改了，或者这个运营活动不做了，因为老板经费不给批。。。。</p>

<p>说个具体的身边的例子吧：去年团队来了个实习生，是按安卓客户端招的，来了后，头一个星期也是安排的安卓的活儿，第二个星期，来了一个新的大需求，需要H5（Mobile HTML5），结果这孩子就要去做H5（要现从头学JavaScript），过了大概三个月，公司政策变化，用不了那么多实习生，结果这孩子 就得回学校了。如果你是这孩子，你连一个月的学习计划都没法实现，因为你都不知道下周，甚至明天会发生啥事情。</p>

<h2>想要获得一个更好的成长学习环境就是要去大公司</h2>

<p>去大公司还是小公司，这个可以列为与C和C++之争，GNOME和KDE之争以及Vim和Emacs之争同等的一个不朽的话题。孤认为，当你处在职场初期，比如刚毕业，或者毕业二三年之内，大厂无疑是一个非常好的选择，这里的大厂包括国内一流的公司比如BAT，网易等国内知名大厂，以及大的外企，如Intel，Microsoft，非死不可，谷哥等等。</p>

<p>接下来说原因：公司雇我们来是干活的，是为公司创造价值，是帮公司赚钱的，不是让你来学习，让你来开拓视野，让你来接近牛人，让你来讨论问题的。大厂，因为它很大，有稳定的收入来源和赢利能力，所以，它的节奏是有规律的，是相对宽松的，它的项目要么是成熟稳定的，要么不是为了短期赢利而开展的。所以，它在人才的培养方面，是有计划的，换句话说，能够容忍你去学习，甚至是稍微放慢一下工作任务（我说的是稍微放慢），因为公司也期望你去学习，提升自己的技术和能力，公司也有会有这样的空间来接纳更好的你，说白了，有足够的空间让你提高和上升，更会有时间和耐心来让你完成这一过程。小厂能有这样的空间吗？能允许你说，我先学几个月？没准几个月后，你学成归来时，公司可能都倒了。</p>

<p>另外，大厂里人多，好人多，牛人多，坏人也有，水货也不少，你可以认识更多的人，你可以了解大厂是如何运作的，大厂是靠什么发展成为这么大，以及大厂如何保持运转而不衰落，大厂里，你可以有时间和空间去学习，能开阔视野，能拓展人脉，这都是小厂无法做到的。</p>

<p>一句话，当你处在职业的快速学习期时，大厂是最佳选择；而当你感觉学有所成，或者遇到了新的瓶颈时，这时小厂就是你大展拳脚的好去处。所以，你看，从BAT出来的人，无论是创业还是加盟创业，都是一个非常好的归宿，这是双赢，对于我们，小厂里空间更大，人少事多，是你施展大好舞台；而小厂也恰恰需要这种以一当十，即是CTO又是程序猿，即是开发又是运维的复合型人才。</p>

<h2>沟通以及代码可维护性取决于作者是否能为他人着想</h2>

<p>如果一个人肯为他人着想，会换位思考，我相信，他的沟通能力一定不会差；他写代码的可读性也不会太差。如果你不顾别人，只管自己说，说完拉倒，这怎么沟也不会通；如果你想不到别人会维护你的代码，甚至想不到日后自己也得看现在写的代码（看，都不为自己着想），这代码要是可维护，算孤白活。</p>

<h2>攘外必先安内</h2>

<p>委座这句话还是相当有水平和内涵的，也具有指导意义。我对这句话的理解是，小到个人，团队，部门，大到公司和国家不能同时进行二个或多个大事情，只有把一个搞定了，才能去搞其他的，有点不好理解，待孤慢慢讲。</p>

<p>所谓温饱思淫欲，当你下个饭辙都没有时，你还考虑什么泡妞？当你一门技术，一个编程语言，一个平台都没学明白的时候，想什么跨端，想什么技术的广度？都是扯蛋。到外挖井，挖的也不深，最终一辈子也挖不到水，正所谓10个10%不等于一个100%；</p>

<p>再比如团队，每次发版本都搞得鸡飞狗跳的，还谈什么XP，搞什么技术创新？好好的把业务需要的技术搞熟悉，搞透彻，先把份内的事情做好，轻松的做好，当你每次发版本都能轻松应对时，甚至原本10个人的活5个人就能搞定时，这时才是你去搞技术创新，搞什么UT啊，什么XP，什么技术驱动，什么工程师文化啊；</p>

<p>大到公司，当前的领域内，都没有占有稳定的市场份额时，就学人家搞什么布局，人家搞金融，你也搞，人家搞汽车，你也搞，人家搞影业，你也搞，这早晚会把自己玩儿死，就比如当下的贾布斯，乐视的电视，手机，体育，哪个占有稳定的市场份额了？哪个能担起养家的重任？这个时候你去玩布局？搞什么汽车？这就叫No zuo，No die。马老师是擅长布局，但是都是在一个领域垄断了时：当年搞淘宝，是因为B2B站稳了脚跟，能养家了，换句话说B2B已经做的差不多了，且占了大部分的市场份额，能赚钱，即使淘宝失败了，赔了钱，都不是事儿。后来搞阿里云，现在的什么影业，菜鸟，双H，这都是要持续砸钱的，为啥，因为淘宝和天猫能养得起整个阿里，即使这些都赔了，也赔得起。</p>

<p>大到国家也是如此，当人民还吃不饱穿不暖时，谈什么精神文明建设，谈什么科技创新？比如七八十年代的中国，十几年前的东南亚（那几个比较弱的国家，不是四小龙），搞什么环境保护，对于人类来说，当面临人类的自身的生存和环境保护的选择时，只能选择前者。所以，在一个不发达国家向中等发达国家迈进的时候，经济发展始终是第一位的，人类发展过程都一样，都是先污染，求发展，再治理。</p>

<p>说到这里，我相信你已经明白孤的意思了。</p>

<h2>提高竞争力，以增值</h2>

<p>什么是竞争力，我觉得就是要多多培养那些不是Google一下就能解决的问题的能力。说白了，就是知识体系。Google一下能解决的问题，一定是一个点。StackOverFlow也好，博客也好，说的都是一个点的问题，不可能太大，因为大了的话一篇文章怎么能讲的清楚。多个点，且经过连接就成体系，这是需要长时间多次Google，外加思考总结而形成的，这就是竞争力。也是老鸟的价值所在。</p>

<p>很多人都在争论，30岁以后要不要写代码啊？40岁以后怎么办啊？确实，随着年龄的增长，人的身体，精力都会走下坡，不能再像年轻时那样熬夜，所以30多岁的一线人员的处境非常的不容易。刚毕业的前几年，是快速成长期，只要你肯努力学习，技能水平，收入都是直线上升的，但是接近30岁的一线码农，再想技能水平收入直升，就相当的困难。家庭，生活和身体原因让你没有那么 多时间去学习了。这时，你能做的事情，刚毕业二三年的人也能做，他们精力更旺，身体更好，所以很多人要么转管理，要么转行，剩下的也总是在琢磨啥时候转。</p>

<p>我觉得，造成这种尴尬的境遇最重要的原因还是未能持续学习，未形成足够多的竞争力。即使你没成为管理者，没成为大拿级别的人物（现实生活中不可能每个30岁后都成为管理者，都成为大拿），如果你持续学习，不断提升竞争力，你总是会增值的，即使每年公司仅给你普涨工资。</p>

<p>工资，我们要以单位时间来算，假设月薪2150块，这其实是21.5x100得来的，你请一天假，是要扣掉100块的，再换算，8x12.5＝100，也就是说你的时薪是12.5大洋。二个人的月薪假设都是2150，但是一个人水平高，一天的活，2小时搞定，一个月的活一个星期搞定；跟另外一个天天还得加班才搞的完。哪个薪水高？当然，这里是做了很多简化，现实生活要比这个复杂。虽然，都有快速成长期，公司也有快速膨胀期，但最终，都会达到稳定，所谓稳定，就是你遇到瓶颈。比如像BAT等大厂里的大部分人，拿阿里来举例，绝大部分人，升到P7后，肯定就止步于此，不当主管升P8是很困难，而且只会越来越困难。那么这些人，每年只能被普涨工资，要想提高工资水平，只能靠提升自身工作效率来增值。</p>

<p>有人也许会说，这不太现实啊，活儿不一定会平均 分配的，老油条可能会被分配更多的任务。其实，这个决定权在于自己，都已经是老油条了，看不到上升的希望了，为什么还要多干？这是一个屁股决定脑袋的时代，也可以理解为工资决定责任的时代，员工付出多少努力取决于给多少工资。说不好听的，给一个应届生的薪水，还指望着，干着架构师的活儿，担着CTO的责任，只有处在职业初期，快速学习成长的时候才会干，并且一旦感觉学有所成，立马高就。</p>

<p>总之，不断的学习和总结，多多培养竞争力，才能做到越老越值钱。</p>

<h2>要事不一定非优先</h2>

<p>当有多件大事情要做时，比如一个新功能，一个是已上线版本的几个bug，还有设计下个月的一个运营活动的技术方案，当这三个事情摆在面前时，只能先选择最重要的事情来做。这个确实是要应用要事为先的原则。</p>

<p>但假如，还有一些其他小事情要做：比如，充个话费；到网上买个东西；升级一个软件等，这些10分钟内可以搞定的小事情，最好还是先做了。这样你的头脑就清静了，不会老想着“要记得充话费啊”，这些小事情本来就容易被忘记了，所以大脑会潜意识的提醒我们。这会打扰正常的工作思维，影响思维的集中度，从而影响重要事情的效率。而且，按要事优先也会造成到晚上了这些小事情还没有做完，而推到第二天。</p>

<p>区分的原则就在于：如果一件小事情可以10分钟内搞定，那么就迅速搞定它。要明白，你的ToDo列表越短越好。那些需要半天或者一天才能搞定的事情，当然还是要按照要事优先的原则来办。</p>

<h2>不要努力加班做业务，而是要加班学习</h2>

<p>软件行业，加班是难免的，特别是互联网行业，现在的移动互联时代996更是一个普遍现象。也许会感觉到充实，也许会感觉到成就，也许会感觉到累？但是黄牛式的，天天加班做业务，起码对于个人的成长来说是最致命的。现在年底了，你回头想一下，这一年都做了什么？有哪些成长？你会发现，你做了很多事情，但是成长很少。遇到不会的东西，网上搜一搜，copy一下，就完了。业务做了那么多？你会有成就感 么？程序员的成就感更多是源于自己的成长，能够做到以前做不到的事情，而非天天搬砖。</p>

<p>举个例子，你会盖房子，但这一年，都是在盖同样差不多规格的房子，能有多大长进？什么时候来一个盖漂亮城堡的活，你能接得住么？公司给我们钱，是让我们产生价值的，对于公司来说房子就价值，只要我们能多产出房子就值了付给我们的薪水了，等哪天你老了，病了，不能盖房子了，他们立马会找一个更年轻力壮的人来替你。而你如何升级为盖城堡的人，公司根本不管。</p>

<p>所以，如果你感觉天天在搬砖，几个月了，甚至半年了，毫无进步，没学习新东西了，也没有搞清楚遇到的问题，这时就要注意了，要减慢搬砖的速度，哪怕不要KPI了，要停下来学习学习，总结思考一下，如何做得更好。比如，有些重复的工作，是不是可以用脚本，像打包，发布之类；比如对于产品和运营过来的需求，要合理的拒绝；比如对于重复性的运营活动，是不是可以搞些配置模板等等。</p>

<p>天天加班做业务，是不会有进步的。要想进步，只能学习。</p>

<h2>学会聪明的做事</h2>

<p>考试时，最好的方法是什么？不是瞎猜，不是自己做，而是抄正确的答案。一个活分配下来了，最好的方式是什么？不是自己干，即使你早已驾轻就熟，而是让别人替你完成。最省力，最轻松的做事方法是，让别人来做。完成一件事情的方法有很多，我们要选择成本最低的方式。</p>

<p>这里，不是说让大家投机取巧，把本该自己做的事情推给别人，当然如果你有那个本事推给别人，别人又愿意接也可以。而是说要聪明的做事，<strong>不要把精力耗在本该别人负责的事情上</strong>。比如，现在的软件依赖都比较复杂，问题通常都会通过上层来表现出来，如果你发现，这个是底层引起了，那就不要去查了（如果时间充实，为了学习和研究的情况除外），让相应的负责人来查就好了，他对此更加的熟悉，可能 你花一天功夫也没弄明白的，人家一眼就搞定了。</p>

<p>再有就是，一些烦人的手工操作，重复性操作，要写脚本来完成。计算机最大的优势是能够重复且不犯错的完成任务，它的最大优势 在于重复，人的重复性没有计算机好，而且会犯错，像拼写错误等。像打包，发布，等等很多事情都可以用脚本来完成。</p>

<h2>学会利用程序员的优势</h2>

<p>软件再也不是大学实验里，让人们琢磨不透，看起来很神秘的东西了，它已经融入了人们的生活，广场舞的大爷大妈们都也用上了智能手机，用上了微信，淘宝。我相信，问软件人员会修电脑的人会越来越少。这意味着我们每天都要跟软件打交道，离不开软件 了。身为会写软件 的人，就要利用好自身的优势，下面来举例来说一说：</p>

<ul>
<li>要能识别出各种钓鱼短信，欺诈短信电话；如果身为一个程序员还被电信诈骗骗了的话，只能说这个猿太失败了。</li>
<li><p>对于各种软件，也要能够识别出，哪个是真的，哪个山寨的，假的，哪个可能有病毒，哪个可能有木马。更要有安全意识，现在手机应用和网站的个人信息泄露非常严重，所以，更要注意管控手机应用的权限，能少注册网站就少注册等。除了自身要注意信息安全，更要提醒身边的人。</p></li>
<li><p>再比如，普通人获取信息的方式是上网站，用搜索引擎，但是猿媛是不是可以用爬虫呢？</p></li>
<li>再比如像抢红包，抢票，秒杀（不要去秒月饼哈）刷投票，刷评论等，普通人靠人肉，靠手工，靠发朋友圈，我们身为猿媛是一定要靠 技术的，写个脚本，写段代码来帮我们完成这些事情，这也是我们从事的职业所带来的一个优势。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让你不再俱怕Fragment State Loss]]></title>
    <link href="http://toughcoder.net/blog/2016/11/28/fear-android-fragment-state-loss-no-more/"/>
    <updated>2016-11-28T20:57:36+08:00</updated>
    <id>http://toughcoder.net/blog/2016/11/28/fear-android-fragment-state-loss-no-more</id>
    <content type="html"><![CDATA[<p>使用过<a href="http://www.android-doc.com/reference/android/app/Fragment.html">Fragment</a>的人我相信对臭名昭著的状态丢失问题（<a href="https://www.google.com.hk/webhp?sourceid=chrome-instant&amp;ion=1&amp;espv=2&amp;ie=UTF-8#q=IllegalStateException%3A%20Can%20not%20perform%20this%20action%20after%20onSaveInstanceState">IllegalStateException: Can not perform this action after onSaveInstanceState</a>）一定不会陌生。曾经被这个问题困扰了很久，相信很多同学也是。花些时间来好好把它研究一下，以弄懂为何会有这样的问题产生，然后就可以解决问题，或者合理的规避问题。</p>

<p><a href="http://toughcoder.net/blog/2016/11/28/fear-android-fragment-state-loss-no-more/"><img src="https://img.alicdn.com/imgextra/i2/715978679/TB2lTose0uO.eBjSZFCXXXULFXa_!!715978679.png"></a></p>

<!-- more -->


<h2>什么是状态恢复</h2>

<p>安卓的状态恢复是一个比较令人困惑的特性，它源于拙劣的系统设计。当一个页面正在显示的时候，如果系统发生了一些变化，变化又足以影响页面的展示，比如屏幕旋转了，语言发生了变化等。安卓的处理方式就是把页面（Activity）强制杀掉，再重新创建它，重建时就可以读取到新的配置了。又或者，当离开了一个页面，再回到页面时，如果页面（Activity）因为资源不足被回收了，那么当再回到它时，系统也会重新创建这个页面。</p>

<p>状态恢复，是为了保持更好的用户体验，让用户感觉认为页面，是一直存在的，类似于处理器调用函数的保护现场和恢复现场。</p>

<p>Activity有二个钩子onSaveInstanceState和onRestoreInstanceState就是用来保存状态和恢复状态的。</p>

<p>当从Honeycomb引入了Fragment后，为了想让开发者更多的使用Fragment，或者想让Fragment更容易的使用，状态保存与恢复的时候也必须要把Fragment保存与恢复。Fragment本质上就是一个View tree，强行附加上一些生命周期钩子。所以，为了让页面能恢复成先前的样子，View是必须要重新创建的，因此Fragment是必须要恢复的。</p>

<p>Fragment的作用域是Activity，<a href="http://www.android-doc.com/reference/android/app/FragmentManager.html">FragmentManager</a>管理着一个Activity所有的Fragment，这些Fragment被放入一个栈中。每个Fragment有一个<a href="http://grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android/5.1.1_r1/android/support/v4/app/Fragment.java#FragmentState">FragmentState</a>，它相当于Fragment的snapshot，保存状态时FragmentManager把每个Fragment的FragmentState存储起来，最终存储到Activity的savedInstanceState中。</p>

<h2>为什么会有这个异常</h2>

<p>既然状态的保存与恢复都必须要把Fragment带上，那么一旦当Fragment的状态已保存过了，那么就不应该再改变Fragment的状态。因此FragmentManager的每一个操作前，都会调用一个方法来检查状态是否保存过了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">checkStateLoss</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mStateSaved</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span>
</span><span class='line'>                    <span class="s">&quot;Can not perform this action after onSaveInstanceState&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mNoTransactionsBecause</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span>
</span><span class='line'>                    <span class="s">&quot;Can not perform this action inside of &quot;</span> <span class="o">+</span> <span class="n">mNoTransactionsBecause</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Fragment状态保存是在Activity#onSaveInstanceState时做的，会调用FragmentManager#saveAllState方法，来进行Fragment的状态保存，同时设置mStateSaved为true，以标识状态已被保存过。</p>

<h2>发生的场景以及如何应对</h2>

<h3>FragmentTransaction#commit()</h3>

<p>栈信息是这样子的：</p>

<blockquote><p>java.lang.IllegalStateException: Can not perform this action after onSaveInstanceState
   at android.support.v4.app.FragmentManagerImpl.checkStateLoss(FragmentManager.java:1341)
   at android.support.v4.app.FragmentManagerImpl.enqueueAction(FragmentManager.java:1352)
   at android.support.v4.app.BackStackRecord.commitInternal(BackStackRecord.java:595)
   at android.support.v4.app.BackStackRecord.commit(BackStackRecord.java:574)</p></blockquote>

<p>或者是这样的:</p>

<blockquote><p>java.lang.IllegalStateException: Activity has been destroyed                                                                               <br/>
at android.app.FragmentManagerImpl.enqueueAction(FragmentManager.java:1456)                                                                                 <br/>
at android.app.BackStackRecord.commitInternal(BackStackRecord.java:707)                                                                              <br/>
at android.app.BackStackRecord.commit(BackStackRecord.java:671)                                                                                  <br/>
at net.toughcoder.miscellaneous.FragmentTestActivity</p></blockquote>

<p>原因就是commit操作发生在了状态保存之后。Activity#onSaveInstanceState的调用是不受开发者控制的，并且不同的安卓版本之间存在差异。具体的可以参考大神的<a href="http://www.androiddesignpatterns.com/2013/08/fragment-transaction-commit-state-loss.html">文章</a>。</p>

<p>解决之道，如大神提的一样，就是保证Fragment的操作发生在Activity可见周期之内，换句话说，Fragment的操作应该发生在Activity#onResume与Activity#onPause之间，为什么限制这么死呢？一方面为了防止上面问题发生；另外，Fragment本质上是View，View的操作理应该是页面处于活动状态时才应该进行。</p>

<p>关键的点就是小心控制异步任务，在onPause或者最迟在onStop中要终止所有的异步任务。</p>

<p>另外，大招就是使用commitAllowStateLoss。</p>

<h3>Activity#onBackPressed</h3>

<p>还有一种情况，也会出现此异常，而且是在Activity中完全 没有Fragment的情况下：</p>

<blockquote><p>java.lang.IllegalStateException: Can not perform this action after onSaveInstanceState
                                                                                   at android.app.FragmentManagerImpl.checkStateLoss(FragmentManager.java:1434)
                                                                                   at android.app.FragmentManagerImpl.popBackStackImmediate(FragmentManager.java:577)
                                                                                   at android.app.Activity.onBackPressed(Activity.java:2751)
                                                                                   at net.toughcoder.miscellaneous.FragmentStateLossActivity.onBackPressed(FragmentStateLossActivity.java:90)
                                                                                   at net.toughcoder.miscellaneous.FragmentStateLossActivity$1.run(FragmentStateLossActivity.java:59)
                                                                                   at android.os.Handler.handleCallback(Handler.java:751)
                                                                                   at android.os.Handler.dispatchMessage(Handler.java:95)
                                                                                   at android.os.Looper.loop(Looper.java:154)
                                                                                   at android.app.ActivityThread.main(ActivityThread.java:6077)
                                                                                   at java.lang.reflect.Method.invoke(Native Method)
                                                                                   at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:865)
                                                                                   at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:755)</p></blockquote>

<p>或者是这样的：</p>

<blockquote><p>java.lang.IllegalStateException: Can not perform this action after onSaveInstanceState
                                                                                     at android.support.v4.app.FragmentManagerImpl.checkStateLoss(FragmentManager.java:1500)
                                                                                     at android.support.v4.app.FragmentManagerImpl.popBackStackImmediate(FragmentManager.java:584)
                                                                                     at android.support.v4.app.FragmentActivity.onBackPressed(FragmentActivity.java:169)
                                                                                     at net.toughcoder.miscellaneous.FragmentStateLossActivity.onBackPressed(FragmentStateLossActivity.java:90)
                                                                                     at net.toughcoder.miscellaneous.FragmentStateLossActivity$1.run(FragmentStateLossActivity.java:59)
                                                                                     at android.os.Handler.handleCallback(Handler.java:751)
                                                                                     at android.os.Handler.dispatchMessage(Handler.java:95)
                                                                                     at android.os.Looper.loop(Looper.java:154)
                                                                                     at android.app.ActivityThread.main(ActivityThread.java:6077)
                                                                                     at java.lang.reflect.Method.invoke(Native Method)
                                                                                     at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:865)
                                                                                     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:755)</p></blockquote>

<p>这二个异常都是发生在没有使用Fragment的Activity中。相当的诡异，根本没有用Fragment为何还会抛出State loss的异常。只能从栈信息中的方法开始分析：</p>

<p><a href="http://grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android/5.1.1_r1/android/app/Activity.java#Activity.onBackPressed%28%29">Activity的onBackPressed</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onBackPressed</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mActionBar</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">mActionBar</span><span class="o">.</span><span class="na">collapseActionView</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">mFragments</span><span class="o">.</span><span class="na">popBackStackImmediate</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">finishAfterTransition</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以及<a href="http://grepcode.com/file/repo1.maven.org/maven2/com.google.android/support-v4/r7/android/support/v4/app/FragmentActivity.java#FragmentActivity.onBackPressed%28%29">FragmentActivity的onBackPressed</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onBackPressed</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">mFragments</span><span class="o">.</span><span class="na">popBackStackImmediate</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">supportFinishAfterTransition</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>从其源码中不难看出，响应BACK键时，一定会去pop fragment。前面提到过，<a href="http://grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android/5.1.1_r1/android/support/v4/app/FragmentManager.java#FragmentManagerImpl.popBackStackImmediate%28%29">FragmentManager</a>在改变Fragment的状态前（增加，移除，改变生命周期状态都是改变状态）都会检查state loss：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">popBackStackImmediate</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">checkStateLoss</span><span class="o">();</span>
</span><span class='line'>    <span class="n">executePendingTransactions</span><span class="o">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">popBackStackState</span><span class="o">(</span><span class="n">mActivity</span><span class="o">.</span><span class="na">mHandler</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>前面说了，checkStateLoss其实就是检查mStateSaved这个变量是否为true。那么都哪里给它设置为true了呢？对于正统的Activity和Fragment（android.app.*），是在<a href="http://grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android/5.1.1_r1/android/support/v4/app/FragmentManager.java#FragmentManagerImpl.saveAllState%28%29">onSaveInstanceState</a>时，且只有这时才设置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Parcelable</span> <span class="nf">saveAllState</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Make sure all pending operations have now been executed to get</span>
</span><span class='line'>    <span class="c1">// our state update-to-date.</span>
</span><span class='line'>    <span class="n">execPendingActions</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">mStateSaved</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="c1">// other codes.</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是对于support包中的Fragment（android.support.v4.app.*）除了在onSaveInstanceState中设置以外，在<a href="http://grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android/5.1.1_r1/android/support/v4/app/FragmentManager.java#FragmentManagerImpl.dispatchStop%28%29">onStop</a>中也把mStateSaved置为true：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">dispatchStop</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// See saveAllState() for the explanation of this.  We do this for</span>
</span><span class='line'>    <span class="c1">// all platform versions, to keep our behavior more consistent between</span>
</span><span class='line'>    <span class="c1">// them.</span>
</span><span class='line'>    <span class="n">mStateSaved</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">moveToState</span><span class="o">(</span><span class="n">Fragment</span><span class="o">.</span><span class="na">STOPPED</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以，无论你用的是哪个Fragment，如果onBackPressed发生在onSavedInstanceState之后，那么就会上面的crash。
Stack Overflow上面有类似的讨论，比较全面和票数较高就是<a href="http://stackoverflow.com/questions/7469082/getting-exception-illegalstateexception-can-not-perform-this-action-after-onsa/10261438#10261438">这个</a>和<a href="http://stackoverflow.com/questions/7575921/illegalstateexception-can-not-perform-this-action-after-onsaveinstancestate-wit">这个</a>。</p>

<p>二个讨论中，针对此场景的获得最多赞同的解法是，覆写Activity的onSaveInstanceState，然后不要调用super：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onSaveInstanceState</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// DO NOT call super</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>从上面的分析来看，这个对于android.app.*中的Fragment是能解决问题的，因为是在Activity的onSaveInstanceState（super.onSaveInstanceState）中才把mStateSaved置为true，所以不调super，它就仍是false，当再pop时，也就不会抛出异常的。</p>

<p>但是这明显是一个拙劣的workaround，首先，你在防止系统保存fragment的状态，可能会引发一引起其他的问题；再有就是，对于support包，这还是不管用，你仍然能够遇到state loss exception，因为在其onStop时也会把mStateSaved置为true。</p>

<p>上面分析得出，问题产生的原因是onBackPressed发生在了onSavedInstance之后，那么的解法是，同样设置一个标志，如果状态已保存过，就不要再处理onBackPressed：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FragmentStateLossActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">TAG</span> <span class="o">=</span> <span class="s">&quot;Fragment state loss&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">mStateSaved</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>        <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_fragment_state_loss</span><span class="o">);</span>
</span><span class='line'>        <span class="n">mStateSaved</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onSaveInstanceState</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">outState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Not call super won&#39;t help us, still get crash</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onSaveInstanceState</span><span class="o">(</span><span class="n">outState</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">Build</span><span class="o">.</span><span class="na">VERSION</span><span class="o">.</span><span class="na">SDK_INT</span> <span class="o">&gt;=</span> <span class="n">Build</span><span class="o">.</span><span class="na">VERSION_CODES</span><span class="o">.</span><span class="na">HONEYCOMB</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">mStateSaved</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onResume</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onResume</span><span class="o">();</span>
</span><span class='line'>        <span class="n">mStateSaved</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onPause</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onPause</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onStop</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onStop</span><span class="o">();</span>
</span><span class='line'>        <span class="n">mStateSaved</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onStart</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onStart</span><span class="o">();</span>
</span><span class='line'>        <span class="n">mStateSaved</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onDestroy</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onDestroy</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onKeyDown</span><span class="o">(</span><span class="kt">int</span> <span class="n">keyCode</span><span class="o">,</span> <span class="n">KeyEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">mStateSaved</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">onKeyDown</span><span class="o">(</span><span class="n">keyCode</span><span class="o">,</span> <span class="n">event</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// State already saved, so ignore the event</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onBackPressed</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">mStateSaved</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">super</span><span class="o">.</span><span class="na">onBackPressed</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>为了更彻底的杜绝问题，应该是状态保存过后，都不应该处理KEY事件。</p>

<p>其实，这也是合理的，onBackPressed一般是由BACK触发的，与KEY事件一样，都属于用户交互事件，用户交互事件都应该在Activity处于活动期间来响应，特别是过了onStop以后，再处理这样的事件也是没有意义的。</p>

<p>通常情况下，是不会发生这样的问题的，因为一般情况下是由BACK键触发onBackPressed，onBackPressed中调用finish()，finish才会触发销毁生命周期（save instance，pause，stop，destroy），自然不会产生onBackPressed发生在它们之后，也就没有此异常。但假如，有人为处理BACK事件，或者涉及Webview的BACK处理时，就有可能异步处理BACK，从而产生这个异常。</p>

<p>其实，从根儿上来讲，这是Android的设计不完善导致的，再看下pop back的实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">popBackStackImmediate</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">checkStateLoss</span><span class="o">();</span>
</span><span class='line'>    <span class="n">executePendingTransactions</span><span class="o">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">popBackStackState</span><span class="o">(</span><span class="n">mActivity</span><span class="o">.</span><span class="na">mHandler</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>难道第一句不应该是先判断此栈是否为空吗？如果为空（压根儿就没有用Fragment），为什么要check state loss，为什么还要去executePendingTransactions()? 但是，它又不得不这样做，因为Fragment的很多操作是异步的，到这个时候，有可能某些Fragment已被用户commit，但是还没有真正的添加到stack中去，因为只有把所有的pending transactions执行完了，才能知道到底有没有Fragment，但是执行pending transactions就会改变fragment的状态，就必须要check state loss。</p>

<p>看来万恶之源就是Fragment的transactions都是异步的。Anyway，Fragment的设计是有很多缺陷的，因为这并不是系统设计之初就考虑到的东西，所以，不可能像水果里的ViewController那样健壮好用。作为我们开发者，要么就干脆不用它，要么就把它研究透彻再使用，否则将会陷入无尽痛苦之中。</p>

<h2>参考资料</h2>

<ul>
<li><a href="http://www.androiddesignpatterns.com/2013/08/fragment-transaction-commit-state-loss.html">Fragment Transactions &amp; Activity State Loss</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[理解Android Gradle构建系统]]></title>
    <link href="http://toughcoder.net/blog/2016/11/15/understanding-android-gradle/"/>
    <updated>2016-11-15T22:27:59+08:00</updated>
    <id>http://toughcoder.net/blog/2016/11/15/understanding-android-gradle</id>
    <content type="html"><![CDATA[<p>Gradle是一个新型的强大的构建系统。Android很早就开始支持Gradle了，到现在已经完全切换到Gradle构建。它的优势也是比较明显的，更强大的配置，方便的依赖管理，简洁的语法（Groovy DSL），跟啰嗦的XML相对，这是很大的进步。</p>

<p><a href="http://toughcoder.net/blog/2016/11/15/understanding-android-gradle/"><img src="https://img.alicdn.com/imgextra/i1/715978679/TB2s0nGcygSXeFjy0FcXXahAXXa_!!715978679.jpg"></a></p>

<!-- more -->


<h3>基本概念</h3>

<p>为了方便讨论和理解，需要对一些概念进行定义：</p>

<ul>
<li>项目：可以理解为一个安卓应用。或者说一个可构建的所有配置，代码和资源的集合。</li>
<li>模块：最小的可构建单元
项目可以只有一个模块，或者说一个模块也可以作为一个项目。项目通常都由一个或者几个，甚至多个模块组成。每一个模块都要有相应的build.gradle来描述它是如何构建的。项目根目录下面也会有一个build.gradle，用于对应用于整个项目的配置，比如依赖库的repositories，Android Gradle Plugin的版本指定。</li>
</ul>


<h3>项目结构</h3>

<p>典型的项目结构是酱紫的：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>|-project
</span><span class='line'>| |-app
</span><span class='line'>| | |-build.gradle
</span><span class='line'>| |-library1
</span><span class='line'>| | |-build.gradle
</span><span class='line'>| |-build.gradle
</span><span class='line'>| |-settings.gradle
</span><span class='line'>| |-gradle/wrapper/gradle-wrapper.properties
</span><span class='line'>| |-local.properties
</span><span class='line'>| |-gradle.properties</span></code></pre></td></tr></table></div></figure>


<ul>
<li>gradle.properties 是用来配置gradle本身的运行的参数，比如是否并行，Gradle的JVM参数，因为Gradle也是基于JVM的。</li>
<li>local.properties是用于配置本机操作环境的安卓参数，这里就二个，一个是sdk.dir就是配置安卓SDK的本机路径；另一个就是ndk.dir是配置NDK的本机路径，当然，如果不需要在构建时编译JNI代码，是不用配置ndk.dir的</li>
<li>gradle/wrapper/gradle-wrapper.properties是用于配置Gradle本身的版本信息，比如使用哪个版本的Gradle</li>
<li>build.gradle是整个构建系统的核心文件，类似make的Makefile以及maven的pom.xml，里面描述如何构建一个目标（应用，或者库）。这个文件 是我们修改最多的</li>
<li>settings.gradle是项目结构的配置文件，它指定了项目中包含了哪些模块，比如上面这个例子，settings.gradle应该这样写：</li>
</ul>


<pre><code class="`"> include ':app', ':library1'
</code></pre>

<p> 当然，这是典型的项目结构，但是没有完全这样，因为Gradle的配置是相当灵活且强大的，也就是说真实的文件夹结构，跟Gradle中的项目结构是没有关系的，只不过默认的情况下（也即没有特别的指定和定制）模块的名字就是子目录的名字，项目的结构就按文件夹结构来确定的。</p>

<p> 但是可以不用这样，下面详细说</p>

<h3>配置非文件夹结构的项目</h3>

<p>意思就是每一个模块，不一定非在项目所在文件夹里，换句话说，你可以在项目中引用随便在哪里的模块，举个例子：</p>

<p>你的项目project是在，Documents/project/，想引用一个库是在Downloads/library/，不必非把library拷贝到project下面，只需要在project/settings.gradle中配置一下就可以了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">include</span> <span class="s1">&#39;:app&#39;</span><span class="o">,</span> <span class="s1">&#39;:library&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">project</span><span class="o">(</span><span class="s1">&#39;:library&#39;</span><span class="o">).</span><span class="na">projectDir</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">settingsDir</span><span class="o">,</span> <span class="s1">&#39;../../../Downloads/library&#39;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样就可能在项目project中引入了模块library。</p>

<h3>分清楚二个版本</h3>

<ul>
<li>gradle的版本，在./gradle/wrapper/gradle-wrapper.properties中通过distributionUrl来指定</li>
</ul>


<p> Gradle是一个构建系统，像make和cmake，ant和maven一样。安卓的项目里推荐使用gradle wrapper，实际上就是在项目中指定gradle的版本，这样有一个好处就是，这个项目换了操作系统环境，也不受影响。我们都知道软件的不同的版本对软件的使用是有影响的。所以如果像make或者cmake一样，使用操作系统环境中的gradle，那么同一个项目会因为不同的环境而带来一些诡异的配置相关的问题。</p>

<p> Gradle跟Android或者Google没有关系，它是由Gradle Inc.在开发和维护的。所以Gradle的升级要到<a href="http://www.gradle.org/">gradle.org</a>。</p>

<ul>
<li>Android Gradle Plugin的版本，通过buildScript DSL中的dependencies DSL来指定</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">buildscript</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mavenLocal</span><span class="o">()</span>
</span><span class='line'>    <span class="n">mavenCentral</span><span class="o">()</span>
</span><span class='line'>    <span class="n">jcenter</span><span class="o">()</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">classpath</span> <span class="s1">&#39;com.android.tools.build:gradle:2.2.2&#39;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> Gradle是一个构建系统，有它自身的规则，可以用来构建任何语言的任何项目。但每一个语言和平台都有自己的特性，如果直接使用Gradle也不是不可以，但是要做很多重复性的工作。Gradle是有插件机制的，也就是每个语言或者平台实现一些Gradle插件，以让开发者更加方便来构建，而不从头一条指令一条的写。Android Gradle Plugin就是专门用来构建安卓应用开发相关的插件。这个是由Google开发并维护，与SDK一起发布的。</p>

<h3>常见命令</h3>

<p>除了在Android Studio中直接操作以外，gradle是支持命令行的。而且命令行有时候会更方便。执行的方式是./gradlew <task-name>。gradlew实际上就是一个Shell脚本，它的作用是运行gradle/wrapper/中的Gradle二进制文件。task（任务）是Gradle构建中的可执行单元，与makefile中的target有些类似，可以理解为一个应用的构建，就是执行一些定义好的task。常见的task有：</p>

<ul>
<li>assemble - 构建项目的所有目标输出</li>
<li>assembleDebug - 只构建调试环境下的输出</li>
<li>assembRelease - 构建发布环境下的输出</li>
<li>uninstallDebug/uninstallRelease - 从设备上卸载调试的应用，或者卸载发布环境的应用</li>
<li>clean - 清理编译过程中产生的输出，包括最终输出。通常就是把build目录删除</li>
</ul>


<p>可以用gradle tasks来查看支持的所有任务。</p>

<h3>Dependency managament</h3>

<p>在每个模块的build.gradle中dependencies {} DSL中定义该模块的依赖树。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// 本地lib的依赖</span>
</span><span class='line'>  <span class="n">compile</span> <span class="nf">fileTree</span><span class="o">(</span><span class="nl">dir:</span> <span class="s1">&#39;libs&#39;</span><span class="o">,</span> <span class="nl">include:</span> <span class="o">[</span><span class="s1">&#39;*.jar&#39;</span><span class="o">])</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 对其他模块的依赖</span>
</span><span class='line'>  <span class="n">compile</span> <span class="o">(</span><span class="n">project</span><span class="o">(</span><span class="s1">&#39;:library&#39;</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 从远程的repo中下载依赖</span>
</span><span class='line'>  <span class="n">compile</span> <span class="s2">&quot;com.android.support:support-v4:23.1.0&quot;</span>
</span><span class='line'>  <span class="n">compile</span> <span class="s1">&#39;com.android.support:appcompat-v7:23.0.0&#39;</span>
</span><span class='line'>  <span class="n">compile</span> <span class="s1">&#39;com.squareup.picasso:picasso:2.5.2&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>有几种不的指定编译方式：</p>

<ul>
<li>compile - 把所需要的依赖会编译进目标，类似于C++中的静态库的概念</li>
<li>provided - 只在编译时依赖一下，不会打于目标中，运行时环境应该提供相同的库，否则会找不到依赖，类似于动态库的概念</li>
<li>compileProvided</li>
</ul>


<h3>常见的tricks</h3>

<ul>
<li>gradle.org访问缓慢或者根本无法访问</li>
</ul>


<p> ./gradle/wrapper/gradle-wrapper.properties中的distributionUrl=https://services.gradle.org/distributions/gradle-2.14.1-all.zip，这个地址下载十分缓慢，或者根本无法下载，导致gradle sync花费很长时间，甚至卡死无法完成。改成国内的镜像会好很多distributionUrl=http://mirrors.taobao.net/mirror/gradle/gradle-2.14.1-all.zip</p>

<p> 如果没有可用的镜像网站，还有一个解决办法就是，去其他网站下载Gradle的二进制文件，然后解压放到~/.gradle/wrapper/dists/。（如果是windows的话，应该是在C:\Users\<username>.gradle\wrapper\dists）。</p>

<ul>
<li>transitive false</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">compile</span> <span class="o">(</span><span class="s1">&#39;com.squareup.picasso:picasso:2.5.2&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">transitive</span> <span class="kc">false</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> 依赖是一个树状结构，比如项目中依赖了rxlifecircle，但rxlifecircle本身也有依赖，解析依赖时，会把所有依赖以及依赖的依赖都下载下来，这就构成了依赖树，当然，也会涉及冲突的处理，比如二个库都依赖了另外一个库，但是不同的版本，这个Gradle本身是有策略的。</p>

<p> 可以用./gradlew -q dependencies &ndash;configuration compile命令来查看依赖树
* 指定依赖的具体类型@aar or @jar</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">compile</span> <span class="s2">&quot;com.android.support:support-v4:23.1.0&quot;</span>
</span><span class='line'>  <span class="n">compile</span> <span class="s1">&#39;com.android.support:appcompat-v7:23.0.0&#39;</span>
</span><span class='line'>  <span class="n">compile</span> <span class="s1">&#39;com.squareup.picasso:picasso:2.5.2@jar&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> 默认情况，Gradle认为依赖库都是Java 的jar类型。也就说当其在repo中寻找依赖时会去找jar。所以，如果是aar的依赖库，就需要指定其具体类型，通过在版本号后面加上@aar或者@jar来指定其具体的类型。</p>

<ul>
<li>在Android Studio中没问题，但是运行命令行时，会报错误:</li>
</ul>


<blockquote><p>FAILURE: Build failed with an exception.</p>

<p>* What went wrong:
A problem occurred configuring root project &lsquo;pailitao-sdk&rsquo;.
Could not resolve all dependencies for configuration &lsquo;:classpath&rsquo;.</p>

<p>  > Could not find com.android.tools.build:gradle:2.2.2.</p>

<p>  Searched in the following locations:
     file:/Users/alexhilton/.m2/repository/com/android/tools/build/gradle/2.2.2/gradle-2.2.2.pom
     file:/Users/alexhilton/.m2/repository/com/android/tools/build/gradle/2.2.2/gradle-2.2.2.jar
     <a href="https://repo1.maven.org/maven2/com/android/tools/build/gradle/2.2.2/gradle-2.2.2.pom">https://repo1.maven.org/maven2/com/android/tools/build/gradle/2.2.2/gradle-2.2.2.pom</a>
     <a href="https://repo1.maven.org/maven2/com/android/tools/build/gradle/2.2.2/gradle-2.2.2.jar">https://repo1.maven.org/maven2/com/android/tools/build/gradle/2.2.2/gradle-2.2.2.jar</a>
  Required by:
     :pailitao-sdk:unspecified</p>

<p>* Try:</p>

<p>Run with &ndash;stacktrace option to get the stack trace. Run with &ndash;info or &ndash;debug option to get more log output.</p></blockquote>

<p> 这个问题的根本原因是Android Gradle Plugin没有找到。查看要目录的build.gradle，在repositories里面加上jcenter()，或者把mavenCenteral()改成jcenter()就可以解决了。</p>

<ul>
<li>如何直接构建子项目，比如project下面有app和library二个子项目：</li>
</ul>


<pre><code class="`"> |-project
 | |-app
 | |-library
</code></pre>

<p> 在根目录执行命令./gradlew assembleDebug或者assembleRelease，会构建整个应用。假如只想构建library呢？可以执行这样的命令：<strong>./gradlew :library:assembleRelease</strong>也即，前面是子项目，后面跟命令。</p>

<ul>
<li>Gradle refresh failed:
com.android.build.gradle.internal.model.defaultandroidproject   unsupported major.minor version 51.0</li>
</ul>


<p> 这个错误的原因是Android Studio运行的JVM版本太低了，看一下Android Studio的关于，里面会有JVM的版本信息，如果是1.6就会上面的错误。如果是Mac，到app/info.list里面把JVM的版本改成1.7+</p>

<ul>
<li>Gradle sync failed: &ldquo;java.lang.OutOfMemoryError: GC overhead limit exceeded&rdquo;</li>
</ul>


<p> 明显是Gradle运行时，内存爆了。解决方法就是加大它的内存配额。在相应的build.gradle中加入:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">dexOptions</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">incremental</span> <span class="kc">true</span>
</span><span class='line'>  <span class="n">javaMaxHeapSize</span> <span class="mi">4</span><span class="n">g</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Error:(2, 0) No service of type Factory available in ProjectScopeServices.</li>
</ul>


<p>查看根目录的build.gradle通常都指定有github的插件，把1.3升级到1.4.1就可以解决，参考<a href="http://www.jianshu.com/p/c4f4894ad215">这篇文章</a>。</p>

<ul>
<li>解决默认情况下只编译子模块的release模式</li>
</ul>


<p>默认情况下，当有compile project(&lsquo;:library&rsquo;)形式的依赖时，只会编译library的release模式，这对调试是非常不方便的，因为release模式通常会开启混淆，这时可以在子模块中加入默认的打包配置来强制默认打debug包：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">android</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">defaultPublishConig</span> <span class="s1">&#39;debug&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>进阶之Gradle</h3>

<p>对于日常的开发，了解基本的就够用了，但若想做一些额外的事情，比如自定义一些task等就需要深入研究Gradle本身了。这个建议直接看Gradle的<a href="https://docs.gradle.org/current/userguide/userguide.html">文档</a>比较好。</p>

<h3>进阶之Groovy</h3>

<p>Gradle的文件是用Groovy语言来描述的，所以如果想要实现高级功能，也必须熟悉Groovy语言。同样还是要参考相应的文档。</p>

<h3>参考资料</h3>

<ul>
<li><a href="http://tools.android.com/tech-docs/new-build-system/user-guide">Gradle Plugin User Guide</a></li>
<li><a href="http://stackoverflow.com/questions/16976214/gradle-build-only-one-module">Gradle build only one module</a></li>
<li><a href="http://stackoverflow.com/questions/24309950/create-aar-file-in-android-studio">Create aar file in Android Studio</a></li>
<li><a href="https://guides.codepath.com/android/Building-your-own-Android-library">Building your own Android library</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[理解Java ThreadLocal]]></title>
    <link href="http://toughcoder.net/blog/2016/11/14/understanding-java-threadlocal/"/>
    <updated>2016-11-14T22:05:18+08:00</updated>
    <id>http://toughcoder.net/blog/2016/11/14/understanding-java-threadlocal</id>
    <content type="html"><![CDATA[<p>ThreadLocal是Java提供的为每个线程存储线程独立的数据的存储方式，也就是说用ThreadLocal来保存的数据，只能被当前线程所访问，其他线程无法访问，因为只有（一个线程）当前线程能够访问，所以它是线程安全的，可以用来存储一些不能被共享的数据。</p>

<p><a href="http://toughcoder.net/blog/2016/11/14/understanding-java-threadlocal/"><img src="https://img.alicdn.com/imgextra/i1/715978679/TB2htRYbKNOdeFjSZFBXXctzXXa_!!715978679.jpg"></a></p>

<!-- more -->


<h3>基本使用方法</h3>

<p>ThreadLocal使用起来非常的简单，它支持泛型，可以把任意类型的数据放进ThreadLocal，一个ThreadLocal对象只能放一个对象：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ThreadLocal</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">mLocalCEOHolder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ThreadLocal</span><span class="o">&lt;&gt;();</span>
</span><span class='line'><span class="n">ThreadLocal</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">mOrdersCountHolder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ThreadLocal</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>
</span><span class='line'><span class="n">mLocalCEOHolder</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">&quot;Alex Hilton&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">String</span> <span class="n">ceo</span> <span class="o">=</span> <span class="n">mLocalCEOHolder</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">mOrdersCountHolder</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="mi">30249</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">order</span> <span class="o">=</span> <span class="n">mOrdersCountHolder</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<h3>实现原理解析</h3>

<p>就按上面的例子来解析它的实现原理：</p>

<ul>
<li><p>创建ThreadLocal对象</p>

<p> 先来看看它的构造方法：</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Creates a thread local variable.</span>
</span><span class='line'><span class="cm"> * @see #withInitial(java.util.function.Supplier)</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="nf">ThreadLocal</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>   很不幸，它的构造方法是空的，啥也没干。</p>

<ul>
<li>set方法
再来看下它的set方法:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Sets the current thread&#39;s copy of this thread-local variable</span>
</span><span class='line'><span class="cm"> * to the specified value.  Most subclasses will have no need to</span>
</span><span class='line'><span class="cm"> * override this method, relying solely on the {@link #initialValue}</span>
</span><span class='line'><span class="cm"> * method to set the values of thread-locals.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @param value the value to be stored in the current thread&#39;s copy of</span>
</span><span class='line'><span class="cm"> *        this thread-local.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">set</span><span class="o">(</span><span class="n">T</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Thread</span> <span class="n">t</span> <span class="o">=</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">();</span>
</span><span class='line'>    <span class="n">ThreadLocalMap</span> <span class="n">map</span> <span class="o">=</span> <span class="n">getMap</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">map</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>        <span class="n">map</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="nf">createMap</span><span class="o">(</span><span class="n">t</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里先获取当前的调用线程，从其中获取一个叫做ThreadLocalMap的东西，如果它不为空就把当前对象this（ThreadLocal对象）作为key，把要存放的值作为value，放到这个ThreadLocalMap里面，如果map为空就先创建再存放。由此可以猜出ThreadLocalMap是一个Map型的数据结构，接着研究getMap和createMap，后面再详细说ThreadLocalMap。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Get the map associated with a ThreadLocal. Overridden in</span>
</span><span class='line'><span class="cm"> * InheritableThreadLocal.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @param  t the current thread</span>
</span><span class='line'><span class="cm"> * @return the map</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">ThreadLocalMap</span> <span class="nf">getMap</span><span class="o">(</span><span class="n">Thread</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">t</span><span class="o">.</span><span class="na">threadLocals</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Create the map associated with a ThreadLocal. Overridden in</span>
</span><span class='line'><span class="cm"> * InheritableThreadLocal.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @param t the current thread</span>
</span><span class='line'><span class="cm"> * @param firstValue value for the initial entry of the map</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">createMap</span><span class="o">(</span><span class="n">Thread</span> <span class="n">t</span><span class="o">,</span> <span class="n">T</span> <span class="n">firstValue</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="na">threadLocals</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ThreadLocalMap</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">firstValue</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>getMap比较简单，它返回Thread对象的域对象threadLocal。createMap也很简单创建一个ThreadLocalMap对象，然后把它赋值给Thread对象的域变量。</p>

<ul>
<li>get方法
再来看看get方法：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Returns the value in the current thread&#39;s copy of this</span>
</span><span class='line'><span class="cm"> * thread-local variable.  If the variable has no value for the</span>
</span><span class='line'><span class="cm"> * current thread, it is first initialized to the value returned</span>
</span><span class='line'><span class="cm"> * by an invocation of the {@link #initialValue} method.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @return the current thread&#39;s value of this thread-local</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="n">T</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Thread</span> <span class="n">t</span> <span class="o">=</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">();</span>
</span><span class='line'>    <span class="n">ThreadLocalMap</span> <span class="n">map</span> <span class="o">=</span> <span class="n">getMap</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">map</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ThreadLocalMap</span><span class="o">.</span><span class="na">Entry</span> <span class="n">e</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">getEntry</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">e</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">&quot;unchecked&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="n">T</span> <span class="n">result</span> <span class="o">=</span> <span class="o">(</span><span class="n">T</span><span class="o">)</span><span class="n">e</span><span class="o">.</span><span class="na">value</span><span class="o">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>         <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">setInitialValue</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Variant of set() to establish initialValue. Used instead</span>
</span><span class='line'><span class="cm"> * of set() in case user has overridden the set() method.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @return the initial value</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">private</span> <span class="n">T</span> <span class="nf">setInitialValue</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">T</span> <span class="n">value</span> <span class="o">=</span> <span class="n">initialValue</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Thread</span> <span class="n">t</span> <span class="o">=</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">();</span>
</span><span class='line'>    <span class="n">ThreadLocalMap</span> <span class="n">map</span> <span class="o">=</span> <span class="n">getMap</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">map</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>        <span class="n">map</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="nf">createMap</span><span class="o">(</span><span class="n">t</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>get方法与set方法类似，同样是从当前线程取其map，从其中以当前TheadLocal对象为key来查找值，如果找到了，就返回。如果map为空，或者没找到怎么办。就用setInitialValue来初始化线程的map对象，这个与set方法是一样的，只不过用空值(null)。</p>

<ul>
<li>ThreadLocalMap对象</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * ThreadLocalMap is a customized hash map suitable only for</span>
</span><span class='line'><span class="cm"> * maintaining thread local values. No operations are exported</span>
</span><span class='line'><span class="cm"> * outside of the ThreadLocal class. The class is package private to</span>
</span><span class='line'><span class="cm"> * allow declaration of fields in class Thread.  To help deal with</span>
</span><span class='line'><span class="cm"> * very large and long-lived usages, the hash table entries use</span>
</span><span class='line'><span class="cm"> * WeakReferences for keys. However, since reference queues are not</span>
</span><span class='line'><span class="cm"> * used, stale entries are guaranteed to be removed only when</span>
</span><span class='line'><span class="cm"> * the table starts running out of space.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">static</span> <span class="kd">class</span> <span class="nc">ThreadLocalMap</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * The entries in this hash map extend WeakReference, using</span>
</span><span class='line'><span class="cm">     * its main ref field as the key (which is always a</span>
</span><span class='line'><span class="cm">     * ThreadLocal object).  Note that null keys (i.e. entry.get()</span>
</span><span class='line'><span class="cm">     * == null) mean that the key is no longer referenced, so the</span>
</span><span class='line'><span class="cm">     * entry can be expunged from table.  Such entries are referred to</span>
</span><span class='line'><span class="cm">     * as &quot;stale entries&quot; in the code that follows.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Entry</span> <span class="kd">extends</span> <span class="n">WeakReference</span><span class="o">&lt;</span><span class="n">ThreadLocal</span><span class="o">&lt;?&gt;&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="cm">/** The value associated with this ThreadLocal. */</span>
</span><span class='line'>        <span class="n">Object</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Entry</span><span class="o">(</span><span class="n">ThreadLocal</span><span class="o">&lt;?&gt;</span> <span class="n">k</span><span class="o">,</span> <span class="n">Object</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">super</span><span class="o">(</span><span class="n">k</span><span class="o">);</span>
</span><span class='line'>            <span class="n">value</span> <span class="o">=</span> <span class="n">v</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * The initial capacity -- MUST be a power of two.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">INITIAL_CAPACITY</span> <span class="o">=</span> <span class="mi">16</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * The table, resized as necessary.</span>
</span><span class='line'><span class="cm">     * table.length MUST always be a power of two.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Entry</span><span class="o">[]</span> <span class="n">table</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* other codes ... */</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>完整的就不贴了，大家可以自己去查看。简单来理解，其实它就是一个HashMap，key是对ThreadLocal对象的WeakReference，value是我们放入ThreadLocal的对象。</p>

<p>到这里可以总结一下ThreadLocal的原理了：数据结构是存储在线程对象里的一个Map对象中，key是ThreadLocal对象的WeakReference，值就是我们想要存放的对象。</p>

<p><strong>注意</strong>：下面提到的Map的意思是Thread#threadLocals，也就是ThreadLocalMap对象</p>

<h3>核心所在</h3>

<p>网上面很多关于ThreadLocal的文章（如<a href="http://droidyue.com/blog/2016/03/13/learning-threadlocal-in-java/">这个</a>和<a href="http://www.cnblogs.com/dolphin0520/p/3920407.html">这个</a>）都没有讲清楚，到底它是用什么方法来保证只有当前线程才能访问，它们说的是都是它的数据结构，这个上面已经说了。但是光有一个Map，就够了吗？Thread对象有一个Map用来存储ThreadLocal数据，但是假如Thread有公开获取此Map的方法，那跟我们使用的共享变量有什么区别？</p>

<p>ThreadLocal的真正核心在于它取的<strong>当前线程</strong>的Map：</p>

<ul>
<li>每次从ThreadLocal取数据也好，放数据也好，目标的Map都是当前的线程的Map</li>
<li>线程的Map是包访问权限</li>
<li>放数据也好，取数据也好都是从当前线程的Map里存和取</li>
</ul>


<p>所以，ThreadLocal最关键的就是由Thread.currentThread()来保证当前线程的。线程到底是什么?线程简单来理解就是一个run方法，或者说一堆方法调用，它是一个时序的概念，是一堆按某种顺序运行的指令的集合。所以，当你调用ThreadLocal#set或者ThreadLocal#get时，在set和get方法实现里面会调用Thread.currentThread来取得调用栈所在的线程&mdash;也就是当前线程，这也就保证了，一个线程只能获取自己的Map。</p>

<p>另外，Map必须得与每个线程对象绑定，但又由于这个域是package作用域，只有同一个package的才能访问，所以只能从ThreadLocal里操作此Map也是相对安全的，也就是说想操作此Map只能通过ThreadLocal。当然了，如果能Hack一下，生成一个与Thread在同一个package的对象，就能够直接操作Map，也就能打破ThreadLocal的封装了，这时Map就变成可共享的了，也就失去了线程独有的特性。</p>

<h3>典型应用</h3>

<p>最典型的应用要数<a href="https://developer.android.com/reference/android/os/Looper.html">Looper</a>类的实现。</p>

<p>Looper的作用是帮助线程创建并运行一个消息循环（MessageQueue），很显然，一个线程有且只能有一个，那么ThreadLocal是最佳的方案。</p>

<h3>Android当中的实现</h3>

<p>与标准的Java的实现原理是一样的，都是把Map当作Thread的一个域，package作用域，ThreadLocal作为key, 里面的值作value。</p>

<p>只不过Map的具体实现略有不同。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[理解 Java 关键字 Final]]></title>
    <link href="http://toughcoder.net/blog/2016/11/12/understanding-java-keyword-final/"/>
    <updated>2016-11-12T14:40:51+08:00</updated>
    <id>http://toughcoder.net/blog/2016/11/12/understanding-java-keyword-final</id>
    <content type="html"><![CDATA[<h2>final可以用来干什么</h2>

<p>final是Java中非常常见的一个关键字，可以说每天都在使用它，虽然常见，但却也不见得都那么显而易见，今天就来研究一下final，以加深对它的理解和更合理的运用。</p>

<p><a href="http://toughcoder.net/blog/2016/11/12/understanding-java-keyword-final/"><img src="https://img.alicdn.com/imgextra/i1/715978679/TB2FJBGdyGO.eBjSZFEXXcy9VXa_!!715978679.jpeg"></a></p>

<!-- more -->


<h3>修饰类</h3>

<p>当一个类不想被继承时，就可以用final来修饰。</p>

<h3>修饰方法</h3>

<p>当一个方法不想被子类覆写(Override)时，可以用final来修饰。另外一方面，把方法用final来修饰也有一定的性能提升上的帮助，因为虚拟机知道它不会被覆写，所以可以以更简单的方式来处理。</p>

<p>private的方法，默认都会被编译器加上final.</p>

<h3>修饰变量</h3>

<p>被final修饰的变量只能赋值一次，之后不能再被修改。如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">final</span> <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="mi">4</span><span class="o">;</span> <span class="c1">// compilation error</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要注意的是，这里说的是只能赋值一次，并不意味着，非要在声明变量时直接初始化，比如，下面的代码也是完全合法的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">final</span> <span class="kt">int</span> <span class="n">a</span><span class="o">;</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">foo</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">=</span> <span class="mi">4</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>修饰域变量</h3>

<p>域变量也是变量，所以用final来修饰的第一个作用就是赋值后，不能再修改变量的值，比如:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">final</span> <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
</span><span class='line'><span class="kd">final</span> <span class="n">Object</span> <span class="n">b</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Object</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于基本类型来说，就是变量值不能再被修改；对于引用来说，就是不能再让其指向其他对象或者null。</p>

<p>但对于域变量，声明为final的域变量必须在声明时初始化，或者在构造方法中初始化，否则会有编译错误。</p>

<p>此外，声明为final的域变量还有内存模型上的语义，下面详细说</p>

<h3>内存模型的作用&ndash;防止<a href="https://shipilev.net/blog/2014/safe-public-construction/">变量从构造方法中逸出</a></h3>

<p>这个主要是针对被final修饰的域变量，虚拟机会有禁止指令重排的保证：</p>

<ul>
<li>在构造方法内对一个final变量的写入，与随后这个被构造对象的引用赋值给一个引用变量，这二个顺序不改变，final变量的写入一定要早于对象引用的赋值。</li>
</ul>


<p>什么意思呢？在多线程环境下，域变量是有可能从构造方法中逸出的，也就是说线程有可能读到还没有被构造方法初始化的域变量的值。比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Foo</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Foo</span><span class="o">(</span><span class="kt">int</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">a</span> <span class="o">=</span> <span class="n">v</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果是在多线程环境下，一个线程A在创建Foo的对象，另一个线程B在读对象的a的值，则B是有可能读到未正确初始化a的值（默认初始值0）。这就是域变量从构造方法中逸出。</p>

<p>关键字final可以禁止虚拟机指令重排，从而保证了构造方法执行完毕前final修饰的变量一定是初始化过了的。</p>

<p>这部分可以参考<a href="http://www.infoq.com/cn/articles/java-memory-model-6">深入理解Java内存模型（六）——final</a>，讲解的非常详细。</p>

<h3>匿名内部类使用外部变量时为何要强制使用final修饰</h3>

<p>这个大家肯定都习以为常了，比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">initViews</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span> <span class="c1">// Compilation error if remove final</span>
</span><span class='line'>    <span class="n">btn</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">new</span> <span class="n">View</span><span class="o">.</span><span class="na">OnClickListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">view</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">a</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// volala</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么，有没有想过为什么？而像其他支持完整闭包的语言如JavaScript，Python等，是没有这等限制的。究其原因，是Java对闭包支持不够完整，或者说它并不是像动态语言那样的完整闭包。对于匿名内部类来说，编译器会创建一个命名类(OutClass$1之类的)，然后把匿名类所在的<a href="https://en.wikipedia.org/wiki/Closure_(computer_programming">能捕获的变量</a>)，以构造参数的形式传递给内部类使用，这样一样，外部的变量与内部类看到的变量是不同的，虽然它们的值是相同的，因此，如果再允许外部修改这些变量，或者内部类里面修改这些变量，都会造成数据的不一致性（因为它们是不同的变量），所以Java强制要求匿名内部类访问的外部变量要加上final来修饰。</p>

<p>对于其他语言，匿名内部类，持有的是外部变量的一个包装的引用(wrapper reference)，这可以能看不懂，但是理解起来就是内部类能直接访问外部变量，外部与闭包内部访问的是同一个变量，因此外部修改了，内部能看到变化，内部修改了，外部也能看到变化。</p>

<p>一句话总结就是，Java内部类与外部持有的是值相同的不同的变量；其他支持闭包的语言则持有的是相同的变量。</p>

<h3>建议能使用final的地方就加上final修饰</h3>

<p>最后来聊聊，啥时候应该用final呢？孤的建议(以及众多大师的建议)就是能多用就多用，除非不能用final，否则就用。原因，有这么几条：</p>

<ul>
<li><p>域变量尽可能加上final</p>

<p>这个原因比较明确，前面也提到了，在多线程条件下，会有很大的优势。尽可能加上final来修饰域变量，甚至用<a href="https://en.wikipedia.org/wiki/Immutable_object">Immutable Object</a>，可以省去构造时的多线程同步。</p>

<p>多线程最大的麻烦是状态同步，啥是状态？其实就是共享数据，域变量就是共享数据，所以，如果共享数据都是不可变的(Immutable)，那么自然就没有了同步上的麻烦。</p></li>
<li><p>final类和方法能提升性能</p>

<p>正常的类和方法，虚拟机需要为了继承和方法覆写而做一次准备，如果加上了final，虚拟机知道它不会被继承或者覆写，那么就可以做一些优化。虽然，这并不显著，但是还是可以提升一些性能的。</p></li>
<li><p>final变量能提升可读性</p>

<p>无论是域变量还是本地变量，加上了final修饰，程序的维护者就知道了，这个变量的值不会再改变，这无疑会大大增加可读性。</p></li>
</ul>


<h3>参考资料</h3>

<ul>
<li><a href="http://www.cnblogs.com/dolphin0520/p/3736238.html">浅析Java中的final关键字</a></li>
<li><a href="http://www.infoq.com/cn/articles/java-memory-model-6">深入理解Java内存模型（六）——final</a></li>
<li><a href="http://cuipengfei.me/blog/2013/06/22/why-does-it-have-to-be-final/">为什么必须是final的呢？</a></li>
<li><a href="https://www.zhihu.com/question/21395848">java为什么匿名内部类的参数引用时final？</a></li>
<li><a href="http://www.javamex.com/tutorials/synchronization_final.shtml">Thread-safety with the Java final keyword</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[理解Java关键字volatile]]></title>
    <link href="http://toughcoder.net/blog/2016/10/15/understanding-java-keyword-volatile/"/>
    <updated>2016-10-15T17:40:40+08:00</updated>
    <id>http://toughcoder.net/blog/2016/10/15/understanding-java-keyword-volatile</id>
    <content type="html"><![CDATA[<p>在Java中，关键字<a href="https://en.wikipedia.org/wiki/Volatile_(computer_programming)">volatile</a>是除同步锁以外，另一个同步机制，它使用起来比锁要简单方便，但是却很容易被忽略，或者被误用。这篇文章就来详细讲解一下volatile它的作用，它的原理以及如何正确的使用它。</p>

<p><a href="http://toughcoder.net/blog/2016/10/15/understanding-java-keyword-volatile/"><img src="https://img.alicdn.com/imgextra/i4/715978679/TB2lcgxdhaK.eBjSZFAXXczFXXa_!!715978679.jpg"></a></p>

<!-- more -->


<h2>volatile的定义</h2>

<p>这个引用<a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.3.1.4">JSR</a>中的定义：</p>

<blockquote><p>The Java programming language allows threads to access shared variables (§17.1). As a rule, to ensure that shared variables are consistently and reliably updated, a thread should ensure that it has exclusive use of such variables by obtaining a lock that, conventionally, enforces mutual exclusion for those shared variables.</p>

<p>The Java programming language provides a second mechanism, volatile fields, that is more convenient than locking for some purposes.</p>

<p>A field may be declared volatile, in which case the Java Memory Model ensures that all threads see a consistent value for the variable (§17.4).</p></blockquote>

<p>简单的翻译一下：</p>

<blockquote><p>Java编程语言中允许线程访问共享变量。为了确保共享变量能被一致地和可靠的更新，线程必须确保它是排他性的使用此共享变量，通常都是获得对这些共享变量强制排他性的同步锁。</p>

<p>Java编程语言提供了另一种机制，volatile域变量，对于某些场景的使用这要更加的方便。</p>

<p>可以把变量声明为volatile，以让Java内存模型来保证所有线程都能看到这个变量的同一个值。</p></blockquote>

<h2>volatile的作用</h2>

<ul>
<li><p>保证变量的可见性</p>

<p>  volatile关键字的作用就是保证共享变量的<strong>可见性</strong>。什么是可见性呢，就是一个线程读变量，总是能读到它在内存中的最新的值，也就是说不同的线程看到的一个变量的值是相同的。CPU都是有行缓存的，volatile能让行缓存无效，因此能读到内存中最新的值。</p></li>
<li><p>保证赋值操作的原子性</p>

<p>原子性就是不能被线程调度打断的操作，是线程安全的操作，对于原子性操作，即使在多线程环境下，也不用担心线程安全问题或者数据不一致的问题。有些变量的赋值本身就是原子性的，比如对boolean，对int的赋值，但是像对于long或者double则不一定，如果是32位的处理器，对于64位的变量的操作可能会被分解成为二个步骤：高32位和低32位，由此可能会发生线程切换，从而导致线程不安全。如果变量声明为volatile，那么虚拟机会保证赋值是原子的，是不可被打断的。</p></li>
<li><p>禁止指令重排</p>

<p>  正常情况下，虚拟机会对指令进行重排，当然是在不影响程序结果的正确性的前提下。volatile能够在一定程度上禁止虚拟机进行指令重排。还有就是对于volatile变量的写操作，保证是在读操作之前完成，假设线程A来读变量，刚好线程B正在写变量，那么虚拟机会保证写在读之前完成。
  比如：</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">volatile</span> <span class="kt">boolean</span> <span class="n">flag</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setFlag</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">flag</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">flag</span> <span class="o">=</span> <span class="n">flag</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>  
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">getFlag</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">flag</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>假设线程A来调用setFlag(true)，线程B同时来调用getFlag，对于一般的变量，是无法保证B能读到A设置的值的，因为它们执行的顺序是未知的。但是像上面，加上volatile修饰以后，虚拟机会保证，线程A的写操作在线程B的读操作之前完成，换句话，B能读到最新的值。当然了，用锁机制也能达到同样的效果，比如在方法前面都加上synchronized关键字，但是性能会远不如使用volatile。</p>

<h2>volatile的典型使用场景</h2>

<h3>多线程情况下的标志位</h3>

<p>基于它的作用，不难找到使用它的理想场景：</p>

<ul>
<li>读操作，多于写操作</li>
<li>写操作，不依赖于变量的当前值，也就是说要是纯赋值操作</li>
<li>只需要读取的值，不需要等待某一特定的值</li>
</ul>


<p>比如，有一个检查新版本的按扭，点击时会发起去检查新版本，因为检查新版本涉及网络请求，可能会比较耗时，所以需要放在单独的线程中去做。为了避免多次同时触发检查请求，做一个限制：上一个请求没有完成时，再次点击无效。这时就可以用volatile来做个标志位，伪代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">volatile</span> <span class="kt">boolean</span> <span class="n">checkUpdateFinished</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCheckUpdate</span><span class="o">(</span><span class="n">View</span> <span class="n">view</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">checkUpdateFinished</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">checkUpdate</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">checkUpdate</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">checkUpdateFinished</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="k">new</span> <span class="nf">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">doCheckUpdate</span><span class="o">();</span>
</span><span class='line'>          <span class="n">checkUpdateFinished</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}).</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>CAS无锁同步的变量声明</h3>

<p><a href="https://en.wikipedia.org/wiki/Compare-and-swap">CAS（Compare And Swap）</a>是一种无锁同步的算法，它涉及变量的3个值，当前值，旧的期望值以及新的期望值，它的原理是当且仅当当前值与旧的期望值一致时，才把新值赋给变量，否则什么都不做：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">volatile</span> <span class="kt">int</span> <span class="n">a</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">do</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">old</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
</span><span class='line'>   <span class="n">expected</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span> <span class="k">while</span> <span class="o">(</span><span class="n">compareAndSwap</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">boolean</span> <span class="nf">compareAndSwap</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">old</span><span class="o">,</span> <span class="kt">int</span> <span class="n">expected</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">a</span> <span class="o">==</span> <span class="n">old</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">a</span> <span class="o">=</span> <span class="n">expected</span><span class="o">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然，具体的compare and swap不是这么实现的，实际是要直接使用处理的指令CMPXCHG(Compare and Exchange)来做具体的CAS。
为了保证可见性，CAS中的变量必须都用volatile来修饰。</p>

<h2>volatile的内存原理</h2>

<p>知道了volatile有什么用，怎么用以后，可以了解的更深一点，以加深理解。但要搞懂，就必须先要搞懂它的背景以及背景的背景：</p>

<h3>并发的基本概念</h3>

<ul>
<li><p>原子性</p>

<p>一个或者多个操作（赋值也好，运算也好）不能被线程调度打断，要么一次性执行完，要么就不执行。</p></li>
<li><p>可见性</p>

<p>现代处理器是多核心的，或者多CPU的，但是主存（通常意义上的操作系统内存，或者物理内存）却是在CPU之间共享的。多核心处理的优势在于，从机器级别支持多线程并发，而且为了弥补主存与CPU核心之间的速度差异，便有了CPU核心缓存，因此，每个CPU核心（或者说每个线程）是有独立的内存的。这样就带来了可见性的问题，同一个变量c，A线程操作的是c在A线程的缓存中的值，B操作的是c在B的缓存中值，也就是说最新的变量的值对于其他线程是不可见的，这就有了可见性的问题。</p></li>
<li><p>有序性</p>

<p>对于单线程来说，程序的执行顺序就是按照代码的书写顺序，从上到下，从左到右(分号分隔写在同一行时)。但是多线程情况就不一定了，线程调度器随时可能打断某一程，执行其他线程。这就导致了，程序并不是按照预期的顺序执行的，导致结果跟预期不一致。
<strong>注意</strong>：这里的顺序，并不是严格的指令执行的顺序，而且从结果正确性的角度来看的，比如：</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>  这段代码的有序性的意思是：当执行到第二条语句，只要a的值是10就可以了，至于a = 10它究竟是否是在下面语句前执行，并不关心。但是，除了a = 10语句外，没有其他的方式能让a变成10，所以，肯定是执行了语句了才能把a变成10。说起来比较绕，这个例子也过于简单。但是可以这么简单的理解为：单线程情况下，程序是按书写的顺序来执行的，更准确的说法是程序员预期的顺序来执行的。但多线程会打破这种有序性。</p>

<p>  <strong>注意</strong>：这里我们不考虑<a href="https://en.wikipedia.org/wiki/ABA_problem">ABA问题</a>。</p>

<h3>内存模型的基本概念</h3>

<h4>对内存模型的理解</h4>

<p>什么是<a href="https://en.wikipedia.org/wiki/Java_memory_model">内存模型</a>呢？就是程序运行起来时，内存里面的样子。程序包括变量，对象，数据，指令等，程序动起来后又包括变量如何赋值，数据如何读取，指令按什么顺序执行等。其实，程序运行时，内存是什么样子，通常取决于操作系统，也就是说是由操作系统决定的。Java是跨平台的语言，其靠着“Compile once, run anywhere&#8221;的大旗，拮杆而起，打下一片天下，如今稳坐头把交椅。那么，想要跨平台，它就要屏蔽各个操作系统平台和硬件平台的差异，因此它有虚拟机，虚拟机实质是一对操作系统的一个抽象，把差异进行屏蔽，从而对语言本身来说，所有操作系统就都是一样的了。内存模型，也就是虚拟机对运行时的一些约定，或者叫做强制规定，比如变量的操作，数据的读取，指令执行顺序等。都做了哪些规定呢？我们分别来说：</p>

<ul>
<li><p>线程模型</p>

<p>  <img src="https://img.alicdn.com/imgextra/i3/715978679/TB2_LEObhRzc1FjSZFPXXcGAFXa_!!715978679.png"></p>

<p>  因为Java天生支持多线程，所以，虚拟机也必须要有线程模型，否则就无法屏蔽操作系统的差异。虚拟机规定，所有的变量都存储在主存中，也就是通常所指的内存，每个线程可以有自己的独立的工作内存，可以理解为每个CPU核心的缓存，线程对变量的操作都只能在自己的工作内存中，不能直接对主存操作，也不能访问其他线程的工作内存。</p></li>
<li><p>原子性操作</p>

<p>  虚拟机保证对基本的基本数据类型的赋值是原子的，比如int，boolean和float。但是像long和double不一定，这取决于CPU的字长，32位下，long和double的赋值不是原子的，因为需要二个指令；而64位CPU则一个指令搞定。</p>

<p>  如何保证原子性呢？方式一是上面提过的用volatile，另外就是用同步锁机制。</p></li>
<li><p>可见性</p>

<p>  前面说到每个CPU可以有自己的工作内存，因此，当一个线程对某一变量操作后，其他线程是没有办法直接拿到最新变化的。</p>

<p>  如何保证可见性呢？方法一就是把变量用volatile修饰，另外就是用同步锁机制。</p></li>
<li><p>指令重排与happens-before原则</p>

<p>  指令重排与happens-before原因，是不同的，也是不冲突的。正常情况下，也就是说单线程情况下，指令的执行顺序是按书写顺序从上到下，但不是严格的，虚拟机会在不影响程序结果正确性的前提下对指令进行重排，比如：</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这三个指令，哪个先执行，是不会影响程序结果的，这时指令可能重排；而再如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种情况下，是无法重排，不可能把第3句放到前面，那样会得不到正确的结果。</p>

<p>而happens-before是指在多线程情况下，虚拟机来保证某些操作的先后性，或者说前面的操作结果，对后面是可见的。比如上面的第二个例子，在多线程情况下，c = a + b是有可能在a, b赋值前执行的，这也恰 恰是我们需要小心解决的由多线程机制带来的问题。</p>

<p>虚拟机的默认支持的happens-before(先行发生)原则：</p>

<ul>
<li>程序次序规则：一个线程内，按照代码顺序，书写在前面的操作先行发生于书写在后面的操作</li>
<li>锁定规则：一个unLock操作先行发生于后面对同一个锁额lock操作</li>
<li>volatile变量规则：对一个变量的写操作先行发生于后面对这个变量的读操作</li>
<li>传递规则：如果操作A先行发生于操作B，而操作B又先行发生于操作C，则可以得出操作A先行发生于操作C</li>
<li>线程启动规则：Thread对象的start()方法先行发生于此线程的每个一个动作</li>
<li>线程中断规则：对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生</li>
<li>线程终结规则：线程中所有的操作都先行发生于线程的终止检测，我们可以通过Thread.join()方法结束、Thread.isAlive()的返回值手段检测到线程已经终止执行</li>
<li>对象终结规则：一个对象的初始化完成先行发生于他的finalize()方法的开始</li>
</ul>


<p>很多规则显而易见的，或者想一下还是很容易想通的，重点解析一下第2, 3, 4条：</p>

<ul>
<li><p>锁定规则：一个unLock操作先行发生于后面对同一个锁额lock操作</p>

<p>  这里的意思是，同一个锁(lock)，如果处于锁定状态，那么只能先释放锁，然后才能被再次锁定。这么一说就明白了，这是显而易见的，要不然锁不就失去它本身的作用了么。</p>

<p>  <strong>注意</strong>：这里有必要进一步说明一下，对于可重入锁，这里应该指的就是其他线程再次获得锁之前，锁必须被释放。因为对于可重入锁，锁的持有线程，是可以在不释放的前提下，继续获得锁的。</p></li>
<li><p>volatile变量规则：对一个变量的写操作先行发生于后面对这个变量的读操作</p>

<p>  这里其实有二层，一个是前面提过的，读volatile总是能读到最新的值，即使是写线程和读线程同时进行。因为，写操作会被更新到主存，读线程的工作内存会被置为无效，需要重新到主存去读，而读主存的地址，是要等待该地址更新后才能成功读取。</p>

<p>  另外，一个就是对于volatile上下文的变量的读写的影响，也就是说它为什么能禁止指令重排：volatile的准确可见性作用是，当一个线程写一个volatile变量时，写完成后会刷新工作内存到主存，这会把目前这个线程所做过修改的所有变量都刷新到主存。举个例子来说明：</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">a</span><span class="o">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">b</span><span class="o">;</span>
</span><span class='line'><span class="kd">volatile</span> <span class="kt">boolean</span> <span class="n">flag</span><span class="o">;</span>
</span><span class='line'>          
</span><span class='line'><span class="kt">void</span> <span class="nf">write</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">a</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
</span><span class='line'>  <span class="n">b</span> <span class="o">=</span> <span class="mi">4</span><span class="o">;</span>
</span><span class='line'>  <span class="n">flag</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>          
</span><span class='line'><span class="kt">void</span> <span class="nf">read</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">print</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
</span><span class='line'>  <span class="n">print</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
</span><span class='line'>  <span class="n">print</span><span class="o">(</span><span class="n">flag</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果线程A调用write()，线程B调用read()，那么B能读到a, b和flag的最新值（A所写的值）。</p>

<p>由此，可以引申出一个volatile的高级应用，可以当作同步锁：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">Object</span> <span class="n">object</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">volatile</span> <span class="n">hasNewObject</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>          
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">put</span><span class="o">(</span><span class="n">Object</span> <span class="n">newObject</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="n">hasNewObject</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="c1">//wait - do not overwrite existing new object</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">object</span> <span class="o">=</span> <span class="n">newObject</span><span class="o">;</span>
</span><span class='line'>    <span class="n">hasNewObject</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span> <span class="c1">//volatile write</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>          
</span><span class='line'><span class="kd">public</span> <span class="n">Object</span> <span class="nf">take</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">while</span> <span class="o">(!</span><span class="n">hasNewObject</span><span class="o">)</span> <span class="o">{</span> <span class="c1">//volatile read</span>
</span><span class='line'>      <span class="c1">//wait - don&#39;t take old object (or null)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">Object</span> <span class="n">obj</span> <span class="o">=</span> <span class="n">object</span><span class="o">;</span>
</span><span class='line'>  <span class="n">hasNewObject</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span> <span class="c1">//volatile write</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">obj</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为写hasNewObject时会把object也刷新了，所以取对象的线程，可以在只要hasNewObject为true时就可以读到正确的值。
* 传递规则：如果操作A先行发生于操作B，而操作B又先行发生于操作C，则可以得出操作A先行发生</p>

<p>这个就像某些运行符的传递性一样，具体传递性，从而使整个happens-before规则产生实际作用。</p>

<h3>volatile的实现机制</h3>

<p>计算机科学里面，为了解决复杂性，都会分层。正如一个名人所说：&#8221;计算机的任何问题都可以通过增加一个虚拟层来解决&#8221;(&ldquo;All problems in computer science can be solved by another level of indirection&rdquo;)。volatile虚拟机层引入的，解决语言层面的问题，那么它的实现，必然是靠下一层的支持，也就是需要汇编或者说处理器指令的支持来实现，volatile是靠内存屏障和<a href="https://en.wikipedia.org/wiki/MESI_protocol">MESI</a>（缓存一致性协议）来达成的它的作用的。</p>

<p><a href="https://en.wikipedia.org/wiki/Memory_barrier">内存屏障</a>(Memory Barriers)是处理器提供的一组内存操作指令，它的作用是限制内存操作的顺序，也就是说内存屏障像一个栅栏一样，它前面的指令要在它后面的指令之前完成；还能强制把缓存写入到主存；再有的就是触发缓存一致性，就是当有写变量时，会把其他CPU核心的缓存变为无效。</p>

<h3>总结</h3>

<p>volatile是一个比较复杂的修饰符，想要使用它，就要完全理解它的作用，它能用来做什么，以及不能干什么。如果，不是很确定，要么弄懂，要么就不要使用。事实上，大多数情况下，标志变量，还是非常适合volatile的。</p>

<p>java.util.concurrent.*里面的高级线程安全数据结构像ConcurrentHashMap以及java.util.concurrent.atomic.*等的实现都用到了volatile。可以多看看这些类的实现，以加深对volatile的理解和运用。</p>

<h2>参考资料</h2>

<ul>
<li><a href="http://www.ibm.com/developerworks/cn/java/j-jtp06197.html">Java 理论与实践: 正确使用 Volatile 变量</a></li>
<li><a href="http://www.cnblogs.com/dolphin0520/p/3920373.html">Java并发编程：volatile关键字解析</a></li>
<li><a href="http://www.infoq.com/cn/articles/java-memory-model-4#">深入理解Java内存模型（四）——volatile</a></li>
<li><a href="http://www.infoq.com/cn/articles/ftf-java-volatile">聊聊并发（一）——深入分析Volatile的实现原理</a></li>
<li><a href="http://tutorials.jenkov.com/java-concurrency/volatile.html">Java Volatile Keyword</a></li>
<li><a href="https://en.wikipedia.org/wiki/Volatile_(computer_programming">volatile (computer programming)</a>)</li>
<li><a href="https://en.wikipedia.org/wiki/Java_memory_model">Java Memory Model</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[说说Android的MVP模式]]></title>
    <link href="http://toughcoder.net/blog/2015/11/29/understanding-android-mvp-pattern/"/>
    <updated>2015-11-29T15:53:46+08:00</updated>
    <id>http://toughcoder.net/blog/2015/11/29/understanding-android-mvp-pattern</id>
    <content type="html"><![CDATA[<p>安卓应用开发是一个看似容易，实则很难的一门苦活儿。上手容易，看几天Java，看看四大组件咋用，就能整出个不太难看的页面来。但是想要做好，却是很难。系统框架和系统组件封装了很多东西，开发者弄几个Activity，用LinearLayout把布局组合在一起，添加点事件监听，一个应用就成型了。红海竞争，不管多么复杂的UX和业务逻辑都是一个月快速上线，二周一个迭代，领导和产品早上改需求，晚上改设计，再加上产品经理和设计师都按照iOS来设计，这一系列原因导致很多安卓应用不但体验差，不稳定，性能低，而且内部代码相当之混乱，即使BAT也是如此。</p>

<p><a href="http://toughcoder.net/blog/2015/11/29/understanding-android-mvp-pattern/"><img src="https://img.alicdn.com/imgextra/i1/715978679/TB2VTfHmVXXXXajXFXXXXXXXXXX_!!715978679.jpg"></a></p>

<!-- more -->


<p>反观国外市场（谷歌应用市场）上面的大部分应用都还是比较好的，表现在符合安卓设计规范，性能和稳定上表现不俗，体验上更符合安卓系统，而且会发现他们的代码也是很有设计思想的。GitHub上面的很多安卓开源项目也都是源自国外的优秀开发者以及他们的项目。</p>

<p>安卓应用也是软件，代码结构合理，层次清晰不但容易维护而且还容易做自动化测试和单元测试，这是开发者的美好愿望，也是提升效率的必然之路。</p>

<p>安卓由于系统架构特性，UI组件Activity中融合了View的处理，事件处理和逻辑处理，随着业务的越来越复杂，导致Activity也越来越雍肿，几千行的Activity随处可见，Fragment也不能解决问题，千行以上的Fragment也不在少数，这个时候就完全不要谈什么可维护性，可测试性了。能完成需求就算高手了。</p>

<p>MVP便应运而生，就来解决这些问题的。</p>

<h2>什么是<a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter">MVP</a>模式</h2>

<p>MVP是针对有GUI存在的应用程序，比如像安卓，像水果以及PC的客户端软件中用以划分组织代码的一种设计模式，是由MVC模式升级演进出来的，目的在于，对于GUI层来说，把UI展示与逻辑分开。</p>

<ul>
<li>Model &ndash; 为UI层提供的数据，或者保存UI层传下来的数据</li>
<li>View &ndash; 单纯的展示数据，响应用户操作并都转发给Presenter来做具体的处理</li>
<li>Presenter &ndash; 逻辑控制层，从Model处取数据，运算和转化，最后用View来展示；并处理View传过来的用户事件，并做处理</li>
</ul>


<p><img src="https://img.alicdn.com/imgextra/i4/715978679/TB2ZW_jiXXXXXciXpXXXXXXXXXX_!!715978679.png"></p>

<p>需要注意的是MVP仅用于应用中的GUI部分，它并不是整个应用的架构方式。一个应用的主要的架构应该包括基础组件，业务逻辑层和GUI展示层，而MVP仅是用于展示层的设计模式。另外，它是一个方法论的东西，没有固定的实现方式，只要能体现出它的方法就可以算是MVP。</p>

<p>虽然是方法论，但是也有一些指导性的原则来约束实现：</p>

<ul>
<li>Model与View不能直接通信，只能通过Presenter</li>
<li>Presenter类似于中间人的角色进行协调和调度</li>
<li>Model和View是接口，Presenter持有的是一个Model接口和一个View接口</li>
<li>Model和View都应该是被动的，一切都由Presenter来主导</li>
<li>Model应该把与业务逻辑层的交互封装掉，换句话说Presenter和View不应该知道业务逻辑层</li>
<li>View的逻辑应该尽可能的简单，不应该有状态。当事件发生时，调用Presenter来处理，并且不传参数，Presenter处理时再调用View的方法来获取。</li>
</ul>


<p>从这里可以看的出来，其实，MVP的目的就是把GUI的逻辑都集中在Presenter层，又把View层和Model与其用接口分离，让View尽可能的简单，这样可以加强移植性。因为View层是肯定不能移植的，不同的平台GUI的窗口部件肯定不一样，Model也是不太好移植的，因为每个平台的IO也都是不一样的。但是，MVP中的P肯定是可以移植的，因为它里面只有逻辑，且View和Model都是接口，所以很容易移植。同时，因为View和Model都是接口，这个Presenter也非常好测试，只要实现一个View的接口和Model的接口，就可以单独的测试Presenter了。</p>

<p>严格来讲，View只是被动的显示，提供方法由Presenter来调用，数据等都是由Presenter来提供，内部不能任何的逻辑与状态，逻辑和状态都应该是在Presenter中。UI事件发生时，调用Presenter的方法来处理，不能传参数，也不能有返回值，在Presenter中处理后再调用View来更新数据和状态。</p>

<h2>MVP与<a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">MVC</a>的区别</h2>

<p>MVC之中逻辑是放在了Model里，Controller负责桥接View和Model，View发生变化时通知Controller，Controller再通知Model，Model进行逻辑处理，更新数据，然后通知View来刷新。可以看到MVC中三者之间都有联系，如果处理不好，或者当View比较复杂时，三者之间都会双向关联。MVC在命令行应用，以及WEB中有大量的应用，但对于客户端（PC和移动端）的GUI应用，MVC往往解决不了复杂性，移植性上以及可测试性上也没有优势。</p>

<p><img src="https://img.alicdn.com/imgextra/i2/715978679/TB2fYnMiXXXXXa3XXXXXXXXXXXX_!!715978679.png"></p>

<p>MVP的改进在于：</p>

<ul>
<li>逻辑放在Presenter中</li>
<li>View和Model抽象成为接口</li>
</ul>


<p>这样就带了二个好处：</p>

<ul>
<li>代码更加容易移植</li>
<li>代码更加容易加入Unit Testing</li>
</ul>


<h2>如何在安卓中实践MVP</h2>

<p>MVP是一个方法论的东西，也就是没有任何固定的具体的实现形式，只要能够把View跟Model解除联系，把逻辑都放在Presenter中，那么就能算得上是MVP，一些具体的实践的指导性原则：</p>

<ul>
<li>View是一个接口，负责被动的把处理好的数据显示出来</li>
<li>Model也是一个接口，负责获取数据和存储数据</li>
<li>View调用Presenter处理用户事件也是一个接口，称为事件Delegate</li>
<li>Presenter持有的是View的接口和Model接口</li>
</ul>


<p> 安卓的Activity是一个比较奇葩的角色，在MVP中，既可以用作V，因为一个应用的根布局总是由Activity来创建的。当然也可以当作P，因为Activity是一个应用的入口，也是出口，再加上一些关键的系统事件也都是通过Activity的方法来通知的（比如configChange, saveInstance）。其实，都可以。因为MVP是方法论，并没有固定的形式，只要是把数据处理的逻辑都封装在Presenter里，让其去控制View和Model，让Activity来承担View还是Presenter，其实都可以。</p>

<h2>MVP不是银弹，仅是展示层的一种范式而已</h2>

<p>最重要的一点就是要明白，MVP不会拯救你的应用，不要以为使用了MVP就能让代码更容易维护，更少的Bug，添加新功能会更容易。MVP仅是GUI层的一种编程范式而已，且因为它是方法论的东西，对实现方式并没有固定的形式，所以会被滥用，如果没有深刻理解MVP的思想，更加会导致灾难性的结果。</p>

<p>软件，移动应用也不例外，如果功能简单，业务简单，那么代码怎么写其实也都无大碍，但当功能越来越多，业务越来越复杂的时候，就必须要采取必要的方法来应对复杂度和软件的可开发性，可维护性。比如，说的夸张一点，一个helloworld式的应用，你怎么写都可以。但当功能复杂到一个Activity几千行代码的时候，你再怎么MVP，MVC或者MVVM都不能解决问题，再怎么把Activity当成P或者当成V都没有用。</p>

<p>要知道MVP仅是解决GUI应用程序中展示层的问题，并且它带来的最大的好处是方便测试和移植，因为逻辑都在P里面，P持有的又仅是View和Model的接口，所以P是可测试的，Mock一个View的实现，和Mock一个Model的实现，就可以完全脱离平台和框架的限制来自由的测试P。同样，移到一个新的框架和平台后，只需要实现View和Model就可以了，P是不需要改变的。</p>

<h2>分层和模块化才是解决应用越来越复杂之道</h2>

<h3>分层</h3>

<p>所谓分层，也就是应用程序的架构方法，把应用程序分成好多层，可以参考Bob大叔的<a href="http://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html">The Clean Architecture</a>。</p>

<p><img src="https://img.alicdn.com/imgextra/i1/715978679/TB2usPAiXXXXXXsXpXXXXXXXXXX_!!715978679.png"></p>

<p>至少应该分层三层，最底层是平台适配层，把用到的平台的组件，控件，工具，比如UI组件，数据库等等，进行封装；中间层就是业务层，就是你应用的核心的业务逻辑，或者说你的应用解决了用户什么样子的问题，这一层是不会随着平台和UI的改变而改变的。比如新闻阅读类，那么从服务器拉取数据，解析数据，缓存数据，为上层提供数据这些事情都属于业务层；最上面就是展示层或者叫做UI层。展示层是可以调用业务层的方法和数据。这样分层，可以让展示层只是负责与用户交互，展示业务数据，展示层会变得简单很多，同时业务层因为不涉及具体的平台和UI的细节，就非常容易移植，当移植到新平台或者要做UI改版也是非常容易做的。</p>

<h3>模块化</h3>

<p>另外一个就是模块化，其实这是软件开发的一个非常基本的方法，也是非常有用的一个方法。模块划分的方法非常简单就是按照功能来划分。让模块处理好自己的事情，暴露统一的接口给外部，定义好输入与输出。输入就以参数和方法形式暴露，输出最好以Delegate方式，这样能把耦合降到最低。再由一个统一的顶层类来管理各个模块，顶层直接调用各模块，各模块通过Delegate方式来回调管理者。</p>

<p>对于业务层，模块化相对比较容易，因为这里并不涉及UI和平台的特性，业务层都应该是独立的，可移植的，全都是自己写的类。</p>

<p>但对于展示层，通常没有那么的容易，因为有平台的限制。比如说安卓，根布局必须由Activity来创建。首先，模块的划分也要以功能为界限。然后，就是Activity的布局，要把布局按功能区域来管理，然后把每个功能模块的top container传给模块，具体内部如何布局，如何填充数据，就由模块自己负责。Activity就起管理各个模块的作用。再有，模块间的通信，可以都通过Activity来，比如模块1有模块2的入口按扭，但是模块1与模块2之间没有交集，这个时候的处理方式就是模块1Delegate给Activity，然后Activity再调用模块2来显示和隐藏。如果模块多到Activity的管理工作也变得庞大复杂时就要拆出子Controller来管理模块，也就是三层，甚至还可以四层。模块的原则就是做好封装，让外层管理变得简单，这样外层管理的复杂度就会降下来，就好比公司人员的组织架构一样。</p>

<p><img src="https://img.alicdn.com/imgextra/i3/715978679/TB2fZ2siXXXXXadXpXXXXXXXXXX_!!715978679.png"></p>

<p><img src="https://img.alicdn.com/imgextra/i3/715978679/TB2KuvqiXXXXXaPXpXXXXXXXXXX_!!715978679.png"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;LinearLayout&gt;</span>
</span><span class='line'>  <span class="nt">&lt;LinearLayout</span> <span class="na">id=</span><span class="s">&quot;module1&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;RelativeLayout</span> <span class="na">id=</span><span class="s">&quot;module2&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ListView</span> <span class="na">id=</span><span class="s">&quot;module3&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/LinearLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DemoActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="kd">implements</span> <span class="n">Module1Delegate</span><span class="o">,</span> <span class="n">Module2Delegate</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">bundle</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">demo_activity</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Module1</span> <span class="n">module1</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Module1</span><span class="o">(</span><span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">module1</span><span class="o">),</span> <span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Module2</span> <span class="n">module2</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Module2</span><span class="o">(</span><span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">module2</span><span class="o">),</span> <span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Module3</span> <span class="n">module3</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Module3</span><span class="o">(</span><span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">module3</span><span class="o">));</span>
</span><span class='line'>    <span class="n">module1</span><span class="o">.</span><span class="na">render</span><span class="o">();</span>
</span><span class='line'>    <span class="n">module2</span><span class="o">.</span><span class="na">render</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onModule1</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="s">&quot;Demo&quot;</span><span class="o">,</span> <span class="s">&quot;module1 say hello to the world.&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onModule2</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">show</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">show</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">module3</span><span class="o">.</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">module3</span><span class="o">.</span><span class="na">hide</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实，还可以做的更彻底一些，那就是Activity中的布局都由ViewStub来组装，然后由各个子模块来决定如何布局。</p>

<p>对于多层全屏层叠的应用来说，要简单一些，对于每一层都可以由Activity或者Fragment来实现，如果业务层已经抽离出来，就都可以直接调用业务层来获取数据，因此也不会有传递数据的麻烦。</p>

<p>做好了分层和模块化，我相信，能解决绝大多数应用遇到的问题。至于模块内部用什么MVP，MVC，MVVM，其实真的无大害，因为模块内部的实现方式不影响其他模块，也不影响外部管理和level更高的类。</p>

<h2>把基本的原则做到就够了</h2>

<p>编程是一项社会活动，所以人和人与人之间的关系才是核心，优秀的人，你发现他也没有用什么MVP，什么MVC，什么高大上的设计模式和算法，但是他的代码是很清晰，很容易看懂。有些即使号称用什么高大上的，最先进的设计模式，但是代码仍是一坨坨的，可能连他自己都看不懂。</p>

<p>把基本的抽象和封装真正做到位了，就够了，代码水平可以的话，再能做到命名见名知义，小而活的方法，小而活的类，一个方法只做一件事，一个类只做一件事情。做到这些，也就够了。</p>

<p>至于什么高大上的MVP，什么XP，什么TDD，什么结对，其实都是浮云，如果你的水平比较高，代码sense较高，那么用不用这些方法差别不大。</p>

<p>MVP的核心目的是方便UT，因为把展示层的逻辑都集中在P，而P又不依赖于具体的View和Model，所以可以随便Mock一个View和一个Model来测试P，甚至P可以独立于平台的限制来单独的测试。所以，如果你不搞UT，以不以MVP方式来实现，其实没啥影响，甚至网上不少人还专门为MVP而弄出几个抽象的类，把Activity啥的封装了一下，号称<a href="http://blog.csdn.net/qibin0506/article/details/49992897">MVP框架</a>，毫无实用价值。软件方法，切忌生搬硬套，一定要先理解透彻方法，再理解透彻你的问题和环境限制，然后灵活运动，什么叫理解透彻呢？就是你能给别人讲明白时。这说起来还是太抽象，只能在实际运用中慢慢领悟。</p>

<p>再有就是<a href="https://en.wikipedia.org/wiki/Unit_testing">Unit Testing</a>这玩意儿，实际的意义也没有那么大，要知道写测试代码通常要比生产代码花更多的精力，前提还是你的代码写的可测，可测性比可读性还要难一点，说白了这对开发者水平的要求相当的高，不是看了一遍书，学习一下JUnit就能搞得好的。还有就是如果你的需求经常变动，移动互联时代这是家常便饭，那么做UT会让开发量double甚至tripple，因为之前写的UT全没有用。</p>

<p>还想说一点就是，软件开发方法这东西必须是由上向下推动，也就是由老板带头来推动，否则技术小组长或者开发者自己是很难推得动的。特别是像UT，Code Review或者结对之类的会“降低开发效率”的方法。这些方法短期内不会提升效率和质量，只会降低需求的产出率，平均开发水平比较高的团队也至少要几个月后才能真正的适应这些方法，然后才有可能提高效率和提高质量。如果不是老板主动推动，谁能受得了呢？KPI咋整？</p>

<h2>结论</h2>

<p>MVP或者MVVM带来最大的好处是：</p>

<ul>
<li>方便移植</li>
<li>方便UT</li>
</ul>


<p>另外，要注意MVP仅是展示层的方法论。应用整体还是要进行分层和模块化。如果分层和模块化进行的彻底，并且在移植和UT没有强烈的需求，其实MVP与不P真的不重要。</p>

<h2>参考资源</h2>

<ul>
<li><a href="http://rocko.xyz/2015/02/06/Android%E4%B8%AD%E7%9A%84MVP/">Android中的MVP</a></li>
<li><a href="http://blog.csdn.net/vector_yi/article/details/24719873">MVP模式在Android开发中的应用</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android技巧：学习使用GridLayout]]></title>
    <link href="http://toughcoder.net/blog/2015/11/25/android-tricks-introduct-to-gridlayout/"/>
    <updated>2015-11-25T19:12:19+08:00</updated>
    <id>http://toughcoder.net/blog/2015/11/25/android-tricks-introduct-to-gridlayout</id>
    <content type="html"><![CDATA[<p><a href="http://developer.android.com/intl/zh-cn/reference/android/widget/GridLayout.html">GridLayout</a>是一个非常强大的网格类布局，它不但能像<a href="http://developer.android.com/intl/zh-cn/reference/android/widget/TableLayout.html">TableLayout</a>那样，实现网格类布局，但它更为强大的地方在于每个Cell的大小可以横向或者纵向拉伸，每个Cell的对齐方式也有很多种，而且不像TableLayout，需要一个<a href="http://developer.android.com/intl/zh-cn/reference/android/widget/TableRow.html">TableRow</a>，GridLayout可以通过指定Cell的坐标位置就能实现Cell的拉伸，从而实现，大小不一致的风格卡片式布局。</p>

<p><a href="http://toughcoder.net/blog/2015/11/25/android-tricks-introduct-to-gridlayout/"><img src="https://img.alicdn.com/imgextra/i1/715978679/TB21iP.mVXXXXc3XXXXXXXXXXXX_!!715978679.png" width="320" height="240"></a></p>

<!-- more -->


<h2>基本概念</h2>

<p>GridLayout把页面分成m行和n列，使用m+1条线和n+1条线，把页面共分成n*m个Cell。指定位置时行坐标是从0到m，列坐标是从0到n。每一个子View占一个或多个Cell。比如(0, 0)到(0, 1)就是占第一个Cell的区域。(0, 0), (0, 2)就是占第一行的2个Cell的区域(横向拉伸).</p>

<h2>使用方法</h2>

<p>主要介绍一下如何添加Cell，以及设置Cell的位置和拉伸。其他的跟普通的ViewGroup没什么区别的，也没啥好说的。</p>

<h3>GridLayout的基本设置</h3>

<p>首先需要给GridLayout设置行数和列数:</p>

<ul>
<li>android:columnCount 整数，最多的列数</li>
<li>android:rowCount 整数，最多的行数</li>
</ul>


<p>在添加Cell就需要注意，不能超过设置的最大行数和列数，否则在添加Cell时会有异常。</p>

<h3>元素Cell的位置控制</h3>

<p>添加Cell时需要指定其位置</p>

<ul>
<li>android:layout_column 整数n，在哪一列开始显示n=[0, 最大列-1]</li>
<li>android:layout_columnSpan 整数k，指定元素横跨几列，需要注意保证n+k &lt;= 最大列数</li>
<li>android:layout_row 指定从哪一行开始显示，规则同列数</li>
<li>android:layout_rowSpan 纵向跨几行，规则同列</li>
</ul>


<h3>行高和列宽的确定</h3>

<p>每一行的高度是由这一行中Cell的最大高度决定的，以及每一列的宽度是由每一列中最大的宽度决定的，小于行高和列宽的元素可以设置其对齐方式和填充方式。</p>

<h3>填充方式</h3>

<p>通过Cell的android:layout_gravity参数来指定，Cell的填充方式，注意仅当Cell元素本身的尺寸小于它所占格子的大小时才有效，比如元素本身尺寸小于行高和列宽，或者当它占多行，或者占多列时：</p>

<ul>
<li>center &ndash; 不改变元素的大小，仅居中</li>
<li>center_horizontal &ndash; 不改变大小，水平居中</li>
<li>center_vertical &ndash; 不改变大小，垂直居中</li>
<li>top &ndash; 不改变大小，置于顶部</li>
<li>left &ndash; 不改变大小，置于左边</li>
<li>bottom  &ndash; 不改变大小，置于底部</li>
<li>right  &ndash; 不改变大小，置于右边</li>
<li>start  &ndash; 不改变大小，置于开头（这个是与RTL从右向左读的文字有关的，如果使用start/end，那么当LTR文字时start=left,end=right，当RTL时start=right,end=left，也就是说系统会自动处理了)</li>
<li>end  &ndash; 不改变大小，置于结尾</li>
<li>fill &ndash; 拉伸元素控件，填满其应该所占的格子</li>
<li>fill_vertical &ndash; 仅垂直方向上拉伸填充</li>
<li>fill_horizontal &ndash; 仅水平方向上拉伸填充</li>
<li>clip_vertical &ndash; 垂直方向上裁剪元素，仅当元素大小超过格子的空间时</li>
<li>clip_horizontal &ndash; 水平方向上裁剪元素，仅当元素大小超过格子的空间时</li>
</ul>


<p>需要注意的是这些值是可以组合的，比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>android:layout_gravity=&quot;center_vertical|clip_horizontal&quot;
</span></code></pre></td></tr></table></div></figure>


<h2>Cell之间的间距如何控制</h2>

<h3>默认间距</h3>

<p>可以使用默认的间距android:useDefaultMargins=&ldquo;true&#8221;或者GridLayout#setUseDefaultMargins()。这个属性默认值是&#8221;false&#8221;。</p>

<h3>另外一种方式就是跟普通布局管理器一样，给每个Cell设置其margins</h3>

<p>通常如果不满意系统的默认间距，就可以设置useDefaultMargins=&ldquo;false&#8221;，然后通过给Cell设置margin来控制间距。</p>

<h2>居中方法</h2>

<ul>
<li><p>仅有一个Cell或者仅有一行，或者仅有一列时</p>

<p>当仅有一个子View时或者仅有一行或者一列的时候，可以把每个Cell设置其android:layout_gravitiy=&ldquo;center&rdquo;(相应代码为<a href="http://developer.android.com/intl/zh-cn/reference/android/view/Gravity.html">LayoutParams#Gravity</a>为<a href="http://developer.android.com/intl/zh-cn/reference/android/view/Gravity.html#CENTER">CENTER</a>)，就可以让其在GridLayout中居中。</p></li>
</ul>


<p>让一行居中：</p>

<p><img src="https://img.alicdn.com/imgextra/i3/715978679/TB2e.2djVXXXXcNXXXXXXXXXXXX_!!715978679.png"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;GridLayout</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;200dip&quot;</span>
</span><span class='line'>    <span class="na">android:useDefaultMargins=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>    <span class="na">android:background=</span><span class="s">&quot;@android:color/white&quot;</span>
</span><span class='line'>    <span class="na">android:rowCount=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>    <span class="na">android:columnCount=</span><span class="s">&quot;2&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Button</span> <span class="na">android:layout_column=</span><span class="s">&quot;0&quot;</span>
</span><span class='line'>        <span class="na">android:layout_row=</span><span class="s">&quot;0&quot;</span>
</span><span class='line'>        <span class="na">android:text=</span><span class="s">&quot;Left Button&quot;</span>
</span><span class='line'>        <span class="na">android:layout_gravity=</span><span class="s">&quot;fill_horizontal|center_vertical&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Button</span> <span class="na">android:layout_column=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>        <span class="na">android:layout_row=</span><span class="s">&quot;0&quot;</span>
</span><span class='line'>        <span class="na">android:text=</span><span class="s">&quot;Right Button&quot;</span>
</span><span class='line'>        <span class="na">android:layout_gravity=</span><span class="s">&quot;fill_horizontal|center_vertical&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/GridLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>让一个元素居中：
</code></pre>

<p>   <img src="https://img.alicdn.com/imgextra/i1/715978679/TB25SeTjVXXXXXbXFXXXXXXXXXX_!!715978679.png"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;GridLayout</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;200dip&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;200dip&quot;</span>
</span><span class='line'>    <span class="na">android:useDefaultMargins=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>    <span class="na">android:background=</span><span class="s">&quot;@android:color/white&quot;</span>
</span><span class='line'>    <span class="na">android:rowCount=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>    <span class="na">android:columnCount=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Button</span> <span class="na">android:layout_column=</span><span class="s">&quot;0&quot;</span>
</span><span class='line'>        <span class="na">android:layout_row=</span><span class="s">&quot;0&quot;</span>
</span><span class='line'>        <span class="na">android:text=</span><span class="s">&quot;Left Button&quot;</span>
</span><span class='line'>        <span class="na">android:layout_gravity=</span><span class="s">&quot;center&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/GridLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>其他情况</p>

<p> 其他情况，设置子View的Gravity就不再起作用了，这时最好的办法就是让GridLayout的高度是WRAP_CONTENT，然后让GridLayout在其父布局中居中。</p></li>
</ul>


<p><img src="https://img.alicdn.com/imgextra/i1/715978679/TB2EivsjVXXXXXGXXXXXXXXXXXX_!!715978679.png"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'> <span class="nt">&lt;LinearLayout</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:orientation=</span><span class="s">&quot;vertical&quot;</span>
</span><span class='line'>    <span class="na">android:gravity=</span><span class="s">&quot;center&quot;</span>
</span><span class='line'>    <span class="na">android:background=</span><span class="s">&quot;@android:color/darker_gray&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;200dip&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;GridLayout</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:layout_gravity=</span><span class="s">&quot;center&quot;</span>
</span><span class='line'>        <span class="na">android:useDefaultMargins=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>        <span class="na">android:background=</span><span class="s">&quot;@android:color/white&quot;</span>
</span><span class='line'>        <span class="na">android:rowCount=</span><span class="s">&quot;2&quot;</span>
</span><span class='line'>        <span class="na">android:columnCount=</span><span class="s">&quot;2&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Button</span> <span class="na">android:layout_column=</span><span class="s">&quot;0&quot;</span>
</span><span class='line'>            <span class="na">android:layout_row=</span><span class="s">&quot;0&quot;</span>
</span><span class='line'>            <span class="na">android:text=</span><span class="s">&quot;Left Button&quot;</span>
</span><span class='line'>            <span class="na">android:layout_gravity=</span><span class="s">&quot;fill_horizontal|center_vertical&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Button</span> <span class="na">android:layout_column=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>            <span class="na">android:layout_row=</span><span class="s">&quot;0&quot;</span>
</span><span class='line'>            <span class="na">android:text=</span><span class="s">&quot;Right Button&quot;</span>
</span><span class='line'>            <span class="na">android:layout_gravity=</span><span class="s">&quot;fill_horizontal|center_vertical&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Button</span> <span class="na">android:layout_column=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>            <span class="na">android:layout_row=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>            <span class="na">android:text=</span><span class="s">&quot;Right Button 2&quot;</span>
</span><span class='line'>            <span class="na">android:layout_gravity=</span><span class="s">&quot;fill_horizontal|center_vertical&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/GridLayout&gt;</span>
</span><span class='line'><span class="nt">&lt;/LinearLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>适用场景</h2>

<p>GridLayout虽然强大，可以当作LinearLayout使用，也可以当作RelativeLayout使用，甚至也能当FrameLayout使用。但是，我们不可以滥用，对于任意布局都一样，不能是它能实现需求就使用它，而是要根据实际的需求，选择最简单，最方便的，同时也要考虑性能。</p>

<p>通常对于类似于网格的布局就可以考虑用GridLayout来实现，或者用LinearLayout横七竖八的套了好几层时也要考虑使用GridLayout。</p>

<h2>GridLayout vs GridView or RecyclerView</h2>

<p>当要实现网格布局，或者非均匀风格布局时，可能首先想到的就是GridView，但是这也要看实际的情况而定。GridView，ListView以及RecyclerView是用于无限长度列表或者网格的场景，它们最大的特点是无限长度，因此这几个组件的重点在于如何复用Cell以提升性能，以及处理手势事件（Fling）等。所以，每当遇到列表或者网格的时候，先想一下这个长度大概会是多少，如果是在百个以内，且不会随时增长，这时就可以考虑使用静态（非动态复用）的组件比如LinearLayout或者GridLayout来实现。</p>

<h2>实例</h2>

<p>说的太多都是废话，来一个实例感觉一下子是最直接的：</p>

<p><img src="https://img.alicdn.com/imgextra/i4/715978679/TB2Or2jjVXXXXb9XXXXXXXXXXXX_!!715978679.png"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;GridLayout</span>
</span><span class='line'>            <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>            <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>            <span class="na">android:layout_centerInParent=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>            <span class="na">android:background=</span><span class="s">&quot;@android:color/white&quot;</span>
</span><span class='line'>            <span class="na">android:alignmentMode=</span><span class="s">&quot;alignMargins&quot;</span>
</span><span class='line'>            <span class="na">android:useDefaultMargins=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>            <span class="na">android:columnCount=</span><span class="s">&quot;4&quot;</span>
</span><span class='line'>            <span class="na">android:rowCount=</span><span class="s">&quot;5&quot;</span>
</span><span class='line'>            <span class="na">android:visibility=</span><span class="s">&quot;visible&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Button</span> <span class="na">android:layout_column=</span><span class="s">&quot;0&quot;</span>
</span><span class='line'>                <span class="na">android:layout_row=</span><span class="s">&quot;0&quot;</span>
</span><span class='line'>                <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>                <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>                <span class="na">android:padding=</span><span class="s">&quot;10dip&quot;</span>
</span><span class='line'>                <span class="na">android:text=</span><span class="s">&quot;1&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Button</span> <span class="na">android:layout_column=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>                <span class="na">android:layout_row=</span><span class="s">&quot;0&quot;</span>
</span><span class='line'>                <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>                <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>                <span class="na">android:padding=</span><span class="s">&quot;10dip&quot;</span>
</span><span class='line'>                <span class="na">android:text=</span><span class="s">&quot;2&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Button</span> <span class="na">android:layout_column=</span><span class="s">&quot;2&quot;</span>
</span><span class='line'>                <span class="na">android:layout_row=</span><span class="s">&quot;0&quot;</span>
</span><span class='line'>                <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>                <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>                <span class="na">android:padding=</span><span class="s">&quot;10dip&quot;</span>
</span><span class='line'>                <span class="na">android:text=</span><span class="s">&quot;3&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Button</span> <span class="na">android:layout_column=</span><span class="s">&quot;0&quot;</span>
</span><span class='line'>                <span class="na">android:layout_row=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>                <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>                <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>                <span class="na">android:padding=</span><span class="s">&quot;10dip&quot;</span>
</span><span class='line'>                <span class="na">android:text=</span><span class="s">&quot;4&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Button</span> <span class="na">android:layout_column=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>                <span class="na">android:layout_row=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>                <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>                <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>                <span class="na">android:padding=</span><span class="s">&quot;10dip&quot;</span>
</span><span class='line'>                <span class="na">android:text=</span><span class="s">&quot;5&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Button</span> <span class="na">android:layout_column=</span><span class="s">&quot;2&quot;</span>
</span><span class='line'>                <span class="na">android:layout_row=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>                <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>                <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>                <span class="na">android:padding=</span><span class="s">&quot;10dip&quot;</span>
</span><span class='line'>                <span class="na">android:text=</span><span class="s">&quot;6&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Button</span> <span class="na">android:layout_column=</span><span class="s">&quot;0&quot;</span>
</span><span class='line'>                <span class="na">android:layout_row=</span><span class="s">&quot;2&quot;</span>
</span><span class='line'>                <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>                <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>                <span class="na">android:padding=</span><span class="s">&quot;10dip&quot;</span>
</span><span class='line'>                <span class="na">android:text=</span><span class="s">&quot;7&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Button</span> <span class="na">android:layout_column=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>                <span class="na">android:layout_row=</span><span class="s">&quot;2&quot;</span>
</span><span class='line'>                <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>                <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>                <span class="na">android:padding=</span><span class="s">&quot;10dip&quot;</span>
</span><span class='line'>                <span class="na">android:text=</span><span class="s">&quot;8&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Button</span> <span class="na">android:layout_column=</span><span class="s">&quot;2&quot;</span>
</span><span class='line'>                <span class="na">android:layout_row=</span><span class="s">&quot;2&quot;</span>
</span><span class='line'>                <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>                <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>                <span class="na">android:padding=</span><span class="s">&quot;10dip&quot;</span>
</span><span class='line'>                <span class="na">android:text=</span><span class="s">&quot;9&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Button</span> <span class="na">android:layout_column=</span><span class="s">&quot;0&quot;</span>
</span><span class='line'>                <span class="na">android:layout_row=</span><span class="s">&quot;3&quot;</span>
</span><span class='line'>                <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>                <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>                <span class="na">android:padding=</span><span class="s">&quot;10dip&quot;</span>
</span><span class='line'>                <span class="na">android:text=</span><span class="s">&quot;0&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Button</span> <span class="na">android:layout_column=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>                <span class="na">android:layout_row=</span><span class="s">&quot;3&quot;</span>
</span><span class='line'>                <span class="na">android:layout_gravity=</span><span class="s">&quot;fill_horizontal&quot;</span>
</span><span class='line'>                <span class="na">android:layout_columnSpan=</span><span class="s">&quot;2&quot;</span>
</span><span class='line'>                <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>                <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>                <span class="na">android:padding=</span><span class="s">&quot;10dip&quot;</span>
</span><span class='line'>                <span class="na">android:text=</span><span class="s">&quot;Delete&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Button</span> <span class="na">android:layout_column=</span><span class="s">&quot;0&quot;</span>
</span><span class='line'>                <span class="na">android:layout_row=</span><span class="s">&quot;4&quot;</span>
</span><span class='line'>                <span class="na">android:layout_columnSpan=</span><span class="s">&quot;2&quot;</span>
</span><span class='line'>                <span class="na">android:layout_gravity=</span><span class="s">&quot;fill_horizontal&quot;</span>
</span><span class='line'>                <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>                <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>                <span class="na">android:padding=</span><span class="s">&quot;10dip&quot;</span>
</span><span class='line'>                <span class="na">android:text=</span><span class="s">&quot;Clear&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Button</span> <span class="na">android:layout_column=</span><span class="s">&quot;2&quot;</span>
</span><span class='line'>                <span class="na">android:layout_row=</span><span class="s">&quot;4&quot;</span>
</span><span class='line'>                <span class="na">android:layout_columnSpan=</span><span class="s">&quot;2&quot;</span>
</span><span class='line'>                <span class="na">android:layout_gravity=</span><span class="s">&quot;fill_horizontal&quot;</span>
</span><span class='line'>                <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>                <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>                <span class="na">android:padding=</span><span class="s">&quot;10dip&quot;</span>
</span><span class='line'>                <span class="na">android:text=</span><span class="s">&quot;=&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Button</span> <span class="na">android:layout_column=</span><span class="s">&quot;3&quot;</span>
</span><span class='line'>                <span class="na">android:layout_row=</span><span class="s">&quot;0&quot;</span>
</span><span class='line'>                <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>                <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>                <span class="na">android:layout_gravity=</span><span class="s">&quot;fill&quot;</span>
</span><span class='line'>                <span class="na">android:padding=</span><span class="s">&quot;10dip&quot;</span>
</span><span class='line'>                <span class="na">android:text=</span><span class="s">&quot;+&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Button</span> <span class="na">android:layout_column=</span><span class="s">&quot;3&quot;</span>
</span><span class='line'>                <span class="na">android:layout_row=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>                <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>                <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>                <span class="na">android:layout_gravity=</span><span class="s">&quot;fill&quot;</span>
</span><span class='line'>                <span class="na">android:padding=</span><span class="s">&quot;10dip&quot;</span>
</span><span class='line'>                <span class="na">android:text=</span><span class="s">&quot;-&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Button</span> <span class="na">android:layout_column=</span><span class="s">&quot;3&quot;</span>
</span><span class='line'>                <span class="na">android:layout_row=</span><span class="s">&quot;2&quot;</span>
</span><span class='line'>                <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>                <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>                <span class="na">android:layout_gravity=</span><span class="s">&quot;fill&quot;</span>
</span><span class='line'>                <span class="na">android:padding=</span><span class="s">&quot;10dip&quot;</span>
</span><span class='line'>                <span class="na">android:text=</span><span class="s">&quot;*&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Button</span> <span class="na">android:layout_column=</span><span class="s">&quot;3&quot;</span>
</span><span class='line'>                <span class="na">android:layout_row=</span><span class="s">&quot;3&quot;</span>
</span><span class='line'>                <span class="na">android:layout_columnSpan=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>                <span class="na">android:layout_gravity=</span><span class="s">&quot;fill&quot;</span>
</span><span class='line'>                <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>                <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>                <span class="na">android:padding=</span><span class="s">&quot;10dip&quot;</span>
</span><span class='line'>                <span class="na">android:text=</span><span class="s">&quot;/&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/GridLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参考资料</h2>

<ul>
<li><a href="http://www.cnblogs.com/skywang12345/p/3154150.html">Android 布局之GridLayout</a></li>
<li><a href="http://android-developers.blogspot.com/2011/11/new-layout-widgets-space-and-gridlayout.html">New Layout Widgets: Space and GridLayout</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[安卓开发技术：监听软键盘的显示与隐藏]]></title>
    <link href="http://toughcoder.net/blog/2015/10/09/android-trick-detect-soft-keyboard-show-slash-hide/"/>
    <updated>2015-10-09T22:08:08+08:00</updated>
    <id>http://toughcoder.net/blog/2015/10/09/android-trick-detect-soft-keyboard-show-slash-hide</id>
    <content type="html"><![CDATA[<p>自从2007年乔帮主横空出世推出iPhone后，智能手机就都变成了触摸屏，且屏幕越来越大。输入自然也就通过软件来解决，现在来说绝大多数智能设备都是通过软键盘来做用户输入。在日常的开发过程中难免会跟软键盘打交道，比如强制显示或者强制隐藏等，也有些时候想要在键盘隐藏或者显示的时候做一点事情，这就需要准确的知道键盘的事件，这篇文章就来详细讨论一下Android下面如何做到监听键盘的事件。</p>

<p><a href="http://toughcoder.net/blog/2015/10/09/android-trick-detect-soft-keyboard-show-slash-hide/"><img src="https://img.alicdn.com/imgextra/i1/715978679/TB2DVP1mVXXXXa5XpXXXXXXXXXX_!!715978679.jpg"></a></p>

<!-- more -->


<h2>硬键盘显示隐藏的事件监听</h2>

<p>对于有硬键盘的设备，是会产生运行时的配置变更(<a href="http://developer.android.com/guide/topics/resources/runtime-changes.html#HandlingTheChange">Runtime Config Changes</a>)，因此可以通过<a href="http://developer.android.com/reference/android/app/Activity.html#onConfigurationChanged(android.content.res.Configuration">Activity#onConfigurationChanged</a>)回调来处理：</p>

<p>首先，要在AndroidManifest中给activity加上<a href="http://developer.android.com/guide/topics/manifest/activity-element.html#config">configChanges=&ldquo;keyboardHidden&rdquo;</a>。</p>

<p>然后，在代码中，处理：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onConfigurationChanged</span><span class="o">(</span><span class="n">Configuration</span> <span class="n">newConfig</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onConfigurationChanged</span><span class="o">(</span><span class="n">newConfig</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Checks whether a hardware keyboard is available</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">newConfig</span><span class="o">.</span><span class="na">hardKeyboardHidden</span> <span class="o">==</span> <span class="n">Configuration</span><span class="o">.</span><span class="na">HARDKEYBOARDHIDDEN_NO</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="s">&quot;keyboard visible&quot;</span><span class="o">,</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_SHORT</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">newConfig</span><span class="o">.</span><span class="na">hardKeyboardHidden</span> <span class="o">==</span> <span class="n">Configuration</span><span class="o">.</span><span class="na">HARDKEYBOARDHIDDEN_YES</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="s">&quot;keyboard hidden&quot;</span><span class="o">,</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_SHORT</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要注意的是，要用<a href="http://developer.android.com/reference/android/content/res/Configuration.html#hardKeyboardHidden">Configuration#hardKeyboardHidden</a>而不是<a href="http://developer.android.com/reference/android/content/res/Configuration.html#keyboardHidden">Configuration#keyboardHidden</a>，因为只有当硬键盘状态变化时才会回调onConfigurationChanged。</p>

<h2>软键盘显示隐藏事件监听</h2>

<p>现在的Android设备很少才会有硬键盘，绝大多数都是软键盘，而SDK和API中却没有软键盘隐藏变化的相关事件，没有直接支持不代表做不到。我们通过其他的方式还是可以做到监听软键盘显示与隐藏状态变化的。</p>

<h3>override onKeyPreIme</h3>

<p>当<a href="http://developer.android.com/reference/android/widget/EditText.html">EditText</a>获得焦点时，或者用户点击时，都会把软键盘弹起来（2.x版本长按MENU也可以强制弹出软键盘）。但是，隐藏软键盘一般都是BACK键，或者键盘自身提供隐藏的按扭，再有就是用代码强制隐藏。对于BACK键还是可以处理的，因为这属于事件(<a href="http://developer.android.com/reference/android/view/KeyEvent.html">KeyEvent</a>)，是能监听到的。</p>

<h4>核心原理</h4>

<p>子例化EditText，并覆写方法<a href="http://developer.android.com/reference/android/widget/TextView.html#onKeyPreIme(int,%20android.view.KeyEvent">onKeyPreIme</a>)。这个方法能在输入法前面拦掉事件，从而可以做一些事情：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">KeyPreImeEditText</span> <span class="kd">extends</span> <span class="n">EditText</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">KeyPreImeEditText</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">KeyPreImeEditText</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">AttributeSet</span> <span class="n">attrs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">attrs</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">KeyPreImeEditText</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">AttributeSet</span> <span class="n">attrs</span><span class="o">,</span> <span class="kt">int</span> <span class="n">defStyleAttr</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">attrs</span><span class="o">,</span> <span class="n">defStyleAttr</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onKeyPreIme</span><span class="o">(</span><span class="kt">int</span> <span class="n">keyCode</span><span class="o">,</span> <span class="n">KeyEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">keyCode</span> <span class="o">==</span> <span class="n">KeyEvent</span><span class="o">.</span><span class="na">KEYCODE_BACK</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="s">&quot;keyboard&quot;</span><span class="o">,</span> <span class="s">&quot;onKeyPreIme we got back&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">onKeyPreIme</span><span class="o">(</span><span class="n">keyCode</span><span class="o">,</span> <span class="n">event</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>优点</h4>

<p>简单粗暴，都是SDK支持的方法和事件，所以不会有兼容性等蛋疼的问题。</p>

<h4>缺点</h4>

<p>这仅在输入法前拦截到BACK事件，而前面提到BACK仅是能让软键盘隐藏掉的一个方式而已，所以这个方法是不能够完全做到监听软键盘隐藏状态变化的。这个方法仅适用于想拦截BACK，做一些其他事情的场景。</p>

<h3>override根布局的onMeasure</h3>

<p>另外的思路就是观察软键盘引起的布局变化，比如软键盘弹起时Activity的整体布局都会发生变化。</p>

<h4>核心原理</h4>

<p>子例化Activity的根布局（比如<a href="http://developer.android.com/reference/android/widget/LinearLayout.html">LinearLayout</a>或者<a href="http://developer.android.com/reference/android/widget/RelativeLayout.html">RelativeLayout</a>，然后覆写其<a href="http://developer.android.com/reference/android/view/View.html#onMeasure(int,%20int">onMeasure</a>)方法，在其中判断View的当前高度与其本应有的高度，如果当前高度小于本应有的高度，则表明软键盘在：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">KeyboardAwareLinearLayout</span> <span class="kd">extends</span> <span class="n">LinearLayout</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">KeyboardAwareLinearLayout</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">KeyboardAwareLinearLayout</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">AttributeSet</span> <span class="n">attrs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">attrs</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">KeyboardAwareLinearLayout</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">AttributeSet</span> <span class="n">attrs</span><span class="o">,</span> <span class="kt">int</span> <span class="n">defStyleAttr</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">attrs</span><span class="o">,</span> <span class="n">defStyleAttr</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onMeasure</span><span class="o">(</span><span class="kt">int</span> <span class="n">widthMeasureSpec</span><span class="o">,</span> <span class="kt">int</span> <span class="n">heightMeasureSpec</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">int</span> <span class="n">proposedHeight</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">getSize</span><span class="o">(</span><span class="n">heightMeasureSpec</span><span class="o">);</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">int</span> <span class="n">actualHeight</span> <span class="o">=</span> <span class="n">getHeight</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">actualHeight</span> <span class="o">&gt;</span> <span class="n">proposedHeight</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="s">&quot;keyboard&quot;</span><span class="o">,</span> <span class="s">&quot;guess keyboard is shown&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="s">&quot;keyboard&quot;</span><span class="o">,</span> <span class="s">&quot;guess keyboard has been hidden&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onMeasure</span><span class="o">(</span><span class="n">widthMeasureSpec</span><span class="o">,</span> <span class="n">heightMeasureSpec</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>优点</h4>

<p>能够真正实现对软键盘隐藏和显示的监听，也不算复杂。</p>

<h4>缺点</h4>

<p>这个基于的原理是键盘对Activity的布局产生影响的情况，而这又受到其他条件控制。activity的属性<a href="http://developer.android.com/guide/topics/manifest/activity-element.html#wsoft">windowSoftInputMode</a>控制着软键盘与布局之间的影响关系，对于adjustPan以及全屏模式的adjustResize这种方法就失效了，因为这二种情况软键盘弹起时，布局是不会发生变化的，二种height值是一样的，自然无法分辨。</p>

<h3>监听GlobalLayout</h3>

<p>与上面的思路差不多，只不是监听GlobalLayout变化，然后根据布局高度与屏幕高度之差来判断。</p>

<p><strong>注意</strong>：要记得把注册的GlobalLayoutListener再反注册掉。</p>

<h4>计算根布局的高度差</h4>

<p>判断的依据是根布局与DectorView之间的差值，在正常情况下应该等于status bar高度与action bar高度之和。当软键盘弹起时则会大于此值。</p>

<h5>核心原理</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">boolean</span> <span class="n">mKeyboardUp</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">setListenerToRootView</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">View</span> <span class="n">rootView</span> <span class="o">=</span> <span class="n">getWindow</span><span class="o">().</span><span class="na">getDecorView</span><span class="o">().</span><span class="na">findViewById</span><span class="o">(</span><span class="n">android</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">content</span><span class="o">);</span>
</span><span class='line'>        <span class="n">rootView</span><span class="o">.</span><span class="na">getViewTreeObserver</span><span class="o">().</span><span class="na">addOnGlobalLayoutListener</span><span class="o">(</span><span class="k">new</span> <span class="n">ViewTreeObserver</span><span class="o">.</span><span class="na">OnGlobalLayoutListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onGlobalLayout</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="kd">final</span> <span class="kt">int</span> <span class="n">headerHeight</span> <span class="o">=</span> <span class="n">getActionBarHeight</span><span class="o">()</span> <span class="o">+</span> <span class="n">getStatusBarHeight</span><span class="o">();</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">heightDiff</span> <span class="o">=</span> <span class="n">rootView</span><span class="o">.</span><span class="na">getRootView</span><span class="o">().</span><span class="na">getHeight</span><span class="o">()</span> <span class="o">-</span> <span class="n">rootView</span><span class="o">.</span><span class="na">getHeight</span><span class="o">();</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">heightDiff</span> <span class="o">&gt;</span> <span class="n">headerHeight</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="s">&quot;keyboard&quot;</span><span class="o">,</span> <span class="s">&quot;keyboard is up&quot;</span><span class="o">);</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(!</span><span class="n">mKeyboardUp</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">mKeyboardUp</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">mOpen</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="s">&quot;keyboard&quot;</span><span class="o">,</span> <span class="s">&quot;keyboard is hidden&quot;</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">mKeyboardUp</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码需要好好解释下：</p>

<ul>
<li>android.R.id.content 通过这个id可以获得一个View的根布局，而不必要知道它具体的id。可以参考<a href="http://stackoverflow.com/questions/7776768/android-what-is-android-r-id-content-used-for">这个讨论</a>。</li>
<li>rootView 这个View是Activity的根布局，除去了actionbar的部分，是一个FrameLayout，注意这个并不是setContentView中设置的布局。rootView的第一个子View(rootView.getChildAt(0))就是setContentView()设置的布局。可以参考<a href="http://stackoverflow.com/questions/4486034/get-root-view-from-current-activity">这个讨论</a>。</li>
</ul>


<h5>优点</h5>

<p>不用子例化，不依赖于现有代码中的成员，可以直接插入到任何代码中。</p>

<h5>缺点</h5>

<p>本质上这跟上一个方法是一样的。因此对于adjustPan和全屏的adjustResize二种情况是无效的。针对这二种情况heightDiff不会变化。</p>

<h4>计算根布局的的底部空隙</h4>

<p>其实所有的方法都是为了发现软键盘对布局的影响，从而判断软键盘的显示和隐藏。还有一种方法就判断根布局的可视区域与屏幕底部的差值，如果这个差大于某个值，可以认定键盘弹起了。</p>

<h5>核心原理</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isKeyboardShown</span><span class="o">(</span><span class="n">View</span> <span class="n">rootView</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">int</span> <span class="n">softKeyboardHeight</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span>
</span><span class='line'>        <span class="n">Rect</span> <span class="n">r</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Rect</span><span class="o">();</span>
</span><span class='line'>        <span class="n">rootView</span><span class="o">.</span><span class="na">getWindowVisibleDisplayFrame</span><span class="o">(</span><span class="n">r</span><span class="o">);</span>
</span><span class='line'>        <span class="n">DisplayMetrics</span> <span class="n">dm</span> <span class="o">=</span> <span class="n">rootView</span><span class="o">.</span><span class="na">getResources</span><span class="o">().</span><span class="na">getDisplayMetrics</span><span class="o">();</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">heightDiff</span> <span class="o">=</span> <span class="n">rootView</span><span class="o">.</span><span class="na">getBottom</span><span class="o">()</span> <span class="o">-</span> <span class="n">r</span><span class="o">.</span><span class="na">bottom</span><span class="o">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">heightDiff</span> <span class="o">&gt;</span> <span class="n">softKeyboardHeight</span> <span class="o">*</span> <span class="n">dm</span><span class="o">.</span><span class="na">density</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>得到的Rect就是根布局的可视区域，而rootView.bottom是其本应的底部坐标值，如果差值大于我们预设的值，就可以认定键盘弹起了。这个预设值是键盘的高度的最小值。这个rootView实际上就是DectorView，通过任意一个View再getRootView就能获得。</p>

<h5>优点</h5>

<p>适用所有情况，包括adjustPan和全屏的adjustResize也能准确判断出来。</p>

<h3>结论</h3>

<p>如果真的需要监听软键盘显示与隐藏的事件就可以通过上面的提到的最后一种方式来实现，简单方便且可靠，唯一要注意的就是要反注册掉所注册的GlobalLayoutListener.</p>

<h2>参考资料</h2>

<ul>
<li><a href="http://stackoverflow.com/questions/4312319/howto-capture-the-virtual-keyboard-show-hide-event-in-android">http://stackoverflow.com/questions/4312319/howto-capture-the-virtual-keyboard-show-hide-event-in-android</a></li>
<li><a href="http://felhr85.net/2014/05/04/catch-soft-keyboard-showhidden-events-in-android/">Catch soft keyboard show/hidden events in Android</a></li>
<li><a href="http://blog.csdn.net/zhaokaiqiang1992/article/details/39761461">android:windowSoftInputMode属性详解</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android应用性能剖析全攻略]]></title>
    <link href="http://toughcoder.net/blog/2015/09/11/android-performance-profiling-made-easy/"/>
    <updated>2015-09-11T10:36:31+08:00</updated>
    <id>http://toughcoder.net/blog/2015/09/11/android-performance-profiling-made-easy</id>
    <content type="html"><![CDATA[<p>性能是软件质量的一个重要方面，好的软件必须要在性能上达到一定的标准。对于Android应用程序来讲，更是如此，移动互联网的红海竞争，如果应用的性能差，肯定会缺少竞争力的，这里就来聊一聊应用开发中如何提升性能，以及在开发过程中如何处理性能问题。</p>

<p><a href="http://toughcoder.net/blog/2015/09/11/android-performance-profiling-made-easy/"><img src="https://img.alicdn.com/imgextra/i2/715978679/TB2sqTwjVXXXXalXXXXXXXXXXXX_!!715978679.jpg"></a></p>

<!-- more -->


<h2>性能的定义</h2>

<p>对于Android应用程序来讲分为三个方面，一方面是软件整体表现上的性能，也就是能多快给用户想要的结果，比如新闻阅读类应用，这个性能就是当用户点一条新闻时，多快能把新闻内容展示给用户，这个通常取决于业务逻辑，网络，以及后台服务器的性能。</p>

<p>另外一方面就是UI性能，也就是所谓的流畅度，这个在移动应用上面有着更严重的影响，因为触摸和手势的原因，如果应用程序不流畅，会严重影响体验，相比如PC桌面软件会更严重。这个是我们通常所谓的性能，大多数情况下，以及网络上绝大多数文章都是针对于此。对于安卓应用来说要想达到流畅，或者说做动画时，列表滑动时不卡顿，那么帧率（FPS Frame per Second）要达到60这个也是我们在做性能优化时的一个衡量的标杆。</p>

<p>还有一方面就是更少的资源占用，包括内存，CPU，电池，磁盘，网络流量，服务器资源等等。这个也很重要，特别是内存，CPU和电池，前二个对于所有软件来说都是衡量性能的一个重要指标，电池则是移动应用特有的，特别是智能手机上面。</p>

<p>总之，性能是一个很大很大的话题，也是一个无止境的任务，适可而止，见好就收。虽我们都有着一颗工程师的心，都想把东西做到极致，但试问天下，又有谁真的能把所有的东西都做到最优呢？具体把性能做到什么程度，要看需要强烈与否。比如一个应用在生命初期，可能没有人关注性能。但假如已到百万，千万级别的时候，才考虑性能也是作死的节奏。即使是超级App，性能优化也要适可而止，</p>

<h2>如何提升UI流畅度</h2>

<h3>造成UI不流畅的原因</h3>

<p>要想让UI流畅，首先要了解一下造成不流畅的原因都有哪些：</p>

<ul>
<li>主线程做了费时操作，或者本不该在主线程中做的轻微逻辑，这不但会严重影响帧率，甚至还会触发ANR(Application Not Responding)</li>
<li><p>布局过于复杂或者View层次太多</p>

<p>这个情况也是经常出现。无论是页面确实复杂，或者为了实现某些特殊的视觉效果（比如边框或者3D效果），结果就是一个非常复杂，层次深，View个数多的布局，最终结果就是渲染性能差。特别是对于列表的Cell，影响更加严重，都会造成滑动时的卡顿。</p></li>
<li><p>局部更新造成了整体布局的重绘</p>

<p>这里指的是，一个View层次中的某一个View需要刷新，但是却会触发整体页面的刷新，从而造成浪费。</p></li>
<li><p>整体布局的重绘被触发了多次</p>

<p>这通常出现在需要动画的场景，比如以改变View的布局（大小）的方式来实现动画，或者频繁的改变View的层次，比如频繁的addView和removeView。这都会不断的触发measure/onMeasure，layout/onLayout和View的重绘。</p></li>
<li><p>敏感方法里面做了太多不相干的事情</p>

<p>通常是View的一些关键的方法中onDraw, onMeasure, onLayout，特别是onDraw里面只应该做绘制相关的，连创建对象这种级别的事情都最好别做。当然，这个出现的情况比较少，毕竟需要直接自定义一个原始View的情况并不多见。</p></li>
<li><p>频繁的GC发生</p>

<p>无论是在主线程，还是worker线程，如果频繁的大量的创建对象，就会触发频繁的GC，GC会对所有的线程产生影响，对UI线程也是有影响。</p></li>
</ul>


<p>90%的情况前四种情况是主因，把前四种情况解决了就无大碍了。而前四个中，前二个又是重灾区，通常情况处理了前二个就能解决不流畅的问题。</p>

<p>知道了原因，就可以对症下药了：</p>

<h3>设计和编码时要考虑性能</h3>

<p>性能是设计和编码时必须要考虑的一个因素，跟程序的正确性，robustness和可维护性同样重要。而不是应用已经上线了很久后才开始考虑性能问题。但是我们活在现实生活中，实际的情况往往都是当应用已经上线了并且稳定了之后才开始做，而且情况往往都是代码都还不是你写的。设计和编码时不考虑性能的原因一般有：</p>

<ul>
<li>开发人员水平不足，意识不到性能问题，或者不知道如何写出高性能的代码</li>
<li>需求太多，或者需求经常变动，没时间考虑别的</li>
</ul>


<p>总之，无论如何，在设计和编码时不考虑性能是很令人烦恼的事情，但亡羊补牢，虽有些无奈但还是有益的。</p>

<h3>简单设计做更少的事情</h3>

<p>这似乎是废话，少做事情，或者不做事情效率自然高，性能肯定能上去。页面布局尽可能简单，功能尽可能简单，能做一遍的事情不要做二遍，没必要的准备工作不做，等等。但是现实情况往往是应用越做越复杂，越做越功能越多，页面越来越复杂，这是多种元素决定的，或许是竞争的需要，或者是产品这么定义的，或者是老板就喜欢这样。</p>

<p>但无论怎么样，对于开发人员来讲，当实现功能时要本着简单的原则，这说来容易，但是当代码出来时却千差万别，明明很简单的逻辑，有人却能代码写的巨复杂，一坨一坨的。虽然可能说你看得懂他的设计图，看得懂他的流程图看得懂他的类图等等，但是你却不一定看得他的懂代码。</p>

<p>这里扯一点题外话，写代码绝对是衡量一个程序员的重要指标，虽然不能做为全部，但是至少应该占50%。所以如果面试时看不到应聘者近一二个月的代码，或者不让其当场写代码的话，面试可以认定是失败的。尽管他可能是BAT出身，尽管他可能做过（维护）过顶级App，但是很可能他写出的代码都跟翔一样，一坨一坨的，完全看不懂写的是啥玩意儿。孤认为，面试时最好花一天或者一个下午时间，让应聘者在<strong>近似真实</strong>的环境中写代码，或者是一个小功能，或者是一个小项目，或是修改一个bug，最好还是坐在他旁边，与其一起工作，就好像平日里你跟同事一起工作一样，这非常有效果，也很能看出一个人的水平，而且你聘他来后也是要这样子工作的。光在那里Bla bla的问答，连他说的是真是假都难以分辨，而且世上事永远都是说起来容易做起来难，我们都见过很多人Blabla就会说，就会吹，不会做事情，或者干起事情跟小孩子一样，也有很多人实干型的，会做事，能把事情做好，但就是说不出，或者非常不愿意在别人面前blabla。然并卵。。。。蛋扯远了</p>

<h3>远离主线程（UI线程）</h3>

<p>这似乎才是正题。</p>

<p>对于应用程序来说主线程是很重要的，因为主线程通常的作用是用于刷新用户界面（UI），与用户进行交互，是与用户接触最近的，因此也通常被称作UI线程。Android和iOS都是如此。想像一下，应用要想达到60FPS，也就是说一帧的绘制要在16ms内完成，你的布局又那么的复杂，一层套一层，每个View都要一遍遍的measure, layout, draw，就知道主线程有多么忙碌了，还能忍心再做其他事情吗？</p>

<p>那么，让应用流畅就变得很简单，在主线程中做最少的事情，但不能更少，它只做二件事情：</p>

<ul>
<li><p>UI(<a href="http://developer.android.com/reference/android/view/View.html">View</a>)相关的事情</p>

<p>这个是平台框架的限制，必须遵守。</p></li>
<li><p>必须在主线程中做的事情</p>

<p>比如启动其他线程，必要的初始化等等。比如像AsyncTask是一定要在主线程中初始化的，否则会有Crash，具体可以看<a href="http://blog.csdn.net/hitlion2008/article/details/8194510">这篇文章</a>的分析。</p></li>
</ul>


<p>其他，所有事情，都应该放到其他线程中去。如果在设计和编码的时候能考虑到这二点，那么你的应用流畅至少不会卡。使用其他线程异步操作时一定要注意生命周期和上下文，也即当执行任务时生命周期是否还是活动的，或者所依赖的上下文是否已经变化了，不在了。</p>

<h3>布局的优化</h3>

<h4>减少View的层次和数目，减化复杂布局</h4>

<p>View的层次越少，数目越少，肯定渲染越快，这个常见的技巧有：</p>

<ul>
<li>删除没有用的View</li>
<li>除去无必要的嵌套，比如当内部仅有一个View时，外面就没有必要再加一个ViewGroup了</li>
<li>多使用<a href="http://developer.android.com/reference/android/widget/RelativeLayout.html">RelativeLayout</a>。它能够随意的排版View，三维上的方位都可以搞定，所以对象像列表的Cell之类的，一个RelativeLayout基本上就可以搞定。</li>
<li><a href="http://toughcoder.net/blog/2015/05/20/android-layout-trick-drawable-of-textview/">用TextView的drawable属性来组合图片+文字</a></li>
<li>用merge来减少层次</li>
<li>对于某些情况才用到的View，就使用<a href="http://blog.csdn.net/hitlion2008/article/details/6737537">ViewStub</a>，然后在需要显示的时候再inflate。也就是所谓的延时和按需渲染</li>
<li>尽量不要用背景图片，特别整个Activity大小的背景，费内存，占资源</li>
<li>尽可能用矢量图形，比如颜色，drawable，shape，icon font等等</li>
</ul>


<p>减少View的层次和数目能显著提高帧率。曾经有一个列表，列表不复杂，左边一个TextView，右边有三个也是TextView，但是在添加的时候在外面又包了一层TextView，布局就变成了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;LinearLayout</span> <span class="err">....</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;TextView</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/LinearLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>虽然可能这不起眼的多加了一个LinearLayout，但是别忘记了，这是在List中，一屏会显示10多行，每一行多3个View，加起来就是30多个View啊！一次多绘制30多个View是什么概念？</p>

<p>对于布局的优化可以多看看lint的输出Warning，它对于无用的View，没必要的嵌套，以及优化建议都能准确的给出提示。</p>

<h4>当局部更新时不要触发整体重绘</h4>

<p>比如一个坨复杂布局中，仅需要更新一个图标时，就直接更新它所属的ImageView就好；再如，有CheckBox选中状态的列表，点击时，就只更新具体的列表的具体的CheckBox就可以了，而不是改变数据，然后notifyDataSetChanged。</p>

<p>这里需要，首先，不要故意的去触发整体刷新（除非非常的有必要，比如多个View都需要刷新数据时）；另外，就是要小心防止触发整体刷新的坑，因为某些原因，即使小心的更新局部也会造成整体的刷新。</p>

<h4>避免频繁的触发整体的重绘</h4>

<p>千万不要直接改变View的大小的方式来做动画，或者在做动画的同时改变View的布局，更不要添加或者移除View，这都会直接触发整体的重绘。</p>

<h4>避免在onDraw的时候做额外的事情</h4>

<p>如果是自定义的View就要注意这个事情，在onDraw的时候不要去new对象或者做其他不相干的事情，即使这些操作在UI线程中作也毫不费时的。</p>

<h4>列表类的优化</h4>

<p>对于列表（List和Grid）优化除了上面提到的，还要注意使用组件传回来的convertView以及ViewHolder。convertView可以复用View对象，避免inflate过多的View。ViewHolder模式主要是减少findViewById的调用。</p>

<h4>把界面设计的尽可能简单</h4>

<p>大道至简，简约是最优秀的用户体验，没有之一，所以产品汪们，不要把页面搞的太复杂，会导致不好用：用户不会用，和渲染性能差。</p>

<h4>写布局时要考虑到渲染性能</h4>

<p>这是非常重要的，再牛B的方法和技巧，如果你不鸟，或者不用都木有卵用，如果你心系性能，必然会有所思，有所为，然后渲染性能就所升。</p>

<h3>及时反馈给用户</h3>

<p>这实际上不是真正的流畅，而是给用户感觉流畅，避免用户认为应用假死。比如当做一些费时操作的时候，是放在了工作线程中，但是主线程也却没事情做，应用流畅不卡顿，但在用户看来却是无意义的，这时可以用一些动画，进度等等及时反馈给用户程序当前的状态。</p>

<p>另外，当做费时操作的时候也要及时终止并反馈，程序可能会有异常情况或者错误情况，都是需要处理的，比如从网络加载数据，可能会有无网络，或者网络异常，或者服务器返回异常，那么要尽早失败。比如是不是可以在任务启动前先判断网络状态，而不是照常发请求，网络返回异常了，那么正常情况时的结果处理就不要做了，等等。</p>

<p>说到这里，不得不讲一下代码的编写原则：先检查异常情况，尽早退出，而不是层层if，举个例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Data</span> <span class="nf">fetchNewsDetail</span><span class="o">(</span><span class="n">String</span> <span class="n">url</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">url</span> <span class="n">is</span> <span class="n">invalid</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">empty</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">no</span> <span class="n">networks</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">empty</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">some</span> <span class="n">other</span> <span class="n">bad</span> <span class="n">conditions</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">empty</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">send</span> <span class="n">requset</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">response</span> <span class="n">code</span> <span class="n">not</span> <span class="mi">200</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">no</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">parse</span> <span class="n">response</span> <span class="n">failed</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">parse</span> <span class="n">data</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>而不是这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Ugly code, DO NOT do this</span>
</span><span class='line'><span class="n">Data</span> <span class="nf">fetchNewsDetail</span><span class="o">(</span><span class="n">String</span> <span class="n">url</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">url</span> <span class="n">valid</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">has</span> <span class="n">networks</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">response</span> <span class="n">code</span> <span class="mi">200</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">....</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>流畅度剖析工具</h2>

<h3>流畅度定性体验</h3>

<p>那么如何测试或者衡量我们应用是否流畅呢？
首先就是自己体验，快速滑动，看看是否能感觉到卡顿，或者页面闪烁。</p>

<p><img src="https://img.alicdn.com/imgextra/i2/715978679/TB2Mr6sXFXXXXcvXpXXXXXXXXXX_!!715978679.png" width="320" height="480"></p>

<h3>借助开发者工具来感受</h3>

<p>开发者工具有很多选项可以帮助开发者来测量，比如调试过度绘制，显示GPU更新等。通过这些可以看出不必要的UI刷新。</p>

<p>比如开发者选项里有一个”硬件加速渲染“，里面有一个“调试GPU过度绘制”，这个会在屏幕上以颜色来区分overdraw（过度绘制，也就是进行了不必要的绘制）的严重重度：</p>

<ul>
<li>蓝色 1 倍overdraw</li>
<li>绿色 2 倍overdraw</li>
<li>红色 3 倍overdraw</li>
<li>紫色 4 倍overdraw</li>
</ul>


<p>总之，颜色越深，证明做了过多的不必要的绘制(overdraw).什么又叫过度绘制呢(overdraw)比如一个列表，如果每个Item都有背景色，那么List本身实际上是不需要背景色的，比如子View占满了父View，那么父View不用画背景，等等。对于不可见的元素，就不要运行绘制，这是减少overdraw的方法。</p>

<p><img src="https://img.alicdn.com/imgextra/i4/715978679/TB2d_bsjVXXXXXHXXXXXXXXXXXX_!!715978679.png" width="320" height="480"></p>

<p>在开发者选项面有一个是“监控”，里面有几个：</p>

<ul>
<li>启用严格模式</li>
<li>显示CPU使用情况</li>
<li>GPU呈现模式分析</li>
<li>启用OpenGL跟踪</li>
</ul>


<p>特别是第3个“GPU使用情况”，它是系统在GPU渲染时加入一些分析，以呈现UI渲染的性能，它有三个选项：</p>

<ul>
<li>关闭</li>
<li>在屏幕上显示为条形</li>
<li>在adb shell dumpsys gfxinfo中</li>
</ul>


<p>其实，它的数据是一样的，只不过一个是在命令行把raw data输出，一个是在手机屏幕以图表方式展示。后面会详细介绍这个。</p>

<h3>adb shell dumpsys gfxinfo <pkg name></h3>

<p>这个能收集GPU渲染时的一些数据，从而反映应用UI渲染的性能信息。</p>

<p>从这个命令的输出能看出二个信息一个帧的数量，另一个就是每一帧绘制的情况。
应用比较卡，表现出来就是丢帧，也就是有些帧太慢了，赶不上火车了，不得不丢掉，从而页面会卡顿。正常来讲，即使是简单的布局，用这个命令抓也至少能抓到20+帧的数据，如果少了，或者很少，只有几帧，就就证明你在主线程中干了太多其他的事情，也就是说主线程被block了。这时就要好好看看源码，主线程中都干了啥，哪里可能会耗时，把非UI操作都放到工作线程中去。</p>

<p><img src="https://img.alicdn.com/imgextra/i3/715978679/TB2GhnkjVXXXXbuXXXXXXXXXXXX_!!715978679.png" width="640" height="480"></p>

<p>对于每一帧的数据，体现着绘制这一帧所花的时间：</p>

<ul>
<li>Draw是创建列表所需要的时间，表示运行绘图方法用了多长时间，比如View.onDraw()所花的时间；</li>
<li>Prepare在5.0版本加入了这一列数据的显示</li>
<li>Process是Android 2D引擎渲染显示列表(DisplayList)所需要的时间。页面上的View越多，层次越深，就会有越多的绘制命令需要执行，这个值会越大。</li>
<li>Execute是把一帧数据送到屏幕上排版显示的时间，这个值通常会比较小，且在应用层无法直接控制，换句话说，这个时间是无法优化的。</li>
</ul>


<p>为了流畅，每一帧的绘制时间应该少于16ms，因为应用要想流畅要达到60FPS，算下来就是一帧不能超过16ms，但这个并不是死规定，不是说某一帧超过，应用就会卡，就会慢，而是说几十帧的平均值或者90%的帧应该在16ms以内。</p>

<p>这个方法是针对每个ViewRootImpl的统计数据。ViewRootImpl对象就是一个View的根元素，通常情况下一个Activity仅有一个ViewRootImpl对象。需要注意的是Dialog也会有一个ViewRootImpl，所以当有Dialog时，你会看到二个ViewRootImpl的统计数据。</p>

<p>还有需要注意的是，如果使用了SurfaceView（比如GLSurfaceView)，因为它不是使用常规View的渲染方法来渲染的，它有自己的线程和渲染方式，所以这个方法是抓不到SurfaceView的渲染性能的。</p>

<p><img src="https://img.alicdn.com/imgextra/i3/715978679/TB2hIvjjVXXXXbyXXXXXXXXXXXX_!!715978679.png" width="320" height="480"></p>

<p>在屏幕显示，则会在屏幕上面以柱状图的方式实时显示UI每一帧渲染的性能，可以看到一条绿色的线，这个就是16ms。柱状图中几种颜色所代码的意义分别是</p>

<h3>traceview</h3>

<p>这是一个十分强大的功能，能得到某一时间段内，进程内的时序执行情况，具体到能体现出所有线程的所有方法执行所花的CPU时间和实际时间，并且还能看出包含子调用和不包含的情况。</p>

<h4>启用方法</h4>

<p>在Android Studio中点击Android Device Monitor或者直接运行monitor (位于SDK/tools/），选择某一进程，然后点击，开始录制，再点击结束，就会出现。</p>

<p><img src="https://img.alicdn.com/imgextra/i1/715978679/TB2jRjqjVXXXXaiXXXXXXXXXXXX_!!715978679.png"></p>

<p><img src="https://img.alicdn.com/imgextra/i1/715978679/TB28pbXjVXXXXadXpXXXXXXXXXX_!!715978679.png"></p>

<p><img src="https://img.alicdn.com/imgextra/i4/715978679/TB2VSjnjVXXXXaxXXXXXXXXXXXX_!!715978679.png"></p>

<h4>如何分析</h4>

<p>颜色越深代码花的时间越多。</p>

<p><img src="https://img.alicdn.com/imgextra/i2/715978679/TB2HnYmjVXXXXacXXXXXXXXXXXX_!!715978679.png" width="640" height="480"></p>

<p>主要指标有：</p>

<ul>
<li>CPU time 某个方法占用的CPU时间</li>
<li>Real time 某个方法运行的真实时间</li>
<li>CPU time/call - 某方法CPU时间与调用次数比</li>
</ul>


<p>还有二个前缀：</p>

<ul>
<li>Incl - 这是Inclusive简写，意思就是包含方法里面的子调用</li>
<li>Excl - 这个是Exclusive的简写，意思方法本身，不包含子调用</li>
</ul>


<p>通过这个可以分析出哪些方法比较耗时。</p>

<h3>systrace</h3>

<p><a href="http://developer.android.com/tools/help/systrace.html">systrace</a>可以查看出进程的执行情况，不单单是你的应用进程，也能看到系统进程的执行情况，能够以时间线的形式来展示进程中各线程的执行情况。</p>

<h4>如何使用</h4>

<p>根据系统版本的不同使用方法略有不同：</p>

<ul>
<li><p>Android 4.3及以上系统</p>

<ol>
<li>确保打开了ADB调试模式</li>
<li>执行以下命令</li>
</ol>


<pre><code class="``shell">$ cd android-sdk/platform-tools/systrace
$ python systrace.py --time=10 -o mynewtrace.html sched gfx view wm
</code></pre>

<p>  输出的mynewtrace.html文件就是带有trace的结果，用浏览器打开查看即可。</p></li>
<li><p>Android 4.2及以下系统</p>

<ol>
<li>打开ADB调试模式</li>
<li>开发者选项中->监控->启用跟踪中选择想要查看的类型</li>
<li>执行命令</li>
</ol>


<pre><code class="``shell">  $ python systrace.py --cpu-freq --cpu-load --time=10 -o mytracefile.html
</code></pre></li>
</ul>


<p>更多的systrace命令的使用方法可以参考<a href="http://developer.android.com/tools/help/systrace.html">官方文档</a>。</p>

<h4>如何分析结果</h4>

<p>systrace命令得到的结果是一个HTML文件，用浏览器打开即可.</p>

<p>基本操作：w 放大；s 缩小; a 向左移动；s 向右移动</p>

<p>从中可以看出帧绘制的信息，通常每一帧应该小于16.6ms，为绿色。对于有问题的，比如delay或者绘制时间长的，会以黄色和红色标注出来，并且在顶部会有Alert。点击帧F和Alert可以看到具体的详细信息，以及系统自动分析出来的可能的原因。
 </p>

<h3>hierarchyview</h3>

<p>这个工具很明显就是用来调试布局的，它能以可视化的方式展示View的层次结构，顺带显示每一层View的渲染速度。运行方法是找到SDK/tools/运行hierarchyviewer.</p>

<p><em>注意</em>：默认情况下只有调试的ROM（build with eng)才能抓到View的层次信息（否则，应用的页面就很容易被破解了），对于可控制源码的可以用<a href="https://github.com/romainguy/ViewServer">开源库</a>来解决这个问题。</p>

<h3>代码层次剖析打点</h3>

<p>这个要对代码熟悉后可以进行，对于怀疑执行较慢的代码加上时间打点（System.currentTimeMillis())来确定其执行所花的时间。也就是说在编码的时候要有意识，对于持有怀疑态度的方法，要时不时的打时间点，以看其是否能放在主线程中。</p>

<h3>打开StrictMode</h3>

<p>这是一个开发者工具，能够帮助开发者检测到不经意间做的一些违反平台开发原则的事情，比如在主线程中做了IO操作或者主线程中操作网络等等。时至今日它能检测的远不止这些，还能检测主线程中的比较慢的方法调用，还有检测Dialog的泄露(Dialog未关闭，Activity就退出了），Activity的泄露以及未正确关闭的对象(Cursor, Binder)等。总之，它能帮助你减少因为代码写法不规范而造成的问题。详细的如何使用可以<a href="http://developer.android.com/reference/android/os/StrictMode.html">参考文档</a>。</p>

<h2>如何提升程序性能</h2>

<p>这个比较难，比如读取大文件必然耗时，从服务器上取数据肯定慢（比从本地读），但是聪明的人类还是有方法做的更好的：</p>

<h4>把业务逻辑弄简单点</h4>

<p>这个就不废话了，代码搬运工们没有太多的话语权。但是对于能控制的部分要做好，比如尽早失败，不重复等等。</p>

<h4>多用缓存</h4>

<p>缓存绝对是计算机技术一个非常重要的东西，发明这东西的人肯定是个天才。缓存无处不在，缓存的目的就是提高性能，加快访问速度，衡量缓存好坏就看命中率。CPU有三层缓存来提升运算性能。软件中缓存也是提升性能的一个非常重要的手段。</p>

<p>比如对于不太常变化的数据，从网络成功获取后就要缓存在本地；再如，对于经常访问的本地数据也要在内存中有缓存；用到的图片比较多的应用，要做内存和本地二级缓存，以减少图片的加载时间（比如<a href="https://github.com/nostra13/Android-Universal-Image-Loader">UIL</a>的做法）；</p>

<p>常见的缓存工具有内存级的<a href="http://developer.android.com/reference/android/util/LruCache.html">LruCache</a>以及磁盘级的<a href="https://developer.android.com/samples/DisplayingBitmaps/src/com.example.android.displayingbitmaps/util/DiskLruCache.html">DiskLruCache</a>，教程可以参考<a href="http://blog.csdn.net/guolin_blog/article/details/28863651">这里</a>。</p>

<h4>延迟加载和按需加载</h4>

<p>这个就容易理解一些，比如三层页面才用到的数据，你没必要一启动在第一级页面就加载它（当然，也可能有这样的情况，比如数据有依赖时）。</p>

<p>按需要加载就是，第一个页应该只加它需要的数据，而不是一个请求，把应用所有数据都拉下来。</p>

<h4>尽早发出异步请求</h4>

<p>对于像异步从网络获取数据，或者异步IO加载数据的，或者做一些费时的异步初始化等，可以尽早的把请求发送出去，在等待结果的同时再做其他事情，这样能保证结果最快的呈现出来。</p>

<h4>使用工具（开源库）</h4>

<p>这个就是，世上总有人比你聪明，他们的方法更巧妙，更高效，为什么不用呢？比如图片加载，比如网络库，比如JSON解析等等，那么多优秀的人做的优秀的东西不用太浪费了。要感谢那些优秀的开发者，总能找到合适的库，不但好用，而且开源，既然完成任务，又能学习，还有比这更好的事情么？</p>

<p>可以到<a href="https://github.com/wasabeef/awesome-android-ui">这里</a>和<a href="http://alamkanak.github.io/android-libraries-and-resources/">这里</a>来找需要的开源库。</p>

<h2>如何占用更少资源</h2>

<p>对于资源的使用首页的原则就是，尽量少用或者不用，听上去是废话，其实不然，有一些具体的可实践的准则可供参考。其实这里面的话题每一个都可以扩展成一整篇文章来探讨，这里仅列出一些要点，不作细致讨论。</p>

<h3>内存</h3>

<h4>尽可能的少创建对象</h4>

<p>主要的原则就是尽可能的复用，比如像对话框，或者Toast之类的都是可以复用的。再如尽可能的把创建对象放在循环外面等等。</p>

<h4>尽量缩短对象的生命周期</h4>

<p>比如能在一个调用链中传递的对象就没有必要非声明为成员变量。在方法尾部使用的对象就别在一进入方法时就创建。用户事件触发的逻辑就没有必要一进入页面时就创建。当onResume后才会使用到的对象就没有必要在onCreate里创建等等。</p>

<h4>避免内存泄露</h4>

<p>所谓内存泄露就是内存在不再使用之后仍没有得到释放，一般情况下它是无害的，无非也就多用点内存，现在设备内存越来越大，空着不用也浪费，但是内存总有用尽的时候。对于Android，更是如此，每个应用（进程）有固定的内存配额（HeapSize），它是由系统ROM决定的，所以一旦有泄露，程序必定会因OOM（Out Of Memory Error)而崩溃（其实崩溃了也是好事，一是你会重视，二是进程退出了，重新启动后内存泄露会得到一定的缓解），特别是现在应用中的图片和视频等多媒体元素越来越多，这些东西本来就吃内存，再来点泄露，那么发生OOM的机率大大增加。</p>

<p>Android中最容易泄露的对象就是Activity，Activity对象由系统创建，生命周都是由系统来控制，我们只能发送请求， 不能强行干预。正常情况下的Activity对象在onDestroy（）之后是要被回收的，所以如果在onDestroy以后仍有其他生命周期更长的对象持有对Activity对象的引用的话，就会导致Activity的泄露。</p>

<p>而Android中很多系统API都是需要Context（少量的是需要Activity，比如Dialog），而Activity又是Context的一个实现，因此啊，很多人在很多时候都简单的把Activity对象直接传了过去，很多系统API的生命周期要比应用程序长的得多，这就是导致Activity对象泄露的原因。避免这种泄露很简单，就是尽可能传ApplicationContext，也就是说不要直接传Activity对象，而是传activity.getApplicationContext()。因为ApplicationContext一个应用只有一个，也就是说一个手机里只有一个，而且系统本身就会缓存它，所以长一点持有它也没关系。当然要视情况而定，比如像Dialog虽然是Context，但必须传Activity。</p>

<h4>缓存对象，以避免复创建</h4>

<p>比如像Dialog对象，可以缓存起来以避免每次都创建新的。</p>

<p>对于大量的缓存对象可以使用<a href="http://developer.android.com/reference/android/support/v4/util/LruCache.html">LruCache</a>来管理。</p>

<h4>对于缓存，尽量用WeakReference</h4>

<p>特别是像Activity和Fragment以及Service等有固定生命周期，且生命周期又是由系统来控制的对象，最好加持有WeakReference。</p>

<h4>监听onTrimMemory和onLowMemory，以采取措施</h4>

<p>当系统内存吃紧的时候会向Activity发送通知，此时可以做一些措施，比如释放不用的资源，释放不用的对象，清空缓存等以缓解压力。</p>

<h4>内存使用监测工具和分析方法</h4>

<p>可以时不时的用监测工具来监测一下应用所消耗的内存，有这些方式：</p>

<ul>
<li>adb shell dumpsys meminfo <pkgname></li>
<li>Android Device Monitor - (其实就是早期的DDMS的进化版本)监测用的GUI工具，选择进程，然后update heap，就能实时看到heap使用情况</li>
<li>AndroidStudio 已经集成了内存监测工具，可以实时看到内存的使用情况。</li>
<li>MAT - Memory Analysis Tool它是Java的标准内存分析工具，安卓的dex不直接支持，但无妨，可先用monitor dump出prof文件，再用SDK中的工具hprof-conv进行转换后MAT就认识了。详细的可以参考<a href="http://androidperformance.com/2015/04/11/AndroidMemory-Usage-Of-MAT/">这篇文章</a>。</li>
<li>更多的Java内存使用建议可以参考<a href="http://androidperformance.com/2015/07/20/Android-Performance-Memory-Java/">这篇文章</a>.</li>
<li><p>学会查看GC输出的信息</p>

<p>Logcat日志中的GC信息也能非常直观看出内存的使用情况，而且看出性能上的原因，特别是UI卡顿，或者动画丢帧等情况。因为GC或者说频繁的GC发生，是会影响到应用性能，特别是会影响UI线程。GC的日志通常能看出触发GC的原因，释放掉了多少内存以及花了多少时间，具体的还跟虚拟机的版本不一样而不同，下面分别来详细的讲述：</p>

<ul>
<li><p>Dalvik</p>

<p>Dalvik虚拟机GC的日志格式如下：</p>

<blockquote><p>dalvikvm: &lt;reason&gt; &lt;freed&gt;, &lt;free memory&gt;, &lt;time&gt;</p></blockquote>

<ul>
<li>reason &ndash; 触发GC的原因</li>
<li>freed &ndash; 此次GC释放了多少内存</li>
<li>free memory &ndash; 还有多少空闲的内存空间</li>
<li>time &ndash; 此次GC花费多少时间</li>
</ul>


<p>其中reason又有几个：</p>

<ul>
<li>GC_CONCURRENT</li>
<li>GC_MALLOC</li>
<li>GC_EXPLICT</li>
<li>GC_BEFORE_OOM</li>
</ul>
</li>
<li><p>ART</p>

<p>ART虚拟机的GC格式比Dalvik要详细一些：</p>

<blockquote><p>I/art: &lt;GC_Reason&gt;&lt;Amount_freed&gt;,&lt;LOS_Space_Status&gt;,&lt;Heap_stats&gt;,&lt;Pause_time&gt;,&lt;Total_time&gt;</p></blockquote></li>
</ul>


<p>  更多内容可以参考<a href="http://mp.weixin.qq.com/s?__biz=MzI1MTA1MzM2Nw==&amp;mid=400021278&amp;idx=1&amp;sn=0e971807eb0e9dcc1a81853189a092f3&amp;scene=0#rd">这篇文章</a>。</p></li>
</ul>


<p>准确的来讲MAT是分析工具而非监测工具，也就是当发现有内存泄露的时候抓一段heap的使用情况用MAT来分析。其他几个都可以用来监测，也就是说看一下内存是否有问题，表现都是当操作时内存使用会有所增加，但当操作停止后内存应该迅速回落到操作前的水平。重复操作，内存使用不应该一直增加。如果长时间内存没回落或者内存一直增长，那么就很可能存在内存没有释放掉，就要抓heap然后用MAT分析，看是哪里出了问题。</p>

<h3>CPU</h3>

<h4>减少忙等待</h4>

<p>也就是说使用注册Listener（通俗的就是callback）方式来处理异步事件，而不是忙等待：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// DO NOT do this</span>
</span><span class='line'><span class="k">while</span> <span class="o">(</span><span class="n">somethingNotReady</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">sleep</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>合理使用线程</h4>

<p>理性的仅在有必要的费时操作启动worker线程来完成。不要盲目的创建线程。线程多了，不一定性能就上去了，反尔会带来同步的无尽烦恼和不可捉摸的诡异偶现Bug，而且频繁的<a href="https://en.wikipedia.org/wiki/Context_switch">Context Switch</a>也会带额外的损耗。</p>

<p>对于频繁执行的异步任务，最好使用<a href="http://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor.html">线程池</a>，一方面可以复用资源，另一方面也方便控制。</p>

<p>对于长时间执行的任务，或者有Server用途的长时间工作线程，要使用<a href="http://developer.android.com/reference/android/os/Looper.html">Looper</a>和消息队列<a href="http://developer.android.com/reference/android/os/Handler.html">Handler</a>，详细的可以参考<a href="http://blog.csdn.net/hitlion2008/article/details/8194510">这篇文章</a>。</p>

<p>仅当需要与UI有交互的情况下才考虑使用<a href="http://developer.android.com/reference/android/os/AsyncTask.html">AsyncTask</a>，具体看<a href="http://blog.csdn.net/hitlion2008/article/details/7983449">这篇文章</a>。</p>

<h4>严格控制Service的生命周期，做到按需启动，及时停止</h4>

<p>安卓的Service绝对要为手机的卡顿负一部分责任，系统放任Service，Service的控制权都在开发者手中，所以Service被滥用的特别严重。打开手机的设置，看看正在运行的应用程序，可以发现几乎所有的应用都有至少一个到二个左右的Service进程在运行。所以说安卓能不耗电么，能不卡么，能不耗流量么，跟水果手机咋比啊。</p>

<p>为了体现专业性，使用Service就要小心，当有需求的时候再启动（startService or bindService），当不用了就stopSelf or stopService。</p>

<h4>监测工具</h4>

<p>在Android Studio中有工具可以监测CPU的使用情况</p>

<h3>磁盘</h3>

<h4>没必要存的东西就不要存</h4>

<p>比如直接作用到UI层面的一些信息，显示完就不再使用了，这种数据是没有必要缓存到磁盘上的，至多在内存中缓存就可以了。</p>

<h4>不是长期使用的就用临时文件，且是用标准API创建的临时文件</h4>

<p>在同一个启动Session中，不同阶段都要使用的数据，可以用临时文件来存取，比如启动时，或者加载完时创建一个临时文件来存储，后面再使用。创建临时文件要用标准的File#createTempFile方法，而不是创建一个普通文件当作临时用。因为常常会忘记删除掉，即使有删除动作，但假如有异常出现，也会走不到删除。久而久之磁盘上的垃圾文件会越来越多。</p>

<h4>如果不再需要就及时的删除文件</h4>

<p>这个可以讲其实国内的甚至国外的绝大多数软件做的都不好，特别是机身存储和SD扩展卡上面的内容，因为这些区域是开放给所有App的，而且容量一般都很大，所以大家都很高兴的写，没有人去删除。这也是为什么市场上面的清理软件如此的受欢迎。作为良心开发者，还是自己擦自己的屁股吧！</p>

<h4>定期整理数据库，删除旧数据</h4>

<p>数据库也跟磁盘一样，长期使用后会有过期的数据，也是需要清理的。</p>

<p>另外，由于数据库不断的增删改，会导致数据库文件产生断层（文件大小不必要的大于实际内容），或者碎片，这时就需要<a href="https://sqlite.org/lang_vacuum.html">execute(&ldquo;vacuum&rdquo;)</a>来重新生成数据库文件。当然这个比较有风险，而且耗时比较长，所以，只有当达到一定时间时才有必要这样做。</p>

<h4>给APK瘦身</h4>

<p>虽然，安卓应用程序发布较PC软件非常之容易，各大应用市场傻瓜式的一键式搞定，但是，用户仍然需要下载和安装，这期间APK的大小直接影响应用的成功安装率，小的APK文件，下载快，耗流量少，安装快，占用ROM也少，低端机型的ROM没那么大。所以APK的瘦身也是势在必行的一个优化指标。</p>

<p>一般来说有这么几个方面，可以去下功夫：</p>

<ul>
<li><p>删除无用资源</p>

<p>不再使用的图片，布局，库不但增加目标文件大小，而且会延长编译和打包的时间。不用了就删除，后面用的时候再还原。如果代码太多，或者不够熟悉搞不清该不该删除，可以参考<a href="http://developer.android.com/tools/debugging/improving-w-lint.html">lint</a>的warning信息。</p></li>
<li><p>删除无用代码</p>

<p>这个比资源还严重，其实不用的代码对包增大没太大的作用，但是没有代码会严重影响项目的清析度和可维护性。比如新人来了，看一坨代码，最后发现半坨都是没用的代码，心中必有万个马在奔腾。不用了就删除，以后用到时可再还原，版本控制就是专门干这事的。</p></li>
<li>集中使用xhdpi（或者xxhdpi），对于确实适配有问题的资源再添加其他支持(hdpi)，一般情况下足够了</li>
<li>对于PNG图片，可以使用<a href="http://www.p-edge.nl/eng/products/pngshrink">pngshrink</a>或者<a href="https://pngquant.org/">pngquant</a>来进行一下无损压缩，之后再放入工程。视觉给的图都能达到50%~70%的压缩率。</li>
<li><p>使用混淆器</p>

<p>一方面防小白反编译你的项目，虽然可能也没啥有技术含量的代码，但让人家那么容易就获得了你的全部源码，也还是挺闹心的（虽然，可能你的代码也都是Github+Google来的，哈哈哈）；另外一方面就是混淆，特别是Android中最流行的<a href="http://developer.android.com/tools/help/proguard.html">ProGuard</a>，能显著的减少目标dex的大小。</p></li>
</ul>


<h3>网络流量</h3>

<p>对于这点，其实优先级没那么高，现在Wifi覆盖越来越广，移动流量资费也越来越便宜，套餐越来越实惠，所以这些问题不必太纠结。</p>

<h4>对于更新时间比较长的要缓存到本地存储，以避免重复请求</h4>

<p>这个其实也是提升响应速度的一个方式，对于更新周期比较长，且时效性要求不高的数据可以缓存在本地。客户端每隔一定时间更新一次。</p>

<h4>服务端主动推送更新通知</h4>

<p>就是对于数据，客户端拿到后就缓存着，当数据有更新时服务端推送通知给客户端，然后客户端再来获取。这样即可以保证数据的更新到达，又可以减少不必要的网络请求。</p>

<h4>差分获取更新数据</h4>

<p>当已经拿到了数据后，想要更新时，可以让服务端返回数据的差异，而不是返回整个数据，客户端拿到数据后再做融合。</p>

<h4>无论是请求还是服务器返回，没有用的参数不要带上</h4>

<h4>使用压缩技术请求加上&#8221;Accept-Encoding&#8221;=gzip, deflate</h4>

<p>无论是上传文件还是下载文件尽可能压缩一下，即使不为了省流量，也能提升些响应速度。当然这个需要服务端配合，如果无法控制服务端就没有办法了。</p>

<h4>对于要下载，事先判断网络类型，并给予提示，让用户来选择</h4>

<p>相对于上面几点，这点倒是要注意，比如更新，或者下载插件，要判断网络类型，如果是移动网络，给出提示，让用户自己来判断。</p>

<h2>参考资料</h2>

<ul>
<li><a href="http://blog.chengyunfeng.com/?p=458">Android 性能分析案例</a></li>
<li><a href="http://coderrobin.com/2015/05/04/android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%AC%94%E8%AE%B0/">android性能优化笔记</a></li>
<li><a href="http://blog.venmo.com/hf2t3h4x98p5e13z82pl8j66ngcmry/performance-tuning-on-android">Performance Tuning On Android</a></li>
<li><a href="http://android-performance.com/android/2014/04/24/android-strict-mode.html">StrictMode 详解</a></li>
<li><a href="http://droidyue.com/blog/2015/09/26/android-tuning-tool-strictmode/">Android性能调优利器StrictMode</a></li>
<li><a href="http://stackvoid.com/performance-tuning-on-android/">Android App 性能优化实践</a></li>
<li><a href="https://developer.android.com/tools/debugging/debugging-memory.html">Investigating Your RAM Usage</a></li>
<li><a href="http://blog.csdn.net/yanbober/article/details/48394201">Android应用开发性能优化完全分析</a></li>
<li><a href="http://www.cnblogs.com/coding-way/p/4294225.html">HierarchyView的实现原理和Android设备无法使用HierarchyView的解决方法</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Studio技能之快捷键]]></title>
    <link href="http://toughcoder.net/blog/2015/09/07/tricks-of-android-studio-shortcuts/"/>
    <updated>2015-09-07T23:10:27+08:00</updated>
    <id>http://toughcoder.net/blog/2015/09/07/tricks-of-android-studio-shortcuts</id>
    <content type="html"><![CDATA[<p>Android Studio是谷歌新一代的Android开发IDE，老一代的Eclipse+ADT已被无情的废弃。</p>

<p>Android Studio基于JetBrains的IntelliJ IDEA，这是一个在Java界享有不错声誉的IDE，它以“Intelligent”著称。AS是谷歌基于IntelliJ开发的，加上了一套专门为Android定制的插件系统。早期的时候AS＝IntelliJ + Android插件。但是现在没那么简单了，貌似AS中有的东西，在插件中却没有，具体的搞不太清楚了。</p>

<p>说了这么多都是废话。这里总结一下AS使用过程中常用的快捷键。</p>

<p><a href="http://toughcoder.net/blog/2015/09/07/tricks-of-android-studio-shortcuts/"><img src="https://img.alicdn.com/imgextra/i4/715978679/TB27J3kmVXXXXaAXXXXXXXXXXXX_!!715978679.png" width="480" height="320"></a></p>

<!-- more -->


<h2>键盘的map（keymap)</h2>

<p>本质上讲AS就是IntelliJ，所以核心的东西是一样的，比如配置和快捷键，IntelliJ中快捷键是可以配置的，不但可以配置具体快捷键的组合，而且可以配置一套组合，或者叫作风格，也就是说可以按照喜好还定义不同的组合。支持的有：</p>

<ul>
<li>Mac OS X 10.5+</li>
<li>Mac OS X</li>
<li>Emacs</li>
<li>Visual Studio</li>
<li>Default for XWin</li>
<li>Default for GNOME</li>
<li>Default for KDE</li>
<li>Eclipse</li>
<li>Eclipse (Mac OS X)</li>
<li>NetBeans 6.5</li>
<li>JBuilder</li>
</ul>


<p>这里预定义的集合是相应的系统或者IDE所惯用的快捷键，所以如果你熟悉其中某些IDE，可以直接使用对应的风格，以更快的适应AS。</p>

<p><em>注意</em>： 这里介绍的快捷键是基于<strong>Mac OS X</strong>这个风格的。</p>

<p><em>注意</em>： 另外，对于所有JetBrains的产品比如PyCharm或者WebStorm，都是一样的。</p>

<p><em>注意</em>： 这里默认是Mac平台，如果是Windows或者Linux，把CMD换成Ctrl就可以了。</p>

<h2>选择的快捷键</h2>

<ul>
<li>可以用鼠标来选择，这个是显而易见的</li>
<li><strong>Shift + Up/Down/Left/Right</strong> 来选择</li>
<li><strong>Shift + 鼠标</strong>来选择，这个更灵活</li>
<li><strong>CMD + w</strong>&mdash; Expand selection, 比如选择光标所在的一个词，再按一次会选择更多，甚至一行。这个键比较强大，根据光标所在的内容不同表现也不略微不同，可以慢慢体会。</li>
<li><strong>Shift + CMD + w</strong> &mdash; Shrink selection，减少选择</li>
<li><strong>CMD + a</strong> &mdash; select all</li>
</ul>


<h2>基本快捷键</h2>

<ul>
<li><strong>CMD + s</strong>&mdash; 保存文件</li>
<li><strong>CMD + x</strong>&mdash; 剪切</li>
<li><strong>CMD + v</strong>&mdash; 粘贴</li>
<li><strong>CMD + z</strong>&mdash; Undo</li>
<li><strong>CMD + f</strong>&mdash; 查找</li>
<li><strong>CMD + r</strong>&mdash; 查找和替换</li>
<li><strong>ESC</strong> &mdash; 用于关闭打开的对话框，或者退出正在进行的重构</li>
</ul>


<h2>导航类快捷键</h2>

<ul>
<li><strong>CMD + F12</strong> &mdash; 打开类的outline，类似于Eclipse的Ctrl + o，还可以快速索引</li>
<li><strong>CMD + b</strong>&mdash; 打开函数或者一个类的定义</li>
<li><strong>CMD + u</strong>&mdash; 打开当前类的父类中的方法(super method)</li>
<li><strong>CMD + e</strong>&mdash; 打开一个最近打开的文件，也就是从最近打开过的文件中快速索引</li>
<li><strong>Shift + CMD + n</strong> &mdash; 快速打开一个文件</li>
<li><strong>CMD + n</strong>&mdash; 快速打开一个类</li>
<li><strong>CMD + fn + Left/Right</strong> &mdash; 移动到文件的第一行和最后一行</li>
<li><strong>CMD + Left/Right</strong> &mdash; 移到一行的开头或结尾，类似PC上的HOME/END</li>
<li><strong>CMD + 1(数字1）</strong>&mdash; 打开或者关闭Project侧边栏</li>
<li><strong>Option + CMD + Left/Right</strong> &mdash; 回到上一个/下一个编辑处</li>
<li><strong>CMD + g</strong>&mdash; 去到某一行</li>
<li><strong>Ctrl + h</strong>&mdash; 打开类的层次关系</li>
<li><strong>Ctrl + Option + h</strong>&mdash; 打开方法的调用路径，也就是当前方法被调用的层次关系</li>
<li><strong>Option + CMD + Up/Down</strong> &mdash; 在类层次关系中移动，打开父类或子类</li>
<li><strong>CMD + ;</strong> &mdash; 打开Project structure</li>
<li><strong>Option + F7</strong> &mdash; 查找使用(Find usages)</li>
<li><strong>CMD + F7</strong> &mdash; 在当前文件中查找使用</li>
<li><strong>CMD + Shift + i</strong> &mdash; 不离开当前窗口快速预览某个方法或者类的实现</li>
<li><strong>CMD + Shift + a</strong> &mdash; 可以索引快捷键设置，当忘记快捷键时，非常有用</li>
<li><strong>CMD + p</strong> &mdash; 显示当前方法的参数</li>
<li><strong>Shift + Shift(Double Shift)</strong> &mdash; 全局搜索，整个项目范围内搜索任何文件或者字串</li>
<li><strong>CMD + F4</strong> &ndash; 关闭当前的文件Tab</li>
</ul>


<h2>代码相关</h2>

<ul>
<li><strong>CMD + o</strong> &mdash; 从父类中override一个方法</li>
<li><strong>Option + Enter</strong> &mdash; quick fix快速修复编译错误，比如导入类，实现父类方法等</li>
<li><strong>CMD + Option + l</strong> &mdash; 重新格式化代码，也就是按照预定义的代码格式来格式化代码</li>
<li><strong>CMD + Option + o</strong> &mdash; 优化导入语句</li>
<li><strong>CMD + Option + i</strong> &mdash; 调整缩进，或者叫做自动更正缩进</li>
<li><strong>Shift + CMD + &lsquo;+&rsquo;</strong> &mdash; 打开一个文件中的所有代码折叠</li>
<li><strong>Shift + CMD + &lsquo;-&rsquo;</strong> &mdash; 进行代码折叠</li>
<li><strong>Ctrl + Option + Space</strong> &mdash; 智能补全</li>
<li><strong>Shift + F6</strong> &mdash; 重构，重命名一个变量</li>
<li><strong>CMD + F6</strong> &mdash; 修改函数的签名</li>
<li><strong>Option + CMD + m</strong> &mdash; 提炼方法(Extract method)</li>
<li><strong>Option + CMD + f</strong> &mdash; 提炼成员变量</li>
<li><strong>Option + CMD + c</strong> &mdash; 提炼常量</li>
<li><strong>Shift + CMD + u</strong> &mdash; 把变量名方法名或者类名进行大小写转换</li>
</ul>


<h2>行操作&ndash;基本单位都是行</h2>

<ul>
<li><strong>CMD + y</strong>&mdash; 以行为单位进行删除，可以先选择多行，如果没有选择，就是当前行</li>
<li><strong>CMD + d</strong>&mdash; 以行为单位进行复制，可以先选择多行，如果没有选择，就是当前行</li>
<li><strong>CMD + Shift + Up/Down</strong> &mdash; 把行向上移动或向下移动，这个在调整代码的时候非常实用</li>
<li><strong>CMD + /</strong> &mdash; 注释掉所选择的行</li>
<li><strong>Ctrl + Shift + j</strong> &mdash; 把二行合为一行，把下行合到当前上来</li>
</ul>


<h2>一些方便的配置</h2>

<h3>查看每一行的历史改动</h3>

<p>右键行号右边的空白区域，然后选择Annotate，会出现一个面板显示每一行的最后一次改动，鼠标停在上面会显示commit信息，点击会显示某个commit的相关信息。
<img src="https://img.alicdn.com/imgextra/i1/715978679/TB22wy5jVXXXXbxXpXXXXXXXXXX_!!715978679.png"></p>

<p><img src="https://img.alicdn.com/imgextra/i1/715978679/TB23mKZjVXXXXcxXpXXXXXXXXXX_!!715978679.png"></p>

<p><img src="https://img.alicdn.com/imgextra/i4/715978679/TB21kzcjVXXXXc7XXXXXXXXXXXX_!!715978679.png">
其实，这就是把git blame可视化并集成在了AS里。</p>

<p><strong>注意</strong>：要添加了VCS root后才能使用Annotate。另外也可以为此配置一个快捷键.</p>

<h3>安装adb idea插件</h3>

<p>安装后，按二次Shift就可以快速搜索执行ADB命令了。
<img src="https://img.alicdn.com/imgextra/i1/715978679/TB2CQfXjVXXXXXFXpXXXXXXXXXX_!!715978679.png"></p>

<p><img src="https://img.alicdn.com/imgextra/i2/715978679/TB2A7HojVXXXXaoXXXXXXXXXXXX_!!715978679.png"></p>

<h3>代码自动提示改成大小写不敏感</h3>

<p><img src="https://img.alicdn.com/imgextra/i3/715978679/TB2TUrrjVXXXXX4XXXXXXXXXXXX_!!715978679.png"></p>

<h3>鼠标悬停显示文档信息</h3>

<p><img src="https://img.alicdn.com/imgextra/i4/715978679/TB24l2gjVXXXXchXXXXXXXXXXXX_!!715978679.png"></p>

<p><img src="https://img.alicdn.com/imgextra/i4/715978679/TB24l2gjVXXXXchXXXXXXXXXXXX_!!715978679.png"></p>

<h3>自动优化class imports</h3>

<p>这玩意儿，谁愿意手动去搞它呢？所以让IDE帮你搞定吧！</p>

<p><img src="https://img.alicdn.com/imgextra/i1/715978679/TB2ih1_jVXXXXX9XpXXXXXXXXXX_!!715978679.png"></p>

<h2>参考资料</h2>

<ul>
<li><a href="https://developer.android.com/sdk/installing/studio-tips.html">官方指导</a></li>
<li><a href="http://www.androidgreeve.com/2013/12/android-studio-shortcuts-you-should-know.html">Android Studio shortcuts you should know</a></li>
<li><a href="http://zlv.me/posts/2015/07/13/14_android-studio-tips/">倍数提高工作效率的Android Studio奇技</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[优秀代码赏析：CircleImageView]]></title>
    <link href="http://toughcoder.net/blog/2015/08/25/understanding-circleimageview/"/>
    <updated>2015-08-25T23:29:26+08:00</updated>
    <id>http://toughcoder.net/blog/2015/08/25/understanding-circleimageview</id>
    <content type="html"><![CDATA[<h2>核心功能</h2>

<p>实现一个圆形的ImageView，或者说让一个View来显示一个圆形的图片。</p>

<h2>核心思路</h2>

<p>这个库短小精悍，全部代码才200多行，核心代码也就几十行，却实现了一个看似不简单的功能。</p>

<p>要想实现圆形的图片，常规一般的人的思路，用图像处理的方式来解决，就好比显示圆角矩形图片那样。但是这个库的作者的思路十分的巧妙，它的核心思路就是把图片画在一个圆上面。</p>

<p><a href="http://toughcoder.net/blog/2015/08/25/understanding-circleimageview/"><img src="https://img.alicdn.com/imgextra/i1/715978679/TB2OpLjjVXXXXXoXpXXXXXXXXXX_!!715978679.png"></a></p>

<!-- more -->


<p>首先要解释一下Shader（着色器）的概念，它的作用就是如何填充一个几何图形，图像学里面画一个可见的几何图形分二步，一个画形，另一个就是着色。比如我们常用的shape或者text，除了形状外，还有颜色，这也是一种着色方式，只不过是我们熟悉的颜色罢了。Shader最为常见的就是颜色，另外还可以是其他几何图形，纹理和图片。比如PhotoShop里面画东西时刷子的样式有无数种，矩形，三角，球，毛状的，其他图像等等，这也都是Shader。在Android中支持的Shader有颜色，也还有图片（Bitmap），也就是说可以把一个图片当成着色器，来画在几何形状上面，这也就是这个库的精妙所在。</p>

<h2>关键代码解析</h2>

<h3>准备资源</h3>

<p>这里的资源包括二个，一个是图片资源，另一个就是边缘的颜色。圆形外面还有一个border。图片资源跟标准的ImageView是一样的，可以是资源，可以是URI，可以是Drawable也可以是Bitmap。这些东西都要要转化成为Bitmap，再生成BitmapShader放在Paint对象里。</p>

<p><img src="https://img.alicdn.com/imgextra/i1/715978679/TB2RjLdjVXXXXaXXpXXXXXXXXXX_!!715978679.png"></p>

<h3>绘制</h3>

<p>这个类的绘制是相当简单的，onDraw的关键代码只有二行，只做了二件事：</p>

<p><img src="https://img.alicdn.com/imgextra/i2/715978679/TB2UdDojVXXXXbSXXXXXXXXXXXX_!!715978679.png"></p>

<ul>
<li>用BitmapShader画一个圆</li>
<li>用border颜色画一个圆的边缘</li>
</ul>


<h3>缩放</h3>

<p>仅支持CenterCrop，缩放方式。也就是把图片等比缩放(也就是长和宽都按同一比例来缩放，以保证图片不变形)，以让最小的边刚好占满View的区域，大的一边如果超出会进行Crop。</p>

<p><img src="https://img.alicdn.com/imgextra/i1/715978679/TB2IbhDcpXXXXcLXpXXXXXXXXXX_!!715978679.png"></p>

<p>为了进行CenterCrop，就要计算出View区域长宽与图片长宽的最大比例，然后把图片长和宽都以此为比例来缩放。再把超出的一边进行Crop。</p>

<p><img src="https://img.alicdn.com/imgextra/i1/715978679/TB2bSrpjVXXXXbHXXXXXXXXXXXX_!!715978679.png"></p>

<p>详细的来解释下，如图所示，vw为目标View的区域的宽度，vh为目标区域高度，bw为图像的宽，bh为图像的高，只能是二种情况：过宽或者过高，图示第一种情况，明显是过高，所以缩放比例为vh/bh，按此比例缩放后nbw = bw*vh/bh > vw，所以要进行裁剪，左右各裁剪掉(nbw - vw)/2；对于第二情况也是如此。至于作者在translate时，为何都多加了个0.5个像素，是为了做round(四舍五入)，前面计算dx和dy时会做除2，而移动必须是以整数像素为单位，所以要做下round。</p>

<h2>项目地址</h2>

<p><a href="https://github.com/hdodenhof/CircleImageView">https://github.com/hdodenhof/CircleImageView</a></p>

<h2>如何使用</h2>

<p>优秀的库都是非常的易学易用，这个也不例外，简单来个例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;de.hdodenhof.circleimageview.CircleImageView</span>
</span><span class='line'>            <span class="na">xmlns:app=</span><span class="s">&quot;http://schemas.android.com/apk/res-auto&quot;</span>
</span><span class='line'>            <span class="na">android:layout_width=</span><span class="s">&quot;160dp&quot;</span>
</span><span class='line'>            <span class="na">android:layout_height=</span><span class="s">&quot;160dp&quot;</span>
</span><span class='line'>            <span class="na">android:layout_centerInParent=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>            <span class="na">android:src=</span><span class="s">&quot;@drawable/hugh&quot;</span>
</span><span class='line'>            <span class="na">app:border_width=</span><span class="s">&quot;2dp&quot;</span>
</span><span class='line'>            <span class="na">app:border_color=</span><span class="s">&quot;@color/dark&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>就像使用标准ImageView那样使用就好了，仅是多了特有的前缀来指定它需要的参数。更详细的可以参考官方的<a href="https://github.com/hdodenhof/CircleImageView/tree/master/sample">Sample</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何跳过Nexus 7二代的开机设置]]></title>
    <link href="http://toughcoder.net/blog/2015/08/15/skip-setup-wizard-for-nexus-7/"/>
    <updated>2015-08-15T16:47:55+08:00</updated>
    <id>http://toughcoder.net/blog/2015/08/15/skip-setup-wizard-for-nexus-7</id>
    <content type="html"><![CDATA[<h2>事情是酱紫的</h2>

<p>Neuxs 7二代，2013年款，14年某宝上面买的，为了体验最新的Android版本，以及奶七的高性价比，于是就买了一个，之后也一直用着比较爽，电影，游戏，看书，看代码，体验原生Android，体验GMS，都是相当不错，直到今年4月份，突然有一天，触摸屏失灵了，在重启了之后，触摸能用了，但是反应不灵，有时要点好几次才有反应，有时则是好的。当时错误以为是装的软件太多了，反应慢，于是干了一件蠢事，做了Factory reset，重启后，一直卡在开机设置页面，网络连接始终不行，无法完成开机设置。</p>

<p><a href="http://toughcoder.net/blog/2015/08/15/skip-setup-wizard-for-nexus-7/"><img src="https://img.alicdn.com/imgextra/i2/715978679/TB2Ao60mVXXXXbgXpXXXXXXXXXX_!!715978679.jpg" width="480" height="320"></a></p>

<!-- more -->


<p>想尽各种办法，使用代理，等，最终还是没用。刷了各种版本的Image都一个鸟样，有人说多试几次，就可以跳过，但是始终无法跳过。后来有人说可能Google那个服务可能不在了，所以即使翻了墙，也还是无法连接上。无奈刷了MIUI，但是版本只是4.4，也失去了奶七的特色。想着刷其他ROM的时候，有了新的发现。</p>

<p>最后发现了<a href="http://forum.xda-developers.com/showthread.php?t=1909602">这篇神贴</a>，讲述如何跳过Nexus 7的开机设置，虽然是2012看款奶七，也就是Nexus 7一代，但是仍然值得一试。</p>

<p>它的思路就是系统相关的特性都会存在系统的配置文件（/system/build.prop）之中，如果以ROOT方式连接ADB，那么我们就能修改此文件。也就能跳过开机设置的网络连接，甚至跳过开机设置。而高级的recovery都支持ADB，且是以ROOT身份，所以就有了如下的方法：</p>

<h2>具体方法</h2>

<p><em>注意</em>: 这是在Ubuntu下面进行，Mac平台的操作是一样的。对于Windows也差不多，只是需要安装手机的驱动程序，驱动程序可以到Goolge官方去下载。</p>

<p><em>注意</em>: 前提条件是要有ADB和fastboot命令，安装了SDK后就都有了</p>

<ol>
<li><p>先解锁bootloader</p>

<p>这个对于奶七还是很简单的，先重启到fastboot模式，关机，按Power+Volumn down来启动，就会启动到fastboot模式，这个模式可以做很多事情。</p>

<p><em>注意</em>: 对于Windows系统，需要安装手机的驱动程序，不会的可自行Google</p>

<p><em>fastboot oem unlock</em> 就可以解锁bootloader</p></li>
<li>下载<a href="http://www.clockworkmod.com/">CWM recovery</a>或者<a href="https://twrp.me/devices/asusnexus72013wifi.html">TWRP</a></li>
<li><p>安装recovery</p>

<p>fastboot flash recovery &lt;<em>clockworkmod-recovery.img</em>&gt;</p></li>
<li><p>更改配置</p>

<p>安装完recovery后，重启到recovery模式，在fastboot模式下，用Volumn up/down来选择recovery，按Power选中，就可以重启到recovery mode</p>

<p>连接到电脑，就可以执行ADB命令了，需要注意的是，要先mount一下/system分区，recovery会有一个菜单叫mount storage，进去，选择mount /system，如果不mount /system，你会找不到build.prop文件，因为所在的shell及文件系统是recovery的，并不安卓系统的。</p>

<p>adb remount /system/</p>

<p>之后adb shell cat /system/build.prop就能看到配置信息了</p>

<p>adb shell sed -i &rsquo;s/ro.setupwizard.network_required=true/ro.setupwizard.network_required=false/g&#8217; /system/build.prop</p>

<p><em>注意</em>: 上面是针对最新5.1.1 (LMY48I)的image。对于早期版本，比如4.4 （JSS15Q），配置项是ro.setupwizard.wifi_required，但是改此项并不管用，而是要跳过开机设置才管用也即添加ro.setupwizard.mode=DISABLED到/system/build.prop</p></li>
<li><p>重启</p>

<p>adb命令重启木有用，还是用recovery上面的菜单来重启。因为这个ADB是recovery提供的，你会发现里面有很多安卓本身没有的比如像find像sed，因为这个Shell是由recovery里的busybox提供的，安卓系统还没有加载，自然reboot木鸟用。</p></li>
</ol>


<h2>总结与评论</h2>

<p>首先说Google酱紫的做法还是蛮恶心的，完全不考虑我大天朝的人怎么办！连接网络可以有，但至少可以跳过或者忽略啊！不能强制用户，网上也有其他人有此报怨（米国人），因为买奶七的人不一都有网络（那个报怨的米国人就是，大意是给他老爹买的，老爹那里木WiFi，所以很郁闷，无法激活）。</p>

<p>其次，就是解决问题的思路，惭愧虽搞了安卓几年，但是没想出通过设置来跳过开机设置这等高招。XDA论坛还是高手云集的地方，ROOT，recovery和各种Hack基本上都源自XDA论坛。以后遇到这种完全无思路 的问题还是要多救助网络和社区，否则自己搞鼓一辈子，可能也想不到好方案。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[实战技巧：Android异步指南]]></title>
    <link href="http://toughcoder.net/blog/2015/05/25/effective-android-asynchrony/"/>
    <updated>2015-05-25T23:49:19+08:00</updated>
    <id>http://toughcoder.net/blog/2015/05/25/effective-android-asynchrony</id>
    <content type="html"><![CDATA[<p>异步向来都是提高性能的必要手段，当然也是引发问题的常见根源。Android之中更是如此，主线程事关应用的流畅程度，所以把更多能放在工作线程中事，放到工作线程中去，是提升App性能之必经之路。Android中使用线程有多种方式，我们该如何选择，以及在使用过程中要注意哪些问题，今天就来探讨一下。</p>

<p><a href="http://toughcoder.net/blog/2015/05/25/effective-android-asynchrony/"><img src="https://img.alicdn.com/imgextra/i3/715978679/TB21ZghmVXXXXakXXXXXXXXXXXX_!!715978679.jpg" width="480" height="320"></a></p>

<!-- more -->


<h2>Bitmap处理</h2>

<p>在Android中显示图片，<a href="http://developer.android.com/reference/android/graphics/Bitmap.html">Bitmap</a>是必须要学会的。Bitmap是Android中抽象出来代表图片的类，把图片文件或者数据转化成Bitmap进而再放置到视图系统中显示。Bitmap的处理也常常会引发OOM问题。</p>

<p>关于Bitmap的处理，遵守二个原则，就是按需解析和及时释放。现在的图片文件都很大，但很多时候我们需要展示的区域（目标View的大小）却不是很大，这个时候就需要在解析的时候，适当的降低帧率，以减小所需要申请的内存。及时释放时也需要注意，要确定不用了，再释放，如果有View仍在显示时，在另外的地方把Bitmap释放了，那会引发异常的。</p>

<p>对于Bitmap的使用，<a href="http://developer.android.com/training/displaying-bitmaps/index.html">官方文档</a>有着比较详细的教程。现在的Android文档是很齐全的，相比较2010年代时2.0和2.1时多了很多最佳实践，所以不要浪费。</p>

<p>除内存外，Bitmap的处理也是比较耗时的，因为它经常涉及IO，以及压缩和处理，即使不耗时，因为它跟UI没关系，所以也是可以放在工作线程中去做的。Android中记住一个准则就是主线程做的事情越少越好，越少你的应用就越流畅。至于如何具体的去做也建议参考<a href="http://developer.android.com/training/displaying-bitmaps/process-bitmap.html">官方教程</a>。</p>

<h2>异步的方式</h2>

<p>在Android中异步实现的方式非常多：</p>

<ul>
<li>Thread</li>
<li>AsyncTask</li>
<li>Executors</li>
<li>Handler, Looper</li>
</ul>


<p>各种方式的使用方法参阅相关文档或者查阅网上浆料就可以了。这里主要说一下区别和适用的场景：</p>

<h3>Thread</h3>

<p>这是Java的简单粗暴的方式，优点就是简单，方便。对于某些简单的，一次性的，不需要与主线程通信和操作UI，不是很频繁（一次启动执行一次），的费时操作，直接使用Thread方式还是相当方便的。</p>

<h3>AsyncTask</h3>

<p>这是Android中专门针对平台本身的特性而封装的一个类，它的优势在于与主线程通信方便，能非常方便的操作UI。所以使用AsyncTask的理由就是当你需要在异步操作完成时直接操作UI时，除此外，你不应该使用它。</p>

<p>使用AsyncTask时，最好使用AsyncTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);以免任务不能及时获得执行，详细原因可以看<a href="http://blog.csdn.net/hitlion2008/article/details/8194510">这篇文章</a>。</p>

<h3>Executors</h3>

<p>当有大量的任务，或者重复性的任务需要执行时，就要使用线程池来复用和管理线程。</p>

<h3>Handler与Looper</h3>

<p>这是Android事件循环的基础类，也是AsyncTask的实现方式，是线程间通信的利器。所以如果你有复杂的线程通信（通常是工作线程和主线程之间），可以使用这二个类来自行进行定义。</p>

<h3>其他的高级工具</h3>

<p>对于多线程，已经有足够的工具供我们使用比如java.util.concurrent.*，以及Universal Image Loader，或者EventBus，所以当设计时首先要看现在的工具能否满足我们的需求。而不是自己去实现，子曰：不能重复造轮子，就是就是这个道理。</p>

<h2>异步时要注意Activity的生命周期</h2>

<p>异步时最容易出错的就是忽略Activity的生命周期。比如，当异步执行完成了，Activity却退出了前台，或者已经结束，如果异步完成时要操作UI，那么这种情况下肯定会报错，具体的错误取决于场景。这个问题的解法就是在异步操作完成后要用Activity.isFinishing()来判断下Activity是否还是alive的。或者设置一个变量来查看Activity是否还在前台。</p>

<p>另外，即使异步操作中不涉及UI，那么当Activity转入后台，或者退出时，也要及时的终止工作线程，否则也会造成Activity的对象无法及时销毁而最终导致内存泄露。这个问题需要在设计异步task时把可取消考虑进去，当Activity退出前台时发送消息给线程，让其终止执行。对于常见的费时操作，比如IO，网络，复杂计算等在都要考虑取消，每一个小步骤执行前都要判断取消标志位，以及时终止操作。通常这需要在Activity中持有任务的引用，或者使用Executors来管理任务，或者有一个类似的对象来管理异步任务，当Activity退出时，来终止任务。或者使用EventBus这类工具来降低耦合。</p>

<h2>有用的资源</h2>

<p>关于Android中的异步已经有了一本专门的书了<a href="http://shop.oreilly.com/product/0636920029397.do">《Efficient Android Threading》</a>，内容还是比较丰富的，可以看一看。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初级前端的专业的CSS技巧]]></title>
    <link href="http://toughcoder.net/blog/2015/05/22/css-pro-tricks-for-starters/"/>
    <updated>2015-05-22T21:14:26+08:00</updated>
    <id>http://toughcoder.net/blog/2015/05/22/css-pro-tricks-for-starters</id>
    <content type="html"><![CDATA[<p>这篇文章的读者应该是刚开始开发，或者准备开始开发前端的有经验的开发者，总结了一些非常有用的可以快速上手的CSS布局技巧。</p>

<p><a href="http://toughcoder.net/blog/2015/05/22/css-pro-tricks-for-starters/"><img src="https://img.alicdn.com/imgextra/i2/715978679/TB2I1odmVXXXXb3XXXXXXXXXXXX_!!715978679.jpg"></a></p>

<h2>HTML的布局特点</h2>

<p>要理解默认的布局流，块级元素是从上到下，行内元素是从左到右。都是左对齐。</p>

<!-- more -->


<h2>一切皆为框，块级元素与行内元素</h2>

<p>HTML的元素分为二个种类，一个是块级元素，一个是行内元素。块级元素的特点是独自开启一行，且独自中据一行；行内元素的特点是在一行内显示，自己多大就占据多大空间。可以通过display属性来改变元素默认的显示属性。</p>

<p>常见的块级元素是：div, p, ol, ul, li</p>

<p>常见的行内元素是: a, img, span</p>

<h2>元素和容器</h2>

<p>对于常见的GUI框架，都有二种东西来做布局，一个是元素（通常叫Widget），另一个是布局管理器，也就是用于管理或者组合Widget用的。在安卓里就是View和ViewGroup。</p>

<p>使用布局管理器的目的也很简单，就是为了把部分变成整体，方便操作。</p>

<p>div是用来组合和管理块级元素的。而span是用来组合和管理行内元素。</p>

<p>建议多多使用div和span来组合和管理你的布局，就像使用ViewGroup来管理和组合View一样。</p>

<h2>理解盒子模型</h2>

<p>其实，有过其他GUI框架经验的人理解盒子模型很容易，margin是border外的间距，padding是border内间距，整体元素占据的空间就是margin+border+padding+元素本身的大小。</p>

<p><img src="http://www.w3school.com.cn/i/ct_boxmodel.gif"></p>

<h2>父元素的大小与子元素的关系</h2>

<p>比如安卓，父元素的大小是受子元素影响的，父元素可是基于子元素大小来计算（wrap_content），当子元素超出父元素时，子元素是会被clip的。</p>

<p>CSS里却灵活的多，默认的，父元素的大小与子元素没有关系，需要分别单独指定，也无法让其wrap_content。当子元素的大小超过了父元素时，是通过overflow属性的决定如何显示的：hidden，表示clip；scoll表示用scrollbar来滚动。</p>

<h2>对齐方式</h2>

<p>左对齐或者右对齐也是布局中常见的需求。对于块元素可以通过float属性来控制，默认的float是left。当设置为right时，就可以把元素右对齐。通常后面跟一个clear: both来清除float属性。因为float会改变默认的布局流，后面所有的元素都将按此方式来排，当然这不是期望的。<a href="http://www.w3schools.com/css/css_float.asp">float的介绍</a>以及<a href="https://css-tricks.com/all-about-floats/">关于float</a>都是很好的文章。</p>

<p>当然，对于position不是static的，就要通过left/right来控制了。</p>

<h2>居中方式</h2>

<p>居中也是非常常见的一个需求。</p>

<h3>让某一个元素在整个屏幕中完全居中</h3>

<p>比如显示一个Dialog，肯定是要在屏幕中央显示的了。
让元素在整体屏幕居中，肯定要把元素从整体文档中拿出来，也就是不能用正常的文档流。所以这个元素应该是position: fixed，然后它的left和top要设置为50%，但是这样子后是元素的左上角是在屏幕正中，所以为了让元素居中还要把元素向左和向上移动其大小的50%，可以通过transform来实现，完整的CSS如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='CSS'><span class='line'><span class="nc">.center</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">display</span><span class="o">:</span> <span class="k">block</span><span class="p">;</span>
</span><span class='line'>   <span class="k">position</span><span class="o">:</span> <span class="k">fixed</span><span class="p">;</span>
</span><span class='line'>   <span class="k">top</span><span class="o">:</span> <span class="m">50%</span><span class="p">;</span>
</span><span class='line'>   <span class="k">left</span><span class="o">:</span> <span class="m">50%</span><span class="p">;</span>
</span><span class='line'>   <span class="n">transform</span><span class="o">:</span> <span class="n">translate</span><span class="p">(</span><span class="m">-50%</span><span class="o">,</span> <span class="m">-50%</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>详细的解释请参阅<a href="https://css-tricks.com/quick-css-trick-how-to-center-an-object-exactly-in-the-center/">这篇文章</a>。</p>

<h3>块级元素的居中方式</h3>

<p>把margin设置为auto一般情况下可以把块级元素居中，但需要指定元素的宽和高，这样浏览器才能计算出来，比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='CSS'><span class='line'><span class="nc">.title</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">margin</span><span class="o">:</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'>   <span class="k">width</span><span class="o">:</span> <span class="m">1</span><span class="n">rem</span><span class="p">;</span>
</span><span class='line'>   <span class="k">height</span><span class="p">;</span> <span class="m">0</span><span class="o">.</span><span class="m">4</span><span class="n">rem</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><p>元素内的文字居中</h3>

<p>上面的方法只能让p元素在其父元素内居中，但是它内部的文字仍然不居中，比如当有四个文字时，调好了，居中，但是当只有一个文字时却又不能居中了。这里就要用到一个新的显示属性flex，是flexible的缩写，意思是灵活的布局。比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='CSS'><span class='line'><span class="nc">.title</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">display</span><span class="o">:</span> <span class="n">flex</span><span class="p">;</span>
</span><span class='line'>   <span class="k">justify</span><span class="o">-</span><span class="k">content</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span> <span class="c">/* align horizontal */</span>
</span><span class='line'>   <span class="n">align</span><span class="o">-</span><span class="n">items</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span> <span class="c">/* align vertical */</span>
</span><span class='line'>   <span class="c">/* the following are for Browser compatibility */</span>
</span><span class='line'>   <span class="k">display</span><span class="o">:</span> <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">box</span><span class="p">;</span>
</span><span class='line'>   <span class="k">display</span><span class="o">:</span> <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">flex</span><span class="p">;</span>
</span><span class='line'>   <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">box</span><span class="o">-</span><span class="n">align</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'>   <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">flex</span><span class="o">-</span><span class="n">align</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'>   <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">align</span><span class="o">-</span><span class="n">items</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>具体解释可以参考<a href="http://stackoverflow.com/questions/17213113/vertical-centering-flexbox-overlay-in-ios-safari">原文</a>以及<a href="http://stackoverflow.com/questions/8865458/how-to-align-text-vertically-center-in-div-with-css">这里</a>。</p>

<h2>定位方式</h2>

<p>默认的流式布局，块级元素从上往下排，一个接着一个的。如果想要让某个元素固定在某个位置，或者想要层叠元素怎么办。现在的Web越来越像客户端，有顶部菜单栏，有侧面菜单栏，有弹出式菜单，在层叠式菜单等等。这些常用且又好用的交互方式又是如何实现的呢?
这就要用到position属性了。position也就是给元素定位，确定其在文档(document)中的位置，默认值是static，也就是从上到下，一个挨着一个。</p>

<ul>
<li>relative &ndash; 相对于这个元素在正常文档流中的位置，正常流中的位置仍然保留。</li>
<li>absolute &ndash; 这个元素会从自觉流中移除，就好像它不存在一样。这个元素的定位会相对于它的第一个定位不是static的父元素，也就是从它的父元素向上找，找到第一个定位属性不是static的元素，如果找不到就使用根元素（html）。</li>
<li>fixed &ndash; 固定在窗口中，从正常流拿出来，其他元素布局就好像属性为fixed的不存在一样，不会随着文档滚动页滚动，可以重叠，用z-index来指定谁在上面，谁在下面。流行的侧面菜单，顶部菜单等都是用此方式实现。</li>
</ul>


<p>relative，absolute以及fixed属性都要同时使用top/right/left/bottom来为元素指定位置，它们的含义是元素距离父元素上/右/左/下的距离。</p>

<h2>大小的度量单位</h2>

<p>元素的宽和高，以及字体大小的单位：</p>

<ul>
<li>px &ndash; 像素，像素就是一个屏幕可显示的是小单元，通常视觉给出的标注都是以像素为单位</li>
<li>em &ndash; 相对于父元素的大小，通常这个值会是继承自父元素。所以如果以它为单位，会随着元素的深入这个单位会变得越来越大。</li>
<li>rem &ndash; 根元素字体高度，通常就是HTML的字体高度。这个值更为通用，因为对于一个Document来说这个值是黑固定的，适配性和通用性更好。</li>
<li>pt &ndash; 是点的意思(point)，是在打印设备中常用的单位，一个pt等于1/72英寸。它跟像素（px）一样，都是绝对单位，通用性和适配性不好，一般用的比较少。</li>
</ul>


<p>对于这些单位的详细解释可以参考<a href="http://kyleschaeffer.com/development/css-font-size-em-vs-px-vs-pt-vs/">这篇文章</a>和<a href="http://snook.ca/archives/html_and_css/font-size-with-rem">这篇</a>以及<a href="https://css-tricks.com/rems-ems/">这篇</a>。</p>

<h2>用相对单位控制图片的大小</h2>

<p>不要用img元素的属性width和height，而是用CSS的width，height，因为img属性width和height仅能使用px作为单位，适配性要差一些，而CSS中的width和height是可以使用rem这种相对单位，适配性要好。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='CSS'><span class='line'><span class="nc">.icon</span> <span class="nt">img</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">width</span><span class="o">:</span> <span class="m">1</span><span class="n">rem</span><span class="p">;</span>
</span><span class='line'>   <span class="k">height</span><span class="o">:</span> <span class="n">rem</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>横向显示一个列表</h2>

<p>把&lt;li&gt;的display属性设置为inline-block即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='CSS'><span class='line'><span class="nc">.nav</span> <span class="nt">ol</span> <span class="nt">li</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="o">-</span><span class="k">block</span><span class="p">;</span>
</span><span class='line'>   <span class="k">text-align</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>控制元素的可见性</h2>

<p>有二种方式，一种是把display设置为none，这会让浏览器忽略此元素就好像它不存在一样，在渲染时；另一种方式就是通过visibility属性：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='CSS'><span class='line'><span class="nc">.show</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">visibility</span><span class="o">:</span> <span class="k">visible</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.hide</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">visibility</span><span class="o">:</span> <span class="k">hidden</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>注意兼容性</h2>

<p>对于一般的属性或者值最好要注意一下子它的兼容性，一般就是在前面加上-webkit-前缀，因为现在四分之三的浏览器都是Webkit系。</p>

<h2>工具</h2>

<p>欲想事，必先利其器。工具对于开发的重要性对于有经验的人不用多说，是事半功倍的。</p>

<h3>开发工具</h3>

<p>开发工具首选Webstorm。这是JetBrains的作品，IDEA IntellJ，PyCharm都是深受广大开发者喜欢的作品，也是我首选的IDE（NotePad和Vim偏执狂请走开），虽然我也喜欢Vim的简洁和高效，但是对于堆代码来说IDE是最高效的。跟IDEA和PyCharm不一样，WebStorm没有社区版本，这意味着试用了30天后就必须想办法了。。</p>

<h3>调试工具</h3>

<p>到今天，几个流行的浏览器都已经有了调度功能，Firefox的Firebugs，Opera的DragonFly，以及Chrome的devtools，Safari也内置了调试工具，至于IE，我还不知道。它们的功能基本上都是一致的：都能实时查看并修改元素，以及元素的CSS属性；能设置JavaScript的断点，单步调试；能查看Console，以及查看Network网络请求以及storage的使用情况。</p>

<p>可能最受欢迎的还是Chrome的devTools，至少，我是喜欢它。它内置，使用方便，不用装其他的东西，不用什么开发者模式。</p>

<p>详细的可以看<a href="https://developer.chrome.com/devtools/index">官网介绍</a>（自备梯子）。</p>

<p>在调试的时候多使用使用感受一下子就好了。多用”审查元素“找到元素，然后在devtools中修改样式，得到合适的样式的值，然后再去修改源码，能大大提高效率。</p>

<h3>移动端的工具</h3>

<p>如今移动端的流量已经超越PC，而且势头还在增长。一大半的前端都是为移动端而生的。</p>

<h4>Chrome DevTools的移动设备模拟器Emulator</h4>

<p>打开DevTools后，可以在左上角看一一个PC和移动设备的小Icon，点了后就进入了移动设备模拟器，它有各种模拟器：iPhone5, 6, 6s, Nexus 5, 6，iPad， iPad Mini等等，还可以模拟网络条件，良心工具啊。</p>

<p>可以到官方查看<a href="https://developer.chrome.com/devtools/docs/device-mode">更多信息</a>。</p>

<h4>Chrome远端调试</h4>

<p>Chrome和Android都是Google的产品，所以难免结合紧密。对于4.3以上的设备，用Chrome可以像调试PC网页那样来调试设备上的网页。只要在PC的Chrome上打开chrome://inpsect，选择网页就可以了。详细信息也请参考<a href="https://developer.chrome.com/devtools/docs/remote-debugging">官方网站</a>。</p>

<h2>参考</h2>

<ul>
<li><a href="https://css-tricks.com/all-about-floats/">https://css-tricks.com/all-about-floats/</a></li>
<li><a href="https://css-tricks.com/rems-ems/">https://css-tricks.com/rems-ems/</a></li>
<li><a href="http://stackoverflow.com/questions/8865458/how-to-align-text-vertically-center-in-div-with-css">http://stackoverflow.com/questions/8865458/how-to-align-text-vertically-center-in-div-with-css</a></li>
<li><a href="https://css-tricks.com/quick-css-trick-how-to-center-an-object-exactly-in-the-center/">https://css-tricks.com/quick-css-trick-how-to-center-an-object-exactly-in-the-center/</a></li>
</ul>


<h2>应该经常访问的网站</h2>

<ul>
<li><a href="http://www.w3schools.com/">http://www.w3schools.com/</a></li>
<li><a href="http://www.w3school.com.cn/index.html">http://www.w3school.com.cn/index.html</a></li>
<li><a href="http://www.css3maker.com/index.html">http://www.css3maker.com/index.html</a></li>
<li><a href="https://developer.mozilla.org/en-US/">https://developer.mozilla.org/en-US/</a></li>
<li><a href="https://css-tricks.com/">https://css-tricks.com/</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
