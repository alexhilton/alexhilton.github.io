<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[稀有猿诉]]></title>
  <link href="https://alexhilton.github.io/atom.xml" rel="self"/>
  <link href="https://alexhilton.github.io/"/>
  <updated>2025-03-28T22:14:32+08:00</updated>
  <id>https://alexhilton.github.io/</id>
  <author>
    <name><![CDATA[Alex Hilton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[实战：在Compose中优雅地实现提示]]></title>
    <link href="https://alexhilton.github.io/blog/2025/03/28/hints-in-compose/"/>
    <updated>2025-03-28T22:05:00+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/03/28/hints-in-compose</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自<a href="https://proandroiddev.com/hints-in-compose-10b6470acc58">Hints in Compose</a>，原文由<a href="https://medium.com/@vitoksmile">Viktor Mykhailiv</a>发布于2025年2月13日，文章内容巨详细，TL;DR;。</p></blockquote>

<p><a href="https://alexhilton.github.io/blog/2025/03/28/hints-in-compose/"><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*0jBirMqQV-aXKXw5gekEkQ.jpeg" title="auto auto" ></a></p>

<!-- more -->


<p>有时我们的应用需要突出显示某些 UI 组件，例如在首次登录（首次使用）时，或者当我们添加新内容（“新功能”）时。</p>

<p>在本文中，我将指导如何构建自定义解决方案来显示提示/工具提示，指向 Compose（Compose Multiplatform 和 Jetpack Compose）中的特定 UI 元素。</p>

<h2>布局层次</h2>

<p>要突出显示 UI 元素，首先我们应该了解“提示”(Hints)的主要概念。
假设我们有一个带有 TopBar、BottomNavigation 和主要操作按钮的应用程序。我们想要突出显示 TopBar 的操作、主要按钮和 BottomNavigation 中的一个项目。</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*7K0zoXqZM0ajYYZARn6I5w.png" alt="Layout hierarchy" /></p>

<p>对于我们的“提示”，我们需要绘制一个暗淡的背景（也是为了拦截触摸事件），计算突出显示的 UI 元素的位置，剪掉（屏蔽）我们的元素形状以免变暗，最后绘制一个提示（例如带有背景的文本）。</p>

<h2>1. 暗淡的背景</h2>

<p>要在所有内容之上绘制一个暗淡的背景作为覆盖或弹出窗口，我们可以：</p>

<h3>a. 使用自定义可组合项包装我们应用（根组件）的所有内容（例如带有 Modifier.background 的 Box）</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">AppContent</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">HintOverlay</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">MaterialTheme</span> <span class="p">{</span>
</span><span class='line'>         <span class="n">Scaffold</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 我的应用内容</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>b. 使用对话框</h3>

<p>通过使用对话框，我们可以在所有内容之上显示一个覆盖层（例如，在 Android 上，对话框显示在自己的窗口中）。
使用对话框时，Compose Multiplatform 中的 scrimColor 会出现问题。我们无法从 Compose 通用目标配置 scrimColor ，但每个目标（Android 除外）都为 scrimColor 提供了一个实际值。作为一种可能的解决方案，我们可以创建一个例外类来提供对话框属性并为每个目标提供实际实现。</p>

<h3>c. 使用 Popup</h3>

<p>Popup 在这里看起来更好，因为它默认不绘制 scrimColor，并且覆盖层显示在所有内容之上。</p>

<p>我会采用第三种方法，不强制手动使用 HintOverlay。</p>

<p>我还想为覆盖层背景添加 Brush 支持，而不仅仅是 Color 。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">LocalHintOverlayColor</span> <span class="p">=</span> <span class="n">staticCompositionLocalOf</span><span class="p">&lt;</span><span class="n">Color</span><span class="p">&gt;</span> <span class="p">{</span> <span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">x44000000</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="py">LocalHintOverlayBrush</span> <span class="p">=</span> <span class="n">staticCompositionLocalOf</span><span class="p">&lt;</span><span class="n">Brush</span><span class="p">?&gt;</span> <span class="p">{</span> <span class="k">null</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">HintOverlay</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Popup</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                <span class="p">.</span><span class="n">fillMaxSize</span><span class="p">()</span>
</span><span class='line'>                <span class="p">.</span><span class="n">overlayBackground</span><span class="p">()</span>
</span><span class='line'>        <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Text</span><span class="p">(</span>
</span><span class='line'>                <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">align</span><span class="p">(</span><span class="n">Alignment</span><span class="p">.</span><span class="n">Center</span><span class="p">),</span>
</span><span class='line'>                <span class="n">text</span> <span class="p">=</span> <span class="s">&quot;Draw hints here&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">White</span><span class="p">,</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 从 [LocalHintOverlayBrush] 或 [LocalHintOverlayColor] 设置 `background`。</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">Modifier</span><span class="p">.</span><span class="n">overlayBackground</span><span class="p">():</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">composed</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">LocalHintOverlayBrush</span><span class="p">.</span><span class="n">current</span><span class="o">?.</span><span class="n">let</span> <span class="p">{</span> <span class="n">background</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>        <span class="o">?:</span> <span class="n">background</span><span class="p">(</span><span class="n">LocalHintOverlayColor</span><span class="p">.</span><span class="n">current</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我可以使用CompositionLocalProvider 设置 Brush 来覆盖覆盖的背景。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">CompositionLocalProvider</span><span class="p">(</span>
</span><span class='line'>    <span class="n">LocalHintOverlayBrush</span> <span class="n">provides</span> <span class="n">Brush</span><span class="p">.</span><span class="n">linearGradient</span><span class="p">(</span>
</span><span class='line'>        <span class="n">listOf</span><span class="p">(</span>
</span><span class='line'>            <span class="n">Color</span><span class="p">.</span><span class="n">Red</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="n">alpha</span> <span class="p">=</span> <span class="m">0.5f</span><span class="p">),</span>
</span><span class='line'>            <span class="n">Color</span><span class="p">.</span><span class="n">Blue</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="n">alpha</span> <span class="p">=</span> <span class="m">0.5f</span><span class="p">),</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">),</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">HintOverlay</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*KrHuSNZT0zE-Eddz1GBA2A.png" alt="Dimmed background" /></p>

<h2>2. 计算锚点坐标</h2>

<p>要获取 Compose 中 UI 元素的坐标，我们可以使用OnGloballyPositionedModifier ，当内容的全局位置可能发生变化时，会使用布局的最终​​ LayoutCoordinates 调用该方法。</p>

<p>使用示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">Column</span><span class="p">(</span>
</span><span class='line'>    <span class="n">Modifier</span><span class="p">.</span><span class="n">onGloballyPositioned</span> <span class="p">{</span> <span class="n">coordinates</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="c1">// 这将是Column的大小。</span>
</span><span class='line'>        <span class="n">coordinates</span><span class="p">.</span><span class="n">size</span>
</span><span class='line'>        <span class="c1">// Column相对于应用程序窗口的位置。</span>
</span><span class='line'>        <span class="n">coordinates</span><span class="p">.</span><span class="n">positionInWindow</span><span class="p">()</span>
</span><span class='line'>        <span class="c1">// Column相对于 Compose 根的位置。</span>
</span><span class='line'>        <span class="n">coordinates</span><span class="p">.</span><span class="n">positionInRoot</span><span class="p">()</span>
</span><span class='line'>        <span class="c1">// 这些将是提供给布局的对齐线（此处的Column为空）。</span>
</span><span class='line'>        <span class="n">coordinates</span><span class="p">.</span><span class="n">providedAlignmentLines</span>
</span><span class='line'>        <span class="c1">// 这将是与 Column 的父级相对应的 LayoutCoordinates 实例。</span>
</span><span class='line'>        <span class="n">coordinates</span><span class="p">.</span><span class="n">parentLayoutCoordinates</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Box</span><span class="p">(</span><span class="n">Modifier</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">20.</span><span class="n">dp</span><span class="p">).</span><span class="n">background</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">Green</span><span class="p">))</span>
</span><span class='line'>    <span class="n">Box</span><span class="p">(</span><span class="n">Modifier</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">20.</span><span class="n">dp</span><span class="p">).</span><span class="n">background</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">Blue</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于我们的提示，我们需要创建一个状态来保存锚点的坐标和大小，并引入一个修改器来更新状态：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Stable</span>
</span><span class='line'><span class="k">class</span> <span class="nc">HintAnchorState</span> <span class="k">internal</span> <span class="n">constructor</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">internal</span> <span class="k">var</span> <span class="py">size</span><span class="p">:</span> <span class="n">IntSize</span> <span class="k">by</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="n">IntSize</span><span class="p">.</span><span class="n">Zero</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">internal</span> <span class="k">var</span> <span class="py">offset</span><span class="p">:</span> <span class="n">Offset</span> <span class="k">by</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="n">Offset</span><span class="p">.</span><span class="n">Zero</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">rememberHintAnchorState</span><span class="p">():</span> <span class="n">HintAnchorState</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">HintAnchorState</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">Modifier</span><span class="p">.</span><span class="n">hintAnchor</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">HintAnchorState</span><span class="p">):</span> <span class="n">Modifier</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">onGloballyPositioned</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">state</span><span class="p">.</span><span class="n">size</span> <span class="p">=</span> <span class="n">it</span><span class="p">.</span><span class="n">size</span>
</span><span class='line'>        <span class="n">state</span><span class="p">.</span><span class="n">offset</span> <span class="p">=</span> <span class="n">it</span><span class="p">.</span><span class="n">positionInWindow</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>因此，我们只需订阅所需 UI 元素的大小和坐标变化即可更新锚点的状态。
现在我们需要将此 hintAnchor 修饰符应用于我们的内容：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">topAppBarActionHintAnchor</span> <span class="p">=</span> <span class="n">rememberHintAnchorState</span><span class="p">()</span>
</span><span class='line'><span class="k">val</span> <span class="py">actionHintAnchor</span> <span class="p">=</span> <span class="n">rememberHintAnchorState</span><span class="p">()</span>
</span><span class='line'><span class="k">val</span> <span class="py">bottomNavigationHintAnchor</span> <span class="p">=</span> <span class="n">rememberHintAnchorState</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">IconButton</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>        <span class="p">.</span><span class="n">hintAnchor</span><span class="p">(</span><span class="n">topAppBarActionHintAnchor</span><span class="p">),</span>
</span><span class='line'>    <span class="n">onClick</span> <span class="p">=</span> <span class="p">{},</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">Button</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>        <span class="p">.</span><span class="n">hintAnchor</span><span class="p">(</span><span class="n">actionHintAnchor</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">4.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>    <span class="n">onClick</span> <span class="p">=</span> <span class="p">{},</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Action&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BottomNavigationItem</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>        <span class="p">.</span><span class="n">hintAnchor</span><span class="p">(</span><span class="n">topAppBarActionHintAnchor</span><span class="p">),</span>
</span><span class='line'>    <span class="c1">//... 传入其他需要的参数</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><strong>注意：</strong> 修饰符顺序在 Compose 中始终很重要，我们在 hintAnchor 后设置 4.dp，以便在此按钮周围留出额外空间（锚点的尺寸将比实际按钮的尺寸大 4.dp）。</p></blockquote>

<p>HintOverlay 可组合项需要进行一些更改才能使用 HintAnchorState为此锚点绘制提示。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">HintOverlay</span><span class="p">(</span>
</span><span class='line'>    <span class="n">anchors</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">HintAnchorState</span><span class="p">&gt;,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">fillMaxSize</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">overlayBackground</span><span class="p">(</span><span class="n">anchors</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 从 [LocalHintOverlayBrush] 或 [LocalHintOverlayColor] 设置“background”。</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">Modifier</span><span class="p">.</span><span class="n">overlayBackground</span><span class="p">(</span>
</span><span class='line'>    <span class="n">anchors</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">HintAnchorState</span><span class="p">&gt;,</span>
</span><span class='line'><span class="p">):</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">composed</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">backgroundBrush</span> <span class="p">=</span> <span class="n">LocalHintOverlayBrush</span><span class="p">.</span><span class="n">current</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">backgroundColor</span> <span class="p">=</span> <span class="n">LocalHintOverlayColor</span><span class="p">.</span><span class="n">current</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">drawWithCache</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">onDrawWithContent</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">backgroundBrush</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">drawRect</span><span class="p">(</span><span class="n">backgroundBrush</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">drawRect</span><span class="p">(</span><span class="n">backgroundColor</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">anchors</span><span class="p">().</span><span class="n">forEach</span> <span class="p">{</span> <span class="n">anchor</span> <span class="p">-&gt;</span>
</span><span class='line'>                <span class="n">drawRect</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Red</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">topLeft</span> <span class="p">=</span> <span class="n">anchor</span><span class="p">.</span><span class="n">offset</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">size</span> <span class="p">=</span> <span class="n">anchor</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">toSize</span><span class="p">(),</span>
</span><span class='line'>                    <span class="n">style</span> <span class="p">=</span> <span class="n">Stroke</span><span class="p">(</span><span class="n">width</span> <span class="p">=</span> <span class="m">5f</span><span class="p">),</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">drawContent</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在我们只需在锚点周围画一个红色矩形：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*EqvV4AHsimwvwZxajIgtXg.png" alt="Anchors" /></p>

<p>但如果我们在移动设备上运行，我们会在 Android 上得到错误的数字：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*2wennrPOIcKArOK4MuayAQ.png" alt="With Window Insets" /></p>

<p>该问题与 WindowInsets 有关。让我们减去这些 insets 来修复它：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">fun</span> <span class="nf">Modifier</span><span class="p">.</span><span class="n">hintAnchor</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">HintAnchorState</span><span class="p">):</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">composed</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">statusBarInsets</span> <span class="p">=</span> <span class="n">WindowInsets</span><span class="p">.</span><span class="n">statusBars</span><span class="p">.</span><span class="n">getTop</span><span class="p">(</span><span class="n">LocalDensity</span><span class="p">.</span><span class="n">current</span><span class="p">).</span><span class="n">toFloat</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">onGloballyPositioned</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">state</span><span class="p">.</span><span class="n">size</span> <span class="p">=</span> <span class="n">it</span><span class="p">.</span><span class="n">size</span>
</span><span class='line'>        <span class="n">state</span><span class="p">.</span><span class="n">offset</span> <span class="p">=</span> <span class="n">it</span><span class="p">.</span><span class="n">positionInWindow</span><span class="p">()</span>
</span><span class='line'>            <span class="c1">// 修复 Android 上的 WindowInsets</span>
</span><span class='line'>            <span class="p">.</span><span class="n">minus</span><span class="p">(</span><span class="n">Offset</span><span class="p">(</span><span class="n">x</span> <span class="p">=</span> <span class="m">0f</span><span class="p">,</span> <span class="n">y</span> <span class="p">=</span> <span class="n">statusBarInsets</span><span class="p">))</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*LlrCLPAEgpk7q--X7i3UsA.png" alt="Fixed window insets" /></p>

<h2>3. 剪辑出锚点的形状</h2>

<p>要剪辑形状，我们将使用 Path 和 PathOperation 。修改 hintAnchor Modifier 以接受 Shape ，它将用于在锚点周围设置所需的形状。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">fun</span> <span class="nf">Modifier</span><span class="p">.</span><span class="n">hintAnchor</span><span class="p">(</span>
</span><span class='line'>    <span class="n">state</span><span class="p">:</span> <span class="n">HintAnchorState</span><span class="p">,</span>
</span><span class='line'>    <span class="n">shape</span><span class="p">:</span> <span class="n">Shape</span> <span class="p">=</span> <span class="n">RectangleShape</span><span class="p">,</span>
</span><span class='line'><span class="p">):</span> <span class="n">Modifier</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">state</span><span class="p">.</span><span class="n">shape</span> <span class="p">=</span> <span class="n">shape</span>
</span><span class='line'>    <span class="c1">//..onGloballyPositioned</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Stable</span>
</span><span class='line'><span class="k">class</span> <span class="nc">HintAnchorState</span> <span class="k">internal</span> <span class="n">constructor</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//...其他的状态放这里</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">internal</span> <span class="k">var</span> <span class="py">shape</span><span class="p">:</span> <span class="n">Shape</span> <span class="k">by</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="n">RectangleShape</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>根据提供的形状，我们可以创建一个轮廓，用于将锚点的形状从背景中剪掉：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">internal</span> <span class="k">fun</span> <span class="nf">Modifier</span><span class="p">.</span><span class="n">overlayBackground</span><span class="p">(</span>
</span><span class='line'>    <span class="n">anchors</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">HintAnchorState</span><span class="p">&gt;,</span>
</span><span class='line'><span class="p">):</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">composed</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">backgroundBrush</span> <span class="p">=</span> <span class="n">LocalHintOverlayBrush</span><span class="p">.</span><span class="n">current</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">backgroundColor</span> <span class="p">=</span> <span class="n">LocalHintOverlayColor</span><span class="p">.</span><span class="n">current</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">layoutDirection</span> <span class="p">=</span> <span class="n">LocalLayoutDirection</span><span class="p">.</span><span class="n">current</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">density</span> <span class="p">=</span> <span class="n">LocalDensity</span><span class="p">.</span><span class="n">current</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">drawWithCache</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 准备背景路径</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">path</span> <span class="p">=</span> <span class="n">Path</span><span class="p">().</span><span class="n">apply</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">lineTo</span><span class="p">(</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="m">0f</span><span class="p">)</span>
</span><span class='line'>            <span class="n">lineTo</span><span class="p">(</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">)</span>
</span><span class='line'>            <span class="n">lineTo</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">)</span>
</span><span class='line'>            <span class="n">lineTo</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="m">0f</span><span class="p">)</span>
</span><span class='line'>            <span class="n">close</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">anchors</span><span class="p">().</span><span class="n">forEach</span> <span class="p">{</span> <span class="n">anchor</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="c1">// 为锚点准备路径</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">anchorPath</span> <span class="p">=</span> <span class="n">Path</span><span class="p">()</span>
</span><span class='line'>            <span class="n">anchorPath</span><span class="p">.</span><span class="n">addOutline</span><span class="p">(</span>
</span><span class='line'>                <span class="n">anchor</span><span class="p">.</span><span class="n">shape</span><span class="p">.</span><span class="n">createOutline</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">size</span> <span class="p">=</span> <span class="n">anchor</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">toSize</span><span class="p">(),</span>
</span><span class='line'>                    <span class="n">layoutDirection</span> <span class="p">=</span> <span class="n">layoutDirection</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">density</span> <span class="p">=</span> <span class="n">density</span><span class="p">,</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>            <span class="n">anchorPath</span><span class="p">.</span><span class="n">translate</span><span class="p">(</span><span class="n">anchor</span><span class="p">.</span><span class="n">offset</span><span class="p">)</span>
</span><span class='line'>            <span class="n">anchorPath</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// 裁剪掉锚点</span>
</span><span class='line'>            <span class="n">path</span><span class="p">.</span><span class="n">op</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">anchorPath</span><span class="p">,</span> <span class="n">PathOperation</span><span class="p">.</span><span class="n">Xor</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">onDrawWithContent</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 我们不仅仅绘制路径，而不是像以前一样绘制矩形</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">backgroundBrush</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">drawPath</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">backgroundBrush</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">drawPath</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">backgroundColor</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">drawContent</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>让我们传递 CircleShape 和 RoundedCornerShape 来看看提示现在是什么样子：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*i2dWMv3Wa9at-fzGiKm8KQ.png" alt="Clip" /></p>

<p>此时，我们知道如何绘制背景覆盖层、计算锚点的位置以及如何剪裁背景。</p>

<h2>4. 绘制提示</h2>

<p>在实际绘制之前，我们应该定义提示需要呈现哪些信息。</p>

<p>为了不强制只提供文本，我们采用slot方法。通过定义slot，我们允许使用任何所需的composables。</p>

<p>我将介绍一个新的类 Hint 来保存我们的Composable内容：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Stable</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Hint</span> <span class="k">internal</span> <span class="n">constructor</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">internal</span> <span class="k">var</span> <span class="py">content</span><span class="p">:</span> <span class="n">@Composable</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span> <span class="k">by</span> <span class="n">mutableStateOf</span><span class="p">({})</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">rememberHint</span><span class="p">(</span><span class="n">content</span><span class="p">:</span> <span class="n">@Composable</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">):</span> <span class="n">Hint</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">remember</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Hint</span><span class="p">().</span><span class="n">also</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">content</span> <span class="p">=</span> <span class="n">content</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>并将此 Hint 添加为 HintAnchorState 的一部分：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Stable</span>
</span><span class='line'><span class="k">class</span> <span class="nc">HintAnchorState</span> <span class="k">internal</span> <span class="n">constructor</span><span class="p">(</span>
</span><span class='line'>    <span class="k">internal</span> <span class="k">val</span> <span class="py">hint</span><span class="p">:</span> <span class="n">Hint</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//...其他的状态放这里</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">rememberHintAnchorState</span><span class="p">(</span><span class="n">hint</span><span class="p">:</span> <span class="n">Hint</span><span class="p">):</span> <span class="n">HintAnchorState</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">remember</span><span class="p">(</span><span class="n">hint</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">HintAnchorState</span><span class="p">(</span><span class="n">hint</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在 HintOverlay 内部，我们可以采用最简单的解决方案 — BoxWithConstraints ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">HintOverlay</span><span class="p">(</span>
</span><span class='line'>    <span class="n">anchors</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">HintAnchorState</span><span class="p">&gt;,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'>    <span class="n">BoxWithConstraints</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">fillMaxSize</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">overlayBackground</span><span class="p">(</span><span class="n">anchors</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">anchors</span><span class="p">().</span><span class="n">forEach</span> <span class="p">{</span> <span class="n">anchor</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>                <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">graphicsLayer</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">translationX</span> <span class="p">=</span> <span class="n">anchor</span><span class="p">.</span><span class="n">offset</span><span class="p">.</span><span class="n">x</span>
</span><span class='line'>                        <span class="n">translationY</span> <span class="p">=</span> <span class="n">anchor</span><span class="p">.</span><span class="n">offset</span><span class="p">.</span><span class="n">y</span> <span class="p">+</span> <span class="n">anchor</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span>
</span><span class='line'>                    <span class="p">},</span>
</span><span class='line'>            <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">anchor</span><span class="p">.</span><span class="n">hint</span><span class="p">.</span><span class="n">content</span><span class="p">()</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>修改应用程序内容：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">topAppBarHint</span> <span class="p">=</span> <span class="n">rememberHint</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">OutlinedButton</span><span class="p">(</span><span class="n">onClick</span> <span class="p">=</span> <span class="p">{})</span> <span class="p">{</span> <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Hint for TopAppBar&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">val</span> <span class="py">topAppBarActionHintAnchor</span> <span class="p">=</span> <span class="n">rememberHintAnchorState</span><span class="p">(</span><span class="n">topAppBarHint</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="py">actionHint</span> <span class="p">=</span> <span class="n">rememberHint</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Hint for Action&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">val</span> <span class="py">actionHintAnchor</span> <span class="p">=</span> <span class="n">rememberHintAnchorState</span><span class="p">(</span><span class="n">actionHint</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="py">bottomNavigationHint</span> <span class="p">=</span> <span class="n">rememberHint</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Row</span><span class="p">(</span>
</span><span class='line'>        <span class="n">verticalAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">CenterVertically</span><span class="p">,</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Spacer</span><span class="p">(</span><span class="n">Modifier</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">32.</span><span class="n">dp</span><span class="p">).</span><span class="n">background</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">Magenta</span><span class="p">,</span> <span class="n">CircleShape</span><span class="p">))</span>
</span><span class='line'>        <span class="n">Spacer</span><span class="p">(</span><span class="n">Modifier</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">8.</span><span class="n">dp</span><span class="p">))</span>
</span><span class='line'>        <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Hint for BottomNavigation&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">val</span> <span class="py">bottomNavigationHintAnchor</span> <span class="p">=</span> <span class="n">rememberHintAnchorState</span><span class="p">(</span><span class="n">bottomNavigationHint</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>结果如下：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*mMenE2fp2jph6YUBlxX4pA.png" alt="Hint for action" /></p>

<p>让我们引入一个应用程序特定的代码来绘制提示背景。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">rememberHintContainer</span><span class="p">(</span><span class="n">content</span><span class="p">:</span> <span class="n">@Composable</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">):</span> <span class="n">Hint</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">rememberHint</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="n">top</span> <span class="p">=</span> <span class="m">8.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">Yellow</span><span class="p">,</span> <span class="n">shape</span> <span class="p">=</span> <span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">16.</span><span class="n">dp</span><span class="p">))</span>
</span><span class='line'>                <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">16.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>        <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">CompositionLocalProvider</span><span class="p">(</span>
</span><span class='line'>                <span class="n">LocalTextStyle</span> <span class="n">provides</span> <span class="n">TextStyle</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Black</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">fontSize</span> <span class="p">=</span> <span class="m">12.</span><span class="n">sp</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">fontWeight</span> <span class="p">=</span> <span class="n">FontWeight</span><span class="p">.</span><span class="n">Light</span><span class="p">,</span>
</span><span class='line'>                <span class="p">),</span>
</span><span class='line'>            <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">content</span><span class="p">()</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*xn8pxlU_nUQvywbtqVwUtw.png" alt="Hint2" /></p>

<p>我们遇到了 2 个问题：</p>

<ol>
<li>水平对齐，提示应与其锚点居中对齐。</li>
<li>BottomNavigation 的提示超出了屏幕范围。</li>
</ol>


<p>让我们改用自定义布局并修复这些问题。</p>

<p>要测量和布局多个可组合项，请使用 Layout。此composable允许我们手动测量和布局子项。所有更高级别的布局（如 Column 和 Row）都是使用 Layout 实现的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">internal</span> <span class="k">fun</span> <span class="nf">HintsContainer</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="n">anchors</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">HintAnchorState</span><span class="p">&gt;,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">anchors</span> <span class="p">=</span> <span class="n">anchors</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Layout</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">overlayBackground</span><span class="p">(</span><span class="n">anchors</span><span class="p">),</span>
</span><span class='line'>        <span class="n">content</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">anchors</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">hint</span><span class="p">.</span><span class="n">content</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span> <span class="n">measurables</span><span class="p">,</span> <span class="n">constraints</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="c1">// 测量每一个提示</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">placeables</span> <span class="p">=</span> <span class="n">measurables</span><span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">measurable</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="n">measurable</span><span class="p">.</span><span class="n">measure</span><span class="p">(</span>
</span><span class='line'>                <span class="n">constraints</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="n">minWidth</span> <span class="p">=</span> <span class="m">0</span><span class="p">,</span> <span class="n">minHeight</span> <span class="p">=</span> <span class="m">0</span><span class="p">)</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 将布局尺寸设置得尽可能大</span>
</span><span class='line'>        <span class="n">layout</span><span class="p">(</span><span class="n">constraints</span><span class="p">.</span><span class="n">maxWidth</span><span class="p">,</span> <span class="n">constraints</span><span class="p">.</span><span class="n">maxHeight</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 将每个提示相对于其锚点放置</span>
</span><span class='line'>            <span class="n">placeables</span><span class="p">.</span><span class="n">forEachIndexed</span> <span class="p">{</span> <span class="n">index</span><span class="p">,</span> <span class="n">placeable</span> <span class="p">-&gt;</span>
</span><span class='line'>                <span class="k">val</span> <span class="py">anchor</span> <span class="p">=</span> <span class="n">anchors</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// 将此提示居中对齐</span>
</span><span class='line'>                <span class="k">val</span> <span class="py">x</span> <span class="p">=</span> <span class="p">(</span><span class="n">anchor</span><span class="p">.</span><span class="n">offset</span><span class="p">.</span><span class="n">x</span><span class="p">.</span><span class="n">toInt</span><span class="p">()</span> <span class="p">-</span> <span class="p">(</span><span class="n">placeable</span><span class="p">.</span><span class="n">width</span> <span class="p">-</span> <span class="n">anchor</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">)</span> <span class="p">/</span> <span class="m">2</span><span class="p">)</span>
</span><span class='line'>                    <span class="c1">// 修复超出屏幕的坐标</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">coerceAtLeast</span><span class="p">(</span><span class="m">0</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">coerceAtMost</span><span class="p">(</span><span class="n">constraints</span><span class="p">.</span><span class="n">maxWidth</span> <span class="p">-</span> <span class="n">placeable</span><span class="p">.</span><span class="n">width</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// 把这个提示放在它的锚点下面</span>
</span><span class='line'>                <span class="k">var</span> <span class="py">y</span> <span class="p">=</span> <span class="p">(</span><span class="n">anchor</span><span class="p">.</span><span class="n">offset</span><span class="p">.</span><span class="n">y</span><span class="p">.</span><span class="n">toInt</span><span class="p">()</span> <span class="p">+</span> <span class="n">anchor</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">)</span>
</span><span class='line'>                    <span class="c1">// 如果超出屏幕，则修复 y 坐标</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">coerceAtMost</span><span class="p">(</span><span class="n">constraints</span><span class="p">.</span><span class="n">maxHeight</span> <span class="p">-</span> <span class="n">placeable</span><span class="p">.</span><span class="n">height</span><span class="p">)</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">y</span> <span class="p">&lt;</span> <span class="n">anchor</span><span class="p">.</span><span class="n">offset</span><span class="p">.</span><span class="n">y</span> <span class="p">+</span> <span class="n">anchor</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="c1">// 提示与锚点重叠，请将此提示放在其锚点上方</span>
</span><span class='line'>                    <span class="n">y</span> <span class="p">=</span> <span class="n">anchor</span><span class="p">.</span><span class="n">offset</span><span class="p">.</span><span class="n">y</span><span class="p">.</span><span class="n">toInt</span><span class="p">()</span> <span class="p">-</span> <span class="n">placeable</span><span class="p">.</span><span class="n">height</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">placeable</span><span class="p">.</span><span class="n">placeRelative</span><span class="p">(</span><span class="n">x</span> <span class="p">=</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="p">=</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*syuJkuAd-_BgiYfFP8bKgQ.png" alt="Hint3" /></p>

<p>因为我们允许传递任何可组合项作为提示，所以调用者可以完全控制提示的外观，例如，我们可以只使用 Text ，或者使用包含许多子项的复杂 Row 。</p>

<h2>5. 如何控制提示？</h2>

<p>我们静态地添加了提示以将其显示在屏幕上。但真正产品应用程序并非如此。让我们引入 HintController 来控制何时显示提示。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Stable</span>
</span><span class='line'><span class="k">class</span> <span class="nc">HintController</span> <span class="k">internal</span> <span class="n">constructor</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">internal</span> <span class="k">var</span> <span class="py">hint</span> <span class="k">by</span> <span class="n">mutableStateOf</span><span class="p">&lt;</span><span class="n">HintAnchorState</span><span class="p">?&gt;(</span><span class="k">null</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">show</span><span class="p">(</span><span class="n">hint</span><span class="p">:</span> <span class="n">HintAnchorState</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">hint</span> <span class="p">=</span> <span class="n">hint</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">rememberHintController</span><span class="p">():</span> <span class="n">HintController</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">controller</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">HintController</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">controller</span><span class="p">.</span><span class="n">hint</span><span class="o">?.</span><span class="n">let</span> <span class="p">{</span> <span class="n">hint</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="n">HintOverlay</span><span class="p">(</span><span class="n">anchor</span> <span class="p">=</span> <span class="n">hint</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">controller</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>修改应用程序内容，以便在我们点击锚点时显示提示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">hintController</span> <span class="p">=</span> <span class="n">rememberHintController</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">IconButton</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>        <span class="p">.</span><span class="n">hintAnchor</span><span class="p">(</span><span class="n">topAppBarActionHintAnchor</span><span class="p">,</span> <span class="n">CircleShape</span><span class="p">),</span>
</span><span class='line'>    <span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">hintController</span><span class="p">.</span><span class="n">show</span><span class="p">(</span><span class="n">topAppBarActionHintAnchor</span><span class="p">)</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">BottomNavigationItem</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>        <span class="p">.</span><span class="n">hintAnchor</span><span class="p">(</span>
</span><span class='line'>            <span class="n">bottomNavigationHintAnchor</span><span class="p">,</span>
</span><span class='line'>            <span class="n">shape</span> <span class="p">=</span> <span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">50f</span><span class="p">),</span>
</span><span class='line'>        <span class="p">),</span>
</span><span class='line'>    <span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">hintController</span><span class="p">.</span><span class="n">show</span><span class="p">(</span><span class="n">bottomNavigationHintAnchor</span><span class="p">)</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">Button</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>        <span class="p">.</span><span class="n">hintAnchor</span><span class="p">(</span><span class="n">actionHintAnchor</span><span class="p">,</span> <span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">16.</span><span class="n">dp</span><span class="p">))</span>
</span><span class='line'>        <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">4.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>    <span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">hintController</span><span class="p">.</span><span class="n">show</span><span class="p">(</span><span class="n">actionHintAnchor</span><span class="p">)</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>注意：我们不再需要显示的 HintOverlay ，它现在变得内置了。</p></blockquote>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*jIOTXOSnHVeL_jjyEx1gdg.png" alt="Control" /></p>

<p>现在我们可以逐一显示提示，但还有两个部分缺失：如何关闭提示，以及如何覆盖覆盖颜色。</p>

<p>对提示控制器进行更改以允许传递覆盖颜色：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">rememberHintController</span><span class="p">(</span><span class="n">overlay</span><span class="p">:</span> <span class="n">Brush</span><span class="p">):</span> <span class="n">HintController</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">rememberHintController</span><span class="p">(</span><span class="n">overlay</span> <span class="p">=</span> <span class="n">LocalHintOverlayBrush</span> <span class="n">provides</span> <span class="n">overlay</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">rememberHintController</span><span class="p">(</span><span class="n">overlay</span><span class="p">:</span> <span class="n">Color</span> <span class="p">=</span> <span class="n">HintOverlayColorDefault</span><span class="p">):</span> <span class="n">HintController</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">rememberHintController</span><span class="p">(</span><span class="n">overlay</span> <span class="p">=</span> <span class="n">LocalHintOverlayColor</span> <span class="n">provides</span> <span class="n">overlay</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">rememberHintController</span><span class="p">(</span><span class="n">overlay</span><span class="p">:</span> <span class="n">ProvidedValue</span><span class="p">&lt;*&gt;):</span> <span class="n">HintController</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">controller</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">HintController</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">controller</span><span class="p">.</span><span class="n">hint</span><span class="o">?.</span><span class="n">let</span> <span class="p">{</span> <span class="n">hint</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="n">CompositionLocalProvider</span><span class="p">(</span><span class="n">overlay</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">HintOverlay</span><span class="p">(</span><span class="n">anchor</span> <span class="p">=</span> <span class="n">hint</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">controller</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>为了消除我们的提示，让我们引入以下变化：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Stable</span>
</span><span class='line'><span class="k">class</span> <span class="nc">HintController</span> <span class="k">internal</span> <span class="n">constructor</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">internal</span> <span class="k">var</span> <span class="py">hint</span> <span class="k">by</span> <span class="n">mutableStateOf</span><span class="p">&lt;</span><span class="n">HintAnchorState</span><span class="p">?&gt;(</span><span class="k">null</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">show</span><span class="p">(</span><span class="n">hint</span><span class="p">:</span> <span class="n">HintAnchorState</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">hint</span> <span class="p">=</span> <span class="n">hint</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">dismiss</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">hint</span> <span class="p">=</span> <span class="k">null</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们使用 Popup 作为覆盖层的容器，如果用户点击 Android 上的返回按钮(BACK)，Popup 就会被关闭。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">internal</span> <span class="k">fun</span> <span class="nf">HintOverlay</span><span class="p">(</span>
</span><span class='line'>    <span class="n">anchor</span><span class="p">:</span> <span class="n">HintAnchorState</span><span class="p">,</span>
</span><span class='line'>    <span class="n">onDismiss</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Popup</span><span class="p">(</span>
</span><span class='line'>        <span class="n">onDismissRequest</span> <span class="p">=</span> <span class="n">onDismiss</span><span class="p">,</span>
</span><span class='line'>        <span class="c1">// 设置可聚焦以处理按压back事件</span>
</span><span class='line'>        <span class="n">properties</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">PopupProperties</span><span class="p">(</span><span class="n">focusable</span> <span class="p">=</span> <span class="k">true</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//...在这里画出我们的提示</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">internal</span> <span class="k">fun</span> <span class="nf">HintsContainer</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="n">anchor</span><span class="p">:</span> <span class="n">HintAnchorState</span><span class="p">,</span>
</span><span class='line'>    <span class="n">onDismiss</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Layout</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">overlayBackground</span><span class="p">(</span><span class="n">anchor</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">clickable</span><span class="p">(</span>
</span><span class='line'>                <span class="n">interactionSource</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>                <span class="c1">// 禁用ripple</span>
</span><span class='line'>                <span class="n">indication</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>                <span class="n">onClick</span> <span class="p">=</span> <span class="n">onDismiss</span><span class="p">,</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>结果演示视频 <a href="https://youtu.be/eo49PKlhO5Y">https://youtu.be/eo49PKlhO5Y</a></p>

<p>现在，HintController 允许我们按时间显示一个提示，但如果我们想按顺序显示多个提示，则没有实际的队列。</p>

<p>可以扩展 HintController 并添加暂停修饰符以知道提示的显示时间（例如，在显示提示后立即执行某项操作）。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Stable</span>
</span><span class='line'><span class="k">class</span> <span class="nc">HintController</span> <span class="k">internal</span> <span class="n">constructor</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">var</span> <span class="py">queue</span> <span class="p">=</span> <span class="n">mutableStateListOf</span><span class="p">&lt;</span><span class="n">HintAnchorState</span><span class="p">&gt;()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">internal</span> <span class="k">val</span> <span class="py">hint</span><span class="p">:</span> <span class="n">HintAnchorState</span><span class="p">?</span> <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="n">queue</span><span class="p">.</span><span class="n">firstOrNull</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">pendingRequests</span> <span class="p">=</span> <span class="n">mutableMapOf</span><span class="p">&lt;</span><span class="n">HintAnchorState</span><span class="p">,</span> <span class="n">Continuation</span><span class="p">&lt;</span><span class="n">Unit</span><span class="p">&gt;&gt;()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">show</span><span class="p">(</span><span class="n">hint</span><span class="p">:</span> <span class="n">HintAnchorState</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">suspendCoroutine</span> <span class="p">{</span> <span class="n">continuation</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="n">pendingRequests</span><span class="p">[</span><span class="n">hint</span><span class="p">]</span> <span class="p">=</span> <span class="n">continuation</span>
</span><span class='line'>            <span class="n">queue</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">hint</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">show</span><span class="p">(</span><span class="k">vararg</span> <span class="n">hint</span><span class="p">:</span> <span class="n">HintAnchorState</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">show</span><span class="p">(</span><span class="n">hint</span><span class="p">.</span><span class="n">toList</span><span class="p">())</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">show</span><span class="p">(</span><span class="n">hints</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">HintAnchorState</span><span class="p">&gt;)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">suspendCoroutine</span> <span class="p">{</span> <span class="n">continuation</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="n">pendingRequests</span><span class="p">[</span><span class="n">hints</span><span class="p">.</span><span class="n">last</span><span class="p">()]</span> <span class="p">=</span> <span class="n">continuation</span>
</span><span class='line'>            <span class="n">queue</span><span class="p">.</span><span class="n">addAll</span><span class="p">(</span><span class="n">hints</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">internal</span> <span class="k">fun</span> <span class="nf">onDismissed</span><span class="p">(</span><span class="n">hint</span><span class="p">:</span> <span class="n">HintAnchorState</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">pendingRequests</span><span class="p">[</span><span class="n">hint</span><span class="p">]</span><span class="o">?.</span><span class="n">let</span> <span class="p">{</span> <span class="n">continuation</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="n">continuation</span><span class="p">.</span><span class="n">resume</span><span class="p">(</span><span class="n">Unit</span><span class="p">)</span>
</span><span class='line'>            <span class="n">pendingRequests</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="n">hint</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">queue</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="n">hint</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">dismiss</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">pendingRequests</span><span class="p">.</span><span class="n">values</span>
</span><span class='line'>            <span class="p">.</span><span class="n">forEach</span> <span class="p">{</span> <span class="n">continuation</span> <span class="p">-&gt;</span>
</span><span class='line'>                <span class="n">continuation</span><span class="p">.</span><span class="n">resumeWithException</span><span class="p">(</span><span class="n">CancellationException</span><span class="p">(</span><span class="s">&quot;Hint was dismissed&quot;</span><span class="p">))</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="n">pendingRequests</span><span class="p">.</span><span class="n">clear</span><span class="p">()</span>
</span><span class='line'>        <span class="n">queue</span><span class="p">.</span><span class="n">clear</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在为了在应用程序内部显示提示，我们需要一个 CoroutineScope ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">coroutineScope</span> <span class="p">=</span> <span class="n">rememberCoroutineScope</span><span class="p">()</span>
</span><span class='line'><span class="k">val</span> <span class="py">hintController</span> <span class="p">=</span> <span class="n">rememberHintController</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 现在我们可以从提示本身中忽略所有待处理的提示</span>
</span><span class='line'><span class="k">val</span> <span class="py">topAppBarHint</span> <span class="p">=</span> <span class="n">rememberHintContainer</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">OutlinedButton</span><span class="p">(</span>
</span><span class='line'>        <span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">hintController</span><span class="p">.</span><span class="n">dismiss</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span> <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Hint for TopAppBar&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 显示 1 条提示</span>
</span><span class='line'><span class="n">BottomNavigationItem</span><span class="p">(</span>
</span><span class='line'>    <span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">coroutineScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">hintController</span><span class="p">.</span><span class="n">show</span><span class="p">(</span><span class="n">bottomNavigationHintAnchor</span><span class="p">)</span>
</span><span class='line'>            <span class="n">scaffoldState</span><span class="p">.</span><span class="n">snackbarHostState</span><span class="p">.</span><span class="n">showSnackbar</span><span class="p">(</span><span class="s">&quot;One hint was shown&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 连续显示多个提示</span>
</span><span class='line'><span class="n">Button</span><span class="p">(</span>
</span><span class='line'>    <span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">coroutineScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">hintController</span><span class="p">.</span><span class="n">show</span><span class="p">(</span>
</span><span class='line'>                <span class="n">topAppBarActionHintAnchor</span><span class="p">,</span>
</span><span class='line'>                <span class="n">actionHintAnchor</span><span class="p">,</span>
</span><span class='line'>                <span class="n">bottomNavigationHintAnchor</span><span class="p">,</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>            <span class="n">scaffoldState</span><span class="p">.</span><span class="n">snackbarHostState</span><span class="p">.</span><span class="n">showSnackbar</span><span class="p">(</span><span class="s">&quot;Many hints were shown&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><strong>注意：</strong> 如果我们通过调用 hintController.dismiss() 来关闭提示，则 hintController.show 之后的代码将不会被调用。</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">coroutineScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">hintController</span><span class="p">.</span><span class="n">show</span><span class="p">(</span><span class="n">topAppBarActionHintAnchor</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">// 如果通过调用 hintController.dismiss 关闭了之前的提示，则不会显示 Snackbar</span>
</span><span class='line'>    <span class="n">scaffoldState</span><span class="p">.</span><span class="n">snackbarHostState</span><span class="p">.</span><span class="n">showSnackbar</span><span class="p">(</span><span class="s">&quot;One hint was shown&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最终结果如这个视频演示 <a href="https://youtu.be/tyZUNJLEVxQ">https://youtu.be/tyZUNJLEVxQ</a>：我们可以显示单个提示，也可以显示提示列表。</p>

<p>由于该项目使用 Compose Multiplatform，我们可以针对不同的目标运行该应用程序：</p>

<ul>
<li>Android结果演示 <a href="https://youtu.be/BVBCipnbIUc">https://youtu.be/BVBCipnbIUc</a></li>
<li>iOS结果演示 <a href="https://youtu.be/Z1uasddgqwo">https://youtu.be/Z1uasddgqwo</a></li>
</ul>


<h2>总结</h2>

<p>Compose 和 Kotlin Multiplatform 是一个强大的组合，它允许我们使用 Kotlin 来实现 UI 和业务逻辑。CMP 库仅与Jetpack Compose Android 项目完全兼容。</p>

<p>可以在 GitHub 上查看我的repo：<a href="https://github.com/vitoksmile/ComposeHints">https://github.com/vitoksmile/ComposeHints</a>。</p>

<p>感谢你的阅读，期待在 GitHub 上获得你的Star :)。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[实战：在Compose中绘制睡眠时间线]]></title>
    <link href="https://alexhilton.github.io/blog/2025/03/26/draw-sleep-timeline-graph-in-compose/"/>
    <updated>2025-03-26T21:41:40+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/03/26/draw-sleep-timeline-graph-in-compose</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自<a href="https://proandroiddev.com/sleep-timeline-graph-in-compose-15c99f9a4af0">Draw sleep timeline graph in Compose</a>，原文由<a href="https://medium.com/@vitoksmile">Viktor Mykhailiv</a>发布于2025年1月31日。</p></blockquote>

<p><strong>译者按：</strong> 我们在前面的<a href="https://juejin.cn/column/7367555191338467337">降Compose十八掌</a>系列中讲解过在Compose自定义绘制的方法，可以先温习一下<a href="https://juejin.cn/post/7381826917086920742">上一篇文章</a>。这篇文章是提升自定义绘制技巧的一个非常好的实战例子。</p>

<p><a href="https://alexhilton.github.io/blog/2025/03/26/draw-sleep-timeline-graph-in-compose/"><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*OUAsgvNoNx9VpSk9Eyqgzg.jpeg" title="auto auto" ></a></p>

<!-- more -->


<p>当内置组件不能完全满足我们的应用需求时，自定义绘图非常有用。本文提供了创建自定义睡眠时间线图表的指南，类似于你在<a href="https://play.google.com/store/apps/details?id=com.fitbit.FitbitMobile">Fitbit 应用</a>中找到的图表。</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*cA9uPgAG29Gu2AhajArq9w.jpeg" alt="Screenshots from Fitbit Android app" /></p>

<h2>在 Compose 中如何绘图？</h2>

<p>要开始在 Compose 中绘图，我们可以使用绘图Modifier或 Canvas可组合函数，这为我们提供了 DrawScope — 一种声明式、无状态的API，用于绘制形状和路径，而无需消费者维护底层状态。DrawScope实现还提供了尺寸信息，并且变幻是相对于本地平移完成的。</p>

<blockquote><p><strong>注意：</strong> Jetpack Compose（仅限 Android）和 Compose Multiplatform（桌面、Android、iOS、Web）具有类似的绘图 API。下面的屏幕截图是在桌面（macOS）上制作的，但所有平台上的结果都是相同的（查看最后一张屏幕截图）。</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">Canvas</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">rotate</span><span class="p">(</span><span class="n">degrees</span> <span class="p">=</span> <span class="m">45F</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">drawRect</span><span class="p">(</span>
</span><span class='line'>            <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Gray</span><span class="p">,</span>
</span><span class='line'>            <span class="n">topLeft</span> <span class="p">=</span> <span class="n">Offset</span><span class="p">(</span><span class="n">x</span> <span class="p">=</span> <span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="p">/</span> <span class="m">3F</span><span class="p">,</span> <span class="n">y</span> <span class="p">=</span> <span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="p">/</span> <span class="m">3F</span><span class="p">),</span>
</span><span class='line'>            <span class="n">size</span> <span class="p">=</span> <span class="n">size</span> <span class="p">/</span> <span class="m">3F</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*_qkChFEn25kC_cfgiRXgKg.png" alt="Compose中的自定义绘制" /></p>

<h2>啥是睡眠时间表？</h2>

<p>我们可以在 Health Connect 中读取或写入睡眠数据。睡眠数据显示为会话，可分为以下睡眠阶段：</p>

<ul>
<li>清醒：用户在睡眠周期内清醒。</li>
<li>浅睡眠：用户处于浅睡眠周期。</li>
<li>深睡眠：用户处于深睡眠周期。</li>
<li>REM：用户处于 REM 睡眠周期。</li>
</ul>


<p>这些值表示用户在一定时间范围内经历的睡眠类型。SleepSessionRecord 数据类型包含两部分：</p>

<ol>
<li>整个睡眠过程，涵盖整个睡眠时间。</li>
<li>睡眠过程中的各个阶段，例如浅睡眠或深睡眠。</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">record</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">SleepSessionRecord</span><span class="p">(</span>
</span><span class='line'>        <span class="n">startTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-28T21:10:10Z&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="n">endTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-29T07:32:13Z&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="n">startZoneOffset</span> <span class="p">=</span> <span class="n">UtcOffset</span><span class="p">(</span><span class="n">hours</span> <span class="p">=</span> <span class="m">2</span><span class="p">),</span>
</span><span class='line'>        <span class="n">endZoneOffset</span> <span class="p">=</span> <span class="n">UtcOffset</span><span class="p">(</span><span class="n">hours</span> <span class="p">=</span> <span class="m">2</span><span class="p">),</span>
</span><span class='line'>        <span class="n">stages</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span>
</span><span class='line'>            <span class="n">SleepSessionRecord</span><span class="p">.</span><span class="n">Stage</span><span class="p">(</span>
</span><span class='line'>                <span class="n">startTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-28T21:10:10Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="n">endTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-28T23:15:13Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="k">type</span> <span class="p">=</span> <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">Light</span><span class="p">,</span>
</span><span class='line'>            <span class="p">),</span>
</span><span class='line'>            <span class="n">SleepSessionRecord</span><span class="p">.</span><span class="n">Stage</span><span class="p">(</span>
</span><span class='line'>                <span class="n">startTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-28T23:15:13Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="n">endTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-29T01:56:32Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="k">type</span> <span class="p">=</span> <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">Deep</span><span class="p">,</span>
</span><span class='line'>            <span class="p">),</span>
</span><span class='line'>            <span class="n">SleepSessionRecord</span><span class="p">.</span><span class="n">Stage</span><span class="p">(</span>
</span><span class='line'>                <span class="n">startTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-29T01:56:13Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="n">endTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-29T03:16:22Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="k">type</span> <span class="p">=</span> <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">Light</span><span class="p">,</span>
</span><span class='line'>            <span class="p">),</span>
</span><span class='line'>            <span class="n">SleepSessionRecord</span><span class="p">.</span><span class="n">Stage</span><span class="p">(</span>
</span><span class='line'>                <span class="n">startTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-29T03:16:22Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="n">endTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-29T04:32:13Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="k">type</span> <span class="p">=</span> <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">REM</span><span class="p">,</span>
</span><span class='line'>            <span class="p">),</span>
</span><span class='line'>            <span class="n">SleepSessionRecord</span><span class="p">.</span><span class="n">Stage</span><span class="p">(</span>
</span><span class='line'>                <span class="n">startTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-29T04:32:13Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="n">endTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-29T05:12:56Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="k">type</span> <span class="p">=</span> <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">Deep</span><span class="p">,</span>
</span><span class='line'>            <span class="p">),</span>
</span><span class='line'>            <span class="n">SleepSessionRecord</span><span class="p">.</span><span class="n">Stage</span><span class="p">(</span>
</span><span class='line'>                <span class="n">startTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-29T05:12:56Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="n">endTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-29T07:32:13Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="k">type</span> <span class="p">=</span> <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">Light</span><span class="p">,</span>
</span><span class='line'>            <span class="p">),</span>
</span><span class='line'>            <span class="n">SleepSessionRecord</span><span class="p">.</span><span class="n">Stage</span><span class="p">(</span>
</span><span class='line'>                <span class="n">startTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-28T22:11:56Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="n">endTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-28T22:17:13Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="k">type</span> <span class="p">=</span> <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">Awake</span><span class="p">,</span>
</span><span class='line'>            <span class="p">),</span>
</span><span class='line'>            <span class="n">SleepSessionRecord</span><span class="p">.</span><span class="n">Stage</span><span class="p">(</span>
</span><span class='line'>                <span class="n">startTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-28T22:39:56Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="n">endTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-28T22:51:13Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="k">type</span> <span class="p">=</span> <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">Awake</span><span class="p">,</span>
</span><span class='line'>            <span class="p">),</span>
</span><span class='line'>            <span class="n">SleepSessionRecord</span><span class="p">.</span><span class="n">Stage</span><span class="p">(</span>
</span><span class='line'>                <span class="n">startTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-29T04:47:56Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="n">endTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-29T04:54:13Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="k">type</span> <span class="p">=</span> <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">Awake</span><span class="p">,</span>
</span><span class='line'>            <span class="p">),</span>
</span><span class='line'>        <span class="p">),</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>需要一点数学计算</h2>

<p>在睡眠期间，我们可以在不同时刻多次处于同一阶段。我们需要计算相对于睡眠的起点和终点。</p>

<p>要在 Compose 中绘制矩形，我们需要 topOffset 和 size。</p>

<p><img src="" alt="Math" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">calculate</span><span class="p">(</span>
</span><span class='line'>    <span class="n">canvasSize</span><span class="p">:</span> <span class="n">Size</span><span class="p">,</span>
</span><span class='line'>    <span class="n">recordStartTime</span><span class="p">:</span> <span class="n">Instant</span><span class="p">,</span>
</span><span class='line'>    <span class="n">recordEndTime</span><span class="p">:</span> <span class="n">Instant</span><span class="p">,</span>
</span><span class='line'>    <span class="n">stages</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">SleepSessionRecord</span><span class="p">.</span><span class="n">Stage</span><span class="p">&gt;,</span>
</span><span class='line'><span class="p">):</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">SleepStageDrawPoint</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">totalDuration</span> <span class="p">=</span> <span class="p">(</span><span class="n">recordEndTime</span> <span class="p">-</span> <span class="n">recordStartTime</span><span class="p">).</span><span class="n">inWholeSeconds</span><span class="p">.</span><span class="n">toFloat</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">coerceAtLeast</span><span class="p">(</span><span class="m">1f</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">stages</span><span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">stage</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">stageOffset</span> <span class="p">=</span>
</span><span class='line'>            <span class="p">(</span><span class="n">stage</span><span class="p">.</span><span class="n">startTime</span> <span class="p">-</span> <span class="n">recordStartTime</span><span class="p">).</span><span class="n">inWholeSeconds</span> <span class="p">/</span> <span class="n">totalDuration</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">stageDuration</span> <span class="p">=</span>
</span><span class='line'>            <span class="p">(</span><span class="n">stage</span><span class="p">.</span><span class="n">endTime</span> <span class="p">-</span> <span class="n">stage</span><span class="p">.</span><span class="n">startTime</span><span class="p">).</span><span class="n">inWholeSeconds</span><span class="p">.</span><span class="n">toFloat</span><span class="p">()</span> <span class="p">/</span> <span class="n">totalDuration</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">SleepStageDrawPoint</span><span class="p">(</span>
</span><span class='line'>            <span class="n">topLeft</span> <span class="p">=</span> <span class="n">Offset</span><span class="p">(</span><span class="n">x</span> <span class="p">=</span> <span class="n">canvasSize</span><span class="p">.</span><span class="n">width</span> <span class="p">*</span> <span class="n">stageOffset</span><span class="p">,</span> <span class="n">y</span> <span class="p">=</span> <span class="m">0f</span><span class="p">),</span>
</span><span class='line'>            <span class="n">size</span> <span class="p">=</span> <span class="n">canvasSize</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="n">width</span> <span class="p">=</span> <span class="n">canvasSize</span><span class="p">.</span><span class="n">width</span> <span class="p">*</span> <span class="n">stageDuration</span><span class="p">),</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>绘制</h2>

<p>让我们构建自定义 Canvas 来绘制睡眠过程的一个阶段，例如深度睡眠。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">SleepSessionCanvas</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="n">record</span><span class="p">:</span> <span class="n">SleepSessionRecord</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Spacer</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">.</span><span class="n">drawWithCache</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">points</span> <span class="p">=</span> <span class="n">calculate</span><span class="p">(</span>
</span><span class='line'>                <span class="n">canvasSize</span> <span class="p">=</span> <span class="n">size</span><span class="p">,</span>
</span><span class='line'>                <span class="n">recordStartTime</span> <span class="p">=</span> <span class="n">record</span><span class="p">.</span><span class="n">startTime</span><span class="p">,</span>
</span><span class='line'>                <span class="n">recordEndTime</span> <span class="p">=</span> <span class="n">record</span><span class="p">.</span><span class="n">endTime</span><span class="p">,</span>
</span><span class='line'>                <span class="n">stages</span> <span class="p">=</span> <span class="n">record</span><span class="p">.</span><span class="n">stages</span><span class="p">.</span><span class="n">filter</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="k">type</span> <span class="p">==</span> <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">Deep</span> <span class="p">},</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">onDrawWithContent</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// 画背景</span>
</span><span class='line'>                <span class="n">drawRoundRect</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">LightGray</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">topLeft</span> <span class="p">=</span> <span class="n">Offset</span><span class="p">(</span><span class="n">x</span> <span class="p">=</span> <span class="m">0f</span><span class="p">,</span> <span class="n">y</span> <span class="p">=</span> <span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="p">/</span> <span class="m">4f</span><span class="p">),</span>
</span><span class='line'>                    <span class="n">size</span> <span class="p">=</span> <span class="n">size</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="n">height</span> <span class="p">=</span> <span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="p">/</span> <span class="m">2f</span><span class="p">),</span>
</span><span class='line'>                    <span class="n">cornerRadius</span> <span class="p">=</span> <span class="n">CornerRadius</span><span class="p">(</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="p">/</span> <span class="m">2f</span><span class="p">),</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// 绘制阶段点</span>
</span><span class='line'>                <span class="n">points</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span> <span class="n">point</span> <span class="p">-&gt;</span>
</span><span class='line'>                    <span class="n">drawRect</span><span class="p">(</span>
</span><span class='line'>                        <span class="n">topLeft</span> <span class="p">=</span> <span class="n">point</span><span class="p">.</span><span class="n">topLeft</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">size</span> <span class="p">=</span> <span class="n">point</span><span class="p">.</span><span class="n">size</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">xFF673AB7</span><span class="p">),</span>
</span><span class='line'>                    <span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果我们使用之前定义的睡眠会话运行项目，我们将看到 3 个矩形：1 个灰色矩形表示背景，2 个紫色矩形表示深度睡眠阶段。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">SleepSessionCanvas</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>        <span class="p">.</span><span class="n">fillMaxWidth</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">height</span><span class="p">(</span><span class="m">320.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">16.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>    <span class="n">record</span> <span class="p">=</span> <span class="n">record</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*ANITvvaUEuuwwcACzY21qA.png" alt="深度睡眠阶段" /></p>

<p>为了绘制睡眠过程的所有阶段（清醒、快速眼动、浅睡眠和深睡眠），我们需要进行一些调整，将每个阶段类型垂直绘制为列组件，办法是逐行绘制并对下一行应用一些偏移量（offset）。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">SleepSessionCanvas</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="n">record</span><span class="p">:</span> <span class="n">SleepSessionRecord</span><span class="p">,</span>
</span><span class='line'>    <span class="n">stageHeight</span><span class="p">:</span> <span class="n">Dp</span> <span class="p">=</span> <span class="m">48.</span><span class="n">dp</span><span class="p">,</span>
</span><span class='line'>    <span class="n">stagesSpacing</span><span class="p">:</span> <span class="n">Dp</span> <span class="p">=</span> <span class="m">16.</span><span class="n">dp</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">colors</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">mapOf</span><span class="p">(</span>
</span><span class='line'>            <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">Awake</span> <span class="n">to</span> <span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">xFFFF9800</span><span class="p">),</span>
</span><span class='line'>            <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">Light</span> <span class="n">to</span> <span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">xFF2196F3</span><span class="p">),</span>
</span><span class='line'>            <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">Deep</span> <span class="n">to</span> <span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">xFF673AB7</span><span class="p">),</span>
</span><span class='line'>            <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">REM</span> <span class="n">to</span> <span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">xFF795548</span><span class="p">),</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">stageHeightPx</span> <span class="p">=</span> <span class="n">with</span><span class="p">(</span><span class="n">LocalDensity</span><span class="p">.</span><span class="n">current</span><span class="p">)</span> <span class="p">{</span> <span class="n">stageHeight</span><span class="p">.</span><span class="n">toPx</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">stagesSpacingPx</span> <span class="p">=</span> <span class="n">with</span><span class="p">(</span><span class="n">LocalDensity</span><span class="p">.</span><span class="n">current</span><span class="p">)</span> <span class="p">{</span> <span class="n">stagesSpacing</span><span class="p">.</span><span class="n">toPx</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Spacer</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">requiredHeight</span><span class="p">(</span><span class="n">stageHeight</span> <span class="p">*</span> <span class="n">colors</span><span class="p">.</span><span class="n">size</span> <span class="p">+</span> <span class="n">stagesSpacing</span> <span class="p">*</span> <span class="p">(</span><span class="n">colors</span><span class="p">.</span><span class="n">size</span> <span class="p">-</span> <span class="m">1</span><span class="p">))</span>
</span><span class='line'>            <span class="p">.</span><span class="n">drawWithCache</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">val</span> <span class="py">stages</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">Awake</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">REM</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">Light</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">Deep</span><span class="p">,</span>
</span><span class='line'>                <span class="p">).</span><span class="n">map</span> <span class="p">{</span> <span class="k">type</span> <span class="p">-&gt;</span>
</span><span class='line'>                    <span class="k">type</span> <span class="n">to</span> <span class="n">calculate</span><span class="p">(</span>
</span><span class='line'>                        <span class="n">canvasSize</span> <span class="p">=</span> <span class="n">size</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="n">height</span> <span class="p">=</span> <span class="n">stageHeightPx</span><span class="p">),</span>
</span><span class='line'>                        <span class="n">recordStartTime</span> <span class="p">=</span> <span class="n">record</span><span class="p">.</span><span class="n">startTime</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">recordEndTime</span> <span class="p">=</span> <span class="n">record</span><span class="p">.</span><span class="n">endTime</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">stages</span> <span class="p">=</span> <span class="n">record</span><span class="p">.</span><span class="n">stages</span><span class="p">.</span><span class="n">filter</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="k">type</span> <span class="p">==</span> <span class="k">type</span> <span class="p">},</span>
</span><span class='line'>                    <span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">onDrawWithContent</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">var</span> <span class="py">offset</span> <span class="p">=</span> <span class="m">0f</span>
</span><span class='line'>                    <span class="n">stages</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span> <span class="p">(</span><span class="k">type</span><span class="p">,</span> <span class="n">points</span><span class="p">)</span> <span class="p">-&gt;</span>
</span><span class='line'>                        <span class="n">translate</span><span class="p">(</span><span class="n">top</span> <span class="p">=</span> <span class="n">offset</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                            <span class="c1">// 画背景</span>
</span><span class='line'>                            <span class="n">drawRoundRect</span><span class="p">(</span>
</span><span class='line'>                                <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">LightGray</span><span class="p">,</span>
</span><span class='line'>                                <span class="n">topLeft</span> <span class="p">=</span> <span class="n">Offset</span><span class="p">(</span><span class="n">x</span> <span class="p">=</span> <span class="m">0f</span><span class="p">,</span> <span class="n">y</span> <span class="p">=</span> <span class="n">stageHeightPx</span> <span class="p">/</span> <span class="m">4</span><span class="p">),</span>
</span><span class='line'>                                <span class="n">size</span> <span class="p">=</span> <span class="n">size</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="n">height</span> <span class="p">=</span> <span class="n">stageHeightPx</span> <span class="p">/</span> <span class="m">2</span><span class="p">),</span>
</span><span class='line'>                                <span class="n">cornerRadius</span> <span class="p">=</span> <span class="n">CornerRadius</span><span class="p">(</span><span class="n">stageHeightPx</span> <span class="p">/</span> <span class="m">2</span><span class="p">),</span>
</span><span class='line'>                            <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                            <span class="c1">// 绘制阶段点</span>
</span><span class='line'>                            <span class="n">points</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span> <span class="n">point</span> <span class="p">-&gt;</span>
</span><span class='line'>                                <span class="n">drawRect</span><span class="p">(</span>
</span><span class='line'>                                    <span class="n">topLeft</span> <span class="p">=</span> <span class="n">point</span><span class="p">.</span><span class="n">topLeft</span><span class="p">,</span>
</span><span class='line'>                                    <span class="n">size</span> <span class="p">=</span> <span class="n">point</span><span class="p">.</span><span class="n">size</span><span class="p">,</span>
</span><span class='line'>                                    <span class="n">color</span> <span class="p">=</span> <span class="n">colors</span><span class="p">.</span><span class="n">getValue</span><span class="p">(</span><span class="k">type</span><span class="p">),</span>
</span><span class='line'>                                <span class="p">)</span>
</span><span class='line'>                            <span class="p">}</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                        <span class="n">offset</span> <span class="p">+=</span> <span class="n">stageHeightPx</span> <span class="p">+</span> <span class="n">stagesSpacingPx</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*iXIS4tbsvx5AhTtRqlWi7A.png" alt="最终的图形" /></p>

<h3>添加文本</h3>

<p>要在 Compose 中绘制文本，我们通常可以使用 Text 可组合项。但是，在我们的示例中，我们处于 DrawScope 中，我们可以使用 DrawScope.drawText()方法。</p>

<p>绘制文本与其他绘制命令略有不同。通常，我们为绘制命令提供绘制形状/图像的大小（宽度和高度）。对于文本，有几个参数可以控制渲染文本的大小，例如字体大小、字体、连字符和字母间距。我们需要使用 TextMeasurer 来获取文本的测量大小，具体取决于上述因素。</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*QB1QvINWUWMlpRoPSzrcUQ.png" alt="Desktop效果" /></p>

<p><img src="https://miro.medium.com/v2/resize:fit:2000/format:webp/1*U_LBREiTciw2F3ghYiHqCw.jpeg" alt="Android和iOS效果" /></p>

<p>请到我的Github repo中查找完整示例代码：<a href="https://github.com/vitoksmile/Sleep-timeline-graph">https://github.com/vitoksmile/Sleep-timeline-graph</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[高效地在Jetpack Compose中设计UI组件]]></title>
    <link href="https://alexhilton.github.io/blog/2025/03/16/effective-compose-components/"/>
    <updated>2025-03-16T20:37:18+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/03/16/effective-compose-components</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自<a href="https://proandroiddev.com/designing-effective-ui-components-in-jetpack-compose-cb8d18f7f888">Designing Effective UI Components in Jetpack Compose</a>，原文作者是Jaewoong Eum，原文发布于2025年2月7日。</p></blockquote>

<p><strong>译者按：</strong> 本文适合有一定Jetpack Compose经验的开发者阅读，假定读者熟悉Jetpack Compose的基本使用方法，以及熟悉常见 的Slot设计模式。否则理解上可能会有一些困难。</p>

<p><a href="https://alexhilton.github.io/blog/2025/03/16/effective-compose-components/"><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/0*PwVzAjyhIPGIgrT0" title="auto auto" ></a></p>

<!-- more -->


<p>自<a href="https://android-developers.googleblog.com/2021/07/jetpack-compose-announcement.html"> Google 宣布 Jetpack Compose 1.0 稳定版</a>以来，许多公司都已采用 Jetpack Compose 来利用其众多优势。随着 Compose 在 Android 生态系统中的广泛采用，库和 SDK 也开始集成对 Compose 的支持。</p>

<p>传统上，在基于 XML 的项目中，UI 组件以自定义视图的形式提供，并通过属性（attributes）提供可自定义的选项。虽然这种方法可以轻松地将组件集成到 XML 布局中，但它带来了一些挑战，例如在多个组件之间应用主题样式时不一致，以及由于底层 View 类公开的方法而导致的 API 滥用。</p>

<p>与传统的自定义视图相比，Jetpack Compose 提供了一种完全不同的组件设计策略。其声明式结构允许更直观、更灵活的 API 设计。这种转变不仅有利于库和 SDK 开发人员，也有利于构建共享 UI 组件的大型团队，使他们能够实施更好的做法、减少误用并增强整体开发人员体验。</p>

<p>在本文中，你将发现在 Jetpack Compose 中设计 UI 组件的有效策略，借鉴<a href="https://getstream.io/video/sdk/android/"> Stream Video SDK </a>的最佳实践。</p>

<h2>Modifier的最佳实践</h2>

<p><a href="https://developer.android.com/develop/ui/compose/modifiers">Modifier </a>是 Jetpack Compose 中一个功能强大的 API，可让你以链式和可组合的方式装饰和增强 UI 元素。但是，应谨慎使用它，因为它的属性可以传播到其他可组合函数，如果管理不当，可能会导致意想不到的效果。</p>

<p>Modifier函数的顺序尤其重要，因为每个函数都会修改前一个函数返回的Modifier或从可组合项外部传递的Modifier。此顺序直接影响最终输出。在本节中，我们将探讨三个关键原则和最佳实践，它们可以指导你在 Jetpack Compose 中设计有效且可预测的 UI 组件 API。</p>

<h3>1. 将Modifier应用到组件最顶层的布局</h3>

<p>Jetpack Compose 中的Modifier会通过布局层次结构向下传递，但理想情况下，它们应仅应用于可组合函数中最顶层的布局节点。在层次结构中的任意级别应用Modifier可能会导致意外行为，并增加用户误用的可能性，从而使组件更难以预测且更难以有效使用。</p>

<p>例如，假设你想要创建一个代表圆形按钮的组件，如下例所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">RoundedButton</span><span class="p">(</span>
</span><span class='line'>  <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>  <span class="n">onClick</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Button</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">.</span><span class="n">clip</span><span class="p">(</span><span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">32.</span><span class="n">dp</span><span class="p">)),</span>
</span><span class='line'>    <span class="n">onClick</span> <span class="p">=</span> <span class="n">onClick</span>
</span><span class='line'>  <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Text</span><span class="p">(</span>
</span><span class='line'>      <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">10.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>      <span class="n">text</span> <span class="p">=</span> <span class="s">&quot;Rounded&quot;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是，你不应将 Modifier 应用于 Text ，而应应用于 Button ，后者是布局层次结构中最顶层的可组合函数，如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">RoundedButton</span><span class="p">(</span>
</span><span class='line'>  <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>  <span class="n">onClick</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Button</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">clip</span><span class="p">(</span><span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">32.</span><span class="n">dp</span><span class="p">)),</span>
</span><span class='line'>    <span class="n">onClick</span> <span class="p">=</span> <span class="n">onClick</span>
</span><span class='line'>  <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Text</span><span class="p">(</span>
</span><span class='line'>      <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">10.</span><span class="n">dp</span><span class="p">),</span> <span class="c1">// 别这么干</span>
</span><span class='line'>      <span class="n">text</span> <span class="p">=</span> <span class="s">&quot;Rounded&quot;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>自定义可组合函数 RoundedButton 的主要用途是表示 Button ，而不是 Text 。因此，你应避免转移所创建主要组件的焦点或用途。</p>

<p>此外，如果布局层次结构变得复杂，并且你在可组合函数的中间级别应用Modifier，则用户可能很难预测提供的Modifier参数最终会影响哪个组件。这种不明确性可能会导致混淆和误用。</p>

<p>如果你想让用户灵活地修改按钮的内部内容，你可以使用插槽来实现，如下例所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">RoundedButton</span><span class="p">(</span>
</span><span class='line'>  <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>  <span class="n">onClick</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span>
</span><span class='line'>  <span class="n">content</span><span class="p">:</span> <span class="n">@Composable</span> <span class="n">RowScope</span><span class="p">.()</span> <span class="p">-&gt;</span> <span class="n">Unit</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Button</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">.</span><span class="n">clip</span><span class="p">(</span><span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">32.</span><span class="n">dp</span><span class="p">)),</span>
</span><span class='line'>    <span class="n">onClick</span> <span class="p">=</span> <span class="n">onClick</span>
</span><span class='line'>  <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">content</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2. 对Modifier使用单个参数</h3>

<p>你可能想知道是否可以接受多个 Modifier 参数以应用于布局层次结构中的特定组件，同时限制组件的结构，如下例所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">RoundedButton</span><span class="p">(</span>
</span><span class='line'>  <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>  <span class="n">textModifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>  <span class="n">onClick</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Button</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">.</span><span class="n">clip</span><span class="p">(</span><span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">32.</span><span class="n">dp</span><span class="p">)),</span>
</span><span class='line'>    <span class="n">onClick</span> <span class="p">=</span> <span class="n">onClick</span>
</span><span class='line'>  <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Text</span><span class="p">(</span>
</span><span class='line'>      <span class="n">modifier</span> <span class="p">=</span> <span class="n">textModifier</span><span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">10.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>      <span class="n">text</span> <span class="p">=</span> <span class="s">&quot;Rounded&quot;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是，Modifier 本质上被设计为一个单一的、可链接的参数，使用户能够定义 Composable 函数的外部行为和外观。在 Composable 中引入多个 Modifier 参数会增加不必要的复杂性，增加误用的风险，并且偏离了 Jetpack Compose 保持 API 直观和可预测的原则。</p>

<p>最好使用基于插槽的方法，让用户能够灵活地自定义内部内容。例如，你可以定义一个插槽（slot），让用户提供自定义内容，同时仍保留单个Modifier以进行外部自定义，而不是添加多个Modifier参数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">RoundedButton</span><span class="p">(</span>
</span><span class='line'>  <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>  <span class="n">onClick</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span>
</span><span class='line'>  <span class="n">content</span><span class="p">:</span> <span class="n">@Composable</span> <span class="n">RowScope</span><span class="p">.()</span> <span class="p">-&gt;</span> <span class="n">Unit</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Button</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">.</span><span class="n">clip</span><span class="p">(</span><span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">32.</span><span class="n">dp</span><span class="p">)),</span>
</span><span class='line'>    <span class="n">onClick</span> <span class="p">=</span> <span class="n">onClick</span>
</span><span class='line'>  <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">content</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3. 避免跨组件重复使用Modifier</h3>

<p>设计组件时的另一个重要考虑因素是避免重复使用提供的 Modifier 实例。一些开发人员可能会担心为每个组件创建新的 Modifier 实例可能会导致内存使用量增加或对性能产生负面影响，尤其是在具有大量Modifier的复杂布局层次结构中。</p>

<p>然而，由于 Jetpack Compose 中Modifier实现的优化性质，这种担忧通常是没有根据的。Modifier旨在应用于可组合函数中的单个布局节点，以确保行为清晰且可预测。如果在布局层次结构中不同级别的多个可组合项中使用相同的Modifier，则可能导致意外的副作用和不可预测的行为，从而损害组件的一致性和可用性。</p>

<p>例如，考虑这样一种情况，其中相同的 Modifier 参数在整个布局层次结构中重复使用，如下例所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">MyButtons</span><span class="p">(</span>
</span><span class='line'>  <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>  <span class="n">onClick</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Column</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Button</span><span class="p">(</span>
</span><span class='line'>      <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">,</span>
</span><span class='line'>      <span class="n">onClick</span> <span class="p">=</span> <span class="n">onClick</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">Text</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">10.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>        <span class="n">text</span> <span class="p">=</span> <span class="s">&quot;Rounded&quot;</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Button</span><span class="p">(</span>
</span><span class='line'>      <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">,</span>
</span><span class='line'>      <span class="n">onClick</span> <span class="p">=</span> <span class="n">onClick</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">Text</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">10.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>        <span class="n">text</span> <span class="p">=</span> <span class="s">&quot;Not Rounded&quot;</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>乍一看，代码似乎运行正常。但是，当你在调用点修改Modifier时，你会注意到意外的行为，可能会以意想不到的方式改变整个布局。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">MyButtons</span><span class="p">(</span>
</span><span class='line'>  <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>    <span class="p">.</span><span class="n">clip</span><span class="p">(</span><span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">32.</span><span class="n">dp</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">Blue</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span> <span class="p">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>为了确保行为正确并避免意外问题，你应避免在多个组件中重复使用Modifier。在本节中，你了解了在设计 Compose 组件时管理Modifier的最佳实践。接下来，让我们通过实现主题来深入了解如何提供一致的 UI 样式。</p>

<h2>主题确保 UI 一致性</h2>

<p>现在，假设你需要提供多种 Compose 组件，这些组件应共享一致的样式。如果这些组件是独立提供的，那么维护这些组件之间一致样式的责任就完全落在用户身上。这可能非常具有挑战性，因为每个组件可能会公开不同的 API 来自定义其样式，从而使同步变得繁琐且容易出错。</p>

<p>在这种情况下，你可以从 Compose Material 库提供的<a href="https://developer.android.com/develop/ui/compose/designsystems/material3#material-theming"> MaterialTheme API </a>中汲取灵感。关键在于确保组件样式一致，同时允许用户无缝自定义并在各个组件之间保持一致的样式。</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/0*AyJL0G8NsCGWX9_Q" alt="Theming Consistency" /></p>

<p>Compose 的<a href="https://getstream.io/video/sdk/"> Stream Video SDK </a>通过提供名为<a href="https://getstream.io/video/docs/android/ui-components/video-theme/"> VideoTheme </a>的专用主题 API 展示了最佳实践。此 VideoTheme API 可确保 SDK 提供的所有 Compose 组件的样式一致，包括颜色、尺寸、排版、形状、涟漪效果等。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">setContent</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">VideoTheme</span><span class="p">(</span>
</span><span class='line'>        <span class="n">colors</span> <span class="p">=</span> <span class="n">StreamColors</span><span class="p">.</span><span class="n">defaultColors</span><span class="p">().</span><span class="n">copy</span><span class="p">(</span><span class="n">appBackground</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Black</span><span class="p">),</span>
</span><span class='line'>        <span class="n">dimens</span> <span class="p">=</span> <span class="n">StreamDimens</span><span class="p">.</span><span class="n">defaultDimens</span><span class="p">().</span><span class="n">copy</span><span class="p">(</span><span class="n">callAvatarSize</span> <span class="p">=</span> <span class="m">72.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>        <span class="n">shapes</span> <span class="p">=</span> <span class="n">StreamShapes</span><span class="p">.</span><span class="n">defaultShapes</span><span class="p">().</span><span class="n">copy</span><span class="p">(</span>
</span><span class='line'>            <span class="n">avatar</span> <span class="p">=</span> <span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">8.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>            <span class="n">callButton</span> <span class="p">=</span> <span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">16.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>            <span class="n">callControls</span> <span class="p">=</span> <span class="n">RectangleShape</span><span class="p">,</span>
</span><span class='line'>            <span class="n">callControlsButton</span> <span class="p">=</span> <span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">8.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">CallContent</span><span class="p">(</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">(),</span>
</span><span class='line'>            <span class="n">call</span> <span class="p">=</span> <span class="n">call</span><span class="p">,</span>
</span><span class='line'>            <span class="n">onBackPressed</span> <span class="p">=</span> <span class="p">{</span> <span class="n">finish</span><span class="p">()</span> <span class="p">},</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过将 Stream SDK 提供的组件与 VideoTheme 包装在一起（如上例所示），自定义样式将自动一致地应用于所有组件。这种方法使用户能够轻松保持其 UI 的一致性，同时调整主题以满足其应用程序的设计要求。</p>

<h3>实现自定义主题</h3>

<p>让我们深入研究如何实现自定义主题。第一步是定义设计规范，这些规范将在你的组件之间共享或为用户提供自定义功能。考虑包括颜色、形状和尺寸等方面，因为这些通常是确保设计系统一致性的最重要因素。</p>

<p>例如，在 Stream SDK 中，组件所需的所有颜色集均在<a href="https://github.com/GetStream/stream-video-android/blob/c12db8cb6367e10682be3ab323d50dfcc59032f3/stream-video-android-ui-compose/src/main/kotlin/io/getstream/video/android/compose/theme/StreamColors.kt#L24"> StreamColors </a>类中预定义，为用户提供了一种无缝的方式来保持其整个 UI 的一致性。以下是 Stream SDK 如何通过结构良好的颜色集确保一致性的示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">public</span> <span class="n">data</span> <span class="k">class</span> <span class="nc">StreamColors</span><span class="p">(</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">brandPrimary</span><span class="p">:</span> <span class="n">Color</span><span class="p">,</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">brandPrimaryLt</span><span class="p">:</span> <span class="n">Color</span><span class="p">,</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">brandPrimaryDk</span><span class="p">:</span> <span class="n">Color</span><span class="p">,</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">brandSecondary</span><span class="p">:</span> <span class="n">Color</span><span class="p">,</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">brandSecondaryTransparent</span><span class="p">:</span> <span class="n">Color</span><span class="p">,</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">brandCyan</span><span class="p">:</span> <span class="n">Color</span><span class="p">,</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">brandGreen</span><span class="p">:</span> <span class="n">Color</span><span class="p">,</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">brandYellow</span><span class="p">:</span> <span class="n">Color</span><span class="p">,</span>
</span><span class='line'>    <span class="p">..</span>
</span><span class='line'>  <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来，你应该创建一个<a href="https://developer.android.com/develop/ui/compose/compositionlocal"> CompositionLocal </a>来保存设计规范。这将允许你的组件和用户通过使用 StreamTheme.colors 调用在自定义主题的上下文中无缝访问这些规范。</p>

<p><strong>译注：</strong> CompositionLocal是Compose中用于在上下文函数调用中，隐式的传递常量性质参数的方法，可以参考这篇文章<a href="https://juejin.cn/post/7434543407636267071">用Compose中的CompositionLocal来暗渡陈仓</a>，以了解CompositionLocal的详细用法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Local providers for various properties we connect to our components, for styling.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="py">LocalColors</span> <span class="p">=</span> <span class="n">compositionLocalOf</span><span class="p">&lt;</span><span class="n">StreamColors</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">error</span><span class="p">(</span><span class="s">&quot;No colors provided! Make sure to wrap all usages of Stream components in a VideoTheme.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="n">interface</span> <span class="n">StreamTheme</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Retrieves the current [StreamColors] at the call site&#39;s position in the hierarchy.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">val</span> <span class="py">colors</span><span class="p">:</span> <span class="n">StreamColors</span>
</span><span class='line'>        <span class="n">@Composable</span> <span class="n">@ReadOnlyComposable</span>
</span><span class='line'>        <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="n">LocalColors</span><span class="p">.</span><span class="n">current</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后，你需要利用<a href="https://developer.android.com/develop/ui/compose/compositionlocal"> CompositionLocal </a>将这些设计规范封装在自定义主题中。这种方法允许你在整个可组合层次结构中高效地提供和传播你的设计规范。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">public</span> <span class="k">fun</span> <span class="nf">VideoTheme</span><span class="p">(</span>
</span><span class='line'>    <span class="n">isInDarkMode</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="n">isSystemInDarkTheme</span><span class="p">(),</span>
</span><span class='line'>    <span class="n">colors</span><span class="p">:</span> <span class="n">StreamColors</span> <span class="p">=</span> <span class="n">StreamColors</span><span class="p">.</span><span class="n">defaultColors</span><span class="p">(),</span>
</span><span class='line'>    <span class="n">content</span><span class="p">:</span> <span class="n">@Composable</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">CompositionLocalProvider</span><span class="p">(</span>
</span><span class='line'>        <span class="n">LocalColors</span> <span class="n">provides</span> <span class="n">colors</span><span class="p">,</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">content</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在，你的所有组件都应假设它们都包含在自定义主题（例如本例中的 VideoTheme）中，并使用提供的设计规范来确保整个组件集的样式一致。这种方法不仅使你的组件 API 能够采用统一的样式，还允许用户利用这些设计规范进行自定义，从而同时提高灵活性和一致性。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">VideoRendererCallContent</span><span class="p">(</span>
</span><span class='line'>    <span class="n">call</span><span class="p">:</span> <span class="n">Call</span><span class="p">,</span>
</span><span class='line'>    <span class="n">video</span><span class="p">:</span> <span class="n">ParticipantState</span><span class="p">.</span><span class="n">Video</span><span class="p">,</span>
</span><span class='line'>    <span class="n">onRendered</span><span class="p">:</span> <span class="p">(</span><span class="n">View</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span> <span class="p">=</span> <span class="p">{},</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">VideoRenderer</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">fillMaxSize</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">VideoTheme</span><span class="p">.</span><span class="n">colors</span><span class="p">.</span><span class="n">baseSheetTertiary</span><span class="p">),</span> <span class="c1">// use pre-defined color styles</span>
</span><span class='line'>        <span class="n">call</span> <span class="p">=</span> <span class="n">call</span><span class="p">,</span>
</span><span class='line'>        <span class="n">video</span> <span class="p">=</span> <span class="n">video</span><span class="p">,</span>
</span><span class='line'>        <span class="n">onRendered</span> <span class="p">=</span> <span class="n">onRendered</span><span class="p">,</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">MyScreen</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">VideoRendererCallContent</span><span class="p">(..)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// some complicated components</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MainActivity</span> <span class="p">:</span> <span class="n">ComponentActivity</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">super</span><span class="p">.</span><span class="n">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>         <span class="n">setContent</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">VideoTheme</span> <span class="p">{</span>
</span><span class='line'>               <span class="n">MyScreen</span><span class="p">()</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种方法不仅对于实现 API（库或 SDK）有效，对于构建应用程序也同样有效，因为它能够使用结构良好、预定义的设计规范轻松维护设计一致性。对于实际示例和实际用例，你可以在<a href="https://github.com/GetStream/stream-video-android/blob/c12db8cb6367e10682be3ab323d50dfcc59032f3/stream-video-android-ui-compose/src/main/kotlin/io/getstream/video/android/compose/theme/VideoTheme.kt"> GitHub </a>上探索实际最佳实践。</p>

<h2>可定制性</h2>

<p>在实现 UI 组件时，尤其是对于库或 SDK，为 UI 和 UX 行为提供强大的自定义和灵活性至关重要。这可确保用户可以轻松重复使用组件并根据其特定要求进行调整。你可以采用各种策略在 Jetpack Compose 中有效地实现这种级别的可定制性。</p>

<h3>1. 利用样式类</h3>

<p>如果你希望为特定组件提供更具针对性的定制，请考虑提供专用的样式类。此类可以定义并允许用户轻松修改组件的 UI 和 UX 行为以满足他们的特定需求。</p>

<p>一个很好的例子是 TextStyle ，它是 Compose UI 库提供的默认类：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Immutable</span>
</span><span class='line'><span class="k">class</span> <span class="nc">TextStyle</span> <span class="k">internal</span> <span class="n">constructor</span><span class="p">(</span>
</span><span class='line'>  <span class="p">..</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">constructor</span><span class="p">(</span>
</span><span class='line'>        <span class="n">color</span><span class="p">:</span> <span class="n">Color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Unspecified</span><span class="p">,</span>
</span><span class='line'>        <span class="n">fontSize</span><span class="p">:</span> <span class="n">TextUnit</span> <span class="p">=</span> <span class="n">TextUnit</span><span class="p">.</span><span class="n">Unspecified</span><span class="p">,</span>
</span><span class='line'>        <span class="n">fontWeight</span><span class="p">:</span> <span class="n">FontWeight</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>        <span class="n">fontStyle</span><span class="p">:</span> <span class="n">FontStyle</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>        <span class="n">fontSynthesis</span><span class="p">:</span> <span class="n">FontSynthesis</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>        <span class="n">fontFamily</span><span class="p">:</span> <span class="n">FontFamily</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>        <span class="p">..</span>
</span><span class='line'>     <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如上面的代码所示，TextStyle 类封装了 Text 可组合项的所有样式属性。只需将 TextStyle 实例传递给 Text 可组合项，你就可以轻松自定义其设计，如下例所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">Text</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>        <span class="p">.</span><span class="n">fillMaxWidth</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="n">top</span> <span class="p">=</span> <span class="m">16.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>    <span class="n">text</span> <span class="p">=</span> <span class="s">&quot;Stats&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">style</span> <span class="p">=</span> <span class="n">TextStyle</span><span class="p">(</span>
</span><span class='line'>        <span class="n">fontSize</span> <span class="p">=</span> <span class="m">16.</span><span class="n">sp</span><span class="p">,</span>
</span><span class='line'>        <span class="n">lineHeight</span> <span class="p">=</span> <span class="m">24.</span><span class="n">sp</span><span class="p">,</span>
</span><span class='line'>        <span class="n">fontWeight</span> <span class="p">=</span> <span class="n">FontWeight</span><span class="p">(</span><span class="m">600</span><span class="p">),</span>
</span><span class='line'>        <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">White</span><span class="p">,</span>
</span><span class='line'>        <span class="n">textAlign</span> <span class="p">=</span> <span class="n">TextAlign</span><span class="p">.</span><span class="n">Center</span><span class="p">,</span>
</span><span class='line'>    <span class="p">),</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用样式类的优点是，它们允许组件开发人员将所有设计规范整合到一个集中的类中。这种方法可以防止设计元素分散在多个布局中，从而使代码库更简洁、更易于管理。</p>

<p>对于用户来说，样式类提供了一种直接且直观的修改设计的方法。此外，用户可以在多个布局中重复使用相同的样式实例，从而更方便地在不同布局中应用一致的自定义。</p>

<p>一个潜在的缺点是，由于<a href="https://getstream.io/blog/jetpack-compose-stability/#jetpack-compose-phases">重组机制（Recomposition）</a>，每当输入发生变化时，Compose 运行时都会比较样式类的所有属性，以确定是否需要重组。与直接在可组合函数中定义单个参数相比，这使其成本略高。然而，从 API 设计的角度来看，改进的用户体验和简化的 API 管理通常超过了这一成本，因此在许多情况下，这是一种值得的权衡。</p>

<h3>2. 借助插槽（Slots）的灵活性</h3>

<p>增强自定义灵活性的另一种有效策略是提供接受可组合函数的插槽，让用户根据自己的需求定义特定的实现。通过提供默认实现，你可以确保用户无需付出额外努力即可利用所提供的功能，同时仍然可以根据需要进行自定义。</p>

<p>例如，Stream Video SDK 提供的 CallContent 组件是一个高级 API，它集成了多个子组件，包括顶部应用栏、视频渲染器、布局结构、网格参与者等。虽然 CallContent API 包含默认实现以方便使用，但它还通过允许通过插槽参数进行自定义来确保灵活性，如以下代码所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">fun</span> <span class="nf">CallContent</span><span class="p">(</span>
</span><span class='line'>    <span class="n">call</span><span class="p">:</span> <span class="n">Call</span><span class="p">,</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="n">style</span><span class="p">:</span> <span class="n">VideoRendererStyle</span> <span class="p">=</span> <span class="n">RegularVideoRendererStyle</span><span class="p">(),</span>
</span><span class='line'>    <span class="n">appBarContent</span><span class="p">:</span> <span class="n">@Composable</span> <span class="p">(</span><span class="n">call</span><span class="p">:</span> <span class="n">Call</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">CallAppBar</span><span class="p">(..)</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="n">videoRenderer</span><span class="p">:</span> <span class="n">@Composable</span> <span class="p">(..)</span> <span class="p">-&gt;</span> <span class="n">Unit</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">ParticipantVideo</span><span class="p">(..)</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="n">videoContent</span><span class="p">:</span> <span class="n">@Composable</span> <span class="n">RowScope</span><span class="p">.(</span><span class="n">call</span><span class="p">:</span> <span class="n">Call</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">ParticipantsLayout</span><span class="p">(..)</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">..</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种方法允许用户实现自己的顶部应用栏、视频渲染器、布局结构、网格参与者等自定义版本。此外，另一种有效的策略是将相似类型的组件分组，并通过插槽使它们可自定义，这通常称为复合组件模式。</p>

<p>复合组件模式涉及创建一个父组件来管理子组件集合，通过为每个子组件公开插槽来提供自定义。此模式允许用户替换或自定义单个子组件，同时保持整体结构和功能的一致性。</p>

<p>想象一下视频通话屏幕上的控制面板包含多个操作按钮，如下图所示：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:886/format:webp/0*mNh-EWJlyCobHHed" alt="Control Panel" /></p>

<p>有些用户可能喜欢不同的操作按钮顺序，例如将麦克风按钮放在第一位，而其他用户可能希望根据其特定用例添加、删除或自定义按钮。在这种情况下，复合组件模式被证明在满足这些不同的要求方面非常有效，例如下面的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">public</span> <span class="k">fun</span> <span class="nf">ControlActions</span><span class="p">(</span>
</span><span class='line'>    <span class="n">call</span><span class="p">:</span> <span class="n">Call</span><span class="p">,</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="n">actions</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;(</span><span class="n">@Composable</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">)&gt;</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">LazyRow</span><span class="p">(</span>
</span><span class='line'>            <span class="n">verticalAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">CenterVertically</span><span class="p">,</span>
</span><span class='line'>            <span class="n">horizontalArrangement</span> <span class="p">=</span> <span class="n">Arrangement</span><span class="p">.</span><span class="n">spacedBy</span><span class="p">(</span>
</span><span class='line'>                <span class="n">VideoTheme</span><span class="p">.</span><span class="n">dimens</span><span class="p">.</span><span class="n">spacingM</span><span class="p">,</span>
</span><span class='line'>                <span class="n">Alignment</span><span class="p">.</span><span class="n">CenterHorizontally</span><span class="p">,</span>
</span><span class='line'>            <span class="p">),</span>
</span><span class='line'>        <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">items</span><span class="p">(</span><span class="n">actions</span><span class="p">)</span> <span class="p">{</span> <span class="n">action</span> <span class="p">-&gt;</span>
</span><span class='line'>                <span class="n">action</span><span class="p">.</span><span class="n">invoke</span><span class="p">()</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码演示了一个接受 Composable 函数列表的单个插槽，然后使用 Row 或 LazyRow 进行渲染。这种方法允许你提供高度灵活的组件 API，同时保持对组件布局预期结构的控制。</p>

<p>之后，你还可以提供默认实现，如下所示，以增加便利性。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">public</span> <span class="k">fun</span> <span class="nf">buildDefaultCallControlActions</span><span class="p">(</span>
</span><span class='line'>    <span class="n">onCallAction</span><span class="p">:</span> <span class="p">(</span><span class="n">CallAction</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span>
</span><span class='line'><span class="p">):</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">@Composable</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">listOf</span><span class="p">(</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">ToggleCameraAction</span><span class="p">(</span>
</span><span class='line'>                <span class="n">onCallAction</span> <span class="p">=</span> <span class="n">onCallAction</span><span class="p">,</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">ToggleMicrophoneAction</span><span class="p">(</span>
</span><span class='line'>                <span class="n">onCallAction</span> <span class="p">=</span> <span class="n">onCallAction</span><span class="p">,</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">FlipCameraAction</span><span class="p">(</span>
</span><span class='line'>                <span class="n">onCallAction</span> <span class="p">=</span> <span class="n">onCallAction</span><span class="p">,</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">public</span> <span class="k">fun</span> <span class="nf">ControlActions</span><span class="p">(</span>
</span><span class='line'>    <span class="n">call</span><span class="p">:</span> <span class="n">Call</span><span class="p">,</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="n">onCallAction</span><span class="p">:</span> <span class="p">(</span><span class="n">CallAction</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span> <span class="p">=</span> <span class="p">{</span> <span class="n">DefaultOnCallActionHandler</span><span class="p">.</span><span class="n">onCallAction</span><span class="p">(</span><span class="n">call</span><span class="p">,</span> <span class="n">it</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'>    <span class="n">actions</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;(</span><span class="n">@Composable</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">)&gt;</span> <span class="p">=</span> <span class="n">buildDefaultCallControlActions</span><span class="p">(</span><span class="n">onCallAction</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如需了解更多<a href="https://getstream.io/video/docs/android/ui-components/call/call-controls/"> ControlActions </a>的真实示例，你可以探索<a href="https://github.com/GetStream/stream-video-android/blob/c12db8cb6367e10682be3ab323d50dfcc59032f3/stream-video-android-ui-compose/src/main/kotlin/io/getstream/video/android/compose/ui/components/call/controls/ControlActions.kt#L48"> GitHub </a>上的实现。</p>

<h3>3. 使用主题进行定制</h3>

<p>设计 Compose 组件时的另一个常见挑战是，随着组件层次结构的变大，提供清晰、直接的可定制性变得更加困难。例如，假设你想为组件多个部分使用的视频渲染器提供可定制性，但 UI 层次结构嵌套很深且很复杂，如下例所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">CallContent</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">ParticipantsLayout</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">ParticipantsRegularGrid</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">OrientationVideoRenderer</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">LazyVerticalGrid</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">VideoRenderer</span><span class="p">()</span> <span class="c1">// &lt;-- users want to customize this renderer style</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">FloatingVideoRenderer</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">VideoRenderer</span><span class="p">()</span> <span class="c1">// &lt;-- users want to customize this renderer style</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这种情况下，将插槽或样式参数从最顶层的组件一直传递到 VideoRenderer 组件并不理想。随着你在不同组件之间添加更多可定制性，最顶层的组件 (CallContent) 可能会因大量插槽和样式参数而变得过载。这不仅使你的 API 更难维护，而且还增加了用户混淆或误用的可能性，因为不清楚哪个参数用于什么用途。</p>

<p>为了解决这个问题，你可以利用自定义主题和<a href="https://developer.android.com/develop/ui/compose/compositionlocal"> CompositionLocal</a>来实现可定制性，同时保持 API 更清晰、更易于管理，如下例所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Immutable</span>
</span><span class='line'><span class="k">public</span> <span class="n">data</span> <span class="k">class</span> <span class="nc">VideoRendererStyle</span><span class="p">(</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">backgroundColor</span><span class="p">:</span> <span class="n">Color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Black</span><span class="p">,</span>
</span><span class='line'>    <span class="p">..</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="py">LocalVideoRendererStyle</span> <span class="p">=</span> <span class="n">compositionLocalOf</span><span class="p">&lt;</span><span class="n">VideoRendererStyle</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">error</span><span class="p">(</span><span class="s">&quot;No VideoRendererStyle provided! Make sure to wrap all usages of Stream components in a VideoTheme.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">public</span> <span class="k">fun</span> <span class="nf">VideoTheme</span><span class="p">(</span>
</span><span class='line'>    <span class="n">videoRendererStyle</span><span class="p">:</span> <span class="n">VideoRendererStyle</span> <span class="p">=</span> <span class="n">VideoRendererStyle</span><span class="p">(),</span>
</span><span class='line'>    <span class="n">content</span><span class="p">:</span> <span class="n">@Composable</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">CompositionLocalProvider</span><span class="p">(</span>
</span><span class='line'>        <span class="n">LocalVideoRendererStyle</span> <span class="n">provides</span> <span class="n">videoRendererStyle</span><span class="p">,</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">content</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在，你可以通过在不同的组件中使用提供的样式来确保组件样式的一致性，而无需将它们作为参数反复传递。此外，用户可以通过创建自己的自定义主题轻松自定义样式，如下例所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">setContent</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">VideoTheme</span><span class="p">(</span>
</span><span class='line'>        <span class="n">videoRendererStyle</span> <span class="p">=</span> <span class="n">VideoRendererStyle</span><span class="p">(</span><span class="n">backgroundColor</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Blue</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">..</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你希望更广泛地应用此策略并高效地管理更多样式，则可以将它们合并为一个类，例如 StreamStyles ，并提供统一的样式类，而不是 CompositionLocal 中的多个单独样式。有些同学可能会担心 CompositionLocal 带来的性能影响，因为它会在值更改时触发布局层次结构的重组，但主题通常不会在应用程序中频繁更新。它们通常是静态的，以确保设计一致性，因此在这种情况下使用 CompositionLocal 是一种合适且有效的选择。</p>

<h2>预览（Preview）的兼容性</h2>

<p>提供预览非常重要，尤其是在构建组件 API 时，因为它们允许开发人员直接在 Android Studio 中可视化和验证他们的 UI 设计。
一些同学依靠<a href="https://developer.android.com/develop/ui/compose/tooling#live-edit-literals"> Live Literals </a>来动态展示预览中的变化，而其他同学则使用屏幕截图测试来确保其组件的视觉一致性。因此，在实现 Compose 组件时，必须确保它们与 Android Studio 中的预览功能完全兼容，如下面的屏幕截图所示：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/0*R74xLmTnWswi86ww" alt="Preview" /></p>

<p>有时，你的组件可能会产生副作用，例如在发出网络请求或处理动态状态后渲染图像，这可能会导致预览出现故障。在这种情况下，你可以利用<a href="https://developer.android.com/develop/ui/compose/tooling/previews#localinspectionmode"> LocalInspectionMode</a>。</p>

<p>LocalInspectionMode 允许你确定可组合项是否在预览模式下呈现，从而使你可以呈现专门用于预览目的的专用布局。这种方法可确保预览保持功能，即使你的组件依赖于复杂的逻辑或外部资源。你可以从<a href="https://github.com/skydoves/landscapist"> Landscapist </a>中找到一个用于网络图像加载的 Jetpack Compose 库的真实示例，它演示了处理预览的最佳实践。</p>

<p>下面的可组合函数会检查它是否处于预览模式。如果是，它会渲染静态图像，而不是执行诸如获取网络数据之类的副作用。这种方法允许用户为 GlideImage 可组合函数构建自己的预览，而不会在预览渲染期间遇到运行时错误。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">public</span> <span class="k">fun</span> <span class="nf">GlideImage</span><span class="p">(</span>
</span><span class='line'>  <span class="n">imageModel</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Any</span><span class="p">?,</span>
</span><span class='line'>  <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>  <span class="n">previewPlaceholder</span><span class="p">:</span> <span class="n">Painter</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>  <span class="p">..</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">LocalInspectionMode</span><span class="p">.</span><span class="n">current</span> <span class="p">&amp;&amp;</span> <span class="n">previewPlaceholder</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">Image</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">,</span>
</span><span class='line'>        <span class="n">painter</span> <span class="p">=</span> <span class="n">previewPlaceholder</span><span class="p">,</span>
</span><span class='line'>        <span class="p">..</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// complex logic about requesting network data and render it</span>
</span><span class='line'>  <span class="p">..</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>为了增强项目中的整体预览策略，请考虑探索<a href="https://getstream.io/blog/effective-compose-preview/">设计有效的 UI 以增强 Compose 预览</a>。此资源提供了有价值的见解和技术，可有效优化你的 Compose 预览。</p>

<h2>结论</h2>

<p>在本文中，我们探讨了在 Jetpack Compose 中制作有效 UI 组件的策略，重点关注最佳实践，例如高效处理Modifier、确保设计与主题一致、实施可定制性策略以及增强预览兼容性。设计直观且强大的 API 始终是一项挑战，但努力终将获得回报，因为用户体验和开发者满意度显著提升。</p>

<p>如果你对本文有任何疑问或反馈，可以在 Twitter<a href="https://twitter.com/github_skydoves"> @github_skydoves </a>或<a href="https://github.com/skydoves"> GitHub </a>上找到作者。如果你想随时了解 Stream 的最新动态，请在 Twitter 上关注我们<a href="https://twitter.com/getstream_io"> @getstream_io</a>，获取更多精彩的技术内容。</p>

<p>老规矩，祝你编码愉快！ &ndash; <a href="https://github.com/skydoves">Jaewoong</a></p>

<p>最初<a href="https://getstream.io/blog/designing-effective-compose/">发布于 GetStream.io</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding Algorithm Tarjan]]></title>
    <link href="https://alexhilton.github.io/blog/2025/03/07/understanding-algorithm-tarjan/"/>
    <updated>2025-03-07T20:45:57+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/03/07/understanding-algorithm-tarjan</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p><a href="https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm">Tarjan算法</a>是用于寻找图中强连通组件的高效算法。通常叫做「割点」或者「割边」，也叫做桥，也就是说如果去掉了某个节点，或者某条边，图中的连通分量数量会增加，那么这样的节点就是割点，这样的边就是桥。</p>

<p>比如说，下面这个图中的节点2就是一个「割点」：</p>

<p><a href="https://alexhilton.github.io/blog/2025/03/07/understanding-algorithm-tarjan/"><img src="https://oi-wiki.org/graph/images/cut1.svg" title="auto auto" ></a></p>

<!-- more -->


<p>而下面这个图中的红色的边就是「桥」：</p>

<p><img src="https://oi-wiki.org/graph/images/bridge1.svg" alt="Cut edge/Bridge" /></p>

<h2>Tarjan&rsquo;s Algorithm</h2>

<p>寻找「割点」和「桥」的朴素方法是，遍历每一个节点，或者边，尝试去掉它，然后查看连通分量的数量有没有增加，显然这样复杂度很高至少是O(n<sup>2</sup>)的，所以要介绍一个常用的算法：Tarjan。</p>

<p>为了简单，假定图的节点为0~n-1，需要两个辅助数组disc[n]用以表示每个节点被访问到的次序，或者说被访问到的时间戳，需要注意，这个对于图中节点来说是唯一的，且与每个节点是一一对应的，代表着遍历过程中访问到每个节点的次序。目的是用于唯一标识每个节点，以及节点在遍历中的次序。</p>

<p>另一个辅助数组是low[n]，它记录的是当前节点所在的子树中被访问到的最早的节点，也就是强连通分量子树的根。也就是说low[u]的值是包含u在内的子树的根，它一定是最早被访问的。原理在于，强连通分量一定有环，那么从当前节点u再往回返回到的u之前的节点时，就形成了环，也即是连通分量，low[u]就记录着这个连通分量的根，也即最早被访问到的节点。显然，当low[u] = u时，就找到了这个根节点，当然也找到了一个强连通分量，如果在遍历过程中记录顶点，那么当low[u] = u时，记录过的顶点就都在一个强连通分量里面。</p>

<p>需要注意的是，这里遍历的方法要用DFS，因为DFS肯定能以最快的方式找到环，回到已遍历过的节点。</p>

<h2>典型题目</h2>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/critical-connections-in-a-network/description/">1192. 查找集群内的关键连接</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/critical-connections-in-a-network/solutions/3599268/xi-you-yuan-su-1192-cha-zhao-ji-qun-nei-8wm0m/">题解</a> </td>
<td style="text-align:left;"> 板子题 </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h2>关联知识</h2>

<p><a href="https://en.wikipedia.org/wiki/Strongly_connected_component">强连通分量</a>，强连通分量是指图中的一组相互均可达的节点组成的子集。注意，强连通分量里面的节点，只需要相互均可达，并不要求直接有边连接。</p>

<p>不同的强连通分量之间的连接（即边或者顶点）即是「割点」和「桥」。</p>

<p>寻找强连通分量的算法，除了Tarjan以外，还有<a href="https://en.wikipedia.org/wiki/Kosaraju%27s_algorithm">Kosaraju算法</a>。</p>

<h2>References</h2>

<ul>
<li><a href="https://www.geeksforgeeks.org/tarjan-algorithm-find-strongly-connected-components/">Tarjan’s Algorithm to find Strongly Connected Components</a></li>
<li><a href="https://www.baeldung.com/cs/scc-tarjans-algorithm">Finding Strongly Connected Components: Tarjan’s Algorithm</a></li>
<li><a href="https://oi-wiki.org/graph/cut/">割点和桥</a></li>
<li><a href="https://leetcode.cn/problems/critical-connections-in-a-network/solutions/2078647/mobanjibie-by-lao-song-2f-1r0d/?envType=study-plan-v2&amp;envId=graph-theory">Tarjan 算法的模板题（Java 版本）</a></li>
<li><a href="https://www.geeksforgeeks.org/strongly-connected-components/">Strongly Connected Components</a></li>
<li><a href="https://www.geeksforgeeks.org/kosarajus-algorithm-in-c/">Kosaraju’s Algorithm in C</a></li>
<li><a href="https://www.baeldung.com/cs/kosaraju-algorithm-scc">Finding Strongly Connected Components: Kosaraju’s Algorithm</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[不使用Jetpack Compose的10个理由]]></title>
    <link href="https://alexhilton.github.io/blog/2025/03/06/reasons-not-to-use-jetpack-compose/"/>
    <updated>2025-03-06T22:25:19+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/03/06/reasons-not-to-use-jetpack-compose</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自<a href="https://sonique6784.medium.com/10-reasons-to-not-use-jetpack-compose-719de5d37c9e">10 reasons to NOT use Jetpack Compose</a>，原文发布于2024年9月24日。</p></blockquote>

<p><strong>译者按：</strong> 软件开发行业从不缺少优秀的工具，当然也没有银弹。身为开发者要学会选择合适的工具，避免出现手里拿着锤子，看什么都是钉子。那么就需要搞清楚两个事情，一个是面临的到底是什么样的问题，以及每种工具它的合适场景是什么。没有对与错，只有合适不合适。这篇文章就是帮助大家更清晰地了解到Jetpack Compose适用的场景，帮助Android开发者做出最合适的选择。</p>

<h2>简介</h2>

<p>Jetpack Compose 是一款出色的 UI 工具包，受到 Android 社​​区的热烈欢迎。它提供了一种为你的 Android 应用构建令人愉悦的 UI 的现代方式。</p>

<p><a href="https://alexhilton.github.io/blog/2025/03/06/reasons-not-to-use-jetpack-compose/"><img src="https://www.sixt.tech/assets/jetpack-compose/jetpack-compose.png" title="auto auto" ></a></p>

<!-- more -->


<p>我确实喜欢 Jetpack Compose，但与任何技术一样，它也有一些注意事项。在本文中，我们将了解在什么情况下使用 View 系统更为明智以及原因。</p>

<h2>1. 尽可能减少依赖</h2>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*BSFMClR4UbDbGhkXdfHhqg.png" alt="Compose Dependencies" /></p>

<p>如果你需要尽可能少的依赖项，这可能是出于兼容性或安全性目的，那么使用 View 系统可能会更好。View 系统不需要额外的导入。它位于 Android 系统内部，与 Jetpack Compose 不同，后者需要大量依赖项，这会增加包占用空间和运行时的内存使用量，并为额外的风险打开大门。</p>

<h2>2. 性能</h2>

<p>View 系统自 Android 的第一个版本以来就一直存在，它非常成熟，15 年来已经进行了大量优化，对于复杂的布局，其性能通常比 Jetpack Compose 更好。Jetpack Compose 在每次迭代中都在改进，有时已经比 View 更好，请关注这个领域，View 可能很快就会失去性能之王的桂冠！</p>

<h2>3. Espresso测试</h2>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*xEebB2vruLxuGrxeoePu0g.png" alt="Espresso测试" /></p>

<p>如果你有大量基于 View 的 Espresso 测试，或者想要使用 Android Studio 中的测试记录功能，最好避免使用 Jetpack Compose，或者只考虑将 Jetpack Compose 用于新的页面。无法轻松将于View 的 Espresso 测试迁移到 Compose。此外<a href="https://developer.android.com/studio/test/other-testing-tools/espresso-test-recorder">记录 Espresso 测试功能</a>不适用于 Compose。但是，可以<a href="https://developer.android.com/develop/ui/compose/testing">手动编写 Espresso </a>来测试 Compose。</p>

<h2>4. 稳定性和成熟度</h2>

<p>我们在「性能」部分简要提到了这一点。Jetpack Compose 已有 3 年历史，每次发布都会有所改进，但有时可能会出现错误。此外，许多 Compose 功能仍处于实验阶段，需要注解才能使用。使用实验性功能可能会给你的业务带来潜在的问题。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// 有些特性，如Modifier，Layout和Material Design是实验性质的，需要显式的用OptInt。</span>
</span><span class='line'><span class="n">@OptIn</span><span class="p">(</span><span class="n">ExperimentalMaterialApi</span><span class="o">::</span><span class="k">class</span><span class="p">)</span>
</span><span class='line'><span class="n">@OptIn</span><span class="p">(</span><span class="n">@ExperimentalFoundationApi</span><span class="o">::</span><span class="k">class</span><span class="p">)</span>
</span><span class='line'><span class="n">@OptIn</span><span class="p">(</span><span class="n">ExperimentalComposeUiApi</span><span class="o">::</span><span class="k">class</span><span class="p">)</span>
</span><span class='line'><span class="n">@OptIn</span><span class="p">(</span><span class="n">ExperimentalLayoutApi</span><span class="o">::</span><span class="k">class</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你需要非常高的成熟度和稳定性，你可能希望坚持使用View 系统。</p>

<h2>5. 功能缺失</h2>

<p>View 系统是 Android 历史的一部分。许多 Android 功能首先在 View 上可用，然后移植到 Compose，通常 Compose 可能只提供一个包装器（例如 Google Maps）。因此，你可能希望保留 View 系统，直到这些功能在 Compose 上可用。请注意，你可以使用 AndroidView 访问那些仅限 View 的功能，Compose 最终会实现这一点。</p>

<h2>6. 广泛应用于现有应用中</h2>

<p>在你的职业生涯中，你很可能需要处理 View。许多大公司即使采用了 Jetpack Compose，仍然使用 View。将 View 页面迁移到 Compose 可能会带来高昂的成本，而对最终客户而言，价值相对较低。大多数公司选择逐步采用 Compose，使用 View 系统来维护较旧的 UI。你可能需要 View 技能才能有效地将 View 转换为 Compose。</p>

<h2>7.APK 大小</h2>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*MyanicOBr--xVFZUqSaxEg.png" alt="APK大小" /></p>

<p>如果你担心软件包的大小，你可以重新考虑是否采用 Jetpack Compose。它将使你的软件包大小至少<a href="https://www.reddit.com/r/androiddev/comments/1c5vjhi/i_see_your_enterprisegrade_jetpack_compose_11mb/">增加几MB</a>，虽然你可以启用<a href="https://r8.googlesource.com/r8/+/refs/heads/master/compatibility-faq.md#r8-full-mode"> R8 完整模式</a>以进一步减小大小。但是，View 系统的占用的额外空间几乎为零，因为组件是系统的一部分，不需要额外的库。</p>

<h2>8. 与旧设备的兼容性</h2>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*C-GWYdBlBQfjl4jHLexP7Q.png" alt="老旧设备你" /></p>

<p>Jetpack Compose 最高可兼容 Android API 21（Lollipop🍭 、Android 5.0）。如果你想要针对性地适配以前的 Android 版本，则必须使用 View。</p>

<h2>9. 嵌入和物联网设备</h2>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*WMYdpUZ4oDT6Axy2GSp0CQ.png" alt="物联网设备" /></p>

<p>单一用途的设备（自助服务终端、支付终端、自助结账）通常只运行一个应用，并且 CPU 和 RAM 资源有限。对于这些设备来说，Jetpack Compose 可能太重了，可能需要 Android 开发人员使用 View 系统来适应设备规格。这些设备也可能运行比较旧的Android版本，如 4.0 版。</p>

<h2>10. 你不想学习新东西</h2>

<p>也许你已经接近职业生涯的尾声，或者想要转到其他领域，那么在某些情况下，学习 Jetpack Compose 是没有意义的。学习曲线有点陡峭，因为与 View 相比，这是一种非常新的 UI 开发方法。不过，学习它可能很有用，因为其他框架（如 React 和 Flutter）也使用了某些类似的原理。</p>

<h2>结论</h2>

<p>Jetpack Compose 是一款出色的 UI 工具包，无疑是 Android 的未来，但它并不是唯一的 UI 工具包，View 已经证明它工作得很好，虽然有些人认为它是遗留的，但最好选择适合你的需求和限制的框架。
无论你选择哪种框架，玩得开心！Android 开发丰富多样，作为 Android 开发人员，我们的职责就是利用这些优势。</p>

<p>感谢你阅读本文，希望你喜欢并学到一些东西。请帮忙点赞，以表示你的支持！</p>

<p>本文由<a href="http://androiddev.news/"> Android 开发者新闻</a>赞助，在<a href="https://play.google.com/store/apps/details?id=sonique.fr.adn"> Play 商店下载</a>应用程序。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[理解Android中的内存泄漏以及如何让LeakCanary来帮忙]]></title>
    <link href="https://alexhilton.github.io/blog/2025/03/01/understanding-memory-leaks/"/>
    <updated>2025-03-01T11:05:54+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/03/01/understanding-memory-leaks</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自<a href="https://proandroiddev.com/understanding-memory-leaks-in-android-how-leakcanary-can-help-4768df60f646">Understanding Memory Leaks in Android &amp; How LeakCanary Can Help</a>，原文发布于2024年12月27日。</p></blockquote>

<p><strong>译者注：</strong> 关于内存优化，笔者也曾经写过两篇文章，侧重于内存问题的深入分析，如有兴趣可以作为拓展阅读：<a href="https://juejin.cn/post/7277489569958756364">让你不再惧怕内存优化</a>和<a href="https://juejin.cn/post/7287913786038992915">Android应用性能剖析全攻略</a>。</p>

<p><a href="https://alexhilton.github.io/blog/2025/03/01/understanding-memory-leaks/"><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*Sx4veSpq_Z1oYBsP5Q7nwQ.jpeg" title="auto auto" ></a></p>

<!-- more -->


<p>作为 Android 开发者，管理内存是构建高性能应用的一个最关键方面。开发者面临的一个最常见问题是内存泄漏。这些泄漏会对应用的性能和用户体验产生负面影响，导致运行缓慢、崩溃甚至电池耗尽你。但别担心——有一种解决方案可以让发现和修复内存泄漏变得更容易，那就是LeakCanary。</p>

<p>在这篇文章中，我们将首先探讨什么是内存泄漏、为什么会发生内存泄漏，然后介绍 LeakCanary 作为检测和修复 Android 应用程序中这些泄漏的强大工具。</p>

<h2>什么是内存泄漏？</h2>

<p>当你的应用保留不再需要的内存时，就会发生内存泄漏。简单来说，当不再使用的对象没有从内存中正确清除时，就会发生内存泄漏，从而导致你的应用消耗了不必要的内存。随着时间的推移，这可能会导致性能下降，在极端情况下，还会导致应用崩溃。</p>

<h2>内存泄漏为何如此危险？</h2>

<p>内存泄漏乍一看似乎无害，但它可能会给你的 Android 应用带来严重问题：</p>

<ol>
<li><strong>内存使用量增加：</strong> 当内存未释放时，应用会不断消耗更多资源，导致内存消耗过高。</li>
<li><strong>性能下降：</strong> 随着时间的推移，内存中保存的对象越来越多，应用会变得越来越慢，导致延迟和用户体验不佳。</li>
<li><strong>应用崩溃：</strong> 如果内存消耗达到临界水平，你的应用可能会崩溃甚至强制关闭。</li>
<li><strong>电池耗尽：</strong> 内存泄漏可能导致进程在后台运行，从而比预期更快地耗尽设备电池。</li>
</ol>


<h2>Android 中内存泄漏的常见原因</h2>

<ol>
<li><strong>保存对上下文的引用：</strong> 如果你在静态变量或单例中保存对 Activity 或 Context 的引用，它将永远不会被垃圾回收，因为系统仍会考虑正在使用的 Activity 或 Context。</li>
<li><strong>内部类和匿名类：</strong> 它们隐式保存对外部类（通常是 Activity 或 Fragment）的引用，从而防止它们被垃圾回收。</li>
<li><strong>未关闭的资源：</strong> 完成后不关闭 Cursor、Stream 或数据库连接等资源可能会导致内存堆积。</li>
<li><strong>事件侦听器：</strong> 如果你向 UI 元素添加侦听器（例如 OnClickListener），但在不再需要它们后没有将其删除，这些对象可能会泄漏内存。</li>
</ol>


<h2>LeakCanary 如何帮助检测 Android 中的内存泄漏</h2>

<p>现在我们了解了内存泄漏可能导致的问题，让我们来讨论一下可以帮助我们检测内存泄漏的工具：LeakCanary。</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/0*xas01FOk-1FlwDFe.png" alt="LeakCanary" /></p>

<p>LeakCanary 是一个适用于 Android 的开源内存泄漏检测库。它旨在自动识别开发过程中应用中的内存泄漏，让你在影响用户之前修复它们。</p>

<ul>
<li>当发生内存泄漏时，LeakCanary 会自动触发堆转储，对其进行分析，并向开发人员提供一份报告，指出泄漏发生的位置。这使开发人员能够更轻松地发现和解决内存泄漏，以免导致性能问题。</li>
</ul>


<h3>LeakCanary 如何工作？</h3>

<p>LeakCanary 的工作原理是监控应用的内存并分析堆转储以识别不应该存在的对象。当检测到内存泄漏时，它会生成一份报告，显示泄漏发生的位置，从而帮助你找出根本原因。</p>

<ol>
<li><strong>堆转储：</strong> 当 LeakCanary 检测到潜在泄漏时，它会进行堆转储（应用内存的快照），并将其与垃圾回收后的堆进行比较。如果它发现不应保留的对象，它会将其标记为泄漏。</li>
<li><strong>泄漏的对象：</strong> LeakCanary 会向你显示哪些对象被保存在内存中以及引用链中，帮助你识别导致泄漏的对象以及它仍被保留的原因。</li>
<li><strong>通知：</strong> 每当 LeakCanary 发现内存泄漏时，它都会在应用的调试版本中通知你。你可以快速访问报告并开始解决问题。</li>
</ol>


<p>LeakCanary 自动检测以下对象的泄漏：</p>

<ul>
<li>销毁的 Activity 实例</li>
<li>销毁的 Fragment 实例</li>
<li>销毁的 fragment View 实例</li>
<li>清除的 ViewModel 实例</li>
<li>销毁的 Service 实例</li>
</ul>


<h3>如何将 LeakCanary 集成到 Android 项目中？</h3>

<p>要将 LeakCanary 集成到 Android 项目中，请按照以下步骤操作：</p>

<ul>
<li><strong>添加 LeakCanary 依赖项：</strong> 在 build.gradle 文件（应用程序级别）中，添加以下内容：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='Groovy'><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">debugImplementation</span> <span class="s1">&#39;com.squareup.leakcanary:leakcanary-android:2.9.1&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>初始化 LeakCanary：</strong> LeakCanary 在调试构建类型中自动初始化。但是，你可以在 Application 类中手动初始化它：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyApplication</span> <span class="kd">extends</span> <span class="n">Application</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">LeakCanary</span><span class="o">.</span><span class="na">isInAnalyzerProcess</span><span class="o">(</span><span class="k">this</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span> <span class="c1">// LeakCanary is in heap analysis process</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">LeakCanary</span><span class="o">.</span><span class="na">install</span><span class="o">(</span><span class="k">this</span><span class="o">);</span> <span class="c1">// Initialize LeakCanary</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>在调试模式下运行应用程序</strong>，LeakCanary 将在开发阶段检测内存泄漏。</li>
</ul>


<h3>如何在生产版本中使用 LeakCanary？</h3>

<p>虽然 LeakCanary 专为调试和开发而设计，但在生产环境中使用它时应谨慎。它可能会影响应用性能，并可能不必要地暴露与内存相关的数据。但是，如果你出于某种原因需要在生产环境中启用它，则可以有条件地仅在某些构建版本中添加 LeakCanary：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Groovy'><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">releaseImplementation</span> <span class="s1">&#39;com.squareup.leakcanary:leakcanary-android-no-op:2.9.1&#39;</span> <span class="c1">// No-op for release</span>
</span><span class='line'>    <span class="n">debugImplementation</span> <span class="s1">&#39;com.squareup.leakcanary:leakcanary-android:2.9.1&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样，LeakCanary 仅在调试版本中处于活动状态，而无操作版本则用于生产。</p>

<h3>你将采取什么步骤来修复 LeakCanary 报告的内存泄漏？</h3>

<p>当 LeakCanary 报告内存泄漏时，请按照以下步骤解决：</p>

<ol>
<li><p><strong>分析泄漏报告：</strong> LeakCanary 提供一份详细的报告，其中包含一个对象引用链，显示泄漏发生的位置。</p></li>
<li><p><strong>识别泄漏对象：</strong> 查找意外保存在内存中的对象（如 Activity、Fragment 或 Context）。</p></li>
<li><p><strong>修复泄漏：</strong></p>

<ul>
<li>避免将 Activity 或 Context 引用存储在静态变量或长寿命对象中。</li>
<li>确保关闭 Cursor、Stream 等资源。</li>
<li>在不再需要时删除侦听器和回调。</li>
</ul>
</li>
<li><strong>测试修复：</strong> 进行更改后，重新运行你的应用以确认内存泄漏已解决。</li>
</ol>


<h3>LeakCanary 有哪些局限性？</h3>

<p>虽然 LeakCanary 是一款出色的工具，但它也有一些局限性：</p>

<ul>
<li><strong>并非所有泄漏都能被检测到：</strong> LeakCanary 专注于 Java 堆内存泄漏，但它可能无法检测本机内存泄漏或低级问题。</li>
<li><strong>对性能的影响：</strong> 由于堆分析过程，在开发过程中运行 LeakCanary 可能会稍微减慢你的应用速度。</li>
<li><strong>不能取代良好的内存管理：</strong> 虽然 LeakCanary 有助于检测泄漏，但开发人员仍应遵循内存管理的最佳实践，以防止泄漏发生。</li>
</ul>


<h2>结论</h2>

<p>内存管理对于确保 Android 应用高效运行至关重要。LeakCanary 是一款功能强大的工具，可帮助你在内存泄漏影响应用性能之前检测并解决内存泄漏问题。通过遵循最佳实践并将 LeakCanary 集成到你的开发过程中，你可以确保你的应用保持优化状态并且不会出现与内存相关的问题。</p>

<p>检查你是否已在 Android 应用程序中完成以下所有操作：</p>

<ol>
<li><a href="https://developers.google.com/maps/documentation/places/android-sdk/memory-best-practices#rel-unused">释放未使用的资源。</a></li>
<li><a href="https://developers.google.com/maps/documentation/places/android-sdk/memory-best-practices#unreg">不再需要时取消注册监听器。</a></li>
<li><a href="https://developers.google.com/maps/documentation/places/android-sdk/memory-best-practices#cancel-tasks">不需要时取消任务。</a></li>
<li><a href="https://developers.google.com/maps/documentation/places/android-sdk/memory-best-practices#fwd-lifecyc">发生命周期方法以释放资源。</a></li>
<li><a href="https://developers.google.com/maps/documentation/places/android-sdk/memory-best-practices#latest-versions">使用最新版本的 SDK。</a></li>
</ol>


<h2>参考</h2>

<ul>
<li><a href="https://developers.google.com/maps/documentation/places/android-sdk/memory-best-practices">https://developers.google.com/maps/documentation/places/android-sdk/memory-best-practices</a></li>
<li><a href="https://square.github.io/leakcanary/">https://square.github.io/leakcanary/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[选择Retrofit还是Ktor：给Android开发者的指南]]></title>
    <link href="https://alexhilton.github.io/blog/2025/02/26/retrofit-vs-ktor/"/>
    <updated>2025-02-26T22:50:55+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/02/26/retrofit-vs-ktor</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自<a href="https://proandroiddev.com/when-to-use-retrofit-and-when-to-use-ktor-a-guide-for-android-developers-918491dcf69a">When to Use Retrofit and When to Use Ktor: A Guide for Android Developers</a></p></blockquote>

<p>作为 Android 开发人员，为你的项目选择正确的 HTTP 客户端是一项关键的决定。当今最受欢迎的两个选项莫过于 Retrofit 和 Ktor。虽然Retrofit 多年来一直是事实上的标准，但 Ktor 因其现代架构和灵活性而势头强劲。</p>

<p><a href="https://alexhilton.github.io/blog/2025/02/26/retrofit-vs-ktor/"><img src="https://robotqa.com/blog/wp-content/uploads/2024/06/202406120818248.png" title="auto auto" ></a></p>

<!-- more -->


<p>在本文中，我们将探讨你应该选择 Retrofit 或 Ktor 的场景，以及它们的优势如何满足你的应用要求。</p>

<h2>了解基础知识</h2>

<p>先来了解一下基础知识：</p>

<h3>Retrofit</h3>

<p>Retrofit 是 Square 开发的适用于 Android 和 Java 的类型安全 HTTP 客户端。它将 API 调用抽象为声明式接口，并使用 Gson 或 Moshi 等库无缝地将 JSON 解析为 Java/Kotlin 对象。</p>

<h3>Ktor</h3>

<p>Ktor 由 JetBrains 开发，是一款基于 Kotlin 的异步框架，用于构建联网应用程序。它不仅仅是一个 HTTP 客户端，而是一个多用途框架，让你能够使用同一个库构建后端服务并发出网络请求。</p>

<h2>何时使用 Retrofit？</h2>

<h3>1. 你需要简单和可读性</h3>

<p>如果你更喜欢使用预定义接口以直观的方式进行 API 调用，Retrofit 是一个绝佳的选择。</p>

<p>例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">interface</span> <span class="n">ApiService</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">@GET</span><span class="p">(</span><span class="s">&quot;posts&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">getPosts</span><span class="p">():</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Post</span><span class="p">&gt;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用 Retrofit，你可以预先定义 API 结构并专注于业务逻辑。</p>

<h3>2. 你的团队已经熟悉 Retrofit</h3>

<p>如果你的团队已有使用 Retrofit 的经验，那么坚持使用它可以降低学习曲线并加速开发。</p>

<h3>3. 你需要开箱即用的功能</h3>

<p>Retrofit 提供强大的功能，例如：</p>

<ul>
<li>自动解析 JSON 响应。</li>
<li>内置对 OkHttp 拦截器的支持。</li>
<li>轻松实现重试、缓存和日志记录。</li>
</ul>


<h3>4. 你在多语言环境中工作</h3>

<p>Retrofit 非常适合涉及 Java 和 Kotlin 的项目，因此它对于遗留代码库来说是一个绝佳的选择。</p>

<h3>5.你需要一个庞大的社区和资源</h3>

<p>Retrofit 的成熟意味着丰富的文档、教程和社区支持，这使其成为许多团队更安全的选择。</p>

<h2>何时使用 Ktor？</h2>

<h3>1. 你需要高度可定制性</h3>

<p>Ktor 允许你构建 HTTP 客户端，并对请求构建、日志记录和自定义管道进行细粒度的控制。</p>

<p>例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">client</span> <span class="p">=</span> <span class="n">HttpClient</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">install</span><span class="p">(</span><span class="n">JsonFeature</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">serializer</span> <span class="p">=</span> <span class="n">KotlinxSerializer</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2. 你想利用 Kotlin Multiplatform</h3>

<p>Ktor 的多平台支持是其突出的功能之一。如果你正在为 Android、iOS 和其他平台构建应用程序，Ktor 可确保你在所有平台上使用相同的网络逻辑。</p>

<h3>3. 你正在构建轻量级或模块化应用程序</h3>

<p>Ktor 的模块化设计使其成为轻量级应用程序或网络堆栈需要精简和集中的项目的理想选择。</p>

<h3>4.你需要异步通信</h3>

<p>Ktor 原生使用协程，这使得处理并发比传统的基于回调的方法更简单、更高效。</p>

<h3>5. 你需要统一的后端和前端代码</h3>

<p>借助 Ktor，你可以使用相同的框架构建服务器端 API 和移动应用程序，从而简化开发并确保一致性。</p>

<h2>你应该选择哪一个？</h2>

<p>用一张表格来总结一下两者各自的特点：</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> 特点 </th>
<th style="text-align:center;"> Retrofit </th>
<th style="text-align:center;"> Ktor </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> 易于使用 </td>
<td style="text-align:center;"> 高 </td>
<td style="text-align:center;"> 中等 </td>
</tr>
<tr>
<td style="text-align:center;"> Kotlin-first 设计 </td>
<td style="text-align:center;"> 否 </td>
<td style="text-align:center;"> 是 </td>
</tr>
<tr>
<td style="text-align:center;"> 跨平台支持 </td>
<td style="text-align:center;"> 否 </td>
<td style="text-align:center;"> 是 </td>
</tr>
<tr>
<td style="text-align:center;"> 可定制性 </td>
<td style="text-align:center;"> 中等 </td>
<td style="text-align:center;"> 高 </td>
</tr>
<tr>
<td style="text-align:center;"> 学习曲线 </td>
<td style="text-align:center;"> 低 </td>
<td style="text-align:center;"> 中等 </td>
</tr>
<tr>
<td style="text-align:center;"> 社区支持 </td>
<td style="text-align:center;"> 规模很大 </td>
<td style="text-align:center;"> 快速发展 </td>
</tr>
<tr>
<td style="text-align:center;"> 与协程集成 </td>
<td style="text-align:center;"> 通过添加suspend </td>
<td style="text-align:center;"> 是（集成了原生协程） </td>
</tr>
<tr>
<td style="text-align:center;"> 后端能力 </td>
<td style="text-align:center;"> 否 </td>
<td style="text-align:center;"> 是 </td>
</tr>
</tbody>
</table>


<h3>如果符合以下情况则选择 Retrofit：</h3>

<ul>
<li>你正在开发一个 Kotlin 或 Java 项目，其中简单性和快速开发是首要任务。</li>
<li>你的项目依赖于久经考验的工具和广泛的社区支持。</li>
<li>你需要对 REST API 进行最低限度的配置。</li>
</ul>


<h3>以下情况请选择 Ktor：</h3>

<ul>
<li>你正在构建一个 Kotlin Multiplatform 项目。</li>
<li>你需要一个现代、灵活的网络堆栈。</li>
<li>你需要同时支持前端和后端开发。</li>
</ul>


<h2>结论</h2>

<p>在 Retrofit 和 Ktor 之间进行选择取决于你的项目需求和你的团队对这些工具的熟悉程度。Retrofit 是传统 Android 项目的可靠选择，而 Ktor 则在现代 Kotlin 优先和多平台应用程序中表现出色。了解这些差异将有助于你为下一个 Android 应用做出正确的选择。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一文带你理解OkHttp中的Gzip压缩]]></title>
    <link href="https://alexhilton.github.io/blog/2025/02/25/understanding-okhttp-gzip-compression/"/>
    <updated>2025-02-25T22:28:09+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/02/25/understanding-okhttp-gzip-compression</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自<a href="ttps://medium.com/tech-insider/okhttps-gzip-compression-904919638458">OkHttp’s Gzip Compression</a>，原文发布于2020年5月1日。本文假定读者对HTTP有基本的了解，以及使用过OkHttp，否则理解起来可能会一点困难。</p></blockquote>

<p><strong>译注：</strong> OkHttp确实会自动添加gzip并处理响应。但如果显示的给请求添加除了gzip之外的字段，如&#8221;Accept-Encoding: gzip, deflate, br&#8221;，那么就需要手动处理响应。其实一般时候我们并不需要手动设置，除非是模拟浏览器时（比如用了浏览器的UA），或者某些服务器强制deflate字段。更多的信息可以<a href="https://stackoverflow.com/questions/51901333/okhttp-3-how-to-decompress-gzip-deflate-response-manually-using-java-android">看这里</a>。</p>

<p><a href="https://alexhilton.github.io/blog/2025/02/25/understanding-okhttp-gzip-compression/"><img src="https://img-blog.csdnimg.cn/879e064594104e0ab5671f6710ffea24.png" title="auto auto" ></a></p>

<!-- more -->


<p>压缩是一种简单有效的节省带宽和加快移动用户交互速度的方法。当用户点击你的页面屏幕时，会调用你的服务器来提供请求的响应。响应越大，屏幕上显示数据的时间就越长。通过压缩，即使你的访问者的互联网连接速度非常慢并且你的 API 响应过于繁重，他们也能享受快速加载。</p>

<h2>这是如何工作的呢？</h2>

<p><strong>Gzip 会找到相似的字符串，并用一些占位符临时替换这些字符串，以缩小整体大小。</strong>如果你使用大量重复文本，并且有大量空格， 这也没有问题。你可以使用 Gzip 压缩你的响应主体以及请求主体。由于文件小得多，此操作可大大减少传输时间。</p>

<p><strong>注意：</strong>如果你尝试使用postman，它会默认在header的隐藏部分中添加 Accept-Encoding: gzip字段。</p>

<blockquote><p>重要提示：OkHttp 也会自动在请求中添加字段 Accept-Encoding 并自动识别响应中的 Content-Encoding，因此会自行解压缩响应数据，因此无需单独设置，但假设当我们必须将压缩的请求数据发送到服务器时，我们就必须编写自己的拦截器。</p></blockquote>

<p>这种压缩的棘手之处在于请求者和服务器都知道可以发送压缩文件。你必须告诉服务器您接受这种编码，然后它才会提供。该协议分为两部分：</p>

<ul>
<li>请求者发送一个header，告知服务器它接受压缩内容：Accept-Encoding：gzip</li>
<li>服务器使用此header确认你的请求：Content-Encoding：gzip</li>
</ul>


<p>说得够多的了，我想你还有耐心，所以让我们看一些代码。</p>

<h2>编写自己的拦截器</h2>

<p>先决条件：了解 OkHttp 中的<a href="https://square.github.io/okhttp/features/interceptors/">拦截器（Interceptors）</a>。</p>

<ol>
<li>解开 Gzip 响应：在请求header中添加 Accept-Encoding: gzip，并在获取响应时在其响应header中查找 Content-Encoding: gzip。如果存在则解压缩，否则直接返回响应。</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">okhttp3.Headers</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">okhttp3.Interceptor</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">okhttp3.Request</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">okhttp3.Response</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">okhttp3.ResponseBody</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">okio.GzipSource</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">okio.Okio</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GzipInterceptor</span> <span class="kd">implements</span> <span class="n">Interceptor</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Response</span> <span class="nf">intercept</span><span class="o">(</span><span class="n">Chain</span> <span class="n">chain</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Request</span><span class="o">.</span><span class="na">Builder</span> <span class="n">newRequest</span> <span class="o">=</span> <span class="n">chain</span><span class="o">.</span><span class="na">request</span><span class="o">().</span><span class="na">newBuilder</span><span class="o">();</span>
</span><span class='line'>        <span class="n">newRequest</span><span class="o">.</span><span class="na">addHeader</span><span class="o">(</span><span class="s">&quot;Accept-Encoding&quot;</span><span class="o">,</span> <span class="s">&quot;gzip&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Response</span> <span class="n">response</span> <span class="o">=</span> <span class="n">chain</span><span class="o">.</span><span class="na">proceed</span><span class="o">(</span><span class="n">newRequest</span><span class="o">.</span><span class="na">build</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">isGzipped</span><span class="o">(</span><span class="n">response</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nf">unzip</span><span class="o">(</span><span class="n">response</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">response</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Response</span> <span class="nf">unzip</span><span class="o">(</span><span class="kd">final</span> <span class="n">Response</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="na">body</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">response</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">GzipSource</span> <span class="n">gzipSource</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">GzipSource</span><span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="na">body</span><span class="o">().</span><span class="na">source</span><span class="o">());</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">bodyString</span> <span class="o">=</span> <span class="n">Okio</span><span class="o">.</span><span class="na">buffer</span><span class="o">(</span><span class="n">gzipSource</span><span class="o">).</span><span class="na">readUtf8</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ResponseBody</span> <span class="n">responseBody</span> <span class="o">=</span> <span class="n">ResponseBody</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="na">body</span><span class="o">().</span><span class="na">contentType</span><span class="o">(),</span> <span class="n">bodyString</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Headers</span> <span class="n">strippedHeaders</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">headers</span><span class="o">().</span><span class="na">newBuilder</span><span class="o">()</span>
</span><span class='line'>                <span class="o">.</span><span class="na">removeAll</span><span class="o">(</span><span class="s">&quot;Content-Encoding&quot;</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">removeAll</span><span class="o">(</span><span class="s">&quot;Content-Length&quot;</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">response</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">()</span>
</span><span class='line'>                <span class="o">.</span><span class="na">headers</span><span class="o">(</span><span class="n">strippedHeaders</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">body</span><span class="o">(</span><span class="n">responseBody</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">message</span><span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="na">message</span><span class="o">())</span>
</span><span class='line'>                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Boolean</span> <span class="nf">isGzipped</span><span class="o">(</span><span class="n">Response</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">response</span><span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">&quot;Content-Encoding&quot;</span><span class="o">)</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">response</span><span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">&quot;Content-Encoding&quot;</span><span class="o">).</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;gzip&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>创建 Gzip 请求：如果你的请求过大，那么我们可以使用它来压缩我们的请求。为了通知服务器，我们将在请求header中添加 Content-Encoding: gzip。</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">okhttp3.Interceptor</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">okhttp3.MediaType</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">okhttp3.Request</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">okhttp3.RequestBody</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">okhttp3.Response</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">okio.BufferedSink</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">okio.GzipSink</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">okio.Okio</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GzipInterceptor</span> <span class="kd">implements</span> <span class="n">Interceptor</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span> <span class="kd">public</span> <span class="n">Response</span> <span class="nf">intercept</span><span class="o">(</span><span class="n">Interceptor</span><span class="o">.</span><span class="na">Chain</span> <span class="n">chain</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Request</span> <span class="n">originalRequest</span> <span class="o">=</span> <span class="n">chain</span><span class="o">.</span><span class="na">request</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">originalRequest</span><span class="o">.</span><span class="na">body</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">originalRequest</span><span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">&quot;Content-Encoding&quot;</span><span class="o">)</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">chain</span><span class="o">.</span><span class="na">proceed</span><span class="o">(</span><span class="n">originalRequest</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Request</span> <span class="n">compressedRequest</span> <span class="o">=</span> <span class="n">originalRequest</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">()</span>
</span><span class='line'>                <span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">&quot;Content-Encoding&quot;</span><span class="o">,</span> <span class="s">&quot;gzip&quot;</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">method</span><span class="o">(</span><span class="n">originalRequest</span><span class="o">.</span><span class="na">method</span><span class="o">(),</span> <span class="n">gzip</span><span class="o">(</span><span class="n">originalRequest</span><span class="o">.</span><span class="na">body</span><span class="o">()))</span>
</span><span class='line'>                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">chain</span><span class="o">.</span><span class="na">proceed</span><span class="o">(</span><span class="n">compressedRequest</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">RequestBody</span> <span class="nf">gzip</span><span class="o">(</span><span class="kd">final</span> <span class="n">RequestBody</span> <span class="n">body</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">RequestBody</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span> <span class="kd">public</span> <span class="n">MediaType</span> <span class="nf">contentType</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">body</span><span class="o">.</span><span class="na">contentType</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">long</span> <span class="nf">contentLength</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="c1">// 事先不知道请求内容的长度</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">writeTo</span><span class="o">(</span><span class="n">BufferedSink</span> <span class="n">sink</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">BufferedSink</span> <span class="n">gzipSink</span> <span class="o">=</span> <span class="n">Okio</span><span class="o">.</span><span class="na">buffer</span><span class="o">(</span><span class="k">new</span> <span class="nf">GzipSink</span><span class="o">(</span><span class="n">sink</span><span class="o">));</span>
</span><span class='line'>                <span class="n">body</span><span class="o">.</span><span class="na">writeTo</span><span class="o">(</span><span class="n">gzipSink</span><span class="o">);</span>
</span><span class='line'>                <span class="n">gzipSink</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">};</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>好了，就到这里吧，如果你愿意的话，可以赞一下。</p>

<p>参考资料：</p>

<ol>
<li><a href="https://square.github.io/okhttp/">https://square.github.io/okhttp/</a></li>
<li><a href="https://www.apphp.com/tutorials/index.php?page=gzip-and-deflate-compression-in-web-development">https://www.apphp.com/tutorials/index.php?page=gzip-and-deflate-
compression-in-web-development</a></li>
<li><a href="https://www.youtube.com/watch?v=Mjab_aZsdxw">https://en.wikipedia.org/wiki/Gzip</a></li>
<li><a href="https://www.youtube.com/watch?v=Mjab_aZsdxw">https://www.youtube.com/watch?v=Mjab_aZsdxw</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[详解DiffUtils、Myers算法和 Jetpack Compose]]></title>
    <link href="https://alexhilton.github.io/blog/2025/02/24/diffutils-and-jetpack-compose/"/>
    <updated>2025-02-24T22:33:47+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/02/24/diffutils-and-jetpack-compose</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自<a href="https://proandroiddev.com/diffutils-myers-algorithm-and-jetpack-compose-028c726e574d">《DiffUtils, Myers’ Algorithm and Jetpack Compose》</a>，原文发布于2024年12月27日。</p></blockquote>

<p>在 Android UI 开发领域，DiffUtils 是优化 RecyclerView 中列表更新的必备工具。DiffUtils 是一个实用程序类，它计算将一个列表转换为另一个列表所需的<strong>最小更改</strong>，并仅更新 UI 中已更改的部分，从而<strong>节省性能并减少不必要的重绘</strong>。这个强大的工具依赖于<strong>Myers算法</strong>，这是一种在两个序列之间找到<strong>最短编辑脚本（Shortest edit script）</strong>的有效方法。</p>

<p><a href="https://alexhilton.github.io/blog/2025/02/24/diffutils-and-jetpack-compose/"><img src="https://www.pngmart.com/files/Android-App-Development-PNG-Free-Download.png" title="auto auto" ></a></p>

<!-- more -->


<p>但在 Jetpack Compose 中，是没有DiffUtils的，这又是为什么呢？</p>

<p>在这篇博客中，我将详细分析 DiffUtils 的工作原理、它与 Myers 算法的联系、为什么它是现代 Android 开发的重要组成部分，并探讨为什么 DiffUtil 在 Compose 中是不必要的、Compose 如何优化 UI 更新，以及你应该使用什么来代替。</p>

<p>让我们开始吧！</p>

<h2>DiffUtils 是什么？</h2>

<p>DiffUtils 是 Android 中的一个实用程序，它可以比较两个列表并生成一系列更新操作，例如：</p>

<ul>
<li>插入：添加新项目。</li>
<li>删除：移除过时的项目。</li>
<li>移动：重新排序现有项目。</li>
</ul>


<p>然后可以应用这些操作来有效地更新列表，最大限度地减少不必要的重绘或重新计算。这在 RecyclerView 等性能至关重要的组件中特别有用。</p>

<h3>DiffUtils 的工作原理</h3>

<blockquote><p>DiffUtil 使用 Eugene W. Myers 的差异算法来计算将一个列表转换为另一个列表所需的最少更新次数。Myers 的算法不处理移动的项目，因此 DiffUtil 对结果进行第二次遍历以检测移动的项目。&ndash; <a href="https://developer.android.com/reference/androidx/recyclerview/widget/DiffUtil">https://developer.android.com/reference/androidx/recyclerview/widget/DiffUtil</a></p></blockquote>

<p>Android 中的 DiffUtils 基于 Myers 算法，用于比较列表并找出它们之间的差异。Myers 算法和 DiffUtils 的目标是相同的：确定将一个序列（列表）转换为另一个序列（列表）所需的最小更改次数，包括插入、删除和移动。从本质上讲，DiffUtils 通过识别以下内容来计算两个列表之间的差异：</p>

<ol>
<li>最长公共子序列 (LCS)：新旧列表之间保持不变的元素。</li>
<li>编辑操作：将旧列表转换为新列表所需的插入、删除和移动。</li>
</ol>


<p><strong>关键见解：</strong>
DiffUtils使用 LCS 的概念来最小化更改（插入和删除），并且还针对移动进行了优化——这是基于列表的比较所特有的功能，其中元素不仅被删除和插入，而且还被重新定位。</p>

<h3>Myers 算法：DiffUtils 的基础</h3>

<p>Myers 算法于 1986 年推出，旨在计算两个序列之间的<strong>最短编辑脚本 (SES，Shortest Edit Script)</strong>。它找到将一个序列转换为另一个序列所需的最少操作数。这些操作包括：</p>

<ul>
<li>插入</li>
<li>删除</li>
<li>匹配（按顺序排列的公共元素）</li>
</ul>


<h4>Myers 算法的关键概念</h4>

<p>Myers 算法旨在找到将一个序列（例如，旧列表）转换为另一个序列（新列表）所需的最少<strong>插入、删除和移动</strong>次数。该算法基于<strong>编辑距离（Edit Distance）</strong>的概念，并专门计算将一个序列转换为另一个序列的一系列操作。</p>

<p>Myers 算法在计算<strong>最短的编辑操作序列</strong>方面特别有效，从而最小化所需的总更改次数。核心思想是找到两个序列之间的<strong>最长公共子序列 (LCS)</strong>，然后确定将旧序列转换为新序列的最小操作。</p>

<p>最长公共子序列 (LCS)：Myers 算法首先确定两个列表之间的 LCS。LCS 表示不需要修改的元素。</p>

<p><strong>编辑图：</strong></p>

<ul>
<li>该算法将转换可视化为一个图，其中每条路径
代表一系列操作（插入、删除或匹配）。</li>
<li>通过该图的最短路径对应于最短编辑脚本
（SES）。</li>
</ul>


<p><strong>优化：</strong></p>

<ul>
<li>Myers 算法使用动态规划来减少计算开销，实现高效的 O(ND) 时间复杂度，其中 N 和 D 是序列的长度和它们之间的距离。</li>
</ul>


<h3>DiffUtils 实际应用示例</h3>

<p>让我们考虑两个列表：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// Old list</span>
</span><span class='line'><span class="na">[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</span>
</span><span class='line'><span class="c1">// New List</span>
</span><span class='line'><span class="na">[&quot;a&quot;, &quot;d&quot;, &quot;c&quot;, &quot;b&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li><strong>确定 LCS</strong>：此处的 LCS 为 [&ldquo;a&rdquo;] 。</li>
<li><strong>计算编辑脚本</strong>：</li>
<li>删除“b”（旧列表）。</li>
<li>将“d”移到“c”之前。</li>
<li>在“c”之后插入“b”。</li>
<li><strong>应用更改</strong>：使用这些最少的操作将旧列表转换为新列表。</li>
</ol>


<h3>DiffUtils 在 RecyclerView 中的作用</h3>

<p>在 RecyclerView 中，每次更新都涉及计算哪些项目发生了变化、哪些项目被添加以及哪些项目被删除。单纯地更新整个列表可能会导致卡顿或无响应等性能问题。DiffUtils 通过以下方式解决此问题：</p>

<ul>
<li>最小化更改：仅执行必要的更新。</li>
<li>优化性能：实现流畅的动画和高效的列表更新。</li>
<li>减少重绘：仅重新渲染受影响的项目，从而提高整体 UI 响应能力。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="c1">// 第1步: 创建一个DiffUtil.Callback</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyDiffCallback</span> <span class="kd">extends</span> <span class="n">DiffUtil</span><span class="o">.</span><span class="na">Callback</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">oldList</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">newList</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">MyDiffCallback</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">oldList</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">newList</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">oldList</span> <span class="o">=</span> <span class="n">oldList</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">newList</span> <span class="o">=</span> <span class="n">newList</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getOldListSize</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">oldList</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getNewListSize</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">newList</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">areItemsTheSame</span><span class="o">(</span><span class="kt">int</span> <span class="n">oldItemPosition</span><span class="o">,</span> <span class="kt">int</span> <span class="n">newItemPosition</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">oldList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">oldItemPosition</span><span class="o">).</span><span class="na">equals</span><span class="o">(</span><span class="n">newList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">newItemPosition</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">areContentsTheSame</span><span class="o">(</span><span class="kt">int</span> <span class="n">oldItemPosition</span><span class="o">,</span> <span class="kt">int</span> <span class="n">newItemPosition</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">oldList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">oldItemPosition</span><span class="o">).</span><span class="na">equals</span><span class="o">(</span><span class="n">newList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">newItemPosition</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 第2步: 计算差异</span>
</span><span class='line'><span class="n">DiffUtil</span><span class="o">.</span><span class="na">DiffResult</span> <span class="n">diffResult</span> <span class="o">=</span> <span class="n">DiffUtil</span><span class="o">.</span><span class="na">calculateDiff</span><span class="o">(</span>
</span><span class='line'>    <span class="k">new</span> <span class="nf">MyDiffCallback</span><span class="o">(</span><span class="n">oldList</span><span class="o">,</span> <span class="n">newList</span><span class="o">)</span>
</span><span class='line'><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 第3步: 派发更新</span>
</span><span class='line'><span class="n">myAdapter</span><span class="o">.</span><span class="na">submitList</span><span class="o">(</span><span class="n">newList</span><span class="o">);</span>
</span><span class='line'><span class="n">diffResult</span><span class="o">.</span><span class="na">dispatchUpdatesTo</span><span class="o">(</span><span class="n">myAdapter</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>DiffUtils 是一款功能强大的工具，用于处理 Android 中的列表更新，确保高效且最小的更改。通过利用 Myers 算法，它可以计算出将一个列表转换为另一个列表的最短编辑脚本。了解其工作原理不仅可以提高你对 Android 开发的掌握，还可以帮助你优化 RecyclerView 的性能。</p>

<h2>为什么 Compose 不需要 DiffUtils</h2>

<p>Jetpack Compose 建立在<strong>声明性 UI 原则</strong>之上，这意味着你可以根据当前状态<strong>描述 UI 应该是</strong>什么样子，而 Compose 会处理其余的事情。</p>

<p><strong>命令式 UI（视图）：</strong></p>

<ul>
<li>通过确定需要应用哪些更改，你可以手动更新 UI 组件。</li>
<li>DiffUtil 等工具对于计算列表的最小更新以控制性能必不可少。</li>
</ul>


<p><strong>声明式 UI（Compose）：</strong></p>

<ul>
<li>你描述给定状态下的 UI 应该是什么样子，而不是如何更改它。</li>
<li>Compose 会自动重新组合受状态更改影响的 UI 部分。</li>
</ul>


<p>在 Compose 中，<strong>状态驱动 UI，重组处理更新</strong>。DiffUtils 无需计算增量，因为系统会自动优化要重新渲染的内容。</p>

<p>以下是 Compose 不再需要 DiffUtils 的主要原因：</p>

<ol>
<li><strong>状态驱动的UI</strong></li>
</ol>


<p>在 Compose 中，当状态发生变化时，UI 会自动重组。你无需手动计算列表之间的差异；Compose 会为你处理。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">items</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateListOf</span><span class="p">(</span><span class="s">&quot;Apple&quot;</span><span class="p">,</span> <span class="s">&quot;Banana&quot;</span><span class="p">,</span> <span class="s">&quot;Cherry&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">LazyColumn</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">items</span><span class="p">(</span><span class="n">items</span><span class="p">)</span> <span class="p">{</span> <span class="n">item</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="n">Text</span><span class="p">(</span><span class="n">text</span> <span class="p">=</span> <span class="n">item</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你从 items 中添加或删除项目，Compose 将仅重组 UI 中受影响的部分。无需 DiffUtils！</p>

<ol>
<li><strong>内置优化</strong></li>
</ol>


<p>Compose 使用 LazyColumn 和 LazyRow 中的键来优化项目渲染。通过为每个项目指定一个唯一键，Compose 可以识别哪些项目已更改、已添加或已移除。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">LazyColumn</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">items</span><span class="p">(</span><span class="n">items</span> <span class="p">=</span> <span class="n">yourList</span><span class="p">,</span> <span class="n">key</span> <span class="p">=</span> <span class="p">{</span> <span class="n">item</span> <span class="p">-&gt;</span> <span class="n">item</span><span class="p">.</span><span class="n">id</span> <span class="p">})</span> <span class="p">{</span> <span class="n">item</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="n">Text</span><span class="p">(</span><span class="n">text</span> <span class="p">=</span> <span class="n">item</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>该key确保 Compose 有效地仅更新受影响的项目，类似于 DiffUtils 所做的。</p>

<ol>
<li><strong>智能重组</strong></li>
</ol>


<p>Compose 可以智能地跳过未发生改变的 UI 元素的重组。使用 Remember 和 RememberSaveable 等工具，你可以进一步优化重组行为。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">RememberExample</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">count</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="m">0</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Button</span><span class="p">(</span><span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span> <span class="n">count</span><span class="p">.</span><span class="n">value</span><span class="p">++</span> <span class="p">})</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Clicked ${count.value} times&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 在这里，当状态发生变化时，只有Button中的Text，而不是整个组件，会发生重组</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Compose 中的重组：</strong></p>

<ul>
<li>Compose 会观察状态变化。当特定 UI 元素的状态发生变化时，只会重组该元素（及其依赖项）。</li>
<li>系统会完全跳过未更改的 UI 元素。</li>
</ul>


<p><strong>Views 中的 DiffUtils：</strong></p>

<ul>
<li>需要明确计算列表的新旧状态之间的变化。</li>
<li>然后分派计算出的更改以更新 RecyclerView。</li>
</ul>


<h3>在 Compose 中用什么来代替 DiffUtils</h3>

<p>虽然你不需要 DiffUtils ，但 Compose 提供了实现类似优化的工具：</p>

<ol>
<li>带 Keys 的 LazyColumn</li>
</ol>


<p>使用 key 可以有效地识别和管理列表中的更改。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">LazyColumn</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">items</span><span class="p">(</span><span class="n">items</span> <span class="p">=</span> <span class="n">yourList</span><span class="p">,</span> <span class="n">key</span> <span class="p">=</span> <span class="p">{</span> <span class="n">item</span> <span class="p">-&gt;</span> <span class="n">item</span><span class="p">.</span><span class="n">id</span> <span class="p">})</span> <span class="p">{</span> <span class="n">item</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="n">Text</span><span class="p">(</span><span class="n">text</span> <span class="p">=</span> <span class="n">item</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>SnapshotStateList</li>
</ol>


<p>若要以被动方式管理列表，请使用 SnapshotStateList 。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">items</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateListOf</span><span class="p">(</span><span class="s">&quot;Apple&quot;</span><span class="p">,</span> <span class="s">&quot;Banana&quot;</span><span class="p">,</span> <span class="s">&quot;Cherry&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="n">Button</span><span class="p">(</span><span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span> <span class="n">items</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="s">&quot;Date&quot;</span><span class="p">)</span> <span class="p">})</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Add Item&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">LazyColumn</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">items</span><span class="p">(</span><span class="n">items</span><span class="p">)</span> <span class="p">{</span> <span class="n">item</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="n">Text</span><span class="p">(</span><span class="n">text</span> <span class="p">=</span> <span class="n">item</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>SubcomposeLayout</li>
</ol>


<p>对于复杂的场景，SubcomposeLayout 可以精确控制要重组的内容。</p>

<h2>相关的面试问题</h2>

<ol>
<li>为什么 Jetpack Compose 不需要 DiffUtils ？</li>
</ol>


<p>Compose 依赖于声明性 UI 模型。它会根据状态变化自动更新 UI，无需像 DiffUtil 那样手动计算列表差异。使用 LazyColumn 中的键可确保高效更新，而无需使用外部工具。</p>

<ol>
<li>Jetpack Compose 处理列表更新的方式与 RecyclerView 有何不同？</li>
</ol>


<p>Compose 不依赖手动差异计算 (DiffUtils)，而是观察状态变化并仅重组受影响的组件。这是通过使用键和 Compose 的重组逻辑在内部管理的。</p>

<ol>
<li><p>在 Android 开发中，声明式 UI 与命令式 UI 相比有哪些优势？</p></li>
<li><p>代码更简单：声明式 UI 通过关注内容而不是方式来减少样板代码。</p></li>
<li>自动状态管理：Compose 根据状态变化自动更新 UI。</li>
<li>可测试性提高：无状态可组合项可以独立测试。</li>
<li>一致性：重组确保 UI 始终反映当前状态。</li>
<li><p>Compose 中的重组是什么？它与 RecyclerView 中的传统视图失效有何不同？</p></li>
<li><p>重组：当 Compose 检测到状态变化时发生。它仅重新生成受变化影响的 UI 部分。</p></li>
<li>视图失效：在 RecyclerView 中，失效会触发视图重绘，如果没有 DiffUtil 之类的工具，这可能会很低效。</li>
<li><p>何时应在 Compose 中使用 Remember 和 RememberSaveable？</p></li>
<li><p>使用 Remember 在单个组合生命周期内存储状态。</p></li>
<li>使用 RememberSaveable 在配置更改（如屏幕旋转）期间保留状态。</li>
<li>Compose 如何决定要重组 UI 的哪些部分？</li>
</ol>


<p>Compose 会跟踪每个可组合项中的状态读取。当状态发生变化时，只有读取已更改状态的可组合项才会被重组。</p>

<ol>
<li>在 Compose 中实现 LazyColumn 以显示项目列表并添加按钮来更新列表。确保它能够高效更新。</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">LazyColumnExample</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">items</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateListOf</span><span class="p">(</span><span class="s">&quot;Apple&quot;</span><span class="p">,</span> <span class="s">&quot;Banana&quot;</span><span class="p">,</span> <span class="s">&quot;Cherry&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Column</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Button</span><span class="p">(</span><span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span> <span class="n">items</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="s">&quot;Date&quot;</span><span class="p">)</span> <span class="p">})</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Add Item&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">LazyColumn</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">items</span><span class="p">(</span><span class="n">items</span><span class="p">,</span> <span class="n">key</span> <span class="p">=</span> <span class="p">{</span> <span class="n">it</span> <span class="p">})</span> <span class="p">{</span> <span class="n">item</span> <span class="p">-&gt;</span>
</span><span class='line'>                <span class="n">Text</span><span class="p">(</span><span class="n">text</span> <span class="p">=</span> <span class="n">item</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>识别并修复 Compose 组件中不必要的重组。</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">LazyColumn</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">items</span><span class="p">(</span><span class="n">items</span> <span class="p">=</span> <span class="n">list</span><span class="p">,</span> <span class="n">key</span> <span class="p">=</span> <span class="p">{</span> <span class="n">item</span> <span class="p">-&gt;</span> <span class="n">item</span><span class="p">.</span><span class="n">id</span> <span class="p">})</span> <span class="p">{</span> <span class="n">item</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="n">Text</span><span class="p">(</span><span class="n">text</span> <span class="p">=</span> <span class="n">item</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li><p>诊断 LazyColumn 中的滞后：</p></li>
<li><p>检查关键参数：确保每个项目都有唯一的键。</p></li>
<li>使用分析工具：使用 Android Studio 的Compose 调试器分析重组计数。</li>
<li>优化项目渲染：避免在 LazyColumn 中使用的可组合函数中进行大量计算。</li>
<li>调试列表更新中的不一致行为：</li>
</ol>


<p>确保数据源稳定并符合 UI 预期。使用SnapshotStateList 可以帮助保持反应性。</p>

<ol>
<li>SnapshotStateList 和 ArrayList 之间的区别：</li>
</ol>


<p>SnapshotStateList 是被动的；更改会自动触发 Compose 中的重组。ArrayList 不是被动的，需要手动通知 UI 更新。</p>

<ol>
<li>使用 SubcomposeLayout</li>
</ol>


<p>SubcomposeLayout 是 Jetpack Compose 中一个强大的布局工具，可让你按需组合布局的各个部分。这对于 UI 的某些部分占用大量资源或可能无法立即使用的情况尤其有用，例如从网络或数据库加载图像。SubcomposeLayout 允许按需组合布局的各个部分。</p>

<p>示例：动态加载图像并显示占位符，直到准备好为止。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">ImageWithPlaceholder</span><span class="p">(</span><span class="n">imageUrl</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">placeholder</span><span class="p">:</span> <span class="n">Painter</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Box</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">SubcomposeLayout</span> <span class="p">{</span> <span class="n">constraints</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="c1">// First, compose the placeholder</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">placeholderLayout</span> <span class="p">=</span> <span class="n">subcompose</span><span class="p">(</span><span class="m">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">Image</span><span class="p">(</span><span class="n">painter</span> <span class="p">=</span> <span class="n">placeholder</span><span class="p">,</span> <span class="n">contentDescription</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span> <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">())</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Compose the image once it&#39;s loaded</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">imageLayout</span> <span class="p">=</span> <span class="n">subcompose</span><span class="p">(</span><span class="m">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">AsyncImage</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">model</span> <span class="p">=</span> <span class="n">imageUrl</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">contentDescription</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">(),</span>
</span><span class='line'>                    <span class="n">contentScale</span> <span class="p">=</span> <span class="n">ContentScale</span><span class="p">.</span><span class="n">Crop</span>
</span><span class='line'>                <span class="p">)</span><span class="err">你</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Return the max size for the layout</span>
</span><span class='line'>            <span class="n">layout</span><span class="p">(</span><span class="n">constraints</span><span class="p">.</span><span class="n">maxWidth</span><span class="p">,</span> <span class="n">constraints</span><span class="p">.</span><span class="n">maxHeight</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">placeholderLayout</span><span class="p">[</span><span class="m">0</span><span class="p">].</span><span class="n">measure</span><span class="p">(</span><span class="n">constraints</span><span class="p">).</span><span class="n">placeRelative</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">)</span>
</span><span class='line'>                <span class="n">imageLayout</span><span class="p">[</span><span class="m">0</span><span class="p">].</span><span class="n">measure</span><span class="p">(</span><span class="n">constraints</span><span class="p">).</span><span class="n">placeRelative</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Preview</span>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">ImageWithPlaceholderPreview</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">ImageWithPlaceholder</span><span class="p">(</span>
</span><span class='line'>        <span class="n">imageUrl</span> <span class="p">=</span> <span class="s">&quot;https://www.example.com/image.jpg&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">placeholder</span> <span class="p">=</span> <span class="n">painterResource</span><span class="p">(</span><span class="n">id</span> <span class="p">=</span> <span class="n">R</span><span class="p">.</span><span class="n">drawable</span><span class="p">.</span><span class="n">placeholder_image</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>SubcomposeLayout：此布局允许你根据需要组合布局的各个部分。在这里，我们首先组合占位符，然后在图像准备好后组合图像。</li>
<li>subcompose()：此函数用于组合布局的各个部分。subcompose 函数返回 MeasureResult 对象列表，然后你可以测量这些对象并将其放置在屏幕上。</li>
<li>AsyncImage：我们使用 coil-compose 库中的 AsyncImage 异步加载图像。加载时，会显示占位符。</li>
<li>占位符：首先显示占位符。图像准备好后，它会接管。</li>
</ul>


<p>此方法可帮助你通过减少不必要的重新组合和更优雅地处理图像或数据等动态内容来创建更高效​​的 UI。</p>

<ol>
<li><p>将旧版 RecyclerView 迁移到 Compose：</p></li>
<li><p>用 LazyColumn 替换 RecyclerView。</p></li>
<li>将适配器逻辑移至可组合函数。</li>
<li>使用 Remember 或 SnapshotStateList 进行状态管理。</li>
<li>使用 Keys 进行优化。</li>
</ol>


<h2>结论</h2>

<ul>
<li>Compose 不需要 DiffUtils，因为它建立在声明性和状态驱动的架构上。</li>
<li>带有 key 的 LazyColumn 和 SnapshotStateList 提供类似的优化。</li>
<li>智能重组可确保高效的 UI 更新，从而减少手动优化的需要。</li>
</ul>


<p>通过拥抱 Compose 的声明性特性，你可以专注于构建美观、响应迅速的 UI，而无需担心列表更新的复杂性。</p>

<p>Happy Composing！</p>

<h2>参考文献</h2>

<ol>
<li>Myers, E. (1986)。O(ND) 差分算法及其变体。ACM编程语言和系统事务，1(2)，251–266。</li>
<li><a href="https://developer.android.com/reference/androidx/recyclerview/widget/DiffUtil">Android 开发者文档 — DiffUtils</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compose多平台 (CMP) 开发的四个实用技巧]]></title>
    <link href="https://alexhilton.github.io/blog/2025/02/04/tips-to-migrate-to-kmp/"/>
    <updated>2025-02-04T17:21:07+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/02/04/tips-to-migrate-to-kmp</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自<a href="https://proandroiddev.com/4-useful-tips-for-compose-kotlin-multiplatform-kmp-8809ba1cac51">Four useful tips for Compose Kotlin Multiplatform (KMP)</a></p></blockquote>

<p><strong>译注：</strong> 这篇文章虽然比较短，但提到的问题还是比较具体和典型的，针对CMP项目的一些配置还是很有借鉴意义的。</p>

<p><a href="https://alexhilton.github.io/blog/2025/02/04/tips-to-migrate-to-kmp/"><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j9tap6mygsqvxh6aauc8.png" title="auto auto" ></a></p>

<!-- more -->


<h2>简介</h2>

<p>正如我在上一篇文章<a href="https://medium.com/@lizarraga.iosu/a-complete-migration-of-a-multi-module-app-to-compose-kotlin-multiplatform-kmp-682905266bde">《将多模块应用程序完全迁移到 Compose Kotlin Multiplatform (KMP)》</a>中所说，上个月我一直在将现有的多模块应用程序迁移到 Compose Multiplatform，除此之外，我还从头开始创建一个新的 Compose Multiplatform 多模块项目。在这两个项目中，我都遇到了相同的“问题”或者说“阻碍”，因此，如果您正在迁移或从头开始启动 CMP 项目，那么本文就是为你量身定做的。</p>

<h2>提示 1：预览</h2>

<p>KMP 不支持 commonMain 目录Compose组件的预览，因此我想到了在 androidMain 目录中创建它们，并且它们的预览运行得很好。</p>

<blockquote><p><strong>译注：</strong>此文原文发布于2024年12月初，彼时非Android侧的源码确实无法Preview，后来JetBrains解决了这个问题，通过一个<a href="https://plugins.jetbrains.com/plugin/16541-compose-multiplatform-ide-support">支持桌面Compose的插件</a>。</p></blockquote>

<p>例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>commonMain/com/example/feature/component/FeatureScreen.kt
</span><span class='line'>androidMain/com/example/feature/component/FeatureScreenPreview.kt
</span></code></pre></td></tr></table></div></figure>


<h2>提示 2：BackHandler</h2>

<p>KMP 不支持 BackHandler 操作，因此我创建了一个用于屏幕的expect函数，并在 androidMain 中的actual函数上添加了 BackHandler 操作，并将 iosMain 留空（因为我在 iOS 中没有找到类似的操作）。</p>

<p>例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// commonMain/ com.example.feature.component.FeatureScreen.kt</span>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="n">expect</span> <span class="k">fun</span> <span class="nf">FeatureScreen</span><span class="p">(</span>
</span><span class='line'>    <span class="n">viewModel</span><span class="p">:</span> <span class="n">FeatureScreenViewModel</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">internal</span> <span class="k">fun</span> <span class="nf">Content</span><span class="p">(</span>
</span><span class='line'>    <span class="n">viewModel</span><span class="p">:</span> <span class="n">FeatureScreenViewModel</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// androidMain/ com.example.feature.component.FeatureScreenActual.kt (needs a name different from common)</span>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="n">actual</span> <span class="k">fun</span> <span class="nf">FeatureScreen</span><span class="p">(</span>
</span><span class='line'>    <span class="n">viewModel</span><span class="p">:</span> <span class="n">WorkScreenViewModel</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">BackHandler</span> <span class="p">{</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">onIntent</span><span class="p">(</span><span class="n">WorkIntent</span><span class="p">.</span><span class="n">Back</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Content</span><span class="p">(</span>
</span><span class='line'>        <span class="n">viewModel</span> <span class="p">=</span> <span class="n">viewModel</span><span class="p">,</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// extra: I have joined the preview in this same class to have it better organized.</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// iosMain/ com.example.feature.component.FeatureScreenActual.kt (needs a name different from common)</span>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="n">actual</span> <span class="k">fun</span> <span class="nf">FeatureScreen</span><span class="p">(</span>
</span><span class='line'>    <span class="n">viewModel</span><span class="p">:</span> <span class="n">WorkScreenViewModel</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Content</span><span class="p">(</span>
</span><span class='line'>        <span class="n">viewModel</span> <span class="p">=</span> <span class="n">viewModel</span><span class="p">,</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>提示 3：测试模拟</h2>

<p>我喜欢使用 <a href="https://mockk.io/">mockk</a> 库进行模拟测试，在撰写本文时，KMP 尚不支持该库，因此我决定在 androidUnitTest 目录中创建 UnitTest，并将库依赖项添加到 androidUnitTest.dependencies {} 块中。</p>

<p>对于此类测试，我使用了支持 KMP 的 kotlin-test jetbrains 库。</p>

<p>例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">mockk</span> <span class="p">=</span> <span class="p">{</span> <span class="n">group</span> <span class="p">=</span> <span class="s">&quot;io.mockk&quot;</span><span class="p">,</span> <span class="n">name</span> <span class="p">=</span> <span class="s">&quot;mockk&quot;</span><span class="p">,</span> <span class="n">version</span><span class="p">.</span><span class="n">ref</span> <span class="p">=</span> <span class="s">&quot;mockk-version&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="n">kotlin</span><span class="p">-</span><span class="n">test</span> <span class="p">=</span> <span class="p">{</span> <span class="n">group</span> <span class="p">=</span> <span class="s">&quot;org.jetbrains.kotlin&quot;</span><span class="p">,</span> <span class="n">name</span> <span class="p">=</span> <span class="s">&quot;kotlin-test&quot;</span><span class="p">,</span> <span class="n">version</span><span class="p">.</span><span class="n">ref</span> <span class="p">=</span> <span class="s">&quot;kotlin-version&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// feature build.gradle.kts</span>
</span><span class='line'><span class="n">kotlin</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sourceSets</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">androidUnitTest</span><span class="p">.</span><span class="n">dependencies</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">implementation</span><span class="p">(</span><span class="n">libs</span><span class="p">.</span><span class="n">mockk</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">commonTest</span><span class="p">.</span><span class="n">dependencies</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">implementation</span><span class="p">(</span><span class="n">libs</span><span class="p">.</span><span class="n">kotlin</span><span class="p">.</span><span class="n">test</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>androidUnitTest/com/example/feature/usecase/UseCaseTest.kt
</span></code></pre></td></tr></table></div></figure>


<h2>提示 4：UI 测试</h2>

<p><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/compose-test.html">官方的 Compose 多平台 UI 测试指南</a>指出，必须使用commonTest 目录进行 UI 测试，但我更喜欢使用androidInstrumentedTest目录，因为使用这种方法，我可以将单元测试与 UI 测试分开，并且我可以直接从同一个测试类执行它们，并从目录运行所有 UI 测试。</p>

<p>例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">mockk</span><span class="p">-</span><span class="n">android</span> <span class="p">=</span> <span class="p">{</span> <span class="n">group</span> <span class="p">=</span> <span class="s">&quot;io.mockk&quot;</span><span class="p">,</span> <span class="n">name</span> <span class="p">=</span> <span class="s">&quot;mockk-android&quot;</span><span class="p">,</span> <span class="n">version</span><span class="p">.</span><span class="n">ref</span> <span class="p">=</span> <span class="s">&quot;mockk-version&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="n">ui</span><span class="p">-</span><span class="n">test</span><span class="p">-</span><span class="n">junit4</span><span class="p">-</span><span class="n">android</span> <span class="p">=</span> <span class="p">{</span> <span class="n">group</span> <span class="p">=</span> <span class="s">&quot;androidx.compose.ui&quot;</span><span class="p">,</span> <span class="n">name</span> <span class="p">=</span> <span class="s">&quot;ui-test-junit4-android&quot;</span><span class="p">,</span> <span class="n">version</span><span class="p">.</span><span class="n">ref</span> <span class="p">=</span> <span class="s">&quot;uiTestJunit4AndroidVersion&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="n">ui</span><span class="p">-</span><span class="n">test</span><span class="p">-</span><span class="n">manifest</span> <span class="p">=</span> <span class="p">{</span> <span class="n">group</span> <span class="p">=</span> <span class="s">&quot;androidx.compose.ui&quot;</span><span class="p">,</span> <span class="n">name</span> <span class="p">=</span> <span class="s">&quot;ui-test-manifest&quot;</span><span class="p">,</span> <span class="n">version</span><span class="p">.</span><span class="n">ref</span> <span class="p">=</span> <span class="s">&quot;uiTestManifestVersion&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="n">kotlin</span><span class="p">-</span><span class="n">test</span> <span class="p">=</span> <span class="p">{</span> <span class="n">group</span> <span class="p">=</span> <span class="s">&quot;org.jetbrains.kotlin&quot;</span><span class="p">,</span> <span class="n">name</span> <span class="p">=</span> <span class="s">&quot;kotlin-test&quot;</span><span class="p">,</span> <span class="n">version</span><span class="p">.</span><span class="n">ref</span> <span class="p">=</span> <span class="s">&quot;kotlin-version&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// feature build.gradle.kts</span>
</span><span class='line'><span class="n">plugins</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="n">alias</span><span class="p">(</span><span class="n">libs</span><span class="p">.</span><span class="n">plugins</span><span class="p">.</span><span class="n">compose</span><span class="p">.</span><span class="n">multiplatform</span><span class="p">)</span>
</span><span class='line'>    <span class="n">alias</span><span class="p">(</span><span class="n">libs</span><span class="p">.</span><span class="n">plugins</span><span class="p">.</span><span class="n">compose</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">kotlin</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sourceSets</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">androidInstrumentedTest</span><span class="p">.</span><span class="n">dependencies</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">implementation</span><span class="p">(</span><span class="n">libs</span><span class="p">.</span><span class="n">mockk</span><span class="p">.</span><span class="n">android</span><span class="p">)</span>
</span><span class='line'>            <span class="n">implementation</span><span class="p">(</span><span class="n">libs</span><span class="p">.</span><span class="n">ui</span><span class="p">.</span><span class="n">test</span><span class="p">.</span><span class="n">junit4</span><span class="p">.</span><span class="n">android</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">commonTest</span><span class="p">.</span><span class="n">dependencies</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">implementation</span><span class="p">(</span><span class="n">libs</span><span class="p">.</span><span class="n">kotlin</span><span class="p">.</span><span class="n">test</span><span class="p">)</span>
</span><span class='line'>            <span class="n">@OptIn</span><span class="p">(</span><span class="n">ExperimentalComposeLibrary</span><span class="o">::</span><span class="k">class</span><span class="p">)</span>
</span><span class='line'>            <span class="n">implementation</span><span class="p">(</span><span class="n">compose</span><span class="p">.</span><span class="n">uiTest</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="n">dependencies</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">debugImplementation</span><span class="p">(</span><span class="n">libs</span><span class="p">.</span><span class="n">ui</span><span class="p">.</span><span class="n">test</span><span class="p">.</span><span class="n">manifest</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>androidInstrumentedTest/com/example/feature/component/ScreenAndroidTest.kt
</span></code></pre></td></tr></table></div></figure>


<h2>结论</h2>

<p>在本文中，我们看到了一些 Compose Multiplatform 技巧，希望您觉得它们有用。感谢您阅读本文，欢迎提供任何反馈。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于Android 16你想知道的都在这里]]></title>
    <link href="https://alexhilton.github.io/blog/2025/01/02/android-16-is-comming/"/>
    <updated>2025-01-02T22:14:32+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/01/02/android-16-is-comming</id>
    <content type="html"><![CDATA[<p>2025年的Android新版本来的比2024年稍早了一些。今年Google非常反常地提前就发布了Android的<a href="https://developer.android.com/about/versions/16">新版本Android 16 Baklava</a>，整体的计划比往年提前了2～3个月。另外，谷歌把<a href="https://www.androidfaithful.com/android-16-code-name/">Android 16的代码命名为「Baklava」</a>,这与先前的字母表顺序的点心食物命名方式截然不同，不过「Baklava」巴克拉瓦，又称果仁蜜饼，是一种口味浓郁、甜蜜的土耳其酥皮点心。</p>

<p><a href="https://alexhilton.github.io/blog/2025/01/02/android-16-is-comming/"><img src="https://www.android-user.de/wp-content/uploads/2024/11/20241101-Android-16-Baklava-Beitragsbild.jpg" title="auto auto" ></a></p>

<!-- more -->


<h2>谷歌的发布计划</h2>

<p>从<a href="https://developer.android.com/about/versions/16">官方的消息</a>来看会在24年结束Preview，在25年1月其实是Q1就开始Beta release，并在Q2进入Platform Stability，预计上半年就可能会正式发布，整体的节奏较往年提前了约2～3个月（往年是Q1会有Preview，Q2发布Beta,6~7月左右开始Platform Stability，Q3 9月～10月正式发布）。</p>

<p><img src="file:///Users/alexhilton/Downloads/android-16-release.webp" alt="图1. Android 16的发布计划" /></p>

<p>不过现仍在非常为初始的Preview阶段，后面可能会有变数，官方也没有给具体的计划。但有一点是确定的，那就是今年Android 16的发布肯定较往年会提拉一些，至少提拉2个月。</p>

<p>对于应用开发者来说，更为关心的是API的发布情况，一般情况下API会较系统版本提前一个季度就会正式稳定下来（也即不会再有大的变动），换句话说，今年在Q2就能得到较为稳定的API版本，当然比往年还是有提拉的。</p>

<p><img src="file:///Users/alexhilton/Downloads/android16-api-release.webp" alt="图2. Android 16 API的发布计划" /></p>

<p>发布计划不受我们控制，了解一下就可以了，下面我们看一下如何用条件区分这些新的API。</p>

<h2>区分使用新的API的方式</h2>

<p>如果应用不是运行在最新的版本，那么新的API不应该被执行，因此我们需要用条件来区分不同的API版本，用<a href="https://developer.android.com/reference/android/os/Build.VERSION#SDK_INT">SDK_INT</a>和<a href="https://developer.android.com/reference/android/os/Build.VERSION_CODES">VERSION_CODES</a>就可以做到。当然，需要先在Android Studio中把SDK中的Android 16 Preview版本下载下来才能编译。</p>

<p><img src="file:///Users/alexhilton/Downloads/install-baklava-sdk.png" alt="图3. 升级SDK" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">SDK_INT</span> <span class="p">&gt;=</span> <span class="n">VERSION_CODES</span><span class="p">.</span><span class="n">BAKLAVA</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 使用Android 16中才有的API</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>为了能更细致地区分版本，Android 16新增加了一个新的版本常量<a href="https://developer.android.com/reference/android/os/Build.VERSION#SDK_INT_FULL">SDK_INT_FULL</a>，并在<a href="https://developer.android.com/reference/android/os/Build.VERSION_CODES_FULL">VERSION_CODES_FULL</a>中定义了具体的常量值。它可以粒度更细地检查API的版本，分为Major版本和Minor版本。以往的SDK_INT只能区分大的版本（Major版本），这是它们最大的不同。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">SDK_INT_FULL</span> <span class="p">&gt;=</span> <span class="n">VERSION_CODES_FULL</span><span class="p">.[</span><span class="n">MAJOR</span> <span class="n">or</span> <span class="n">MINOR</span> <span class="n">RELEASE</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 用Major版本或者Minor版本才有的API</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>每个Major版本可能会多个Minor版本，如果不想麻烦，可以用<a href="https://developer.android.com/reference/android/os/Build#getMinorSdkVersion%28int%29">Build.getMinorSdkVersion()</a>来从VERSION_CODES_FULL中取出Minor版本号。</p>

<p><strong>注意：</strong> SDK_INT_FULL，VERSION_CODES_FULL以及getMinorSdkVersion都是Android 16中新增的API，确保把SDK升级到最新才可以编译成功。</p>

<p>接下来我们重点来看一下新一代的Android带来了哪些变化。</p>

<h2>新的功能和新的API</h2>

<p>很不幸，Android 16并没有带来全新的功能。只有一些小的新API。</p>

<h3>用户体验和系统UI</h3>

<p>提供一些的新的API以更好更灵活的控制系统的行为。</p>

<h4>可预见的返回更新</h4>

<p>Android 16增加了新的API以使能手势导航中的可预见返回系统动画，比如从应用返回到桌面的动画。使用新的<a href="https://developer.android.com/reference/android/window/OnBackInvokedDispatcher#PRIORITY_SYSTEM_NAVIGATION_OBSERVER">PRIORITY_SYSTEM_NAVIGATION_OBSERVER</a>向系统注册一个回调<a href="https://developer.android.com/reference/android/window/OnBackInvokedDispatcher#registerOnBackInvokedCallback(int,%20android.window.OnBackInvokedCallback">onBackInvokedCallback</a>)，每当系统处理一个返回导航时就能够收到<a href="https://developer.android.com/reference/android/window/OnBackInvokedCallback#onBackInvoked(">onBackInvoked</a>)回调，而不影响常规的返回导航流程。</p>

<p>Android 16还增加了两个API <a href="https://developer.android.com/reference/android/window/SystemOnBackInvokedCallbacks#finishAndRemoveTaskCallback(android.app.Activity">finishAndRemoveTaskCallback</a>)和<a href="https://developer.android.com/reference/android/window/SystemOnBackInvokedCallbacks#moveTaskToBackCallback(android.app.Activity">moveTaskToBackCallback</a>)。通过向<a href="https://developer.android.com/reference/android/window/OnBackInvokedDispatcher">OnBackInvokedDispatcher</a>注册这些回调，当执行返回手势时系统就能触发具体的行为和播放相关的动画。</p>

<h4>更加丰富的震感反馈</h4>

<p>Android 16增加了<a href="https://developer.android.com/reference/android/os/vibrator/package-summary">震感API</a>，能让应用定义震感效果的振幅和频率的曲线，同时屏蔽设备的差异。</p>

<h3>性能和电池</h3>

<p>Android 16提供了新的API以帮助收集应用的洞察。</p>

<h4>系统触发的分析</h4>

<p><a href="https://developer.android.com/about/versions/15/features#app-start-info">Android 15</a>添加的<a href="https://developer.android.com/reference/android/os/ProfilingManager">ProfilingManager</a>能让应用请求分析数据集。然而，这个分析必须由应用来发起，一些像启动过程以及ANR就很抓取得到（因为应用必须要先正常启动起来后，才能调用ProfilingManager去获取分析数据）。</p>

<p>为了解决这个问题，Android 16在ProfilingManager中增加了系统触发的分析数据。应用可以注册感兴趣的特定场景的trace，诸如冷起动或者ANR，系统会替应用开启和停止trace。trace收集完毕后，结果会传到应用的data目录。</p>

<h3>ApplicationStartInfo中增加Start component</h3>

<p>ApplicationStateInfo是在Android 15增加的，让应用能够看到进程启动原因，启动类型，启动时间等一系列诊断数据。Android 16增加了方法<a href="">getStartComponent</a>以辨识哪种组件类型触发的启动，这对于优化应用启动过程将会非常有帮助。</p>

<h3>更好的（后台）任务反查</h3>

<p>API <a href="https://developer.android.com/reference/android/app/job/JobScheduler#getPendingJobReason(int">JobScheduler#getPendingJobReason()</a>)能返回任何处于待处理的原因。当然，一个任务可能由于很多种原因待处理。</p>

<p>在Android 16中，增加了一个新的API <a href="https://developer.android.com/reference/android/app/job/JobScheduler#getPendingJobReasons(int">JobScheduler#getPendingJobReasons(int jobId)</a>)，用以返回任务处于待处理的多个原因，比如缘于开发者设置了显性的限制或者系统设置的隐性限制。</p>

<p>还增加了一个API <a href="https://developer.android.com/reference/android/app/job/JobScheduler#getPendingJobReasonsHistory(int">JobScheduler#getPendingJobReasonsHistory(int jobId)</a>)，用以返回最近的限制变更列表。</p>

<p>推荐使用这些API来调试为何后台任务没被执行，尤其是当看到特定任务的成功率降低时，或者特定任务完成有延迟时。例如，在后台更新桌面小部件时失败或者预先拉取任务在应用启动前失败等等。</p>

<p>这也能够更好的帮助你明白因为系统定义的限制还是因为显性的限制而导致特定的任务未执行完成。</p>

<h3>自适应刷新频率</h3>

<p>Android 15引入的自适应刷新频率(Adaptive refresh rate ARR)通过离散化的VSync步长能够让屏幕刷新频率适配内容频率。这会降低功耗同时消除潜在的掉帧。</p>

<p>Android 16增加了方法<a href="https://developer.android.com/reference/android/view/Display#hasArrSupport(">hasArrSupport</a>)和方法<a href="https://developer.android.com/reference/android/view/Display#getSuggestedFrameRate(int">getSuggestedFrameRate(int)</a>)以及<a href="https://developer.android.com/reference/android/view/Display#getSupportedRefreshRates(">getSupportedRefreshRates()</a>)，让应用容易利用ARR。Jetpack中的很多组件在内部实现上已经利用ARR以增强平滑的滑动，详细的可<a href="https://developer.android.com/media/optimize/performance/frame-rate">参见了此文章</a>。</p>

<h3>连接</h3>

<p>WiFi可以用来室内定位，Android 16增加了对WiFi位置安全性的支持，通过<a href="https://developer.android.com/reference/android/net/wifi/rtt/SecureRangingConfig">这个特性</a>。</p>

<h3>媒体</h3>

<h4>照片选择增强</h4>

<p><a href="https://developer.android.com/training/data-storage/shared/photopicker">照片选择器(photo picker)</a>提供了一个安全且内置的方式让应用在用户授权的情况下从存储中选择媒体文件。</p>

<p>Android 16带来的增强点有：</p>

<ul>
<li>嵌入式的图片选择器：<a href="https://developer.android.com/reference/android/widget/photopicker/package-summary">新的API</a>能够让应用把图片选择器嵌入到自己的视图中。这会让图片选择看起来更像是应用整体的一部分。后续的Jetpack中会提供可嵌入的图片选择器。</li>
<li>图片选择器支持云搜索：<a href="https://developer.android.com/sdk/api_diff/b-dp2-incr/changes/pkg_android.provider">新的API</a>在图片选择器将支持云搜索。</li>
</ul>


<h3>隐私</h3>

<h4>健康连接更新</h4>

<p>开发者Preview版本中的健康连接增加了ACTIVITY_INTENSITY（活动强度），依据世界健康组织（WHO）给出的指南中定义的一个新的数据类型。每一条记录将必须包括开始时间，结束时间以及活动强度。</p>

<h4>隐私沙盒</h4>

<p>Android 16集成了<a href="https://developers.google.com/privacy-sandbox/overview/android">Android隐私沙盒</a>的最新版本，这是一项为保护用户隐私而持续进行的工作。可以查看<a href="https://developer.android.com/design-for-safety/privacy-sandbox/program-overview">网站内容</a>以了解更多。</p>

<h2>行为变更</h2>

<p>比起新的API，Android 16带来的行为变更更值得我们关注，因为这会直接影响所有应用，无论targetSdkVersion是否是Baklava。</p>

<h3>核心功能</h3>

<h4>JobScheduler配额优化</h4>

<p>从Android 16开始，以基于以下因素来调整常规任务和加急任务的运行时配额：</p>

<ul>
<li>应用处于<a href="https://developer.android.com/topic/performance/appstandby">哪个等待区</a>：在Android 16中，活跃的等待区会减少限制。</li>
<li>如果任务开始执行时应用处于头部状态：在Android 16中，任务启动时，如果应用是用户可见的且应用变成可见后仍在继续执行，会加入到运行时配额中。</li>
<li>如果任务执行时正在运行一个前台服务：在Android 16中，当正在执行一个前台服务时，正在执行的任务将加入到运行时配额中。如果任务是用于用户数据传送，建议<a href="https://developer.android.com/develop/background-work/background-tasks/uidt">考虑替换方案</a>。</li>
</ul>


<p>这些变动将会影响由WorkManager，JobScheduler和DownloadManager调度的任务。如果要调试为何一个任务被终止了，建议通过调用<a href="https://developer.android.com/reference/androidx/work/WorkInfo#getStopReason(">WorkInfo.getStopReason()</a>)来打印日志。</p>

<p>也可以通过Android 16新增加的API <a href="https://developer.android.com/partners/android-16/features#feature-pending-job-reason-history">JobScheduler#getPendingJobReasonsHistory</a>来了解为何任务未执行。</p>

<p>另外，在Android 16上还可以通过adb命令强制调整运行时任务配额，以方便测试：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'><span class="c"># 取消头部状态配额限制</span>
</span><span class='line'>adb shell am compat <span class="nb">enable </span>OVERRIDE_QUOTA_ENFORCEMENT_TO_TOP_STARTED_JOBS &lt;APP_PACKAGE_NAME&gt;
</span><span class='line'>
</span><span class='line'><span class="c"># 设置等待区</span>
</span><span class='line'>adb shell am <span class="nb">set</span>-standby-bucket &lt;APP_PACKAGE_NAME&gt; active<span class="p">|</span>working_set<span class="p">|</span>frequent<span class="p">|</span>rare<span class="p">|</span>restricted
</span><span class='line'>
</span><span class='line'><span class="c"># 获取所处的等待区状态</span>
</span><span class='line'>adb shell am get-standby-bucket &lt;APP_PACKAGE_NAME&gt;
</span></code></pre></td></tr></table></div></figure>


<h3>用户体验和系统UI</h3>

<p>Android 16废弃了无障碍公告(announcement)，一种使用<a href="https://developer.android.com/reference/android/view/View#announceForAccessibility(java.lang.CharSequence">announceForAccessibility</a>)或者派发<a href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent#TYPE_ANNOUNCEMENT">TYPE_ANNOUNCEMENT</a>引起的无障碍事件。这些公告会造成Talkback和屏幕发声的混乱，容易被滥用，一些可行的替换方案有：</p>

<ul>
<li>对于像窗口变化之类的极重要的UI变化，可以用<a href="https://developer.android.com/reference/android/app/Activity#setTitle(java.lang.CharSequence">Activity.setTitle(CharSequence)</a>)和<a href="https://developer.android.com/reference/android/view/View#setAccessibilityPaneTitle(java.lang.CharSequence">setAccessibilityPaneTitle(java.lang.CharSequence)</a>)。在Compose中使用<a href="https://developer.android.com/reference/kotlin/androidx/compose/ui/semantics/package-summary#(androidx.compose.ui.semantics.SemanticsPropertyReceiver">Modifier.semantics { paneTitle = &ldquo;paneTitle&rdquo; }</a>.liveRegion)。</li>
<li>告知用户重要UI变化，使用<a href="https://developer.android.com/reference/android/view/View#setAccessibilityLiveRegion(int">setAccessibilityLiveRegion(int)</a>)。在Compose中，用<a href="https://developer.android.com/reference/kotlin/androidx/compose/ui/semantics/package-summary#(androidx.compose.ui.semantics.SemanticsPropertyReceiver">Modifier.semantics { liveRegion = LiveRegionMode.[Polite|Assertive]}</a>.liveRegion)。这些也要小心使用，因为每当View刷新就会触发一个无障碍事件。</li>
<li>通知用户有错误，发送一个类型为<a href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent#CONTENT_CHANGE_TYPE_ERROR">AccessibilityEvent#CONTENT_CHANGE_TYPE_ERROR</a>的无障碍事件，并且设置<a href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo#setError(java.lang.CharSequence">AccessibilityNodeInfo#setError(CharSequence)</a>)，或者<a href="https://developer.android.com/reference/android/widget/TextView#setError(java.lang.CharSequence">TextView#setError(CharSequence)</a>)。</li>
</ul>


<p>可以<a href="https://developer.android.com/reference/android/view/View#announceForAccessibility(java.lang.CharSequence">看文档</a>)以了解废弃announceForAccessibility的细节以及推荐的替代方案。</p>

<h2>适配建议</h2>

<p>到目前为止，我们能了解到的Android 16的变化就这么多，总的来看增量变化并不多，新的API 都是一些小的细节上的增强；行为的变更也很少很少，只涉及后台任务和无障碍。新的API不会影响现有的应用，行为变更也不多，可以说对于绝大多数应用来说影响甚微。</p>

<p>现在仍是开发者Preview阶段，只有亲儿子Pixel系列会收到OTA版本，我们了解一下就可以了。即使是应用可能会受到行为变更的影响，也不用着急，建议再等2～3个月，等到有更多的厂商发出Beta版本了，并且API也稳定了时再做适配也不迟。</p>

<h2>References</h2>

<ul>
<li><a href="https://developer.android.com/about/versions/16/features">Features and APIs</a></li>
<li><a href="https://android-developers.googleblog.com/2024/11/the-first-developer-preview-android16.html">The First Developer Preview of Android 16</a></li>
<li><a href="https://android-developers.googleblog.com/2024/12/second-developer-preview-android16.html">The Second Developer Preview of Android 16</a></li>
<li><a href="https://developer.android.com/about/versions/16/behavior-changes-16">Behavior changes: Apps targeting Android 16 or higher</a></li>
<li><a href="https://developer.android.com/about/versions/16/behavior-changes-all">Behavior changes: all apps</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[群星闪耀的大前端开发]]></title>
    <link href="https://alexhilton.github.io/blog/2024/12/10/a-brief-history-of-cross-platform-development/"/>
    <updated>2024-12-10T22:01:05+08:00</updated>
    <id>https://alexhilton.github.io/blog/2024/12/10/a-brief-history-of-cross-platform-development</id>
    <content type="html"><![CDATA[<p>乔帮主发布iPhone以降，把世界推向了智能手机时代，随之而来的是移动互联网大潮，一时间移动应用开发变得炙手可热起来，渐渐的超越了传统桌面端和传统前端，成为了主流。随之而来的就是重复开发的问题，同样的业务需要在Android上面实现一次，在iOS上面实现一次，通常也需要在Mobile Web（移动端H5）实现一次，自此跨端开发成了移动互联时代一个必须要攻克的难题。</p>

<p><a href="https://alexhilton.github.io/blog/2024/12/10/a-brief-history-of-cross-platform-development/"><img src="https://www.ropstam.com/wp-content/uploads/2023/09/Best-Cross-Platform-App-Development-Frameworks.jpg" title="auto auto" ></a></p>

<!-- more -->


<h2>大前端开发简史</h2>

<p>工程师的使命是<strong>把不可能变可能，把可能变简单，把简单变优雅</strong>。如果能用同一套代码在不同的端侧都运行，那将是再美好不过的了，毕竟对于端侧业务逻辑一样的，但却要用不同的编程语言，不同的框架，不同的平台，不同的团队各开发一次。如果能够做到「开发一次，多端运行」，将极大的节省人力物力和财力，开发效率也将大大提升。遂业界一直在探索如何跨移动端开发，也即只用一套代码，开发一次，就可以在Android端，iOS端和移动Web端三端运行。</p>

<h3>史前时代：Hybrid app</h3>

<p>最先出来的框架是Hybrid app（<a href="https://phonegap.com/">PhoneGap</a>和<a href="https://cordova.apache.org/docs/en/latest/">Cordova</a>），利用Android端和iOS端都对WebView有较好的支持，因此用移动前端（也即网页）的方式来开发应用，绝大多数的业务逻辑都在网页里，Android端和iOS端都是用WebView去展示网页，对于JavaScript在网页中无法实现的，与平台强相关的事情可以通过JavaScript Bridge来调用平台实现的API，称之为JsBridge。</p>

<p>这种架构非常简单，对于Android和iOS来说，使用一个WebView，再实现一些native API就可以了，其余的都是标准的移动前端。得益于平台对HTML 5的支持，以及像jQuery Mobile等优秀的前端库的加持，无论是开发体验还是使用体验，Hybrid app并不差。最重的是它跨平台性特别好，性价比超高，对于UI部分很重，交互 也不复杂的以展示为主的页面来说，这是性价比超高的实现方式。</p>

<p>这个可以称之为史前时代。</p>

<h3>黑暗时代：不成熟的各种尝试</h3>

<p>Hybrid app方式虽然可行，但在不同的终端上面体验差距很明显。对于性能较好的中高端设备，因为设备整体性能较好，Hybrid app体验尚可，虽然与原生UI相比仍有差距，但属于可接受范围。但对于中低端设备来说，WebView不但性能差，而且兼容性不好，体验严重差于原生UI。另外，如果UI交互变得复杂，或者对体验和实时性操作要求比较高（如文档编辑类等）Hybrid方式与原生更是相距甚远。工程师们开始尝试新的方案。</p>

<p>比如坊间有用json格式来定义UI，定义好格式后，每个端拿到一坨json数据解析，然后生成UI。这其实都算不上是框架，其实就是用json来描述一个页面，解析与构建UI仍是由每个端自己搞，顶多算是一种UI描述格式。但难以通用，并且只能描述UI的静态结构，无法有动态的行为之类的。这种方案也曾有不少大厂用过，它非常适用于局部的，并不复杂的UI，业务逻辑固定，但UI排版样式可能随时会变页面。但要说用它来写整个应用，是不现实的。</p>

<p>这期间Google也做了尝试，搞出一个叫做<a href="https://developers.google.com/j2objc">j2objc的工具</a>，它能把Java代码翻译 成为Objective&#45;C代码，转换后的Objective-C代码无需修改可以直接编译运行。显然，这个工具并不适用于UI，因为UI都是与平台强相关的，需要大量的依赖于平台的SDK，并不是把代码「翻译」过来就完事了。这个工具适用于非UI部分的业务逻辑代码，效果也非常的好，经其转换后的代码可以直接编译运行。据说Google自己也在用，当时的GMS产品Google Inbox等都用j2objc达到了70%代码共用。</p>

<p>这是大前端的一个黑暗时代，虽然大家都在尝试，但始终没有一个比较理想的完整的解决方案。</p>

<h3>黎明的署光：划时代的ReactNative</h3>

<p>Hybrid方式最大的问题在于WebView是性能和体验的瓶颈，WebView之所以是瓶颈 在于它是一个完全的浏览器，它要完全支持JavaScript，HTML和CSS。但随着HTML5和Web前端技术的发展，有很多库可能只用JavaScript来实现。JavaScript独立出来与Node.js结合（严谨的说是JS引挚），同样可以做前端，但却少了HTML和CSS的拖累，沿着这个思路非死不可（彼时叫做Facebook，现在叫做Meta）推出了一个跨移动端平台的开发框架ReactNative。它是基于Facebook的React框架，做了面向移动端的延伸。它的主要实现方法是用React来写页面，这是一个基于JavaScript语言的声明式UI框架，加入了一个虚拟DOM层，用以屏蔽频繁的DOM改动，然后再把虚拟DOM转成一个渲染树，最后由Node开出口子，把渲染树用Native的API去实现，由此实现了原生UI。</p>

<p>ReactNative可以实现跨三端，页面用React写好后，不用修改就可以在Web，Android和iOS上运行。一经发布引发了巨大反响，坊间众人皆拍大腿「卧草，还可以这样玩儿啊！」。</p>

<p>ReactNative是划时代的，因为它确定了跨端框架的基本结构：声明式UI，虚拟DOM和渲染树，用原生API去实现渲染树（映射为Native的组件，或者用Native graphics API去实现渲染树）。后续的跨端框架基本上都是这个路子。</p>

<h3>群星闪耀的当下</h3>

<p>时光荏苒，移动互联大潮已经过了十几年，技术也层出不穷，新的框架在不断的涌现。现如今跨端这一领域百花齐放，群星闪耀，各大框架经过几年的沉淀与发展已经比较成熟。除了<a href="https://reactnative.dev/">ReactNative</a>以外，还有了NativeScript，Flutter以及CMP。这其中<a href="https://nativescript.org/">NativeScript</a>其实与ReactNative差不多，唯一的区别在于它允许用JavaScript家族语言（如<a href="https://www.typescriptlang.org/">TypeScript</a>和<a href="https://coffeescript.org/">CoffeeScript</a>），以及不限制开发框架，可以用Vue.js或者Angular.js来写UI。</p>

<p>当然，最为广泛流行，业界使用最多的当属于Flutter和ReactNative，CMP作为一颗新星也越来越受关注。</p>

<h2>流行框架对比</h2>

<p>这里简要对比一下最为流行的ReactNative和Flutter以及新星CMP，以方便使用者做出更好的选择。</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> 框架 </th>
<th style="text-align:center;"> 开发者 </th>
<th style="text-align:center;"> 开发语言 </th>
<th style="text-align:center;"> UI开发库 </th>
<th style="text-align:center;"> 支持的端 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> ReactNative </td>
<td style="text-align:center;"> Meta </td>
<td style="text-align:center;"> JavaScript </td>
<td style="text-align:center;"> React </td>
<td style="text-align:center;"> Android, iOS, Web </td>
</tr>
<tr>
<td style="text-align:center;"> Flutter </td>
<td style="text-align:center;"> Google </td>
<td style="text-align:center;"> Dart </td>
<td style="text-align:center;"> </td>
<td style="text-align:center;"> Android, iOS, Desktop, Web </td>
</tr>
<tr>
<td style="text-align:center;"> CMP </td>
<td style="text-align:center;"> JetBrains </td>
<td style="text-align:center;"> Kotlin </td>
<td style="text-align:center;"> Jetpack Compose </td>
<td style="text-align:center;"> Android, iOS, Desktop, Web </td>
</tr>
</tbody>
</table>


<p>ReactNative和Flutter都相对较成熟和稳定了，使用者也较多，社区很活跃。ReactNative更适合移动端，而Flutter能跨的端和CMP要更多一些。此外，Flutter和CMP与其他框架最大的区别在于它使用Skia库构建了一个渲染引挚，可以直接把渲染树渲染成为平台支持的更为底层的canvas，直接接入native层的graphics API而不是映射成native组件，为此，它的渲染效率更为高效一些，进而性能更优一些，可以把它们想像成为一个浏览器。</p>

<p>技术栈也不一样，ReactNative是基于Node和JavaScript，属于前端技术栈，与前端融合更为紧密一些；而CMP是基于Kotlin和JVM与Android更为紧密一些，属于Java派系；而Flutter自成一派。</p>

<h2>选择是痛苦的</h2>

<p>实事求是的来说<a href="https://flutter.dev/">Flutter</a>是当前最为成熟 也最为完备的一个跨端框架，只不过可能学习成本略大，对于大部分同学来说Dart是一门小众的编程语言。而ReactNative最大的问题就在于React，它太前端化了，对于客户端同学来说写一坨HTML式的标签还是相当难受的。</p>

<p>应该说Flutter已经非常成功了，达到了它应该有高度，实现了它的价值，换句话说它的前景也不是特别明朗了，因为它已经很成熟了，所以有传言谷歌内部也在裁撤Flutter的研发资源。ReactNative也一样，这么多年了，版本还没有到1.0。</p>

<p><img src="https://blog.droidchef.dev/content/images/size/w1000/2022/11/Flutter-vs-Jetpack-Compose-Header--2-.png" alt="图1. Flutter vs CMP" /></p>

<p>而CMP刚刚兴起，使用起来非常的方便和简单，它的安装与配置是所有框架之中最为简便的（只需要安装一个Android Studio的插件，其余的都是编译插件和依赖，并不像Flutter和ReactNative都需要在开发机器上安装其他东西），前途无量，非常值得投入。并且Flutter对于谷歌来说九牛一毛，是非常不起眼的东西，谷歌毕竟家大业大，像谷歌和Meta等巨头现在都在狂卷AI，其他的小业务都不受重视。</p>

<p>但CMP不一样，JetBrains本身就是专门搞开发工具的，这是他们的主业肯定 会好好搞，把CMP与其IDE深度结合，对于开发者使用起来那就相当的方便了。事实上JetBrains已经开始弄了，它的最新的<a href="https://www.jetbrains.com/fleet/">IDE Fleet</a>（一个通用的IDE）将会深度绑定CMP，非常值得期待。</p>

<p>综合考虑，给出的建议就是如果是<strong>一个纯新的项目，特别是MVP阶段，不要犹豫就是用Flutter</strong>。而如果是<strong>现有项目，想要跨端，就选择CMP</strong>，它是对现有项目最为友好的一个。除非你是资源前端且是React粉，否则不要考虑ReactNative。</p>

<h2>框架只能解决一部分问题</h2>

<p>最后想说的是，对于跨端开发，框架只能解决一小部分问题。</p>

<p>跨端开发最难的地方在于合理的架构和团队的协同。架构需要做好层与层的隔离，特别是把与平台强相关的API做好隔离层，以最大限度 的共用代码，如果到处都是粗粒度的平台相关的实现，复杂度将急剧上升，那最后会变成多端的拼盘而非一个跨端项目。人员的协作应该以功能为单位来划分而不能再以端的维度，要彻底消灭端的思维，要以UI，功能和业务逻辑角度来思考问题，这样才能更好的协作。总之跨端对团队的要求更高，否则只会制造更多的问题。</p>

<p>人的问题永远要比技术问题要复杂一些，举个最简单的例子，以往每个端各自为政，Android端某个同学犯了错，顶多就是Android端不能用了，可能最多就3.25。真跨端了以后，再犯错那可就是所有端都搞挂了，可能最少是3.25起步，这里头的差别还是相当大的，如果没有强有力的大一点的老板来推，是很难推得动的。</p>

<p>研发同学都喜欢折腾，光完成业务是很无聊的，也不可能出成绩，都想方设法的搞出点「技术产出」（俗称造轮子）。记得ReactNative刚出来时，坊间很热情都在把其引入到各自的业务中去，但最终的结果是，没有人会真的在业务中重点使用，而是都花心思搞出了一套属于自己的跨端框架，并且向其他团队推广。年终汇报时，PPT很漂亮：「老板您看，我们不光完成了业务，还搞了一套跨端框架，它比ReactNative好在哪里，已经在我们的业务使用了，也给其他团队推广了」。相反，假如你真的使用了跨端，你咋 汇报？「老板，您看，我们用了别人的跨端技术，成功的实现了跨端，原来三个端15个人能做完的事情，现在只需要8个人！」。老板听了，很激动，3.25终于找到人选了，开猿节流也有着落了！</p>

<p>Anyway，总的来说跨端开发更适合业务不复杂，UI交互也不重的中小型App，或者那种UI占比较小非UI逻辑占比大的应用（最典型的就是浏览器），才能发挥出最大的价值。一个比较简单的判断标准就是，如果每个端的研发人员都超过10个人，可能就不太适合用跨平台的开发方式。</p>

<h2>References</h2>

<ul>
<li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/cross-platform-frameworks.html">The Six Most Popular Cross-Platform App Development Frameworks</a></li>
<li><a href="https://developers.google.com/j2objc">What J2ObjC is</a></li>
<li><a href="https://github.com/google/j2objc">A Java to iOS Objective-C translation tool and runtime.</a></li>
<li><a href="https://hackernoon.com/getting-started-with-react-native-for-windows-and-macos">Getting started with React Native for Windows &amp; macOS</a></li>
<li><a href="https://medium.com/@ankit-detroja/react-native-or-flutter-in-2024-7cfb0605698f">React native or Flutter in 2024</a></li>
<li><a href="https://leancode.co/blog/flutter-vs-react-native">Flutter vs. React Native: A Detailed Comparison for 2024</a></li>
<li><a href="https://nateshmbhat.medium.com/flutter-vs-react-native-performance-benchmarks-you-cant-miss-%EF%B8%8F-2e31905df9b4">Flutter Vs React Native : Performance Benchmarks you can’t miss ! 🔥⚡️ [Part -1]</a></li>
<li><a href="https://medium.com/newsoft-official/compose-multiplatform-vs-flutter-771673612c61">Compose Multiplatform VS. Flutter</a></li>
<li><a href="https://infinitelambda.com/flutter-kotlin-multiplatform-native-comparison/">FLUTTER VS KOTLIN MULTIPLATFORM VS NATIVE</a></li>
<li><a href="https://www.miquido.com/blog/kotlin-multiplatform-vs-flutter/">Flutter vs. Kotlin Multiplatform Mobile</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[实战：把一个现有的Compose项目转化为CMP项目]]></title>
    <link href="https://alexhilton.github.io/blog/2024/12/09/migrate-existing-project-to-cmp/"/>
    <updated>2024-12-09T22:09:28+08:00</updated>
    <id>https://alexhilton.github.io/blog/2024/12/09/migrate-existing-project-to-cmp</id>
    <content type="html"><![CDATA[<p>通过<a href="https://juejin.cn/column/7367555191338467337">前面两篇文章</a>的学习，我们已经对CMP有了一定的了解，接下来要进入实战阶段。在现实的世界中极小数项目会从0开始，今天重点研究一下如何把一个现成的用Jetpack Compose开发的Android项目转成CMP项目。</p>

<p><a href="https://alexhilton.github.io/blog/2024/12/09/migrate-existing-project-to-cmp/"><img src="https://www.mouritech.com/wp-content/uploads/2024/01/Compose-Multiplatform.png" title="auto auto" ></a></p>

<!-- more -->


<h2>总体思路</h2>

<p>在前面的文章<a href="https://juejin.cn/post/7439251025385996307">Compose大前端从上车到起飞</a>里面我们学习到了，CMP对Android开发同学是相当友好的，CMP项目与Android项目在项目结构上面是非常相似的。并且因为CMP的开发IDE就是Android Studio，因此，可以直接把一个Android项目改造成为CMP项目，而不是创建一个全新的CMP项目之后把项目代码移动进去。</p>

<p>具体的步骤如下：</p>

<ol>
<li>添加CMP的插件，添加源码集合，配置CMP的依赖</li>
<li>把代码从「androidMain」移动到「commonMain」中去</li>
<li>把资源转换成为CMP方式</li>
<li>添加并适配其他平台</li>
</ol>


<p><strong>小贴士：</strong> 针对 不同的类型的任务需要采取 不同的策略，比如开发功能的时候使用「自上而下」的方式要更为好一些，因为先关注大粒度的组件，类与方法，不被细节拖住，更有利于我们看清架构和优先解决掉重点问题；但当做移植任务时，应该采用「自下而上」，因为依赖是一层套一层，先把下面的移好，上面的自然就会更加容易。</p>

<p>这里选用的项目是先前用纯Jetpack Compose开发的<a href="https://github.com/alexhilton/Aeolus">一款天气应用</a>，项目比较简单，依赖不多，完全是用Jetpack Compose实现的UI，也符合<a href="https://juejin.cn/post/7411812014047461387">现代应用开发架构原则</a>，非常适合当作案例。</p>

<p><strong>注意：</strong> 其实这里的项目并没有严格要求，只要是一个能运行的Android项目即可，其他的（是不是Jetpack Compose实现的，用的是不是Kotlin）并不是最关键的。因为CMP项目对于每个源码集合本身并没有明确的要求，前面的文章也讲了，每个平台的源码集合，其实就是其平台的完整的项目。移植的目的就是把 <strong>可共用共享</strong> 的代码从现有项目中抽出来放进「commonMain」中，即可以是原有的业务逻辑，也可以是新开发的代码。采用新技术或者新工具的一个非常重要的原则 就是要循序渐进，不搞一刀切。如果时间不充裕，完全可以新功能和新代码先用CMP方式开发，老代码暂且不动它，待日后慢慢再移植。当然了，纯Jetpack Compose实现的项目移植过程会相对容易一些。</p>

<p>下面我们进行详细的一步一步的实践。</p>

<h2>配置CMP的插件，源码集合和依赖</h2>

<p>首先要做的是配置Gradle构建插件（这是把Gradle常用的Tasks等打包成为一个构建 插件，是编译过程中使用的）：</p>

<ul>
<li>使用Kotlin Multiplatform（「org.jetbrains.kotlin.multiplatform」）替换Kotlin Android（「org.jetbrains.kotlin.android」），这个主要是Kotlin语言的东西，版本号就是Kotlin的版本号，注意要与其他（如KSP，如Coroutines）版本进行匹配；</li>
<li>添加Compose compiler（「org.jetbrains.kotlin.plugin.compose」）的插件，版本号要与Kotlin版本号保持一致；</li>
<li>以及添加Compose Multiplatform（org.jetbrains.compose」）插件，版本号是CMP的版本号。</li>
</ul>


<p>注意，构建插件配置是修改项目根目录的那个build.gradle.kts：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span>
</span><span class='line'><span class="n">plugins</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">id</span><span class="p">(</span><span class="s">&quot;com.android.application&quot;</span><span class="p">)</span> <span class="n">version</span> <span class="s">&quot;8.1.4&quot;</span> <span class="n">apply</span> <span class="k">false</span>
</span><span class='line'>    <span class="n">id</span><span class="p">(</span><span class="s">&quot;com.android.library&quot;</span><span class="p">)</span> <span class="n">version</span> <span class="s">&quot;8.1.4&quot;</span> <span class="n">apply</span> <span class="k">false</span>
</span><span class='line'>    <span class="n">id</span><span class="p">(</span><span class="s">&quot;org.jetbrains.kotlin.multiplatform&quot;</span><span class="p">)</span> <span class="n">version</span> <span class="s">&quot;2.0.21&quot;</span> <span class="n">apply</span> <span class="k">false</span>
</span><span class='line'>    <span class="n">id</span><span class="p">(</span><span class="s">&quot;com.google.devtools.ksp&quot;</span><span class="p">)</span> <span class="n">version</span> <span class="s">&quot;2.0.21-1.0.28&quot;</span> <span class="n">apply</span> <span class="k">false</span>
</span><span class='line'>    <span class="n">id</span><span class="p">(</span><span class="s">&quot;org.jetbrains.kotlin.plugin.compose&quot;</span><span class="p">)</span> <span class="n">version</span> <span class="s">&quot;2.0.21&quot;</span> <span class="n">apply</span> <span class="k">false</span>
</span><span class='line'>    <span class="n">id</span><span class="p">(</span><span class="s">&quot;org.jetbrains.compose&quot;</span><span class="p">)</span> <span class="n">version</span> <span class="s">&quot;1.7.0&quot;</span> <span class="n">apply</span> <span class="k">false</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>之后是修改module的build.gradle.kts，先是启用需要的插件，然后是添加kotlin相关的配置（即DSL kotlin {&hellip;}），在其中指定需要编译的目标，源码集合以及其依赖，具体的可以仿照着CMP的demo去照抄就好了。对于依赖，可以把其都从顶层DSL dependencies中移动到androidMain.dependencies里面，如果有无法移动的就先放在原来的位置，暂不动它，最终build.gradle.kts会是酱紫：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">plugins</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">id</span><span class="p">(</span><span class="s">&quot;com.android.application&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">id</span><span class="p">(</span><span class="s">&quot;com.google.devtools.ksp&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">id</span><span class="p">(</span><span class="s">&quot;org.jetbrains.kotlin.multiplatform&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">id</span><span class="p">(</span><span class="s">&quot;org.jetbrains.kotlin.plugin.compose&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">id</span><span class="p">(</span><span class="s">&quot;org.jetbrains.compose&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">kotlin</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">androidTarget</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">@OptIn</span><span class="p">(</span><span class="n">org</span><span class="p">.</span><span class="n">jetbrains</span><span class="p">.</span><span class="n">kotlin</span><span class="p">.</span><span class="n">gradle</span><span class="p">.</span><span class="n">ExperimentalKotlinGradlePluginApi</span><span class="o">::</span><span class="k">class</span><span class="p">)</span>
</span><span class='line'>        <span class="n">compilerOptions</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">jvmTarget</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="n">org</span><span class="p">.</span><span class="n">jetbrains</span><span class="p">.</span><span class="n">kotlin</span><span class="p">.</span><span class="n">gradle</span><span class="p">.</span><span class="n">dsl</span><span class="p">.</span><span class="n">JvmTarget</span><span class="p">.</span><span class="n">JVM_17</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sourceSets</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">androidMain</span><span class="p">.</span><span class="n">dependencies</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Jetpack</span>
</span><span class='line'>            <span class="n">implementation</span><span class="p">(</span><span class="s">&quot;androidx.core:core-ktx:1.15.0&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">implementation</span><span class="p">(</span><span class="s">&quot;androidx.appcompat:appcompat:1.7.0&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">implementation</span><span class="p">(</span><span class="s">&quot;androidx.activity:activity-compose:1.9.3&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">lifecycleVersion</span> <span class="p">=</span> <span class="s">&quot;2.8.7&quot;</span>
</span><span class='line'>            <span class="n">implementation</span><span class="p">(</span><span class="s">&quot;androidx.lifecycle:lifecycle-runtime-ktx:$lifecycleVersion&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">implementation</span><span class="p">(</span><span class="s">&quot;androidx.lifecycle:lifecycle-runtime-compose:$lifecycleVersion&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">implementation</span><span class="p">(</span><span class="s">&quot;androidx.lifecycle:lifecycle-viewmodel-compose:$lifecycleVersion&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">navVersion</span> <span class="p">=</span> <span class="s">&quot;2.8.4&quot;</span>
</span><span class='line'>            <span class="n">implementation</span><span class="p">(</span><span class="s">&quot;androidx.navigation:navigation-runtime-ktx:$navVersion&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">implementation</span><span class="p">(</span><span class="s">&quot;androidx.navigation:navigation-compose:$navVersion&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">implementation</span><span class="p">(</span><span class="s">&quot;androidx.datastore:datastore-preferences:1.1.1&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Google Play Services</span>
</span><span class='line'>            <span class="n">implementation</span><span class="p">(</span><span class="s">&quot;com.google.android.gms:play-services-location:21.3.0&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Compose</span>
</span><span class='line'>            <span class="n">implementation</span><span class="p">(</span><span class="n">compose</span><span class="p">.</span><span class="n">preview</span><span class="p">)</span>
</span><span class='line'>            <span class="n">implementation</span><span class="p">(</span><span class="n">project</span><span class="p">.</span><span class="n">dependencies</span><span class="p">.</span><span class="n">platform</span><span class="p">(</span><span class="s">&quot;androidx.compose:compose-bom:2024.02.00&quot;</span><span class="p">))</span>
</span><span class='line'>            <span class="n">implementation</span><span class="p">(</span><span class="s">&quot;androidx.compose.ui:ui&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">implementation</span><span class="p">(</span><span class="s">&quot;androidx.compose.ui:ui-graphics&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">implementation</span><span class="p">(</span><span class="s">&quot;androidx.compose.ui:ui-tooling-preview&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">implementation</span><span class="p">(</span><span class="s">&quot;androidx.compose.material3:material3&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">implementation</span><span class="p">(</span><span class="s">&quot;androidx.compose.material:material&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Network</span>
</span><span class='line'>            <span class="n">implementation</span><span class="p">(</span><span class="s">&quot;com.google.code.gson:gson:2.10.1&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">implementation</span><span class="p">(</span><span class="s">&quot;com.squareup.retrofit2:retrofit:2.9.0&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">implementation</span><span class="p">(</span><span class="s">&quot;com.squareup.retrofit2:converter-gson:2.9.0&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">implementation</span><span class="p">(</span><span class="s">&quot;com.squareup.okhttp3:logging-interceptor:4.12.0&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Accompanist</span>
</span><span class='line'>            <span class="n">implementation</span><span class="p">(</span><span class="s">&quot;com.google.accompanist:accompanist-permissions:0.32.0&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">commonMain</span><span class="p">.</span><span class="n">dependencies</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">implementation</span><span class="p">(</span><span class="n">compose</span><span class="p">.</span><span class="n">runtime</span><span class="p">)</span>
</span><span class='line'>            <span class="n">implementation</span><span class="p">(</span><span class="n">compose</span><span class="p">.</span><span class="n">foundation</span><span class="p">)</span>
</span><span class='line'>            <span class="n">implementation</span><span class="p">(</span><span class="n">compose</span><span class="p">.</span><span class="n">material</span><span class="p">)</span>
</span><span class='line'>            <span class="n">implementation</span><span class="p">(</span><span class="n">compose</span><span class="p">.</span><span class="n">ui</span><span class="p">)</span>
</span><span class='line'>            <span class="n">implementation</span><span class="p">(</span><span class="n">compose</span><span class="p">.</span><span class="n">components</span><span class="p">.</span><span class="n">resources</span><span class="p">)</span>
</span><span class='line'>            <span class="n">implementation</span><span class="p">(</span><span class="n">compose</span><span class="p">.</span><span class="n">components</span><span class="p">.</span><span class="n">uiToolingPreview</span><span class="p">)</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">lifecycleVersion</span> <span class="p">=</span> <span class="s">&quot;2.8.3&quot;</span>
</span><span class='line'>            <span class="n">implementation</span><span class="p">(</span><span class="s">&quot;org.jetbrains.androidx.lifecycle:lifecycle-viewmodel:$lifecycleVersion&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">implementation</span><span class="p">(</span><span class="s">&quot;org.jetbrains.androidx.lifecycle:lifecycle-runtime-compose:$lifecycleVersion&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">android</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">dependencies</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后，把DSL android {&hellip;}中不支持的字段删除掉即可，如kotlinOptions，它用来指定Kotlin JVM target的，现改在DSL kotlin中的androidTarget()中指定了，但要注意Kotlin的JVM target要与android中的compileOptions的sourceCompatibility以及targetCompatibility版本保持一致，比如都是17或者都是11，否则会有编译错误。</p>

<p>需要特别注意的是DSL kotlin中的源码集合名字要与真实的目录一致，否则编译会出错。建议的方式就是依照CMP的demo那样在module中去创建androidMain和commonMain即可。另外，可以把module名字从「app」改为「composeApp」，然后把运行配置从「app」改为「androidApp」，这下就齐活儿了：</p>

<p><img src="file:///Users/alexhilton/Downloads/compose_libs/migrate-struct.png" alt="图1. 重命名后的项目结构" /></p>

<p>CMP的插件和依赖配置好了以后，运行「androidApp」应该就可以正常运行。因为仅是配置一些依赖，这仍是一个完整的Android应用，应该能够正常运行。这时第一步就做完了，虽然看起来貌似啥也没干，但这已经是一个CMP项目了，基础打好了，可以大步向前了。</p>

<p><strong>小贴士：</strong> 通过配置依赖可以发现，CMP的artifact依赖都是以org.jetbrans.*开头的，哪怕是对于Compose本身，纯Android上面Jetpack Compose的依赖是「&#8221;androidx.compose.ui:ui&#8221;」，而CMP中的则是「&#8221;org.jetbrains.compose.ui:ui&#8221;」。虽然都是Jetpack Compose，代码是兼容的，但技术上来讲是两个不同的实现。确切地说JetBrains的Compose是从谷歌的上面fork出来的一个分支，以让其更好的适用于CMP，但完全兼容，标准的Compose代码都是能正常跑的。</p>

<h2>把代码从「androidMain」移动到「commonMain」</h2>

<p>这是最关键的一步了，也是最难啃的硬骨头，具体的难度取决于项目中使用了多少「不兼容」的库和API。Compose和Jetpack中的绝大多数库都是支持的，可以在CMP中使用，可以无缝切换，这是JetBrains和Google共同努力的结果，谷歌现在对CMP/KMP的态度非常的积极，给与「第一优先支持（First class support）」。所以对于依赖于room，navigation，material和viewmodel的代码都可以直接移到common中。</p>

<p>也就是说对于data部分，model部分以及domain部分（即view models）都可以直接先移到common中，因为这些层，从架构角度来说都属于业务逻辑，都应该是平台独立的，它们的主要依赖应该是Jetpack以及三方的库，这些库大多也都可以直接跨平台。</p>

<p>当然，不可能这么顺利，因为或多或少会用到与平台强相关的API，比如最为常见的就是上下文对象（Context）以及像权限管理和硬件资源（如位置信息），这就需要用到平台定制机制（即expect/actual）来进行定制。</p>

<p>可能有同学会很奇怪，为啥UI层还不移动到common中，UI是用Compose写的啊，而Compose是可以直接在CMP上跑的啊。Compose写的UI确实可以直接跑，但UI必然会用到资源，必须 先把资源从android中移到common中，否则UI是跑不起来的。</p>

<h2>把资源转化成为CMP方式</h2>

<p>在前一篇文章<a href="https://juejin.cn/post/7439251025385996307">Compose大前端从上车到起飞</a>有讲过CMP用一个库resources来专门处理资源，规则与Android开发管理资源的方式很像，所以可以把UI用到的资源移动到common中的composeResources里面，就差不多了。</p>

<p>但需要特别注意，不要把全部的资源都从androidMain中移出，只需要把UI层用到的那部分资源移出即可。androidMain中至少要把Android强相关的资源留下，如应用的icon，应用的名字，以及一些关键的需要在manifest中使用的xml等。这是因为这些资源是需要在Android应用的配置文件AndroidManifest中使用的，所以必须还放在android源码集中。</p>

<p>资源文件移动好后，就可以把UI移动到common中了，最后一步就是使用CMP的资源类Res代替Android的资源类R即可。</p>

<p>到此，就完成了从Android项目到CMP项目的转变。</p>

<h2>添加并适配其他平台</h2>

<p>前面的工作做好后，再适配其他的平台就非常容易了，添加其他平台的target和入口（可以仿照CMP的demo），然后实现相关的expect接口即可。由此，一个大前端 项目就彻底大功告成了。</p>

<h2>总结</h2>

<p>CMP对项目结构中源码 集合 的限制 并不多，每个平台相关的sourceSet可以保持其原来的样子，这对现有项目是非常友好的，可以让现有的项目轻松的转成为CMP项目，这也是CMP最大的一个优势。</p>

<h2>References</h2>

<ul>
<li><a href="https://touchlab.co/compose-multiplatform-transition-guide">Jetpack Compose to Compose Multiplatform: Transition Guide</a></li>
<li><a href="https://stackoverflow.com/questions/71510247/how-to-convert-kotlin-project-to-kotlin-multiplatform-mobile-after-the-project-c">How to convert Kotlin project to Kotlin Multiplatform Mobile after the project completion?</a></li>
<li><a href="https://markonovakovic.medium.com/from-android-to-multiplatform-migrating-real-100-jetpack-compose-app-to-fully-multiplatform-app-2d65dc9e212e">From Android to Multiplatform: Migrating real 100% Jetpack Compose App to fully Multiplatform App. Intro</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compose大前端从上车到起飞]]></title>
    <link href="https://alexhilton.github.io/blog/2024/11/24/master-compose-multiplatform/"/>
    <updated>2024-11-24T08:45:46+08:00</updated>
    <id>https://alexhilton.github.io/blog/2024/11/24/master-compose-multiplatform</id>
    <content type="html"><![CDATA[<p>在前面的一篇文章<a href="https://juejin.cn/post/7436648335380496434">赶紧上车开启Compose大前端之路</a>中我们学习了CMP的基本概念以及如何创建一个CMP项目。今天将继续学习CMP，深入研究项目的配置方法，了解CMP的内部机制并总结一些CMP开发的最佳实践。</p>

<p><a href="https://alexhilton.github.io/blog/2024/11/24/master-compose-multiplatform/"><img src="https://repository-images.githubusercontent.com/293498508/6469be07-159b-49de-9ffe-56340d5dfd07" title="auto auto" ></a></p>

<!-- more -->


<h2>深入了解项目结构</h2>

<p>CMP的基础结构与一个标准的Android应用的项目结构基本一样，只不过主module名字变成了「composeApp」。项目根目录下的build.gradle.kts是整个项目的配置，主要是指定使用的插件；settings.gradle.kts指定项目的依赖仓库，以及项目包含哪些module；gradle/wrapper/libs.version.toml定义着依赖的版本信息。模块「composeApp」包含着源码集合（source sets）以及一个build.gradle.kts，这是描述这个模块如何构建的脚本。</p>

<p><img src="file:///Users/alexhilton/Downloads/compose_libs/project-view.png" alt="图1. 项目结构" /></p>

<p>对于Android开发同学来说，这样的项目结构非常熟悉，事实上如果把项目视图切换到「Android」，就会发现，这比起常规的Android项目，无非就是多了一些源码集合。</p>

<p>仔细看一下源码集合「androidMain」它就是一个标准的Android项目，里面有AndroidManifest文件，以及一个入口MainActivity，它会调用「commonMain」中定义的composable App()，由此就进入到了「commonMain」中。</p>

<p><img src="file:///Users/alexhilton/Downloads/compose_libs/android-entry.png" alt="图2. Android源码关系" /></p>

<p>虽然并不在源码集合中，iosApp子目录其实是一个标准的Xcode项目，里面全是Xcode项目的配置文件，可以用Xcode直接打开。它是iOS应用的入口，它的调用顺序是iOSApp，到ContentView，这两个是标准的iOS的代码，用的是Swift。然后会进入到「iosMain」中的MainConntroller，这里就到了Kotlin地界了，MainController，再进入到common中的composable App()，由此进入了「commonMain」中。</p>

<p><img src="file:///Users/alexhilton/Downloads/compose_libs/ios-entry.png" alt="图3. iOS源码关系" /></p>

<h2>依赖配置方法</h2>

<p>现代的软件不可能全都是从零开始，有很多现成的代码库可以使用，这就需要为项目配置依赖。CMP中依赖配置方法与常规的Android略不一样，视依赖的使用，以及依赖的平台依赖性，需要分别针对不同的源码集合配置。</p>

<p>需要注意的就是依赖的作用域，如果是在commonMain中配置的，那就会对所有的平台生效；如果是为androidMain配置的依赖，只能在Android中生效，以次类推。</p>

<h3>在源码集合中配置依赖</h3>

<p>最直接的方式就是针对每个源码集合配置其依赖：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">kotlin</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">sourceSets</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">commonMain</span><span class="p">.</span><span class="n">dependencies</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">implementation</span><span class="p">(</span><span class="s">&quot;com.example:my-library:1.0&quot;</span><span class="p">)</span> <span class="c1">// 所有平台共享的依赖</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>在顶层DSL dependencies中配置</h3>

<p>除了在源码集合处配置依赖，也可以在顶层DSL dependencies中配置，本质都是一样的，只不过是方式略有不同。具体的格式是<strong> &lt;源码集合&gt;&lt;具体的依赖&gt; </strong>，比如上面酱紫写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">dependencies</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&quot;commonMainImplementation&quot;</span><span class="p">(</span><span class="s">&quot;com.example:my-library:1.0&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这与像上面在源码集合commonMain中配置是一样的。在顶层配置依赖的好处在于这里可以配置一些源码集合中找不到的依赖，如testing等等。</p>

<h3>本地module如何相互依赖</h3>

<p>如果是本地的库（module），可以通过project方式引入，同样的如果是共享的库加在common里，如果是某个平台特有的，或者只想在某个平台使用就单独加到它上面：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">kotlin</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">sourceSets</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">commonMain</span><span class="p">.</span><span class="n">dependencies</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">implementation</span><span class="p">(</span><span class="n">project</span><span class="p">(</span><span class="s">&quot;:some-other-multiplatform-module&quot;</span><span class="p">))</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>如何共享和定制代码</h2>

<p>CMP的终极目的是要尽可能的共享代码，让一套代码能够跑在多个平台上面。但现实的世界是不完美的，平台的差异是不可忽视的。像存储，I/O，硬件资源等等都是平台强相关的。我们只能尽可能多的共享我们自己写的业务逻辑，对于实现业务逻辑而需要的系统平台相关的API，肯定还是需要每个平台定制化的去实现。</p>

<p>CMP通过Kotlin中的关键字expect和actual来处理平台定制API。</p>

<p>具体的做法就是在common中定义一个用关键字expect修饰的类型（函数，类，接口枚举，属性等），然后在每个平台的源码集合中去具体实现，并用关键字actual来修饰。注意，这里的类型没有限制，可以是函数，可以是类/接口/枚举，也可以是属性，尽管绝大多数情况下都是函数。</p>

<p><img src="https://resources.jetbrains.com/help/img/kotlin-multiplatform-dev/expect-functions-properties.svg" alt="图4. 用expect和actual来定制API" /></p>

<p>可以理解为OO中的接口，但又不完全一样。区别在于，common中的expect函数不能有默认实现代码，并且函数的声明要在同一个包下面。编译的时候，编译器会用平台代码里面的actual去替换common中的expect函数。也就是说这是发生在编译时的行为，所以它要求包名和函数的签名完全一致。</p>

<h2>资源管理</h2>

<p>CMP是能构建跨平台UI的，而UI必然会涉及资源，最常见的资源就是图片和字符串，资源的复杂地方在于它会有限定属性，比如不同屏幕分辨率要用不同的图片，比如不同的地区语言要用不同的字符串，所以资源是相当复杂的，而且平台强相关。</p>

<p>为此CMP提供了一个专门的库用于管理资源，可以屏蔽平台特定，以统一的方式来管理资源。只需要在commonMain中引入依赖即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">kotlin</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">sourceSets</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">commonMain</span><span class="p">.</span><span class="n">dependencies</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">implementation</span><span class="p">(</span><span class="n">compose</span><span class="p">.</span><span class="n">components</span><span class="p">.</span><span class="n">resources</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>资源是放在commonMain中与kotlin同级别的目录中：</p>

<p><img src="https://resources.jetbrains.com/help/img/kotlin-multiplatform-dev/compose-resources-qualifiers.png" alt="图5. 资源文件管理" /></p>

<p>资源可以分为几种类型，图片应该放在子目录drawable中，字体资源放在fonts中，字符串放在values中，其他文件放在files中。</p>

<p>资源文件还可以有限定符以支持定制化，如屏幕分辨率（xhdpi，xxhdpi等），区域语言（en，zh-rCN等）和主题（dark，light等）。可以发现，规则与Android平台资源管理规则是非常接近的。</p>

<p>图片字体等直接添加文件即可，字符串的话放在一个xml文件中，根Tag是resources，每个字符串的Tag是string，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="p">&lt;</span><span class="n">resources</span><span class="p">&gt;</span>
</span><span class='line'>    <span class="p">&lt;</span><span class="n">string</span> <span class="n">name</span><span class="p">=</span><span class="s">&quot;app_name&quot;</span><span class="p">&gt;</span><span class="n">My</span> <span class="n">awesome</span> <span class="n">app</span><span class="p">&lt;/</span><span class="n">string</span><span class="p">&gt;</span>
</span><span class='line'>    <span class="p">&lt;</span><span class="n">string</span> <span class="n">name</span><span class="p">=</span><span class="s">&quot;title&quot;</span><span class="p">&gt;</span><span class="n">Some</span> <span class="n">title</span><span class="p">&lt;/</span><span class="n">string</span><span class="p">&gt;</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">resources</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要注意资源的命名，与Android的资源规则一样，要是小写字符，可以有数字和下划线。</p>

<p>添加好资源后，编译插件会自动生成一个类Res，通过它就可以引用各种资源，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">Image</span><span class="p">(</span>
</span><span class='line'>    <span class="n">painter</span> <span class="p">=</span> <span class="n">painterResource</span><span class="p">(</span><span class="n">Res</span><span class="p">.</span><span class="n">drawable</span><span class="p">.</span><span class="n">my_icon</span><span class="p">),</span>
</span><span class='line'>    <span class="n">contentDescription</span> <span class="p">=</span> <span class="k">null</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">Text</span><span class="p">(</span><span class="n">stringResource</span><span class="p">(</span><span class="n">Res</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">app_name</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>一些开发实践建议</h2>

<p>CMP是为了构建跨平台应用的，那么应该尽最大的可能去共享代码。虽然有平台定制机制，但只应该用它来定制细粒度的具体的API，而不是业务逻辑。比如说，从一个文件中读文本内容，不应该定义一个getFileContent，而是应该定制细粒度的openFile，closeFile和readLine，这是因为读取文件过程真正不同的是处理文件的API，除打开文件，读出每一行以外，其他的逻辑是一样的，应该共享。</p>

<p>还有，在写业务的时候要注意看Compose文档中以及Kotlin文档中API标注的平台范围，尽可能选择标记为「Common」或者「Cmn」的API。</p>

<p>另外，因为Kotlin是基于JVM的语言，标准JDK中的API都可以用，但在CMP的iOS（目标是Native）平台和Web（目标是Wasm）却无法使用JDK的API，所以我们应该多使用Kotlin标准库以及Kotlin扩展库（kotlinx），这些API都做了多平台适配。</p>

<h2>总结</h2>

<p>利益于Gradle中的源码集合，CMP对源码的结构是很宽容的，并没有严格的要求，这对于现有项目来说是相当友好的，因为把现有的项目源码搬进来就可以了，不用改太多，然后通过源码集合来做具体的指定和逻辑上的关系处理。每个源码集合其实都是其平台的一个标准项目，把common作为其依赖而已，关系就这么简单，甚至还可以用其平台的原生方式去写UI，写逻辑，这都是可以的。</p>

<p>虽然这样做貌似会失去共享代码和逻辑的意义，但是这对改造现有项目是十分友好的，比如第一步可能是把Android项目和iOS项目先融合进来，然后再慢慢的把两个平台的共享代码抽离出来入进common。这样做不但能慢慢推进跨端，每个项目各自仍是完整的，如果有紧急 的事情仍可先用原生方式去开发构建。</p>

<h2>References</h2>

<ul>
<li><a href="https://kotlinlang.org/docs/multiplatform-add-dependencies.html">Adding dependencies on multiplatform libraries</a></li>
<li><a href="https://kotlinlang.org/docs/gradle-configure-project.html#configure-dependencies">Configure dependencies</a></li>
<li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-connect-to-apis.html">Use platform-specific APIs</a></li>
<li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/compose-multiplatform-resources.html">Resources overview</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[赶紧上车开启Compose大前端之路]]></title>
    <link href="https://alexhilton.github.io/blog/2024/11/17/compose-multiplatform-made-easy/"/>
    <updated>2024-11-17T20:33:51+08:00</updated>
    <id>https://alexhilton.github.io/blog/2024/11/17/compose-multiplatform-made-easy</id>
    <content type="html"><![CDATA[<p>在<a href="https://juejin.cn/column/7367555191338467337">前面的文章中</a>，我们一再强调Jetpack Compose是一个声明式的UI框架，尽管我们都是基于Android开发来实战的，但Compose并不局限于Android开发，它其实与特定的开发平台没有关系，是可以做到跨平台开发的。事实上JetBrains早就已经准备好了一套工具，以让Compose跨平台，开发多端应用，跻身于大前端的一员。今天就来学习一下如何使用Compose进行大前端开发。</p>

<p><a href="https://alexhilton.github.io/blog/2024/11/17/compose-multiplatform-made-easy/"><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j9tap6mygsqvxh6aauc8.png" title="auto auto" ></a></p>

<!-- more -->


<h2>缘起</h2>

<p>时光荏苒，白云苍狗，自乔帮主发布iPhone开启移动互网联至今已有十余载。对于互联网应用来说，早已从最初的Android加iOS两端并行，发展到现在的大前端时代。时至今日，不论大厂小厂，多端拉齐（Web，Android, iOS, Desktop，鸿蒙）已经是一个标配和强需求。那么如何减少多端的重复开发，如何跨多端开发就成了一个永不过时的研究方向。从最初的Mobile H5，到Hybrid App，再到React Native，再到后来的Flutter，大前端已经得到了长足的发展。得益于Kotlin Multiplatform（KMP），Compose也有了跨端的能力，跻身于大前端工具之列。</p>

<p>在深入主题学习之前，我们先来理解一下重要的概念。</p>

<h2>概念理解</h2>

<p>为了避免混淆和加强理解，需要对一些概念进行澄清。</p>

<table>
<thead>
<tr>
<th style="text-align:left;"> 概念 </th>
<th style="text-align:left;"> 缩写 </th>
<th style="text-align:left;"> 说明 </th>
<th style="text-align:left;"> 开发者 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> Jetpack Compose </td>
<td style="text-align:left;"> Compose </td>
<td style="text-align:left;"> 基于Kotlin语言的声明式UI开发框架，与平台无关，源于以及主要用于Android开发 </td>
<td style="text-align:left;"> Google </td>
</tr>
<tr>
<td style="text-align:left;"> Compose Multiplatform </td>
<td style="text-align:left;"> CMP </td>
<td style="text-align:left;"> 用于把Compose转化为多端的一个框架 </td>
<td style="text-align:left;"> JetBrains </td>
</tr>
<tr>
<td style="text-align:left;"> Kotlin Multiplatform </td>
<td style="text-align:left;"> KMP </td>
<td style="text-align:left;"> 把Kotlin编译为多端的框架，这是Compose能跨平台的根基 </td>
<td style="text-align:left;"> JetBrains </td>
</tr>
</tbody>
</table>


<p>为了简便，在后文以及以后的文章中将使用缩写。虽然严格来说CMP专指把Compose转化为多端的UI框架，但大部分场合也用它来代指Compose跨端开发，后面也会这样用。</p>

<p><strong>注意：</strong> 在早些时候，也就是在JetBrains刚推出KMP的时候，仅针对和支持Android和iOS两个平台，所以当时就叫做Kotlin Multiplatform Mobile，缩写为KMM，后来也能编译出桌面（Desktop）和Web端了，就把Mobile去掉了，就是现在的KMP，代表Kotlin Multiplatform。所以，如果 在其他地方看到了KMM，把它当成KMP就可以了。</p>

<h2>Compose大前端技术栈</h2>

<p>在继续深入之前，捋捋技术栈，从大的角度来了解一下用到的技术工具的关系是很有必要的。</p>

<p>仍是用Jetpack Compose来写UI，用Kotlin来写业务逻辑，这是个是没有变的。而Compose Multiplatform（CMP）相当于是一个转换工具，能把Compose写的UI转变成为不同平台的UI实现。编程语言用的是都是Kotlin，最终要依赖KMM编译出具体平台的目标文件（Target）。所以，它们三个是依赖关系Compose依赖CMP，它们又都依赖KMM。</p>

<p>最先出现的当然是编程语言Kotlin，之后Google推出了声明式UI框架Jetpack Compose，采用了Kotlin语言。随着Kotlin的发展，JetBrains推出了KMP，让Kotlin实现跨多端，在这之后又基于Compose，推出了CMP，因为都是Kotlin语言，与KMP一起凑成了Compose/Kotlin的跨端。现在谷歌也与JetBrains紧密的合作，一起努力把Compose往前推进，去挑战React Native和Flutter。</p>

<p>学习成本并不高，因为对于开发者来说仍旧是Compose和Kotlin，CMP和KMP是透明的，它们以插件和依赖库的形式存在，没有额外的学习成本。当然，这对Android开发同学来说更为友好一些，因为大部分Android开发同学早已掌握了Compose和Kotlin。</p>

<h2>开发环境搭建</h2>

<p>CMP的技术栈并不复杂，如果已具备Android开发环境，那基本上就齐活儿了，这再次说明CMP对Android开发同学是相当友好的。开发用的IDE就是Android Studio，编译工具用的是Gradle，这对Android同学来说已经是标配了，不熟悉的同学可自行Google。</p>

<p>唯一需要安装的就是KMP的插件（plugin），也即Android Studio中，到插件市场搜索Kotlin Multiplatform，这是JetBrains官方提供的插件，找到后可放心安装，之后重启AS即可。</p>

<p>以上是通用开发配置，但如果目标平台是iOS就略麻烦一些。此小节后面的内容，仅当目标平台包含iOS时需要，否则可以跳过。</p>

<p><strong>注意：</strong> Mac虽然也是水果系统，但Mac属于桌面端（Desktop），如果为Mac构建应用要选择Desktop为目标平台。</p>

<p>因为水果的生态是封闭的，要想构建iOS就必须要用Xcode，而Xcode只在Mac上面才能用，所以要想构建iOS端应用，必须要用Mac来开发，而且要是新一点的Mac（三年以内）。然后安装最新的Xcode就差不多了，官方提供了一个Mac上为iOS环境的检查工具kdoctor（用brew install kdoctor来安装），但其实如果配置了Android开发环境后，再装上Xcode就够了。</p>

<p><strong>注意：</strong> 如果是比较旧的Mac，Big Sur以前的，就不用再折腾了，无法构建iOS，因为构建iOS需要Xcode 12.5，而<a href="https://developer.apple.com/support/xcode/">Xcode 12.5又至少需要macOS 11.7（即Big Sur）</a>。环境检查工具kdoctor本身也是要求Xcode 12.5以上，建议在安装之前可以先用brew info kdoctor来检查一下。水果就这点不好，硬件和软件更新都特别快，向后兼容又不友好，最多支持三个版本（时间跨度在3年左右）。</p>

<h2>创建一个多端应用</h2>

<p>环境配置好后，就可以开始创建CMP了，官方提供了一个<a href="https://kmp.jetbrains.com/?_gl=1*271nsz*_gcl_au*MTE5MzE4NTY0NS4xNzMxMzIzNDU3*_ga*MzUyNjc2MzcuMTU5NDM3NDQ0MA..*_ga_9J976DJZ68*MTczMTQwMDc1MC4xOC4wLjE3MzE0MDA3NTAuNjAuMC4w">KMP项目创建向导</a>可以方便的生成一个项目模板。需要注意的是就是，如果要构建iOS，一定要勾选『Share UI』。</p>

<p><strong>注意：</strong> 要想构建iOS目标需要较新的Mac才可以，如果开发环境不是Mac，或者Mac较旧，就不用钩选iOS了，因为选了也无法构建出来和运行目标产物。</p>

<p><img src="https://resources.jetbrains.com/help/img/kotlin-multiplatform-dev/multiplatform-web-wizard.png" alt="图1. CMP项目创建向导" /></p>

<p>在创建向导中配置好后，点击下载就可以了。解压之后，用Android Studio打开（File | Open）项目文件，就可以开始CMP的开发了。注意，要直接打开解压出来的根目录，而不是里面的某个子目录。因为AS打开的项目默认使用专为Android开发优化后的视图结构「Android」，为了更方便需要切换为「Project」。</p>

<p>可以看一眼项目结构，与常规的Android项目相比差不多，包含了两个模块（module）：</p>

<ul>
<li>composeApp 这是最主要的模块，可以说东西都在这里面。它是一个Kotlin模块（Kotlin module），包含了多端共用代码，以及不同平台的定制代码。使用Gradle来构建，用Gradle的脚本来描述构建方式。</li>
<li>iosApp 这是一个完整的Xcode项目，主要用于构建iOS目标，它会依赖于composeApp。</li>
</ul>


<p><strong>注意：</strong> 如果在<a href="https://kmp.jetbrains.com/?_gl=1*zmaxre*_gcl_au*NDM5ODU1NDAyLjE3Mjc1OTk1MDU.*_ga*MzEyMDU2NTg5LjE2NzQwMDg5NjM.*_ga_9J976DJZ68*MTczMTQwMTE0NC45NC4xLjE3MzE0MDExNDguNTYuMC4w">项目创建向导</a>中没有钩选iOS，将不会有模块iosApp，以及composeApp中的iosMain。</p>

<p><img src="file:///Users/alexhilton/Downloads/compose_libs/cmp-structure.png" alt="图2. 项目结构" /></p>

<p>重点需要关注<strong>composeApp</strong>，它包含了几个源码集合（source sets）：</p>

<ul>
<li>commonMain 这是最主要的集合，包含共享代码，由一个composable函数作为入口开始（如App()）开始。这里应该是项目的主要代码集合。</li>
<li>androidMain 包含与Android平台相关的代码，包括入口（如Android manifest和Activity），入口会调用commonMain中的入口composable。以及提供平台特定的定制化实现。</li>
<li>desktopMain 桌面端的入口，以及定制化实现。</li>
<li>iosMain 水果移动端的入口，以及定制化实现。</li>
<li>wasmJsMain Web端的入口，以及定制化实现。</li>
</ul>


<p><strong>注意：</strong> 源码集的具体数量取决于创建项目时钩选的目标平台。</p>

<p>源码集合（source set）构建工具Gradle的一个概念，它包含逻辑上相关的一坨源码文件，资源文件，以及其依赖，对于Android开发同学来说这个概念并不陌生。</p>

<p><img src="https://resources.jetbrains.com/help/img/kotlin-multiplatform-dev/module-structure.png" alt="图3. 项目源码集合关系" /></p>

<p>这种项目源码集合关系是由KMP定义的，编译构建的时候common部分会编译成为一个依赖组件，平台部分把common当成一个依赖使用，然后最终构建出目标产物，详细的过程可以<a href="https://kotlinlang.org/docs/multiplatform-discover-project.html">看KMP的文档</a>。</p>

<p>这个模板有默认的页面，可以看一下，打开文件commonMain中的App.kt，它包含一个composable函数App()，这就是CMP的入口，可以从这里开始用Compose写应用了。</p>

<h2>构建与运行</h2>

<p>项目创建向导创建出来的模板项目，包含了基本的页面，可以直接构建和运行。</p>

<p><strong>注意：</strong> 首次打开项目会比较慢，这是因为要下载Gradle工具链以及项目的依赖，视网络情况，可能需要几分钟到十几分钟不等，之后就能秒开。</p>

<p><strong>注意：</strong> 创建出来的项目依赖用的都比较新，比如像Android开发插件AGP可能会用8.5.2，但AGP的版本受制于Android Studio，<a href="https://developer.android.com/build/releases/gradle-plugin#android_gradle_plugin_and_android_studio_compatibility">AGP与AS的兼容对应关系可以看这里</a>。如果使用的AS版本较旧，需要调整AGP的版本。</p>

<p>待Gradle sync完成之后，就可以运行了。</p>

<h3>运行Android app</h3>

<p>对于Android app来说可以直接运行，在运行配置那里选择「composeApp」，连上手机（或者模拟器），运行就可以了。</p>

<p><img src="https://resources.jetbrains.com/help/img/kotlin-multiplatform-dev/compose-run-android.png" alt="图4. 运行Android app" /></p>

<h3>运行桌面端（Desktop）App</h3>

<p>桌面端没有默认运行配置，需要创建一个。在菜单中编辑运行配置（Run | Edit Configurations），点左上的加号，选择「Gradle」，输入个名字如「desktopRun」，然后在配置那一侧中的「Tasks and arguments」输入：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'>composeApp:run
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://resources.jetbrains.com/help/img/kotlin-multiplatform-dev/compose-run-desktop-temp.png" alt="图5. 运行桌面端App" />
之后，选择「desktopRun」运行即可。</p>

<h3>运行iOS app</h3>

<p>如果选择了iOS的话，也有默认运行配置，可直接运行。但水果的东西必须依赖于水果的工具，所以要先打开Xcode，打开就行，放在一边不用做啥。然后回到AS，选择「iosApp」，运行，如果顺利，在Xcode那头就会启动iOS的模拟器，并运行App了。</p>

<p><img src="https://resources.jetbrains.com/help/img/kotlin-multiplatform-dev/compose-run-ios.png" alt="图6. 运行iOS app" /></p>

<p><strong>注意：</strong> 要想运行iOS，Xcode版本必须要在12.5以上，因为iOS构建方式是基于Xcode 12.5的。</p>

<h2>运行Web app</h2>

<p>Web端也没有默认配置，需要像桌面端那样创建一个，同样是Gradle，区别在于命令不一样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'>wasmJsBrowserRun -t --quiet
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://resources.jetbrains.com/help/img/kotlin-multiplatform-dev/compose-run-web.png" alt="图7. 运行Web app" />
然后，运行，这会开启一个本地server，如果浏览器没有自动打开的话，就手动打开浏览器，并输入「localhost:8080」，就能看到。</p>

<p><strong>注意：</strong> 如果开发平台是Mac，运行Web app时会有编译错误：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'>Continuous build does not work when file system watching is disabled
</span></code></pre></td></tr></table></div></figure>


<p>可以通过修改构建指令参数，添加&#45;&#45;watch&#45;fs来解决：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'>wasmJsBrowserRun -t --quiet --watch-fs
</span></code></pre></td></tr></table></div></figure>


<p>或者添加Gradle选项，以对所有的构建配置命令都生效：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'>org.gradle.vfs.watch<span class="o">=</span><span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是，无论是&#45;&#45;watch&#45;fs，还是Gradle选项，对于macOS 12（Monterey）以后才生效，详见<a href="https://docs.gradle.org/current/userguide/file_system_watching.html">Gradle文档</a>。</p>

<p>到此，应该说CMP的开发已经完全就位了。</p>

<h2>总结</h2>

<p>CMP配置简单，上手较快，前景光明，相信通过本文的学习可以了解并完全上车CMP开发了，还等啥呢赶紧上手撸一撸吧！</p>

<h2>References</h2>

<ul>
<li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/get-started.html">Get started with Kotlin Multiplatform</a></li>
<li><a href="https://kotlinlang.org/docs/multiplatform-intro.html">Introduction to Kotlin Multiplatform</a></li>
<li><a href="https://getstream.io/blog/build-app-kotlin-multiplatform/">Build Your First Android and iOS Mobile App With Kotlin Multiplatform</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Compose中的CompositionLocal来暗渡陈仓]]></title>
    <link href="https://alexhilton.github.io/blog/2024/11/10/understanding-composition-local/"/>
    <updated>2024-11-10T23:17:56+08:00</updated>
    <id>https://alexhilton.github.io/blog/2024/11/10/understanding-composition-local</id>
    <content type="html"><![CDATA[<p>通过<a href="https://juejin.cn/column/7367555191338467337">前面的学习</a>我们知道Jetpack Compose是一个声明式的UI框架，采用的是函数式编程思想，直观上来看就是一坨函数从上调到下。当函数需要数据时，会通过函数调用的参数来传递，一般来说这也没有什么问题。但当需要的数据特别多时，特别是对于一些非业务逻辑本身的数据（输入与输出），如上下文环境变量（Context，或者主题之类），都通过函数调用的参数传递就难免会让代码变得非常的庞杂和臃肿。这时候就可以使用<a href="https://developer.android.com/reference/kotlin/androidx/compose/runtime/CompositionLocal">CompositionLocal</a>，一种在组合树中隐式的从上到下传递数据的方法，我们来具体地看一下。</p>

<p><a href="https://alexhilton.github.io/blog/2024/11/10/understanding-composition-local/"><img src="file:///Users/alexhilton/Downloads/compose_libs/compositionlocal.png" title="auto auto" ></a></p>

<!-- more -->


<p><strong>注意：</strong> Compose中的函数通常叫做composable，可以简单的理解为同一个东西。从根composable开始，一个套一个的调用，自上而下的意思就是指composable的调用顺序，根函数在上，被调用的函数在下。函数调用是可以传递参数的，正常的从上到下的数据传递都是通过函数调用时的参数。</p>

<p>废话不多说，我们先来看一下什么是CompositionLocal以及它能做什么事情。</p>

<h2>什么是CompositionLocal</h2>

<p>CompositionLocal提供一种<strong>自上而下</strong>的数据传递方式，<strong>隐式的传递</strong>，也就是说，不用把数据放在参数里传递给子函数，子函数像在类中的方法访问域变量那样直接访问。我们来看一个粟子。</p>

<p>比如说，页面中有一个文案，可能需要定制字体颜色，常规方式是这样子写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">MyApp</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">colors</span> <span class="p">=</span> <span class="n">colors</span><span class="p">()</span>
</span><span class='line'>    <span class="n">SomeTextLabel</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">colors</span><span class="p">.</span><span class="n">onPrimary</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">SomeTextLabel</span><span class="p">(</span><span class="n">labelText</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">color</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Text</span><span class="p">(</span>
</span><span class='line'>        <span class="n">text</span> <span class="p">=</span> <span class="n">labelText</span><span class="p">,</span>
</span><span class='line'>        <span class="n">color</span> <span class="p">=</span> <span class="n">color</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>文案的颜色，以及像背景等等这些东西是与整个App的配置相关的，或者与运行环境（如手机）的主题风格有关的，它并不是应用程序的业务逻辑。它属于上下文环境变量，其变化往往是由于运行环境变化而变化，或者是由于用户更改了应用的配置。这就非常适合使用CompositionLocal来转化为隐式数据传递，进而简化代码，使用后就变成酱婶儿的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">MyApp</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 在上级函数中定义主题相关的颜色，并定义为CompositionLocal</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">colors</span> <span class="p">=</span> <span class="n">staticCompositionLocalOf</span><span class="p">(</span> <span class="n">colors</span><span class="p">()</span> <span class="p">)</span>
</span><span class='line'>    <span class="n">CompositionLocalProvider</span><span class="p">(</span><span class="n">LocalColors</span> <span class="n">provides</span> <span class="n">colors</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">SomeTextLabel</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 被调用的子函数</span>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">SomeTextLabel</span><span class="p">(</span><span class="n">labelText</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Text</span><span class="p">(</span>
</span><span class='line'>        <span class="n">text</span> <span class="p">=</span> <span class="n">labelText</span><span class="p">,</span>
</span><span class='line'>        <span class="n">color</span> <span class="p">=</span> <span class="n">LocalColors</span><span class="p">.</span><span class="n">onPrimary</span> <span class="c1">// 可以直接访问定义好的颜色</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过这个示例可以看出，定义了CompositionLocal以后，在被调用到的所有子函数中（desendants）都可以直接使用，就像访问全局变量那样。这就是CompositionLocal的作用，在指定的作用域中提供隐式的数据。</p>

<h2>如何使用CompositionLocal</h2>

<p>使用起来非常的方便，就像在类的方法中使用域变量那样，或者像使用全局变量那样，找到上级所定义的的CompositionLocal实例，然后引用其中的变量即可。</p>

<p>其实，已经在不知不觉中经常地使用了CompositionLocal，主题风格相关的<a href="https://developer.android.com/reference/kotlin/androidx/compose/material3/MaterialTheme">MaterialTheme</a>，Android的上下文<a href="https://developer.android.com/reference/kotlin/androidx/compose/ui/platform/package-summary#LocalContext(">LocalContext</a>)以及像绘制时常用的<a href="https://developer.android.com/reference/kotlin/androidx/compose/ui/platform/package-summary#LocalDensity(">LocalDensity</a>)，这些都是CompositionLocal实例，是由Compose定义好的顶层实例，在所有的composables中都可以直接使用。</p>

<p>需要理解的是CompositionLocal实例，本身并不是一个数据，它更像是一个集装箱，它本身是一个数据传递的机制，会在后面定义CompositionLocal实例时详细讲解。</p>

<p>另外，需要特别注意的是CompositionLocal是有作用域的，对其所有的子函数生效，并且也可以嵌套的，<a href="https://developer.android.com/reference/kotlin/androidx/compose/runtime/CompositionLocal#current(">属性current</a>)引用的是最近一层父函数（closest ancestor）中绑定的值。比如说：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">CompositionLocalExample</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">MaterialTheme</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 绑定一个值到LocalContentColor</span>
</span><span class='line'>        <span class="n">CompositionLocalProvider</span><span class="p">(</span><span class="n">LocalContentColor</span> <span class="n">provides</span> <span class="n">MaterialTheme</span><span class="p">.</span><span class="n">colorScheme</span><span class="p">.</span><span class="n">primary</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Surface</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">Column</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Uses Surface&#39;s provided content color&quot;</span><span class="p">)</span>
</span><span class='line'>                    <span class="c1">// 重新绑定一个值到LocalContentColor</span>
</span><span class='line'>                    <span class="n">CompositionLocalProvider</span><span class="p">(</span><span class="n">LocalContentColor</span> <span class="n">provides</span> <span class="n">MaterialTheme</span><span class="p">.</span><span class="n">colorScheme</span><span class="p">.</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">DescendantExample</span><span class="p">()</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">DescendantExample</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// current会指向最后绑定的值，即MaterialTheme.colorScheme.error</span>
</span><span class='line'>    <span class="n">Text</span><span class="p">(</span><span class="n">text</span> <span class="p">=</span> <span class="s">&quot;This Text uses the error color now&quot;</span><span class="p">,</span> <span class="n">color</span> <span class="p">=</span> <span class="n">LocalContentColor</span><span class="p">.</span><span class="n">current</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>如何定义一个CompositionLocal</h2>

<p>大部分时候Compose中定义好的就够我们用了，但也可以针对具体的场景来自定义一个CompositionLocal。分为两个步骤，创建实例，和绑定数据。</p>

<p>CompositionLocal实例是一个集装箱，用以封装需要从顶层往底层传递的数据，这些数据也不一定非要是常量，也是会改变的，比如应用或者页面上下文环境变化时，或者整个应用的配置发生变化时。</p>

<h3>创建CompositionLocal实例</h3>

<p>第一步是先创建一个实例，有两种方法创建一个CompositionLocal实例，这两种方式的主要区别就在于当数据变化时如何影响着重组（reComposition）：</p>

<ul>
<li><a href="https://developer.android.com/reference/kotlin/androidx/compose/runtime/package-summary#compositionLocalOf(androidx.compose.runtime.SnapshotMutationPolicy,kotlin.Function0">compositionLocalOf</a>) 当数据发生变化时仅会影响读取数据函数的重组；</li>
<li><a href="https://developer.android.com/reference/kotlin/androidx/compose/runtime/package-summary#staticCompositionLocalOf(kotlin.Function0">staticCompositionLocalOf</a>) 当数组变化时，提供数据的所有子函数都会被重组。</li>
</ul>


<p>可以发现，这两个方法的区别就在于影响重组的范围，前一个是影响着读取数据的地方，这与状态（State）一样；后一个则是影响着所有的被调用的composables。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// LocalElevations.kt file</span>
</span><span class='line'>
</span><span class='line'><span class="n">data</span> <span class="k">class</span> <span class="nc">Elevations</span><span class="p">(</span><span class="k">val</span> <span class="py">card</span><span class="p">:</span> <span class="n">Dp</span> <span class="p">=</span> <span class="m">0.</span><span class="n">dp</span><span class="p">,</span> <span class="k">val</span> <span class="py">default</span><span class="p">:</span> <span class="n">Dp</span> <span class="p">=</span> <span class="m">0.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 使用Elevations的默认值构造一个全局的CompositinLocal实例</span>
</span><span class='line'><span class="c1">// 这个实例可以被应用中的所有composables访问得到</span>
</span><span class='line'><span class="k">val</span> <span class="py">LocalElevations</span> <span class="p">=</span> <span class="n">compositionLocalOf</span> <span class="p">{</span> <span class="n">Elevations</span><span class="p">()</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>注意：</strong> 为了更好的可读性和可维护性，CompositionLocal实例的命名应该以Local开头，如LocalColors。</p>

<h3>把数据绑定到实例中去</h3>

<p>光创建实例没什么用，创建完实例后，还需要把数组绑定到CompositionLocal实例中去，并<strong>同时指定作用域</strong>，这是非常关键的一步，不但决定了CompositionLocal中有什么数据，还决定了谁可以使用这些数据。使用<a href="https://developer.android.com/reference/kotlin/androidx/compose/runtime/package-summary#CompositionLocalProvider(kotlin.Array,kotlin.Function0">CompositionLocalProvider</a>)来绑定数据：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// MyActivity.kt file</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MyActivity</span> <span class="p">:</span> <span class="n">ComponentActivity</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">super</span><span class="p">.</span><span class="n">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">setContent</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 基于系统主题来计算具体的elevation</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">elevations</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">isSystemInDarkTheme</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">Elevations</span><span class="p">(</span><span class="n">card</span> <span class="p">=</span> <span class="m">1.</span><span class="n">dp</span><span class="p">,</span> <span class="n">default</span> <span class="p">=</span> <span class="m">1.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">Elevations</span><span class="p">(</span><span class="n">card</span> <span class="p">=</span> <span class="m">0.</span><span class="n">dp</span><span class="p">,</span> <span class="n">default</span> <span class="p">=</span> <span class="m">0.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// 把上面计算得到的elevation绑定到LocalElevations</span>
</span><span class='line'>            <span class="n">CompositionLocalProvider</span><span class="p">(</span><span class="n">LocalElevations</span> <span class="n">provides</span> <span class="n">elevations</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// ... Content goes here ...</span>
</span><span class='line'>                <span class="c1">// 这里的子composables都可以直接访问LocalElevations.current</span>
</span><span class='line'>                <span class="c1">// 以得到elevation</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>函数CompositionLocalProvider接收一个CompositionLocal实例和一个composable lambda，这个lambda就是这个实例的作用域，也即此lambda所调用的所有composables都可以使用访问此实例的数据。参数LocalElevations就是实例，可以看前面的创建代码。LocalElevations provides elevation这是infix符号式写法，相当于LocalElevations.provides(elevation)，elevation则是具体的数据，这意思就是在此lambda的作用域中，CompositionLocal实例LocalElevations会提供数据elevation。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">SomeComposable</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 使用的地方直接通过LocalElevations.current就能访问到</span>
</span><span class='line'>    <span class="n">MyCard</span><span class="p">(</span><span class="n">elevation</span> <span class="p">=</span> <span class="n">LocalElevations</span><span class="p">.</span><span class="n">current</span><span class="p">.</span><span class="n">card</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Content</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里多说一下，compositionLocalOf是更为精细化的控制（fine-grained control），因为，当数据发生变化时，在作用域中只有读取了数据的composables才会被重组；而staticCompositionLocalOf影响范围较大，因为（当数据发生变化 时）整个作用域内（即CompositionLocalProvider的lambda）的composables都会被重组。</p>

<h2>什么时候该用CompositionLocal</h2>

<p>CompositionLocal提供了一种新的数据传递方式，当数据需要在一定作用域内（Scoped）分享时，就可以考虑使用它。但并不是所有的场景都适用，具体来说，要符合以下标准：</p>

<ul>
<li>数据要是非业务逻辑数据，也就是非代码所直接需要的输入和输出。</li>
<li>数据要有一个极其合理的初始值（默认值）。</li>
<li>数据不一定要是常量，也可以变化，但是业务逻辑并不是数据变化的原因。</li>
<li>数据的使用有一定的作用域。并且在作用域内<strong>所有的composables都可能会</strong>使用此数据。这一点很重要，如果仅仅是某个特定的composable使用，那就直接传参就好了。</li>
</ul>


<p>适合使用CompositionLocal的数据有应用的主题风格，应用的配置信息，平台提供的上下文变量，平台的配置信息，或者对于一个局部来说是上下文变量的数据（比如说一个Dialog用到的数据）。除此之外，绝大部分时候不应该使用CompositionLocal。特别是涉及业务逻辑代码本身强相关的数据（输入与输出），一定不能使用CompositionLocal，这会让代码极难理解和维护，造成极难调试的Bug。</p>

<p>CompositionLocal的一个大的特点就是有明确的作用域，那么如何选择合适的作用域呢？总的来说应该让作用域越小越好。视数据的 影响范围和使用范围来决定其作用域：</p>

<ul>
<li>整个应用级别的（App level），如主题风格，应用配置，平台的配置信息，或者会话数据（user sessions）。应该在根composable，即setContent处绑定数据。</li>
<li>整个页面级别的（Screen level），如平台上下文变量（Context或者Density），导航，或者页面内部的定制参数。</li>
<li>组件级别的（Component level），页面中某一个局部，比如Dialog的主题风格，或者Dialog并不直接操作，但却依赖的数据。</li>
</ul>


<p>任何工具都是为了适合其的场景而生的，要了解清楚什么场景适合使用非常重要，切忌滥用。</p>

<h2>它与状态（State）的区别是什么</h2>

<p>从前面的文章<a href="https://juejin.cn/post/7376094685495001139">降Compose十八掌之『鸿渐于陆』| State</a>我们了解到，状态（State）是为了重组时数据不丢失，也就是说在composable多次运行时，数据能够得以留存。反过来状态变化了，也会触发重组，因为要刷新UI。状态是时间上的概念（使用此状态的composables）多次运行，状态持有的数据都得以保存，不会变成初始值。如果想要使用状态，必须当作参数传递过去。</p>

<p>而CompositionLocal是为了能在不同的composables中共享数据，不用参数传递，它是空间上的概念。</p>

<p>它们是为了解决不同的问题而设计出来的。可以把状态绑定到CompositionLocal中去，但其实没必要这么做，因为内部实现上已经会把绑定的数据封装为状态，因为CompositionLocal的数据是可能发生变化的，并且当变化时，也是要触发重组的。</p>

<h2>它与全局变量的区别是什么</h2>

<p>Kotlin语言是支持顶级全局变量（Top level globals）的，也就是与class平齐，在任何class之外的全局变量，其作用域是整个进程，任何导入（import）此变量的地方都可以访问。Compose是基于Kotlin语言的，所以Compose也是可以使用全局变量的。</p>

<p>全局变量的缺点是没有作用域，容易失控，仅应该用于常量，并且它也不能用于composables的重组。虽然全局变量可以跨越空间，让所有函数都能访问。全局变量是编程语言层面的东西，仅适用于常量的定义，也即整个应用程序运行期间确定不会发生改变的值。</p>

<p>这正是CompositionLocal有价值的地方，它能限定作用域，又可以触发重组，允许数据值改变，又可以跨越空间。这是Compose框架层面提供的工具，自然更适合在Compose中使用。</p>

<h2>总结</h2>

<p>调用函数时传递参数可谓是『明修栈道』，而CompositionLocal则是『暗渡陈仓』，提供了一种在组合（Composition）中自上而下隐式传递数据的一种方式，可以让函数调用只关心与逻辑相关的输入数据。恰当的使用CompositionLocal可以有效的管控上下文环境变量，并极大地简化代码，让代码更加的优雅和简洁。</p>

<h2>References</h2>

<ul>
<li><a href="https://developer.android.com/develop/ui/compose/compositionlocal">Locally scoped data with CompositionLocal</a></li>
<li><a href="https://www.valueof.io/blog/compose-compositionlocal-compositionlocalprovider">Passing data using CompositionLocal</a></li>
<li><a href="https://www.kodeco.com/34513206-compositionlocal-in-jetpack-compose">CompositionLocal in Jetpack Compose</a></li>
<li><a href="https://medium.com/mobile-innovation-network/understanding-composition-local-jetpack-compose-4546605df5e1">Understanding Composition Local: Jetpack Compose</a></li>
<li><a href="https://medium.com/@ramadan123sayed/composition-local-in-jetpack-compose-4d0a54afa67c">Composition Local in Jetpack Compose</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[给Jetpack Compose添加Native支持]]></title>
    <link href="https://alexhilton.github.io/blog/2024/11/08/android-jni-made-easy/"/>
    <updated>2024-11-08T22:40:32+08:00</updated>
    <id>https://alexhilton.github.io/blog/2024/11/08/android-jni-made-easy</id>
    <content type="html"><![CDATA[<p>Jetpack Compose是一个声明式的UI框架，但一个项目不可能光有UI，还需要有业务逻辑。Compose所用的编程语言是Kotlin，一种基于JVM的多范式通用编程语言，尽管非常强大，但因为现代的项目都非常复杂，多语言混合，有些东西用Kotlin没法实现，或者有些现成的C/C++代码可以复用，这时就需要能把native代码集成到Compose项目中去。</p>

<p><a href="https://alexhilton.github.io/blog/2024/11/08/android-jni-made-easy/"><img src="https://questdot.com/wp-content/uploads/2016/07/ndkjni-720x340.png" title="auto auto" ></a></p>

<!-- more -->


<p>想要在Compose中使用native代码是完全可行的，这是因为Compose是基于Kotlin的，而Kotlin本质上是JVM的字节码，也就是运行在虚拟机之上的语言。Java的Native接口，即JNI其实是虚拟机开出的口子，只要能在JVM上运行就可以用JNI，所以标准的Java JNI是完全可以用在Compose里面的。</p>

<p><strong>注意：</strong> native代码（原生代码）在不同的语境有不同的意思，它通常指操作系统直接支持的可执行程序。Java（字节码）是运行在虚拟机上的，操作系统被虚拟机给隔离了，对Java是透明的，这时像可以编译为直接在操作系统上运行的代码（如C/C++）称为native代码；假如换个语境，如运行在WebView中的Web前端，则可以直接运行在Android上的或者iOS上的原生SDK代码则称为native代码。</p>

<p>先来看一下如何在Compose项目中添加native支持。</p>

<h2>新项目</h2>

<p>新的项目在创建项目的时候可以选择C++，无论是Kotlin的类，以及C++的实现，以及配置文件都会有模板。但除了demo以外，一般不会有新建项目的机会，极少项目是从0开始。绝大多数情况都是在现有项目中添加native支持，所以我们重点看看如何在现有项目中添加native支持。</p>

<h2>现有项目添加JNI支持</h2>

<p>现在的Android Studio已经对JNI有了很好的支持，AGP中也提供了支持，所以可以不用NDK中命令行式的ndk-build了。对于现有项目想添加JNI支持也不麻烦，有两种方式：一种是添加一个native的Module，新建Module时选择native library就可以了，这个Module里面与新建的Native项目是差不多的。这种方式适合于比较独立的一个新的需要native支持的模块，然后此模块再作为主模块的依赖，比较合适的场景是一个独立的功能模块；</p>

<p>第二种方式就是，像新建 的native项目那样，直接添加native支持：</p>

<h3>Step 1 添加C/C++源码目录</h3>

<p>先在对应的module如app中添加cpp源码目录，要放在与java或者kotlin同级别的目录，如app/src/main/下面，之后所有native层的东西都在app/src/main/cpp下面。</p>

<h3>Step 2 设置CMake</h3>

<p>在建 好的目录下面添加源码LocalJNI.cpp和编译文件CMakeLists.txt。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'>cmake_minimum_required<span class="o">(</span>VERSION 3.22.1<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>project<span class="o">(</span><span class="s2">&quot;effectivejni&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>add_library<span class="o">(</span><span class="k">${</span><span class="nv">CMAKE_PROJECT_NAME</span><span class="k">}</span> SHARED
</span><span class='line'>        <span class="c"># List C/C++ source files with relative paths to this CMakeLists.txt.</span>
</span><span class='line'>        LocalJNI.cpp<span class="o">)</span>
</span><span class='line'>target_link_libraries<span class="o">(</span><span class="k">${</span><span class="nv">CMAKE_PROJECT_NAME</span><span class="k">}</span>
</span><span class='line'>        <span class="c"># List libraries link to the target library</span>
</span><span class='line'>        android
</span><span class='line'>        log<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>CMake是一个跨平台的C/C++编译系统，可以参考 <a href="https://cmake.org/">其官文档</a>了解详细信息。</p>

<h3>Step 3 在Gradle脚本中添加native build关联</h3>

<p>在android块中加入externalNativeBuild：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">android</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>    <span class="n">externalNativeBuild</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">cmake</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">path</span><span class="p">(</span><span class="s">&quot;src/main/cpp/CMakeLists.txt&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">version</span> <span class="p">=</span> <span class="s">&quot;3.22.1&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Step 4 添加带有native方法的类</h3>

<p>这一步要特别注意，因为JNI是Java Native Interface，所以必须要严格符合Java的方式，native方法的声明必须是某个类的方法；另外，JNI调用Java时也必须先找到某个类，然后再调用它的方法。所以必须 要有一个Java的public类：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">package</span> <span class="nn">net.toughcoder.effectivejni</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">LocalJNI</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">external</span> <span class="k">fun</span> <span class="nf">stringFromLocal</span><span class="p">():</span> <span class="n">String</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">companion</span> <span class="k">object</span> <span class="err">{</span>
</span><span class='line'>        <span class="n">init</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">System</span><span class="p">.</span><span class="n">loadLibrary</span><span class="p">(</span><span class="s">&quot;effectivejni&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然，这个类可以放在任何文件中。因为Kotlin放宽了Java的限制，在Java中每一个public的类必须要放在一个名字一样的文件中，但Kotlin的文件与类没有对应的关系，所以可以把这个类放在任何文件中，当然了package要指明，因为在JNI中查找class时，要指定package name。</p>

<h3>Step 5 实现native方法</h3>

<p>具体native方法的实现就看具体要做什么了。这里只是演示所以简单返回一个字符串。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cp">#include &lt;jni.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">extern</span> <span class="s">&quot;C&quot;</span> <span class="n">JNIEXPORT</span> <span class="n">jstring</span> <span class="n">JNICALL</span>
</span><span class='line'><span class="n">Java_net_toughcoder_effectivejni_LocalJNI_stringFromJNI</span><span class="p">(</span>
</span><span class='line'>        <span class="n">JNIEnv</span><span class="o">*</span> <span class="n">env</span><span class="p">,</span>
</span><span class='line'>        <span class="n">jobject</span> <span class="cm">/* this */</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">hello</span> <span class="o">=</span> <span class="s">&quot;Hello from C++ with static mapping&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">NewStringUTF</span><span class="p">(</span><span class="n">hello</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>注意：</strong> 虽然Compose使用的编程语言是Kotlin，但毕竟Kotlin是JVM语言，也与Java可以相互替换。对于JNI来说，Kotlin与Java无区别，所以后面会以Java来统一当作native的另一端。</p>

<h2>JNI注册</h2>

<p>无论是用C/C++去实现native接口，还是复用现成的native方法，都需要要把native方法与Java层声明的方法进行关联映射，以让JVM能找到此方法的实现，这也即所谓的JNI注册。有两种方式进行JNI注册。</p>

<p>静态方式，其实就是Java默认支持的方式，它要求Native的实现函数是纯C的，要用『extern C』包裹起来，还有就是方法的名字要是Java&#95;包名&#95;类名&#95;方法名，比较严格。前面的示例用的就是静态注册。</p>

<p>动态注册的原理是加载so的时候，当虚拟机在找到so以后，会查找里面一个叫做JNI&#95;OnLoad的函数指针，然后执行此函数。那么，在so的实现中，写一个叫做JNI&#95;OnLoad的函数，在里面手动进行Native方法注册，然后当so被加载时JNI&#95;OnLoad就会被执行，JNI方法就注册好了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cp">#include &lt;jni.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Method declaration</span>
</span><span class='line'><span class="n">jstring</span> <span class="nf">dynamicString</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">thiz</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// JNI wrapper</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="n">className</span><span class="p">[]</span> <span class="o">=</span> <span class="s">&quot;net/toughcoder/effectivejni/LocalJNI&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">const</span> <span class="n">JNINativeMethod</span> <span class="n">methods</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">{</span><span class="s">&quot;stringFromJNI&quot;</span><span class="p">,</span> <span class="s">&quot;()Ljava/lang/String;&quot;</span><span class="p">,</span> <span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="kt">void</span> <span class="o">*&gt;</span><span class="p">(</span><span class="n">dynamicString</span><span class="p">)}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">JNIEXPORT</span> <span class="n">jint</span> <span class="n">JNICALL</span> <span class="nf">JNI_OnLoad</span><span class="p">(</span><span class="n">JavaVM</span> <span class="o">*</span><span class="n">vm</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">reserved</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">vm</span><span class="o">-&gt;</span><span class="n">GetEnv</span><span class="p">(</span><span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="kt">void</span> <span class="o">**&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="n">env</span><span class="p">),</span> <span class="n">JNI_VERSION_1_6</span><span class="p">)</span> <span class="o">!=</span> <span class="n">JNI_OK</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">JNI_ERR</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">jclass</span> <span class="n">clazz</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">FindClass</span><span class="p">(</span><span class="n">className</span><span class="p">);</span>
</span><span class='line'>    <span class="n">env</span><span class="o">-&gt;</span><span class="n">RegisterNatives</span><span class="p">(</span><span class="n">clazz</span><span class="p">,</span> <span class="n">methods</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">methods</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">methods</span><span class="p">[</span><span class="mi">0</span><span class="p">])));</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">JNI_VERSION_1_6</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// The implementation</span>
</span><span class='line'><span class="n">jstring</span> <span class="nf">dynamicString</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">thiz</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">str</span> <span class="o">=</span> <span class="s">&quot;String from JNI via dynamic mapping.&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">NewStringUTF</span><span class="p">(</span><span class="n">str</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个JNI&#95;OnLoad的方法的参数很有意思是一个JavaVM对象指针，JavaVM对象每个应用进程只有一个，可以认为就是应用的虚拟机。但每个JNI方法都有一个JNIEnv对象指针，它给native方法提供一个JNI上下文，这个则是每个线程都有一个。</p>

<p>推荐使用动态注册方式进行JNI注册，这是因为这种方式更为灵活，不必写繁琐的方法声明，也不必用extern C限制，可以是常规的C++函数。</p>

<h2>JNI是一个接口层</h2>

<p>JNI是一个口子，可以让Java调用native代码，也能让native代码调用Java代码，调用Java代码就相当于反射。JNI是一个传送门，虽然入口处有一些限制，但深入到native里面就是完全的C和C++世界了，只要是C和C++能实现的事情都可以做。</p>

<p><img src="file:///Users/alexhilton/Downloads/JNI.svg" alt="图1. JNI是一个传送门" /></p>

<h2>JNI线程</h2>

<p>需要注意的是结构体JavaVM是所有线程共享，它代表着进程所在的虚拟机。但结构体JNIEnv则是代表着栈中的执行环境（因为JNI仅一个方法，而方法必然运行在某个线程之中），每个线程有一个。创建的局部引用也不能跨线程使用。</p>

<p>从JNIEnv获取JavaVM：env->GetJavaVM(&amp;vm)</p>

<p>从JavaVM获得当前JNIENV：vm->AttachCurrentThread(&amp;env, null)</p>

<p>最好都从Java层来管理线程，JNI只是某些方法的实现。</p>

<p>如果JNI的native代码也很复杂需要线程的话，也可以用pthread创建线程，但也应该维持在一定的作用域范围内，不应该再从此线程去调用Java。这样只会制造混乱。</p>

<h2>两个世界的对象连接</h2>

<p>需要注意JNI是纯C接口，没有对象的概念，入口处的native方法不属于任何C++对象。假如native深入层足够复杂也有一套对象，如何建立起 Java层对象和native对象的连接呢？可以参考Android frameworks的作法，它通常会给Java层的对象有一个整形域变量，用以存放native层对象指针，这样就能建立起来对象与对象的一一对应关系。</p>

<h2>添加已编译好的native库</h2>

<p>JNI是连接Java层与C/C++层的传送门，除了新写的native代码，也可以直接使用已编译好的C/C++的库，静态库libxxx.a和动态库libxxx.so。</p>

<p>预编译的库通常作为JNI的依赖，当然也可以直接加载，前提是so里面已包含了JNI接口。但需要特别注意的是静态的库.a是无法直接在Java中加载的，也即无法通过System.loadLibrary()来加载native的静态库。因此静态库只能作为依赖，要包一层，写一个Wrapper层编译为so，静态库作为so的依赖，然后把so加载为JNI。</p>

<p>通过CMake中的add_library指令来添加预编译好的库，具体可以 <a href="https://cmake.org/cmake/help/latest/command/add_library.html">参考其文档</a>。</p>

<h2>NDK的版本</h2>

<p>在项目的配置gradle文件中可以指定具体的NDK版本：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">android</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">ndkVersion</span> <span class="p">=</span> <span class="s">&quot;28.0.12433566&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>NDK的版本可以看<a href="https://developer.android.com/ndk/downloads/revision_history">官方发布历史</a>，NDK主要是指Android提供的native API（C/C++ API），主要是一些系统提供的能力，如音频视频能力，图形图像能力等，可以看<a href="https://developer.android.com/ndk/guides/stable_apis">其接口说明文档</a>，以及<a href="https://developer.android.com/ndk/reference">NDK开发文档</a>。</p>

<h2>C/C++的版本指定</h2>

<p>C++语言自从其诞生，在Java和新一代编程语言出现后，曾一度长期停滞，在泛型，函数式编程，并发上面落后于其他语言，并被诟病。但从C++11开始，（C++语言的版本以年份的后两位来命名，如C++11是指2011年发布的版本，C++17指2017年发布的，以此类推）这门古老的语言焕然一新，增加了很多新时代编程语言的特性，其后的C++17继续前进，到现在的C++20已经完全是一个现代化的编程语言了，lambda，函数式，泛型和并发都有了非常好的支持，甚至已经超越了老对手Java。因此，C++11以后的版本也称为『现代C++（Modern C++）』。</p>

<p>都4202年了，肯定要用最新的C++20才行啊。CMake使用的是LLVM编译器，而LLVM已经完全支持C++20了，但默认的版本使用的是C++17，想要特别的版本，就需要在CMakefile.txt中进行指定，也即通过添加编译选项来指定C++的版本：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'><span class="nb">set</span><span class="o">(</span>CMAKE_ANDROID_STL_TYPE <span class="s2">&quot;c++_shared&quot;</span><span class="o">)</span>
</span><span class='line'><span class="nb">set</span><span class="o">(</span>CMAKE_C_FLAGS <span class="s2">&quot;${CMAKE_C_FLAGS} -std=c99&quot;</span><span class="o">)</span>
</span><span class='line'><span class="nb">set</span><span class="o">(</span>CMAKE_CXX_FLAGS <span class="s2">&quot;${CMAKE_CXX_FLAGS} -std=c++20&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>JNI内存管理</h2>

<p>Java层是自动档（自动内存管理），但C/C++是手动档，因此穿过JNI后就需要特别小心内存管理。有一些注意事项：</p>

<ul>
<li>Java 层传过来的对象，不需要手动去释放。比如说传过来的数组或者字符串。</li>
<li>传回给Java层的对象，也不需要手动释放。比如像上面的例子新创建出来的字符串，尽管使用了New，但不需要管。GC会追踪。而且你也没法释放，创建完对象交给Java层了，不确定Java还在不在使用中呢，你咋delete？</li>
<li>只应该管理生命周期全都在native的new出来的对象，和引用。</li>
<li>需要特别注意方法运行的上下文，也即JNIEnv，这个东西每个线程有一个，且是不同的。要保证在同一个JNIEnv中管理内存，不同的JNIEnv无法共享创建出来的对象和引用，不能交叉使用，更不能交叉式的释放。</li>
</ul>


<h2>JNI能做什么</h2>

<p>JNI是一个接口层，能够让Java进入C/C++世界，调用C/C++的代码，包括现有代码。所以只要编译出来了目标平台（ARM）的so，就可以在JNI中用。</p>

<p>当然了，为了兼容性，使用的so最好用NDK进行编译。</p>

<p>因为Android是Linux内核的，所以，理论上Linux系统调用支持的东西全都能在JNI里面搞。当然，使用native最为正确的体位是使用NDK来实现想要的功能，可以查看<a href="https://developer.android.com/ndk/reference">NDK的开发文档</a>来明确可以做哪些事情。</p>

<h2>使用JNI的正确姿式</h2>

<p>JNI虽好，但不要滥用，不能单单以『C/C++语言性能高于Java（JVM）』为理由就去使用JNI。JNI本身是一个口子，单从方法调用角度讲，从Java层调用过来要有历经查询和数据转换，不见得会比Java方法高效到哪里去。而且JNI在线程调度，异常管理和内存管理上面都较Java层相比非常的不方便，那点看起来的性能优势的代价是很大的，所以说能不用JNI就别用。</p>

<p>使用JNI的正确理由：</p>

<ol>
<li>做一些Java层无法做到的事情，比如一些底层的系统调用（System calls），Java层做不到，那自然得用C/C++</li>
<li>使用一些现有的C/C++代码，这个是最为正统的理由</li>
<li>基于安全角度考量，把一些关键的实现放在C/C++层，这个也合理，因为C/C++相较于Java字节码要略难破解一些</li>
<li>基于跨平台角度考虑，把一些与平台关联密切的，且独立的模块用C/C++实现，比如像通信协议，或者加密，或者压缩之类的非常独立的功能模块，用C/C++来实现，屏蔽名个平台的不同，这会让Java层更加的简单</li>
</ol>


<p>除此之外，似乎没有理由使用JNI。另外，在使用的时候也要注意尽可能的单进单出，也就是说从Java层调用native方法，进去后一直在native运算，得到结果后返回给Java。而不应该频繁的有交互，比如说Java层调用进了native方法，但在native中又频繁 的调用Java层的方法。这明显是设计不合理，应该在Java层把需要的数据准备齐全后，再调用native层。</p>

<h2>References</h2>

<ul>
<li><a href="https://juejin.cn/post/7382893339098906665">Android JNI入门</a></li>
<li><a href="https://juejin.cn/post/7302684536148230194">一、Android-JNI开发</a></li>
<li><a href="https://juejin.cn/post/6844903933375152136">Android NDK-深入理解JNI</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1666741">JNI线程相关</a></li>
<li><a href="https://developer.android.com/studio/projects/add-native-code">Add C and C++ code to your project</a></li>
<li><a href="https://developer.android.com/training/articles/perf-jni">JNI tips</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让Activity更加优雅地跳转]]></title>
    <link href="https://alexhilton.github.io/blog/2024/10/14/activity-result-launcher/"/>
    <updated>2024-10-14T22:24:55+08:00</updated>
    <id>https://alexhilton.github.io/blog/2024/10/14/activity-result-launcher</id>
    <content type="html"><![CDATA[<p>有过Android开发经验的小伙伴对<a href="https://developer.android.com/reference/android/app/Activity#startActivityForResult(android.content.Intent,%20int">startActivityForResult</a>)以及<a href="https://developer.android.com/reference/android/app/Activity#onActivityResult(int,%20int,%20android.content.Intent,%20android.app.ComponentCaller">onActivityResult</a>)一定不陌生，正是这一对API让组件 的复用变成可能。今天就来学习一下如何在函数式的范式中驾驭Activity的跳转。</p>

<p><a href="https://alexhilton.github.io/blog/2024/10/14/activity-result-launcher/"><img src="https://akexorcist.dev/content/images/size/w2000/2021/12/activity_result_api-header.jpg" title="auto auto" ></a></p>

<!-- more -->


<h2>缘起</h2>

<p>系统组件复用，特别是Activity的复用，是Android系统中非常重要的一个设计理念。组件复用打破了应用程序之间的壁垒，在整个系统范围内可以共享和复用一些公共的组件，比如像打开网页，拍照片，查看图片等等，开发者不必再用原始API去实现一套，直接使用startActivityForResult和onActivityResult就可以取到需要的资源。</p>

<p>这套API最大的问题在于它并不是常规的异步式的回调，调用了startActivityForResult后，结果的处理，必须要在Activity的继承体系内覆写onActivityResult，并且因为Activity实例只能由系统创建，这就导致了组件复用的逻辑必须都在Activity内部。这就导致了Activity的体积通常会相当的臃肿，上千行，甚至大几千行的Activity随处可见。理想的情况下Activity，作为一个系统的容器和接口，应该越薄越好，但要能把逻辑移出Activity才行。</p>

<p>另一方面，onActivityResult无法在函数式的情境中使用，因为它会跑到函数外面去，比如在Jetpack Compose中就无法直接使用startActivityForResult和onActivityResult。</p>

<p>为了解决这两个问题，就需要使用到Jetpack中的<a href="https://developer.android.com/reference/androidx/activity/result/package-summary">Activity Result API</a>了。</p>

<h2>Activity Result API的使用方法</h2>

<p>在Jetpack的AndroidX中的<a href="https://developer.android.com/jetpack/androidx/releases/activity">Activity</a>和<a href="https://developer.android.com/jetpack/androidx/releases/fragment">Fragment</a>中，可以像常规的回调那样向系统注册一个处理result的回调，一旦系统派发了activity result就能被系统回调到。</p>

<p><strong>注意：</strong> 这里提到的方法都在AndroidX中的<a href="https://developer.android.com/reference/androidx/activity/ComponentActivity">ComponentActivity</a>和<a href="https://developer.android.com/reference/androidx/fragment/app/Fragment">Fragment</a>里面，也就是说要继承AndroidX中的组件才可以。</p>

<h3>注册一个activity result回调</h3>

<p>这套API的方式是在ComponentActivity和Fragment中，提供了一个<a href="https://developer.android.com/reference/androidx/activity/result/ActivityResultCaller#public-methods_1">registerForActivityResult</a>方法用于注册activity result的回调。参数是一个<a href="https://developer.android.com/reference/androidx/activity/result/contract/ActivityResultContract">ActivityResultContract</a>实例和一个<a href="https://developer.android.com/reference/androidx/activity/result/ActivityResultCallback">ActivityResultCallback</a>实例。返回的是一个<a href="https://developer.android.com/reference/androidx/activity/result/ActivityResultLauncher">ActivityResultLauncher</a>，这个launcher可以用来启动目标Activity，也即触发获取资源的流程，相当于原来的startActivityForResult：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">getContent</span> <span class="p">=</span> <span class="n">registerForActivityResult</span><span class="p">(</span><span class="n">GetContent</span><span class="p">())</span> <span class="p">{</span> <span class="n">uri</span><span class="p">:</span> <span class="n">Uri</span><span class="p">?</span> <span class="p">-&gt;</span>
</span><span class='line'>    <span class="c1">// 处理结果</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>一个ActivityResultContract，如它的名字所示，定义着组件复用的的接口，即输入类型和输出类型。API中定义了<a href="https://developer.android.com/reference/androidx/activity/result/contract/ActivityResultContracts">大量的现成可用的，也是常见的接口</a>，比如拍照，权限请求等等。当然也可以创建<a href="https://developer.android.com/training/basics/intents/result#custom">自定义接口</a>。</p>

<p>回调ActivityResultCallback是只有一个方法onActivityResult()的接口，此方法的参数由ActivityResultContract来定义。</p>

<h3>启动目标Activity</h3>

<p>当调用registerForActivityResult时，能拿到一个launcher，但此API仅是向系统注册一个回调，这时还没有启动目标（即还没有发起请求）。发起请求需要使用ActivityResultLauncher来完成。</p>

<p>调用其<a href="https://developer.android.com/reference/androidx/activity/result/ActivityResultLauncher#launch(I">方法launch</a>)就会发起请求，启动目标Activity，开启获取结果的流程。如果给launch传递了参数，会依据ActivityResultContract做进一步的匹配（其实这些输入最终会转化为Intent对象提供给startActivityForResult）。用户在目标Activity页面完成了操作后，就会返回到当前页面，回调ActivityResultCallback的方法onActivityResult就会被执行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">getContent</span> <span class="p">=</span> <span class="n">registerForActivityResult</span><span class="p">(</span><span class="n">GetContent</span><span class="p">())</span> <span class="p">{</span> <span class="n">uri</span><span class="p">:</span> <span class="n">Uri</span><span class="p">?</span> <span class="p">-&gt;</span>
</span><span class='line'>    <span class="c1">// 处理结果，即返回的Uri</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">selectButton</span> <span class="p">=</span> <span class="n">findViewById</span><span class="p">&lt;</span><span class="n">Button</span><span class="p">&gt;(</span><span class="n">R</span><span class="p">.</span><span class="n">id</span><span class="p">.</span><span class="n">select_button</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">selectButton</span><span class="p">.</span><span class="n">setOnClickListener</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 接口是获取内空，这里传mime type作为参数，那么就是要获取一个图片内容</span>
</span><span class='line'>        <span class="n">getContent</span><span class="p">.</span><span class="n">launch</span><span class="p">(</span><span class="s">&quot;image/*&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果需要多个组件复用，那就传递不同的参数多次调用registerForActivityResult。并且registerForActivityResult可以在任何时候调用，在onCreate之前调用也是安全的，所以可以在声明ActivityResultLauncher的时候就直接调用，这样可以直接初始化。</p>

<p>但是要特别注意，使用launcher来启动Activity则必须在onCreate之后。</p>

<p>还有一点需要特别注意，因为launch之后，onActivityResult之前这段时间会离开当前的Activity，这个时间内Activity可能会被系统回收，也即触发了状态恢复。所以处理结果时，也即onActivityResult中的逻辑，如果有依赖其他状态，这些状态需要在onSaveInstanceState中进行保存。</p>

<h3>处理结果</h3>

<p>结果的处理就在ActivityResultCallback中的方法onActivityResult，这里使用返回的参数就可以了。</p>

<h2>在Activity之外使用</h2>

<p>如前面所述，使用这套Result API的最大的好处在于把结果的处理从Activity中解耦出来，因此，最为理想的方式是能在独立的class中做这些事情。</p>

<p>这就需要使用<a href="https://developer.android.com/reference/androidx/activity/result/ActivityResultRegistry">ActivityResultRegistry</a>，它才是核心，另外三个类（launcher，contract和callback）都是一些封装，事实上Activity和Fragment里面的方法registerForActivityResult其实也是使用这个registry来实现的。从Activity中可以拿到registry的实例，以此作为参数，就可以在自定义的class中使用Result APIs了。</p>

<p>比如单独封装获取图片的流程可以这样写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">class</span> <span class="nc">MyLifecycleObserver</span><span class="p">(</span><span class="k">private</span> <span class="k">val</span> <span class="py">registry</span> <span class="p">:</span> <span class="n">ActivityResultRegistry</span><span class="p">)</span>
</span><span class='line'>        <span class="p">:</span> <span class="n">DefaultLifecycleObserver</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">lateinit</span> <span class="k">var</span> <span class="py">getContent</span> <span class="p">:</span> <span class="n">ActivityResultLauncher</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">owner</span><span class="p">:</span> <span class="n">LifecycleOwner</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">getContent</span> <span class="p">=</span> <span class="n">registry</span><span class="p">.</span><span class="n">register</span><span class="p">(</span><span class="s">&quot;key&quot;</span><span class="p">,</span> <span class="n">owner</span><span class="p">,</span> <span class="n">GetContent</span><span class="p">())</span> <span class="p">{</span> <span class="n">uri</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="c1">// Handle the returned Uri</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">selectImage</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">getContent</span><span class="p">.</span><span class="n">launch</span><span class="p">(</span><span class="s">&quot;image/*&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MyFragment</span> <span class="p">:</span> <span class="n">Fragment</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">lateinit</span> <span class="k">var</span> <span class="py">observer</span> <span class="p">:</span> <span class="n">MyLifecycleObserver</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">observer</span> <span class="p">=</span> <span class="n">MyLifecycleObserver</span><span class="p">(</span><span class="n">requireActivity</span><span class="p">().</span><span class="n">activityResultRegistry</span><span class="p">)</span>
</span><span class='line'>        <span class="n">lifecycle</span><span class="p">.</span><span class="n">addObserver</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onViewCreated</span><span class="p">(</span><span class="n">view</span><span class="p">:</span> <span class="n">View</span><span class="p">,</span> <span class="n">savedInstanceState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">selectButton</span> <span class="p">=</span> <span class="n">view</span><span class="p">.</span><span class="n">findViewById</span><span class="p">&lt;</span><span class="n">Button</span><span class="p">&gt;(</span><span class="n">R</span><span class="p">.</span><span class="n">id</span><span class="p">.</span><span class="n">select_button</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">selectButton</span><span class="p">.</span><span class="n">setOnClickListener</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 触发获取图片的流程</span>
</span><span class='line'>            <span class="n">observer</span><span class="p">.</span><span class="n">selectImage</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个示例把获取图片的流程（发起和结果处理）都封装在了一个单独的类中，同时又是明是监听了Activity组件的生命周期。谷歌是强烈建议同时要<a href="https://developer.android.com/reference/kotlin/androidx/lifecycle/LifecycleObserver">监听生命周期</a>（通过扩展LifecycleObserver），这是因为<a href="https://developer.android.com/reference/androidx/lifecycle/LifecycleOwner">LifecycleOwner</a>会在destroy时自动帮你反注册ActivityResultLauncher，不然的话就要手动的<a href="https://developer.android.com/reference/androidx/activity/result/ActivityResultLauncher#unregister(">反注册</a>)。</p>

<h2>自定义Contract</h2>

<p>尽管谷歌已经在<a href="https://developer.android.com/reference/androidx/activity/result/contract/ActivityResultContracts">ActivityResultContracts</a>中已经预定义了大量的contracts可以使用，但仍然会有一些特殊的场景因预定义的contract无法满足需求而需要自定义一个contract。这个contract实际上就是约定了组件复用的接口，就像普通的interface一样，定义好输入与输出的类型就可以了，所以需要给contract提供输入输出的类型，如果不需要输入或者输出就使用Void?或者Unit。</p>

<p>此外还需要实现一个<a href="https://developer.android.com/reference/androidx/activity/result/contract/ActivityResultContract#createIntent(android.content.Context,kotlin.Any">createIntent方法</a>)，这个方法接收一个Context和其他输入（即contract约定的输入，最终是由ActivityResultLauncher中方法launch时提供）作为参数并返回一个Intent对象，此Intent会是startActivityForResult的输入参数。同时还需要实现另外一个<a href="https://developer.android.com/reference/androidx/activity/result/contract/ActivityResultContract#parseResult(kotlin.Int,android.content.Intent">方法parseIntent</a>)，此方法将<a href="https://developer.android.com/reference/android/app/Activity#onActivityResult(int,%20int,%20android.content.Intent,%20android.app.ComponentCaller">Activity的标准钩子onActivityResult</a>)中的参数resultCode和Intent转化为contract中约定的输出（此输出会作为回调ActivityResultCallback函数方法onActivityResult的输入参数）。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">class</span> <span class="nc">PickRingtone</span> <span class="p">:</span> <span class="n">ActivityResultContract</span><span class="p">&lt;</span><span class="n">Int</span><span class="p">,</span> <span class="n">Uri</span><span class="p">?&gt;()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">createIntent</span><span class="p">(</span><span class="n">context</span><span class="p">:</span> <span class="n">Context</span><span class="p">,</span> <span class="n">ringtoneType</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">=</span>
</span><span class='line'>        <span class="n">Intent</span><span class="p">(</span><span class="n">RingtoneManager</span><span class="p">.</span><span class="n">ACTION_RINGTONE_PICKER</span><span class="p">).</span><span class="n">apply</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">putExtra</span><span class="p">(</span><span class="n">RingtoneManager</span><span class="p">.</span><span class="n">EXTRA_RINGTONE_TYPE</span><span class="p">,</span> <span class="n">ringtoneType</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">parseResult</span><span class="p">(</span><span class="n">resultCode</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">result</span><span class="p">:</span> <span class="n">Intent</span><span class="p">?)</span> <span class="p">:</span> <span class="n">Uri</span><span class="p">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">resultCode</span> <span class="p">!=</span> <span class="n">Activity</span><span class="p">.</span><span class="n">RESULT_OK</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">null</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span><span class="o">?.</span><span class="n">getParcelableExtra</span><span class="p">(</span><span class="n">RingtoneManager</span><span class="p">.</span><span class="n">EXTRA_RINGTONE_PICKED_URI</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果现有的contracts不满足需求，且也无具体的输入输出要求，那么可以用一个万用contract，即<a href="https://developer.android.com/reference/androidx/activity/result/contract/ActivityResultContracts.StartActivityForResult">StartActivityForResult</a>。这个万用contract的输入是一个Intent，输出是一个<a href="https://developer.android.com/reference/androidx/activity/result/ActivityResult">ActivityResult</a>，在回调方法onActivityResult中可以直接从ActivityResult实例中取出resultCode和目标返回的Intent对象：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">startForResult</span> <span class="p">=</span> <span class="n">registerForActivityResult</span><span class="p">(</span><span class="n">StartActivityForResult</span><span class="p">())</span> <span class="p">{</span> <span class="n">result</span><span class="p">:</span> <span class="n">ActivityResult</span> <span class="p">-&gt;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">resultCode</span> <span class="p">==</span> <span class="n">Activity</span><span class="p">.</span><span class="n">RESULT_OK</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">intent</span> <span class="p">=</span> <span class="n">result</span><span class="p">.</span><span class="n">data</span>
</span><span class='line'>        <span class="c1">// 处理目标返回的Intent</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">startButton</span> <span class="p">=</span> <span class="n">findViewById</span><span class="p">(</span><span class="n">R</span><span class="p">.</span><span class="n">id</span><span class="p">.</span><span class="n">start_button</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">startButton</span><span class="p">.</span><span class="n">setOnClickListener</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 传入想要启动的Intent对象</span>
</span><span class='line'>        <span class="n">startForResult</span><span class="p">.</span><span class="n">launch</span><span class="p">(</span><span class="n">Intent</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">ResultProducingActivity</span><span class="o">::</span><span class="k">class</span><span class="p">.</span><span class="n">java</span><span class="p">))</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>从这里我们可以看出，这套Result API本质上仍是依赖于原始的startActivityForResult和onActivityResult。</p>

<h2>在Compose中使用Result API</h2>

<p>接下来我们看看如何在Jetpack Compose使用这套API，这套API与Activity彻底解耦且支持函数式写法，所以可以在Compose中使用。这套API的核心是ActivityResultRegistry，有了它其他几个就可以使用起来了，而它的实例可以直接从Activity中取出来，所以这套API在Compose中完全可以用起来，与前面讲到的在Activity之外的逻辑完全一样：获取此对象用于register一个contract，同时得到一个launcher对象，在回调中处理结果，在合适的时机触发launch。</p>

<p>幸运的是完全用不着自己折腾，Compose中已经做好了封装，直接使用<a href="https://developer.android.com/reference/kotlin/androidx/activity/compose/package-summary#rememberlauncherforactivityresult">rememberLauncherForActivityResult</a>即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">GetContentExample</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">imageUri</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">&lt;</span><span class="n">Uri</span><span class="p">?&gt;(</span><span class="k">null</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">launcher</span> <span class="p">=</span> <span class="n">rememberLauncherForActivityResult</span><span class="p">(</span><span class="n">ActivityResultContracts</span><span class="p">.</span><span class="n">GetContent</span><span class="p">())</span> <span class="p">{</span> <span class="n">uri</span><span class="p">:</span> <span class="n">Uri</span><span class="p">?</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="n">imageUri</span> <span class="p">=</span> <span class="n">uri</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">Column</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Button</span><span class="p">(</span><span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span> <span class="n">launcher</span><span class="p">.</span><span class="n">launch</span><span class="p">(</span><span class="s">&quot;image/*&quot;</span><span class="p">)</span> <span class="p">})</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Text</span><span class="p">(</span><span class="n">text</span> <span class="p">=</span> <span class="s">&quot;Load Image&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">Image</span><span class="p">(</span>
</span><span class='line'>            <span class="n">painter</span> <span class="p">=</span> <span class="n">rememberAsyncImagePainter</span><span class="p">(</span><span class="n">imageUri</span><span class="p">),</span>
</span><span class='line'>            <span class="n">contentDescription</span> <span class="p">=</span> <span class="s">&quot;My Image&quot;</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>今天我们学习了Jetpack中提供的新式处理activity result的方法，这不仅能让在函数式编程范式中复用组件变成可能，也可以把很多逻辑从Activity中抽离出来，能给Activity瘦身，让组件跳转变得更为优雅。</p>

<h2>References</h2>

<ul>
<li><a href="https://blog.dogukangun.de/the-usage-of-activity-result-launcher-9c3d2241ec8">The Usage of Activity Result Launcher</a></li>
<li><a href="https://developer.android.com/training/basics/intents/result">Get a result from an activity</a></li>
<li><a href="https://stackoverflow.com/questions/64721218/jetpack-compose-launch-activityresultcontract-request-from-composable-function">Jetpack Compose: Launch ActivityResultContract request from Composable function</a></li>
<li><a href="https://developer.android.com/develop/ui/compose/libraries">Compose and other libraries</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[喜迎国庆，用Compose赶制一面五星红旗]]></title>
    <link href="https://alexhilton.github.io/blog/2024/10/11/waving-flag-with-compose/"/>
    <updated>2024-10-11T22:38:22+08:00</updated>
    <id>https://alexhilton.github.io/blog/2024/10/11/waving-flag-with-compose</id>
    <content type="html"><![CDATA[<p>我们学习Jetpack Compose已经有一段时间了，通过前面的学习已能掌握足够的技巧以在实战中应用。恰逢普天庆国庆，利用我们学过的知识，使用Jetpack Compose来画一个迎风飘扬的五星红旗吧！废话不多说，先来看一眼效果图。</p>

<p><a href="https://alexhilton.github.io/blog/2024/10/11/waving-flag-with-compose/"><img src="file:///Users/alexhilton/Downloads/compose_libs/red_flag.gif" title="auto auto" ></a></p>

<!-- more -->


<h2>五星红旗的设计标准</h2>

<p>需要特别注意，五星红旗有明确的设计标准的，在<a href="https://www.gov.cn/xinwen/2020-12/24/content_5572913.htm">国旗法中有明确的制法说明</a>。</p>

<p>总结一下要点：宽与高之比为3比2，五颗星都在左上四分之一小矩形内，最大五角星直径约为高的十分之一，四个小五角星的一个角要指向大五角星的中心。</p>

<h2>如何画五角星</h2>

<p>五星红旗并不是特别复杂，拆解一下，其组成图案就是矩形和五角星了，矩形是基本的图形可以直接画。需要研究一下五角星怎么画。</p>

<p>画对称多边形的方法都要借助圆，因为几何图形最容易画的同时也是最标准的就是圆了，再借助角度从圆上取点，把点连成线就是多边形。多边形的顶角度数不一样，因此把圆分成多少份，就能画出不同的多边形了。</p>

<p>五角星也要借助圆，把五角星五个顶点连线就是一个正五边形了，所以在圆上取5个等分点，也即每隔72度取一个点，然后把这5个点每隔一点连成线，就是五角星了。如下图所示：</p>

<p><img src="https://www.algebra.com/cgi-bin/plot-formula.mpl?expression=drawing%28330%2C330%2C-6.6%2C6.6%2C-6.6%2C6.6%2Cgrid%280%29%2C%0D%0Ared%28circle%280%2C0%2C6%29%29%2Cline%280%2C6%2C3.527%2C-4.854%29%2Clocate%285.8%2C1.9%2CP%29%2C%0D%0Aline%280%2C6%2C-3.527%2C-4.854%29%2Cline%28-3.527%2C-4.854%2C5.706%2C1.854%29%2C%0D%0Aline%28-5.706%2C1.854%2C5.706%2C1.854%29%2Cline%28-5.706%2C1.854%2C3.527%2C-4.854%29%2C%0D%0Ared%28arrow%280%2C0%2C6.562%2C2.132%29%29%2Cred%28arc%280%2C0%2C4.4%2C4.4%2C-18%2C0%29%29%2C%0D%0Alocate%282.2%2C1%2Cred%2890%5Eo-72%5Eo=18%5Eo%29%29%2Cred%28arc%280%2C0%2C8%2C8%2C-90%2C-18%29%29%2C%0D%0Alocate%282.8%2C3.5%2Cred%2872%5Eo%29%29%2Cgreen%28arrow%280%2C0%2C3.879%2C5.34%29%29%2C%0D%0Agreen%28arc%280%2C0%2C2.2%2C2.2%2C-90%2C-54%29%29%2Clocate%280.1%2C2%2Cgreen%2836%5Eo%29%29%0D%0A%29" alt="图2. 五角星画法" /></p>

<p>这种画法对手工尺规作图很友好，对程序来说，就没那么友好了。程序化的API需要明确的坐标点，把点串连成路径（Path）。这里需要的五角星是填充的，所以如果能知道5个顶点，和凹进来的五个点，只要把这10个点串起来，就能组成一个闭合的图形，得到我们想要五角星了。</p>

<p>五角星的外面五个点和内部五个点能组成两个正五边形，这两个正五边形的外接圆是两个同心圆，外顶点与内顶点刚好相差36度，正五边形的顶点之间是72度。所以，我们通过画两个半径不同的同心圆，每个圆分成5份，大圆的点与小圆的点交错开，就能画出一个五角星了。圆心和半径是关键的参数，通过圆心与半径，就能精细调整五角星的形状。</p>

<p><img src="https://mathalino.com/sites/default/files/images/005-planegeom-pentagram.jpg" alt="图3. 填充式五角星" /></p>

<p>因为五角星是填充色，所以我们把最外层的五个点与内层的五个点连串一起组成一个闭合的图形。通过前面的<a href="https://juejin.cn/post/7381826917086920742">降Compose十八掌之『利涉大川』| Canvas</a>学习，我们知道可以用路径（Path）来画图形，一共10个点把圆分成10分，所以角度是36度，半径是一大一小交错开来：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'>   <span class="k">val</span> <span class="py">path</span> <span class="p">=</span> <span class="n">Path</span><span class="p">().</span><span class="n">apply</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">pointNumber</span> <span class="p">=</span> <span class="m">5</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">angle</span> <span class="p">=</span> <span class="n">PI</span><span class="p">.</span><span class="n">toFloat</span><span class="p">()</span> <span class="p">/</span> <span class="n">pointNumber</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">innerRadius</span> <span class="p">=</span> <span class="n">radius</span> <span class="p">*</span> <span class="n">cos</span><span class="p">(</span><span class="n">angle</span><span class="p">)</span> <span class="p">/</span> <span class="m">2f</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="k">in</span> <span class="n">pointNumber</span> <span class="p">*</span> <span class="m">2</span> <span class="n">downTo</span> <span class="m">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">r</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="p">%</span> <span class="m">2</span> <span class="p">==</span> <span class="m">1</span><span class="p">)</span> <span class="n">radius</span> <span class="k">else</span> <span class="n">innerRadius</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">omega</span> <span class="p">=</span> <span class="n">angle</span> <span class="p">*</span> <span class="n">i</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">val</span> <span class="py">x</span> <span class="p">=</span> <span class="n">center</span><span class="p">.</span><span class="n">x</span> <span class="p">+</span> <span class="n">r</span> <span class="p">*</span> <span class="n">sin</span><span class="p">(</span><span class="n">omega</span><span class="p">)</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">y</span> <span class="p">=</span> <span class="n">center</span><span class="p">.</span><span class="n">y</span> <span class="p">+</span> <span class="n">r</span> <span class="p">*</span> <span class="n">cos</span><span class="p">(</span><span class="n">omega</span><span class="p">)</span>
</span><span class='line'>            <span class="n">lineTo</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">drawPath</span><span class="p">(</span>
</span><span class='line'>        <span class="n">path</span> <span class="p">=</span> <span class="n">path</span><span class="p">,</span>
</span><span class='line'>        <span class="n">color</span> <span class="p">=</span> <span class="n">color</span><span class="p">,</span>
</span><span class='line'>        <span class="n">style</span> <span class="p">=</span> <span class="n">Fill</span>
</span><span class='line'>    <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>画五星红旗</h2>

<p>根据制法以及画五角星的方法，我们总结一下设计要点：</p>

<ol>
<li>用一个高height作为主要参数，那么宽就是其1.5倍，其他的参数都与height有关系，所以改变height就可以完全控制整个旗子的大小；</li>
<li>大五星圆心x是宽的1/6，y是height的1/4，可以看出比例是一致的，所以可以先计算y，再乘1.5就是x；</li>
<li>大五星的外接圆直径约是height的3/10，半径就是高度的3/20，这样大五星就完全确定了；</li>
<li>小五星的直径是高的1/10，半径就是1/20；从上到下命名为a，b，c，d；</li>
<li>小五星a的圆心x在宽的1/3，y在高的1/10</li>
<li>小五星b的圆心x在宽的2/5，y在高的1/5</li>
<li>小五星c的圆心x在宽的2/5，y在高的7/20</li>
<li>小五星d的圆心x在宽的1/3，y在高的9/20</li>
<li>小五星的角要对着大五星的圆心，也就是要把小五星旋转一下。一个办法对Path做变幻，但其实不用那么复杂。我们在画五角星时，选择点时加上一个偏移角度beta就可以了，这样尖角就有旋转角度了。这个旋转角度可以用小五星的圆心与alpha的圆心来求得，就是这两个圆心连线与水平x轴的夹角，用反正切atan来求。</li>
</ol>


<p>综上，就可以写代码啦：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">FiveStarsRedFlag</span><span class="p">(</span><span class="n">height</span><span class="p">:</span> <span class="n">Dp</span> <span class="p">=</span> <span class="m">200.</span><span class="n">dp</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">stickWidth</span> <span class="p">=</span> <span class="m">10.</span><span class="n">dp</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">flagWidth</span> <span class="p">=</span> <span class="n">height</span><span class="p">.</span><span class="n">times</span><span class="p">(</span><span class="m">1.5f</span><span class="p">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">flagHeight</span> <span class="p">=</span> <span class="n">height</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">canvasWidth</span> <span class="p">=</span> <span class="n">flagWidth</span><span class="p">.</span><span class="n">plus</span><span class="p">(</span><span class="n">stickWidth</span><span class="p">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">canvasHeight</span> <span class="p">=</span> <span class="n">height</span><span class="p">.</span><span class="n">times</span><span class="p">(</span><span class="m">2f</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Canvas</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="n">canvasWidth</span><span class="p">,</span> <span class="n">canvasHeight</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// The background</span>
</span><span class='line'>        <span class="n">drawRect</span><span class="p">(</span><span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Red</span><span class="p">,</span> <span class="n">size</span> <span class="p">=</span> <span class="n">Size</span><span class="p">(</span><span class="n">flagWidth</span><span class="p">.</span><span class="n">toPx</span><span class="p">(),</span> <span class="n">flagHeight</span><span class="p">.</span><span class="n">toPx</span><span class="p">()))</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// The stick</span>
</span><span class='line'>        <span class="n">drawRect</span><span class="p">(</span><span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">LightGray</span><span class="p">,</span> <span class="n">size</span> <span class="p">=</span> <span class="n">Size</span><span class="p">(</span><span class="n">stickWidth</span><span class="p">.</span><span class="n">toPx</span><span class="p">(),</span> <span class="n">canvasHeight</span><span class="p">.</span><span class="n">toPx</span><span class="p">()))</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="py">centerY</span> <span class="p">=</span> <span class="n">flagHeight</span><span class="p">.</span><span class="n">toPx</span><span class="p">()</span> <span class="p">/</span> <span class="m">4f</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">centerX</span> <span class="p">=</span> <span class="n">flagWidth</span><span class="p">.</span><span class="n">toPx</span><span class="p">()</span> <span class="p">/</span> <span class="m">6f</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">radius</span> <span class="p">=</span> <span class="n">flagHeight</span><span class="p">.</span><span class="n">toPx</span><span class="p">()</span> <span class="p">*</span> <span class="m">3f</span> <span class="p">/</span> <span class="m">20f</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">smallRadius</span> <span class="p">=</span> <span class="n">flagHeight</span><span class="p">.</span><span class="n">toPx</span><span class="p">()</span> <span class="p">/</span> <span class="m">20f</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">alphaCenter</span> <span class="p">=</span> <span class="n">Offset</span><span class="p">(</span><span class="n">centerX</span><span class="p">,</span> <span class="n">centerY</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 大五角星 alpha</span>
</span><span class='line'>        <span class="n">drawStar</span><span class="p">(</span>
</span><span class='line'>            <span class="n">alphaCenter</span> <span class="p">=</span> <span class="n">alphaCenter</span><span class="p">,</span>
</span><span class='line'>            <span class="n">center</span> <span class="p">=</span> <span class="n">alphaCenter</span><span class="p">,</span>
</span><span class='line'>            <span class="n">radius</span> <span class="p">=</span> <span class="n">radius</span><span class="p">,</span>
</span><span class='line'>            <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Yellow</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 小五星 a</span>
</span><span class='line'>        <span class="n">drawStar</span><span class="p">(</span>
</span><span class='line'>            <span class="n">alphaCenter</span> <span class="p">=</span> <span class="n">alphaCenter</span><span class="p">,</span>
</span><span class='line'>            <span class="n">center</span> <span class="p">=</span> <span class="n">Offset</span><span class="p">(</span><span class="n">flagWidth</span><span class="p">.</span><span class="n">toPx</span><span class="p">()</span> <span class="p">/</span> <span class="m">3f</span><span class="p">,</span> <span class="n">flagHeight</span><span class="p">.</span><span class="n">toPx</span><span class="p">()</span> <span class="p">/</span> <span class="m">10f</span><span class="p">),</span>
</span><span class='line'>            <span class="n">radius</span> <span class="p">=</span> <span class="n">smallRadius</span><span class="p">,</span>
</span><span class='line'>            <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Yellow</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 小五星 b</span>
</span><span class='line'>        <span class="n">drawStar</span><span class="p">(</span>
</span><span class='line'>            <span class="n">alphaCenter</span> <span class="p">=</span> <span class="n">alphaCenter</span><span class="p">,</span>
</span><span class='line'>            <span class="n">center</span> <span class="p">=</span> <span class="n">Offset</span><span class="p">(</span><span class="n">flagWidth</span><span class="p">.</span><span class="n">toPx</span><span class="p">()</span> <span class="p">*</span> <span class="m">0.4f</span><span class="p">,</span> <span class="n">flagHeight</span><span class="p">.</span><span class="n">toPx</span><span class="p">()</span> <span class="p">/</span> <span class="m">5f</span><span class="p">),</span>
</span><span class='line'>            <span class="n">radius</span> <span class="p">=</span> <span class="n">smallRadius</span><span class="p">,</span>
</span><span class='line'>            <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Yellow</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 小五星 c</span>
</span><span class='line'>        <span class="n">drawStar</span><span class="p">(</span>
</span><span class='line'>            <span class="n">alphaCenter</span> <span class="p">=</span> <span class="n">alphaCenter</span><span class="p">,</span>
</span><span class='line'>            <span class="n">center</span> <span class="p">=</span> <span class="n">Offset</span><span class="p">(</span><span class="n">flagWidth</span><span class="p">.</span><span class="n">toPx</span><span class="p">()</span> <span class="p">*</span> <span class="m">0.4f</span><span class="p">,</span> <span class="n">flagHeight</span><span class="p">.</span><span class="n">toPx</span><span class="p">()</span> <span class="p">*</span> <span class="m">7</span> <span class="p">/</span> <span class="m">20f</span><span class="p">),</span>
</span><span class='line'>            <span class="n">radius</span> <span class="p">=</span> <span class="n">smallRadius</span><span class="p">,</span>
</span><span class='line'>            <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Yellow</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 小五星 d</span>
</span><span class='line'>        <span class="n">drawStar</span><span class="p">(</span>
</span><span class='line'>            <span class="n">alphaCenter</span> <span class="p">=</span> <span class="n">alphaCenter</span><span class="p">,</span>
</span><span class='line'>            <span class="n">center</span> <span class="p">=</span> <span class="n">Offset</span><span class="p">(</span><span class="n">flagWidth</span><span class="p">.</span><span class="n">toPx</span><span class="p">()</span> <span class="p">/</span> <span class="m">3f</span><span class="p">,</span> <span class="n">flagHeight</span><span class="p">.</span><span class="n">toPx</span><span class="p">()</span> <span class="p">*</span> <span class="m">9</span> <span class="p">/</span> <span class="m">20f</span><span class="p">),</span>
</span><span class='line'>            <span class="n">radius</span> <span class="p">=</span> <span class="n">smallRadius</span><span class="p">,</span>
</span><span class='line'>            <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Yellow</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">DrawScope</span><span class="p">.</span><span class="n">drawStar</span><span class="p">(</span><span class="n">alphaCenter</span><span class="p">:</span> <span class="n">Offset</span><span class="p">,</span> <span class="n">center</span><span class="p">:</span> <span class="n">Offset</span><span class="p">,</span> <span class="n">radius</span><span class="p">:</span> <span class="n">Float</span><span class="p">,</span> <span class="n">color</span><span class="p">:</span> <span class="n">Color</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">pointNumber</span> <span class="p">=</span> <span class="m">5</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">angle</span> <span class="p">=</span> <span class="n">PI</span><span class="p">.</span><span class="n">toFloat</span><span class="p">()</span> <span class="p">/</span> <span class="n">pointNumber</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">innerRadius</span> <span class="p">=</span> <span class="n">radius</span> <span class="p">*</span> <span class="n">cos</span><span class="p">(</span><span class="n">angle</span><span class="p">)</span> <span class="p">/</span> <span class="m">2f</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">beta</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">alphaCenter</span> <span class="p">==</span> <span class="n">center</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="m">0f</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">PI</span><span class="p">.</span><span class="n">toFloat</span><span class="p">()</span> <span class="p">/</span> <span class="m">2f</span> <span class="p">-</span> <span class="n">atan</span><span class="p">((</span><span class="n">center</span><span class="p">.</span><span class="n">y</span> <span class="p">-</span> <span class="n">alphaCenter</span><span class="p">.</span><span class="n">y</span><span class="p">)</span> <span class="p">/</span> <span class="p">(</span><span class="n">center</span><span class="p">.</span><span class="n">x</span> <span class="p">-</span> <span class="n">alphaCenter</span><span class="p">.</span><span class="n">x</span><span class="p">))</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">path</span> <span class="p">=</span> <span class="n">Path</span><span class="p">().</span><span class="n">apply</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="k">in</span> <span class="m">0</span> <span class="p">..</span> <span class="n">pointNumber</span> <span class="p">*</span> <span class="m">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">r</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="p">%</span> <span class="m">2</span> <span class="p">==</span> <span class="m">1</span><span class="p">)</span> <span class="n">radius</span> <span class="k">else</span> <span class="n">innerRadius</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">omega</span> <span class="p">=</span> <span class="n">angle</span> <span class="p">*</span> <span class="n">i</span> <span class="p">+</span> <span class="n">beta</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">val</span> <span class="py">x</span> <span class="p">=</span> <span class="n">center</span><span class="p">.</span><span class="n">x</span> <span class="p">+</span> <span class="n">r</span> <span class="p">*</span> <span class="n">sin</span><span class="p">(</span><span class="n">omega</span><span class="p">)</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">y</span> <span class="p">=</span> <span class="n">center</span><span class="p">.</span><span class="n">y</span> <span class="p">+</span> <span class="n">r</span> <span class="p">*</span> <span class="n">cos</span><span class="p">(</span><span class="n">omega</span><span class="p">)</span>
</span><span class='line'>            <span class="n">lineTo</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">close</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">drawPath</span><span class="p">(</span>
</span><span class='line'>        <span class="n">path</span> <span class="p">=</span> <span class="n">path</span><span class="p">,</span>
</span><span class='line'>        <span class="n">color</span> <span class="p">=</span> <span class="n">color</span><span class="p">,</span>
</span><span class='line'>        <span class="n">style</span> <span class="p">=</span> <span class="n">Fill</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>为了检查画图结果是否符合设计，我们可以画出制法中的那样的格子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">DEBUG</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">strokeWidth</span> <span class="p">=</span> <span class="m">0.8</span><span class="p">.</span><span class="n">dp</span><span class="p">.</span><span class="n">toPx</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Slice</span>
</span><span class='line'>        <span class="n">drawLine</span><span class="p">(</span>
</span><span class='line'>            <span class="n">Color</span><span class="p">.</span><span class="n">Black</span><span class="p">,</span>
</span><span class='line'>            <span class="n">Offset</span><span class="p">(</span><span class="n">stickWidth</span><span class="p">.</span><span class="n">toPx</span><span class="p">(),</span> <span class="n">flagHeight</span><span class="p">.</span><span class="n">toPx</span><span class="p">()</span> <span class="p">/</span> <span class="m">2f</span><span class="p">),</span>
</span><span class='line'>            <span class="n">Offset</span><span class="p">(</span><span class="n">flagWidth</span><span class="p">.</span><span class="n">toPx</span><span class="p">(),</span> <span class="n">flagHeight</span><span class="p">.</span><span class="n">toPx</span><span class="p">()</span> <span class="p">/</span> <span class="m">2f</span><span class="p">),</span>
</span><span class='line'>            <span class="n">strokeWidth</span> <span class="p">=</span> <span class="n">strokeWidth</span> <span class="p">*</span> <span class="m">2f</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">drawLine</span><span class="p">(</span>
</span><span class='line'>            <span class="n">Color</span><span class="p">.</span><span class="n">Black</span><span class="p">,</span>
</span><span class='line'>            <span class="n">Offset</span><span class="p">(</span><span class="n">flagWidth</span><span class="p">.</span><span class="n">toPx</span><span class="p">()</span> <span class="p">/</span> <span class="m">2f</span><span class="p">,</span> <span class="m">0f</span><span class="p">),</span>
</span><span class='line'>            <span class="n">Offset</span><span class="p">(</span><span class="n">flagWidth</span><span class="p">.</span><span class="n">toPx</span><span class="p">()</span> <span class="p">/</span> <span class="m">2f</span><span class="p">,</span> <span class="n">flagHeight</span><span class="p">.</span><span class="n">toPx</span><span class="p">()),</span>
</span><span class='line'>            <span class="n">strokeWidth</span> <span class="p">=</span> <span class="n">strokeWidth</span> <span class="p">*</span> <span class="m">2f</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Grid</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="k">in</span> <span class="m">1</span> <span class="n">until</span> <span class="m">10</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">drawLine</span><span class="p">(</span>
</span><span class='line'>                <span class="n">Color</span><span class="p">.</span><span class="n">Black</span><span class="p">,</span>
</span><span class='line'>                <span class="n">Offset</span><span class="p">(</span><span class="n">stickWidth</span><span class="p">.</span><span class="n">toPx</span><span class="p">(),</span> <span class="n">flagHeight</span><span class="p">.</span><span class="n">toPx</span><span class="p">()</span> <span class="p">*</span> <span class="n">i</span> <span class="p">/</span> <span class="m">20f</span><span class="p">),</span>
</span><span class='line'>                <span class="n">Offset</span><span class="p">(</span><span class="n">flagWidth</span><span class="p">.</span><span class="n">toPx</span><span class="p">()</span> <span class="p">/</span> <span class="m">2f</span><span class="p">,</span> <span class="n">flagHeight</span><span class="p">.</span><span class="n">toPx</span><span class="p">()</span> <span class="p">*</span> <span class="n">i</span> <span class="p">/</span> <span class="m">20f</span><span class="p">),</span>
</span><span class='line'>                <span class="n">strokeWidth</span> <span class="p">=</span> <span class="n">strokeWidth</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="k">in</span> <span class="m">1</span> <span class="n">until</span> <span class="m">14</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">drawLine</span><span class="p">(</span>
</span><span class='line'>                <span class="n">Color</span><span class="p">.</span><span class="n">Black</span><span class="p">,</span>
</span><span class='line'>                <span class="n">Offset</span><span class="p">(</span><span class="n">stickWidth</span><span class="p">.</span><span class="n">toPx</span><span class="p">()</span> <span class="p">+</span> <span class="n">flagWidth</span><span class="p">.</span><span class="n">toPx</span><span class="p">()</span> <span class="p">*</span> <span class="n">i</span> <span class="p">/</span> <span class="m">30f</span><span class="p">,</span> <span class="m">0f</span><span class="p">),</span>
</span><span class='line'>                <span class="n">Offset</span><span class="p">(</span><span class="n">stickWidth</span><span class="p">.</span><span class="n">toPx</span><span class="p">()</span> <span class="p">+</span> <span class="n">flagWidth</span><span class="p">.</span><span class="n">toPx</span><span class="p">()</span> <span class="p">*</span> <span class="n">i</span> <span class="p">/</span> <span class="m">30f</span><span class="p">,</span> <span class="n">flagHeight</span><span class="p">.</span><span class="n">toPx</span><span class="p">()</span> <span class="p">/</span> <span class="m">2f</span><span class="p">),</span>
</span><span class='line'>                <span class="n">strokeWidth</span> <span class="p">=</span> <span class="n">strokeWidth</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>拿带格子的效果图，与制法设计图对比，可以发现一模一样，完全符合设计。</p>

<p><img src="file:///Users/alexhilton/Downloads/compose_libs/flag_with_grid.png" alt="图4. 带格子的效果图" /></p>

<p>好了，到这里，我们的五星红旗就画完了。未完，别走啊，我们还要让旗子飘扬起来。</p>

<h2>让五星红旗飘扬起来</h2>

<p>旗子飘扬的真实形态是三维的曲面，比如用三角函数曲面计算每一个坐标点x, y, z，就像<a href="https://juejin.cn/post/7206950454098247736">这篇文章</a>中的做法那样。</p>

<p>但在Compose中无法实现，因为Compose，虽然也可以做三维的变幻，但都是针对整个图层的，没有办法针对图形中的每个坐标点去单独做变幻，这也是与三维图形库如OpenGL ES的最大区别。</p>

<p>在Compose中要想每个坐标点都不一样，只能绘制曲线，曲线 的点再由动画动态的去改变，这样就会有类似波动一样的效果，但都局限在二维。为此，我们需要用Path来画背景，上边和下边都用曲线，曲线的点用动画来不断的波动，这样就能有点波动的感觉了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">infiniteTransition</span> <span class="p">=</span> <span class="n">rememberInfiniteTransition</span><span class="p">(</span><span class="n">label</span> <span class="p">=</span> <span class="s">&quot;infinite transition&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="py">amplitude</span> <span class="p">=</span> <span class="n">with</span><span class="p">(</span><span class="n">LocalDensity</span><span class="p">.</span><span class="n">current</span><span class="p">)</span> <span class="p">{</span> <span class="n">height</span><span class="p">.</span><span class="n">div</span><span class="p">(</span><span class="m">8f</span><span class="p">).</span><span class="n">toPx</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'><span class="k">val</span> <span class="py">heightPx</span> <span class="p">=</span> <span class="n">with</span><span class="p">(</span><span class="n">LocalDensity</span><span class="p">.</span><span class="n">current</span><span class="p">)</span> <span class="p">{</span> <span class="n">height</span><span class="p">.</span><span class="n">toPx</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="py">waveDuration</span> <span class="p">=</span> <span class="m">2000</span>
</span><span class='line'><span class="k">val</span> <span class="py">ya</span> <span class="k">by</span> <span class="n">infiniteTransition</span><span class="p">.</span><span class="n">animateFloat</span><span class="p">(</span>
</span><span class='line'>    <span class="n">initialValue</span> <span class="p">=</span> <span class="n">amplitude</span> <span class="p">/</span> <span class="m">2f</span><span class="p">,</span>
</span><span class='line'>    <span class="n">targetValue</span> <span class="p">=</span> <span class="p">-</span><span class="n">amplitude</span> <span class="p">/</span> <span class="m">2f</span><span class="p">,</span>
</span><span class='line'>    <span class="n">animationSpec</span> <span class="p">=</span> <span class="n">infiniteRepeatable</span><span class="p">(</span><span class="n">tween</span><span class="p">(</span><span class="n">waveDuration</span><span class="p">),</span> <span class="n">RepeatMode</span><span class="p">.</span><span class="n">Reverse</span><span class="p">),</span>
</span><span class='line'>    <span class="n">label</span> <span class="p">=</span> <span class="s">&quot;ya&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="k">val</span> <span class="py">yb</span> <span class="k">by</span> <span class="n">infiniteTransition</span><span class="p">.</span><span class="n">animateFloat</span><span class="p">(</span>
</span><span class='line'>    <span class="n">initialValue</span> <span class="p">=</span> <span class="p">-</span><span class="n">amplitude</span> <span class="p">/</span> <span class="m">2f</span><span class="p">,</span>
</span><span class='line'>    <span class="n">targetValue</span> <span class="p">=</span> <span class="n">amplitude</span> <span class="p">/</span> <span class="m">2f</span><span class="p">,</span>
</span><span class='line'>    <span class="n">animationSpec</span> <span class="p">=</span> <span class="n">infiniteRepeatable</span><span class="p">(</span><span class="n">tween</span><span class="p">(</span><span class="n">waveDuration</span><span class="p">),</span> <span class="n">RepeatMode</span><span class="p">.</span><span class="n">Reverse</span><span class="p">),</span>
</span><span class='line'>    <span class="n">label</span> <span class="p">=</span> <span class="s">&quot;yb&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="k">val</span> <span class="py">yc</span> <span class="k">by</span> <span class="n">infiniteTransition</span><span class="p">.</span><span class="n">animateFloat</span><span class="p">(</span>
</span><span class='line'>    <span class="n">initialValue</span> <span class="p">=</span> <span class="n">amplitude</span> <span class="p">/</span> <span class="m">2f</span><span class="p">,</span>
</span><span class='line'>    <span class="n">targetValue</span> <span class="p">=</span> <span class="p">-</span><span class="n">amplitude</span> <span class="p">/</span> <span class="m">2f</span><span class="p">,</span>
</span><span class='line'>    <span class="n">animationSpec</span> <span class="p">=</span> <span class="n">infiniteRepeatable</span><span class="p">(</span><span class="n">tween</span><span class="p">(</span><span class="n">waveDuration</span><span class="p">),</span> <span class="n">RepeatMode</span><span class="p">.</span><span class="n">Reverse</span><span class="p">),</span>
</span><span class='line'>    <span class="n">label</span> <span class="p">=</span> <span class="s">&quot;yc&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="py">ye</span> <span class="k">by</span> <span class="n">infiniteTransition</span><span class="p">.</span><span class="n">animateFloat</span><span class="p">(</span>
</span><span class='line'>    <span class="n">initialValue</span> <span class="p">=</span> <span class="n">heightPx</span> <span class="p">+</span> <span class="n">amplitude</span> <span class="p">/</span> <span class="m">2f</span><span class="p">,</span>
</span><span class='line'>    <span class="n">targetValue</span> <span class="p">=</span> <span class="n">heightPx</span> <span class="p">-</span> <span class="n">amplitude</span> <span class="p">/</span> <span class="m">2f</span><span class="p">,</span>
</span><span class='line'>    <span class="n">animationSpec</span> <span class="p">=</span> <span class="n">infiniteRepeatable</span><span class="p">(</span><span class="n">tween</span><span class="p">(</span><span class="n">waveDuration</span><span class="p">),</span> <span class="n">RepeatMode</span><span class="p">.</span><span class="n">Reverse</span><span class="p">),</span>
</span><span class='line'>    <span class="n">label</span> <span class="p">=</span> <span class="s">&quot;ye&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="k">val</span> <span class="py">yf</span> <span class="k">by</span> <span class="n">infiniteTransition</span><span class="p">.</span><span class="n">animateFloat</span><span class="p">(</span>
</span><span class='line'>    <span class="n">initialValue</span> <span class="p">=</span> <span class="n">heightPx</span> <span class="p">-</span> <span class="n">amplitude</span> <span class="p">/</span> <span class="m">2f</span><span class="p">,</span>
</span><span class='line'>    <span class="n">targetValue</span> <span class="p">=</span> <span class="n">heightPx</span> <span class="p">+</span> <span class="n">amplitude</span> <span class="p">/</span> <span class="m">2f</span><span class="p">,</span>
</span><span class='line'>    <span class="n">animationSpec</span> <span class="p">=</span> <span class="n">infiniteRepeatable</span><span class="p">(</span><span class="n">tween</span><span class="p">(</span><span class="n">waveDuration</span><span class="p">),</span> <span class="n">RepeatMode</span><span class="p">.</span><span class="n">Reverse</span><span class="p">),</span>
</span><span class='line'>    <span class="n">label</span> <span class="p">=</span> <span class="s">&quot;yf&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="k">val</span> <span class="py">yg</span> <span class="k">by</span> <span class="n">infiniteTransition</span><span class="p">.</span><span class="n">animateFloat</span><span class="p">(</span>
</span><span class='line'>    <span class="n">initialValue</span> <span class="p">=</span> <span class="n">heightPx</span> <span class="p">+</span> <span class="n">amplitude</span> <span class="p">/</span> <span class="m">2f</span><span class="p">,</span>
</span><span class='line'>    <span class="n">targetValue</span> <span class="p">=</span> <span class="n">heightPx</span> <span class="p">-</span> <span class="n">amplitude</span> <span class="p">/</span> <span class="m">2f</span><span class="p">,</span>
</span><span class='line'>    <span class="n">animationSpec</span> <span class="p">=</span> <span class="n">infiniteRepeatable</span><span class="p">(</span><span class="n">tween</span><span class="p">(</span><span class="n">waveDuration</span><span class="p">),</span> <span class="n">RepeatMode</span><span class="p">.</span><span class="n">Reverse</span><span class="p">),</span>
</span><span class='line'>    <span class="n">label</span> <span class="p">=</span> <span class="s">&quot;yg&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">Canvas</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="n">canvasWidth</span><span class="p">,</span> <span class="n">height</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">stickOffset</span> <span class="p">=</span> <span class="n">Offset</span><span class="p">(</span><span class="n">stickWidth</span><span class="p">.</span><span class="n">toPx</span><span class="p">(),</span> <span class="m">0f</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// The background</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">pathBG</span> <span class="p">=</span> <span class="n">Path</span><span class="p">().</span><span class="n">apply</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">moveTo</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="m">0f</span><span class="p">)</span>
</span><span class='line'>        <span class="n">cubicTo</span><span class="p">(</span><span class="n">flagWidth</span><span class="p">.</span><span class="n">toPx</span><span class="p">()</span> <span class="p">/</span> <span class="m">3f</span><span class="p">,</span> <span class="n">ya</span><span class="p">,</span> <span class="n">flagWidth</span><span class="p">.</span><span class="n">toPx</span><span class="p">()</span> <span class="p">*</span> <span class="m">2f</span> <span class="p">/</span> <span class="m">3f</span><span class="p">,</span> <span class="n">yb</span><span class="p">,</span> <span class="n">flagWidth</span><span class="p">.</span><span class="n">toPx</span><span class="p">(),</span> <span class="n">yc</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">lineTo</span><span class="p">(</span><span class="n">flagWidth</span><span class="p">.</span><span class="n">toPx</span><span class="p">(),</span> <span class="n">ye</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">cubicTo</span><span class="p">(</span><span class="n">flagWidth</span><span class="p">.</span><span class="n">toPx</span><span class="p">()</span> <span class="p">*</span> <span class="m">2f</span> <span class="p">/</span> <span class="m">3f</span><span class="p">,</span> <span class="n">yf</span><span class="p">,</span> <span class="n">flagWidth</span><span class="p">.</span><span class="n">toPx</span><span class="p">()</span> <span class="p">/</span> <span class="m">3f</span><span class="p">,</span> <span class="n">yg</span><span class="p">,</span> <span class="m">0f</span><span class="p">,</span> <span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">lineTo</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="m">0f</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">translate</span><span class="p">(</span><span class="n">stickOffset</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">drawPath</span><span class="p">(</span><span class="n">path</span> <span class="p">=</span> <span class="n">pathBG</span><span class="p">,</span> <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Red</span><span class="p">,</span> <span class="n">style</span> <span class="p">=</span> <span class="n">Fill</span><span class="p">)</span>
</span><span class='line'>   <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>也可以用GraphicsLayer，再添加一点点Y轴和Z轴的旋转，就更像那么回事了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">rotateY</span> <span class="k">by</span> <span class="n">infiniteTransition</span><span class="p">.</span><span class="n">animateFloat</span><span class="p">(</span>
</span><span class='line'>        <span class="n">initialValue</span> <span class="p">=</span> <span class="p">-</span><span class="m">3f</span><span class="p">,</span>
</span><span class='line'>        <span class="n">targetValue</span> <span class="p">=</span> <span class="m">6f</span><span class="p">,</span>
</span><span class='line'>        <span class="n">animationSpec</span> <span class="p">=</span> <span class="n">infiniteRepeatable</span><span class="p">(</span><span class="n">tween</span><span class="p">(</span><span class="m">3000</span><span class="p">),</span> <span class="n">RepeatMode</span><span class="p">.</span><span class="n">Reverse</span><span class="p">),</span>
</span><span class='line'>        <span class="n">label</span> <span class="p">=</span> <span class="s">&quot;rotateY&quot;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="n">Canvas</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="n">canvasWidth</span><span class="p">,</span> <span class="n">height</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">graphicsLayer</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">transformOrigin</span> <span class="p">=</span> <span class="n">TransformOrigin</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="m">0f</span><span class="p">)</span>
</span><span class='line'>                <span class="n">rotationZ</span> <span class="p">=</span> <span class="m">2f</span>
</span><span class='line'>                <span class="n">rotationY</span> <span class="p">=</span> <span class="n">rotateY</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>至此，我们的五星红旗就算做完了，当然了可对背景的左边和右边也加上波动，就会更像一些了，完整代码可以<a href="https://github.com/alexhilton/EffectiveCompose/blob/main/app/src/main/java/net/toughcoder/effectivecompose/WavingFlag.kt">看这里</a>。</p>

<p>让我们小结一下，看似简单的一个五星红旗，实现起来其实并不容易，用到了好多数学知识，书到用时方恨少，数学真的太重要了，无处不在。UI开发会涉及大量的数学（特别是几何）知识，要想做好UI必须 要有良好的数学功底，难度并不小。</p>

<h2>仅供娱乐，请勿参考</h2>

<p>以上的实现方式其实仅供娱乐，在真实的项目中不建议这样一笔一笔的用Canvas来画。建议的实现方式应该是找一个（或者让设计师提供）现成的五星红旗图形资源，然后当成图片来展示 出来。</p>

<p>这样做的好处是把设计与代码实现分离开来，当需要调整设计效果时，不必去修改代码，毕竟替换一个资源比起修改代码的风险要小很多，虽然说可能也只是调整一个整数（颜色），但毕竟是改代码了，风险还是有的。再者，分离开来能让设计工作由更为专业的人士来做，而不必受到（或者考虑）代码实现的限制。还有就是，用代码一笔一笔的画，无论研发效率还是运行效率其实都不高，远不如显示一张图片性能好。</p>

<h2>最后</h2>

<p>祝愿伟大的祖国繁荣昌盛，国泰民安！祝愿所有的朋友国庆快乐，天天开心！</p>

<h2>References</h2>

<ul>
<li><a href="https://codepen.io/jonkemp/pen/EVgaLR">Five-pointed star using CSS</a></li>
<li><a href="https://stackoverflow.com/questions/14580033/algorithm-for-drawing-a-5-point-star">Algorithm for drawing a 5 point star</a></li>
<li><a href="https://www.instructables.com/How-to-draw-a-5-point-star/">How to Draw a 5-point Star</a></li>
<li><a href="https://codepen.io/udit007/pen/XWJooNQ">Waving Flag animation with CSS</a></li>
<li><a href="https://codepen.io/christopheschwyzer/pen/nMoWBa">CSS3 Waving Flags</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[搞定在Jetpack Compose中优雅地申请运行时权限]]></title>
    <link href="https://alexhilton.github.io/blog/2024/09/27/handle-permissions-in-compose/"/>
    <updated>2024-09-27T08:36:47+08:00</updated>
    <id>https://alexhilton.github.io/blog/2024/09/27/handle-permissions-in-compose</id>
    <content type="html"><![CDATA[<p>随着安全与隐私问题越来越被人们所重视，操作系统对应用程序的限制也越来越严格。一个非常明显的控制就是对于运行时权限（Runtime permissions）的管控是越来越严格，很多原本不需要权限的地方也需要了权限。这就要求应用程序必须能够灵活的处理运行时权限。Jetpack Compose作为一个独立于平台的声明式UI框架，本身并没有权限的概念，权限是平台强相关的，本文将研究一下如何在Compose中优雅的申请运行时权限。</p>

<p><a href="https://alexhilton.github.io/blog/2024/09/27/handle-permissions-in-compose/"><img src="https://img-blog.csdnimg.cn/9f802deb822f45a794a15fd9de4bc42d.png" title="auto auto" ></a></p>

<!-- more -->


<p><strong>注意：</strong> 这里提到的权限都是运行时权限，也就是需要在访问某些API之前动态地向用户申请授权许可。</p>

<h2>运行时权限申请用例</h2>

<p>有过Android开发经验的同学对运行时权限申请一定不陌生。自从Android Marshmallow（6.0，API Level 23）开始，对于一些敏感的权限，除了在应用的Manifest中声明以外，还需要在运行时动态的<a href="https://developer.android.com/training/permissions/requesting">向用户申请使用权限</a>，只有在用户同意授权后才可以使用相关的功能，当然用户也可能会拒绝。自此，运行时的权限申请就变成了应用开发的一个标配了。</p>

<p>比如以相机权限为例，第一步，要先在AndroidManifest中声明权限使用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;manifest</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">xmlns:tools=</span><span class="s">&quot;http://schemas.android.com/tools&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&quot;android.permission.CAMERA&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;application</span>
</span><span class='line'>        <span class="err">...</span>
</span><span class='line'>    <span class="err">&lt;/application</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/manifest&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>之后第二步，在要使用相机的入口地方，也就是要访问相机API的入口处先进行权限检查，如果已授予，则走正常的逻辑（如打开相机），否则进行权限申请：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// 调用相机的入口处</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">ContextCompat</span><span class="p">.</span><span class="n">checkSelfPermission</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">Manifest</span><span class="p">.</span><span class="n">permission</span><span class="p">.</span><span class="n">CAMERA</span><span class="p">)</span> <span class="p">==</span> <span class="n">PackageManager</span><span class="p">.</span><span class="n">PERMISSION_GRANTED</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">happyWithCamera</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 提示用户需要权限，然后申请权限</span>
</span><span class='line'>    <span class="n">ActivityCompat</span><span class="p">.</span><span class="n">requestPermissions</span><span class="p">(</span><span class="n">context</span><span class="p">,</span>  <span class="n">arrayOf</span><span class="p">(</span><span class="n">Manifest</span><span class="p">.</span><span class="n">permission</span><span class="p">.</span><span class="n">CAMERA</span><span class="p">),</span> <span class="m">1024</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>权限申请会离开当前的页面，进入到系统的权限处理逻辑。然后第三步，在系统权限回调中（类似于onActivityResult）检查用户权限授予结果，如果已授予则走第二步中的正常逻辑，否则，弹窗提示用户，解释权限对于应用程序的必要性，视权限的必要程度和交互逻辑，可以再次申请权限或者走无权限的逻辑（假如部分功能还可用）或者直接退出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// 系统权限回调，类似于onActivityResult</span>
</span><span class='line'><span class="n">@Override</span>
</span><span class='line'><span class="k">public</span> <span class="n">void</span> <span class="n">onRequestPermissionResult</span><span class="p">(</span><span class="n">int</span> <span class="n">reqCode</span><span class="p">,</span> <span class="n">@NonNull</span> <span class="n">String</span><span class="p">[]</span> <span class="n">perms</span><span class="p">,</span> <span class="n">@NonNull</span> <span class="n">int</span><span class="p">[]</span> <span class="n">results</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">super</span><span class="p">.</span><span class="n">onRequestPermissionResult</span><span class="p">(</span><span class="n">reqCode</span><span class="p">,</span> <span class="n">perms</span><span class="p">,</span> <span class="n">results</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">reqCode</span> <span class="p">==</span> <span class="m">1024</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">results</span><span class="p">.</span><span class="n">length</span> <span class="p">&gt;</span> <span class="m">1</span> <span class="p">&amp;&amp;</span> <span class="n">results</span><span class="p">[</span><span class="m">0</span><span class="p">]</span> <span class="p">==</span> <span class="n">PackageManager</span><span class="p">.</span><span class="n">PERMISSION_GRANTED</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 用户授权了，可以使用相机了</span>
</span><span class='line'>            <span class="n">happyWithCamera</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 权限被用户拒绝，有三种做法：</span>
</span><span class='line'>            <span class="c1">// 1. 如果是必须的权限，可再次申请；</span>
</span><span class='line'>            <span class="c1">// 2. 如果已被拒绝多次，或者不想再次申请，那就提示用户然后退出</span>
</span><span class='line'>            <span class="c1">// 3. 如果是非必须权限，那就走剩余的流程</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果是多个权限，处理的方式也是一样的，因为申请权限以及权限回调中都是数组，也即是可以处理多个权限。</p>

<p>对于在何时着手处理权限，要视权限对业务逻辑的重要程度，如果是必须的权限（如Location于地图应用，Camera于相机应用）那应该在应用启动时，加载任何页面之前作为第一件事情去做；如果不是，非主要业务逻辑，如微信或者支付宝的扫码功能，绝大多数应用都有扫码功能但都非其主要业务逻辑，那应该在用户启动扫码功能时去处理相机权限。</p>

<h2>以原生方式申请运行时权限</h2>

<p>让我们回到Compose世界，因为在Jetpack Compose中没有权限的概念，因此要把原生的权限处理方式在Composable中完成。第一步权限的声明仍需要在应用程序的Manifest中来做，这一步是没有变化的。</p>

<p>第二步和第三步有些麻烦，Compose是由一坨坨的composable函数组成的，我们只能调用其他的函数，没有办法处理权限回调，这是Activity的一个public方法，不是可以设置的常规回调，因为我们没有办法创建Activity的实例。另外前面的例子中请求权限会用到Activity，而在Compossable中不应该去尝试获取Activity，虽然是可以拿到实例的，但作为一个独立的UI框架不应该去拿平台强相关的且生命周期不可控的对象实例。</p>

<p>这里就可以通过一个叫做<a href="https://developer.android.com/reference/androidx/activity/result/ActivityResultLauncher">ActivityResultLancher</a>来对Activity的跳转和onActivityResult进行封装，创建一个ActivityResultLancher实例，设置一个onResult回调来处理onActivityResult，这个launcher也可以用来启动新的Activity。本质上与覆写Activity的方法也是一样的，但最重要的是我们可以自主的创建ActivityResultLancher对象，这样就可以在纯函数式的composable中使用了。ActivityResultLancher可以应对很多跳转场景，由<a href="https://developer.android.com/reference/androidx/activity/result/contract/ActivityResultContract">ActivityResultContract</a>对象来定义，已经有很多预定义类型了，对于申请权限要使用<a href="https://developer.android.com/reference/androidx/activity/result/contract/ActivityResultContracts.RequestPermission">RequestPermission</a>。</p>

<p>仍是以相机权限为例，假定是一个相机权限强必须的拍照应用，可以在应用的入口处定义PermissionInterceptor来处理权限：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">class</span> <span class="nc">MainActivity</span> <span class="p">:</span> <span class="n">ComponentActivity</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">super</span><span class="p">.</span><span class="n">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
</span><span class='line'>        <span class="n">setContent</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">HelloComposeTheme</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// A surface container using the &#39;background&#39; color from the theme</span>
</span><span class='line'>                <span class="n">Surface</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">(),</span>
</span><span class='line'>                    <span class="n">color</span> <span class="p">=</span> <span class="n">MaterialTheme</span><span class="p">.</span><span class="n">colorScheme</span><span class="p">.</span><span class="n">background</span>
</span><span class='line'>                <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">PermissionInterceptor</span><span class="p">(</span>
</span><span class='line'>                        <span class="n">content</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                            <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Happy with Camera!&quot;</span><span class="p">)</span>
</span><span class='line'>                        <span class="p">},</span>
</span><span class='line'>                        <span class="n">noPermission</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                            <span class="n">Text</span><span class="p">(</span><span class="s">&quot;To use this app, you must grant CAMERA permission!&quot;</span><span class="p">)</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                    <span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@SuppressLint</span><span class="p">(</span><span class="s">&quot;LaunchDuringComposition&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">PermissionInterceptor</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="n">content</span><span class="p">:</span> <span class="n">@Composable</span> <span class="n">BoxScope</span><span class="p">.()-&gt;</span><span class="n">Unit</span><span class="p">,</span>
</span><span class='line'>    <span class="n">noPermission</span><span class="p">:</span> <span class="n">@Composable</span> <span class="n">BoxScope</span><span class="p">.()-&gt;</span><span class="n">Unit</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">context</span> <span class="p">=</span> <span class="n">LocalContext</span><span class="p">.</span><span class="n">current</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">permission</span> <span class="p">=</span> <span class="n">Manifest</span><span class="p">.</span><span class="n">permission</span><span class="p">.</span><span class="n">CAMERA</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="py">isGranted</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">&lt;</span><span class="n">Boolean</span><span class="p">?&gt;(</span><span class="k">null</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">permissionLauncher</span> <span class="p">=</span> <span class="n">rememberLauncherForActivityResult</span><span class="p">(</span>
</span><span class='line'>        <span class="n">ActivityResultContracts</span><span class="p">.</span><span class="n">RequestPermission</span><span class="p">()</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span> <span class="n">granted</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="n">isGranted</span> <span class="p">=</span> <span class="n">granted</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Box</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">,</span> <span class="n">contentAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">Center</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">isGranted</span> <span class="p">==</span> <span class="k">true</span> <span class="p">||</span>
</span><span class='line'>            <span class="n">ContextCompat</span><span class="p">.</span><span class="n">checkSelfPermission</span><span class="p">(</span>
</span><span class='line'>                <span class="n">context</span><span class="p">,</span>
</span><span class='line'>                <span class="n">permission</span>
</span><span class='line'>            <span class="p">)</span> <span class="p">==</span> <span class="n">PackageManager</span><span class="p">.</span><span class="n">PERMISSION_GRANTED</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">content</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">isGranted</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">permissionLauncher</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">permissionLauncher</span><span class="p">.</span><span class="n">launch</span><span class="p">(</span><span class="n">permission</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">noPermission</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要注意是如果是像上面例子这样在应用的入口处时就检查并申请权限，需要把launcher包裹在副作用函数LauncherEffect中，否则会有『IllegalStateException: Launcher has not been initialized』，这是因为初始化工作并未做完，但如果是用户点击之后才会触发权限申请则不需要。</p>

<p>在实际项目中，可能不止一个权限需要申请。申请多个动态权限，流程逻辑也一样的，需要传入<a href="https://developer.android.com/reference/androidx/activity/result/contract/ActivityResultContracts.RequestMultiplePermissions">RequestMultiplePermissions</a>，以及参数和结果都是数组：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">MultiplePermissionsInterceptor</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="n">content</span><span class="p">:</span> <span class="n">@Composable</span> <span class="n">BoxScope</span><span class="p">.()-&gt;</span><span class="n">Unit</span><span class="p">,</span>
</span><span class='line'>    <span class="n">noPermission</span><span class="p">:</span> <span class="n">@Composable</span> <span class="n">BoxScope</span><span class="p">.()-&gt;</span><span class="n">Unit</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">context</span> <span class="p">=</span> <span class="n">LocalContext</span><span class="p">.</span><span class="n">current</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">permissions</span> <span class="p">=</span> <span class="n">arrayOf</span><span class="p">(</span>
</span><span class='line'>                        <span class="n">Manifest</span><span class="p">.</span><span class="n">permission</span><span class="p">.</span><span class="n">CAMERA</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">Manifest</span><span class="p">.</span><span class="n">permission</span><span class="p">.</span><span class="n">ACCESS_COARSE_LOCATION</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">Manifest</span><span class="p">.</span><span class="n">permission</span><span class="p">.</span><span class="n">ACCESS_FINE_LOCATION</span>
</span><span class='line'>                    <span class="p">)</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">isGranted</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">&lt;</span><span class="n">Boolean</span><span class="p">?&gt;(</span><span class="k">null</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">permissionLauncher</span> <span class="p">=</span> <span class="n">rememberLauncherForActivityResult</span><span class="p">(</span>
</span><span class='line'>        <span class="n">ActivityResultContracts</span><span class="p">.</span><span class="n">RequestMultiplePermissions</span><span class="p">()</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span> <span class="n">granted</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="n">isGranted</span> <span class="p">=</span> <span class="n">granted</span><span class="p">.</span><span class="n">all</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">value</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Box</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">,</span> <span class="n">contentAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">Center</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">isGranted</span> <span class="p">==</span> <span class="k">true</span> <span class="p">||</span>
</span><span class='line'>            <span class="n">permissions</span><span class="p">.</span><span class="n">all</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">ContextCompat</span><span class="p">.</span><span class="n">checkSelfPermission</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">context</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">it</span>
</span><span class='line'>                <span class="p">)</span> <span class="p">==</span> <span class="n">PackageManager</span><span class="p">.</span><span class="n">PERMISSION_GRANTED</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">content</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">isGranted</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">permissionLauncher</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">permissionLauncher</span><span class="p">.</span><span class="n">launch</span><span class="p">(</span><span class="n">permissions</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">noPermission</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>使用Accompanist-permissions</h2>

<p>事实上谷歌也在着手解决Compose中的权限处理问题，在<a href="https://google.github.io/accompanist/permissions/">accompanist库中有处理权限</a>的API。</p>

<blockquote><p><a href="https://google.github.io/accompanist/">Accompanist</a>是一个由谷歌提供的Jetpack Compose的补充库，也就是说一些开发者强烈需求的API，但还未正式放入Compose中，但谷歌也有意要提供，那么就会先放放Accompanist中，等开发完成试用很好，可能就会移入到Jetpack Compose中变成正式的API。Accompanist中能找到很多新奇的东西，比如像下拉刷新，流式布局，权限处理，WebView等等。但需要注意的是Accompanist多半是试验性的，API很不稳定，说变就变，说没就没，使用之前要三思。</p></blockquote>

<h3>配置accompanist-permission</h3>

<p>Accompanist是一个独立的库，而且拆分的很细，权限处理是一个独立的包：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">dependencies</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Accompanist permission</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">accompanistVersion</span> <span class="p">=</span> <span class="s">&quot;0.32.0&quot;</span>
</span><span class='line'>    <span class="n">implementation</span><span class="p">(</span><span class="s">&quot;com.google.accompanist:accompanist-permissions:$accompanistVersion&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>使用Accompanist-permission</h3>

<p>既然是API自然在封装上会做的更好，使用起来更加的方便。Accompanist使用<a href="https://google.github.io/accompanist/api/permissions/com.google.accompanist.permissions/remember-permission-state.html">rememberPermissionState</a>和<a href="https://google.github.io/accompanist/api/permissions/com.google.accompanist.permissions/remember-multiple-permissions-state.html">rememberMultiplePermissionsState</a>返回一个状态<a href="https://google.github.io/accompanist/api/permissions/com.google.accompanist.permissions/-permission-state/index.html">PermissionState</a>，这个状态既可以检查权限申请结果，也可以去申请权限，体验丝般顺滑：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@OptIn</span><span class="p">(</span><span class="n">ExperimentalPermissionsApi</span><span class="o">::</span><span class="k">class</span><span class="p">)</span>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">AccompanistInterceptor</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="n">content</span><span class="p">:</span> <span class="n">@Composable</span> <span class="n">BoxScope</span><span class="p">.()-&gt;</span><span class="n">Unit</span><span class="p">,</span>
</span><span class='line'>    <span class="n">noPermission</span><span class="p">:</span> <span class="n">@Composable</span> <span class="n">BoxScope</span><span class="p">.()-&gt;</span><span class="n">Unit</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">permissionState</span> <span class="p">=</span> <span class="n">rememberPermissionState</span><span class="p">(</span><span class="n">permission</span> <span class="p">=</span> <span class="n">Manifest</span><span class="p">.</span><span class="n">permission</span><span class="p">.</span><span class="n">CAMERA</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Box</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">,</span> <span class="n">contentAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">Center</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">permissionState</span><span class="p">.</span><span class="n">status</span><span class="p">.</span><span class="n">isGranted</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">content</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">permissionState</span><span class="p">.</span><span class="n">status</span><span class="p">.</span><span class="n">shouldShowRationale</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">noPermission</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">permissionState</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">permissionState</span><span class="p">.</span><span class="n">launchPermissionRequest</span><span class="p">()</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>处理多个权限时用带有multiple字样的接口就可以了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@OptIn</span><span class="p">(</span><span class="n">ExperimentalPermissionsApi</span><span class="o">::</span><span class="k">class</span><span class="p">)</span>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">MultipleAccompanistInterceptor</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="n">content</span><span class="p">:</span> <span class="n">@Composable</span> <span class="n">BoxScope</span><span class="p">.()-&gt;</span><span class="n">Unit</span><span class="p">,</span>
</span><span class='line'>    <span class="n">noPermission</span><span class="p">:</span> <span class="n">@Composable</span> <span class="n">BoxScope</span><span class="p">.()-&gt;</span><span class="n">Unit</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">permissions</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span>
</span><span class='line'>                        <span class="n">Manifest</span><span class="p">.</span><span class="n">permission</span><span class="p">.</span><span class="n">CAMERA</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">Manifest</span><span class="p">.</span><span class="n">permission</span><span class="p">.</span><span class="n">ACCESS_COARSE_LOCATION</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">Manifest</span><span class="p">.</span><span class="n">permission</span><span class="p">.</span><span class="n">ACCESS_FINE_LOCATION</span>
</span><span class='line'>                    <span class="p">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">permissionState</span> <span class="p">=</span> <span class="n">rememberMultiplePermissionsState</span><span class="p">(</span><span class="n">permissions</span> <span class="p">=</span> <span class="n">permissions</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Box</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">,</span> <span class="n">contentAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">Center</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">permissionState</span><span class="p">.</span><span class="n">allPermissionsGranted</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">content</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">permissionState</span><span class="p">.</span><span class="n">shouldShowRationale</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">noPermission</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">permissionState</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">permissionState</span><span class="p">.</span><span class="n">launchMultiplePermissionRequest</span><span class="p">()</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><strong>注意：</strong> 因为Accompanist库是实验性质的，所以它的API都要求带上注解&#64;OptIn(ExperimentalPermissionsApi::class)。</p></blockquote>

<p>扩展阅读：</p>

<ul>
<li><a href="https://medium.com/@rzmeneghelo/how-to-request-permissions-in-jetpack-compose-a-step-by-step-guide-7ce4b7782bd7">How to Request Permissions in Jetpack Compose: A Step-by-Step Guide</a></li>
<li><a href="https://www.paleblueapps.com/rockandnull/how-to-request-permissions-in-jetpack-compose/">Jetpack Compose Permissions: A Quick and Easy Guide</a></li>
<li><a href="https://blog.stackademic.com/the-best-way-of-managing-runtime-permissions-using-permissionhandler-in-jetpack-compose-adb8057577d4">The best way to manage the Runtime permissions using PermissionHandler in Jetpack Compose</a></li>
<li><a href="https://www.composables.com/tutorials/permissions">A comprehensive guide to Android runtime permissions using Jetpack Compose</a></li>
<li><a href="https://stackoverflow.com/questions/73898807/how-to-handle-runtime-permissions-in-jetpack-compose-properly-by-accompanist">How to handle runtime permissions in jetpack compose properly by accompanist?</a></li>
</ul>


<h2>总结</h2>

<p>本文详细了介绍了目标平台是Android时，Compose的两种运行时权限申请方式。推荐使用Accompanist库中的permission模块，虽然这会引入一个新的依赖，虽然它只是实验性的，毕竟用起来方便啊。当然，如果想要精细化的处理权限的各种结果就直接用原生方式，也并没有麻烦多少。</p>

<h2>References</h2>

<ul>
<li><a href="https://developer.android.com/training/permissions/requesting">Request runtime permissions</a></li>
<li><a href="https://betterprogramming.pub/jetpack-compose-request-permissions-in-two-ways-fd81c4a702c">2 Ways to Request Permissions in Jetpack Compose</a></li>
<li><a href="https://www.howtodoandroid.com/runtime-permission-on-jetpack-compose/">Best ways to handle runtime permission on jetpack compose</a></li>
<li><a href="https://www.freecodecamp.org/news/requesting-location-permissions-in-jetpack-compose/">How to Request Location Permissions in Jetpack Compose</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
