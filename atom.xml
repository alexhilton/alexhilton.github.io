<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[猿轩阁]]></title>
  <link href="http://alexhilton.github.io/atom.xml" rel="self"/>
  <link href="http://alexhilton.github.io/"/>
  <updated>2014-11-13T10:41:55+08:00</updated>
  <id>http://alexhilton.github.io/</id>
  <author>
    <name><![CDATA[Alex Hilton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java 7和8的新特性以及与Android开发的关系]]></title>
    <link href="http://alexhilton.github.io/blog/2014/11/12/java-7-and-8-and-android/"/>
    <updated>2014-11-12T21:54:11+08:00</updated>
    <id>http://alexhilton.github.io/blog/2014/11/12/java-7-and-8-and-android</id>
    <content type="html"><![CDATA[<p>Oracle一直在推动Java的发展，到目前最新的Java SE是Java 8以及JDK8，但是目前貌似很多人还在使用Java 6（JDK6)，于是就花时间小研究了下Java 7与Java 8。</p>

<p><a href="http://alexhilton.github.io/blog/2014/11/12/java-7-and-8-and-android/"><img src="http://nerdsmagazine.com/wp-content/uploads/2013/06/Run-Android-Apps-and-Games-on-Android.jpg"></a></p>

<!-- more -->


<h2>Java 7（JDK 7)的语言新特性</h2>

<p>Java SE 7新增的语言特性并不是很多，主要有：</p>

<ul>
<li>try 语句资源管理(The try-with-resources Statement)</li>
<li>同一catch捕获多个异常(Catching Multiple Exception Types)</li>
<li>创建泛型对象时的类型推测(Type inferenes for Generic Instance Creation)</li>
<li>二进制的字面常量(Binary Literals)</li>
<li>数值字面常量里的可以有下划线(Underscores in Numeric Literals)</li>
<li>switch语句支持String(Strings in switch Statements)</li>
</ul>


<p>下面来个实例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.net.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Switch</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Underscores in numeric literals</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">USER_COUNT_LIMIT</span> <span class="o">=</span> <span class="mi">1_000_000_000</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Type inference when creating generics</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">fruits</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">args</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">a</span> <span class="o">:</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">fruits</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="c1">// Strings in switch</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">a</span> <span class="o">:</span> <span class="n">fruits</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">switch</span> <span class="o">(</span><span class="n">a</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="s">&quot;apple&quot;</span><span class="o">:</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;eat an apple a day, the doctors go away&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="s">&quot;orange&quot;</span><span class="o">:</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;orange juice&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;i do not know what you want&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// With &#39;try-with-resources&#39; no longer need finally to clean up resources.</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">(</span><span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nf">FileReader</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="n">args</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">])))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
</span><span class='line'>            <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">// Catch multiple exceptions</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="o">|</span> <span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// binary literals</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">userCount</span> <span class="o">=</span> <span class="mi">0</span><span class="n">b1010101</span><span class="o">;</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Current we have &quot;</span> <span class="o">+</span> <span class="n">userCount</span> <span class="o">+</span> <span class="s">&quot; users, while limit is &quot;</span> <span class="o">+</span> <span class="n">USER_COUNT_LIMIT</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">userCount</span> <span class="o">&lt;</span> <span class="n">USER_COUNT_LIMIT</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;We are okay, it is under control&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Alert alert alert&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>编译并运行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>alex:jdk1.7.0_71<span class="o">]</span><span class="nv">$.</span>/bin/javac Switch.java -Xlint
</span><span class='line'><span class="o">[</span>alex:jdk1.7.0_71<span class="o">]</span><span class="nv">$.</span>/bin/java Switch apple Switch.java README.html
</span><span class='line'>eat an apple a day, the doctors go away
</span><span class='line'>i <span class="k">do</span> not know what you want
</span><span class='line'>i <span class="k">do</span> not know what you want
</span><span class='line'>&lt;html&gt;
</span><span class='line'>Current we have <span class="m">85</span> users, <span class="k">while</span> limit is 1000000000
</span><span class='line'>We are okay, it is under control
</span></code></pre></td></tr></table></div></figure>


<p>可以看出，其实Java 7并无太大改进，只是多了些语法糖而已。</p>

<h2>Java 8(JDK 8）的语言新特性</h2>

<p>Java 8最大的改进就是增加了lambda表达式(Lambda Expression)，来看个实例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Lambda</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">apply</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">,</span> <span class="n">Action</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">action</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">T</span> <span class="n">t</span> <span class="o">:</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">action</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">stuff</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">stuff</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Lambda</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">lambda</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Lambda</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>        <span class="c1">// Use lambda expression to specify action</span>
</span><span class='line'>        <span class="n">lambda</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="n">stuff</span><span class="o">,</span> <span class="n">s</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Another example of lambda expression for threading</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">Thread</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;working &quot;</span> <span class="o">+</span> <span class="n">i</span> <span class="o">+</span> <span class="s">&quot; seconds&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}).</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">interface</span> <span class="nc">Action</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">perform</span><span class="o">(</span><span class="n">T</span> <span class="n">t</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>编译并运行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>alex:jdk1.8.0_25<span class="o">]</span><span class="nv">$.</span>/bin/javac Lambda.java -Xlint
</span><span class='line'><span class="o">[</span>alex:jdk1.8.0_25<span class="o">]</span><span class="nv">$.</span>/bin/java Lambda apple orange
</span><span class='line'>apple
</span><span class='line'>orange
</span><span class='line'>working <span class="m">0</span> seconds
</span><span class='line'>working <span class="m">1</span> seconds
</span><span class='line'>working <span class="m">2</span> seconds
</span><span class='line'>working <span class="m">3</span> seconds
</span><span class='line'>working <span class="m">4</span> seconds
</span><span class='line'>working <span class="m">5</span> seconds
</span><span class='line'>working <span class="m">6</span> seconds
</span><span class='line'>working <span class="m">7</span> seconds
</span><span class='line'>working <span class="m">8</span> seconds
</span><span class='line'>working <span class="m">9</span> seconds
</span></code></pre></td></tr></table></div></figure>


<p>在Java 8中，可以比用匿名内部类更加方便的方式来设置回调。</p>

<h2>Android中的Java</h2>

<p>那么，Android到底与Java是什么关系呢？<a href="http://www.vaikan.com/android-java/">有人说</a>它们是一样的。其实没啥关系，Android虽然使用Java语言作为它的主要开发语言，但是它并完全等同于Java SE JDK，JDK中关于UI的AWT和Swing在Android都没有，所以它的API是标准JDK 6的一个子集。Android中的Java是基于<a href="http://www.apache.org/">Apache</a>的<a href="http://harmony.apache.org/">Apache Harmony</a>，与标准Java SE 6语法完全一样，可以看看它们之间的<a href="http://en.wikipedia.org/wiki/Comparison_of_Java_and_Android_API">异同</a>，以及<a href="http://www.zhihu.com/question/20207106">Dalvik与Java VM</a>。</p>

<h2>Java 7和Java 8与Andoid开发</h2>

<p>Java在进步，语法上越来越人性化，那么Android开发能否得益呢？Java 7是可以的，在最新的开发工具（ADT 23和Kitkat）下，可以使用Java 7。但对于Java 8不能直接使用，只能借助第三方工具来翻译bytecode。所以对于Android开发者同学们来说，尝一尝Java最新的语法糖就可以了，想要天天使用，还要慎重考虑哦！</p>

<h2>参考</h2>

<ul>
<li><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/language/enhancements.html">Java Programming Language Enhancements</a></li>
<li><a href="http://stackoverflow.com/questions/16921337/why-apache-harmony-or-how-to-use-java-8-on-android">“Why Apache Harmony” or “How to use Java 8 on Android”</a></li>
<li><a href="http://stackoverflow.com/questions/23318109/is-it-possible-to-use-java-8-for-android-development">Is it possible to use Java 8 for Android development?</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Swift]]></title>
    <link href="http://alexhilton.github.io/blog/2014/11/04/introduction-to-swift/"/>
    <updated>2014-11-04T21:22:33+08:00</updated>
    <id>http://alexhilton.github.io/blog/2014/11/04/introduction-to-swift</id>
    <content type="html"><![CDATA[<p><a href="https://developer.apple.com/swift/">Swift</a>是水果平台新引进的一个开发语言，可以用它来取代Objective-C来开发Mac OS X以及iOS上面的应用程序。这门语言引入了大量的具有时代气息的新型编程语言特性，具有动态语言的简洁方便，是未来的发展方向。这是一门新的语言，今年六月才问世，所以如果今天开始学习Swift，三五年后，孤将是“有着五年经验的Swift砖家”了，错过了C，C++，Java，Python等，这回可以跟所有人站在同一起跑线上了。</p>

<p><a href="http://alexhilton.github.io/blog/2014/11/04/introduction-to-swift/"><img src="http://rack.1.mshcdn.com/media/ZgkyMDE0LzA3LzEyLzJhL3N3aWZ0bG9nb2hlLjU3NzBhLmpwZwpwCXRodW1iCTk1MHg1MzQjCmUJanBn/99456315/0f8/swift-logo-hero.jpg" width="640" height="480"></a></p>

<!-- more -->


<h2>必备的工具</h2>

<p>很显然，要想玩水果的东西，就必须有Mac电脑，而且<a href="https://developer.apple.com/xcode/downloads/">XCode 6</a>和以后的版本才支持Swift，而XCode 6需要Mac Mavericks（10.9）以后的版本才可以。所以，如果是旧的Mac还不一定可行。</p>

<p>孤作为穷人，无法支付死贵死贵的Mac机，所以只能用虚拟机对付了。VMWare可以搞定一切，具体方法请百度，网络上面有很多已经安装好的VMWare的Mac镜像，下载解压后就可以使用。等发达了，孤再买Mac。</p>

<p>其实，如果你只是想学习Swift，而不是iOS或Mac开发，那么完全没有必要这么麻烦，用一个浏览器就能搞定，<a href="https://swiftstub.com/">SwiftStub</a>是一个在线即时Swift编译器，用起来相当爽。</p>

<p>至于教程，看官方的就好了，<a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/GuidedTour.html#//apple_ref/doc/uid/TP40014097-CH3-XID_0">浏览器（网站）</a>，iBooks都可以方便的看到。</p>

<p>这方面，水果比谷歌强多了，更为重要的是水果在中国访问无压力，谷歌就蛋疼了，上半年<a href="http://developer.android.com/index.html">Android的文档</a>都无法访问，现在<a href="http://source.android.com/">Android源码</a>也时常抽风，不说了。</p>

<h2>初体验</h2>

<p>先来个高大上的第一个程序：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;Hello, world&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>我想都能猜出来会输出啥吧。
建议把<a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/GuidedTour.html#//apple_ref/doc/uid/TP40014097-CH3-XID_0">A Swift Tour</a>的代码全都敲一遍，虽然可能你没有理解，至少有个初级印象。</p>

<h2>基本语法结构</h2>

<p>可以说Swift与<a href="https://www.python.org/">Python</a>的语法结构是比较接近。每一行语句结尾处不用写分号。如果一行有多条语句，要用分号隔开。</p>

<h3>变量的定义是用var关键字</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="n">slideCount</span>
</span><span class='line'><span class="n">slideCount</span> <span class="o">=</span> <span class="n">countSlides</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h3>常量用let关键字</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">slideLimit</span> <span class="o">=</span> <span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure>


<h3>注释与C/C++和Java以及Objective-C是一样的</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">timeout</span> <span class="o">=</span> <span class="mi">20</span> <span class="c1">// in seconds</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Send a email to destination</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">sendEmail</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h3>数据类型</h3>

<p>这个也跟其他语言没啥大区别，String, Int, Bool, Double等。</p>

<h3>运算符号</h3>

<p>+, -, *, /, %, &amp;&amp;, ||, !, ==, : ?跟其他语言一致</p>

<h3>控制语句</h3>

<p>分支，循环跟其他语言也基本一致。只是条件判断的地方，跟Python一样，不用写括号：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">message</span> <span class="o">=</span> <span class="s">&quot;Who are you&quot;</span>
</span><span class='line'><span class="k">if</span> <span class="n">message</span> <span class="o">==</span> <span class="s">&quot;Unlock me&quot;</span> <span class="p">{</span>
</span><span class='line'>   <span class="c1">// something happen</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>   <span class="c1">// ignored</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">var</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// sleep for another i mins</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">var</span> <span class="n">done</span> <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'><span class="k">do</span> <span class="p">{</span>
</span><span class='line'>   <span class="c1">// continue coding</span>
</span><span class='line'><span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">done</span><span class="p">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">fruits</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;Apple&quot;</span><span class="p">,</span> <span class="s">&quot;Pear&quot;</span><span class="p">,</span> <span class="s">&quot;Cherry&quot;</span><span class="p">,</span> <span class="s">&quot;Peach&quot;</span><span class="p">]</span>
</span><span class='line'><span class="k">for</span> <span class="n">f</span> <span class="k">in</span> <span class="n">fruits</span> <span class="p">{</span>
</span><span class='line'>   <span class="c1">// eat it</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>函数</h3>

<p>函数的形式就是func name()->，括号中放参数，箭头后面是返回值，无参数就是空括号，无返回值不用写箭头。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">countSlides</span><span class="p">(</span><span class="nl">slide</span><span class="p">:</span> <span class="n">Slide</span><span class="p">,</span> <span class="nl">mine</span><span class="p">:</span> <span class="n">Bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">return</span> <span class="mi">10</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Swift的特性</h2>

<p>除了有所有编程语言所共有的特性以外，Swift有一些比较不太常见的语言特性，是学习的时候需要特别学习和理解的。</p>

<h3>选项型变量(Optionals)</h3>

<p>可能翻译的不准确。Optionals的意思就是这个变量有一个有意义的值，或者什么都不是。简单来讲，或者通俗的来理解，就是一个对象是不是nil。</p>

<p>Optional的表达方式是在类型后面加个问号，如String?表示一个字串，Int?表示一个整型。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="nl">possibleString</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span> <span class="c1">// default set to nil</span>
</span><span class='line'><span class="n">possibleString</span> <span class="o">=</span> <span class="s">&quot;Beijing&quot;</span>
</span><span class='line'><span class="k">let</span> <span class="nl">count</span><span class="p">:</span> <span class="n">Int</span><span class="o">?</span> <span class="o">=</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>获取Optional变量的值可以用叹号，如<strong>possibleString!</strong>就是取它的值。但是如果变量是没有值的(nil)，取值时会得到异常。</p>

<p>其实可以用C语言的指针来简单理解这玩意，Optional就相当于指针，取值*操作对于空指针（NULL）肯定会挂。</p>

<p>这玩意这么不好理解，到底有啥用？就是专门用在判断语句中的，可以消除== nil的这种判断：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="nl">possibleString</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span> <span class="o">=</span> <span class="s">&quot;Impossible is nothing&quot;</span>
</span><span class='line'><span class="k">if</span> <span class="k">let</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">possibleString</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="n">msg</span><span class="o">!</span><span class="p">)</span> <span class="c1">// or println(msg), they are equal</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">var</span> <span class="nl">possibleNumber</span><span class="p">:</span> <span class="n">Int</span><span class="o">?</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'><span class="k">if</span> <span class="k">var</span> <span class="n">cnt</span> <span class="o">=</span> <span class="n">possibleNumber</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">cnt</span> <span class="o">+=</span> <span class="mi">10</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这意思就是如果possibleString有值（不是nil），则赋给msg，并执行分支，等价于如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">if</span> <span class="n">possibleString</span> <span class="o">!=</span> <span class="nb">nil</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">println</span><span class="p">(</span><span class="n">possibleString</span><span class="o">!</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">println</span><span class="p">(</span><span class="s">&quot;it is null&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>怎么样，对于C/C++和Java语言来说，这的确优雅很多。而普通的定义变量的方式就不能这么用。</p>

<h3>判断空的操作符</h3>

<p>??操作如果操作数是合法值，则返回它的值，否则返回nil，这有啥用？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">a</span> <span class="o">??</span> <span class="n">b</span>
</span><span class='line'><span class="c1">// is equal to </span>
</span><span class='line'><span class="n">a</span> <span class="o">!=</span> <span class="n">nill</span> <span class="o">?</span> <span class="n">a</span><span class="o">!</span> <span class="o">:</span> <span class="n">b</span>
</span></code></pre></td></tr></table></div></figure>


<p>比如，设置字体大小，默认是32，从用户取值，fallback成默认值，可以这么写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">defaultFontSize</span> <span class="o">=</span> <span class="mi">32</span>
</span><span class='line'><span class="k">var</span> <span class="nl">userValue</span><span class="p">:</span> <span class="n">Int</span><span class="o">?</span> <span class="o">=</span> <span class="n">getUserFontSize</span><span class="p">()</span>
</span><span class='line'><span class="k">let</span> <span class="n">fontSize</span> <span class="o">=</span> <span class="n">userValue</span> <span class="o">??</span> <span class="n">defaultFontSize</span>
</span></code></pre></td></tr></table></div></figure>


<p>怎么样，又省去了nil判断，优雃了不少。</p>

<h3>引用判断操作符</h3>

<p>对象的等值性(Equivalence)与指向对象的引用的等值性一直是一个困扰很多人的问题，特别是初学者，对于Java更是这样，很多隐蔽性的Bug都出现在了等值的判断上。对于Java，==是判断引用是否指向同一个对象，而equals方法则是判断二个对象是否相同，而对象的相同则是需要自己去定义的。</p>

<p>同样，这里也是==是检查对象是否相同，而===是检查引用是否相同.</p>

<h3>范围操作符</h3>

<p>…是范围操作符，类似Python中的range()函数。</p>

<p>a…b是表示[a, b]，都是闭区间（希望数学区间的概念都没有忘记）</p>

<p>a..&lt;b是表示[a, b)，后面是开区间</p>

<p>必须保证a &lt; b，开始比结束小.</p>

<h3>函数外参数名</h3>

<p>与Objective-C一样，Swift的函数也支持外部参数名(External Parameter Names)，就是调用函数的时候也指定参数的名字，以加强程序的可读性，对于同一类型参数的函数来说特别重要。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">countSlide</span><span class="p">(</span><span class="err">#</span><span class="nl">slide</span><span class="p">:</span> <span class="n">Slide</span><span class="p">,</span> <span class="err">#</span><span class="nl">mime</span><span class="p">:</span> <span class="n">Bool</span><span class="p">,</span> <span class="err">#</span><span class="nl">message</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>   <span class="c1">/// ….</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">countSlide</span><span class="p">(</span><span class="nl">slide</span><span class="p">:</span> <span class="n">aslide</span><span class="p">,</span> <span class="nl">mine</span><span class="p">:</span> <span class="nb">false</span><span class="p">,</span> <span class="nl">message</span><span class="p">:</span> <span class="s">&quot;Go to bed&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>怎么样，这是不是大大的增加了程序的可读性呢！起码我觉得是的。相比Java（或者其他语言）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="kt">int</span> <span class="nf">countSlide</span><span class="p">(</span><span class="n">Slide</span> <span class="n">slide</span><span class="p">,</span> <span class="n">boolean</span> <span class="n">mine</span><span class="p">,</span> <span class="n">String</span> <span class="n">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">countSlide</span><span class="p">(</span><span class="n">aslide</span><span class="p">,</span> <span class="nb">false</span><span class="p">,</span> <span class="s">&quot;Not now&quot;</span><span class="p">);</span> <span class="c1">// cannot guess what parameters mean and for</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于函数声明，可以大致明白参数的用途。但是看着函数的调用，完全不知道参数都是用来干嘛的，特别是对于boolean, int等基本的数据类型。</p>

<h3>闭包</h3>

<p>闭包(Closure)是现代编程语言必不可少一个特性，它能有效的减少代码，减少对成员状态的依赖。这是函数式编程的必要特性，用闭包可以不用成员或者全局变量。</p>

<p>闭包的数学上的定义比较复杂，头发多的人都看不懂。通俗来讲闭包就是所定义的函数或者类持有它所在的定义域内的所有变量，常量和方法的引用。还是有点绕，说白了，就是一个内部定义的函数或者类，持有对外部类的所有成员的引用。</p>

<p>闭包的通常的呈现形式：</p>

<ul>
<li>（匿名）内部类</li>
<li>（匿名）内部函数</li>
<li>Lamda表达式，通常是指短小的匿名函数</li>
<li>全局类和函数其实也是闭包，只不过它们没有闭合任何外部引用而已</li>
</ul>


<p><strong>捕获</strong>的概念，当闭包引用外部变量时，就称作捕获外部变量。也就是说当你在内部函数里面访问外部变量时，就是在捕获变量。</p>

<p>各种语言中，闭包使用最多的形式就是Lamda表达式，就是一些短小的命名或匿名函数体。这也是闭包的意义所在。</p>

<p>在Swift中闭包的主要形式就是匿名或者命名函数体。对于命名函数体的定义和使用方式跟普通函数一样，只不过可以捕获变量。如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">makeIncrementor</span><span class="p">(</span><span class="err">#</span><span class="nl">step</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">var</span> <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>   <span class="k">func</span> <span class="n">incrementor</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">total</span> <span class="o">+=</span> <span class="n">step</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">step</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">incrementor</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">var</span> <span class="n">a</span> <span class="o">=</span> <span class="n">makeIncrementor</span><span class="p">(</span><span class="nl">step</span><span class="p">:</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="n">a</span><span class="p">()</span> <span class="c1">// 10</span>
</span><span class='line'><span class="n">a</span><span class="p">()</span> <span class="c1">// 20</span>
</span><span class='line'><span class="n">a</span><span class="p">()</span> <span class="c1">// 30</span>
</span></code></pre></td></tr></table></div></figure>


<p>但更多时候还是使用匿名函数体或者叫做Lamda表达式，因为这是最方便的。形式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="p">{</span> <span class="p">(</span> <span class="o">**</span><span class="n">parameters</span><span class="o">**</span> <span class="p">)</span> <span class="o">-&gt;</span> <span class="o">**</span><span class="k">return</span> <span class="n">types</span><span class="o">**</span> <span class="k">in</span>
</span><span class='line'>  <span class="o">**</span><span class="n">statements</span><span class="o">**</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>比如，定义一个遍历数组，并对每一个元素都做某种操作的函数，调用者使用时就可以用闭包来完成这某种操作：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">apply</span><span class="p">(</span><span class="err">#</span><span class="nl">list</span><span class="p">:</span> <span class="p">[</span><span class="n">Int</span><span class="p">],</span> <span class="err">#</span><span class="nl">action</span><span class="p">:</span> <span class="p">(</span><span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">())</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">item</span> <span class="k">in</span> <span class="n">list</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">action</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">var</span> <span class="n">primes</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">19</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Standard closure</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;Standard closure&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">apply</span><span class="p">(</span><span class="nl">list</span><span class="p">:</span> <span class="n">primes</span><span class="p">,</span> <span class="nl">action</span><span class="p">:</span> <span class="p">{(</span><span class="nl">item</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">()</span> <span class="k">in</span> <span class="n">println</span><span class="p">(</span><span class="n">item</span><span class="p">)})</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Simplified by removing return type</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;Removing return type&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">apply</span><span class="p">(</span><span class="nl">list</span><span class="p">:</span> <span class="n">primes</span><span class="p">,</span> <span class="nl">action</span><span class="p">:</span> <span class="p">{(</span><span class="nl">item</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="k">in</span> <span class="n">println</span><span class="p">(</span><span class="n">item</span><span class="p">)})</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Simplified by removing type</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;Removeing type&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">apply</span><span class="p">(</span><span class="nl">list</span><span class="p">:</span> <span class="n">primes</span><span class="p">,</span> <span class="nl">action</span><span class="p">:</span> <span class="p">{(</span><span class="n">item</span><span class="p">)</span>  <span class="k">in</span> <span class="n">println</span><span class="p">(</span><span class="n">item</span><span class="p">)})</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;Removing parentheses&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">apply</span><span class="p">(</span><span class="nl">list</span><span class="p">:</span> <span class="n">primes</span><span class="p">,</span> <span class="nl">action</span><span class="p">:</span> <span class="p">{</span><span class="n">item</span> <span class="k">in</span> <span class="n">println</span><span class="p">(</span><span class="n">item</span><span class="p">)})</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Simplified again with shorthand</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;Removing param and use shorthands&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">apply</span><span class="p">(</span><span class="nl">list</span><span class="p">:</span> <span class="n">primes</span><span class="p">,</span> <span class="nl">action</span><span class="p">:</span> <span class="p">{</span><span class="n">println</span><span class="p">(</span><span class="err">$</span><span class="mi">0</span><span class="p">)})</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果，闭包是函数的最后一个参数，还有另外一种写法，叫做尾后闭包(Trailing Closure)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">someFunction</span><span class="p">(</span><span class="n">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">closure</span> <span class="n">goes</span> <span class="n">here</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// With trailing closure</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;With trailing closure&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">apply</span><span class="p">(</span><span class="nl">list</span><span class="p">:</span> <span class="n">primes</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">item</span> <span class="k">in</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">apply</span><span class="p">(</span><span class="nl">list</span><span class="p">:</span> <span class="n">primes</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="err">$</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>结构体</h3>

<p>struct几乎与class有同样的功能，都能定义复杂数据结构，添加行为方法，但它们还是有区别的：</p>

<p>最大的区别就是struct是按值拷贝赋值，而class是按引用拷贝。因此，大多数情况下，还是要使用class，效率上至少会有收益。那么为啥还要有struct呢?它适用于<a href="http://en.wikipedia.org/wiki/Plain_old_data_structure">Plain old data structure or PoD</a>，也就是说一个纯数据结构，里面全都是基本类型。</p>

<p>其他场合，还是用class吧。
（是不是想起了C++著名的面试题struct vs class）</p>

<h2>这才仅仅是冰山一角</h2>

<p>这里仅是简单的介绍了Swift的一些语言特性，仅够入门使用，但足可以开始iOS之旅，光有语言还是不够的，对于任何一个平台，编程语言仅能占三成，剩下的大部分还是要学习平台提供的东西，包括开发环境，IDE，和平台提供的API（库）。对于CocoaTouch来说，它跟语言（Swift和Objective-C）基本上是无关的，现在的<a href="https://developer.apple.com/library/ios/navigation/#section=Resource%20Types&amp;topic=Reference">官方文档</a>的API说明都给出了二种语言的接口，而且Swift和Objective-C基本上可以无缝切换，所以如果已熟悉iOS的框架的，可以轻松转换。</p>

<h2>参考及资源</h2>

<ul>
<li><a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH3-XID_0">The Swift Programming Language</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps/">Using Swift with Cocoa and Objective-C</a></li>
<li><a href="http://www.devtalking.com/">程序员说</a></li>
<li><a href="http://helloswift.com.cn/">Swift中文社区</a></li>
<li><a href="http://swiftist.org/">Swiftist</a></li>
<li><a href="http://letsswift.com/">Let&rsquo;s Swift</a></li>
<li><a href="http://www.swift-open.com/">Swift开发者</a></li>
<li><a href="http://www.iswifting.com/">iSwifting</a></li>
<li><a href="http://www.swiftv.cn/">SwiftV</a></li>
<li><a href="http://swift.sh/">SwiftChina</a></li>
<li><a href="http://www.infoq.com/news/2014/06/apple-swift-learning-resources">Online Resources to Learn Apple&rsquo;s Swift Language</a></li>
<li><a href="http://swiftlang.eu/">Swift Language</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[下载并编译CyanogenMod源代码]]></title>
    <link href="http://alexhilton.github.io/blog/2014/11/01/play-with-cyanogenmod/"/>
    <updated>2014-11-01T00:40:55+08:00</updated>
    <id>http://alexhilton.github.io/blog/2014/11/01/play-with-cyanogenmod</id>
    <content type="html"><![CDATA[<p>CyanogenMod是除了Android官方源码之外的最受欢迎的Android的一个分支，它是干净，几乎接近原生Android，且方便为设备进行定制，在编译和制作ROM上面较原生有很大改进，是开发者学习源码和自己制作ROM的最佳选择。</p>

<p>官方网站在<a href="http://www.cyanogenmod.com/">这里</a>.</p>

<p>repo在<a href="https://github.com/CyanogenMod/android/">这里</a>.</p>

<p>环境说明，本次所有操作都是在Ubuntu 12.04(Precise)里面进行的。另外需要说明的是，我的环境访问谷歌和谷歌相关的服务都是没有问题的，关于如何访问谷歌可以参考这位牛人写的<a href="http://strongme.github.io/2014-09-01-Add-Hosts-For-Google.html">博客</a></p>

<p><a href="http://alexhilton.github.io/blog/2014/11/01/play-with-cyanogenmod/"><img src="http://img.wonderhowto.com/img/30/47/63519976076208/0/install-cyanogenmod-htc-one-even-faster-now-without-rooting-unlocking-first.w654.jpg"></a></p>

<!-- more -->


<h2>下载源码</h2>

<p>下载源代码是第一步，这跟很多教程是不太一样的。因为我觉得，你源码都没有拿到，还搞个毛线啊！有了源码即使无法编译，也至少还可以看源码的，否则安装了toolschain又有啥用。
其实，源码的下载按道理讲是很简单的事情的，但是很多事情到了我大天朝就会变得很复杂，甚至搞不定，特别要从Google的服务器上搞点东西。因为CyanogenMode的源码是在<a href="http://github.com/">Github</a>上面，所以源码的下载还是很方便的，但是对于一些必要的工具，因为是要从Google取，所以就很蛋疼。</p>

<h3>下载repo</h3>

<p>因为Android的源码非常多，巨大的源码不可能放在一个git的repo里面，是每个模块都有自己单独的git仓库，但是为了成功编译，又需要所有的源码，但是不可能手动的一个一个的去clone啊，因此就有了repo这个工具，它就是一个Python实现的脚本，先从Server读出来一个所有仓库的配置信息XML文件，然后按这个文件一个一个的把git仓库clone下来。
这个文件是Android官方提供的，CyanogenMod也只是使用了它。所以它还要从官方来取。它就是一个脚本，所以谈不到安装，下载下来，改变文件属性就可以运行了。关键是下载啊！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl https://storage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo
</span><span class='line'>chmod a+x !<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为Google的连接不稳定，甚至是无法连接，所以下载这个脚本就要八仙过海，各显神通了，为了方便后来的兄弟们，可以从<a href="http://pan.baidu.com/s/1mgytKYO">这里</a>下载。别高兴太早，这才刚开始。后面还会有一大把问题呢。</p>

<h3>初始化仓库和分支信息</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir -p /work/cyanogenmod
</span><span class='line'><span class="nb">cd</span> /work/cyanogenmod
</span><span class='line'>repo init -u git://github.com/CyanogenMod/android.git -b stable/cm-11.0
</span></code></pre></td></tr></table></div></figure>


<p>注意，为了方便，最好把你的Github帐户配置好ssh，以方便直接以git方式clone。另外，<a href="http://www.cyanogenmode.com/">CyanogenMod</a>的仓库在<a href="http://github.com/CyanogenMod/android">这里</a>，你会发现，这里只有二个配置文件。如前面所说，这里只是列出其他仓库的配置文件，以文件抓取所有的源码。</p>

<p>另外，-b后面跟的是你要抓取的分支, cm-11.0是最新的分支，对应Android 4.4。查看其他的分支可以看<a href="https://github.com/CyanogenMod/android/branches">这里</a>。</p>

<p>如果没有任何错误，那么要恭喜你，但是通常都会遇到错误：</p>

<blockquote><p>repo init -u git://github.com/CyanogenMod/android.git -b stable/cm-11.0</p>

<p>gpg: key 920F5C65: &ldquo;Repo Maintainer <a href="&#109;&#97;&#x69;&#108;&#116;&#111;&#58;&#x72;&#101;&#112;&#x6f;&#x40;&#97;&#110;&#100;&#114;&#x6f;&#105;&#100;&#x2e;&#107;&#x65;&#114;&#110;&#101;&#108;&#46;&#111;&#114;&#103;">&#x72;&#x65;&#x70;&#x6f;&#x40;&#x61;&#x6e;&#x64;&#114;&#x6f;&#105;&#x64;&#46;&#107;&#x65;&#114;&#110;&#x65;&#108;&#x2e;&#111;&#x72;&#103;</a>&rdquo; not changed</p>

<p>gpg: key 692B382C: public key &ldquo;Conley Owens <a href="&#x6d;&#x61;&#105;&#x6c;&#116;&#111;&#58;&#99;&#99;&#x6f;&#x33;&#x40;&#97;&#110;&#100;&#114;&#x6f;&#x69;&#100;&#46;&#x63;&#111;&#109;">&#x63;&#99;&#x6f;&#51;&#x40;&#x61;&#x6e;&#100;&#114;&#111;&#105;&#100;&#46;&#x63;&#111;&#x6d;</a>&rdquo; imported</p>

<p>gpg: Total number processed: 2</p>

<p>gpg:               imported: 1  (RSA: 1)</p>

<p>gpg:              unchanged: 1</p>

<p>fatal: Cannot get <a href="https://gerrit.googlesource.com/git-repo/clone.bundle">https://gerrit.googlesource.com/git-repo/clone.bundle</a></p>

<p>fatal: error [Errno 101] Network is unreachable</p></blockquote>

<p>第一眼看上去貌似是网络连接问题，搜了一下，网站有各种版本，<a href="http://www.cnblogs.com/javawebsoa/p/3235315.html">有的</a>说要unset代理，变量，<a href="http://blog.csdn.net/jianguo_liao19840726/article/details/9774357">有的</a>说要登录<a href="https://android.googlesource.com/new-password">androidsource</a>然后把登录信息加入到.netrc中。但是这些对我的情况都不管用；还有<a href="http://blog.sina.com.cn/s/blog_a9c55dfd0101jcz6.html">这篇</a>。我的情况与最后一个类似，多试几次，然后就init成功了。看来真的是网络抽风。</p>

<h3>下载源码</h3>

<p>然后就可以下载源码了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>repo sync
</span></code></pre></td></tr></table></div></figure>


<p>因为是在github上面，而github一向是比较给力的，所以只要等待就好了，一般都会成功下载的。这跟官方Android就不同了。记得以前下载官方源码时，经常出现网络问题，下载了几个晚上才搞定。</p>

<h2>安装编译所需要的toolschain</h2>

<p>CyanogenMod本质上也是Android，所以这个可以参考<a href="http://source.android.com/source/initializing.html">官方文档</a>，就可以了。</p>

<p>几个关键的点是：</p>

<ul>
<li>使用Oracle的Java SDK(JDK)，至于版本，最新的Android可以用Java 7，所以就装个Java 6吧，2.3到4.4都是使用Java 6</li>
<li>安装需要的软件包</li>
<li>配置ccache</li>
</ul>


<h2>编译</h2>

<h3>编译模拟器</h3>

<p>模拟器在学习和研究代码的时候还是比较有用的，如果你没有一个专门用作测试的手机的话。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>. build/envsetup.sh
</span><span class='line'>lunch
</span></code></pre></td></tr></table></div></figure>


<p>这时会出现一个菜单，仔细寻找cm_goldfish-eng，输入前面的数字，这会对模拟器进行一些配置。这里有一个坑，不要用source build/envsetup.sh，而要用上面的命令，否则会没有goldfish相关的配置项出现在lunch的菜单里。</p>

<p>然后，再到vendor/cm/里面，执行./get-prebuilts，这会把一些需要的东西拉下来。然后就可以正式的编译了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>make -j8
</span></code></pre></td></tr></table></div></figure>


<p>之后是漫长的等待。</p>

<h3>运行模拟器</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>emulator -system ./out/target/product/generic/system.img -data ./out/target/product/generic/userdata.img -ramdisk ./out/target/product/generic/ramdisk.img
</span></code></pre></td></tr></table></div></figure>


<p>还可以指定skin，skin可以到SDK里面去找。如果多次使用可以把上面的命令保存成Bash脚本。但是这个模拟器会奇慢无比。</p>

<h2>参考资料</h2>

<ul>
<li><a href="http://hualang.iteye.com/blog/1139269">Android ROM研究&mdash;CyanogenMod源代码下载及编译</a></li>
<li><a href="http://sunzeduo.blog.51cto.com/2758509/1538557">基于 cm-11 源码编译模拟器</a></li>
<li><a href="http://www.yinqisen.cn/blog-321.html">CyanogenMod 11.0模拟器goldfish的编译方法及下载地址</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让Android模拟器飞一会]]></title>
    <link href="http://alexhilton.github.io/blog/2014/10/31/boosts-android-emulator/"/>
    <updated>2014-10-31T17:27:29+08:00</updated>
    <id>http://alexhilton.github.io/blog/2014/10/31/boosts-android-emulator</id>
    <content type="html"><![CDATA[<p>Android模拟器是公认的慢，而且不是一般的慢，即使在高性能的PC上，跟开发环境没关系，因为它就是慢。但是我们又必须使用模拟器，比如在测试Android不同版本的兼容性时，或者在测试不同屏幕尺寸的UI显示问题时，都是需要的。当然我们还是鼓励使用一个真机来调试和测试，模拟器无法取代真机。但是在测试兼容性时，我们还是要使用模拟器，因为即使是BAT也不可能把各种版本，各种屏幕的Android手机都买一个。</p>

<p><a href="http://alexhilton.github.io/blog/2014/10/31/boosts-android-emulator/"><img src="http://codebutler.com/img/posts/2012-10-10-configuring-a-usable-android-emualtor/android-emulator-ugly.png" width="320" height="480"></a></p>

<!-- more -->


<h2>为啥模拟器会这么慢</h2>

<p>关键就是在模拟这二个字。PC啊，我们所使用的开发环境的CPU都是x86架构的，而手机呢一般都是ARM架构，这就产生问题了，这个手机的系统无法像PC上面的一个应用程序那样直接运行在PC里，所以就需要一个虚拟的ARM机器。Android模拟器是基于QEMU的，QEMU可以模拟ARM指令，另外，存储，等等所有模拟器的硬件，都是由软件实现的。总之，为了能让PC上跑起来ARM，就慢了很多。</p>

<p>详细的可以看<a href="http://www.developer.com/ws/android/development-tools/supercharge-your-android-emulator-speed-with-intel-emulation-technologies.html">这篇文章</a></p>

<p>我们可能不关心它为啥慢，我们要关心的是如何能让它跑的更快一些！</p>

<h2>使用x86架构</h2>

<p>既然它慢是因为必须在x86上面模拟ARM，那么让它快起来第一个方法就是直接使用x86架构，这样子的话，就能够直接使用开发环境的CPU了，性能肯定会大幅的提升，正如<a href="http://www.developer.com/ws/android/development-tools/supercharge-your-android-emulator-speed-with-intel-emulation-technologies.html">这篇文章</a>所说。</p>

<p>配置方法也不难，主要是：</p>

<ul>
<li>安装Intel的<a href="https://software.intel.com/en-us/android/articles/intel-hardware-accelerated-execution-manager">加速驱动HAXM</a></li>
<li>下载和使用x86版本的Android System images</li>
</ul>


<p>使用起来并不难，只是可能会遇到坑，借助<a href="https://www.google.com.hk/">Google</a>和<a href="http://www.baidu.com/">百度</a>都能解决。唯一需要注意的是，Intel的HAEM对硬件的配置要求比较苛克，要求CPU必须支持虚拟化VT，具体的可以参考官方和Google进行解决。</p>

<h2>使用<a href="http://www.genymotion.com/">Genymotion</a></h2>

<p>Genymotion是一个全功能的Android模拟器，它不但能测试应用，还有同步等功能，在PC上面跑的非常快。先去注册成为它的用户，然后就可以下载了。它的安装，也比较方便，直接看官方的文档就可以了。</p>

<h3>快速功能列表</h3>

<ul>
<li>支持主流的三种平台Windows, Mac OS X和Linux</li>
<li>需要注册成为它的用户才可下载</li>
<li>高级功能的版本需要付费</li>
<li>不能安装在虚拟机中，因为它要使用硬件加速，而且本身也要运行在虚拟机(VMWare, VirtualBox)之中，所以，它是不能安装在已经是虚拟中的系统中的</li>
</ul>


<h2>使用<a href="http://www.andyroid.net/">Andy the Android Emulator</a></h2>

<p>貌似官方网站不能下载。</p>

<h3>快速功能列表</h3>

<ul>
<li>支持Windows和Mac</li>
<li>支持开发所需要的所有功能</li>
<li>支持同步</li>
</ul>


<h2>使用<a href="http://www.bluestacks.com/">Blue Stacks App Player</a></h2>

<h3>功能列表</h3>

<ul>
<li>仅支持Windows</li>
</ul>


<h2>使用<a href="https://www.manymo.com/">Manymo</a></h2>

<p>这个网站经常打不开，因为访问量太大。</p>

<p>它不是运行在本地的，它是一个运行在浏览器中的Android模拟器，注册用户以后，就可以上传应用，然后在浏览器中运行Android应用了，听起很酷，但是这个并不适合开发者用。这个适合测试人员用。或者开发完成后做一些兼容性测试之类的场景。</p>

<h3>快速功能列表</h3>

<ul>
<li>运行在浏览器之中</li>
<li>适合测试，而不是实时的调试</li>
<li>缺点就是网站经常打不开</li>
</ul>


<h2>总结与推荐</h2>

<p>其实，所有的加速的模拟器，也都是以x86为基础建立起来的，只不过他们做了更多的封装，让它的安装和使用更加的方便而已。</p>

<p>最出名的，也是最方便好用当属Genymotion，推荐使用。</p>

<p>如果你有更好的秘密武器，也请与我分享。</p>

<h2>参考</h2>

<ul>
<li><a href="http://stackoverflow.com/questions/1554099/why-is-the-android-emulator-so-slow">Why is the Android emulator so slow?</a></li>
<li><a href="http://stackoverflow.com/questions/2662650/making-the-android-emulator-run-faster">Making the Android emulator run faster</a></li>
<li><a href="http://www.techbate.com/5-best-android-emulator-for-windows-87xp/">5 Best Android Emulator For Windows 8,7,XP</a></li>
<li><a href="http://techapple.net/2014/05/3-best-android-emulators-for-mac-os-macbook-run-and-install-android-app-on-your-mac-os-x-macbook-airpro/">3 Best Android Emulators for Mac OS / Macbook </a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[不断更新，保持高效]]></title>
    <link href="http://alexhilton.github.io/blog/2014/10/26/stay-tune-with-state-of-art/"/>
    <updated>2014-10-26T22:13:51+08:00</updated>
    <id>http://alexhilton.github.io/blog/2014/10/26/stay-tune-with-state-of-art</id>
    <content type="html"><![CDATA[<p>正所谓学历代表过去，学习力代表未来。柯维大师的七个习惯之中的终极习惯就是要“不断更新”，今天的你再牛B，知道的再，如果不去学习，不去提升，不去更新自己，那么总有一天也会被超越，时代在进步，别人在进步，发逆水行舟，不进则退，你停止了学习，就表明你退步了，因为别人在进步。
那么，为了保持能够高效的进行Android开发，我们就必须不断的学习，不断的充电，这些列出一些，能够提高Android开发的进阶教程，注意是进阶教程，而非入门教程。</p>

<p><a href="http://alexhilton.github.io/blog/2014/10/26/stay-tune-with-state-of-art/"><img src="http://www.bvsc.org/sites/default/files/images/5%20ways-KEEP%20LEARNING.png"></a></p>

<!-- more -->


<h2>书箱</h2>

<p>虽然说现代人忙的都没有时间看书了，虽然说，我们浮躁的没有耐心把一本书看完，但是书籍仍然是学习和获取知识的最佳途径，前提是你选对了书。对于Android的进阶学习，这些书籍是非常好的：</p>

<ul>
<li><p>《50 Android Hacks》</p>

<p> 这本书有点类似《Effective Java》和《Effective C++》，它是以话题形式来讨论提升Android开发的技巧，每个话题一个技巧，非常实用的一本书，里面有很多干货，有实例，拿来就可以用</p></li>
<li><p>《Smashing Android UI》</p>

<p> 这本书重点讨论如何提升UI，包括动画，布局，UI性能，定制Widget等。</p></li>
<li><p>《Pro Android Apps Performance Optimization》</p>

<p> 这本书是讲如何提升应用的性能。</p></li>
<li><p>《Decompiling Android》</p>

<p> 这本书比较有意思，是从另外一个角度来讲Android开发，从逆向工程角度，主要讲如何逆向工程一个应用，以及如何从开发层面来防止应用被逆向。里面讲了很多工具，很实用。</p></li>
<li><p>《Android Design Patterns: Interaction Design Solution for Developers》</p>

<p> 这本书的话题跟开发比较远，主要是从UX角度来讲解Android上面的用户体验的模式，比如现在非常流行的Drawer等等。孤认为开发者也要懂一些用户体验方面的东西，而且这些东西跟开发者关系更大一些。因为UXD并不清楚什么可以实现，什么难以实现，什么无法实现，以及实现起来的代价有多大。现在不是流行全栈工程师吗。Anyway，多了解点知识总是没坏处的。</p></li>
</ul>


<p>这些书随便就能搜索到，就不提供下载链接了。至于说为什么这里都是英文的，因为都是外国人写的啊！推荐直接看原版，因为翻译有些时候不会太准，因为译者的理解可能会不一样。并不需要多牛B的英文水平才能读懂英文书。这些都是专业的书籍，语言都非常的通俗易懂，对于常见的一些专业术语，查几次词典就记住了。关键还是态度。</p>

<h2>网络博客资源</h2>

<p>光看书，也还不够，因为最新的技术总是先出现在网络，尔后由人总结才能出现在书中。</p>

<ul>
<li><p><a href="http://developer.android.com/develop/index.html">Android Developers</a></p>

<p> 这个不用多说，开发Android，无论是新手还是老手，官方的文档总是一个必须要常访问的地方。今日的官方文档已经10时的大不一样，那时里面除了API Reference外，几乎有很少其他内容，但是现在从Tutorials, Training Docs, References, Articles, Videos, Best Practices and Samples可以说凡是能用来学习的全都有了，里面已是相当的丰富了。</p></li>
<li><p><a href="http://blog.jobbole.com">伯乐在线</a></p>

<p> 这里每天会汇集一些优质的网络博客，各个方面的，当然也包括Android。</p></li>
<li><p><a href="http://android-developers.blogspot.com">Android Developer Blogs</a></p>

<p> 这个貌似是一群Android系统的开发者所定的博客，里面的文章相当有深度和权威，都是一等一的干货。</p></li>
<li><p><a href="http://blog.stylingandroid.com">Styling Android</a></p>

<p> 这个博客主要讲高级的UI定制，比如实现颜色选择器那种高级复杂的UI。</p></li>
<li><p><a href="https://www.youtube.com/playlist?list=PLWz5rJ2EKKc_XOgcRukSoKKjewFJZrKV0">Android Dev Bytes</a></p>

<p> 这个是YouTube上面的一个频道，是由Android系统的开发者做的一些教程类的视频，讲述如何进行开发，和提升的技巧。视频的内容非常丰富，从新的API，到游戏，再到UX，和Android Design。每个视频都算长，几十分钟。其中有几个哥们是Framework图形库的，讲述的如何做各种非常炫和酷的动画，相当的赞。这可以世界上最优秀的工程师，且是Android的维护者做的教程，错不了。</p></li>
<li><p><a href="http://www.androiddesignpatterns.com">Android Design Patterns</a></p>

<p> 这个博客的内容都是关于深度解析Frameworks中某些组件的工作原理的，很有深度。</p></li>
</ul>


<h2>优质的网站和社区</h2>

<ul>
<li><p><a href="http://hao.jobbole.com/category/android/">伯乐资源</a></p>

<p> 这里面有非常全的Android相关的资源。</p></li>
<li><p><a href="http://www.android-studio.org">Android Studio</a></p>

<p> 这个是AndroidStudio的中文社区，主要关注AS，但也有开发相关内容。</p></li>
<li><p><a href="http://androidweekly.net">Android Weekly</a></p>

<p> 这个网站会像周报一样，每周更新Android开发相关的新闻，技术等。</p></li>
<li><p><a href="http://www.androidpatterns.com">Android Patterns</a></p>

<p> 这个主要是UX相关的。</p></li>
<li><p><a href="http://www.android-app-patterns.com">Android App Patterns</a></p>

<p> 这个也是UX设计相关的。</p></li>
</ul>


<h2>线下社区</h2>

<p>这个要看具体的城市而定，现在大多数城市都有谷歌开发者社区<a href="http://www.chinagdg.com/forum.php">GDG(Google Developer Group)</a>他们都会定期的举办活动，因为是关于Google的，所以肯定有Android相关的。对于像北京，上海，杭州这些移动互联网热门城市，各种社区应该很多的。</p>

<h2>请分享你常常使用的好的资源</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[适配多屏幕的最佳实践]]></title>
    <link href="http://alexhilton.github.io/blog/2014/10/26/best-practices-to-support-multiple-screen/"/>
    <updated>2014-10-26T19:58:10+08:00</updated>
    <id>http://alexhilton.github.io/blog/2014/10/26/best-practices-to-support-multiple-screen</id>
    <content type="html"><![CDATA[<p>对于Android应用开发来讲，比较头疼的，也是比较重要的一个工作就是要尽可能多的支持市场上的Android设备，由于Android的开放性，各种奇奇怪怪的设备都有，符合标准的，不符合标准的，行货，水货，山寨货鱼龙混杂，防不胜防。为了让我们的应用能够得到尽可能多的用户，我们就必须能让应用以超强的适应性，以能在混乱的手机里生存。而适配设备，GUI屏幕的适配又是重中之中，如果用户都无法正确的看到你的UI页面，那还用个毛线啊！</p>

<p>之前曾经写过<a href="http://blog.csdn.net/hitlion2008/article/details/9200135">一篇文章</a>，介绍了一下子如何使用dimen资源来适配多屏幕，随着Android版本的演进，有些概念已经过时，需要重新整理一下。</p>

<p><a href="http://alexhilton.github.io/blog/2014/10/26/best-practices-to-support-multiple-screen/"><img src="http://developer.android.com/images/resources/resource_devices_diagram2.png"></a></p>

<p>其实对于多屏幕适配，一个核心的原则就是要对布局做好抽象的分离，把可变与不可变分开，把与屏幕相关的尺度dimen写在单独的dimen文件中，然后使用引用。如果不这样做，就会造成更多的代码重复。</p>

<!-- more -->


<h2>以最佳的方式来提供资源</h2>

<p>通常我们的做法是以屏幕密度(<a href="http://developer.android.com/guide/topics/resources/providing-resources.html">Screen Density</a>)，做为区分来提供不同的资源，以达到支持和适配不同的屏幕，比如我们会为mdpi, hdpi, xhdpi，各准备一套图片和dimen，大多数情况下，这很好，能对付了大多数设备，但这还不够。</p>

<p>比如说，480x800, 480x854, 540x960这三种设备，都是同样的屏幕密度hdpi，但是屏幕尺寸并不相同，对于qHD(540x960)，它的可用空间要比标准hdpi(480x800)要多得多，如果以qHD为基准来调的布局，那么放到480x800上，有些元素会被挤扁，或者显示不完全。而且目前，540x960的设备要多于480x800的，因为屏幕都是越来越大，精度越来越高的。</p>

<p>那么如何解决呢？
现在推荐的做法是用屏幕的可用高度(注意是可用高度，不包括状态栏和底部硬键)来区分不同的资源。以前是可以在屏幕密度后面指定具体的分辨率来区分，比如values-hdpi-960x540。但是现在这种做法已被废弃，<a href="http://developer.android.com/guide/practices/screens_support.html">官方文档</a>中都不会提及了。很显然它的问题在于不够通用。</p>

<p>现在推荐的做法是用可用高度或者可用宽度来指定：</p>

<ul>
<li>values-h&lt;sw&gt;dp</li>
<li>values-h&lt;sh&gt;dp</li>
</ul>


<p>这里面的sw和sh就是屏幕的可用宽度和可用高度。这种方式的适配规则是：用小于且最接近设备屏幕高度或宽度的那个资源，比如设备可用高度是610dp，则选择values-h600dp，以此类推。用这个方式就能区分同为hdpi的480x800和540x960，因为：</p>

<ul>
<li>480x800     533dp</li>
<li>540x960     640dp</li>
</ul>


<p>所以，可以用values-h600dp来区分二者。
使用此的方法为：</p>

<ul>
<li>计算某个设备的高度或者宽度，以dp为单位。高度dp=可用高度px/density</li>
<li>创建可以区分不同设备的资源目录，如values-h500dp, values-h600dp等</li>
</ul>


<h2>增加适配性的更多技巧</h2>

<p>除了上面提到的，还有一些在适配时需要注意的事情。</p>

<ol>
<li>尽量多用WRAP_CONTENT和MATCH_PARENT，特别是对于像文字图片等元素的度量</li>
<li>对于页面的边框距离，最好用最外层的ViewGroup来指定，或者使用margin或者使用padding。
这点的主要意思是，如果你想要页边框距是20dip，那么用一个ViewGroup来指定，要么是最外层的，要么是最里层的，千万不要是外面的5dp，中间的5dp，里面的5dp，最里面的5dp，虽然整体效果看起来是一致的，但是当适配时就会蛋疼了。固定在某个上面，这样既方便调试，也方便适配和移植。</li>
<li>同一个应用，边框距等最好做到一致，起码对于同一类型的页面更是如此。</li>
</ol>


<h2>一些常见设备的参数</h2>

<ul>
<li>320x480   1   mdpi  480dp</li>
<li>480x800   1.5 hdpi  533dp</li>
<li>540x960   1.5 hdpi  640dp</li>
<li>720x1280  2   xhdpi 640dp</li>
<li>1080x1920 3 xxhdpi 640dp</li>
</ul>


<h2>参考</h2>

<ul>
<li><a href="http://developer.android.com/guide/topics/resources/providing-resources.html">http://developer.android.com/guide/topics/resources/providing-resources.html</a></li>
<li><a href="http://developer.android.com/guide/topics/resources/providing-resources.html#Compatibility">http://developer.android.com/guide/topics/resources/providing-resources.html#Compatibility</a></li>
<li><a href="http://developer.android.com/guide/topics/resources/runtime-changes.html">http://developer.android.com/guide/topics/resources/runtime-changes.html</a></li>
<li><a href="http://stackoverflow.com/questions/16907023/best-way-to-support-540x960-and-480x800-both-hdpi">http://stackoverflow.com/questions/16907023/best-way-to-support-540x960-and-480x800-both-hdpi</a></li>
<li><a href="http://forums.xamarin.com/discussion/2784/best-way-to-support-540x960-and-480x800-both-hdpi">http://forums.xamarin.com/discussion/2784/best-way-to-support-540x960-and-480x800-both-hdpi</a></li>
<li><a href="http://developer.android.com/guide/practices/screens_support.html">http://developer.android.com/guide/practices/screens_support.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何有效的减少重复的代码]]></title>
    <link href="http://alexhilton.github.io/blog/2014/10/25/tricks-to-remove-duplicates/"/>
    <updated>2014-10-25T21:59:26+08:00</updated>
    <id>http://alexhilton.github.io/blog/2014/10/25/tricks-to-remove-duplicates</id>
    <content type="html"><![CDATA[<p>重复的代码一直都是可维护性的大敌，重构的重要任务之一也就是要去除掉重复的代码，有效的减少重复代码，可以大大提高软件的扩展性。</p>

<p>在Android开发中，很容易产生重复的代码。因为Android是组件，模板式开发，每个页面都是独立用Activity或Fragment实现，布局文件都是用XML方式去写，所以很容易造成代码的重复，虽然二个页长的差不多，但毕竟是二个Activity，于是就拷一份出来，改吧改吧就成了。</p>

<p><a href="http://alexhilton.github.io/blog/2014/10/25/tricks-to-remove-duplicates/"><img src="https://cdn.tutsplus.com/mobile/uploads/legacy/134_Android-User-Interface-Design_Relative-Layouts/fig2.png" width="600" height="320"></a></p>

<p>那么我们如何做才能去掉重复的代码呢？</p>

<!-- more -->


<h2>为你的项目定义一个基Activity或Fragment</h2>

<p>无论你的项目大或小，定义一个基Activity或Fragment总是有好处的。随着项目的发展，会有大量的公共代码可以抽出来放到基类里去。或者在基类里面做一些项目特色的事情。再或者添加一些统计，崩溃反馈等等。在一个基类里面改动总比把每个Activity或Fragment里面都改一遍要好的多。</p>

<h2>代码的去重复技巧</h2>

<p>从代码上去除重复的代码就是用通用的重构技巧，比如提炼方法，抽象基类，提炼常量等。但是光是代码还不够，因为Android的页面代码跟布局文件的关联非常大，通常Activity或者Fragment都是为了操作布局页写的，所以要想彻底的减少代码的重复，还必须先减少布局的重复。</p>

<h2>用<a href="http://developer.android.com/training/improving-layouts/reusing-layouts.html">include</a>减少局部布局的重复</h2>

<p><include/>标签是减少布局重复的利器，它的作用是把另外一个布局文件全部无修改式的嵌入到标签所在的位置。这与C/C++语言的预处理指令#include是一样的。在WEB框架式开发中，也非常常用HTML模板，其中也有类似的include。目的也是减少代码的重复。</p>

<p>要想把include用的恰到好处，首先要做的就是把整体布局模块化，从整体的布局出发，找出可复用的局部布局或布局组合，把它们放入单独一个布局文件中，然后在其他的地方就可以include了。</p>

<h2>用<a href="http://developer.android.com/reference/android/view/ViewStub.html">ViewStub</a>减少整体的布局的重复</h2>

<p>前面是找出布局中的可复用布局组合，include以减少重复。但有些时候是反过来的，也就是说有几个页面，它们整体的一样的，但是某个局部是不同的，这个时候include就不行了。这个时候就可以使用一样的整体布局+ViewStub来做布局。</p>

<p>ViewStub是一个轻量级别的，不可见的View，当ViewStub被设为visible时，或者显示调用layout()时，才会去把它所指向的布局渲染出来，所以它非常适合处理整体相同，局部不同的情况。关于ViewStub的使用可以参考<a href="http://blog.csdn.net/hitlion2008/article/details/6737537">这篇博客</a>。
具体的策略是：</p>

<ul>
<li>规划整体布局，抽象出共同的布局，把可变的布局识别出来</li>
<li>写整体布局，对于可变的局部布局用ViewStub替代</li>
<li>用一个基Fragment来操作整体布局。</li>
<li>创建基Fragment的子类，每个子类，用真正的布局来替换ViewStub。</li>
</ul>


<h2>多用引用而不是写死</h2>

<p>这点是非常重要的，Android的强大之处在于，所有的资源的指定都可以用引用，而非直接写死，直接写死就会出现重复代码，比如颜色，背影，字串，布局，ID，度量(dimen)，风格等等。那么，我们在使用的时候，也尽可能的使用引用，这样非常易于复用，修改和定制，从而也就更方便复用。</p>

<h2>分析，分离变与不变</h2>

<p>其实代码的去重复的关键都在于要分析出可变与不可变，共性和特性，这是抽象与封装的基础。这个没有直接可操作性的建议，只能靠自己平时多多积累，以及遇到问题时多多思考。</p>

<p>另外，就是对于重复的定义是达到三次及三次以上。如果仅出现二次，并且，无可能出现别一次，这个时候其时，要不要去重复有在商榷，写第二次时，花时间重构，与拷贝或重新实现，其实代码差不多。当发现第三次实现某个东西时，就要考虑好好的重构一下，减少重复。</p>

<p>还有，就是，在项目开始不要考虑的太多，不要过度设计。孤认为，不过过度设计，更不要过早优化，就根据需求和进度和发展状况综合来看。当出现了重复，需要重构时就立马去做，这样就不会出问题。但如果没能及时去做重构，欠了债，那么由于涉及代码，功能和模块都比较多时，再去重构，难度大，风险也大。就好比房屋的维护保养，当出现灰尘时就去打扫，很容易，个把小时就搞定了，但如果一直拖着，一年才打扫一次，可能要十天半个月才能完事。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用工具来提升Android开发效率]]></title>
    <link href="http://alexhilton.github.io/blog/2014/10/24/boosts-android-development-with-tools/"/>
    <updated>2014-10-24T18:15:56+08:00</updated>
    <id>http://alexhilton.github.io/blog/2014/10/24/boosts-android-development-with-tools</id>
    <content type="html"><![CDATA[<p>正所谓工欲善其事，必先利其器。学习并应用优秀的轮子，可以让我们跑的更快，走的更远。这里所指的工具是广义的，泛指能帮助我们开发的东西，或者能提高我们效率的东西，包括：开发工具，监测工具，第三方代码库等。
<a href="http://alexhilton.github.io/blog/2014/10/24/boosts-android-development-with-tools/"><img src="http://img.clubic.com/05250064-photo-apple-tools.jpg" width="600" height="320"></a></p>

<h2>优质的第三方开源类库</h2>

<!-- more -->


<h3>图片加载与缓存</h3>

<p>现代的应用程序难免会有图片显示给用户，对于资讯类，旅游类，购物类等应用程序而言，图片的展示更是应用里面关键的一环。而图片从加载，到缓存再到显示是一个比较复杂的过程，中间还要处理网络异常，解析异常等。图片又是极其耗费内存的，稍不注意就会出现OutOfMemory（OOM）的错误。如果你的图片在你的应用中不是主要的东西，仅是偶尔显示个Icon和图标之类的，那还好，普通的异步加载和解析（<a href="http://developer.android.com/reference/android/graphics/BitmapFactory.html">BitmapFactory</a>）就好。但如果要在应用中展示大量的图片时，甚至应用的主要内容就是图片时，这时就要借助于优秀的开源库了：</p>

<ul>
<li><p><a href="https://github.com/nostra13/Android-Universal-Image-Loader">Universal Image Loader</a></p>

<p> 这个库非常强大，从加载，到解析到显示，你只配置参数，告诉它如何做，再给它一个ImageView就可以了，然后你就可以去喝茶去了。</p></li>
<li><a href="https://github.com/square/picasso">Picasso</a></li>
</ul>


<h3>EventBus完全解耦模块</h3>

<p>观察者模式，或者生产者消费者模型在开发中是很常见的，比如说异步加载数据，之类的都会用到类似的结构。通常的做法就是创建一个Listener用于回调，以返回数据。如果有一个二个还好，但如果多了，应用需要获取大量的不同的数据，就会出现大量的线程和Listener，到处是addListener和implements Listener，这会造成大量的代码和依赖，程序会变得混乱，业务逻辑会迷失在Listener之中，而且还要及时的unregisterListener，以防不该被回调到时能取消。这还会造成代码和模块之间的强耦合，也就是写代码的时候必要在有另一方，否则不会编译过。这时就可以用EventBus来解耦了，它是一个框架能让双方很容易的进行通讯，而不必知道彼此的存在与否：</p>

<ul>
<li><a href="https://github.com/greenrobot/EventBus">EventBus</a>
 这个库非常的高效与方便，它完全不依赖于注解。</li>
<li><a href="http://square.github.io/otto/">Otto</a>
 这个要使用注解，所以在效率上可能会略差一些。</li>
<li><a href="https://code.google.com/p/guava-libraries/wiki/EventBusExplained">Guava</a>
 这个是Google Java增加库Guava中的一个</li>
</ul>


<p>这些的库的基思想和目的都是一致的，都是以总线的方式，让强耦合的双方解耦，不妨在你的应用中使用一下，体验一下。</p>

<h3><a href="https://github.com/hdodenhof/CircleImageView">CirclImageView</a></h3>

<p>这似乎是一个比较小型的库，它只是一个特殊的ImageView用圆形的方式来显示图片。</p>

<h3><a href="https://github.com/Maxwin-z/XListView-Android">XListView</a></h3>

<p>这是一个支持下拉刷新(PulltoRefresh)和上拉加载更多(Load more)的定制ListView。</p>

<h3><a href="https://github.com/JakeWharton/Android-ViewPagerIndicator">ViewPageIndicator</a></h3>

<p>这个是要与官方的<a href="http://developer.android.com/reference/android/support/v4/view/ViewPager.html">ViewPager</a>一起使用的，为ViewPager添加indicator的类库，非常的有名，很多应用都在使用。</p>

<h3><a href="https://github.com/JakeWharton/ActionBarSherlock">ActionbarSherlock</a></h3>

<p>这个库非常的有名，很多优秀的应用都基于此。<a href="http://developer.android.com/reference/android/app/ActionBar.html">ActionBar</a>是一个不错的用户体验，它能集导航，操作和信息于一体的导航栏，Google也极力推荐使用它。但是有一个问题就是它是<a href="http://developer.android.com/about/versions/android-3.0-highlights.html">HoneyCombe</a>（API 11）才引及的一个组件，而对于大多数开发者来说，GingerBread(2.3)还是不能放弃的肉，所以这个类库应运而生。这个库易于使用，根据手机版本来选择实现方式，如果是3.0以上就直接使用系统的Actionbar。其中的代码也是值得所有开发者去拜读。</p>

<h3><a href="https://github.com/bauerca/drag-sort-listview">DragSortListView</a></h3>

<p>用过iOS设备的人可能会注意到iOS里面的所有列表都有一个非常酷的功能，那就是在编辑模式下，可以任意对列表进行重新排库。但是令开发沮丧的是，这是iOS中UITableView的标准内嵌功能。而Android的ListView只提供最基本的功能。因此就有了此类库的出现。其实除了此库，还有很多其他的库的出现也都是为了实现类似iOS体验而做的。
当然这个类库有一个小问题需要注意，就是它内部会创建一个ItemView来Wrapper客户代码提供的ItemView，而在Wrapper时，它会使用WRAP_CONTENT做为高和宽，所以，用了这个类库会发现宽度不会Match整个屏幕。解决的办法就是在创建Adapter#getView时再用代码指定一扁LayoutParams，把宽设为MatchParent就好了。</p>

<h3><a href="http://nineoldandroids.com">NineOldAndroid</a></h3>

<p>这个库也是解决低版本之痛的。从3.0开始，Google引入了新的动画库，称作Property动画，使实现动画不但变得非常简单，同时也能实现更加复杂的动画。只要对对象的属性进行计算，就能让这个对象动起来。但是同样，对于2.3以前就只能用旧的补间动画(Tween Animation)，这种动画复杂，需要写大量的代码。这个库就能统一操作，让动画变得简单
这里介绍的，只是一些比较常用的也是比较有名的类库。这些库不但优秀，好用，而且最重要的是还开源，你可以去学习，去研究，甚至去改进。那么，这些还远远不够，我们的应用日益复杂，各种需求，怎么办呢？</p>

<h2>如何获取更多的类库</h2>

<p>学习编程的第一天起，前辈们就说，不要重复制造轮子，老手与新手的区别也在于，老手善于利用已有的东西，而不是一起都从0开始，无数的优秀的类库已经能帮忙解决很多问题，它们健壮，方便，好用，所以为什么还要自己费劲去重新造轮子呢？</p>

<h3>二个开发者必备之神器</h3>

<p>现在的开源类库非常之多，有些我们可能不知道，即使看到一个类库的主页或者源码，也要花时间研究下，它究竟能干什么，适合干什么，以及能否解决我们遇到的问题，这是介绍三款神器：</p>

<ul>
<li> <a href="https://play.google.com/store/apps/details?id=com.indianic.coslib">Developer Library for Android</a></li>
<li> <a href="https://play.google.com/store/apps/details?id=com.inappsquared.devappsdirect">DevAppsDirect</a></li>
<li> <a href="https://play.google.com/store/apps/details?id=com.limecreativelabs.app">LiME Creative Labs</a></li>
</ul>


<p>这三款都是Android应用，只是它们的内容是介绍众多优质的开源类库，它会列出每个类库的信息，如作者，源友位置，简要说明。最最重要的是它把类库的例子也集成起来了，你可以立马运行类库的Demo以体验这个类库到底是干啥的，这真的是良心之作。等什么呢，赶快去下载安装吧。</p>

<h3>Github</h3>

<p>提起开源，<a href="https://github.com/">Github</a>当然是首届一指的，其上托管着无数的优秀的开源库，没事常去逛逛总会有好处，甚至是惊喜的。唯一麻烦的就是，里面的内容太多了，容易看花眼和找不到想要的东西。所以还是上面的应用来的干脆直接。</p>

<h3>优质的聚合平台</h3>

<p>除此之外，还有一些优秀的网络社区和博客会收集和整理优秀的开源类库，这也是我们需要关注的，比如：</p>

<ul>
<li> <a href="http://hao.jobbole.com/category/android/">伯乐</a>
  这里面罗列了大量的优秀的库和工具，这里不仅有库还有工具。此外这个网站也值得所有开发者收藏，里面会聚合优秀的博客和资源。</li>
<li> <a href="http://guides.codepath.com/android">CodePath</a></li>
</ul>


<h2>每个应用程序必不可少的组件</h2>

<p>现在的应用程序有一些东西是必要的，比如分享功能，比如推送消息，比如应用程序统计和崩溃报告等，如果你是一个大型公司，拥有大团队，或者已经发现成为行业领头羊，那么这些东西最好自己实现，以达到更好的控制和运营，也防止数据外泄。但对于小团队，或者个人开发者，来说，还是利用现成的解决方案比如靠谱。</p>

<h3>分享到社交平台</h3>

<p><a href="http://www.mob.com/">ShareSDK</a>和<a href="http://www.umeng.com">友盟</a>都提供了免费的SDK用以实现分享到各大社交平台。
其实每个社交平台都有提供了SDK，但是有些麻烦的是开发者必须要一一去注册，以获取APP_KEY，同时还要处理用户授权以获得访问社交数据，不同的SDK，虽然基本思想是一致的，但是具体开发过程难免会有坑。ShareSDK就是帮助开发者解决了这些问题，它在各个媒体平台上都注册了，也封装处理了授权过程，但是带来方便的同时，它有缺点：
   * 分享到社交媒体上的信息会显示“来自ShareSDK”，而非你的应用。这个通常是显示开发者在社交媒体上注册的信息。
   * ShareSDK的授权方式是通过网页形式，而非API，过于简单且授权信息不容易持久化，也就是用户可能会经常（甚至每次）分享时都需要授权。而如果直接使用媒体授权API，可以直接获取APP_SECRETE，在未过期（一般Expiration会比较长）之前都可以直接分享，无需授权。</p>

<p>所以你看所有的用户量超大的应用，各大新闻客户端等，都是自己集成和绑定社交媒体，不会通过第三方的库。</p>

<h3>推送消息</h3>

<p>现在的应用程序基本上都会有后台服务提供数据，也会增加推送消息，这个是运营的重要手段，能保持应用的活跃，虽然我不喜欢推送消息，因为早上一打开手机，全都是推送消息。但是推送还是必要的，也有现成的方案可以用：</p>

<ul>
<li> <a href="http://www.igetui.com">个推</a></li>
<li> <a href="http://www.umeng.com/">友盟</a></li>
</ul>


<p>这二个也都非常好用，它包括客户端SDK和Server端后台，是全套的，非常方便实用。
除此之外，如果是面向海外用户，可以用Google提供的，<a href="http://developer.android.com/google/gcm/index.html">Google Clould Messaging</a>，它也非常好用，因为毕竟是官方的，可以与Apple的推送服务媲美。但是它的最大的缺点在于，Google Services都依赖于Google Play，也就是说运行时手机上必须要有Google Play Services，也即必须要安装有GMS才可以。但中国大陆的手机全部没有GMS，因此GCM也用不了。所以个推和友盟也才有机会。</p>

<h3>应用统计信息</h3>

<p>移动开发不单单只有开发出一个出色的APP这么简单，开发完了还要运营，而应用的统计绝对是运营的一个重要手段，后期的新功能，以及发展方向要取决于应用的统计数据，统计能看出用户的特征，分布，使用习惯等。当然了，在统计方面友盟绝对是最好的，它开始的最好，现在也是做的最好的，使用也非常的简单。</p>

<h3>应用崩溃报告</h3>

<p>现在的Android手机种类极其之多，各种奇葩的设备都有，在标准的手机和模拟器上运行没有问题，但是在某些定制ROM的手机上可能就会挂。另外，程序也会有你想不到Bug导致崩溃。因此我们需要收集应用的崩溃信息，以后期改进。如果你集成了友盟统计，它会自动收集崩溃信息，但是它只能收集Java层的，且信息比较简单，只有一个StackTrace。如果想要收集Native层的，以及获得更多的信息的话，就要使用其他库，或者自己实现。自己实现也不难，就是要处理unhandledException，然后把客户端的信息，如版本，配置，再把手机的信息收集一下，发到后台，后台再做个报表，能查看错误信息就可以了。但如果不想自己做，可以使用<a href="https://github.com/ACRA/acra">Application Crash Reports for Android</a>这个库可以解决客户端的问题，也就是说它能在发生Crash时，收集足够的信息(哪配置要收集哪些信息)，然后发送，它可以配置成发送到Server后台，也可以发送到开发者的邮箱，很方便和实用，特别是对于个人开发者来说。需要注意的是，要想能发送到邮箱，手机用户必须配置了Email帐户，国内用户貌似没有这习惯，因为国内用户不习惯用邮件，更不要说给手机配置邮件帐户。但是对于国外用户，这是没有问题的，国外用户习惯电子邮件，而且手机上都会配置。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android应用UI架构]]></title>
    <link href="http://alexhilton.github.io/blog/2014/10/22/effective-android-ui-architecture/"/>
    <updated>2014-10-22T23:06:43+08:00</updated>
    <id>http://alexhilton.github.io/blog/2014/10/22/effective-android-ui-architecture</id>
    <content type="html"><![CDATA[<p>这个标题听起来可能有点大，其实这里主要就是讨论一个应用程序的UI组件，是全用Activity还是全用Fragment，或者是二者皆有，以及使用Activity和Fragment的一些注意事项。
<a href="http://alexhilton.github.io/blog/2014/10/22/effective-android-ui-architecture/"><img src="http://i.stack.imgur.com/S4TpY.png"></a></p>

<h2>Activity or Fragment</h2>

<p>从API 11，Honeycomb开始，Google在Android之中加入了Fragment，一个轻量级的，可复用的，模块化的UI组件，并且官方也极力的推荐要尽可能的使用Fragment实现UI，尽量避免使用Activity，但是官方并没有详尽的解析为什么要这样做，因此，引发了很多人的困惑和网络上的争论</p>

<!-- more -->


<h3>一些讨论</h3>

<p><a href="https://stackoverflow.com/">StackOverflow</a>上面有很多类似的讨论，比如<a href="http://stackoverflow.com/questions/20306091/dilemma-when-to-use-fragments-vs-activities">这个</a>和<a href="http://stackoverflow.com/questions/10478233/android-need-some-clarifications-of-fragments-vs-activities-and-views">这个</a>，以及<a href="http://blog.pluralsight.com/android-fragments">这篇博客</a>和<a href="https://www.altamiracorp.com/blog/employee-posts/fragments-vs-activities-in-and">这篇</a>。</p>

<p>总体的来讲，也都是推荐使用Fragment，并尽可能的使用Fragment，除非你必须使用Activity，否则就使用Fragment。</p>

<h3>主要的区别</h3>

<p>要想真正的理解什么时候该用Activity什么时候该用Fragment，就要从根本上理解它们之间到底有什么区别，以及各自所能做的事情：</p>

<h4>Activity的优缺点</h4>

<p>Activity是Android系统的四大核心组件之一，是唯一用户可见的组件，是可视化应用程序的基础，同时也是应用程序的主要入口。
它的优点是：</p>

<ul>
<li>方便使用，简单，没有版本限制</li>
<li>可以处理系统相关的事情，比如窗体管理，对话框管理，与第三方应用交互，作为应用的入口，处理系统事件等</li>
<li>生命周期简单明了</li>
<li>不同的Activity实例的生命周期相互独立</li>
<li>有系统的ActivityManager来管理，创建和维护实例，以及栈</li>
</ul>


<p>Activity的缺点：</p>

<ul>
<li>无法完全的控制，创建和各种状态全部由Frameworks操控</li>
<li>过于庞大和复杂</li>
<li>传递参数相当费劲</li>
<li>launchMode和栈的管理过于复杂，让人捉摸不透</li>
</ul>


<p>所以，因为它有缺点，所以它适合做为第一级组件，而不适合到处都用。也因此有了Fragment的诞生。</p>

<h4>Fragment的优缺点</h4>

<p>Fragment号称是轻量级的Activity，它有着Activity的部分功能，比如有生命周期，可以显示UI元素，可以有控制逻辑，它有很多优点：</p>

<ul>
<li>可以像普通对象那样自由的创建和控制</li>
<li>因为可以得到实例，所以传递参数等会更加的容易和方便</li>
<li>不用处理系统相关的事情</li>
<li>显示方式可控制，替换，还是层叠，部分还是整体，都容易控制</li>
<li>进出动画都相对容易</li>
</ul>


<p>可以看出Fragment是实现可复用的，模块化UI的良好组件，熟悉iOS开发的人应该知道，这个Fragment跟iOS中的UIViewController是很相似的，都是MVC模式中的负责协调和控制的Controller。</p>

<h3>实用的建议</h3>

<p>那么，到此，我想我们应该能够总结出，到底什么时候该用Activity，什么时候该用Fragment了：</p>

<ul>
<li>一个应用程序必须至少要有一个Activity</li>
<li>如果你需要开放入口给第三方应用，那么要用Activity。比如原生应用中的联系人，信息，相机，图库等，因为要留有接口给第三方使用，所以要用Activity。这也是所谓的组件级复用。</li>
<li>如果要处理系统相关的事情，需要用Activity，比如横竖屏，语言变化，键盘等</li>
<li>如果非要在横屏或竖屏显示，也要用Activity</li>
<li>如果感觉用Fragment来做有很多的不方便，或者很困难，出于各种原因吧。</li>
</ul>


<p>除此外，就使用Fragment吧。因此，对于一个应用程序的UI架构就是一个Host的Activity+Fragment的方式来做。</p>

<h2>使用Activity时的注意事项</h2>

<p>Activity是学习Android开发的第一堂课，我相信有过Android开发经验的人对Activity必定非常的熟悉了，对于使用Activity要注意：</p>

<ul>
<li>除非特别需要，否则要声明configChagnes，至少orientation和keyboard以及keyboardHidden需要加上</li>
<li>减小对Activity实例的引用，尽可能用getApplication()或者getApplicationContext()来做为平台接口需要的Context参数</li>
<li>在AndroidManifest.xml的activity标签中声明全屏，透明或者没有TitleBar的属性，而不是在onCreate()中去requestWindowFeature。除非你需要动态控制</li>
<li>Activity之间传递参数用Intent，尽量传基本数据类型和数据及ArrayList，和平台提供的数据类型如Uri。对于简单的POD(Plain Old Datastructure)数据类型，可以直接由基本数据组成，不必声明对象。对于有必要存在的对象，可以实现Parcelable接口，以方便在Activity之间传递。</li>
</ul>


<h2>使用Fragment时的注意事项</h2>

<p>Fragment是由FragmentManager来管理的，每一个Activity有一个FragmentManager，管理着一个Fragment的栈，所以，Activity是系统级别的，由系统来管理ActivityManager，栈也是系统范围的。而Fragment则是每个Activity范围内的。</p>

<ul>
<li><p>同一个Activity中，只能有一个ID或TAG标识的Fragment实例。</p>

<p>  这很容易理解，同一个范围内，有标识的实例肯定是要唯一才行（否则还要标识干嘛）这个在布局中经常犯错，在布局中写Fragment最好不要加ID或者TAG，否则很容易出现不允许创建的错误。我的原则是如果放在布局中，就不要加ID和TAG；如果需要ID和TAG就全用代码控制。创建新实例前先到FragmentManager中查找一番，这也正是有标识的意义所在。</p></li>
<li><p>一个Activity中有一个Fragment池，实例不一定会被销毁，可能会保存在池中。这个跟第一点差不多。就好比系统会缓存Activity的实例一样，FragmentManager也会缓存Fragment实例，以方便和加速再次显示。</p></li>
<li><p>如前所述，FragmentManager的作用范围是整个Activity，所以，某一个布局ID，不能重复被Fragment替换。</p>

<p>  通常显示Fragment有二种方式，一种是层叠到某个布局上，或者把某个布局上面的Fragment替换掉，但是这个布局不能出现二次，比如布局A中有ID为id的区域，要显示为Fragment，此布局A，只能在一个Activity中显示一个，否则第二个id区域不能被Fragment成功替换。因为虽有二个ID布局的实例，但ID是相同的，对FragmentManager来说是一样的，它会认为只有一个，因为它看的是布局的ID，而不是布局的实例。</p></li>
<li><p>Fragment的生命周期反应Activity的生命周期。</p>

<p>  Fragment在显示和退出时会走一遍完整的生命周期。此外，正在显示时，就跟Activity的一样，Activity被onPause，里面的Fragment就onPause，以此类推，由此带来的问题就是，比如你在onStart()里面做了一些事情，那么，当宿主Activity被挡住，又出现时（比如接了个电话），Fragment的onStart也会被高到，所以你要想到，这些生命周期不单单在显示和退出时会走到。</p></li>
<li><p>Fragment的对用户可见性。</p>

<p>  这个问题出现在有Fragment栈的时候，也就是说每个Fragment不知道自己是否真的对用户可见。比如现在是Fragment A，又在其上面显示了Fragment B，当B显示后，A并不知道自己上面还有一个，也不知道自己对用户不可见了，同样再有一个C，B也不知。C退出后，B依然不知自己已在栈顶，对用户可见，B退后，A也不知。也就是说Fragment显示或者退出，栈里的其他Fragment无法感知。这点就不如Activity，a被b盖住后，a会走到onStop()，同样c显示后，b也能通过onStop()感知。Fragment可以从FragmentManager监听BackStackState的变化，但它只告诉你Stack变了，不告诉你是多了，还是少，还有你处的位置。有一个解决方案就是，记录页面的Path深度，再跟Fragment所在的Stack深度来比较，如果一致，那么这个Fragment就在栈顶。因为每个页面的Path深度是固定的，而Stack深度是不变化的，所以这个能准确的判断Fragment是否对用户可见，当然，这个仅针对整个页面有效，对于布局中的一个区域是无效的。</p></li>
<li><p>Fragment的事件传递。</p>

<p>  对于层叠的Fragment，其实就相当于在一个FrameLayout里面加上一堆的View，所以，如果处于顶层的Fragment没处理点击事件，那么事件就会向下层传递，直到事件被处理。比如有二个Fragment A和B，B在A上面，B只有一个简单的TextView且没处理事件，那么点击B时，会发现A里的View处理了事件。这个对于Activity也不会发生，因为事件不能跨窗体传播，上面的Activity没处理事件，也不会传给下面的Activity，即使它可见。解决之法，就是让上面的Fragment的根布局吃掉事件，为每个根ViewGroup添加onClick=&ldquo;true&#8221;。</p></li>
<li><p>与第三方Activity交互。与第三方交互，仍要采用Android的标准startActivityForResult()和onActivityResult()这二个方法来进行。但对于Fragment有些事情需要注意，Fragment也有这二个方法，但是为了能正确的让Fragment收到onActivityResult()，需要：</p>

<ol>
<li>  宿主Activity要实现一个空的onActivityResult()，里面调用super.onActivityResult()</li>
<li>  调用Fragment#startActivityForResult()而不是用Activity的
当然，也可以直接使用Activity的startActivityForResult()，那样的话，就只能在宿主Activity里处理返回的结果了。</li>
</ol>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[码农的救赎：使用Github Pages搭建博客]]></title>
    <link href="http://alexhilton.github.io/blog/2014/10/16/blogging-like-a-hacker-with-github-pages/"/>
    <updated>2014-10-16T22:18:36+08:00</updated>
    <id>http://alexhilton.github.io/blog/2014/10/16/blogging-like-a-hacker-with-github-pages</id>
    <content type="html"><![CDATA[<p><a href="http://alexhilton.github.io/blog/2014/10/16/blogging-like-a-hacker-with-github-pages/"><img src="http://pikipity.github.com/images/post/octopress.jpg" title="auto 200px" ></a></p>

<h2>人生若只如初见，都恨太晚</h2>

<p>据说有博客的人比没博客人的薪水要高很多，相传写博客也是一个高手的标配，虽然之前一直有在写（在<a href="http://blog.csdn.net/hitlion2008/">这里</a>），但是孤既不是高手，薪水还比别人少。之前一直在CSDN上面写博客，那是一个不错的社区，里面有些牛人，博客也有不错的流量，也没少参与CSDN举办的活动，获得了几本过时的技术书，但是仍感觉不爽，最痛苦的就是编辑，CSDN的在线编辑器做的不咋地，不太好用，而且经常写着写着就不动了，再刷新就啥都没了，试想下写了一下午的代码，突然死机，再打开什么都没了会是什么心情。后来就在本地写，然后粘到编辑器中，但是格式化又是一个很头疼的事情，经常是写完后要花个把小时来搞格式。再后来就用HTML写，然后把源码粘到编辑框里，也还是有格式的问题。再后来，去年一年都没怎么写，主要的原因还是一直感觉写出来的东西没有太多的干货，一心想憋出个高质量的东西来，但是肺都憋炸了，也没憋出来。</p>

<p>直到，后来发现了Github Pages，大有，人生若只如初见，都恨太晚的感觉。正如有些牛人推荐的那样，像写代码一样写博客，这感觉错不了。再有Markdown虽不如在线编辑器那样直观，但却可以手不离键盘，不动鼠标，正如命令行与GUI的对比那样，这真的是用心为码农准备的良心工具啊（此处省略感慨10000字）。</p>

<!-- more -->


<h2>手把手搭建Github Pages博客</h2>

<p>说了这么多废话，来点实际的吧，下面说说如何一步步的用Github Pages搭建博客。其实这里的东西没有原创，部分是实践中的血和泪，本人不材，用了三四天才发出第一个博客，大部分都是源自网络，如有雷同，纯属拷贝。</p>

<p><strong>Note</strong>：<em>这里的默认平台是指Linux/Unix或者Mac</em></p>

<h3>必备的技术</h3>

<p>别害怕，听起来挺高大上啊，你妹啊，写个博客还需要技术，老子写代码也不过是Google+Copy+Paste。是的，用现成的博客托管，是没有门槛，但是用Github Pages就不一样了。</p>

<ol>
<li>git</li>
<li>markdown</li>
<li>平台命令行的使用，其实就是安装和配置软件包</li>
</ol>


<p>这些都听起来很熟悉吧，是不是天天都用。所以对于码农，玩Github Pages完全不在话下。</p>

<h3>安装基本设施</h3>

<h4>git</h4>

<p>git我就不想说了，我想对于一个码农，如果没有安装git的，请自行Google吧，Linux默认都带有的，对于Mac，安装了XCode后，也会带有。</p>

<h4>Ruby</h4>

<p>我们即将用到的工具都是用Ruby实现的，如果你跟我一样只会些Python，不会Ruby，那么了没有关系，我们只需要安装Ruby，不用写代码。</p>

<ul>
<li>Mac</li>
</ul>


<p>Mac本身带有Ruby，但是版本过低，需要重新安装一个新版本</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install ruby</span></code></pre></td></tr></table></div></figure>


<p>这会安装最版本的Ruby，但还需要手动配置，把新版本的Ruby加入到PATH当中去，用</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ruby --version</span></code></pre></td></tr></table></div></figure>


<p>来验证，如果输出的是1.9.3以上的版本就Okay了。之后就可以用<em>gem</em>来安装Ruby的包了，gem是跟Python的pip很类似的一个包管理器。安装bundle和bundler:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install bundle
</span><span class='line'>gem install bundler</span></code></pre></td></tr></table></div></figure>


<p><strong>Note:</strong> <em>安装配置完新版本的Ruby后，一定要重新安装bundle和bundler，否则bundle仍会bundler指向旧版本的Ruby，后面安装会因Ruby的版本不够而失败。</em>
另外，当用gem安装包的时候有时候会出现这个错误：</p>

<blockquote><p>ERROR: While executing gem &hellip; (Gem::RemoteFetcher::FetchError)
Errno::ETIMEDOUT: Operation timed out - connect(2) for &ldquo;s3.amazonaws.com&rdquo; port 443 (<a href="https://api.rubygems.org/specs.4.8.gz">https://api.rubygems.org/specs.4.8.gz</a>)</p></blockquote>

<p>不用多说，你懂得，这是只有在伟大的天朝才会发生的，错误就是连接不上软件库，解决之法就是使用国内的Ruby   gem镜像，详细在<a href="https://ruby.taobao.org/">这里</a></p>

<ul>
<li>Linux(Ubuntu)
同样Ubuntu也带有Ruby但是它的版本也很低，可以用<em>rbenv</em>来安装和配置版本的Ruby:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd
</span><span class='line'>git clone git://github.com/sstephenson/rbenv.git .rbenv
</span><span class='line'>echo 'export PATH="$HOME/.rbenv/bin:$PATH"' &gt;&gt; ~/.bash_profile
</span><span class='line'>echo 'eval "$(rbenv init -)"' &gt;&gt; ~/.bash_profile
</span><span class='line'>git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
</span><span class='line'>source ~/.bash_profile</span></code></pre></td></tr></table></div></figure>


<p>之后安装新版的Ruby：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rbenv install 2.1.3
</span><span class='line'>rbenv local 2.1.3
</span><span class='line'>rbenv rehash</span></code></pre></td></tr></table></div></figure>


<p>同样，也需要安装新版本的bundle和bundler，如果在安装过程中又出现ruby版本不对（用ruby -v验证）就运行下<strong>rbenv local 2.1.3</strong></p>

<p>到此为止，基础设施就已经有了，可以安装关键的东西了，</p>

<h4>Octopress</h4>

<p>这个就是我们要使用的框架，它是基于<a href="https://jekyllrb.com/">Jekyll</a>的一个静态博客生成框架，Jekyll是一个静态网站生成框架，它有很多功能，也可以直接使用，但是就麻烦得多，很多东西要配置和从头写。<em>Octopress</em>就是基于Jekyll，帮我们把重复性的脏活累活全都干了，把创造性的事情（写博客）留给了我们。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'>cd octopress
</span><span class='line'>bundle install
</span><span class='line'>rake install</span></code></pre></td></tr></table></div></figure>


<h4>创建Github帐号和Github Pages</h4>

<p>我相信大多数人都已经有了Github帐号了，访问<a href="https://github.com/">Github</a>来注册帐号，然后访问<a href="https://github.io/">Github Pages</a>来创建博客空间，唯一需要注意的是Repo必须是<em>Github帐号</em>.github.io，否则不会起作用。
然后，运行：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake setup_github_pages</span></code></pre></td></tr></table></div></figure>


<p>过程中会要求你输入Github Pages的Repo地址，比如<em>git@github.com:username/username.github.io.git</em>
到此，你的博客就建立好了，运行下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate
</span><span class='line'>rake preview</span></code></pre></td></tr></table></div></figure>


<p>后用浏览器访问<a href="http://localhost:4000">http://localhost:4000</a>。就会看到你的博客了，只不过都是Octopress的默认配置。</p>

<h4>配置你的博客</h4>

<p>用<em>vim</em>或者任意一个文本编辑器打开octopress根目录下的_config.yml文件，把title,subtitle,author都改成你自己的配置，再次preview，看到你的博客了吧。</p>

<h4>添加社交分享</h4>

<p>博客必须要带有社交分享功能，否则会很令人沮丧，这会影响博客的传播。Octopress默认是带有社交分享功能的，比如Twitter, Facebook, Google Plus等，但这些全世界都通用的东西在我大天朝就是不好使。而且我相信多数小牛们还是用中文写，且面向国内猿，所以用国内的社交还是靠谱些，当然对于大牛来说，常写英文，或者面向老外的，可以考虑使用默认的。</p>

<p>网站页的分享有很多第三方的库，这里用<a href="http://www.jiathis.com">jiathis</a></p>

<ol>
<li>在_config.yml中加入<strong>social_share: true</strong></li>
<li>修改sources/_includes/post/sharing.html，增加：</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{&#37; if site.social_share &#37;}
</span><span class='line'>    {&#37; include post/social_media.html &#37;}
</span><span class='line'>{&#37; endif &#37;}</span></code></pre></td></tr></table></div></figure>


<ol>
<li>访问<a href="http://www.jiathis.com/">http://www.jiathis.com</a>获取分享的代码，放入新建的文件<strong>source/_includes/post/social_media.html</strong></li>
</ol>


<h4>添加文章评论功能</h4>

<p>同样，Octopress也默认集成有评论系统<a href="http://disqus.com/">Disqus</a>，这个是国外最大的第三方评论平台，世界都在用，除了我大天朝。这种评论平台的主要功能是帐号不再局限在某一个网站内，同样评论也局限在一个网站内，评论平台提供帐号的管理和评论内容的管理，换句话说，即使不是你的网站的注册用户，只要有评论平台的帐号就能评论你的文章，且评论的内容是保存在评论平台中的。评论平台都可以使用流行的社交账号进行评论，评论还可以转发，回复等。一句话就是评论也变成了一个以用户为中心的社区，而不再是孤立的存在于某个网站之中。</p>

<p>我天朝人民是聪明的，这么好的东西国内肯定有替代品，那就是<a href="http://www.duoshuo.com/">多说</a>。使用多说也很简单：</p>

<ol>
<li>先到多说注册，获取用户名，也就是在多说上添的<em>youname</em>.duoshuo.com中的yourname</li>
<li>在_config.yml中添加</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>duoshuo_comments: true
</span><span class='line'>duoshuo_short_name: yourname</span></code></pre></td></tr></table></div></figure>


<ol>
<li>在source/_layouts/post.html中把评论模板加入到你的网页中去</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>｛&#37; if site.duoshuo_short_name and site.duoshuo_comments == true and page.comments == true &#37;｝
</span><span class='line'>  &lt;section&gt;
</span><span class='line'>    &lt;h1&gt;Comments&lt;/h1&gt;
</span><span class='line'>    &lt;div id="comments" aria-live="polite"&gt;｛&#37; include post/duoshuo.html &#37;｝&lt;/div&gt;
</span><span class='line'>  &lt;/section&gt;
</span><span class='line'>｛&#37; endif &#37;｝</span></code></pre></td></tr></table></div></figure>


<ol>
<li>创建多说评论代码模板</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!-- Duoshuo COMMENT BEGIN --&gt;
</span><span class='line'>&lt;div class="ds-thread"&gt;&lt;/div&gt;
</span><span class='line'>&lt;script type="text/javascript"&gt;
</span><span class='line'>    var duoshuoQuery = {short_name: "yourname"};
</span><span class='line'>    (function() {
</span><span class='line'>        var ds = document.createElement('script');
</span><span class='line'>        ds.type = 'text/javascript';
</span><span class='line'>        ds.async = true;
</span><span class='line'>        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';
</span><span class='line'>        ds.charset = 'utf-8';
</span><span class='line'>        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ds);
</span><span class='line'>    })();
</span><span class='line'>&lt;/script&gt;
</span><span class='line'>&lt;!-- Duoshuo COMMENT END --&gt;</span></code></pre></td></tr></table></div></figure>


<h4>写博客</h4>

<ul>
<li>rake new_post[&ldquo;Blog Title&rdquo;]
生成一篇新的博客，用文本编辑器打开生成的文件就可以写博客了</li>
<li>rake generate
生成静态的博客文件，生成的文件在_deploy中</li>
<li>rake preview
在本地预览博客，这与发布到Github Pages后的效果是一样的</li>
<li>rake deploy
这是最后一步，就是把Octopress生成的文件（在_deploy）发布到Github上面去。这里的实际是Octopress根据你的配置用sources中的模板，生成网页（HTML，JavaScript, CSS和资源），再把这些资源推送到yourname.github.io这个Repo中去，然后访问<a href="https://*yourname*.github.io">https://*yourname*.github.io</a> 就能看到你的博客了。</li>
</ul>


<h2>配置独立的域名</h2>

<p>如果你有自己的域名的话，没有话可以去<a href="http://godaddy.com/">godaddy.com</a>或者<a href="http://www.net.cn/">万网（阿里云）</a>去买一个，也就60多块钱，不到一顿酒钱，就能有一个属于你自己的独立的域名，多酷啊！
配置方法也很简单，就是1.告诉Github你的域名是啥； 2. 在你的域名解析时指向Github，具体的：</p>

<ul>
<li> 在sources/下面新建一个叫CNAME的文件，里面只有一行，就是你的域名，如toughcoder.net</li>
<li> 到你的域名管理，新建二个域名解析，A类型，分别指向192.30.252.153和192.30.252.154</li>
<li> 再建一个ANAME解析，指向yourname.github.io</li>
</ul>


<p>过个个把小时就会生效了。</p>

<h2>保存你的代码</h2>

<p>如前所述，rake deploy只是把生成的静态网页推送到了Github的Repo上去，但是你的博客的源码，就是这个octopress文件夹还需要地方保存，所以你可以新建一个Repo来保存源码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add .
</span><span class='line'>git ci -s -m "Setup and config blogs for Github Pages"
</span><span class='line'>git remote add myrepo *some public or private repo*
</span><span class='line'>git push myrepo source</span></code></pre></td></tr></table></div></figure>


<h2>Markdown编辑器</h2>

<p>因为博客都是用Markdown语法来写的，所以你需要一个良好的Markdown本地编辑器。</p>

<ul>
<li>Linux</li>
</ul>


<p><a href="http://sourceforge.net/p/retext/home/ReText/">retext</a>，用sudo apt-get install retext来安装</p>

<ul>
<li>Mac</li>
</ul>


<p><a href="http://25.io/mou">mou</a></p>

<p>为啥木Windows，孤认为用一堆开源软件搭建博客的你，不应该用Windows。</p>

<h2>Markdown参考</h2>

<p><a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet">Markdown cheat sheet</a></p>

<p>还有些事情需要注意，就是因为你所写的Markdown，同时也会被当作模板被处理，因为要添加和扩展一些其他的模块，比如代码，分享评论等，所以，如果你的文章中有HTML的Tag&lt;>或者模板的符号%（现代的Web开发框架比如Django和Ruby on Rails，都使用此类型的模板用以生成HTML），最好使用HTML的Entity来替代，以免生成最终HTML时出错，比如上面分享和评论的代码块必须把其中的%用&amp;#37;来代替，否则会出错。详细的HTML Entities表格可以参考<a href="http://www.freeformatter.com/html-entities.html">这里</a></p>

<h2>参考文章：</h2>

<p><a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/">http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/</a>
<a href="http://beyondvincent.com/blog/2013/07/27/107-hello-page-of-github/">http://beyondvincent.com/blog/2013/07/27/107-hello-page-of-github/</a></p>
]]></content>
  </entry>
  
</feed>
