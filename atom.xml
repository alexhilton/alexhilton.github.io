<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[稀有猿诉]]></title>
  <link href="https://alexhilton.github.io/atom.xml" rel="self"/>
  <link href="https://alexhilton.github.io/"/>
  <updated>2025-07-01T22:55:55+08:00</updated>
  <id>https://alexhilton.github.io/</id>
  <author>
    <name><![CDATA[Alex Hilton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在Kotlin ViewModel中正确处理相同的UI组件交互]]></title>
    <link href="https://alexhilton.github.io/blog/2025/07/01/handling-ui-action/"/>
    <updated>2025-07-01T22:34:20+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/07/01/handling-ui-action</id>
    <content type="html"><![CDATA[<p>本文译自「Handling UI Actions the Right Way in Kotlin ViewModels」，原文链接<a href="https://proandroiddev.com/handling-ui-actions-the-right-way-in-kotlin-viewmodels-119a06bb43ef">https://proandroiddev.com/handling-ui-actions-the-right-way-in-kotlin-viewmodels-119a06bb43ef</a>，由Vaibhav Jaiswal发布于2025年4月16日。</p>

<p><a href="https://alexhilton.github.io/blog/2025/07/01/handling-ui-action/"><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*MLROq8NAKOSnutBMj3WivQ.png" title="auto auto" ></a></p>

<!-- more -->


<h2>缘起</h2>

<p>作为Android开发者，我们经常会遇到需要在多个ViewModel中实现相同或者非常类似UI功能的情况。</p>

<p>例如，我们有多个页面，它们具有类似的功能，例如显示帖子、撰写评论或处理用户交互。</p>

<p>在每个ViewModel中分别处理这些UI交互很快就会变得混乱，导致大量的代码重复。随着应用规模的扩大和页面数量的增加，这个问题会变得更加棘手，导致代码库难以维护，并带来可扩展性问题。</p>

<p>对于这种代码重复问题，我们Android开发者常用的几种常见解决方案包括：</p>

<ul>
<li>额外的辅助类方法</li>
<li>“继承”或“使用委托的组合”方法</li>
</ul>


<p>在以下章节中，我们将详细探讨这些解决方案，了解每种方法如何解决代码重复问题，并重点介绍每种方法的局限性。然后，我们将深入探讨我的解决方案，它基于这些想法，并解决了它们的局限性，从而实现了更高效的UI交互管理。</p>

<blockquote><p>这个解决方案我已经在<a href="https://medial.app/"> Medial 的应用</a>（链接 <a href="https://medial.app/%EF%BC%89%E4%BB%A3%E7%A0%81%E5%BA%93%E4%B8%AD%E4%BD%BF%E7%94%A8%E8%BF%87%E4%BA%86%E2%80%94%E2%80%94%E5%B0%86">https://medial.app/%EF%BC%89%E4%BB%A3%E7%A0%81%E5%BA%93%E4%B8%AD%E4%BD%BF%E7%94%A8%E8%BF%87%E4%BA%86%E2%80%94%E2%80%94%E5%B0%86</a> UI交互处理代码变成了近乎即插即用的体验。</p></blockquote>

<p>我的解决方案根本不建议使用 BaseViewModel，也不基于 BaseViewModel。BaseViewModel 只是一个例子，用来说明我们可以使用从任何其他类/接口继承的功能，这些类/接口可以是 BaseViewModel、ViewModel、Decompose 的 ComponentContext 或其他任何东西。</p>

<h2>⚡️ TL;DR: 处理ViewModel中的共享UI交互</h2>

<p>当在多个页面上显示相同的UI组件时，在每个ViewModel中处理它们的交互会导致重复和逻辑混乱。我们探索了三种方法来解决这个问题：</p>

<ol>
<li>辅助类方法</li>
<li>➖ 简单，但无法覆写任何行为</li>
<li>➖ 并非ViewModel的直接功能</li>
<li>通过 Kotlin 委托进行组合</li>
<li>✅ 更好的设计，支持覆写行为。</li>
<li>➖ 无法访问viewModelScope或其他ViewModel功能。</li>
<li>➖ 无法从任何其他继承类访问任何内容。</li>
<li>💡 我的解决方案 — 使用带有默认函数的接口</li>
<li>✅ 简洁、可复用，支持覆写（Override）行为。</li>
<li>✅ 完全访问ViewModel功能或任何其他继承类的功能。</li>
<li>✅ 只需从接口实现即可轻松插入任何 ViewModel</li>
</ol>


<p>本博客中的所有解决方案均在<a href="https://github.com/Vaibhav2002/Ui-Intreraction-Handler-Sample">此示例项目</a>（链接 <a href="https://github.com/Vaibhav2002/Ui-Intreraction-Handler-Sample%EF%BC%89%E4%B8%AD%E5%AE%9E%E7%8E%B0%EF%BC%9A">https://github.com/Vaibhav2002/Ui-Intreraction-Handler-Sample%EF%BC%89%E4%B8%AD%E5%AE%9E%E7%8E%B0%EF%BC%9A</a></p>

<h2>🏗️ 设置</h2>

<p>假设我们有一个后置UI 元素，它有一些UI 交互，并像 MVI 建议的那样，在一个密封的界面中呈现。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">sealed</span> <span class="n">interface</span> <span class="n">PostAction</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">Clicked</span><span class="p">(</span><span class="k">val</span> <span class="py">id</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">:</span> <span class="n">PostAction</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">LikeClicked</span><span class="p">(</span><span class="k">val</span> <span class="py">id</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">:</span> <span class="n">PostAction</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">ShareClicked</span><span class="p">(</span><span class="k">val</span> <span class="py">id</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">:</span> <span class="n">PostAction</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们还有一个 BaseViewModel 类，用于保存每个ViewModel所需的通用功能</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">abstract</span> <span class="k">class</span> <span class="nc">BaseViewModel</span> <span class="p">:</span> <span class="n">ViewModel</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="py">showShackBar</span> <span class="k">by</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">showBottomSheet</span> <span class="k">by</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">navigate</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 实现</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">showSnackbar</span><span class="p">(</span><span class="n">message</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">showSnackBar</span> <span class="p">=</span> <span class="n">message</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>额外的辅助类方法</h3>

<p>在这种方法中，我们创建一个单独的辅助类来封装UI交互的处理。我们将这个类作为ViewModel的一个属性。</p>

<p>首先，我们定义一个辅助类 PostActionHandler 来处理交互。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">class</span> <span class="nc">PostActionHandler</span><span class="p">(</span><span class="k">private</span> <span class="k">val</span> <span class="py">viewModel</span><span class="p">:</span> <span class="n">BaseViewModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">handleAction</span><span class="p">(</span><span class="n">action</span><span class="p">:</span> <span class="n">PostAction</span><span class="p">)</span> <span class="p">=</span> <span class="k">when</span> <span class="p">(</span><span class="n">action</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">PostAction</span><span class="p">.</span><span class="n">Clicked</span> <span class="p">-&gt;</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">navigate</span><span class="p">()</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">PostAction</span><span class="p">.</span><span class="n">LikeClicked</span> <span class="p">-&gt;</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">showSnackBar</span><span class="p">(</span><span class="s">&quot;Liked&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">PostAction</span><span class="p">.</span><span class="n">ShareClicked</span> <span class="p">-&gt;</span> <span class="p">{</span> <span class="cm">/* 实现 */</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在，在 PostScreenViewModel 中我们创建一个 PostActionHandler 实例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">class</span> <span class="nc">PostScreenViewModel</span> <span class="p">:</span> <span class="n">BaseViewModel</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">actionHandler</span> <span class="p">=</span> <span class="n">PostActionHandler</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">PostScreen</span><span class="p">(</span><span class="n">viewModel</span><span class="p">:</span> <span class="n">PostScreenViewModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">PostItem</span><span class="p">(</span><span class="n">onAction</span> <span class="p">=</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">actionHandler</span><span class="o">::</span><span class="n">handleAction</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">PostItem</span><span class="p">(</span><span class="n">onAction</span><span class="p">:</span> <span class="p">(</span><span class="n">PostAction</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>虽然这种方法确实解决了跨多个ViewModel重复代码的问题，但它也存在一些主要缺点，这些缺点包括：</p>

<ul>
<li>🚫 自定义功能有限：由于 PostActionHandler 是一个封装类，我们无法覆写任何行为。</li>
<li>🚫 通过属性访问：我们不是将功能添加到ViewModel本身，而是将其作为ViewModel的一个属性添加。</li>
</ul>


<p><strong>无法覆写（Override）行为是这种方法不建议用于UI交互处理的主要原因。</strong></p>

<h2>🧬 使用 Kotlin 委托进行组合（优雅但受限的解决方案）</h2>

<p>这是互联网上解决这个问题的标准方法，也是最受推荐的方法。该解决方案基于继承，但不是继承自某个类，这样就无法再扩展任何类。我们利用 Kotlin 委托将实现委托给另一个类，这样就无需扩展某个类，也无需再终止继承。</p>

<p>以下是我们实现该解决方案的方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">interface</span> <span class="n">PostActionHandler</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">handleAction</span><span class="p">(</span><span class="n">action</span><span class="p">:</span> <span class="n">PostAction</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">PostActionHandlerImpl</span> <span class="p">:</span> <span class="n">PostActionHandler</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">handleAction</span><span class="p">(</span><span class="n">action</span><span class="p">:</span> <span class="n">PostAction</span><span class="p">)</span> <span class="p">=</span> <span class="k">when</span> <span class="p">(</span><span class="n">action</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">PostAction</span><span class="p">.</span><span class="n">Clicked</span> <span class="p">-&gt;</span> <span class="n">handlePostClick</span><span class="p">(</span><span class="n">action</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">PostAction</span><span class="p">.</span><span class="n">LikeClicked</span> <span class="p">-&gt;</span> <span class="n">handleLikeClick</span><span class="p">(</span><span class="n">action</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">PostAction</span><span class="p">.</span><span class="n">ShareClicked</span> <span class="p">-&gt;</span> <span class="n">handleShareClick</span><span class="p">(</span><span class="n">action</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">fun</span> <span class="nf">handlePostClick</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">fun</span> <span class="nf">handleLikeClick</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">fun</span> <span class="nf">handleShareClick</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这就是我们的使用方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">class</span> <span class="nc">PostViewModel</span> <span class="p">:</span> <span class="n">BaseViewModel</span><span class="p">(),</span> <span class="n">PostActionHandler</span> <span class="k">by</span> <span class="n">PostActionHandlerImpl</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">PostScreen</span><span class="p">(</span><span class="n">viewModel</span><span class="p">:</span> <span class="n">PostViewModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">PostItem</span><span class="p">(</span><span class="n">onAction</span> <span class="p">=</span> <span class="n">viewModel</span><span class="o">::</span><span class="n">handleAction</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">PostItem</span><span class="p">(</span><span class="n">onAction</span><span class="p">:</span> <span class="p">(</span><span class="n">PostAction</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种方法解决了额外辅助类方法中存在的所有问题。</p>

<ul>
<li>✅ 覆写行为：通过使用接口和委托，我们可以轻松地覆写任何行为。</li>
<li>✅ 更简洁的设计：功能直接成为ViewModel的一部分，允许我们像调用原生ViewModel方法一样调用这些函数。</li>
</ul>


<p>然而，这种方法有一个主要缺点，使其在处理UI交互和UI逻辑方面不够完善。</p>

<h3>访问从其他类继承的功能</h3>

<p>此模式的一个主要挑战是我们无法访问从其他类继承的功能，因为我们无法传递引用。</p>

<p>让我们看看这个限制带来了哪些挑战：</p>

<ul>
<li>无法访问ViewModel功能：我们无法从实现类访问任何ViewModel功能。这是因为我们无法在实现类中传递当前类的引用。</li>
<li>无法使用 viewModelScope：此限制带来的一个主要警告是，我们无法使用 viewModelScope，因此无法直接启动协程。我们必须在 viewModel 中创建包装函数，这会破坏可重用性，因为现在可组合函数会调用我们的ViewModel函数。</li>
</ul>


<p>当我们尝试将其作为构造函数参数传递时，Android Studio 会抛出一个错误：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*xcJAyapM8023-hqu06vwUw.png" alt="Kotlin Compiler showing error when passing “this”" /></p>

<h2>🧩 我的解决方案：使用接口默认函数进行组合</h2>

<p>在我自己实现使用委托的 Composition 方案时，我遇到了一个难题：如何传递当前ViewModel的引用来访问viewModelScope 和我的 BaseViewModel 功能。后来我想起了 Kotlin 接口中的默认函数，于是尝试了这个方案，完美地解决了这个问题。</p>

<p>通过这个方案，我可以：</p>

<ul>
<li>💡 支持功能重写</li>
<li>🔗 完全访问我的BaseViewModel和ViewModel 的功能，例如viewModelScope 等，或任何其他类的功能。</li>
<li>❌ 无需单独的实现类</li>
</ul>


<blockquote><p>在我们<a href="https://medial.app/"> Medial 的应用</a>（链接 <a href="https://medial.app/%EF%BC%89%E7%94%9F%E4%BA%A7%E4%BB%A3%E7%A0%81%E4%B8%AD%EF%BC%8C%E6%88%91%E9%9B%86%E6%88%90%E4%BA%86%E8%BF%99%E4%B8%AA%E6%96%B9%E6%A1%88%EF%BC%8C%E4%BB%A5%E7%AE%80%E5%8C%96ViewModel%E5%A4%84%E7%90%86UI%E4%BA%A4%E4%BA%92%E7%9A%84%E6%96%B9%E5%BC%8F%E3%80%82%E7%BB%93%E6%9E%9C%E5%A6%82%E4%BD%95%EF%BC%9F%E6%AF%8F%E4%B8%AA%E6%96%B0%E9%A1%B5%E9%9D%A2%E5%8F%AA%E9%9C%80%E5%AE%9E%E7%8E%B0%E8%BF%99%E4%B8%AA%E6%8E%A5%E5%8F%A3%EF%BC%8C%E7%84%B6%E5%90%8E%EF%BC%8C%E5%AE%83%E5%B0%B1%E5%B9%B2%E5%87%80%E5%88%A9%E8%90%BD%E5%9C%B0%E8%8E%B7%E5%BE%97%E4%BA%86%E5%8A%9F%E8%83%BD%E3%80%82">https://medial.app/%EF%BC%89%E7%94%9F%E4%BA%A7%E4%BB%A3%E7%A0%81%E4%B8%AD%EF%BC%8C%E6%88%91%E9%9B%86%E6%88%90%E4%BA%86%E8%BF%99%E4%B8%AA%E6%96%B9%E6%A1%88%EF%BC%8C%E4%BB%A5%E7%AE%80%E5%8C%96ViewModel%E5%A4%84%E7%90%86UI%E4%BA%A4%E4%BA%92%E7%9A%84%E6%96%B9%E5%BC%8F%E3%80%82%E7%BB%93%E6%9E%9C%E5%A6%82%E4%BD%95%EF%BC%9F%E6%AF%8F%E4%B8%AA%E6%96%B0%E9%A1%B5%E9%9D%A2%E5%8F%AA%E9%9C%80%E5%AE%9E%E7%8E%B0%E8%BF%99%E4%B8%AA%E6%8E%A5%E5%8F%A3%EF%BC%8C%E7%84%B6%E5%90%8E%EF%BC%8C%E5%AE%83%E5%B0%B1%E5%B9%B2%E5%87%80%E5%88%A9%E8%90%BD%E5%9C%B0%E8%8E%B7%E5%BE%97%E4%BA%86%E5%8A%9F%E8%83%BD%E3%80%82</a></p></blockquote>

<p>让我们来探索一下这个方案是如何解决我们的问题的。</p>

<h3>设计 ActionHandler 接口</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">interface</span> <span class="n">PostActionHandler</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">viewModel</span><span class="p">:</span> <span class="n">BaseViewModel</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">handleAction</span><span class="p">(</span><span class="n">action</span><span class="p">:</span> <span class="n">PostAction</span><span class="p">)</span> <span class="p">=</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">viewModelScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">when</span> <span class="p">(</span><span class="n">action</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">is</span> <span class="n">PostAction</span><span class="p">.</span><span class="n">Clicked</span> <span class="p">-&gt;</span> <span class="n">handlePostClick</span><span class="p">(</span><span class="n">action</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>            <span class="k">is</span> <span class="n">PostAction</span><span class="p">.</span><span class="n">LikeClicked</span> <span class="p">-&gt;</span> <span class="n">handleLikeClick</span><span class="p">(</span><span class="n">action</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>            <span class="k">is</span> <span class="n">PostAction</span><span class="p">.</span><span class="n">ShareClicked</span> <span class="p">-&gt;</span> <span class="n">handleShareClick</span><span class="p">(</span><span class="n">action</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">handlePostClick</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">viewModel</span><span class="p">.</span><span class="n">navigate</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">handleLikeClick</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">viewModel</span><span class="p">.</span><span class="n">showToast</span><span class="p">(</span><span class="s">&quot;Liked&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">handleShareClick</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 实现</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>让我们的ViewModel实现这个接口</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">class</span> <span class="nc">PostViewModel</span> <span class="p">:</span> <span class="n">BaseViewModel</span><span class="p">(),</span> <span class="n">PostActionHandler</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 传入当前的baseViewModel</span>
</span><span class='line'>    <span class="k">override</span> <span class="n">valViewModel</span><span class="p">=</span> <span class="k">this</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">handleShareClick</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 添加 override实现</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>这是它在 Composable 中的使用方式</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">PostScreen</span><span class="p">(</span><span class="n">viewModel</span><span class="p">:</span> <span class="n">PostViewModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">PostItem</span><span class="p">(</span><span class="n">onAction</span> <span class="p">=</span> <span class="n">viewModel</span><span class="o">::</span><span class="n">handleAction</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">PostItem</span><span class="p">(</span>
</span><span class='line'>    <span class="n">onAction</span><span class="p">:</span> <span class="p">(</span><span class="n">PostAction</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以，正如你所见，我们只需要定义 viewModel 变量，就大功告成了，现在我们可以使用ViewModel和 BaseViewModel 提供的所有功能了。</p>

<p>请注意，我们是如何解决使用委托进行组合的主要缺点的：</p>

<ul>
<li>通过将 viewModel 引用保留为接口属性，我们可以轻松地在ViewModel中定义它。这使我们能够直接访问 BaseViewModel 或任何其他ViewModel提供的所有功能。</li>
<li>我们简化了 viewModelScope 的使用。现在，启动协程、收集流程以及执行其他任务都变得非常简单，无需任何复杂的变通方法或 hack。这就是此解决方案带来的优雅和简洁之处。</li>
</ul>


<p>这种方法只有一个小缺点，那就是</p>

<ul>
<li>我们必须在ViewModel中定义所有接口属性，这在大多数情况下是可以接受的，因为我们主要会引用 Repository 或 Domain Layer 类，以及一些可变状态（如果有的话）。</li>
</ul>


<p>这个问题比我们在这个解决方案中克服的缺点要小得多，这使得它成为处理任何共享UI交互或任何共享UI业务逻辑的最佳解决方案。</p>

<blockquote><p>嗯，这一部分比前面几部分简单得多。这里没有复杂的问题需要深入研究——只是一个简单的解决方案，它确实做到了它应该做的事情，并解决了我们所有的问题。</p></blockquote>

<h2>🥷🏻 让我们在实际用例中看看这个解决方案的实际应用。</h2>

<p>假设我们有一个主页面，它以列表形式显示各种UI元素，例如包含帖子和新闻等项目的动态。每个元素都包含一组用户交互，例如点赞帖子、分享新闻文章或导航到详情视图。我们的解决方案可以帮助我们高效地处理跨不同ViewModel的这些交互，确保以可扩展的方式处理通用功能。</p>

<h3>为每个UI组件设计UI交互</h3>

<p>然后，我们使用 Kotlin 的 Sealed 接口，像在典型的 MVI 架构中一样设计UI交互：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">sealed</span> <span class="n">interface</span> <span class="n">PostAction</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">Clicked</span><span class="p">(</span><span class="k">val</span> <span class="py">post</span><span class="p">:</span> <span class="n">Post</span><span class="p">)</span> <span class="p">:</span> <span class="n">PostAction</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">LikeClicked</span><span class="p">(</span><span class="k">val</span> <span class="py">post</span><span class="p">:</span> <span class="n">Post</span><span class="p">)</span> <span class="p">:</span> <span class="n">PostAction</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">ShareClicked</span><span class="p">(</span><span class="k">val</span> <span class="py">post</span><span class="p">:</span> <span class="n">Post</span><span class="p">)</span> <span class="p">:</span> <span class="n">PostAction</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">sealed</span> <span class="n">interface</span> <span class="n">NewsAction</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">Clicked</span><span class="p">(</span><span class="k">val</span> <span class="py">news</span><span class="p">:</span> <span class="n">News</span><span class="p">)</span> <span class="p">:</span> <span class="n">NewsAction</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">LikeClicked</span><span class="p">(</span><span class="k">val</span> <span class="py">news</span><span class="p">:</span> <span class="n">News</span><span class="p">)</span> <span class="p">:</span> <span class="n">NewsAction</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">BookmarkClicked</span><span class="p">(</span><span class="k">val</span> <span class="py">news</span><span class="p">:</span> <span class="n">News</span><span class="p">)</span> <span class="p">:</span> <span class="n">NewsAction</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>创建我们的动作处理程序接口</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">interface</span> <span class="n">PostActionHandler</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">viewModel</span><span class="p">:</span> <span class="n">BaseViewModel</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">postRepo</span><span class="p">:</span> <span class="n">PostRepository</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">handleAction</span><span class="p">(</span><span class="n">action</span><span class="p">:</span> <span class="n">PostAction</span><span class="p">)</span> <span class="p">=</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">viewModelScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">when</span> <span class="p">(</span><span class="n">action</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">is</span> <span class="n">PostAction</span><span class="p">.</span><span class="n">Clicked</span> <span class="p">-&gt;</span> <span class="n">handlePostClick</span><span class="p">(</span><span class="n">action</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>          <span class="k">is</span> <span class="n">PostAction</span><span class="p">.</span><span class="n">LikeClicked</span> <span class="p">-&gt;</span> <span class="n">handleLikeClick</span><span class="p">(</span><span class="n">action</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">handlePostClick</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">viewModel</span><span class="p">.</span><span class="n">navigate</span><span class="p">(......)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">handleLikeClick</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">postRepo</span><span class="p">.</span><span class="n">like</span><span class="p">(</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>      <span class="n">viewModel</span><span class="p">.</span><span class="n">showSnackbar</span><span class="p">(</span><span class="s">&quot;Post Liked&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">interface</span> <span class="n">NewsActionHandler</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">viewModel</span><span class="p">:</span> <span class="n">BaseViewModel</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">newsRepo</span><span class="p">:</span> <span class="n">NewsRepository</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">handleAction</span><span class="p">(</span><span class="n">action</span><span class="p">:</span> <span class="n">NewsAction</span><span class="p">)</span> <span class="p">=</span> <span class="k">when</span> <span class="p">(</span><span class="n">action</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">NewsAction</span><span class="p">.</span><span class="n">Clicked</span> <span class="p">-&gt;</span> <span class="n">handleNewsClick</span><span class="p">(</span><span class="n">action</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">NewsAction</span><span class="p">.</span><span class="n">Bookmark</span> <span class="p">-&gt;</span> <span class="n">handleNewsBookmark</span><span class="p">(</span><span class="n">action</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">handleNewsClick</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">viewModel</span><span class="p">.</span><span class="n">navigate</span><span class="p">(.....)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">handleNewsBookmark</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">newsRepo</span><span class="p">.</span><span class="n">bookmark</span><span class="p">(</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>      <span class="n">viewModel</span><span class="p">.</span><span class="n">showSnackBar</span><span class="p">(</span><span class="s">&quot;News Bookmarked&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如上所示，我们为每个数据模型创建了一个 Action Handler 接口。</p>

<p>我们在这里所做的就是遵循上一节所示的接口设计。</p>

<ul>
<li>我们有两个属性，分别是ViewModel和Repository 类。</li>
<li>我们分别创建了处理每个 Action 的函数。当然，这是可选的。我保留这种方式是为了方便覆写任何特定的行为，并且我们为每个 Action 类型分别调用相应的 Action 处理函数。</li>
</ul>


<h3>创建 ViewModel</h3>

<p>让我们构建一个实现这两个接口的 ViewModel，以继承它们的功能。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">class</span> <span class="nc">HomeViewModel</span> <span class="p">:</span> <span class="n">BaseViewModel</span><span class="p">(),</span> <span class="n">PostActionHandler</span><span class="p">,</span> <span class="n">NewsActionHandler</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">val</span> <span class="py">viewModel</span> <span class="p">=</span> <span class="k">this</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">val</span> <span class="py">postRepo</span> <span class="p">=</span> <span class="n">PostRepository</span><span class="p">()</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">val</span> <span class="py">newsRepo</span> <span class="p">=</span> <span class="n">NewsRepository</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">      ViewModel其余代码</span>
</span><span class='line'><span class="cm">    **/</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后，我们在ViewModel中定义必要的属性（ viewModel 、 postRepo 和 newsRepo ），这些属性会被两个接口使用。</p>

<p>这种设计消除了冗余，并保持了代码的简洁性，因为我们只需设置一次属性，只要属性名称相同，两个接口就可以无缝地与其交互。
这种方法保持了ViewModel的中心地位，同时又可以轻松处理不同组件的UI交互和业务逻辑。</p>

<h2>🪝连接一切：将操作连接到 UI</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">HomeScreen</span><span class="p">(</span><span class="n">viewModel</span><span class="p">:</span> <span class="n">HomeViewModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">LazyColumn</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">items</span><span class="p">(</span><span class="n">viewModel</span><span class="p">.</span><span class="n">items</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">when</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">is</span> <span class="n">News</span> <span class="p">-&gt;</span> <span class="n">NewsCard</span><span class="p">(</span><span class="n">it</span><span class="p">,</span> <span class="n">onAction</span> <span class="p">=</span> <span class="n">viewModel</span><span class="o">::</span><span class="n">handleAction</span><span class="p">)</span>
</span><span class='line'>                <span class="k">is</span> <span class="n">Post</span> <span class="p">-&gt;</span> <span class="n">PostCard</span><span class="p">(</span><span class="n">it</span><span class="p">,</span> <span class="n">onAction</span> <span class="p">=</span> <span class="n">viewModel</span><span class="o">::</span><span class="n">handleAction</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">NewsCard</span><span class="p">(</span>
</span><span class='line'>  <span class="n">news</span><span class="p">:</span> <span class="n">News</span><span class="p">,</span>
</span><span class='line'>  <span class="n">onAction</span><span class="p">:</span> <span class="p">(</span><span class="n">NewsAction</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">PostCard</span><span class="p">(</span>
</span><span class='line'>  <span class="n">post</span><span class="p">:</span> <span class="n">Post</span><span class="p">,</span>
</span><span class='line'>  <span class="n">onAction</span><span class="p">:</span> <span class="p">(</span><span class="n">PostAction</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在我们的UI组件中，我们可以直接将这些函数用作ViewModel本身的函数，这样就完成了在 Screen 中添加交互处理的功能。</p>

<ul>
<li>现在，假设我们有另一个只显示新闻的页面（Screen）。我们需要做的就是在ViewModel中实现 NewsActionHandler 接口——就这样，一切就绪。</li>
<li>我们可以无缝地从 BaseViewModel 或ViewModel调用任何函数，从而能够在一个单一的、集中的位置实现完整的端到端功能。如果我们在多个位置显示相同的数据模型，这将非常有利。</li>
</ul>


<h2>📦 整合所有功能</h2>

<p>在这篇博文中，我们探讨了在扩展Android UI（基本上是任何 UI）时最容易被忽视的问题之一，即跨ViewModel的重复UI交互逻辑。我们探索了三种不同的方法来解决这个问题：</p>

<ol>
<li>辅助类 - 一种快速解决方案，但存在严格的限制。</li>
<li>使用委托进行组合——一种更现代的继承驱动解决方案，
但它难以从外部访问功能。</li>
<li>使用默认函数的接口（我的解决方案）——一种实用、优雅且灵活的方法，克服了前两种方法的所有限制。</li>
</ol>


<p>通过利用 Kotlin 的接口默认方法并将ViewModel作为接口内部的属性，我们解锁了完整的可扩展性，并能够从其他继承的类/接口访问扩展功能。</p>

<p>现在，让我们以表格的形式比较一下每个解决方案：</p>

<table>
<thead>
<tr>
<th> 好处                           </th>
<th> 通过辅助类                                       </th>
<th> 使用委托进行组合                             </th>
<th> 带有默认函数的接口 (✅ 最好)         </th>
</tr>
</thead>
<tbody>
<tr>
<td> 🔁 可重用性                                 </td>
<td>  ✅ Yes        </td>
<td>  ✅ Yes         </td>
<td>  ✅ Yes </td>
</tr>
<tr>
<td> 🧠 覆写行为                        </td>
<td> ❌ 不可能          </td>
<td> ✅ 可以，由于继承        </td>
<td> ✅  可以，由于继承           </td>
</tr>
<tr>
<td> 🔗 访问从其他来源继承的功能                 </td>
<td> ❌ 不可以，因为它是一个封装类      </td>
<td> ❌  不可以，因为我们无法传递当前引用       </td>
<td> ✅  可以，因为我们可以将继承类保留为接口属性    </td>
</tr>
<tr>
<td> 🏗️ 跨页面可扩展性                  </td>
<td> ⚠️ 差——当逻辑还涉及视图模型特定功能时会变得困难               </td>
<td> ✅ 更好——可重复使用的逻辑                    </td>
<td> ✅ 最佳——跨页面即插即用            </td>
</tr>
<tr>
<td> ✅ 最佳用例                               </td>
<td> 对于非UI交互封装功能                   </td>
<td> 业务逻辑重用，非UI上下文            </td>
<td> 多个ViewModel中需要的UI交互 </td>
</tr>
</tbody>
</table>


<p>你可以在<a href="https://github.com/Vaibhav2002/Ui-Intreraction-Handler-Sample">专用的 GitHub 代码库</a>（链接：<a href="https://github.com/Vaibhav2002/Ui-Intreraction-Handler-Sample%EF%BC%89%E4%B8%AD%E6%8E%A2%E7%B4%A2%E6%9C%AC%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%90%E5%88%B0%E7%9A%84%E6%89%80%E6%9C%89%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E3%80%82%E6%AC%A2%E8%BF%8E%E9%9A%8F%E6%84%8Fclone%E3%80%81fork%E6%88%96%E8%AF%95%E7%94%A8%E3%80%82">https://github.com/Vaibhav2002/Ui-Intreraction-Handler-Sample%EF%BC%89%E4%B8%AD%E6%8E%A2%E7%B4%A2%E6%9C%AC%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%90%E5%88%B0%E7%9A%84%E6%89%80%E6%9C%89%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E3%80%82%E6%AC%A2%E8%BF%8E%E9%9A%8F%E6%84%8Fclone%E3%80%81fork%E6%88%96%E8%AF%95%E7%94%A8%E3%80%82</a></p>

<h2>✌️ 告别</h2>

<p>总而言之，希望这篇博客能帮助你解锁一些强大的技巧，提升你的Kotlin 和UI处理知识。有了Kotlin 的界面默认函数，你的构建将更加简洁、快速，并兼顾长期可扩展性。</p>

<p>如果你喜欢这篇文章并想随时了解最新动态：</p>

<ul>
<li>查看我的 LinkedIn、GitHub 和 X 个人资料，了解我正在做的事情。</li>
<li>想要更多 Kotlin 的魔法？阅读我之前的博客，了解另一种可以让你的代码库更精简、更智能的技术。</li>
</ul>


<p>感谢你的阅读，希望你喜欢！🚀</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MVI架构：Compose中的响应式状态管理]]></title>
    <link href="https://alexhilton.github.io/blog/2025/06/25/reactive-state-in-compose/"/>
    <updated>2025-06-25T22:32:21+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/06/25/reactive-state-in-compose</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自「Reactive State Management in Compose — MVI Architecture」，原文链接<a href="https://proandroiddev.com/reactive-state-management-in-compose-mvi-architecture-71546c9f1b52">https://proandroiddev.com/reactive-state-management-in-compose-mvi-architecture-71546c9f1b52</a>，由Davies Adedayo AbdulGafar发布于2025年4月22日。</p></blockquote>

<p>译注：原文作者虽然是基于Jetpack Compose来写的，但重点讨论的是应用的MVI架构方式，涉及的都是纯Kotlin语言层面的，以及Compose层面的，并不涉及平台特性，因此完全适用于跨平台的Compose Multiplatform。</p>

<p><a href="https://alexhilton.github.io/blog/2025/06/25/reactive-state-in-compose/"><img src="https://alexhilton.github.io/Users/alexhilton/Downloads/banner_reactive.png" title="auto auto" ></a></p>

<!-- more -->


<h2>MVI是什么鬼</h2>

<h3>MVI架构的基本概念</h3>

<p>MVI（模型-视图-意图）架构为 Android 应用程序中可扩展、稳健且可测试的 UI 状态管理提供了一种结构良好的方法。它强调代码简洁和关注点分离（Separation of Concerns），将应用程序划分为三个主要组件——模型(Model)、视图(View)和意图(Intent)——它们共同构成一个循环：意图 -> 视图模型 -> 模型 -> 视图，从而定义单向数据流（<strong>译注：</strong>这里的意图Intent是架构中的一个逻辑概念，与Android系统中的Intent没有关系）。此架构模式提供的不同角色有助于更轻松地理解和维护 UI 状态。从本质上讲，MVI 不仅仅是一种架构模式，而是一个旨在流畅响应变化的响应式系统。这种响应性是其定义特征之一，也是其最大的优势。</p>

<ul>
<li>单向数据流：指数据以单向流动——从模型流向视图，并以意图的形式返回。这确保了架构的清晰度、可预测性和易维护性。</li>
<li>关注点分离：指模型、视图和意图组件具有不同的角色。模型管理状态，视图处理 UI 渲染，意图捕获并传达用户操作。</li>
<li>不可变性（Immutability）：确保模型的状态一旦设置便保持不变。这保证了可预测性，消除了意外的副作用，并促进了稳定可靠的应用状态。</li>
<li>响应式：当状态发生变化时，UI 会自动更新。</li>
</ul>


<p>该架构分解为三个和谐的组件，它们以响应式流程协同工作：</p>

<ul>
<li>模型 (Model) 是单一事实来源，它是应用程序在任何特定时刻的状态快照。当此状态发生变化时，它会触发整个系统的级联响应式更新。UI 会在状态变化时自动更新，这凸显了这一核心的响应式原则。</li>
<li>视图 (View) 根据当前模型状态以响应式方式渲染用户所见内容。它订阅状态变化并自动进行转换以反映这些变化，而无需任何命令式更新调用。这种响应式渲染正是 MVI 如此强大的原因——视图始终与状态同步。</li>
<li>意图 (Intent) 完善了响应式电路，捕获用户交互并将其反馈回系统以创建新状态。这形成了一个持续的反馈循环：用户操作触发意图，意图产生新状态，新状态触发 UI 更新。</li>
</ul>


<p>当我们说 MVI 具有响应式特性时，我们指的是整个系统都是围绕自动响应变化而构建的。数据发生变化时，UI 无需手动更新，而是会自动反映当前状态。这种响应式特性能够创建一个动态、响应迅速的应用程序，让用户感觉生动活泼。</p>

<h3>MVI架构的典型实现方式</h3>

<p>在原生 Android 开发中，MVI 的大部分实现都放在 ViewModel 类中。以下是实现 MVI 模式的一种简单方法：</p>

<ol>
<li>我们打算建模的 UI 状态将实现为一个不可变的 Kotlin 数据类（data class），其字段保存着我们想要在视图中显示的状态。</li>
<li>StateFlow 是将整个架构绑定在一起的响应式粘合剂。这个观察者对象包装了模型，并将变化通知给视图，以便它反映新的状态。这个响应式管道确保任何状态变化都会自动传播到 UI。</li>
<li>目前，我们的意图可以实现为 ViewModel 中的公共函数。这些函数应该没有返回值，以确保视图只接收来自观察者的状态更新。类似于对象作为编程语言中的一等公民，可以通过引用传递，同样，函数也依赖于方法引用。我们利用这一点将意图传递给使用它的 UI 节点。我们无需编写复杂的类来建模意图，因为那样需要额外实现意图处理程序。</li>
</ol>


<p>以下是在 ViewModel 中实现 MVI 模式的模板。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">class</span> <span class="nc">ScreenViewModel</span><span class="p">()</span> <span class="p">:</span> <span class="n">ViewModel</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">val</span> <span class="py">_uiState</span><span class="p">:</span> <span class="n">MutableStateFlow</span><span class="p">&lt;</span><span class="n">MyModel</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">MutableStateFlow</span><span class="p">(</span><span class="n">MyModel</span><span class="p">(...))</span> <span class="c1">// private observer object</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="py">uiState</span><span class="p">:</span> <span class="n">StateFlow</span><span class="p">&lt;</span><span class="n">MyModel</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">_uiState</span> <span class="c1">// observer object exposed as an immutable instance</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">fun</span> <span class="nf">doUpdateOnState</span><span class="p">(...)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span> <span class="c1">// public function serves as an intent</span>
</span><span class='line'>  <span class="k">fun</span> <span class="nf">doAnotherUpdate</span><span class="p">(...)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">data</span> <span class="k">class</span> <span class="nc">MyModel</span><span class="p">(...)</span>
</span></code></pre></td></tr></table></div></figure>


<p>新状态在 ViewModel 中生成，然后由观察 uiState 的视图使用。请注意，Intent 是如何作为触发状态更改的回调传递到可组合项页面的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'> <span class="k">fun</span> <span class="nf">MyScreen</span><span class="p">(</span><span class="n">viewModel</span><span class="p">:</span> <span class="n">ScreenViewModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">val</span> <span class="py">uiState</span><span class="p">:</span> <span class="n">MyModel</span> <span class="p">=</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">uiState</span><span class="p">.</span><span class="n">collectAsStateWithLifeCycle</span><span class="p">()</span> <span class="c1">// consumes the state produced in the viewModel</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">MyScreenContent</span><span class="p">(</span>
</span><span class='line'>     <span class="n">uiState</span> <span class="p">=</span> <span class="n">uiState</span><span class="p">,</span>
</span><span class='line'>     <span class="n">doUpdate</span> <span class="p">=</span> <span class="n">viewModel</span><span class="o">::</span><span class="n">doUpdateOnState</span><span class="p">,</span> <span class="c1">// intent to do update</span>
</span><span class='line'>     <span class="n">doAnotherUpdate</span> <span class="p">=</span> <span class="n">viewModel</span><span class="o">::</span><span class="n">doAnotherUpdate</span> <span class="c1">// intent to do another update</span>
</span><span class='line'>   <span class="p">)</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种反应模式通过 Kotlin 的 StateFlow 实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="py">_uiState</span><span class="p">:</span> <span class="n">MutableStateFlow</span><span class="p">&lt;</span><span class="n">MyModel</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">MutableStateFlow</span><span class="p">(</span><span class="n">MyModel</span><span class="p">(...))</span>
</span><span class='line'><span class="k">val</span> <span class="py">uiState</span><span class="p">:</span> <span class="n">StateFlow</span><span class="p">&lt;</span><span class="n">MyModel</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">_uiState</span>
</span></code></pre></td></tr></table></div></figure>


<p>在 UI 方面，这种反应性通过收集操作来表达，该操作消耗从 viewModel 生成的新状态。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">uiState</span> <span class="p">=</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">uiState</span><span class="p">.</span><span class="n">collectAsStateWithLifeCycle</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>这行代码建立了一个响应式连接，每当状态发生变化时都会自动刷新 UI。无需手动刷新调用或复杂的更新逻辑——系统本身就是响应式的。</p>

<h2>案例研究</h2>

<p>让我们采用更实用的方法，实现 MVI 模式来管理页面 状态。下图是一个页面，用户可以从给定的选项中选择所显示问题的答案。</p>

<p><img src="https://miro.medium.com/v2/resize:fit:838/format:webp/0*uwa_-6EYNOhyNuNJ" alt="Case study" /></p>

<p>图片来源 — <a href="https://github.com/android/compose-samples/tree/v2024.01.00/Jetsurvey">Compose 示例 Jetsurvey</a>（译注：链接是<a href="https://github.com/android/compose-samples/tree/v2024.01.00/Jetsurvey%EF%BC%89%E3%80%82%E7%82%B9">https://github.com/android/compose-samples/tree/v2024.01.00/Jetsurvey%EF%BC%89%E3%80%82%E7%82%B9</a><a href="https://github.com/SahDavies/mvi-architecture-sample/">击此</a>（译注：链接是<a href="https://github.com/SahDavies/mvi-architecture-sample/%EF%BC%89%E5%A4%84%E6%9F%A5%E7%9C%8B%E5%AE%8C%E6%95%B4%E5%AE%9E%E7%8E%B0%E3%80%82">https://github.com/SahDavies/mvi-architecture-sample/%EF%BC%89%E5%A4%84%E6%9F%A5%E7%9C%8B%E5%AE%8C%E6%95%B4%E5%AE%9E%E7%8E%B0%E3%80%82</a></p>

<p>页面包含以下状态：</p>

<ol>
<li>问题</li>
<li>选项列表</li>
<li>问题计数</li>
<li>选择指示器</li>
<li>启用/禁用按钮</li>
</ol>


<p>此外，页面还提供以下用户操作的输入：</p>

<ol>
<li>获取下一个问题</li>
<li>获取上一个问题</li>
<li>选择一个选项</li>
<li>关闭/结束操作。这些操作用于将用户的意图传达给应用程序。</li>
</ol>


<p>保存页面状态的模型可以这样实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">data</span> <span class="k">class</span> <span class="nc">UiState</span><span class="p">(</span>
</span><span class='line'>  <span class="k">val</span> <span class="py">questionCount</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span>
</span><span class='line'>  <span class="k">val</span> <span class="py">totalQuestion</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span>
</span><span class='line'>  <span class="k">val</span> <span class="py">question</span><span class="p">:</span> <span class="n">Question</span><span class="p">,</span>
</span><span class='line'>  <span class="k">val</span> <span class="py">userSelection</span><span class="p">:</span> <span class="n">Option</span><span class="p">?</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="py">hasNext</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="n">questionCount</span> <span class="p">&lt;</span> <span class="n">totalQuestion</span>
</span><span class='line'>  <span class="k">val</span> <span class="py">hasPrevious</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="n">questionCount</span> <span class="p">&gt;</span> <span class="m">1</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如前所述，为了简单起见，我们使用公共函数来描述意图，这些函数没有返回值。我们在下面列举了将在 ViewModel 中实现的函数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">fun</span> <span class="nf">next</span><span class="p">()</span> <span class="c1">// 加载下一个问题</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">previous</span><span class="p">()</span> <span class="c1">// 加载上一个问题</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">onOptionSelected</span><span class="p">(</span><span class="n">selection</span><span class="p">:</span> <span class="n">Option</span><span class="p">)</span> <span class="c1">// 激活选中选项的标识</span>
</span></code></pre></td></tr></table></div></figure>


<p>在视图中调用的每个函数都会触发一个新的状态以供视图使用，这样我们的页面就是可预测和可测试的，因为每个用户交互都会产生一个新的不可变状态，可以在测试期间进行比较。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">QuestionScreen</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="n">onDone</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">BackHandler</span> <span class="p">{</span> <span class="cm">/* Do nothing */</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">viewModel</span> <span class="p">=</span> <span class="n">QuestionViewModel</span><span class="p">(</span><span class="n">getQuestions</span><span class="p">())</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">uiState</span> <span class="k">by</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">uiState</span><span class="p">.</span><span class="n">collectAsStateWithLifecycle</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">QuestionScreenContent</span><span class="p">(</span>
</span><span class='line'>        <span class="n">uiState</span> <span class="p">=</span> <span class="n">uiState</span><span class="p">,</span>
</span><span class='line'>        <span class="n">onClickNext</span> <span class="p">=</span> <span class="n">viewModel</span><span class="o">::</span><span class="n">next</span><span class="p">,</span>
</span><span class='line'>        <span class="n">onClickPrevious</span> <span class="p">=</span> <span class="n">viewModel</span><span class="o">::</span><span class="n">previous</span><span class="p">,</span>
</span><span class='line'>        <span class="n">onOptionSelected</span> <span class="p">=</span> <span class="n">viewModel</span><span class="o">::</span><span class="n">onOptionSelected</span><span class="p">,</span>
</span><span class='line'>        <span class="n">onDone</span> <span class="p">=</span> <span class="n">onDone</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意：并非所有带有状态的页面组件都能用 MVI 管理。有些组件由单独的状态持有类管理，有些则由可组合组件本身的内部状态管理——例如上图中的进度指示器。不真正处理业务逻辑的状态不应该使用 MVI 管理。</p>

<h2>超越基本响应式</h2>

<p>上述案例研究基于我们的页面需求，使用了一个模型的简单实现。编写 MVI 模式的模型实现有很多方法——根据页面需求进行实现——例如，一个包含加载和错误状态的页面。通常，最简单的方法是使用密封的类层次结构来实现——尽管如此，你也可以选择以不同的方式实现你自己的模型。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// 考虑加载和错误状态的模型</span>
</span><span class='line'><span class="k">internal</span> <span class="n">sealed</span> <span class="k">class</span> <span class="nc">UiState</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">object</span> <span class="nc">Loading</span> <span class="p">:</span> <span class="n">UiState</span><span class="p">()</span>
</span><span class='line'>    <span class="n">@Immutable</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Content</span><span class="p">(</span><span class="k">val</span> <span class="py">myModel</span><span class="p">:</span> <span class="n">UiModel</span><span class="p">)</span> <span class="p">:</span> <span class="n">UiState</span><span class="p">()</span>
</span><span class='line'>    <span class="n">@Immutable</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Error</span><span class="p">(</span><span class="k">val</span> <span class="py">error</span><span class="p">:</span> <span class="n">ErrorUiModel</span><span class="p">):</span> <span class="n">UiState</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>视图使用这种新类型的方式略有不同，如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'> <span class="n">@Composable</span>
</span><span class='line'> <span class="k">fun</span> <span class="nf">MyScreenContent</span><span class="p">(</span><span class="n">uiState</span><span class="p">:</span> <span class="n">UiState</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">when</span><span class="p">(</span><span class="n">uiState</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">is</span> <span class="n">Loading</span> <span class="p">-&gt;</span> <span class="n">LoadingScreen</span><span class="p">()</span>
</span><span class='line'>      <span class="k">is</span> <span class="n">Error</span> <span class="p">-&gt;</span> <span class="n">ErrorScreen</span><span class="p">(</span><span class="n">uiState</span><span class="p">.</span><span class="n">error</span><span class="p">)</span>
</span><span class='line'>      <span class="k">is</span> <span class="n">Content</span> <span class="p">-&gt;</span> <span class="n">ContentScreen</span><span class="p">(</span><span class="n">uiState</span><span class="p">.</span><span class="n">myModel</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">LoadingScreen</span><span class="p">()</span> <span class="p">{</span> <span class="cm">/* implementation block */</span> <span class="p">}</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">ErrorScreen</span><span class="p">(</span><span class="n">error</span><span class="p">:</span> <span class="n">ErrorUiModel</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* implementation block */</span> <span class="p">}</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">ContentScreen</span><span class="p">(</span><span class="n">content</span><span class="p">:</span> <span class="n">UiModel</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* implementation block */</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要注意的是，这种模型是互斥的——它保证三个状态不会同时发生，而是一次发生一个，这有助于防止 UI 状态渲染中常见的错误。</p>

<h3>重写 Intent 实现</h3>

<p>Intent 实现也可以通过添加 Reducer/Handler 来修改，Reducer/Handler 是 ViewModel 中的一个公共函数，它会调用私有实现（辅助函数）来执行操作，并使用 when 表达式分支到相应的操作。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">Class</span> <span class="n">HomeScreenViewModel</span><span class="p">()</span> <span class="p">:</span> <span class="n">ViewModel</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Some class properties</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// our reducer/handler</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">onHomeAction</span><span class="p">(</span><span class="n">action</span><span class="p">:</span> <span class="n">HomeAction</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">when</span> <span class="p">(</span><span class="n">action</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">is</span> <span class="n">HomeAction</span><span class="p">.</span><span class="n">CategorySelected</span> <span class="p">-&gt;</span> <span class="n">onCategorySelected</span><span class="p">(</span><span class="n">action</span><span class="p">.</span><span class="n">category</span><span class="p">)</span>
</span><span class='line'>            <span class="k">is</span> <span class="n">HomeAction</span><span class="p">.</span><span class="n">TopicFollowed</span> <span class="p">-&gt;</span> <span class="n">onTopicFollowed</span><span class="p">(</span><span class="n">action</span><span class="p">.</span><span class="n">topic</span><span class="p">)</span>
</span><span class='line'>            <span class="k">is</span> <span class="n">HomeAction</span><span class="p">.</span><span class="n">HomeCategorySelected</span> <span class="p">-&gt;</span> <span class="n">onHomeCategorySelected</span><span class="p">(</span><span class="n">action</span><span class="p">.</span><span class="n">category</span><span class="p">)</span>
</span><span class='line'>            <span class="k">is</span> <span class="n">HomeAction</span><span class="p">.</span><span class="n">ToggleTopicFollowed</span> <span class="p">-&gt;</span> <span class="n">onToggleTopicFollowed</span><span class="p">(</span><span class="n">action</span><span class="p">.</span><span class="n">topic</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>    <span class="k">private</span> <span class="k">fun</span> <span class="nf">onCategorySelected</span><span class="p">(</span><span class="n">category</span><span class="p">:</span> <span class="n">CategoryInfo</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">fun</span> <span class="nf">onTopicFollowed</span><span class="p">(</span><span class="n">topic</span><span class="p">:</span> <span class="n">TopicInfo</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">fun</span> <span class="nf">onToggleTopicFollowed</span><span class="p">(</span><span class="n">topic</span><span class="p">:</span> <span class="n">TopicInfo</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">fun</span> <span class="nf">onHomeCategorySelected</span><span class="p">(</span><span class="n">category</span><span class="p">:</span> <span class="n">HomeCategory</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>为了使此设置正常工作，我们定义了一个密封的接口层次结构，对应于每个操作，其子类属性用于保存参数，然后这些参数将通过视图中的 reducer/handler 传递给这些操作。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Immutable</span>
</span><span class='line'><span class="n">sealed</span> <span class="n">interface</span> <span class="n">HomeAction</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">CategorySelected</span><span class="p">(</span><span class="k">val</span> <span class="py">category</span><span class="p">:</span> <span class="n">CategoryInfo</span><span class="p">)</span> <span class="p">:</span> <span class="n">HomeAction</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">HomeCategorySelected</span><span class="p">(</span><span class="k">val</span> <span class="py">category</span><span class="p">:</span> <span class="n">HomeCategory</span><span class="p">)</span> <span class="p">:</span> <span class="n">HomeAction</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">TopicFollowed</span><span class="p">(</span><span class="k">val</span> <span class="py">topic</span><span class="p">:</span> <span class="n">TopicInfo</span><span class="p">)</span> <span class="p">:</span> <span class="n">HomeAction</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">ToggleTopicFollowed</span><span class="p">(</span><span class="k">val</span> <span class="py">topic</span><span class="p">:</span> <span class="n">TopicInfo</span><span class="p">)</span> <span class="p">:</span> <span class="n">HomeAction</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>与我们第一次实现 Intent 时需要在视图中使用方法引用传递所有操作不同，这里我们只需要传递 Reducer/Handler。然后，决定需要调用哪个操作的责任就落在了调用者身上。</p>

<p>这是视图中的样子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">HomeScreen</span><span class="p">(</span><span class="n">viewModel</span><span class="p">:</span> <span class="n">HomeScreenViewModel</span><span class="p">,</span> <span class="n">onNavigate</span><span class="p">:</span> <span class="p">(</span><span class="n">String</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">HomeContent</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="n">contentPadding</span><span class="p">),</span>
</span><span class='line'>        <span class="n">onHomeAction</span> <span class="p">=</span> <span class="n">viewModel</span><span class="o">::</span><span class="n">onHomeAction</span><span class="p">,</span>
</span><span class='line'>        <span class="n">onNavigate</span> <span class="p">=</span> <span class="n">onNavigate</span><span class="p">,</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>HomeContent 可组合函数现在负责决定调用哪个操作，方法是实例化以下任意对象，然后使用实例化的对象调用 onHomeAction</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">HomeAction</span><span class="p">.</span><span class="n">CategorySelected</span><span class="p">(</span><span class="n">category</span> <span class="p">=</span> <span class="n">CategoryInfo</span><span class="p">())</span>
</span><span class='line'><span class="n">HomeAction</span><span class="p">.</span><span class="n">HomeCategorySelected</span><span class="p">(</span><span class="n">category</span> <span class="p">=</span> <span class="n">HomeCategory</span><span class="p">())</span>
</span><span class='line'><span class="n">HomeAction</span><span class="p">.</span><span class="n">TopicFollowed</span><span class="p">(</span><span class="n">topic</span> <span class="p">=</span> <span class="n">TopicInfo</span><span class="p">())</span>
</span><span class='line'><span class="n">HomeAction</span><span class="p">.</span><span class="n">ToggleTopicFollowed</span><span class="p">(</span><span class="n">topic</span> <span class="p">=</span> <span class="n">TopicInfo</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<p>请参阅下面的实际操作！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">HomeContent</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="n">onHomeAction</span><span class="p">:</span> <span class="p">(</span><span class="n">HomeAction</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span> <span class="c1">// HomeAction是一个密封类型层次</span>
</span><span class='line'>    <span class="n">onNavigate</span><span class="p">:</span> <span class="p">(</span><span class="n">String</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="py">homeCategory</span> <span class="p">=</span> <span class="n">HomeAction</span><span class="p">.</span><span class="n">HomeCategorySelected</span><span class="p">(</span><span class="n">CategoryInfo</span><span class="p">())</span>
</span><span class='line'>  <span class="n">onHomeAction</span><span class="p">(</span><span class="n">homeCategory</span><span class="p">)</span> <span class="c1">// triggers a state change</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>即使增加了复杂度，核心的响应式原则依然保持不变。Reducer 只是提供了一种更有条理的方式来处理意图并生成新的状态，而从状态到 UI 的响应式流程保持不变。</p>

<p>这种实现方式使得迭代构建变得简单——无论我们需要对意图进行什么更改（无论是添加新的意图还是删除现有的意图），都不需要像我们最初的实现那样在很多地方进行重写；我们只需在处理程序中注册新的操作，然后在调用处理程序时根据具体情况实例化不同的对象即可。</p>

<p>总结一下这篇文章，MVI 最优雅的方面在于它如何创建一个完整的响应式链路：</p>

<ol>
<li>模型发出状态</li>
<li>视图使用状态并渲染 UI</li>
<li>用户与视图的交互生成意图</li>
<li>意图被处理以创建新的模型</li>
<li>这个循环以响应式的方式持续进行</li>
</ol>


<p>这种不间断的响应式循环确保你的应用程序始终与用户操作和后端数据保持同步。这不仅仅是响应变化——而是创建一个系统，让变化自然地通过预定义的响应式路径进行。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用用例（Use Case）以让Android代码更简洁]]></title>
    <link href="https://alexhilton.github.io/blog/2025/06/16/making-android-code-cleaner-with-use-cases/"/>
    <updated>2025-06-16T22:20:33+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/06/16/making-android-code-cleaner-with-use-cases</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自「Making Android Code Cleaner with Use Cases: A Practical Approach Using Kotlin Coroutines」，原文链接<a href="https://proandroiddev.com/making-android-code-cleaner-with-use-cases-a-practical-approach-using-kotlin-coroutines-2700e724c4fd">https://proandroiddev.com/making-android-code-cleaner-with-use-cases-a-practical-approach-using-kotlin-coroutines-2700e724c4fd</a>，由Siarhei Krupenich发布于2025年4月11日。</p></blockquote>

<p><a href="https://alexhilton.github.io/blog/2025/06/16/making-android-code-cleaner-with-use-cases/"><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/0*eVj9Vuqq31RUWd2y" title="auto auto" ></a></p>

<!-- more -->


<h2>介绍</h2>

<p>之前，我们开发了一个 Android 应用，重点关注了整洁架构 (Clean Architecture)、输入/输出 MVVM 拆分和 Repository 模式。这种方法遵循了 Google Android 团队推荐的最佳实践，使代码库具有可扩展性、可维护性和可测试性。</p>

<p>在本文中，我们将深入探讨另一个重要概念——用例 (Use Case)，并向你介绍它的用法及其背后的背景。采用这种模式将使你的代码更具可读性和可测试性——这是一个巨大的优势。</p>

<h3>使用Interactors带来的问题</h3>

<p>过去，我们经常使用 Interactors 作为层与层之间的中间件组件——例如，Presenter 可以使用 Interactors 与领域层（Domain layer）进行通信。这使我们能够将一些逻辑从 Presenter 中移出，并放入单独的可复用组件中。在当时，这是一种可靠的逻辑拆分解决方案，能够保持代码简洁。</p>

<p>我们来看一个简单的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// Interactor</span>
</span><span class='line'><span class="k">class</span> <span class="nc">UserInteractor</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">var</span> <span class="py">username</span><span class="p">:</span> <span class="n">String</span> <span class="p">=</span> <span class="s">&quot;Guest&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">getUsername</span><span class="p">():</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">username</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">saveUsername</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">username</span> <span class="p">=</span> <span class="n">name</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Presenter</span>
</span><span class='line'><span class="k">class</span> <span class="nc">UserPresenter</span><span class="p">(</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">view</span><span class="p">:</span> <span class="n">UserView</span><span class="p">,</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">interactor</span><span class="p">:</span> <span class="n">UserInteractor</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">loadUsername</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">name</span> <span class="p">=</span> <span class="n">interactor</span><span class="p">.</span><span class="n">getUsername</span><span class="p">()</span>
</span><span class='line'>        <span class="n">view</span><span class="p">.</span><span class="n">showUsername</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">updateUsername</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">interactor</span><span class="p">.</span><span class="n">saveUsername</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>        <span class="n">view</span><span class="p">.</span><span class="n">showSavedMessage</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>随着 Presenter 的增长，逻辑的复杂性也会随之增加——这通常会导致 Interactor 中方法数量的增加。Presenter 越大，Interactor 也就越庞大。最终，我们会得到一坨塞满状态、方法和变量的屎堆，它们都堆挤在一个地方。</p>

<p>显然，这样的代码库维护起来很困难，测试起来也很困难，甚至更难用合适的单元测试来覆盖。最重要的是，这种架构会陷入反模式的境地，违反 <strong>SOLID（尤其是单一职责原则）</strong> 和 <strong>KISS</strong> 等核心原则。</p>

<p>这就是为什么我要强调使用 Interactor 方法时容易遇到的以下坑：</p>

<ul>
<li>一处塞太多东西</li>
</ul>


<p>当一个类处理所有操作——读取、写入、删除——它最终会做太多事情。这会导致测试更加困难，并且很难在不破坏其他功能的情况下进行更改。</p>

<ul>
<li>功能不明确</li>
</ul>


<p>像 LoginUser() 这样的用例会清楚地告诉你发生了什么。但是，如果交互器（interactor）很大，就很难区分它的作用——它是关于用户的、设置的还是其他什么的？</p>

<ul>
<li>无法复用</li>
</ul>


<p>只完成一项工作的用例很容易插入到任何需要的地方。交互器会随着时间的推移而增长，变得过于混乱，无法复用。</p>

<ul>
<li>扩展性差</li>
</ul>


<p>想象一下，有 10 个功能，每个功能都有自己的交互器，并且包含 5 个以上的方法。这需要记住很多东西，也需要管理很多代码。</p>

<ul>
<li>逻辑混乱</li>
</ul>


<p>当所有内容都放在一个文件中时，很容易意外地将不该放在一起的内容放在一起——例如，登录逻辑与个人资料更新逻辑就会混杂在一起。</p>

<h2>用例（Use Case）：从 UML 到 Android</h2>

<p>我们刚才讨论的所有问题都可以通过使用用例（Use Case）方法完全解决或至少部分解决。但在深入探讨在Android上的实现之前，让我们先快速了解一下用例在 UML 术语中的含义。在 UML 中，用例是关于一个明确的意图——它代表一个特定的业务逻辑或功能。</p>

<p>查看下面的示例，了解它通常是如何可视化的：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/0*CK9zG_B9spS8JQ8-" alt="Use Case" /></p>

<p>基本上，我们即将实现的用例遵循与 UML 相同的理念：一个意图，一个用例（One Intent, one Use Case）。这个简单的规则帮助我们解决了之前的所有问题——测试变得更简单，代码更具可扩展性，整体也更易于维护。</p>

<p>现在，让我们使用用例方法改进上面的代码片段：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// Use-Case 1</span>
</span><span class='line'><span class="k">class</span> <span class="nc">GetUserNameUseCase</span><span class="p">(</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">repository</span><span class="p">:</span> <span class="n">UserRepository</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">operator</span> <span class="k">fun</span> <span class="nf">invoke</span><span class="p">():</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">repository</span><span class="p">.</span><span class="n">getUserName</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Use-Case 2</span>
</span><span class='line'><span class="k">class</span> <span class="nc">SaveUsernameUseCase</span><span class="p">(</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">repository</span><span class="p">:</span> <span class="n">UserRepository</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">operator</span> <span class="k">fun</span> <span class="nf">invoke</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">repository</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>因此，我们刚刚将 Interactor 拆分成了两个用例。我建议使用 Invoke 操作函数，这样我们就可以将它们的用例名称视为函数。此外，这种方式测试起来也更加容易。</p>

<p>以下 ViewModel 演示了用例的用法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// ViewModel</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ViewModel</span><span class="p">(</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">getUsername</span><span class="p">:</span> <span class="n">GetUserNameUseCase</span><span class="p">,</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">saveUsername</span><span class="p">:</span> <span class="n">SaveUsernameUseCase</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">userName</span><span class="p">:</span> <span class="n">StateFlow</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">loadUsername</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">userName</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">getUsername</span><span class="p">())</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">updateUsername</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">saveUsername</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>简单的测试可以写如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Before</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">useCase</span> <span class="p">=</span> <span class="n">GetUserNameUseCase</span><span class="p">(</span><span class="n">repository</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Test</span>
</span><span class='line'><span class="k">fun</span> <span class="err">`</span><span class="nf">should</span> <span class="k">return</span> <span class="n">username</span> <span class="n">from</span> <span class="n">repository</span><span class="err">`</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>     <span class="n">`when`</span><span class="p">(</span><span class="n">repository</span><span class="p">.</span><span class="n">getUserName</span><span class="p">()).</span><span class="n">thenReturn</span><span class="p">(</span><span class="s">&quot;JohnDoe&quot;</span><span class="p">)</span>
</span><span class='line'>     <span class="k">val</span> <span class="py">result</span> <span class="p">=</span> <span class="n">useCase</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>     <span class="n">assertEquals</span><span class="p">(</span><span class="s">&quot;JohnDoe&quot;</span><span class="p">,</span> <span class="n">result</span><span class="p">)</span>
</span><span class='line'>     <span class="n">verify</span><span class="p">(</span><span class="n">repository</span><span class="p">).</span><span class="n">getUserName</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Test</span>
</span><span class='line'><span class="k">fun</span> <span class="err">`</span><span class="nf">should</span> <span class="n">save</span> <span class="n">username</span> <span class="n">to</span> <span class="n">repository</span><span class="err">`</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">testName</span> <span class="p">=</span> <span class="s">&quot;JaneDoe&quot;</span>
</span><span class='line'>    <span class="n">useCase</span><span class="p">(</span><span class="n">testName</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">verify</span><span class="p">(</span><span class="n">repository</span><span class="p">).</span><span class="n">save</span><span class="p">(</span><span class="n">testName</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>如何将其纳入真正的 Repos 应用程序</h2>

<p>我的建议是始终从抽象开始。鉴于用例的性质（通常只有一个公共方法），我建议使用运算符函数（例如，invoke 在这里就很有效）。可以实现以下抽象：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// 模板接口作为所有用例的抽象</span>
</span><span class='line'><span class="n">interface</span> <span class="n">SuspendUseCase</span><span class="p">&lt;</span><span class="k">in</span> <span class="n">T</span><span class="p">,</span> <span class="k">out</span> <span class="n">O</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">suspend</span> <span class="n">operator</span> <span class="k">fun</span> <span class="nf">invoke</span><span class="p">(</span><span class="n">param</span><span class="p">:</span> <span class="n">T</span><span class="p">):</span> <span class="n">O</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>它的名称带有前缀Suspend（译注：这里应该是前缀，原文有错误），表示它处理暂停的结果。这种通用方法允许我们为参数和返回类型定义特定的类型。例如，以下特定的用例接口可以进一步使用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// 特定的用例接口</span>
</span><span class='line'><span class="n">interface</span> <span class="n">GetReposUseCase</span><span class="p">:</span> <span class="n">SuspendUseCase</span><span class="p">&lt;</span><span class="n">Boolean</span><span class="p">,</span> <span class="n">ResultWithFallback</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">DomainRepoEntity</span><span class="p">&gt;&gt;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>根据其名称，它可以用于获取 Repos，并抛出其 Result 包装器。客户端可以以函数式的方式使用它（例如，val repos = getRepos(&hellip;)）。它的实现如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// GetReposUseCase 的简单实现</span>
</span><span class='line'><span class="k">internal</span> <span class="k">class</span> <span class="nc">GetReposUseCaseImpl</span><span class="p">(</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">mapper</span><span class="p">:</span> <span class="n">Mapper</span><span class="p">,</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">repository</span><span class="p">:</span> <span class="n">ReposRepository</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">GetReposUseCase</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="n">suspend</span> <span class="n">operator</span> <span class="k">fun</span> <span class="nf">invoke</span><span class="p">(</span><span class="n">param</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">):</span>
</span><span class='line'>      <span class="n">ResultWithFallback</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">DomainRepoEntity</span><span class="p">&gt;&gt;</span> <span class="p">=</span>
</span><span class='line'>          <span class="n">repository</span><span class="p">.</span><span class="n">getRepos</span><span class="p">(</span><span class="n">param</span><span class="p">).</span><span class="n">map</span><span class="p">(</span><span class="n">mapper</span><span class="o">::</span><span class="n">map</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在，让我们让任务更具挑战性，并在用例结构中添加一个额外的抽象层。我想要实现仅与存储库交互的用例。这些用例将包含存储库的实例作为泛型中的附加参数类型。让我们看一下以下代码片段：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// 模板接口作为所有用例的抽象</span>
</span><span class='line'><span class="n">interface</span> <span class="n">SuspendUseCase</span><span class="p">&lt;</span><span class="k">in</span> <span class="n">T</span><span class="p">,</span> <span class="k">out</span> <span class="n">O</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">execute</span><span class="p">(</span><span class="n">param</span><span class="p">:</span> <span class="n">T</span><span class="p">):</span> <span class="n">O</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我修改了execute方法，使其能够从另一个抽象子类中调用。以下是更新后的代码片段：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// 扩展 SuspendUseCase 接口</span>
</span><span class='line'><span class="n">interface</span> <span class="n">RepositoryUseCase</span><span class="p">&lt;</span><span class="k">in</span> <span class="n">I</span><span class="p">,</span> <span class="k">out</span> <span class="n">O</span><span class="p">,</span> <span class="n">R</span> <span class="p">:</span> <span class="n">Repository</span><span class="p">&gt;</span> <span class="p">:</span>
</span><span class='line'>    <span class="n">SuspendUseCase</span><span class="p">&lt;</span><span class="n">I</span><span class="p">,</span> <span class="n">O</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="py">repository</span><span class="p">:</span> <span class="n">R</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>每个实现类型R的存储库的子类都将遵守该接口（Contract）。最合适的方法是使用抽象类。让我们实现一个抽象类来实现这一点：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// 确保遵守接口的抽象类</span>
</span><span class='line'><span class="k">abstract</span> <span class="k">class</span> <span class="nc">BaseRepositoryUseCase</span><span class="p">&lt;</span><span class="k">in</span> <span class="n">I</span><span class="p">,</span> <span class="k">out</span> <span class="n">O</span><span class="p">,</span> <span class="n">R</span> <span class="p">:</span> <span class="n">Repository</span><span class="p">&gt;(</span><span class="k">override</span> <span class="k">var</span> <span class="py">repository</span><span class="p">:</span> <span class="n">R</span><span class="p">)</span> <span class="p">:</span>
</span><span class='line'>    <span class="n">RepositoryUseCase</span><span class="p">&lt;</span><span class="n">I</span><span class="p">,</span> <span class="n">O</span><span class="p">,</span> <span class="n">R</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">suspend</span> <span class="n">operator</span> <span class="k">fun</span> <span class="nf">invoke</span><span class="p">(</span><span class="n">params</span><span class="p">:</span> <span class="n">I</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span><span class="p">):</span> <span class="n">O</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 这是对 SuspendUseCase 接口的调用</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">execute</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们需要做的就是扩展 BaseRepositoryUseCase ，遵循其泛型接口，提供一个输入类、一个输出类以及一个被覆写的Repo实例。以下实现已经足够：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// 用例的实现</span>
</span><span class='line'><span class="k">class</span> <span class="nc">GetReposUseCase</span><span class="p">(</span><span class="n">repository</span><span class="p">:</span> <span class="n">RepoRepository</span><span class="p">):</span>
</span><span class='line'>    <span class="n">BaseRepositoryUseCase</span><span class="p">&lt;</span><span class="n">Boolean</span><span class="p">,</span><span class="n">ResultWithFallback</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">DomainRepoEntity</span><span class="p">&gt;&gt;,</span> <span class="n">RepoRepository</span><span class="p">&gt;(</span><span class="n">repository</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">execute</span><span class="p">(</span><span class="n">param</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">):</span> <span class="n">ResultWithFallback</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">DomainRepoEntity</span><span class="p">&gt;&gt;</span> <span class="p">=</span>
</span><span class='line'>        <span class="c1">// 使用存储库获取并返回结果，如 repository.getData()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>结论</h2>

<p>因此，我们探索了从零开始使用用例（Use Case）、捕捉客户意图（Client Intent）的最佳方法。我演示了如何以功能性的方式实现和使用它们，使其易于测试和集成。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Android应用中实战Repository模式]]></title>
    <link href="https://alexhilton.github.io/blog/2025/06/13/incoporating-the-repository/"/>
    <updated>2025-06-13T22:57:11+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/06/13/incoporating-the-repository</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自「Incorporating the Repository Pattern into a Real-World Android」，原文链接<a href="https://medium.com/@siarhei.krupenich/incorporating-the-repository-pattern-into-a-real-world-android-app-739f2fee1460">https://medium.com/@siarhei.krupenich/incorporating-the-repository-pattern-into-a-real-world-android-app-739f2fee1460</a>，由Siarhei Krupenich发布于2025年4月4日。</p></blockquote>

<p><a href="https://alexhilton.github.io/blog/2025/06/13/incoporating-the-repository/"><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*qkmRcr1xl7uFYPUfNyk2rw.png" title="auto auto" ></a></p>

<!-- more -->


<h2>引言</h2>

<p>之前，我们探讨了整洁架构 (Clean Architecture) 中可能存在的问题，这些问题可能会损害 SOLID 原则、增加紧密耦合或使可测试性复杂化。我介绍了一种解决这些问题的解决方案，帮助我们维护更可扩展的代码库并更高效地添加新功能。在上一篇文章中，我还演示了如何将 ViewModel 拆分为两个主要部分——输入流和输出流——以减少紧密耦合并提高 ViewModel 的灵活性。</p>

<p>本文延续了这一思路，通过构建一个示例应用来展示 Android 开发的最佳实践，该应用通过 API 请求获取并显示 Git 仓库列表。我们的目标是将离线模式融入到项目中。实现这一目标最合适的方法是实现 Repository 模式。Repository 模式充当 Facade（如 GoF 设计模式中所述），在网络 API 和本地存储之间进行协调，确保高效的数据访问。</p>

<p>为了充分理解本文中的概念，建议你熟悉协程或 RxJava，尽管这些主题超出了本文的讨论范围。</p>

<h2>存储库方法：离线模式的最佳解决方案</h2>

<p>我们的目标是在应用中实现离线模式，确保即使在没有互联网连接的情况下也能访问数据。应用首次运行时，它会从网络获取数据，将其存储在缓存中，然后使用缓存的数据来最大限度地减少网络使用量并降低流量。</p>

<p>另一个关键方面是提供在需要时手动刷新网络数据的功能。最后，为了帮助用户在连接问题后识别应用何时恢复互联网连接，我们会在缓存数据旁边显示一条错误消息，直到连接恢复。</p>

<p>现在任务已经明确，让我们深入探讨即用型解决方案背后的理论。其核心是，我们需要解决经典的数据同步问题——从网络获取数据，将其存储在本地，并确保访问最新信息。</p>

<p>这意味着我们的应用至少需要两个数据源：一个用于网络 API 通信，另一个用于本地存储访问。根据应用的需求，可能会用到其他数据源，例如 Firebase（内置同步功能）、BLE 数据等等。</p>

<p>为了协调这些数据源（在我们的例子中是网络 API 和本地存储），最直观的设计模式是四人帮 (GoF) 的 Facade 模式。</p>

<p>Facade 模式是一种通过提供统一接口来简化与复杂系统交互的设计模式。在我们的例子中，这意味着我们可以将网络 API 和本地存储封装在一个抽象层之后。</p>

<p>我们新创建的 Facade 将同时保存 API 网络接口和本地存储接口的实例。另一方面，它将公开单一的访问方法，处理诸如强制从网络更新数据、本地存储数据以及管理错误等任务，同时隐藏内部复杂性。</p>

<p>我们来看看下面的图表：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1070/format:webp/0*FF1TQeYdw1F60rOZ" alt="图 1：外观模式" /></p>

<p>该图呈现了一种简单的逻辑：客户端仅与Facade 实例交互以访问数据，而所有底层复杂性都隐藏在其背后。这种方法完全符合我们的需求。</p>

<p>现在，让我们看一下代表该图的以下伪代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// API Network</span>
</span><span class='line'><span class="n">interface</span> <span class="n">Network</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">obtainData</span><span class="p">():</span> <span class="n">Data</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Local Storage</span>
</span><span class='line'><span class="n">interface</span> <span class="n">Storage</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">save</span><span class="p">(</span><span class="n">data</span><span class="p">:</span> <span class="n">Data</span><span class="p">)</span>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">getData</span><span class="p">():</span> <span class="n">Data</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Facade</span>
</span><span class='line'><span class="k">class</span> <span class="nc">DataFacade</span><span class="p">(</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">network</span><span class="p">:</span> <span class="n">Network</span><span class="p">,</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">storage</span><span class="p">:</span> <span class="n">Storage</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">obtainData</span><span class="p">():</span> <span class="n">Data</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">data</span> <span class="p">=</span> <span class="n">network</span><span class="p">.</span><span class="n">obtainData</span><span class="p">()</span>
</span><span class='line'>        <span class="n">storage</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">storage</span><span class="p">.</span><span class="n">getData</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Client</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Client</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>        <span class="n">testScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">data</span> <span class="p">=</span> <span class="n">facade</span><span class="p">.</span><span class="n">obtainData</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个简单的例子演示了这种方法：客户端持有一个 DataFacade 实例，并调用其obtainData() 方法。当然，在实际场景中，obtainData() 方法会包含更复杂的逻辑——处理错误、映射数据、将结果包装到 Result 类中，以及决定是获取新数据还是使用缓存版本。</p>

<p>现在，让我们更进一步，将这个 Facade 转换为 Repository 类。
Repository 模式旨在通过清晰的接口管理数据访问，同时隐藏底层的复杂性。从客户端的角度来看，
没有任何变化——用法保持不变——但在内部，逻辑结构良好且封装完整。</p>

<p>现在，让我们通过下图来查看 Repository 模式的结构：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1070/format:webp/0*_A5f_Tv_9UhUuFqz" alt="图 2：存储库模式" /></p>

<p>上图表明，Repository 模式有效地捕捉了 Facade 模式；然而，“Repository”一词更能体现访问数据的逻辑，
因此我们将使用“Repository”版本。</p>

<p>现在，让我们实现该模式的增强版本：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// Repository Interface</span>
</span><span class='line'><span class="n">interface</span> <span class="n">DataRepository</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">obtainData</span><span class="p">():</span> <span class="n">Data</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Repository</span>
</span><span class='line'><span class="k">class</span> <span class="nc">DataRepositoryImpl</span><span class="p">(</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">network</span><span class="p">:</span> <span class="n">Network</span><span class="p">,</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">storage</span><span class="p">:</span> <span class="n">Storage</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">DataRepository</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">obtainData</span><span class="p">():</span> <span class="n">Data</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">data</span> <span class="p">=</span> <span class="n">network</span><span class="p">.</span><span class="n">obtainData</span><span class="p">()</span>
</span><span class='line'>        <span class="n">storage</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">storage</span><span class="p">.</span><span class="n">getData</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Client</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Client</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">testScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">data</span> <span class="p">=</span> <span class="n">repository</span><span class="p">.</span><span class="n">obtainData</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>存储库模式：优势与劣势</h2>

<h3>存储库的优势</h3>

<ol>
<li>保持井然有序——你的业务逻辑无需处理数据库查询。</li>
<li>易于测试——你可以将真实数据库与模拟数据库交换以进行测试。</li>
<li>面向未来——如果你从 SQLite 切换到 Firebase，只需更新存储库即可。</li>
<li>可重用——应用程序的不同部分可以使用相同的存储库，而无需编写重复的代码。</li>
<li>代码更简洁——它隐藏了复杂的查询，因此其余代码保持简洁。</li>
</ol>


<h3>为什么它可能很繁琐</h3>

<ol>
<li>增加额外代码——如果你的应用程序很小，使用存储库可能会有些过度。</li>
<li>可能会降低速度——更多的层级意味着更多的对象和方法调用。</li>
<li>缓存不是自动的——如果你想避免不必要的数据库调用，则需要付出额外的努力。</li>
<li>可能过于依赖数据模型——如果设计不当，更改数据库结构可能会很麻烦。</li>
<li>并非总是必要——有时，仅使用 DAO 就足够了。</li>
</ol>


<p>Repository 模式非常适合保持简洁性和可扩展性，但它并非总是最简单的选择。如果你的应用规模较小，跳过它可能会更轻松。然而，我们的重点是为快速增长且可扩展的应用提供解决方案，因此我们选择了它。</p>

<p>现在，是时候编写代码并增强 Repo 应用了。</p>

<p>首先，让我们改进 Repository 结构并使其适应应用。由于没有太多细节需要整合，因此最终的图表与之前的版本非常相似：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1144/format:webp/0*aH3Jd9RK9EI0AA9I" alt="图3：获取Repos的Repository实现" /></p>

<h2>开撸</h2>

<p>接下来，让我们实现 Repository 并将其集成到应用程序中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// The Repository pattern implementation</span>
</span><span class='line'><span class="k">internal</span> <span class="k">class</span> <span class="nc">ReposRepositoryImpl</span> <span class="n">@Inject</span> <span class="n">constructor</span><span class="p">(</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">reposNetworkApi</span><span class="p">:</span> <span class="n">ReposNetworkApi</span><span class="p">,</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">reposDao</span><span class="p">:</span> <span class="n">ReposDao</span><span class="p">,</span>
</span><span class='line'>    <span class="c1">// mappers may be placed here</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">ReposRepository</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">getRepos</span><span class="p">(</span><span class="n">i</span>
</span><span class='line'>        <span class="n">sRefreshing</span><span class="p">:</span> <span class="n">Boolean</span>
</span><span class='line'>    <span class="p">):</span> <span class="n">ResultWithFallback</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Repo</span><span class="p">&gt;&gt;</span> <span class="p">{</span>
</span><span class='line'>         <span class="k">return</span> <span class="n">runCatching</span> <span class="p">{</span>
</span><span class='line'>             <span class="k">val</span> <span class="py">dbRepos</span> <span class="p">=</span> <span class="n">reposDao</span><span class="p">.</span><span class="n">getReposWithRelations</span><span class="p">()</span>
</span><span class='line'>             <span class="k">if</span> <span class="p">(</span><span class="n">isRefreshing</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                 <span class="n">reposNetworkApi</span><span class="p">.</span><span class="n">getRepos</span><span class="p">().</span><span class="n">fold</span><span class="p">({</span> <span class="n">result</span> <span class="p">-&gt;</span>
</span><span class='line'>                     <span class="n">reposDao</span><span class="p">.</span><span class="n">insertReposWithRelations</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</span><span class='line'>                     <span class="n">ResultWithFallback</span><span class="p">.</span><span class="n">Success</span><span class="p">(</span>
</span><span class='line'>                         <span class="n">reposDao</span><span class="p">.</span><span class="n">getReposWithRelations</span><span class="p">()</span>
</span><span class='line'>                     <span class="p">)</span>
</span><span class='line'>                  <span class="p">},</span> <span class="p">{</span> <span class="n">error</span> <span class="p">-&gt;</span>
</span><span class='line'>                     <span class="n">error</span><span class="p">.</span><span class="n">errorToResultWithFallback</span><span class="p">(</span><span class="n">dbRepos</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">})</span>
</span><span class='line'>              <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                  <span class="n">ResultWithFallback</span><span class="p">.</span><span class="n">Success</span><span class="p">(</span><span class="n">dbRepos</span><span class="p">)</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}.</span><span class="n">getOrElse</span> <span class="p">{</span> <span class="n">error</span> <span class="p">-&gt;</span>
</span><span class='line'>              <span class="n">error</span><span class="p">.</span><span class="n">exceptionToResultWithFallback</span><span class="p">(</span>
</span><span class='line'>                  <span class="n">reposDao</span><span class="p">.</span><span class="n">getReposWithRelations</span><span class="p">()</span>
</span><span class='line'>              <span class="p">)</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">clearRepos</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">reposDao</span><span class="p">.</span><span class="n">clearRepos</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>该代码片段演示了如何将 Repository 模式集成到应用中。它包含两个方法：一个用于清除数据，另一个用于获取数据。getRepos(isRefreshing: Boolean) 方法包含一个标志，用于强制从网络刷新数据。同时，它也可能从缓存中返回数据（例如，Room DB 用作缓存）。如果发生错误，即使数据已缓存，该方法也会返回一个包含失败信息的响应。</p>

<p>由于我们主要关注的是协程，因此让我们使用 RxJava 重写 getRepos(isRefreshing: Boolean) 方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">override</span> <span class="k">fun</span> <span class="nf">getRepos</span><span class="p">(</span>
</span><span class='line'>    <span class="n">isRefreshing</span><span class="p">:</span> <span class="n">Boolean</span>
</span><span class='line'><span class="p">):</span> <span class="n">Single</span><span class="p">&lt;</span><span class="n">ResultWithFallback</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Repo</span><span class="p">&gt;&gt;&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">if</span> <span class="p">(</span><span class="n">isRefreshing</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">reposNetworkApi</span><span class="p">.</span><span class="n">getRepos</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">flatMap</span> <span class="p">{</span> <span class="n">result</span> <span class="p">-&gt;</span>
</span><span class='line'>                <span class="n">reposDao</span><span class="p">.</span><span class="n">insertReposWithRelations</span><span class="p">(</span><span class="n">networkReposToDbReposMapper</span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="n">result</span><span class="p">))</span>
</span><span class='line'>                <span class="n">reposDao</span><span class="p">.</span><span class="n">getReposWithRelations</span><span class="p">()</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">dbReposToReposMapper</span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">ResultWithFallback</span><span class="p">.</span><span class="n">Success</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="p">.</span><span class="n">onErrorResumeNext</span> <span class="p">{</span> <span class="n">error</span> <span class="p">-&gt;</span>
</span><span class='line'>                <span class="n">reposDao</span><span class="p">.</span><span class="n">getReposWithRelations</span><span class="p">()</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">error</span><span class="p">.</span><span class="n">errorToResultWithFallback</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">reposDao</span><span class="p">.</span><span class="n">getReposWithRelations</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">dbReposToReposMapper</span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>            <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">ResultWithFallback</span><span class="p">.</span><span class="n">Success</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>            <span class="p">.</span><span class="n">onErrorReturn</span> <span class="p">{</span> <span class="n">error</span> <span class="p">-&gt;</span>
</span><span class='line'>                <span class="n">error</span><span class="p">.</span><span class="n">exceptionToResultWithFallback</span><span class="p">(</span><span class="n">emptyList</span><span class="p">())</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>异常处理的扩展可能如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">fun</span> <span class="nf">Throwable</span><span class="p">.</span><span class="n">exceptionToResultWithFallback</span><span class="p">(</span>
</span><span class='line'>        <span class="n">data</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">RepoWithRelations</span><span class="p">&gt;,</span>
</span><span class='line'>    <span class="p">):</span> <span class="n">ResultWithFallback</span><span class="p">.</span><span class="n">Failure</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Repo</span><span class="p">&gt;&gt;</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">isNotEmpty</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">ResultWithFallback</span><span class="p">.</span><span class="n">Failure</span><span class="p">(</span>
</span><span class='line'>            <span class="n">dbReposToReposMapper</span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="n">data</span><span class="p">),</span> <span class="n">RepoError</span><span class="p">.</span><span class="n">Unknown</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">ResultWithFallback</span><span class="p">.</span><span class="n">Failure</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Repo</span><span class="p">&gt;&gt;(</span>
</span><span class='line'>            <span class="n">data</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>            <span class="n">RepoError</span><span class="p">.</span><span class="n">Unknown</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>结果错误处理扩展可以写成如下形式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">fun</span> <span class="nf">Throwable</span><span class="p">.</span><span class="n">errorToResultWithFallback</span><span class="p">(</span>
</span><span class='line'>        <span class="n">localData</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">RepoWithRelations</span><span class="p">&gt;</span>
</span><span class='line'>    <span class="p">):</span> <span class="n">ResultWithFallback</span><span class="p">.</span><span class="n">Failure</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Repo</span><span class="p">&gt;&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">repoError</span> <span class="p">=</span> <span class="k">when</span> <span class="p">(</span><span class="k">this</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">is</span> <span class="n">IOException</span> <span class="p">-&gt;</span> <span class="n">RepoError</span><span class="p">.</span><span class="n">NetworkLost</span>
</span><span class='line'>            <span class="k">is</span> <span class="n">HttpException</span> <span class="p">-&gt;</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">code</span><span class="p">()</span> <span class="p">==</span> <span class="m">401</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">RepoError</span><span class="p">.</span><span class="n">Unauthorized</span>
</span><span class='line'>                <span class="k">else</span> <span class="n">RepoError</span><span class="p">.</span><span class="n">Unknown</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span><span class='line'>            <span class="k">else</span> <span class="p">-&gt;</span> <span class="n">RepoError</span><span class="p">.</span><span class="n">Unknown</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">ResultWithFallback</span><span class="p">.</span><span class="n">Failure</span><span class="p">(</span>
</span><span class='line'>            <span class="n">dbReposToReposMapper</span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="n">localData</span><span class="p">),</span>
</span><span class='line'>            <span class="n">repoError</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>包装的故障数据类：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">sealed</span> <span class="k">class</span> <span class="nc">ResultWithFallback</span><span class="p">&lt;</span><span class="k">out</span> <span class="n">T</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">Success</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">val</span> <span class="py">data</span><span class="p">:</span> <span class="n">T</span><span class="p">)</span> <span class="p">:</span> <span class="n">ResultWithFallback</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">Failure</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">val</span> <span class="py">data</span><span class="p">:</span> <span class="n">T</span><span class="p">?,</span> <span class="k">val</span> <span class="py">error</span><span class="p">:</span> <span class="n">RepoError</span><span class="p">)</span> <span class="p">:</span> <span class="n">ResultWithFallback</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>并且转换映射扩展如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">inline</span> <span class="k">fun</span> <span class="err">&lt;</span><span class="nf">T</span><span class="p">,</span> <span class="n">R</span><span class="p">&gt;</span> <span class="n">ResultWithFallback</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;.</span><span class="n">map</span><span class="p">(</span><span class="n">transform</span><span class="p">:</span> <span class="p">(</span><span class="n">T</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">R</span><span class="p">):</span> <span class="n">ResultWithFallback</span><span class="p">&lt;</span><span class="n">R</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">when</span> <span class="p">(</span><span class="k">this</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">ResultWithFallback</span><span class="p">.</span><span class="n">Success</span> <span class="p">-&gt;</span> <span class="n">ResultWithFallback</span><span class="p">.</span><span class="n">Success</span><span class="p">(</span><span class="n">transform</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">ResultWithFallback</span><span class="p">.</span><span class="n">Failure</span> <span class="p">-&gt;</span> <span class="n">ResultWithFallback</span><span class="p">.</span><span class="n">Failure</span><span class="p">(</span>
</span><span class='line'>            <span class="n">data</span><span class="o">?.</span><span class="n">let</span> <span class="p">{</span> <span class="n">transform</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'>            <span class="n">error</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>结论</h2>

<p>我们已成功将存储库模式(Repository pattern)集成到应用中，事实证明，这是一种维护离线模式的绝佳方法。此模式不仅简化了数据管理，还确保了可扩展性。它是实现数据检索和存储功能的最有效方法之一，随着项目规模的增长，你可以更轻松地管理本地和远程数据源。</p>

<p>你可以通过以下链接探索与本文主题相关的 GitHub 代码库：<a href="https://github.com/sergeykrupenich/TestRepo/tree/repository">https://github.com/sergeykrupenich/TestRepo/tree/repository</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jetpack Compose 中ViewModel的最佳实践]]></title>
    <link href="https://alexhilton.github.io/blog/2025/06/11/mvvm-inputs-outputs-jetpack-compose/"/>
    <updated>2025-06-11T22:20:55+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/06/11/mvvm-inputs-outputs-jetpack-compose</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自「MVVM Inputs/Outputs: Best Practices and Implementation in Jetpack Compose」，原文链接<a href="https://medium.com/@siarhei.krupenich/mvvm-inputs-outputs-best-practices-and-implementation-in-jetpack-compose-18966d4d914e">https://medium.com/@siarhei.krupenich/mvvm-inputs-outputs-best-practices-and-implementation-in-jetpack-compose-18966d4d914e</a>， 由Siarhei Krupenich发布于2025年3月16日。</p></blockquote>

<p><strong>译注：</strong> 因为文章重点讨论的是ViewModel的实现方式，并不涉及平台特性，所以完全适用于跨平台的Compose Multiplatform。</p>

<p><a href="https://alexhilton.github.io/blog/2025/06/11/mvvm-inputs-outputs-jetpack-compose/"><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*vIJH8waAV-986AZatyXxwA.png" title="auto auto" ></a></p>

<!-- more -->


<h2>简介</h2>

<p>在我<a href="https://juejin.cn/post/7509376843951554596">之前的文章</a>中，我探讨了“整洁架构”（Clean Architecture）作为一种实用的 Android 开发方法。这种架构解决方案侧重于将逻辑组件划分为不同的层，每一层负责各自的任务。</p>

<p>本文以此为基础，通过一个真实的应用示例介绍另一种最佳实践。我们将重点介绍使用 ViewModel 时的一个常见问题，概述一个结构化的解决方案，并深入探讨其背后的理论。此外，我将演示如何使用 Jetpack Compose 有效地实现这种方法，并提供各种示例。所有代码片段都假设读者理解使用 Hilt 的依赖注入 (DI - Dependency Injection)。</p>

<h2>ViewModel概述</h2>

<p>MVVM 的核心思想是通过将 UI 逻辑移入状态来将其与视图分离。这确保了视图在保持逻辑井然有序的同时保持简洁。首先，这种方法符合单一职责原则，从而增强了可测试性和可扩展性。此外，它还解决了一个典型的 Android 挑战——在生命周期事件（例如配置更改）期间处理 UI 状态。</p>

<p>为了实现这一点，我们使用 ViewModel 来管理并保留其状态，即使关联的 Activity 被重新创建。我们来看下面的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// ViewModel 例子</span>
</span><span class='line'><span class="n">@HiltViewModel</span>
</span><span class='line'><span class="k">internal</span> <span class="k">class</span> <span class="nc">ScreenViewModel</span> <span class="n">@Inject</span> <span class="n">constructor</span><span class="p">(</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">getData</span><span class="p">:</span> <span class="n">GetUiDataUseCase</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">ViewModel</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">_state</span> <span class="p">=</span> <span class="n">MutableStateFlow</span><span class="p">&lt;</span><span class="n">State</span><span class="p">&gt;(</span><span class="n">State</span><span class="p">.</span><span class="n">Loading</span><span class="p">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">state</span><span class="p">:</span> <span class="n">StateFlow</span><span class="p">&lt;</span><span class="n">State</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">_state</span><span class="p">.</span><span class="n">asStateFlow</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">loadData</span><span class="p">(</span><span class="n">isRefreshing</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">updateState</span><span class="p">(</span><span class="n">isRefreshing</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">fun</span> <span class="nf">updateState</span><span class="p">(</span><span class="n">isRefreshing</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">)</span> <span class="p">=</span> <span class="n">viewModelScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_state</span><span class="p">.</span><span class="n">value</span> <span class="p">=</span> <span class="n">State</span><span class="p">.</span><span class="n">Loading</span>
</span><span class='line'>        <span class="n">_state</span><span class="p">.</span><span class="n">value</span> <span class="p">=</span> <span class="n">getData</span><span class="p">(</span><span class="n">isRefreshing</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码片段演示了一个简单的 ViewModel，它只有一个状态和一个由 init 触发的方法。loadData() 方法启动状态更新过程，该过程由协程 StateFlow 管理。</p>

<p>一个好的做法是将所有可能的页面状态合并到一个密封类中。这种方法能够以结构化的单方法风格处理 UI 状态变化，从而使你的代码更具可读性和可维护性。</p>

<p>以下示例说明了这一概念：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// State</span>
</span><span class='line'><span class="k">internal</span> <span class="n">sealed</span> <span class="n">interface</span> <span class="n">State</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">Success</span><span class="p">(</span><span class="k">val</span> <span class="py">repos</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">DataUi</span><span class="p">&gt;):</span> <span class="n">State</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">object</span> <span class="nc">Empty</span><span class="p">:</span> <span class="n">State</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">object</span> <span class="nc">Loading</span><span class="p">:</span> <span class="n">State</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">Error</span><span class="p">(</span><span class="k">val</span> <span class="py">message</span><span class="p">:</span> <span class="n">String</span><span class="p">?):</span> <span class="n">State</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在，让我们看一下以下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// Composable View that uses the ViewModel:</span>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">Screen</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">viewModel</span><span class="p">:</span> <span class="n">ScreenViewModel</span> <span class="p">=</span> <span class="n">hiltViewModel</span><span class="p">()</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">state</span> <span class="k">by</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">collectAsState</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">viewModel</span><span class="p">.</span><span class="n">loadRepos</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">RepoState</span><span class="p">(</span><span class="n">repoState</span><span class="p">,</span> <span class="n">viewModel</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">RepoState</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">State</span><span class="p">,</span> <span class="n">viewModel</span><span class="p">:</span> <span class="n">ScreenViewModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">when</span> <span class="p">(</span><span class="n">state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">State</span><span class="p">.</span><span class="n">Success</span> <span class="p">-&gt;</span> <span class="n">LazyColumn</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">items</span><span class="p">(</span><span class="n">state</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">count</span><span class="p">())</span> <span class="p">{</span> <span class="n">index</span> <span class="p">-&gt;</span>
</span><span class='line'>                <span class="n">Item</span><span class="p">(</span><span class="n">state</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="n">index</span><span class="p">])</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">State</span><span class="p">.</span><span class="n">Empty</span> <span class="p">-&gt;</span> <span class="n">EmptyState</span><span class="p">(</span>
</span><span class='line'>            <span class="n">stateMessage</span> <span class="p">=</span> <span class="err">“</span><span class="n">Empty</span> <span class="n">message</span><span class="err">”</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">emptyButtonAction</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">viewModel</span><span class="p">.</span><span class="n">loadData</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">State</span><span class="p">.</span><span class="n">Error</span> <span class="p">-&gt;</span> <span class="n">RepoEmptyState</span><span class="p">(</span>
</span><span class='line'>            <span class="n">stateMessage</span> <span class="p">=</span> <span class="n">state</span><span class="p">.</span><span class="n">message</span><span class="p">,</span>
</span><span class='line'>            <span class="n">emptyButtonAction</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">viewModel</span><span class="p">.</span><span class="n">loadData</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>        <span class="n">State</span><span class="p">.</span><span class="n">Loading</span> <span class="p">-&gt;</span> <span class="n">LoadingState</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Screen() 可组合函数从 StateFlow 中观察状态，并在状态发生变化时进行更新。根据具体状态（Data、Empty、Error 或 Loading），将使用单函数方法触发相应的可组合函数进行处理。</p>

<p>总体而言，一切看起来都很稳定——状态在 ViewModel 中管理，并且视图（Activity 的一部分）可以安全地重新创建而不会丢失数据。此外，这种方法还可以更轻松地编写状态处理、ViewModel 函数调用和 UI 外观的单元测试。</p>

<h2>常规ViewModel的不足之处</h2>

<p>纵观当前的实现，首先突出的问题是 ViewModel 可能会不堪重负。随着应用的增长，我们将多个状态和逻辑打包在一个 ViewModel 中处理，这可能会违反单一职责原则。</p>

<p>另一个关键问题是 UI 和逻辑之间的紧密耦合。直接操作 ViewModel 的实例会使 UI 更加依赖于其具体实现，从而降低灵活性和可复用性。</p>

<h2>为什么常规 ViewModel 会成为问题</h2>

<p>使用常规 ViewModel（不分离输入和输出）乍一看似乎没什么问题。但随着应用规模的增长，情况可能会变得混乱。原因如下：</p>

<ol>
<li>UI 和逻辑过于混杂</li>
<li>ViewModel 同时处理业务逻辑和 UI 更新，使它们紧密相连。</li>
<li>如果需要更改 UI，通常也需要修改 ViewModel，这不应该发生。</li>
<li><p>💡 例如：你的 UI 可能在一个地方处理验证、数据转换和加载状态。</p></li>
<li><p>测试难度加大</p></li>
<li>功能过多的 ViewModel 会使测试编写变得复杂。</li>
<li>不同时处理数据和状态，就无法轻松测试 UI 行为。</li>
<li><p>💡 例如：即使是简单的 UI 测试也会变得棘手，因为 ViewModel 控制着一切。</p></li>
<li><p>更改 UI 变得令人头疼</p></li>
<li>如果你的 ViewModel 没有正确分离，更改一个 UI 元素就会影响所有 UI 元素。</li>
<li><p>💡 示例：将 TextView 替换为 RecyclerView 会迫使你修改 ViewModel，即使它不应该关心 UI 细节。</p></li>
<li><p>ViewModel 变得过大</p></li>
<li>随着时间的推移，ViewModel 会变得庞大且难以管理。</li>
<li><p>它们会同时处理用户输入、API 调用和状态更新。💡 💡 示例：包含数百行代码的 ViewModel 难以阅读、调试或更新。</p></li>
<li><p>逻辑难以复用</p></li>
<li>如果 ViewModel 混合了输入处理（按钮点击）和输出逻辑（数据格式化），那么复用其中的部分内容会变得非常麻烦。</li>
<li><p>💡 示例：你想在另一个页面上复用某些业务逻辑，但它与特定于 UI 的代码纠缠在一起。</p></li>
<li><p>UI 状态管理变得混乱</p></li>
<li>在 ViewModel 内部处理加载、成功和错误状态会让事情变得混乱。</li>
<li><p>💡 示例：处理失败的网络请求并显示错误消息不应与其他逻辑混淆。</p></li>
<li><p>大型应用中难以扩展</p></li>
<li>如果多个页面共享一个 ViewModel，它就会超载。</li>
<li>在一个 ViewModel 中管理许多不同的 UI 状态会导致混乱。</li>
<li>💡 示例：管理 10 个以上页面的 ViewModel 很快就会成为维护的噩梦。</li>
</ol>


<h2>灵丹妙药：输入/输出式ViewModel</h2>

<p>我们讨论的许多问题都可以通过使用输入/输出 ViewModel 方法得到最小化，甚至完全解决。此方法将 ViewModel 中的“输入”流和“输出”流分离。</p>

<ul>
<li>输出处理 UI 的更新（例如，公开状态）。</li>
<li>输入接收来自 UI 的消息（例如，用户交互）。</li>
</ul>


<p>例如，在典型的 ViewModel 中，StateFlow 代表“输出”流，因为它向 UI 提供状态更新。相反，像 reloadData(refreshing: Boolean) 这样的方法充当“输入”流，处理 UI 触发的操作。</p>

<p>此模式不是直接与 ViewModel 交互，而是通过输入和输出接口强制进行结构化访问，从而明确依赖关系并减少紧密耦合。</p>

<p>使用此模式的示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// 取代viewModel.reloadData(refreshing = true)</span>
</span><span class='line'><span class="n">input</span><span class="p">.</span><span class="n">reloadData</span><span class="p">(</span><span class="n">refreshing</span> <span class="p">=</span> <span class="k">true</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 取代val dataState by viewModel.data.collectAsState()</span>
</span><span class='line'><span class="k">val</span> <span class="py">dataState</span> <span class="k">by</span> <span class="n">output</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">collectAsState</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种结构化方法提高了代码的清晰度、可测试性和可维护性，使 ViewModel 更加模块化和可扩展。</p>

<p>我们来画个图，直观地了解一下它的工作原理：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1082/format:webp/0*aOEwjnoh4uw8_C9y" alt="ViewModel" /></p>

<p>该图展示了该模式。ViewModel 实现了 ScreenViewModel 接口，该接口进一步细分为两个独立的接口——一个用于处理输入（操作），另一个用于提供输出（数据）。这种设置如同契约，确保了清晰的结构和分离。ViewModel 本身仍然是一个实例，避免在其层面直接操作。所有操作都通过输入和输出接口进行，从而强化了单一职责原则。最后，View 仅与 ScreenViewModel 接口交互，在抽象层进行操作。此外，View 还可以进一步细分为输入和输出接口，从而允许以简洁、模块化的方式访问方法和数据。</p>

<h2>开撸吧！</h2>

<p>首先，应该重构 ViewModel，将其封装在一个接口中，并将其功能分离到专用的输入和输出接口中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// ViewModel</span>
</span><span class='line'><span class="k">internal</span> <span class="n">interface</span> <span class="n">ScreenViewModel</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">interface</span> <span class="n">Input</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">fun</span> <span class="nf">loadData</span><span class="p">(</span><span class="n">isRefreshing</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">interface</span> <span class="n">Output</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">state</span><span class="p">:</span> <span class="n">StateFlow</span><span class="p">&lt;</span><span class="n">State</span><span class="p">&gt;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">@HiltViewModel</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">ViewModel</span> <span class="n">@Inject</span> <span class="n">constructor</span><span class="p">(</span>
</span><span class='line'>        <span class="k">private</span> <span class="k">val</span> <span class="py">getData</span><span class="p">:</span> <span class="n">GetUiDataUseCase</span><span class="p">,</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">:</span> <span class="n">BaseViewModel</span><span class="p">(),</span> <span class="n">Input</span><span class="p">,</span> <span class="n">Output</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">input</span><span class="p">:</span> <span class="n">Input</span> <span class="p">=</span> <span class="k">this</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">output</span><span class="p">:</span> <span class="n">Output</span> <span class="p">=</span> <span class="k">this</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">private</span> <span class="k">val</span> <span class="py">_state</span> <span class="p">=</span> <span class="n">MutableStateFlow</span><span class="p">&lt;</span><span class="n">State</span><span class="p">&gt;(</span><span class="n">State</span><span class="p">.</span><span class="n">Loading</span><span class="p">)</span>
</span><span class='line'>        <span class="k">override</span> <span class="k">val</span> <span class="py">state</span><span class="p">:</span> <span class="n">StateFlow</span><span class="p">&lt;</span><span class="n">State</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">_state</span><span class="p">.</span><span class="n">asStateFlow</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">override</span> <span class="k">fun</span> <span class="nf">loadData</span><span class="p">(</span><span class="n">isRefreshing</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">updateState</span><span class="p">(</span><span class="n">isRefreshing</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">private</span> <span class="k">fun</span> <span class="nf">updateState</span><span class="p">(</span><span class="n">isRefreshing</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">)</span> <span class="p">=</span> <span class="n">viewModelScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">_state</span><span class="p">.</span><span class="n">value</span> <span class="p">=</span> <span class="n">State</span><span class="p">.</span><span class="n">Loading</span>
</span><span class='line'>            <span class="n">_state</span><span class="p">.</span><span class="n">value</span> <span class="p">=</span> <span class="n">getData</span><span class="p">(</span><span class="n">isRefreshing</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来，我们实现与 ViewModel 交互的视图。以下代码片段提供了一个使用 Jetpack Compose 的示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">Screen</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">viewModel</span><span class="p">:</span> <span class="n">ReposScreenViewModel</span><span class="p">.</span><span class="n">ViewModel</span> <span class="p">=</span> <span class="n">hiltViewModel</span><span class="p">()</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">state</span> <span class="k">by</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">output</span><span class="p">.</span><span class="n">repoState</span><span class="p">.</span><span class="n">collectAsState</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">viewModel</span><span class="p">.</span><span class="n">input</span><span class="p">.</span><span class="n">loadData</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">UIState</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">viewModel</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// UiState使用接口 ScreenViewModel.Input来操作ViewModel的输入</span>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">UIState</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">State</span><span class="p">,</span> <span class="n">input</span><span class="p">:</span> <span class="n">ScreenViewModel</span><span class="p">.</span><span class="n">Input</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">when</span> <span class="p">(</span><span class="n">state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">State</span><span class="p">.</span><span class="n">Success</span> <span class="p">-&gt;</span> <span class="n">LazyColumn</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">items</span><span class="p">(</span><span class="n">state</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">count</span><span class="p">())</span> <span class="p">{</span> <span class="n">index</span> <span class="p">-&gt;</span>
</span><span class='line'>                <span class="n">UIItem</span><span class="p">(</span><span class="n">state</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="n">index</span><span class="p">])</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">State</span><span class="p">.</span><span class="n">Empty</span> <span class="p">-&gt;</span> <span class="n">EmptyState</span><span class="p">(</span>
</span><span class='line'>          <span class="n">emptyButtonAction</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 取代 viewModel.loadData(true)</span>
</span><span class='line'>            <span class="n">input</span><span class="p">.</span><span class="n">loadData</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">RepoState</span><span class="p">.</span><span class="n">Error</span> <span class="p">-&gt;</span> <span class="n">EmptyState</span><span class="p">(</span><span class="n">isError</span> <span class="p">=</span> <span class="k">true</span><span class="p">)</span>
</span><span class='line'>        <span class="n">RepoState</span><span class="p">.</span><span class="n">Loading</span> <span class="p">-&gt;</span> <span class="n">LoadingState</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>使用输入/输出式ViewModel 的优势</h2>

<p>通过将 ViewModel 构建为输入和输出接口，你可以创建更简洁、更高效的架构。其优势如下：</p>

<h3>✅ 清晰的关注点分离（SoC - Separation of Concerns）</h3>

<p>输入处理用户操作（例如，按钮点击、文本输入），而输出管理 UI 状态和数据。这使得你的代码库更加结构化，更易于导航。</p>

<h3>✅ 更轻松的测试</h3>

<p>通过清晰的分离，你可以分别测试输入（用户交互）和输出（状态更新），从而使单元测试更加专注和可靠。</p>

<h3>✅ 更好的可重用性和可扩展性</h3>

<p>输入和输出可以在多个页面或功能之间重复使用，而无需重复逻辑，从而帮助你的应用在扩展过程中避免不必要的复杂性。</p>

<h3>✅ 简化的状态管理</h3>

<p>将 UI 状态（加载、成功、错误）保留在输出中，可以防止 ViewModel 被无关的逻辑淹没，从而使状态处理更加直观。</p>

<h2>结论</h2>

<p>我们探索了另一个可以无缝集成到你项目中的强大工具。通过采用这种方法，你可以增强应用的可扩展性，保持代码库简洁，并提高测试效率。这是一种简单而有效的方法，可以提高可维护性，并让你的开发流程面向未来。</p>

<p>欢迎查看包含现成解决方案的代码库：<a href="https://github.com/sergeykrupenich/TestRepo/tree/inputs-outputs">https://github.com/sergeykrupenich/TestRepo/tree/inputs-outputs</a>。</p>

<p>文章更新：有人指出，最好避免在 ViewModel 的 init 块中加载数据。相反，一种更灵活的方法是使用 Composable 中的 LaunchedEffect() 延迟触发数据加载。这可以确保 ViewModel 不会过早获取数据，并更好地与 Compose 的生命周期保持一致。（译注：关于副作用函数可参考之前的文章<a href="https://juejin.cn/post/7405158681078104127">降Compose十八掌之『龙战于野』| Side Effects</a>）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在现代Android开发中实战Clean Architecture]]></title>
    <link href="https://alexhilton.github.io/blog/2025/06/10/clean-architecture-for-android/"/>
    <updated>2025-06-10T22:33:00+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/06/10/clean-architecture-for-android</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自「Refining Clean Architecture for Android: A
Practical Approach」，原文链接<a href="https://medium.com/@siarhei.krupenich/refining-clean-architecture-for-android-a-practical-approach-32ce966f8ba3">https://medium.com/@siarhei.krupenich/refining-clean-architecture-for-android-a-practical-approach-32ce966f8ba3</a>，由Siarhei Krupenich发布于2025年2月23日。</p></blockquote>

<p><a href="https://alexhilton.github.io/blog/2025/06/10/clean-architecture-for-android/"><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*964gi7PELf9cc4CQwp6XBA.png" title="auto auto" ></a></p>

<!-- more -->


<h2>简介</h2>

<p>本文是专注于 Android 开发和设计中实际问题一系列文章中的第一篇，这些文章将会涵盖整洁架构 (Clean Architecture)、ViewModel 输入/输出拆分、Repository 模式等，并基于最佳实践提供解决方案。每篇都将聚焦于一个特定主题，并包含一个 GitHub 分支的链接，用于演示该主题的实践代码。作为开篇，本文将探讨整洁架构、其面临的挑战以及可在生产环境中应用的实用解决方案。</p>

<h2>整洁架构（Clean Architecture）简介</h2>

<p>整洁架构是一种结构化的方法，通过将应用程序的代码库划分为数据层、领域层和展现层来组织它。</p>

<ul>
<li>数据层（Data Layer）：处理数据检索和存储，无需了解域层或表示层。</li>
<li>领域层（Domain Layer）：包含业务逻辑和用例，与数据层交互，但独立于表示层。</li>
<li>展现层（Presentation Layer）：专注于 UI，从领域层接收状态，并保持逻辑最小化。</li>
</ul>


<p>这里关键原则是依赖关系只向内流动——每一层只了解其下一层，从而确保可维护性和关注点分离（Separation of Concerns）。下图展示了 Android 中一个简单的整洁架构 (Clean Architecture) 实现：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1064/format:webp/0*iND5nS_w8q9O_o2z" alt="图 1：Android 的简单整洁架构实现" /></p>

<h2>让我们开始撸吧！</h2>

<p>首先，我们需要按照图 1构建项目结构。虽然功能模块通常是大型项目的一部分，但为了演示方便，我们将尽量简化，仅关注整洁架构。</p>

<p>我们将构建一个小型应用，该应用使用整洁架构 + MVVM + 协程，进行单个 API 调用并显示一个简单的列表。</p>

<p>为了保持独立性，每个层将被拆分为独立的模块：</p>

<ul>
<li>数据层(Data Layer)：包含 Retrofit 依赖项、网络模型和用于数据访问的存储库。（也可以选择添加本地存储实现。）</li>
<li>领域层(Domain Layer)：包含用例（或交互器）、领域模型和用于将网络模型转换为领域模型的映射器。它依赖于数据模块，因为它使用其存储库。</li>
<li>表示层(Presentation Layer)：包含与领域模块中的用例交互的 ViewModel，用于处理 UI 数据。</li>
</ul>


<p>项目结构如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'>- Data
</span><span class='line'>  API Interface <span class="o">(</span>Retrofit<span class="o">)</span>
</span><span class='line'>  DAO
</span><span class='line'>  Repository Interface
</span><span class='line'>  Repository Instance
</span><span class='line'>- Domain
</span><span class='line'>  Use-cases and their interfaces
</span><span class='line'>  Domain models
</span><span class='line'>  Mappers from Network to Domain models
</span><span class='line'>- Presentation
</span><span class='line'>  ViewModels
</span><span class='line'>  Views
</span></code></pre></td></tr></table></div></figure>


<h3>数据模块（Data Module）:</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">interface</span> <span class="n">DataNetworkApi</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">@GET</span><span class="p">(</span><span class="n">API_DATA</span><span class="p">)</span> <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">getData</span><span class="p">():</span> <span class="n">Result</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">ApiEntity</span><span class="p">&gt;&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">companion</span> <span class="k">object</span> <span class="err">{ </span>
</span><span class='line'>    <span class="k">private</span> <span class="n">const</span> <span class="k">val</span> <span class="py">API_DATA</span> <span class="p">=</span> <span class="s">&quot;/api/data&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Keep</span>
</span><span class='line'><span class="n">data</span> <span class="k">class</span> <span class="nc">DataApiEntity</span><span class="p">(</span>
</span><span class='line'>  <span class="n">@SerializedName</span><span class="p">(</span><span class="s">&quot;id&quot;</span><span class="p">)</span> <span class="k">val</span> <span class="py">id</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'>  <span class="n">@SerializedName</span><span class="p">(</span><span class="s">&quot;name&quot;</span><span class="p">)</span> <span class="k">val</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'>  <span class="n">@SerializedName</span><span class="p">(</span><span class="s">&quot;description&quot;</span><span class="p">)</span> <span class="k">val</span> <span class="py">description</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">interface</span> <span class="n">DataRepository</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">getData</span><span class="p">(</span><span class="n">isRefreshing</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">):</span> <span class="n">Result</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">DataApiEntity</span><span class="p">&gt;&gt;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">internal</span> <span class="k">class</span> <span class="nc">DataRepositoryImpl</span> <span class="n">@Inject</span> <span class="n">constructor</span><span class="p">(</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">val</span> <span class="py">dataNetworkApi</span><span class="p">:</span> <span class="n">DataNetworkApi</span><span class="p">,</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">val</span> <span class="py">dataLocalStorage</span><span class="p">:</span> <span class="n">DataLocalStorage</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">DataRepository</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">getData</span><span class="p">(</span><span class="n">isRefreshing</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">):</span>
</span><span class='line'>    <span class="n">Result</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">DataApiEntity</span><span class="p">&gt;&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// dataLocalStorage and dataLocalStorage usage </span>
</span><span class='line'>    <span class="err">…</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">dataNetworkApi</span><span class="p">.</span><span class="n">getData</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>显然，这不是存储库模式(Repository Pattern)的经典实现——它纯粹是为了演示而设计的，以让我们能专注于整洁架构。</p>

<h3>领域模块（Domain Module）：</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">data</span> <span class="k">class</span> <span class="nc">DataEntity</span><span class="p">(</span>
</span><span class='line'>  <span class="k">val</span> <span class="py">id</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'>  <span class="k">val</span> <span class="py">title</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'>  <span class="k">val</span> <span class="py">description</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">internal</span> <span class="k">class</span> <span class="nc">DataEntityMapperImpl</span><span class="p">:</span> <span class="n">DataEntityMapper</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">fun</span> <span class="nf">map</span><span class="p">(</span><span class="n">param</span><span class="p">:</span> <span class="n">DataApiEntity</span><span class="p">):</span> <span class="n">DataEntity</span> <span class="p">=</span> <span class="n">with</span><span class="p">(</span><span class="n">param</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">DataEntity</span><span class="p">(</span>
</span><span class='line'>      <span class="err">…</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">interface</span> <span class="n">GetDataUseCase</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">suspend</span> <span class="n">operator</span> <span class="k">fun</span> <span class="nf">invoke</span><span class="p">(</span><span class="n">param</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">):</span>  <span class="n">Result</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">DataEntity</span><span class="p">&gt;&gt;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">internal</span> <span class="k">class</span> <span class="nc">GetDataUseCaseImpl</span><span class="p">(</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">val</span> <span class="py">mapper</span><span class="p">:</span> <span class="n">DataEntityMapper</span><span class="p">,</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">val</span> <span class="py">repository</span><span class="p">:</span> <span class="n">DataRepository</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">GetDataUseCase</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="n">suspend</span> <span class="n">operator</span> <span class="k">fun</span> <span class="nf">invoke</span><span class="p">(</span>
</span><span class='line'>    <span class="n">param</span><span class="p">:</span> <span class="n">Boolean</span>
</span><span class='line'>  <span class="p">):</span> <span class="n">Result</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">DataEntity</span><span class="p">&gt;&gt;</span> <span class="p">=</span>
</span><span class='line'>    <span class="n">repository</span><span class="p">.</span><span class="n">getData</span><span class="p">(</span><span class="n">param</span><span class="p">).</span><span class="n">map</span> <span class="p">{</span> <span class="n">repositoryData</span> <span class="p">-&gt;</span>
</span><span class='line'>      <span class="n">repositoryData</span><span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">data</span> <span class="p">-&gt;</span> <span class="n">mapper</span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>展现模块（Presentation Module）：</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">internal</span> <span class="n">sealed</span> <span class="n">interface</span> <span class="n">UiDataState</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">data</span> <span class="k">class</span> <span class="nc">Success</span><span class="p">(</span><span class="k">val</span> <span class="py">repos</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Data</span><span class="p">&gt;):</span> <span class="n">UiDataState</span>
</span><span class='line'>   <span class="n">data</span> <span class="k">object</span> <span class="nc">Empty</span><span class="p">:</span> <span class="n">UiDataState</span>
</span><span class='line'>   <span class="n">data</span> <span class="k">object</span> <span class="nc">Loading</span><span class="p">:</span> <span class="n">UiDataState</span>
</span><span class='line'>   <span class="n">data</span> <span class="k">class</span> <span class="nc">Error</span><span class="p">(</span><span class="k">val</span> <span class="py">message</span><span class="p">:</span> <span class="n">String</span><span class="p">?):</span> <span class="n">UiDataState</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">interface</span> <span class="n">GetUiDataUseCase</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">suspend</span> <span class="n">operator</span> <span class="k">fun</span> <span class="nf">invoke</span><span class="p">(</span><span class="n">param</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">):</span> <span class="n">UiDataState</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">internal</span> <span class="k">class</span> <span class="nc">GetUiDataUseCaseImpl</span> <span class="n">constructor</span><span class="p">(</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">val</span> <span class="py">getData</span><span class="p">:</span> <span class="n">GetDataUseCase</span><span class="p">,</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">val</span> <span class="py">mapUiData</span><span class="p">:</span> <span class="n">MapDataUiModelUseCase</span><span class="p">,</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">val</span> <span class="py">mapUiStateData</span><span class="p">:</span> <span class="n">MapDataUiStateUseCase</span>
</span><span class='line'><span class="p">):</span> <span class="n">GetUiDataUseCase</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">invoke</span><span class="p">(</span><span class="n">param</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">):</span> <span class="n">UiDataState</span> <span class="p">=</span>
</span><span class='line'>    <span class="n">mapUiStateData</span><span class="p">(</span>
</span><span class='line'>      <span class="n">getData</span><span class="p">(</span><span class="n">param</span><span class="p">).</span><span class="n">mapCatching</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">it</span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="n">mapUiRepos</span><span class="o">::</span><span class="n">invoke</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于 GetUiDataUseCaseImpl 有几个关键点需要注意。如你所见，它包含一个上述 GetDataUseCase 实现的实例以及两个额外的映射器。MapDataUiModelUseCase 可以将领域模型转换为 UI 模型（属于表示层）。同时，MapDataUiStateUseCase 确定相应的 UI 状态，可以是以下之一：</p>

<ul>
<li>正在加载(Loading)</li>
<li>空数据(Empty)</li>
<li>非空(Non-Empty)</li>
<li>错误(Error)</li>
</ul>


<h4>ViewModel：</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">class</span> <span class="nc">TestViewModel</span> <span class="n">constructor</span><span class="p">(</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">val</span> <span class="py">getData</span><span class="p">:</span> <span class="n">GetUiDataUseCase</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">ViewModel</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="py">state</span><span class="p">:</span> <span class="n">StateFlow</span><span class="p">&lt;</span><span class="n">State</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">_state</span><span class="p">.</span><span class="n">asStateFlow</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">init</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">refresh</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">fun</span> <span class="nf">refresh</span><span class="p">(</span><span class="n">isRefreshing</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">updateState</span><span class="p">(</span><span class="n">isRefreshing</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span> <span class="k">fun</span> <span class="nf">updateState</span><span class="p">(</span><span class="n">isRefreshing</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">)</span> <span class="p">=</span> <span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>     <span class="n">_state</span><span class="p">.</span><span class="n">value</span> <span class="p">=</span> <span class="n">RepoState</span><span class="p">.</span><span class="n">Loading</span>
</span><span class='line'>     <span class="n">_state</span><span class="p">.</span><span class="n">value</span> <span class="p">=</span> <span class="n">getData</span><span class="p">(</span><span class="n">isRefreshing</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>GitHub 项目与提供的代码片段略有不同，因为它使用了 ViewModel 输入/输出模式和 Hilt 依赖注入——这两者都是可扩展开发的基本原则，我们将在后续文章中探讨。此外，所有组件都用接口包装，确保可测试性，同时允许在接口级别进行无缝操作。后续文章将深入探讨这些方面。</p>

<p>我们成功了！现在，让我们深入研究代码。每一层都负责特定的功能，使其既模块化又易于测试。数据层的存储库依赖于 API 和本地存储，而领域用例依赖于存储库。表示层与领域用例交互。</p>

<p>如果我需要替换 HTTP 客户端，我只需将新的依赖项注入存储库，同时保持契约，确保功能无缝衔接。此外，每个组件都可以被单元测试覆盖，从而使架构可扩展且易于维护。</p>

<p>同样需要强调的是，接口应该属于使用它们的层。乍一看，一切都井井有条，似乎没有什么需要改进的地方。但让我们仔细看看。</p>

<h2>经典整洁架构实现的缺点</h2>

<h3>观察结果和潜在问题</h3>

<p>我们上面开发的实现允许直接访问底层模块组件，例如 API 实现或数据库存储。一种可能的解决方案是将它们内部化，并确保只能通过存储库访问数据。然而，这种方法仍然存在一个关键的缺点：存储库的接口及其实例都保存在同一个数据模块中。这会导致一些潜在的风险：</p>

<ol>
<li>违反封装——直接使用具体实例而不是接口存在风险，这也会影响接口隔离原则。</li>
<li>违反整洁架构契约——随着项目的发展，可能会出现偷工减料的倾向，例如允许领域用例与数据库实例而不是存储库接口交互。</li>
<li>存储库委托的复杂性增加——将组件绑定在一起变得更具挑战性，尤其是在依赖关系增加的情况下。</li>
<li>更高的维护成本——随着时间的推移，违反架构契约会导致维护工作量增加，并降低代码的可扩展性。</li>
<li>更复杂的单元测试——对低级组件的无限制访问使测试变得复杂，因为依赖项可能会以非预期的方式使用。</li>
</ol>


<p>缓解上述风险的唯一方法是将职责进一步拆分成更多独立的层和模块。数据模块应继续包含 API 和数据存储的实例，但所有存储库接口都应移出。建议在领域模块内创建子模块，并确保它们保持独立。</p>

<p>此外，API 和数据库实例可以通过专用服务层（例如 API 服务和本地存储服务）访问。这不仅增强了可测试性，还强制执行了适当的抽象。此外，数据实体应放置在数据子模块中，这些子模块仍与域层保持连接。</p>

<p>通过遵循这种方法，所有组件仅通过各自的接口进行交互，而无需直接了解它们的实际实现。这确保了更好的模块化、可维护性，并遵循了整洁架构原则。</p>

<p>下图展示了改进的解决方案：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/0*6pQ1HngSx6WIwaZx" alt="图 2. 增强型 Android Clean Architecture 实现" /></p>

<p>以下项目结构说明了增强的架构：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'>- Data
</span><span class='line'>  API Interface <span class="o">(</span>Retrofit<span class="o">)</span>
</span><span class='line'>  DAO
</span><span class='line'>  Data Services
</span><span class='line'>  API Services
</span><span class='line'>  Repositories implementations of Domain.Repository
</span><span class='line'>- Domain
</span><span class='line'>  Use-cases
</span><span class='line'>  Domain Entities
</span><span class='line'>  Mappers from Network models to Domain ones
</span><span class='line'>  -- Repository
</span><span class='line'>     Repository Interface
</span><span class='line'>     API Entity
</span><span class='line'>- Presentation
</span><span class='line'>  ViewModels
</span><span class='line'>  Views
</span></code></pre></td></tr></table></div></figure>


<h3>重新开始编码</h3>

<p>现在，我们将重点关注架构的改进部分。你可以通过以下链接在 GitHub 上找到完整的示例。</p>

<h4>Domain.Repository 子模块：</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">interface</span> <span class="n">DataRepository</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">getData</span><span class="p">(</span><span class="n">isRefreshing</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">):</span> <span class="n">Result</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">DataEntity</span><span class="p">&gt;&gt;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Data Module:</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">internal</span> <span class="k">class</span> <span class="nc">DataRepositoryImpl</span> <span class="n">@Inject</span> <span class="n">constructor</span><span class="p">(</span>
</span><span class='line'>   <span class="k">private</span> <span class="k">val</span> <span class="py">dataNetworkApi</span><span class="p">:</span> <span class="n">DataNetworkApi</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">DataRepository</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">override</span> <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">getData</span><span class="p">(</span><span class="n">isRefreshing</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">)</span> <span class="p">=</span>
</span><span class='line'>       <span class="n">dataNetworkApi</span><span class="p">.</span><span class="n">getData</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Domain Module:</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">internal</span> <span class="k">class</span> <span class="nc">GetDataUseCaseImpl</span><span class="p">(</span>
</span><span class='line'>   <span class="k">private</span> <span class="k">val</span> <span class="py">mapper</span><span class="p">:</span> <span class="n">DataEntityMapper</span><span class="p">,</span>
</span><span class='line'>   <span class="k">private</span> <span class="k">val</span> <span class="py">repository</span><span class="p">:</span> <span class="n">DataRepository</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">GetDataUseCase</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">override</span> <span class="n">suspend</span> <span class="n">operator</span> <span class="k">fun</span> <span class="nf">invoke</span><span class="p">(</span><span class="n">param</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">):</span> <span class="n">Result</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">DataEntity</span><span class="p">&gt;&gt;</span> <span class="p">=</span>
</span><span class='line'>       <span class="n">repository</span><span class="p">.</span><span class="n">getData</span><span class="p">(</span><span class="n">param</span><span class="p">)</span>
</span><span class='line'>           <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">listOfData</span> <span class="p">-&gt;</span>
</span><span class='line'>               <span class="n">listOfData</span><span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">data</span> <span class="p">-&gt;</span> <span class="n">mapper</span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>           <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>结论</h2>

<p>总而言之，我们实现了增强版的整洁架构。逻辑可以按功能进一步划分，每个功能模块都遵循其自身的整洁架构结构。此外，这种划分可以扩展到展现层，确保领域层和展现层之间的界限清晰区分。这种方法允许 UI用例严格通过接口与领域用例交互，从而保持模块化和可扩展性。</p>

<h2>额外注意事项</h2>

<p>项目示例演示了这种方法。通过实现了一个简单的应用程序，可以进行 API 调用、接收数据并显示列表。为了使应用程序功能齐全，它还使用了本文未涉及的其他组件：Retrofit、Hilt 以及包含通用组件的核心模块。这些额外组件不会影响你对本文主题的理解。</p>

<p>完整实例代码：<a href="https://github.com/sergeykrupenich/TestRepo/tree/clean-architecture">https://github.com/sergeykrupenich/TestRepo/tree/clean-architecture</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[长驻UI元素的UI层体系结构]]></title>
    <link href="https://alexhilton.github.io/blog/2025/06/07/ui-layer-architecture/"/>
    <updated>2025-06-07T22:47:48+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/06/07/ui-layer-architecture</id>
    <content type="html"><![CDATA[<p>本文译自「UI layer architecture for persistent UI elements」，原文链接<a href="https://www.tunjid.com/articles/ui-layer-architecture-for-persistent-ui-elements-68248e8ecc8e85f53ce1aa46">https://www.tunjid.com/articles/ui-layer-architecture-for-persistent-ui-elements-68248e8ecc8e85f53ce1aa46</a>，由TJ Dahunsi</p>

<p>发布于2025年5月14日。</p>

<p><a href="https://alexhilton.github.io/blog/2025/06/07/ui-layer-architecture/"><img src="file:///Users/alexhilton/Downloads/navi.png" title="auto auto" ></a></p>

<!-- more -->


<p>在移动应用中，某些 UI 元素会在多种上下文中贯穿整个用户界面。对于用于导航的 UI 元素尤其如此，例如：</p>

<ol>
<li>导航栏和导航栏。</li>
<li>顶部和底部应用栏。</li>
<li>浮动操作按钮。</li>
</ol>


<p>在为这些屏幕构建 UI 时，通常有两种布局方式：</p>

<ol>
<li>根级 UI 元素：整个应用在根级脚手架布局中共享这些元素的单个实例。在 Android 上，这通常处于 Activity 或 NavHostFragment 级别。</li>
<li>每个屏幕的 UI 元素：每个导航目标负责绘制自己的 UI 元素。</li>
</ol>


<p>因此，问题是，一种方法通常比另一种更好吗？它们可以共存吗？令人满意的是，我认为这是经典的软件工程“视情况而定”答案不适用的少数情况之一。我坚信，对于 Jetpack Compose 应用，应该始终优先采用每个屏幕的 UI 元素方法。让我们简要回顾一下过去。</p>

<h2>根级 UI 元素</h2>

<p>在 Android 上，根级 UI 元素的起源可以追溯到最初的 Activity ActionBar API 以及随后引入的 Fragment API。Fragment 可以调用：</p>

<ol>
<li>getSupportActionBar() 在其父 Activity 中设置标题和其他 ActionBar 属性。</li>
<li>setHasOptionsMenu() 在其父 Activity 中更新菜单项。</li>
</ol>


<p><img src="https://storage.googleapis.com/tunji-web-public/articles/68248e8ecc8e85f53ce1aa46/action-bar.png" alt="经典的ActionBar" /></p>

<p>由于 Activity 拥有 ActionBar，这隐式地建立了层级关系。这与转向单 Activity 架构相结合，为在某个根级别管理顶级装饰（例如浮动操作按钮、AppBar 和导航栏）奠定了基调。当然，这有利有弊：</p>

<h3>优点</h3>

<ul>
<li>真正的持久性：UI 元素是同一个实例，保证了视觉一致性，无需在实例之间进行复杂的过渡。这对于使用浮动操作按钮的应用尤其有利，因为屏幕过渡不会因为每个屏幕使用不同的 FAB 实例而引入 UI/UX 噪音。</li>
</ul>


<h3>缺点</h3>

<ul>
<li>紧密耦合：屏幕与宿主 Activity 的实现细节和框架 API 紧密耦合。</li>
<li>复杂的状态管理：宿主 Activity 成为瓶颈，需要复杂的逻辑来更新每个特定屏幕的标题、菜单选项、FAB 可见性/图标/操作，尤其是在屏幕进行动画处理时。这会导致扩展性不佳。</li>
<li>灵活性受限：更改工具栏样式、在特定屏幕上彻底移除工具栏或处理边缘情况（如果不给主机增加更多条件复杂性）变得困难。</li>
<li>测试挑战：由于屏幕依赖于主机 Activity 提供必要的 UI 组件和配置钩子，因此单独测试屏幕变得更加困难。</li>
</ul>


<h2>每个屏幕的 UI 元素</h2>

<p>根级 UI 元素的弊端非常严重，以至于 fragment 的 setHasOptionsMenu() 方法在 2022 年被弃用。尽管 MenuHost 和 MenuProvider API 中提供了替代方案，但这主要是为了保持向后兼容性。</p>

<p>至关重要的是，Jetpack Compose 已经发布了 1.1.1 版本，值得注意的是，它没有提供 ActionBar 或类似 MenuHost 的 API。事实上，最接近于提供如何管理导航目的地通用框架功能的 API 是 Scaffold 可组合组件。有趣的是，它：</p>

<ul>
<li>material3 Compose 库中的一个自成体系的实现。</li>
<li>是一个基于每个屏幕的 UI 元素实现，为应用栏、浮动操作按钮等提供插槽。</li>
<li>隐式地鼓励应用中的导航目的地替换整个屏幕内容，包括其特定的应用栏、浮动操作按钮等。</li>
</ul>


<p><img src="https://storage.googleapis.com/tunji-web-public/articles/68248e8ecc8e85f53ce1aa46/scaffold_resized.png" alt="Now In Android 应用中脚手架" /></p>

<p>同样，我们可以列出优缺点：</p>

<h3>优点</h3>

<ul>
<li>封装和模块化：每个导航目的地都是独立的，并管理其自身的UI元素及其状态。这符合单一职责原则。</li>
<li>高度灵活性：导航目的地可以轻松自定义持久UI元素，而不会影响其他元素。需要完全自定义的应用栏？没问题。不需要浮动操作按钮？那就不要添加它。</li>
<li>简化状态管理：UI状态（标题、菜单项、导航栏状态）在屏幕的ViewModel或可组合状态中进行本地管理，使其更易于推理。</li>
<li>提高可测试性：导航目的地可以更轻松地进行独立测试。</li>
<li>解耦：导航目的地与宿主Activity在这些特定的UI元素方面解耦。</li>
</ul>


<h3>缺点</h3>

<ul>
<li>代码重复：如果没有适当的结构化，导航目的地之间可能会重复使用常用的UI元素。</li>
<li>沉浸感受损：要使相同的应用栏或浮动操作按钮在屏幕之间顺利保持/转换，需要明确的过渡处理。</li>
</ul>


<h2>持久 UI 的 UI 层架构</h2>

<p>通过比较这两种实现方式的优缺点，我们可以得出这样的印象：无论我们在 Compose 中使用每个屏幕的 UI 来降低复杂性方面获得了什么好处，我们都需要付出代价才能在 UX 中真正传达出 UI 元素是持久的，如下面的屏幕记录所示。</p>

<p><img src="https://storage.googleapis.com/tunji-web-public/articles/68248e8ecc8e85f53ce1aa46/noise_cropped.gif" alt="Bluesky 应用程序中的多个 FAB" /></p>

<p>不过，有一个简单的解决方案：Compose 共享元素过渡和动画修改器 API，以及精心设计的 UI 层架构。</p>

<h3>持久化 UI 和 UI 逻辑</h3>

<p>上述动画 API 的入口点位于它们提供的作用域中：SharedTransitionScope 和 AnimatedVisibilityScope。对于导航目的地过渡，两者几乎总是串联使用，因此创建一个继承自两者的 UI 逻辑状态持有者非常有用。我个人喜欢将其称为 ScaffoldState。此 ScaffoldState 应该位于一个公共模块中，应用中所有显示导航目的地的模块都可以访问。我通常将此模块称为脚手架。</p>

<p><strong>注意：</strong> 请勿将此处提到的 ScaffoldState 与原始 Material Compose 库中的 ScaffoldState 混淆。它是一个遗留实现，在 Compose Material3 中没有等效实现。</p>

<p>ScaffoldState 的定义可以简单如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">class</span> <span class="nc">ScaffoldState</span> <span class="k">internal</span> <span class="n">constructor</span><span class="p">(</span>
</span><span class='line'>    <span class="n">animatedVisibilityScope</span><span class="p">:</span> <span class="n">AnimatedVisibilityScope</span><span class="p">,</span>
</span><span class='line'>    <span class="n">sharedTransitionScope</span><span class="p">:</span> <span class="n">SharedTransitionScope</span><span class="p">,</span>
</span><span class='line'>    <span class="k">internal</span> <span class="k">val</span> <span class="py">isMediumScreenWidthOrWider</span><span class="p">:</span> <span class="n">State</span><span class="p">&lt;</span><span class="n">Boolean</span><span class="p">&gt;,</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">AnimatedVisibilityScope</span> <span class="k">by</span> <span class="n">animatedVisibilityScope</span><span class="p">,</span>
</span><span class='line'>    <span class="n">SharedTransitionScope</span> <span class="k">by</span> <span class="n">sharedTransitionScope</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">internal</span> <span class="k">val</span> <span class="py">canShowBottomNavigation</span> <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="p">!</span><span class="n">isMediumScreenWidthOrWider</span><span class="p">.</span><span class="n">value</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">internal</span> <span class="k">val</span> <span class="py">canShowNavRail</span> <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="n">isMediumScreenWidthOrWider</span><span class="p">.</span><span class="n">value</span>
</span><span class='line'>                                            <span class="c1">// implementation omitted</span>
</span><span class='line'>                                            <span class="p">&amp;&amp;</span> <span class="n">isAtDeviceEdge</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>注意：</strong> canShowBottomNavigation 和 canShowNavRail 并不一定意味着它们各自的界面元素一定会显示；这取决于在脚手架内实际调用 Composable 的情况（如下所述）。相反，它们定义了界面元素在被调用时能够显示的界面逻辑。</p>

<p>ScaffoldState 有一个内部构造函数，其他模块可能无法创建它。相反，它们会使用同样在 scaffold 模块中定义的实用方法来记住它在组合中的实例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">rememberScaffoldState</span><span class="p">(</span>
</span><span class='line'>    <span class="n">animatedVisibilityScope</span><span class="p">:</span> <span class="n">AnimatedVisibilityScope</span><span class="p">,</span>
</span><span class='line'>    <span class="n">sharedTransitionScope</span><span class="p">:</span> <span class="n">SharedTransitionScope</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">ScaffoldState</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">isMediumScreenWidthOrWider</span> <span class="p">=</span> <span class="n">isMediumScreenWidthOrWider</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">remember</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">ScaffoldState</span><span class="p">(</span>
</span><span class='line'>            <span class="n">animatedVisibilityScope</span> <span class="p">=</span> <span class="n">animatedVisibilityScope</span><span class="p">,</span>
</span><span class='line'>            <span class="n">sharedTransitionScope</span> <span class="p">=</span> <span class="n">sharedTransitionScope</span><span class="p">,</span>
</span><span class='line'>            <span class="n">isMediumScreenWidthOrWider</span> <span class="p">=</span> <span class="n">isMediumScreenWidthOrWider</span><span class="p">,</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">isMediumScreenWidthOrWider</span><span class="p">():</span> <span class="n">State</span><span class="p">&lt;</span><span class="n">Boolean</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">isMediumScreenWidthOrWider</span> <span class="p">=</span> <span class="n">currentWindowAdaptiveInfo</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">windowSizeClass</span>
</span><span class='line'>        <span class="p">.</span><span class="n">isWidthAtLeastBreakpoint</span><span class="p">(</span><span class="n">WindowSizeClass</span><span class="p">.</span><span class="n">WIDTH_DP_MEDIUM_LOWER_BOUND</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">rememberUpdatedState</span><span class="p">(</span><span class="n">isMediumScreenWidthOrWider</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上文中，定义显示哪个导航 UI 元素的 UI 逻辑是通过 ScaffoldState 中的 WindowSizeClass 实现的。AnimatedVisibilityScope 和 SharedTransitionScope 参数被显式传入。前者通常由导航库在定义目的地时提供，后者则由 CompositionLocal 或 prop drilling 提供。后面会介绍 CompositionLocal 的使用示例。</p>

<h3>持久化 UI 脚手架</h3>

<p>通过定义记住组合中 ScaffoldState 的方法，实际的 PersistentScaffold Composable 如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">ScaffoldState</span><span class="p">.</span><span class="n">PersistentScaffold</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="n">topBar</span><span class="p">:</span> <span class="n">@Composable</span> <span class="n">ScaffoldState</span><span class="p">.()</span> <span class="p">-&gt;</span> <span class="n">Unit</span> <span class="p">=</span> <span class="p">{},</span>
</span><span class='line'>    <span class="n">floatingActionButton</span><span class="p">:</span> <span class="n">@Composable</span> <span class="n">ScaffoldState</span><span class="p">.()</span> <span class="p">-&gt;</span> <span class="n">Unit</span> <span class="p">=</span> <span class="p">{},</span>
</span><span class='line'>    <span class="n">navigationBar</span><span class="p">:</span> <span class="n">@Composable</span> <span class="n">ScaffoldState</span><span class="p">.()</span> <span class="p">-&gt;</span> <span class="n">Unit</span> <span class="p">=</span> <span class="p">{},</span>
</span><span class='line'>    <span class="n">navigationRail</span><span class="p">:</span> <span class="n">@Composable</span> <span class="n">ScaffoldState</span><span class="p">.()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span>
</span><span class='line'>    <span class="n">content</span><span class="p">:</span> <span class="n">@Composable</span> <span class="n">ScaffoldState</span><span class="p">.(</span><span class="n">PaddingValues</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NavigationRailScaffold</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">,</span>
</span><span class='line'>        <span class="n">navigationRail</span> <span class="p">=</span> <span class="n">navigationRail</span><span class="p">,</span>
</span><span class='line'>        <span class="n">content</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Scaffold</span><span class="p">(</span>
</span><span class='line'>                <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">animateBounds</span><span class="p">(</span><span class="n">lookaheadScope</span> <span class="p">=</span> <span class="k">this</span><span class="p">),</span>
</span><span class='line'>                <span class="n">topBar</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">topBar</span><span class="p">()</span>
</span><span class='line'>                <span class="p">},</span>
</span><span class='line'>                <span class="n">floatingActionButton</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">floatingActionButton</span><span class="p">()</span>
</span><span class='line'>                <span class="p">},</span>
</span><span class='line'>                <span class="n">bottomBar</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">navigationBar</span><span class="p">()</span>
</span><span class='line'>                <span class="p">},</span>
</span><span class='line'>                <span class="n">content</span> <span class="p">=</span> <span class="p">{</span> <span class="n">paddingValues</span> <span class="p">-&gt;</span>
</span><span class='line'>                    <span class="n">content</span><span class="p">(</span><span class="n">paddingValues</span><span class="p">)</span>
</span><span class='line'>                <span class="p">},</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>注意：</strong> 在上面的定义中，持久 UI 元素的每个可组合插槽都以 ScaffoldState 作为接收器，并且当 navigationRail 或 navigationBar 隐藏或显示时，使用 Modifier.animateBounds() 对 Scaffold 进行动画处理。</p>

<p>上面使用了一个中间可组合项：NavigationRailScaffold。这只是一个简单的 Row，包含两个项目：navigationRail 和 content：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">private</span> <span class="n">inline</span> <span class="k">fun</span> <span class="nf">NavigationRailScaffold</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="n">navigationRail</span><span class="p">:</span> <span class="n">@Composable</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span>
</span><span class='line'>    <span class="n">content</span><span class="p">:</span> <span class="n">@Composable</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">Row</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">,</span>
</span><span class='line'>        <span class="n">content</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>                <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">widthIn</span><span class="p">(</span><span class="n">max</span> <span class="p">=</span> <span class="m">80.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">zIndex</span><span class="p">(</span><span class="m">2f</span><span class="p">),</span>
</span><span class='line'>            <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">navigationRail</span><span class="p">()</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>                <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">fillMaxSize</span><span class="p">()</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">zIndex</span><span class="p">(</span><span class="m">1f</span><span class="p">),</span>
</span><span class='line'>            <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">content</span><span class="p">()</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>注意：</strong> 导航轨道的 z 索引比内容更高。</p>

<p>遗憾的是，NavigationSuiteScaffold 的 API 集无法在此处使用，因为与普通的 Scaffold 可组合函数不同，它们不允许通过插槽访问构成脚手架的持久化 UI 元素，因此无法将 Modifier 实例传递给它们。这使得本文的其余部分不适用于 NavigationSuiteScaffold。</p>

<h3>持久化 UI 元素作为 UI 逻辑的扩展</h3>

<p>为了营造这些 UI 元素在导航目标之间持久化的视觉效果，可以将这些 UI 元素的可组合函数编写为 ScaffoldState 的扩展，从而提供对 SharedTransitionScope 的访问权限，以便为元素提供共享元素修饰符。这些定义也应位于脚手架模块中。例如，PersistentNavigationAppBar 可以是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">ScaffoldState</span><span class="p">.</span><span class="n">PersistentNavigationBar</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="n">enterTransition</span><span class="p">:</span> <span class="n">EnterTransition</span> <span class="p">=</span> <span class="n">slideInVertically</span><span class="p">(</span><span class="n">initialOffsetY</span> <span class="p">=</span> <span class="p">{</span> <span class="n">it</span> <span class="p">}),</span>
</span><span class='line'>    <span class="n">exitTransition</span><span class="p">:</span> <span class="n">ExitTransition</span> <span class="p">=</span> <span class="n">slideOutVertically</span><span class="p">(</span><span class="n">targetOffsetY</span> <span class="p">=</span> <span class="p">{</span> <span class="n">it</span> <span class="p">}),</span>
</span><span class='line'>    <span class="n">content</span><span class="p">:</span> <span class="n">@Composable</span> <span class="n">RowScope</span><span class="p">.()</span> <span class="p">-&gt;</span> <span class="n">Unit</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">AnimatedVisibility</span><span class="p">(</span>
</span><span class='line'>       <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">sharedElement</span><span class="p">(</span>
</span><span class='line'>                <span class="n">sharedContentState</span> <span class="p">=</span> <span class="n">rememberSharedContentState</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">BottomNavSharedElementKey</span>
</span><span class='line'>                <span class="p">),</span>
</span><span class='line'>                <span class="n">animatedVisibilityScope</span> <span class="p">=</span> <span class="k">this</span><span class="p">,</span>
</span><span class='line'>                <span class="n">zIndexInOverlay</span> <span class="p">=</span> <span class="n">BottomNavSharedElementZIndex</span><span class="p">,</span>
</span><span class='line'>            <span class="p">),</span>
</span><span class='line'>        <span class="n">visible</span> <span class="p">=</span> <span class="n">canShowBottomNavigation</span><span class="p">,</span>
</span><span class='line'>        <span class="n">enter</span> <span class="p">=</span> <span class="n">enterTransition</span><span class="p">,</span>
</span><span class='line'>        <span class="n">exit</span> <span class="p">=</span> <span class="n">exitTransition</span><span class="p">,</span>
</span><span class='line'>        <span class="n">content</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">NavigationBar</span> <span class="p">{</span> <span class="p">...</span> <span class="p">},</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="n">data</span> <span class="k">object</span> <span class="nc">BottomNavSharedElementKey</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>注意：</strong> canShowBottomNavigation 是从 ScaffoldState 读取的，用于 AnimatedVisibility。</p>

<p>可以为其他持久性 UI 元素（例如导航栏或浮动操作按钮）编写同类扩展。功能模块可以依赖于脚手架模块，并按如下方式使用脚手架：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">FeedRoute</span><span class="p">(</span>
</span><span class='line'>    <span class="n">viewModel</span><span class="p">:</span> <span class="n">ListingFeedViewModel</span><span class="p">,</span>
</span><span class='line'>    <span class="c1">//从导航库中获取。</span>
</span><span class='line'>    <span class="c1">// 在 Navigation Compose 中，它由composable&lt;Destination&gt; { } lambda 提供。</span>
</span><span class='line'>    <span class="n">animatedVisibilityScope</span><span class="p">:</span> <span class="n">AnimatedVisibilityScope</span><span class="p">,</span>
</span><span class='line'>    <span class="c1">// 从导航目的地声明中传递。</span>
</span><span class='line'>    <span class="n">sharedTransitionScope</span><span class="p">:</span> <span class="n">SharedTransitionScope</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span> <span class="n">route</span> <span class="p">-&gt;</span>
</span><span class='line'>    <span class="n">rememberScaffoldState</span><span class="p">(</span>
</span><span class='line'>        <span class="n">animatedVisibilityScope</span> <span class="p">=</span> <span class="n">animatedVisibilityScope</span><span class="p">,</span>
</span><span class='line'>        <span class="n">sharedTransitionScope</span> <span class="p">=</span> <span class="n">sharedTransitionScope</span><span class="p">,</span>
</span><span class='line'>    <span class="p">).</span><span class="n">PersistentScaffold</span><span class="p">(</span>
</span><span class='line'>        <span class="n">topBar</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">TopAppBar</span><span class="p">(</span>
</span><span class='line'>                <span class="n">title</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">Text</span><span class="p">(</span><span class="n">text</span> <span class="p">=</span> <span class="n">stringResource</span><span class="p">(</span><span class="n">id</span> <span class="p">=</span> <span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">listing_app</span><span class="p">))</span>
</span><span class='line'>                <span class="p">},</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="n">content</span> <span class="p">=</span> <span class="p">{</span> <span class="n">paddingValues</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="n">ListingFeedScreen</span><span class="p">(</span>
</span><span class='line'>                <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="n">paddingValues</span><span class="p">),</span>
</span><span class='line'>                <span class="n">scaffoldState</span> <span class="p">=</span> <span class="k">this</span><span class="p">,</span>
</span><span class='line'>                <span class="n">state</span> <span class="p">=</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">collectAsStateWithLifecycle</span><span class="p">().</span><span class="n">value</span><span class="p">,</span>
</span><span class='line'>                <span class="n">actions</span> <span class="p">=</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">accept</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="n">navigationBar</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>           <span class="n">PersistentNavigationAppBar</span><span class="p">(</span>
</span><span class='line'>                <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">animateEnterExit</span><span class="p">(</span>
</span><span class='line'>                        <span class="n">enter</span> <span class="p">=</span> <span class="n">slideInVertically</span><span class="p">(</span><span class="n">initialOffsetY</span> <span class="p">=</span> <span class="p">{</span> <span class="n">it</span> <span class="p">}),</span>
</span><span class='line'>                        <span class="n">exit</span> <span class="p">=</span> <span class="n">slideOutVertically</span><span class="p">(</span><span class="n">targetOffsetY</span> <span class="p">=</span> <span class="p">{</span> <span class="n">it</span> <span class="p">}),</span>
</span><span class='line'>                    <span class="p">)</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="n">navigationRail</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">PersistentNavigationNavRail</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>每个使用的 API 以及它们支持的 UI/UX 如下所示：</p>

<p><img src="https://storage.googleapis.com/tunji-web-public/articles/68248e8ecc8e85f53ce1aa46/shared_elements_cropped.gif" alt="A" /></p>

<p><img src="https://storage.googleapis.com/tunji-web-public/articles/68248e8ecc8e85f53ce1aa46/navigation_changes_cropped.gif" alt="B" /></p>

<p><img src="https://storage.googleapis.com/tunji-web-public/articles/68248e8ecc8e85f53ce1aa46/local_changes_cropped.gif" alt="C" /></p>

<p>从上到下：跨导航目的地的持久 UI 共享元素、跨导航目的地的持久 UI 进入和退出以及同一目的地内的持久 UI 进入和退出。</p>

<p>如上表所示，使用 ScaffoldState 作为界面状态容器，可以根据 Jetpack Compose 动画 API 的优势进行定制，同时将它们组合成一个整体。更详细地说：</p>

<ol>
<li>ScaffoldState 和 Modifier.sharedElement()：在不同导航目标上调用的持久化界面元素将使用共享元素 API 来保持视觉连续性。在所示的示例中，每个导航目标都负责其自身的浮动操作按钮，但仍保持了持久化的效果。在此特定示例中，图库目标脚手架与详情目标完全相同，只是它使用不同的参数调用 PersistentFab。</li>
<li>ScaffoldState 和 AnimatedContent：持久化界面元素的调用可以使用 Modifier.animateEnterExit() 来定义 EnterTransition 和/或 ExitTransition 来用于导航更改。在此示例中，持久化导航栏通过垂直滑动来动画化地显示和隐藏。在此特定示例中，详情目标脚手架与动态目标完全相同，但以下几点不同：</li>
<li>不调用 PersistentNavigationAppBar。</li>
<li>调用 PersistentFab。</li>
<li>ScaffoldState、AnimatedVisibility 和 Modifier.animateBounds()：调用 PersistentNavigationAppBar 和/或 PersistentNavigationNavRail 会根据当前 WindowSizeClass（即本地屏幕变化）自动隐藏或显示。当其中一个显示或隐藏时，内容可组合项会根据变化调整其大小和位置。用户还可以直接将 EnterTransition 或 ExitTransition 传递给可组合项来自定义动画。</li>
</ol>


<h3>持久的 UI 和业务逻辑</h3>

<p>像导航栏或导航栏这样的持久性 UI 有时需要显示与其本地上下文相距甚远的状态；这就是业务逻辑。有时，这些信息可能位于不同的模块中。例如：</p>

<ul>
<li>未显示通知的通知标记。</li>
<li>消息的未读计数。</li>
<li>用户个人资料警报或提醒。</li>
</ul>


<p>在这种情况下，你的应用应该定义一个 AppState。在 Now In Android 示例中，这个 AppState 是 NiaAppState。在跨导航目标使用持久性 UI 时，这个 AppState 至关重要，因为它可以访问应用的导航语义以及填充导航栏中当前项目所需的所有资源。最简单的 AppState 可能如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Stable</span>
</span><span class='line'><span class="k">class</span> <span class="nc">AppState</span><span class="p">(</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">navigationStateHolder</span><span class="p">:</span> <span class="n">NavigationStateHolder</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">navState</span> <span class="k">by</span> <span class="n">navigationStateHolder</span><span class="p">.</span><span class="n">state</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">lateinit</span> <span class="k">var</span> <span class="py">sharedTransitionScope</span><span class="p">:</span> <span class="n">SharedTransitionScope</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">navItems</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">NavItem</span><span class="p">&gt;</span> <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="n">navItemsFrom</span><span class="p">(</span><span class="n">navState</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>注意：</strong> 在上面，导航状态由 Compose 状态支持，但是当使用带有 NavigationController 的导航 API 时，这仍然适用。</p>

<p>AppState 是应用层级服务的入口点。应用的导航状态、应用能够显示的窗格数量等等都驻留在 AppState 中。它可能需要访问业务逻辑，并且通常需要依赖注入的数据源。在 Now In Android 示例中，NiaAppState 使用数据源来确定哪些选项卡带有通知标记。</p>

<p>为了从 AppState 为持久化 UI 元素提供状态，ScaffoldState 应该依赖 AppState 作为内部实现细节，并作为状态持有者复合的示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">class</span> <span class="nc">ScaffoldState</span> <span class="k">internal</span> <span class="n">constructor</span><span class="p">(</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="k">internal</span> <span class="k">val</span> <span class="py">appState</span><span class="p">:</span> <span class="n">AppState</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">AnimatedVisibilityScope</span> <span class="k">by</span> <span class="n">animatedVisibilityScope</span><span class="p">,</span>
</span><span class='line'>    <span class="c1">// 从 AppState 中检索 SharedTransitionScope</span>
</span><span class='line'>    <span class="n">SharedTransitionScope</span> <span class="k">by</span> <span class="n">appState</span><span class="p">.</span><span class="n">sharedTransitionScope</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">internal</span> <span class="k">val</span> <span class="py">canShowNavRail</span>
</span><span class='line'>        <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="n">appState</span><span class="p">.</span><span class="n">isInEdgePane</span> <span class="p">&amp;&amp;</span> <span class="n">isMediumScreenWidthOrWider</span><span class="p">.</span><span class="n">value</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">internal</span> <span class="k">val</span> <span class="py">LocalAppState</span> <span class="p">=</span> <span class="n">staticCompositionLocalOf</span><span class="p">&lt;</span><span class="n">AppState</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="n">IllegalArgumentException</span><span class="p">(</span><span class="s">&quot;AppState must be provided in the app scaffolding.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>要检索要使用的 AppState，脚手架模块中应该有一个内部 LocalAppState 定义以及一个 App Composable。然后，此 AppState 会在应用的入口点提供给组合树，以便进行 Composing。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">App</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="n">appState</span><span class="p">:</span> <span class="n">AppState</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">AppTheme</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Surface</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 根 LookaheadScope 用于锚定所有共享元素转换</span>
</span><span class='line'>            <span class="n">SharedTransitionLayout</span><span class="p">(</span>
</span><span class='line'>                <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">()</span>
</span><span class='line'>            <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// 你可以选择保留对 SharedElementTransitionScope 的引用</span>
</span><span class='line'>                <span class="n">appState</span><span class="p">.</span><span class="n">sharedElementTransitionScope</span> <span class="p">=</span> <span class="k">this</span><span class="n">@SharedTransitionLayout</span>
</span><span class='line'>                <span class="n">CompositionLocalProvider</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">LocalAppState</span> <span class="n">provides</span> <span class="n">appState</span><span class="p">,</span>
</span><span class='line'>                <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="c1">// 应用 UI 的其余部分都放在这里，例如 `NavHost`，等等。</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">internal</span> <span class="k">val</span> <span class="py">LocalAppState</span> <span class="p">=</span> <span class="n">staticCompositionLocalOf</span><span class="p">&lt;</span><span class="n">AppState</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="n">IllegalStateException</span><span class="p">(</span><span class="s">&quot;CompositionLocal LocalAppState not present&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在 Android 应用程序中，上述内容将在活动中使用，类似于以下内容：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">class</span> <span class="nc">MainActivity</span> <span class="p">:</span> <span class="n">ComponentActivity</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">enableEdgeToEdge</span><span class="p">()</span>
</span><span class='line'>        <span class="k">super</span><span class="p">.</span><span class="n">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 在此处创建你的应用状态。如果它需要依赖注入的数据源</span>
</span><span class='line'>        <span class="c1">// 或访问导航控制器或导航状态，也请在此处提供或在 Composition 中提供。</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="py">appState</span><span class="p">:</span> <span class="n">AppState</span> <span class="p">=</span> <span class="p">...</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">setContent</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">App</span><span class="p">(</span>
</span><span class='line'>                <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>                <span class="n">appState</span> <span class="p">=</span> <span class="n">appState</span><span class="p">,</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来，用于记住 ScaffoldState 的调用站点将更新为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">rememberScaffoldState</span><span class="p">(</span>
</span><span class='line'>    <span class="c1">// 这是由导航库提供的</span>
</span><span class='line'>    <span class="n">animatedVisibilityScope</span><span class="p">:</span> <span class="n">AnimatedVisibilityScope</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">ScaffoldState</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">isMediumScreenWidthOrWider</span> <span class="p">=</span> <span class="n">isMediumScreenWidthOrWider</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">appState</span> <span class="p">=</span> <span class="n">LocalAppState</span><span class="p">.</span><span class="n">current</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">remember</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">ScaffoldState</span><span class="p">(</span>
</span><span class='line'>            <span class="n">animatedVisibilityScope</span> <span class="p">=</span> <span class="n">animatedVisibilityScope</span><span class="p">,</span>
</span><span class='line'>            <span class="n">isMediumScreenWidthOrWider</span> <span class="p">=</span> <span class="n">isMediumScreenWidthOrWider</span><span class="p">,</span>
</span><span class='line'>            <span class="c1">// SharedTransitionScope 现在由 AppState 提供</span>
</span><span class='line'>            <span class="n">appState</span> <span class="p">=</span> <span class="n">appState</span><span class="p">,</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>注意：</strong> LocalAppState 应该位于脚手架模块内部。</p>

<p>只需指定要运行的修饰符或转换即可声明 PersistentNavigationAppBar：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">fun</span> <span class="nf">ScaffoldState</span><span class="p">.</span><span class="n">PersistentNavigationAppBar</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="p">...,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">AnimatedVisibility</span><span class="p">(</span>
</span><span class='line'>       <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">sharedElement</span><span class="p">(...),</span>
</span><span class='line'>        <span class="p">...,</span>
</span><span class='line'>        <span class="n">content</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">NavigationBar</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">val</span> <span class="py">appState</span> <span class="p">=</span> <span class="n">LocalAppState</span><span class="p">.</span><span class="n">current</span>
</span><span class='line'>                <span class="n">appState</span><span class="p">.</span><span class="n">navItems</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span> <span class="n">item</span> <span class="p">-&gt;</span>
</span><span class='line'>                    <span class="n">NavigationBarItem</span><span class="p">(...)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>真正的持久化 UI</h2>

<p>如果持久化 UI 元素中存在一些无法通过共享元素保存的局部瞬时状态，则可以使用可移动共享元素。请考虑此处描述和实现的导航栏设计，其中选中某个选项卡时，选项卡之间会呈现动画效果：</p>

<p><img src="https://storage.googleapis.com/tunji-web-public/articles/68248e8ecc8e85f53ce1aa46/transient_animation.gif" alt="导航栏中的局部瞬态动画" /></p>

<p>幻想只能到此为止，此时需要真正的持久性。这可以通过添加可移动内容 API 来创建可移动的共享元素来实现。也就是说，架构将提升的不仅仅是 UI 状态，而是整个 UI 元素及其状态。要了解更多关于为什么此时需要可移动内容 API 的信息，请阅读以下详细介绍<a href="https://www.tunjid.com/articles/3-neat-animations-you-can-create-with-modifieranimatebounds-67e474130e9ba862fe18b5e5?open-graph-scrape=true">组合持久性概念的文章</a>。</p>

<p>在 Compose 中使用 movedContentOf 时，必须注意确保可移动内容每次只在一个位置进行组合。例如，从目的地 A 导航到目的地 B 时，在动画持续时间内，有两个目的地可组合项共存：</p>

<ol>
<li>目的地 A 动画退出。</li>
<li>目的地 B 动画进入。</li>
</ol>


<p>动画启动后，可移动导航栏必须立即与目的地 A 中的诱饵导航栏进行交换，同时，必须立即在目的地 B 开始组合。以下概述了实现此目的的界面逻辑。</p>

<h3>定义可移动持久界面</h3>

<p>ScaffoldState 导航栏首先将其声明拆分。仅依赖于 AppState 的部分作为 AppState 的扩展单独编写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">internal</span> <span class="k">fun</span> <span class="nf">AppState</span><span class="p">.</span><span class="n">NavigationBar</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NavigationBar</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">navItems</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span> <span class="n">item</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="n">NavigationBarItem</span><span class="p">(...)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>提升可移动持久化 UI</h3>

<p>真正持久化的导航栏 (NavigationBar) 可以使用可移动内容 (movableContentOf) 提升到 AppState 中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">class</span> <span class="nc">AppState</span><span class="p">(</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">internal</span> <span class="k">val</span> <span class="py">movableNavigationBar</span> <span class="p">=</span> <span class="n">movableContentOf</span><span class="p">&lt;</span><span class="n">Modifier</span><span class="p">&gt;</span> <span class="p">{</span> <span class="n">modifier</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="n">NavigationBar</span><span class="p">(</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">,</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>可移动持久 UI 的 UI 逻辑</h3>

<p>定义可移动导航栏后，将确定何时可以安全组合的逻辑添加到 ScaffoldState 中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">class</span> <span class="nc">ScaffoldState</span> <span class="k">internal</span> <span class="n">constructor</span><span class="p">(</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="k">internal</span> <span class="k">val</span> <span class="py">appState</span><span class="p">:</span> <span class="n">AppState</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">AnimatedVisibilityScope</span> <span class="k">by</span> <span class="n">animatedVisibilityScope</span><span class="p">,</span>
</span><span class='line'>    <span class="n">SharedTransitionScope</span> <span class="k">by</span> <span class="n">appState</span><span class="p">.</span><span class="n">sharedTransitionScope</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">internal</span> <span class="k">val</span> <span class="py">canShowNavigationBar</span> <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="p">!</span><span class="n">isMediumScreenWidthOrWider</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">internal</span> <span class="k">val</span> <span class="py">canUseMovableNavigationBar</span>
</span><span class='line'>        <span class="c1">// 从 AnimatedVisibility Scope 读取过渡目标状态</span>
</span><span class='line'>        <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="n">canShowNavigationBar</span> <span class="p">&amp;&amp;</span> <span class="n">transition</span><span class="p">.</span><span class="n">targetState</span> <span class="p">==</span> <span class="n">EnterExitState</span><span class="p">.</span><span class="n">Visible</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>构建可移动的持久化 UI</h3>

<p>最后，在 ScaffoldState 的公共扩展方法中，根据 ScaffoldState 中定义的 UI 逻辑，在 AppState 中的持久化 UI 元素与其诱饵元素之间进行切换：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">ScaffoldState</span><span class="p">.</span><span class="n">PeristentNavigationBar</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">AnimatedVisibility</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">sharedElement</span><span class="p">(...),</span>
</span><span class='line'>        <span class="n">visible</span> <span class="p">=</span> <span class="n">canShowNavigationBar</span><span class="p">,</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>        <span class="n">content</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">canUseMovableNavigationBar</span><span class="p">)</span> <span class="n">appState</span><span class="p">.</span><span class="n">movableNavigationBar</span><span class="p">(</span>
</span><span class='line'>                <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>            <span class="k">else</span> <span class="n">appState</span><span class="p">.</span><span class="n">NavigationBar</span><span class="p">(</span>
</span><span class='line'>                <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其结果如下所示：</p>

<p><img src="https://storage.googleapis.com/tunji-web-public/articles/68248e8ecc8e85f53ce1aa46/cropped_persistent_navigation_bar.gif" alt="使用可移动内容 (movableContentOf) 在导航栏中保留局部瞬态动画" /></p>

<h2>总结</h2>

<p>以上描述了一种用于应用持久化 UI 的架构模式。该架构的一大优势在于它能够扩展到平板电脑和桌面设备；这将在后续的博客文章中介绍。</p>

<p>总结一下，该架构支持以下功能：</p>

<ul>
<li>导航目标控制持久化 UI 动画，用于导航目标内部的局部变化，例如窗口大小变化。</li>
<li>导航目标控制持久化 UI 动画，用于跨导航目标进行导航变化。</li>
<li>完全自定义每个导航目标上哪些 UI 元素是持久化的，哪些不是。</li>
<li>一种将持久化 UI 元素描述为导航目标 ScaffoldState 函数的模式。</li>
<li>能够将具有内部瞬态状态的 UI 元素提升到 AppState，这些 UI 元素驱动的动画无法通过不同实例之间的共享元素过渡来近似实现。</li>
</ul>


<p>使用脚手架模块或类似组件，将 AppState 的细粒度控制分发到导航目标。</p>

<p><a href="https://github.com/tunjid/listingApp?open-graph-scrape=true">这里</a>可以看到一个带有脚手架模块、AppState 和每个导航目的地定制的应用程序中上述内容的示例。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Kotlin Multiplatform项目中使用DataStore]]></title>
    <link href="https://alexhilton.github.io/blog/2025/06/04/datastore-in-kmp/"/>
    <updated>2025-06-04T23:05:35+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/06/04/datastore-in-kmp</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自「Implementing DataStore in Kotlin Multiplatform Projects」，原文链接<a href="https://carrion.dev/en/posts/datastore-in-kmp/">https://carrion.dev/en/posts/datastore-in-kmp/</a>，由 Ignacio Carrión发布于2025年5月9日。</p></blockquote>

<p>DataStore 是 Google 开发的一种现代数据存储解决方案，用于替代 SharedPreferences。它提供了一个一致、类型安全的 API，用于存储键值对和类型化对象，并支持 Kotlin 协程和 Flow。随着 Kotlin Multiplatform (KMP) 的最新进展，我们现在可以将 DataStore 集成到 KMP 项目中，从而实现跨平台共享偏好设置和数据存储代码。这篇博文探讨了如何在 KMP 环境中配置、实现和优化 DataStore。</p>

<p><a href="https://alexhilton.github.io/blog/2025/06/04/datastore-in-kmp/"><img src="file:///Users/alexhilton/Downloads/datastore.png" title="auto auto" ></a></p>

<!-- more -->


<h2>理解 Kotlin 多平台环境中的 DataStore</h2>

<p>KMP 中的 DataStore 旨在提供跨平台一致的 API，同时利用平台特定的存储机制。DataStore 有两种类型：</p>

<ol>
<li>Preferences DataStore：用于存储键值对</li>
<li>Proto DataStore：用于使用协议缓冲区存储类型化对象</li>
</ol>


<p>在 KMP 上下文中，DataStore：</p>

<ol>
<li>平台特定的实现提供实际的存储机制</li>
<li>API 使用协程和 Flow，跨平台保持一致</li>
</ol>


<p>这种方法使我们能够用通用代码定义数据访问模式，而底层存储操作则由平台特定的实现处理。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// In commonMain - DataStore interface</span>
</span><span class='line'><span class="n">interface</span> <span class="n">UserPreferences</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">userData</span><span class="p">:</span> <span class="n">Flow</span><span class="p">&lt;</span><span class="n">UserData</span><span class="p">&gt;</span>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">updateUsername</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">updateEmail</span><span class="p">(</span><span class="n">email</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">clearData</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// In commonMain - Data model</span>
</span><span class='line'><span class="n">data</span> <span class="k">class</span> <span class="nc">UserData</span><span class="p">(</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">username</span><span class="p">:</span> <span class="n">String</span> <span class="p">=</span> <span class="s">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">email</span><span class="p">:</span> <span class="n">String</span> <span class="p">=</span> <span class="s">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">isLoggedIn</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">false</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>在 KMP 项目中设置数据存储</h2>

<p>要将 DataStore 集成到你的 KMP 项目中，你需要正确配置构建文件。以下是分步指南：</p>

<h3>1. 在共享模块中配置 build.gradle.kts 文件</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">plugins</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">kotlin</span><span class="p">(</span><span class="s">&quot;multiplatform&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">id</span><span class="p">(</span><span class="s">&quot;com.android.library&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">id</span><span class="p">(</span><span class="s">&quot;com.google.devtools.ksp&quot;</span><span class="p">)</span> <span class="n">version</span> <span class="s">&quot;2.1.20-2.0.1&quot;</span> <span class="c1">// For Proto DataStore</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">kotlin</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">androidTarget</span><span class="p">()</span>
</span><span class='line'>    <span class="n">iosX64</span><span class="p">()</span>
</span><span class='line'>    <span class="n">iosArm64</span><span class="p">()</span>
</span><span class='line'>    <span class="n">iosSimulatorArm64</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sourceSets</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">commonMain</span> <span class="k">by</span> <span class="n">getting</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">dependencies</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// For Preferences DataStore</span>
</span><span class='line'>                <span class="n">implementation</span><span class="p">(</span><span class="s">&quot;androidx.datastore:datastore-preferences-core:1.1.0&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// For coroutines</span>
</span><span class='line'>                <span class="n">implementation</span><span class="p">(</span><span class="s">&quot;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2. 从通用代码创建 DataStore 实例</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 获取单例 DataStore 实例，如有必要则创建它。</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">createDataStore</span><span class="p">(</span><span class="n">producePath</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">String</span><span class="p">):</span> <span class="n">DataStore</span><span class="p">&lt;</span><span class="n">Preferences</span><span class="p">&gt;</span> <span class="p">=</span>
</span><span class='line'>   <span class="n">PreferenceDataStoreFactory</span><span class="p">.</span><span class="n">createWithPath</span><span class="p">(</span>
</span><span class='line'>      <span class="n">produceFile</span> <span class="p">=</span> <span class="p">{</span> <span class="n">producePath</span><span class="p">().</span><span class="n">toPath</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>   <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">internal</span> <span class="n">const</span> <span class="k">val</span> <span class="py">dataStoreFileName</span> <span class="p">=</span> <span class="s">&quot;dice.preferences_pb&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>特定平台的考虑因素</h2>

<h3>Android 实现</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// shared/src/androidMain/kotlin/DataStore.kt</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">createDataStoreAndroid</span><span class="p">(</span><span class="n">context</span><span class="p">:</span> <span class="n">Context</span><span class="p">):</span> <span class="n">DataStore</span><span class="p">&lt;</span><span class="n">Preferences</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">createDataStore</span><span class="p">(</span>
</span><span class='line'>   <span class="n">producePath</span> <span class="p">=</span> <span class="p">{</span> <span class="n">context</span><span class="p">.</span><span class="n">filesDir</span><span class="p">.</span><span class="n">resolve</span><span class="p">(</span><span class="n">dataStoreFileName</span><span class="p">).</span><span class="n">absolutePath</span> <span class="p">}</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>iOS 实现</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// shared/src/iosMain/kotlin/DataStore.kt</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">createDataStoreIOS</span><span class="p">():</span> <span class="n">DataStore</span><span class="p">&lt;</span><span class="n">Preferences</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">createDataStore</span><span class="p">(</span>
</span><span class='line'>   <span class="n">producePath</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="py">documentDirectory</span><span class="p">:</span> <span class="n">NSURL</span><span class="p">?</span> <span class="p">=</span> <span class="n">NSFileManager</span><span class="p">.</span><span class="n">defaultManager</span><span class="p">.</span><span class="n">URLForDirectory</span><span class="p">(</span>
</span><span class='line'>         <span class="n">directory</span> <span class="p">=</span> <span class="n">NSDocumentDirectory</span><span class="p">,</span>
</span><span class='line'>         <span class="n">inDomain</span> <span class="p">=</span> <span class="n">NSUserDomainMask</span><span class="p">,</span>
</span><span class='line'>         <span class="n">appropriateForURL</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>         <span class="n">create</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'>         <span class="n">error</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>      <span class="n">requireNotNull</span><span class="p">(</span><span class="n">documentDirectory</span><span class="p">).</span><span class="n">path</span> <span class="p">+</span> <span class="s">&quot;/$dataStoreFileName&quot;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>实际示例：实现用户偏好存储库</h2>

<p>为了演示完整的实现，让我们创建一个使用 DataStore 的存储库：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// In commonMain</span>
</span><span class='line'><span class="k">class</span> <span class="nc">UserPreferencesRepository</span><span class="p">(</span><span class="k">private</span> <span class="k">val</span> <span class="py">dataStore</span><span class="p">:</span> <span class="n">PreferencesDataStore</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//定义preferences的键</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">object</span> <span class="nc">PreferenceKeys</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">USERNAME</span> <span class="p">=</span> <span class="n">stringPreferencesKey</span><span class="p">(</span><span class="s">&quot;username&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">EMAIL</span> <span class="p">=</span> <span class="n">stringPreferencesKey</span><span class="p">(</span><span class="s">&quot;email&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">IS_LOGGED_IN</span> <span class="p">=</span> <span class="n">booleanPreferencesKey</span><span class="p">(</span><span class="s">&quot;is_logged_in&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Get user data as a Flow</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">userData</span><span class="p">:</span> <span class="n">Flow</span><span class="p">&lt;</span><span class="n">UserData</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">dataStore</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">preferences</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="n">UserData</span><span class="p">(</span>
</span><span class='line'>            <span class="n">username</span> <span class="p">=</span> <span class="n">preferences</span><span class="p">[</span><span class="n">PreferenceKeys</span><span class="p">.</span><span class="n">USERNAME</span><span class="p">]</span> <span class="o">?:</span> <span class="s">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">email</span> <span class="p">=</span> <span class="n">preferences</span><span class="p">[</span><span class="n">PreferenceKeys</span><span class="p">.</span><span class="n">EMAIL</span><span class="p">]</span> <span class="o">?:</span> <span class="s">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">isLoggedIn</span> <span class="p">=</span> <span class="n">preferences</span><span class="p">[</span><span class="n">PreferenceKeys</span><span class="p">.</span><span class="n">IS_LOGGED_IN</span><span class="p">]</span> <span class="o">?:</span> <span class="k">false</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Update username</span>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">updateUsername</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">dataStore</span><span class="p">.</span><span class="n">updateData</span> <span class="p">{</span> <span class="n">preferences</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="n">preferences</span><span class="p">.</span><span class="n">toMutablePreferences</span><span class="p">().</span><span class="n">apply</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">this</span><span class="p">[</span><span class="n">PreferenceKeys</span><span class="p">.</span><span class="n">USERNAME</span><span class="p">]</span> <span class="p">=</span> <span class="n">name</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Update email</span>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">updateEmail</span><span class="p">(</span><span class="n">email</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">dataStore</span><span class="p">.</span><span class="n">updateData</span> <span class="p">{</span> <span class="n">preferences</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="n">preferences</span><span class="p">.</span><span class="n">toMutablePreferences</span><span class="p">().</span><span class="n">apply</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">this</span><span class="p">[</span><span class="n">PreferenceKeys</span><span class="p">.</span><span class="n">EMAIL</span><span class="p">]</span> <span class="p">=</span> <span class="n">email</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Set login status</span>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">setLoggedIn</span><span class="p">(</span><span class="n">isLoggedIn</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">dataStore</span><span class="p">.</span><span class="n">updateData</span> <span class="p">{</span> <span class="n">preferences</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="n">preferences</span><span class="p">.</span><span class="n">toMutablePreferences</span><span class="p">().</span><span class="n">apply</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">this</span><span class="p">[</span><span class="n">PreferenceKeys</span><span class="p">.</span><span class="n">IS_LOGGED_IN</span><span class="p">]</span> <span class="p">=</span> <span class="n">isLoggedIn</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Clear all data</span>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">clearData</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">dataStore</span><span class="p">.</span><span class="n">updateData</span> <span class="p">{</span> <span class="n">preferences</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="n">preferences</span><span class="p">.</span><span class="n">toMutablePreferences</span><span class="p">().</span><span class="n">apply</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">remove</span><span class="p">(</span><span class="n">PreferenceKeys</span><span class="p">.</span><span class="n">USERNAME</span><span class="p">)</span>
</span><span class='line'>                <span class="n">remove</span><span class="p">(</span><span class="n">PreferenceKeys</span><span class="p">.</span><span class="n">EMAIL</span><span class="p">)</span>
</span><span class='line'>                <span class="n">remove</span><span class="p">(</span><span class="n">PreferenceKeys</span><span class="p">.</span><span class="n">IS_LOGGED_IN</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// In commonMain - ViewModel or Presenter</span>
</span><span class='line'><span class="k">class</span> <span class="nc">UserViewModel</span><span class="p">(</span><span class="k">private</span> <span class="k">val</span> <span class="py">userPreferencesRepository</span><span class="p">:</span> <span class="n">UserPreferencesRepository</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">userData</span><span class="p">:</span> <span class="n">Flow</span><span class="p">&lt;</span><span class="n">UserData</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">userPreferencesRepository</span><span class="p">.</span><span class="n">userData</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">updateUserProfile</span><span class="p">(</span><span class="n">username</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">email</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">username</span><span class="p">.</span><span class="n">isNotBlank</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">userPreferencesRepository</span><span class="p">.</span><span class="n">updateUsername</span><span class="p">(</span><span class="n">username</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">email</span><span class="p">.</span><span class="n">isNotBlank</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">userPreferencesRepository</span><span class="p">.</span><span class="n">updateEmail</span><span class="p">(</span><span class="n">email</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">login</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">userPreferencesRepository</span><span class="p">.</span><span class="n">setLoggedIn</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">logout</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">userPreferencesRepository</span><span class="p">.</span><span class="n">setLoggedIn</span><span class="p">(</span><span class="k">false</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">clearUserData</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">userPreferencesRepository</span><span class="p">.</span><span class="n">clearData</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>KMP 中的高级数据存储功能</h2>

<p>DataStore 提供了几种可在 KMP 环境中利用的高级功能：</p>

<h3>1. 用于类型化对象的 Proto DataStore</h3>

<p>如果你需要存储复杂对象，Proto DataStore 提供了一个类型安全的解决方案：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='proto'><span class='line'><span class="c1">// 在 .proto 文件中定义数据结构</span>
</span><span class='line'><span class="na">syntax</span> <span class="o">=</span> <span class="s">&quot;proto3&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">option</span> <span class="na">java_package</span> <span class="o">=</span> <span class="s">&quot;com.example.app&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">option</span> <span class="na">java_multiple_files</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">message</span> <span class="nc">UserPreferences</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">string</span> <span class="na">username</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">string</span> <span class="na">email</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="na">is_logged_in</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// In commonMain - 创建序列化器</span>
</span><span class='line'><span class="k">class</span> <span class="nc">UserPreferencesSerializer</span> <span class="p">:</span> <span class="n">Serializer</span><span class="p">&lt;</span><span class="n">UserPreferences</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">val</span> <span class="py">defaultValue</span><span class="p">:</span> <span class="n">UserPreferences</span> <span class="p">=</span> <span class="n">UserPreferences</span><span class="p">.</span><span class="n">getDefaultInstance</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">readFrom</span><span class="p">(</span><span class="n">input</span><span class="p">:</span> <span class="n">InputStream</span><span class="p">):</span> <span class="n">UserPreferences</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">UserPreferences</span><span class="p">.</span><span class="n">parseFrom</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">writeTo</span><span class="p">(</span><span class="n">t</span><span class="p">:</span> <span class="n">UserPreferences</span><span class="p">,</span> <span class="n">output</span><span class="p">:</span> <span class="n">OutputStream</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">t</span><span class="p">.</span><span class="n">writeTo</span><span class="p">(</span><span class="n">output</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Proto DataStore 的平台特定实现</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2.数据迁移</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// In androidMain - 从 SharedPreferences 迁移到 DataStore</span>
</span><span class='line'><span class="k">val</span> <span class="py">dataStore</span> <span class="p">=</span> <span class="n">context</span><span class="p">.</span><span class="n">createDataStore</span><span class="p">(</span>
</span><span class='line'>    <span class="n">name</span> <span class="p">=</span> <span class="s">&quot;user_preferences&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">produceMigrations</span> <span class="p">=</span> <span class="p">{</span> <span class="n">context</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="n">listOf</span><span class="p">(</span>
</span><span class='line'>            <span class="n">SharedPreferencesMigration</span><span class="p">(</span>
</span><span class='line'>                <span class="n">context</span> <span class="p">=</span> <span class="n">context</span><span class="p">,</span>
</span><span class='line'>                <span class="n">sharedPreferencesName</span> <span class="p">=</span> <span class="s">&quot;legacy_preferences&quot;</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3.处理异常</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// In commonMain - 数据操作过程中的异常处理</span>
</span><span class='line'><span class="k">val</span> <span class="py">userData</span> <span class="p">=</span> <span class="n">dataStore</span><span class="p">.</span><span class="n">data</span>
</span><span class='line'>    <span class="p">.</span><span class="k">catch</span> <span class="p">{</span> <span class="n">exception</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="c1">// 处理异常（例如数据损坏）</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">exception</span> <span class="k">is</span> <span class="n">IOException</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">emit</span><span class="p">(</span><span class="n">emptyPreferences</span><span class="p">())</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="n">exception</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">preferences</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="c1">// Map preferences to your data model</span>
</span><span class='line'>        <span class="n">UserData</span><span class="p">(</span>
</span><span class='line'>            <span class="n">username</span> <span class="p">=</span> <span class="n">preferences</span><span class="p">[</span><span class="n">USERNAME</span><span class="p">]</span> <span class="o">?:</span> <span class="s">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">email</span> <span class="p">=</span> <span class="n">preferences</span><span class="p">[</span><span class="n">EMAIL</span><span class="p">]</span> <span class="o">?:</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>KMP 中数据存储的最佳实践</h2>

<ol>
<li>利用协程和 Flow 进行异步操作

<ul>
<li>DataStore 操作本质上是异步的</li>
<li>使用 Flow 观察存储数据的变化</li>
<li>应用 Map、Filter 和 Combine 等 Flow 操作符进行数据转换</li>
</ul>
</li>
<li>创建存储库层

<ul>
<li>将 DataStore 操作抽象到存储库后面</li>
<li>这样可以更轻松地根据需要切换实现</li>
<li>为你的业务逻辑提供简洁的 API</li>
</ul>
</li>
<li>优雅地处理错误

<ul>
<li>使用 catch 操作符处理 Flow 中的异常</li>
<li>在无法读取数据时提供回退值</li>
<li>考虑为关键操作实现重试机制</li>
</ul>
</li>
<li>优化性能

<ul>
<li>最大限度地减少 DataStore 更新次数</li>
<li>将相关的更改集中处理</li>
<li>使用 distinctUntilChanged() 避免不必要的排放</li>
</ul>
</li>
<li>彻底测试你的 DataStore 代码

<ul>
<li>在 commonTest 中为你的存储库编写测试</li>
<li>使用测试替身模拟不同的场景</li>
</ul>
</li>
</ol>


<h2>结论</h2>

<p>将 DataStore 集成到 Kotlin Multiplatform 项目中，提供了一种现代化、类型安全的跨平台数据存储和访问方法。</p>

<p>本文概述的方法提供了一种实用的方法，可以跨平台共享首选项和数据存储逻辑，并且只需极少的平台特定代码。DataStore 对协程和 Flow 的支持使其与 KMP 项目完美契合，能够通过一致的 API 实现响应式和异步数据操作。</p>

<p>通过遵循本文概述的配置步骤、平台特定注意事项和最佳实践，你可以在 KMP 项目中成功实现 DataStore，并创建稳定、高效的跨平台数据存储解决方案，并且只需极少的平台特定代码。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[揭秘原生View与Jetpack Compose之间的传送门]]></title>
    <link href="https://alexhilton.github.io/blog/2025/06/02/android-vies-in-compose/"/>
    <updated>2025-06-02T21:44:19+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/06/02/android-vies-in-compose</id>
    <content type="html"><![CDATA[<p>芳菲随春去，碧绿入夏来，不知不觉中<a href="https://juejin.cn/column/7367555191338467337">Compose专题</a>已经写了近40篇文章了，从Compose各组件的使用方法，到Compose的编程思想，再到内部原理和最佳实践。通过<a href="https://juejin.cn/column/7367555191338467337">这一系列的文章</a>相信对Compose已经有了足够的理解，能够在项目中进行实战和运用。学无止境，今天将继续学习，重点探讨如何在已有的项目中使用Compose。</p>

<p><a href="https://alexhilton.github.io/blog/2025/06/02/android-vies-in-compose/"><img src="file:///Users/alexhilton/Downloads/portal_2.png" title="auto auto" ></a></p>

<!-- more -->


<h2>缘起</h2>

<p>无疑Jetpack Compose是一个优秀的声明式UI框架，它与原生的View方式最大的区别，在于思考问题的方式上并不一样。声明式框架能把开发者从繁杂的命令式的UI细节中解放出来，重点思考一个好的体验应该是什么样子的，而具体的UI细节由框架来处理。尽管如此，毕竟Compose是近几年来发展起来的，现今大量的项目仍是原生View主导的。此外，Compose也还在发展中，有些特定业务领域如Camera，视频，3D渲染，还没有能力支持。因此，整合原生View和Compose是项目中很现实的一个难题，本文将重点讨论两个议题：一个是如何在原生View中嵌入Compose，另一个就是如何在Compose中嵌入原生View。</p>

<p><strong>注意：</strong> 本文中提到的两个组件ComposeView和AndroidView都仅在Jetpack Compose（for Android）生效，并不适用于跨平台的Compose Multiplatform。</p>

<h2>在原生View中嵌入Compose</h2>

<p>第一个传送门是如何进入Compose的世界。相信现在绝大多数项目都是基于原生View的，借助<a href="https://developer.android.com/reference/kotlin/androidx/compose/ui/platform/ComposeView">ComposeView</a>就可以进入到Compose的世界。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">composeView</span> <span class="p">=</span> <span class="n">ComposeView</span><span class="p">(</span><span class="n">context</span><span class="p">).</span><span class="n">apply</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">setContent</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// 这里调用Composables</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ComposeView是View的一个子类，能够作为Compose的容器，在<a href="https://developer.android.com/reference/kotlin/androidx/compose/ui/platform/ComposeView#setContent(kotlin.Function0">其setContent方法</a>)中提供一个Composable即可。ComposeView与其他View一样，可以用在View tree中，用在Fragment里和Activity里面。实际上作为平台的入口ComponentActivity用的也是ComposeView。</p>

<h3>在View层级中直接嵌入</h3>

<p>ComposeView就是一个普通的Android View，跟其他View的子类是一样的，所以可以把它放在任何可以使用View的地方，比如一个布局里面，作为一个页面的一部分。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;LinearLayout</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">xmlns:tools=</span><span class="s">&quot;http://schemas.android.com/tools&quot;</span>
</span><span class='line'>    <span class="na">android:id=</span><span class="s">&quot;@+id/container&quot;</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:orientation=</span><span class="s">&quot;vertical&quot;</span>
</span><span class='line'>    <span class="na">tools:context=</span><span class="s">&quot;.MainActivity&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;androidx.compose.ui.platform.ComposeView</span>
</span><span class='line'>        <span class="na">android:id=</span><span class="s">&quot;@+id/compose_view&quot;</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;Button</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:text=</span><span class="s">&quot;WidgetButton&quot;</span>
</span><span class='line'>        <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/LinearLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>注意：</strong> 尽管可以把ComposeView当成普通的View，直接嵌入到布局中，作为页面中的一部分，但这并不是一个好的做法，一来是不能发挥Compose的优势，另外Compose本身是有特定的生命周期的（重组），它需要知道平台的生命周期，以管控它自己的生命周期。而常规的View tree之中是没有平台生命周期的，因为常规的View tree并不关心平台的生命周期，view tree主要受窗口影响（attachToWindow，detachFromWindow），这个与平台组件的生命周期没有关系。</p>

<h3>用在Fragment中</h3>

<p>想要在某个Fragment中集成Compose的方式就是把ComposeView作为Fragment的根View即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">class</span> <span class="nc">ExampleFragmentNoXml</span> <span class="p">:</span> <span class="n">Fragment</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreateView</span><span class="p">(</span>
</span><span class='line'>        <span class="n">inflater</span><span class="p">:</span> <span class="n">LayoutInflater</span><span class="p">,</span>
</span><span class='line'>        <span class="n">container</span><span class="p">:</span> <span class="n">ViewGroup</span><span class="p">?,</span>
</span><span class='line'>        <span class="n">savedInstanceState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">?</span>
</span><span class='line'>    <span class="p">):</span> <span class="n">View</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">ComposeView</span><span class="p">(</span><span class="n">requireContext</span><span class="p">()).</span><span class="n">apply</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 当View的宿主destroy时销毁组合</span>
</span><span class='line'>            <span class="n">setViewCompositionStrategy</span><span class="p">(</span><span class="n">ViewCompositionStrategy</span><span class="p">.</span><span class="n">DisposeOnViewTreeLifecycleDestroyed</span><span class="p">)</span>
</span><span class='line'>            <span class="n">setContent</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">MaterialTheme</span> <span class="p">{</span>
</span><span class='line'>                    <span class="c1">// 进入到Compose世界</span>
</span><span class='line'>                    <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Hello Compose!&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>用在Activity中</h3>

<p>这其实是最好的方式，在一个新的页面窗口中使用Compose，这就能与其余view独立开来，是最为理想的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">class</span> <span class="nc">ExampleActivity</span> <span class="p">:</span> <span class="n">ComponentActivity</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">super</span><span class="p">.</span><span class="n">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">setContent</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">MaterialTheme</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">Greeting</span><span class="p">(</span><span class="n">name</span> <span class="p">=</span> <span class="s">&quot;compose&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">Greeting</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Text</span><span class="p">(</span><span class="n">text</span> <span class="p">=</span> <span class="s">&quot;Hello $name!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>使用建议</h3>

<p>虽然ComposeView可以当成一个普通的View来使用，但最为合理的方式就是在一个新的Activity中才使用Compose，也就是说当有一个全新的页面时，考虑使用Compose来开发，这样才能发挥出它的价值。</p>

<p>除非有特别的需求，否则不要把ComposeView作为现有页面的一部分嵌入到View tree中（也就是作为页面的一部分）。</p>

<p>至于在Fragment中使用，如果是一个全新的页面，而非现有布局的一部分，那也可以考虑使用Compose。</p>

<p><strong>注意：</strong> 其根本原因在于，我们使用Jetpack Compose并不是图它能实现什么特别的UI效果，Compose能做的事情View都能做，甚至它不能做的事情View也能做。用Compose是因为它是声明式的UI框架，在开发效率和可扩展性上面有巨大的优势。所以，只应该在想要发挥声明式框架优势的时候，才考虑使用它，并且应该从一个全新的页面开始。</p>

<h2>在Compose中嵌入原生View</h2>

<p>Jetpack Compose提供了足够丰富的组件，足以应对常规的UI，但它毕竟还不是特别的成熟，总会遇到一些场景，发现Compose无法胜任，而且并不是通过自定义组件就能够解决的，比如一些特定领域的UI，如camera，如视频，如3D渲染。或者说，已经有了自定义好的View，并不想重复开发。再或者说对于一些三方的库，它并没有对应的Compose组件。这些场景就需要把原生的View嵌入到Compose之中。</p>

<p><a href="https://developer.android.com/reference/kotlin/androidx/compose/ui/viewinterop/package-summary#AndroidView(kotlin.Function1,androidx.compose.ui.Modifier,kotlin.Function1,kotlin.Function1,kotlin.Function1">AndroidView</a>)就是专门用于把原生View嵌入到Compose中的一个特殊composable。它就像一个传送门一样，能把原生的View，无论是一个现成的自定义View，还是特定领域的View或者三方库的View，带入到Compose中，变成一个composable。</p>

<h3>AndroidView的使用方法</h3>

<p>AndroidView是一个composable，把它放在想要的位置即可。它有三个参数，一个是常规的Modifier用以约束这个composable的；另两个是lambda，一个是用于创建View的，返回一个View的实例，只会被调用一次；另一个就是用于更新View的，会被调用多次：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">CustomView</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">selectedItem</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="m">0</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 添加原生View到Compose</span>
</span><span class='line'>    <span class="n">AndroidView</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">(),</span>
</span><span class='line'>        <span class="n">factory</span> <span class="p">=</span> <span class="p">{</span> <span class="n">context</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="c1">// 创建View的实例</span>
</span><span class='line'>            <span class="n">MyView</span><span class="p">(</span><span class="n">context</span><span class="p">).</span><span class="n">apply</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// 设置View的点击事件，更新状态，这会触发重组</span>
</span><span class='line'>                <span class="n">setOnClickListener</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">selectedItem</span> <span class="p">=</span> <span class="m">1</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="n">update</span> <span class="p">=</span> <span class="p">{</span> <span class="n">view</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="c1">// 更新View的状态</span>
</span><span class='line'>            <span class="c1">// 这里读了状态，所以重组时update会被再次调用，view能拿到最新的状态</span>
</span><span class='line'>            <span class="n">view</span><span class="p">.</span><span class="n">selectedItem</span> <span class="p">=</span> <span class="n">selectedItem</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">ContentExample</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Column</span><span class="p">(</span><span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Look at this CustomView!&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">CustomView</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>注意：</strong> factory仅会被调用一次，用于创建View实例，update会被调用多次，用于更新view的状态，包括初次组合时，也就是factory执行之后，就会调用update。AndroidView函数会帮助提供View需要的参数context，以及管理View的实例，所以update中会把view当作参数传给我们，所以我们完全没有必要再用额外的状态（remember）去缓存View的实例了。</p>

<h3>使用建议</h3>

<p>虽然AndroidView是一个传送门，可以连接两个世界，但是能不用还是不要用，非必要不使用。如果能用Compose搞定的事情，还是要用Compose来搞，比如用Canvas去实现自定义组件。</p>

<p>需要使用AndroidView的场景只有三个：一是有现成的自定义View，拿过来就可以用，不想二次开发；二是三方库的View；三就是Compose确实搞不定的特定领域，如WebView，如视频，如SurfaceView或者3D渲染（OpenGL ES）等等。除以之外，不建议使用。</p>

<p>还需要特别注意的是，如果原生的View交互比较复杂，不光是点击，还涉及Touch事件处理，处理事件的同时还要不断更新View的状态，那也不应该使用它。比较理想的情况是，嵌入的这个View是一个比较纯粹的生产者，比如它只产生事件，不需要再往回更新状态；或者是一个比较纯粹的消费者，比如它就负责展示，只需要塞数据就行了。</p>

<h2>总结</h2>

<p>网上的教程或者Demo中的世界是很美好的，往往都是一个新建的项目，一个新的页面，直接就进入了Compose世界，也都在讲Compose能做的事情。但现实的世界往往不是这样子的，极少情况下是全新开始的项目，往往需要与遗留代码打交道，需要实现的需求也是多种多样的。本文中介绍了两个传送门，ComposeView和AndroidView可以方便地连接原生View和Compose两个世界，为现实项目中遇到的问题提供了一个可行的解决方案。</p>

<h3>让Compose支持OpenGL ES</h3>

<ul>
<li><a href="https://stackoverflow.com/questions/78796021/how-to-render-opengl-alongside-jetpack-compose-ui-without-covering-other-element">How to render OpenGL alongside Jetpack Compose UI without covering other elements</a></li>
<li><a href="https://www.reddit.com/r/Kotlin/comments/on36sy/experiment_to_make_opengl_work_together_with/?rdt=62185">Experiment to make OpenGL work together with Jetpack Compose</a></li>
<li><a href="https://composables.com/foundation/androidexternalsurface">AndroidExternalSurface</a></li>
<li><a href="https://youtrack.jetbrains.com/issue/CMP-3810/Using-Open-GL-with-Compose-Multiplatform">Using Open GL with Compose Multiplatform</a></li>
</ul>


<h2>References</h2>

<ul>
<li><a href="https://developer.android.com/develop/ui/compose/migrate/interoperability-apis/compose-in-views">Using Compose in Views</a></li>
<li><a href="https://developer.android.com/develop/ui/compose/migrate/interoperability-apis/views-in-compose">Using Views in Compose</a></li>
<li><a href="https://medium.com/@seungbae2/jetpack-compose-androidview-seamless-integration-of-android-views-into-compose-ui-644f217437d3">Jetpack Compose AndroidView: Seamless Integration of Android Views into Compose UI</a></li>
<li><a href="https://stackoverflow.com/questions/59995970/using-custom-views-with-jetpack-compose">Using Custom Views with Jetpack Compose</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Jetpack Compose构建创意动画]]></title>
    <link href="https://alexhilton.github.io/blog/2025/05/31/animations-in-jetpack-compose/"/>
    <updated>2025-05-31T23:19:03+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/05/31/animations-in-jetpack-compose</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自「Animating Inside and Outside the Box with Jetpack Compose」，原文链接<a href="https://medium.com/proandroiddev/animating-inside-and-outside-the-box-with-jetpack-compose-a56eba1b6af6">https://medium.com/proandroiddev/animating-inside-and-outside-the-box-with-jetpack-compose-a56eba1b6af6</a>，由Nirbhay Pherwani发布于2023年12月13日。</p></blockquote>

<p><a href="https://alexhilton.github.io/blog/2025/05/31/animations-in-jetpack-compose/"><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*YDhqS2nzvjXmvlC58vcDNQ.png" title="auto auto" ></a></p>

<!-- more -->


<h2>缘起</h2>

<p>动画能够让用户界面充满活力、引人入胜。在Android中，Jetpack Compose提供高级工具，让你轻松掌握这项强大功能，打造真正的动态UI。本文将深入探讨 Jetpack Compose 中动画的深层技术。</p>

<p><strong>译注：</strong> 虽然原文是以Jetpack Compose为基础来写的，但其实动画这块并不涉及平台特性，也适用于Compose Multiplatform。</p>

<p>我们将涵盖一系列技巧，从创建流畅的、基于物理的动效（增添真实感）到创建复杂的编排序列（为界面增添叙事质感）。无论你是想提升技能，还是仅仅想探索无限可能，本教程都将提供实用的见解，帮助你的应用不仅运行流畅，还能让用户在每次交互中都感到愉悦。</p>

<p>让我们深入探索这些动画如何改变你的 UI设计方法，使其更加直观、响应迅速，并为用户带来愉悦的体验。</p>

<h2>第 1 部分 — Jetpack Compose中的自定义动画</h2>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*C1_mzDHNHOfSZkIiULgRzw.gif" alt="游戏角色的移动" /></p>

<h3>利用自定义动画实现动态交互</h3>

<p>在本节中，我们将探索如何在 Jetpack Compose中使用高级自定义动画来创建动态且可交互的 UI 元素。我们将重点介绍一个真实示例，该示例演示了用户交互如何以有意义的方式影响动画。</p>

<h3>案例 - 交互式游戏角色移动</h3>

<p>我们将通过一个示例来说明这一概念，其中游戏角色（由面部图标表示）沿着由用户可拖动控制点确定的路径移动。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">GameCharacterMovement</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">startPosition</span> <span class="p">=</span> <span class="n">Offset</span><span class="p">(</span><span class="m">100f</span><span class="p">,</span> <span class="m">100f</span><span class="p">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">endPosition</span> <span class="p">=</span> <span class="n">Offset</span><span class="p">(</span><span class="m">250f</span><span class="p">,</span> <span class="m">400f</span><span class="p">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">controlPoint</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="n">Offset</span><span class="p">(</span><span class="m">200f</span><span class="p">,</span> <span class="m">300f</span><span class="p">))</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">position</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">Animatable</span><span class="p">(</span><span class="n">startPosition</span><span class="p">,</span> <span class="n">Offset</span><span class="p">.</span><span class="n">VectorConverter</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">controlPoint</span><span class="p">.</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">position</span><span class="p">.</span><span class="n">animateTo</span><span class="p">(</span>
</span><span class='line'>            <span class="n">targetValue</span> <span class="p">=</span> <span class="n">endPosition</span><span class="p">,</span>
</span><span class='line'>            <span class="n">animationSpec</span> <span class="p">=</span> <span class="n">keyframes</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">durationMillis</span> <span class="p">=</span> <span class="m">5000</span>
</span><span class='line'>                <span class="n">controlPoint</span><span class="p">.</span><span class="n">value</span> <span class="n">at</span> <span class="m">2500</span> <span class="c1">// 可拖动控制点控制的中间点</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">onControlPointChange</span><span class="p">:</span> <span class="p">(</span><span class="n">offset</span><span class="p">:</span> <span class="n">Offset</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">controlPoint</span><span class="p">.</span><span class="n">value</span> <span class="p">=</span> <span class="n">it</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Box</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Icon</span><span class="p">(</span>
</span><span class='line'>            <span class="n">Icons</span><span class="p">.</span><span class="n">Filled</span><span class="p">.</span><span class="n">Face</span><span class="p">,</span> <span class="n">contentDescription</span> <span class="p">=</span> <span class="s">&quot;Localized description&quot;</span><span class="p">,</span> <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                <span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">50.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">offset</span><span class="p">(</span><span class="n">x</span> <span class="p">=</span> <span class="n">position</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">x</span><span class="p">.</span><span class="n">dp</span><span class="p">,</span> <span class="n">y</span> <span class="p">=</span> <span class="n">position</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">y</span><span class="p">.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">DraggableControlPoint</span><span class="p">(</span><span class="n">controlPoint</span><span class="p">.</span><span class="n">value</span><span class="p">,</span> <span class="n">onControlPointChange</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>代码说明</h4>

<ul>
<li>GameCharacterMovement 为代表游戏角色的图标设置动画。动画路径由 controlPoint 控制，该控制点通过用户交互设置和更新。</li>
<li>Animatable 用于将图标的位置从 startPosition 平滑过渡到 endPosition。</li>
<li>LaunchedEffect 监听 controlPoint 值的变化，并在控制点移动时重新触发动画。</li>
<li>animationSpec — 这是一种配置项，用于定义动画的持续时间、延迟和缓动。它决定了动画值如何随时间变化。</li>
<li>keyframes — 允许你在动画的特定时间点指定值，从而控制动画的中间点。这对于创建复杂的、精心设计的动画特别有用。</li>
<li>keyframes 块将动画定义为一系列关键帧。在 2500 毫秒（中间点）时，角色到达控制点，然后继续移动到结束位置。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">DraggableControlPoint</span><span class="p">(</span><span class="n">controlPoint</span><span class="p">:</span> <span class="n">Offset</span><span class="p">,</span> <span class="n">onControlPointChange</span><span class="p">:</span> <span class="p">(</span><span class="n">Offset</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">localPosition</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="n">controlPoint</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">offset</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">IntOffset</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">x</span> <span class="p">=</span> <span class="n">localPosition</span><span class="p">.</span><span class="n">x</span><span class="p">.</span><span class="n">roundToInt</span><span class="p">()</span> <span class="p">-</span> <span class="m">15</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">y</span> <span class="p">=</span> <span class="n">localPosition</span><span class="p">.</span><span class="n">y</span><span class="p">.</span><span class="n">roundToInt</span><span class="p">()</span> <span class="p">-</span> <span class="m">15</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">30.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">Red</span><span class="p">,</span> <span class="n">shape</span> <span class="p">=</span> <span class="n">CircleShape</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">pointerInput</span><span class="p">(</span><span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">detectDragGestures</span><span class="p">(</span><span class="n">onDragEnd</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">onControlPointChange</span><span class="p">(</span><span class="n">localPosition</span><span class="p">)</span>
</span><span class='line'>                <span class="p">})</span> <span class="p">{</span> <span class="n">_</span><span class="p">,</span> <span class="n">dragAmount</span> <span class="p">-&gt;</span>
</span><span class='line'>                    <span class="c1">// adjust based on screen bounds</span>
</span><span class='line'>                    <span class="k">val</span> <span class="py">newX</span> <span class="p">=</span> <span class="p">(</span><span class="n">localPosition</span><span class="p">.</span><span class="n">x</span> <span class="p">+</span> <span class="n">dragAmount</span><span class="p">.</span><span class="n">x</span><span class="p">).</span><span class="n">coerceIn</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="m">600f</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">val</span> <span class="py">newY</span> <span class="p">=</span> <span class="p">(</span><span class="n">localPosition</span><span class="p">.</span><span class="n">y</span> <span class="p">+</span> <span class="n">dragAmount</span><span class="p">.</span><span class="n">y</span><span class="p">).</span><span class="n">coerceIn</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="m">600f</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">localPosition</span> <span class="p">=</span> <span class="n">Offset</span><span class="p">(</span><span class="n">newX</span><span class="p">,</span> <span class="n">newY</span><span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>代码说明</h4>

<ul>
<li>DraggableControlPoint 是一个可组合项，允许用户以交互方式更改控制点的位置。</li>
<li>拖动控制点会更新 localPosition，并在拖动手势完成（onDragEnd）后将其反馈回 GameCharacterMovement。此交互会改变动画图标的路径。</li>
</ul>


<h3>实际用例</h3>

<ol>
<li>交互式教育应用：在教育应用中，动画可用于提升学习的吸引力。例如，在天文学应用中，拖动行星沿其轨道运行即可查看不同的星座。</li>
<li>交互式故事叙述和游戏：在数字故事叙述或游戏应用中，允许用户通过可拖动元素来影响故事或游戏环境，可以创造更具沉浸感的体验。</li>
</ol>


<h2>第 2 部分 — 在 Jetpack Compose中编排复杂动画</h2>

<h3>同步多个元素以实现和谐效果</h3>

<p>在本部分中，我们将深入探讨在 Jetpack Compose 中编排（Choreographing）复杂动画的艺术。我们专注于创建同步动画，使多个元素能够无缝交互，从而提升整体用户体验。</p>

<h3>A) 连锁反应动画 — 多米诺骨牌效应</h3>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*iNeJJU3ixcdcZnQFHHSWYw.gif" alt="多米诺骨牌效应" /></p>

<p>通过设置一系列动画可以在 UI 中创建多米诺骨牌效应，其中一个动画的完成会触发下一个动画的开始。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">DominoEffect</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">animatedValues</span> <span class="p">=</span> <span class="n">List</span><span class="p">(</span><span class="m">6</span><span class="p">)</span> <span class="p">{</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">Animatable</span><span class="p">(</span><span class="m">0f</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">animatedValues</span><span class="p">.</span><span class="n">forEachIndexed</span> <span class="p">{</span> <span class="n">index</span><span class="p">,</span> <span class="n">animate</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="n">animate</span><span class="p">.</span><span class="n">animateTo</span><span class="p">(</span>
</span><span class='line'>                <span class="n">targetValue</span> <span class="p">=</span> <span class="m">1f</span><span class="p">,</span>
</span><span class='line'>                <span class="n">animationSpec</span> <span class="p">=</span> <span class="n">tween</span><span class="p">(</span><span class="n">durationMillis</span> <span class="p">=</span> <span class="m">1000</span><span class="p">,</span> <span class="n">delayMillis</span> <span class="p">=</span> <span class="n">index</span> <span class="p">*</span> <span class="m">100</span><span class="p">)</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Box</span> <span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">()){</span>
</span><span class='line'>      <span class="n">animatedValues</span><span class="p">.</span><span class="n">forEachIndexed</span> <span class="p">{</span> <span class="n">index</span><span class="p">,</span> <span class="n">value</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                <span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">50.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">offset</span><span class="p">(</span><span class="n">x</span> <span class="p">=</span> <span class="p">((</span><span class="n">index</span><span class="p">+</span><span class="m">1</span><span class="p">)</span> <span class="p">*</span> <span class="m">50</span><span class="p">).</span><span class="n">dp</span><span class="p">,</span> <span class="n">y</span> <span class="p">=</span> <span class="p">((</span><span class="n">index</span><span class="p">+</span><span class="m">1</span><span class="p">)</span> <span class="p">*</span> <span class="m">30</span><span class="p">).</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">getRandomColor</span><span class="p">(</span><span class="n">index</span><span class="p">).</span><span class="n">copy</span><span class="p">(</span><span class="n">alpha</span> <span class="p">=</span> <span class="n">value</span><span class="p">.</span><span class="n">value</span><span class="p">))</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">getRandomColor</span><span class="p">(</span><span class="n">seed</span><span class="p">:</span> <span class="n">Int</span><span class="p">):</span> <span class="n">Color</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">random</span> <span class="p">=</span> <span class="n">Random</span><span class="p">(</span><span class="n">seed</span> <span class="p">=</span> <span class="n">seed</span><span class="p">).</span><span class="n">nextInt</span><span class="p">(</span><span class="m">256</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Color</span><span class="p">(</span><span class="n">random</span><span class="p">,</span> <span class="n">random</span><span class="p">,</span> <span class="n">random</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>代码说明</h4>

<ul>
<li>animatedValues 是一个Animatable对象的列表，每个值控制一个框的 Alpha（不透明度）。</li>
<li>LaunchedEffect 会触发这些值的一系列动画，从而创建一种交错效果，即每个框在前一个框之后淡入，类似于多米诺骨牌倒下。</li>
<li>getRandomColor 函数会为每个框生成随机的灰色阴影，为序列中的每个组件添加独特的视觉元素。</li>
<li>这些框沿屏幕对角线放置，增强了多米诺骨牌效应。</li>
</ul>


<h3>B) 交互式滚动时间轴</h3>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*Kk-V0g5pEqy83NajRy_6lA.gif" alt="交互式滚动时间轴" /></p>

<p>在这个时间轴中，每个元素都会随着用户滚动而淡入并移动到位。我们将使用 LazyColumn来呈现可滚动列表，并使用Animatable来呈现动画。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">InteractiveTimeline</span><span class="p">(</span><span class="n">timelineItems</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">scrollState</span> <span class="p">=</span> <span class="n">rememberLazyListState</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">LazyColumn</span><span class="p">(</span><span class="n">state</span> <span class="p">=</span> <span class="n">scrollState</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">itemsIndexed</span><span class="p">(</span><span class="n">timelineItems</span><span class="p">)</span> <span class="p">{</span> <span class="n">index</span><span class="p">,</span> <span class="n">item</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">animatableAlpha</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">Animatable</span><span class="p">(</span><span class="m">0f</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">isVisible</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">derivedStateOf</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">scrollState</span><span class="p">.</span><span class="n">firstVisibleItemIndex</span> <span class="p">&lt;=</span> <span class="n">index</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">isVisible</span><span class="p">.</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">isVisible</span><span class="p">.</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">animatableAlpha</span><span class="p">.</span><span class="n">animateTo</span><span class="p">(</span>
</span><span class='line'>                        <span class="m">1f</span><span class="p">,</span> <span class="n">animationSpec</span> <span class="p">=</span> <span class="n">tween</span><span class="p">(</span><span class="n">durationMillis</span> <span class="p">=</span> <span class="m">1000</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">TimelineItem</span><span class="p">(</span>
</span><span class='line'>                <span class="n">text</span> <span class="p">=</span> <span class="n">item</span><span class="p">,</span>
</span><span class='line'>                <span class="n">alpha</span> <span class="p">=</span> <span class="n">animatableAlpha</span><span class="p">.</span><span class="n">value</span><span class="p">,</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">TimelineItem</span><span class="p">(</span><span class="n">text</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">alpha</span><span class="p">:</span> <span class="n">Float</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Row</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">fillMaxWidth</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">DarkGray</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="n">alpha</span> <span class="p">=</span> <span class="n">alpha</span><span class="p">))</span>
</span><span class='line'>            <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">16.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>        <span class="n">verticalAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">CenterVertically</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Text</span><span class="p">(</span>
</span><span class='line'>            <span class="n">text</span> <span class="p">=</span> <span class="n">text</span><span class="p">,</span>
</span><span class='line'>            <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">White</span><span class="p">,</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxWidth</span><span class="p">(),</span>
</span><span class='line'>            <span class="n">textAlign</span> <span class="p">=</span> <span class="n">TextAlign</span><span class="p">.</span><span class="n">Center</span><span class="p">,</span>
</span><span class='line'>            <span class="n">fontSize</span> <span class="p">=</span> <span class="m">18.</span><span class="n">sp</span><span class="p">,</span>
</span><span class='line'>            <span class="n">fontWeight</span> <span class="p">=</span> <span class="n">FontWeight</span><span class="p">.</span><span class="n">SemiBold</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>代码说明</h4>

<ul>
<li>animatableAlpha 控制每个时间轴项目的 Alpha（不透明度），初始设置为 0（完全透明）。</li>
<li>isVisible 状态源自当前滚动位置，用于确定项目是否可见。</li>
<li>当用户滚动时，LaunchedEffect会触发进入视口的项目的淡入动画。</li>
</ul>


<h4>用例</h4>

<p>此交互式时间轴非常适合那些希望以视觉吸引力十足的方式呈现一系列事件或步骤的应用。动画通过在项目进入视野时吸引用户的注意力来增强用户的参与度。</p>

<p><strong>此类动画不仅引人入胜，还可以用来引导用户关注应用中的一系列事件或操作。</strong></p>

<h2>第 3 部分 — Jetpack Compose中基于物理的真实动画</h2>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*lZ_rpGorcFzewpUJN6WPAQ.gif" alt="弹性拖拽动画" /></p>

<h3>利用物理原理增强UI动态效果</h3>

<p>在本节中，我们将探索如何使用 Jetpack Compose将物理原理融入动画，为 UI 增添一层真实感和交互性。我们将重点介绍一个弹性拖拽交互示例。</p>

<h3>拖拽时的弹性效果</h3>

<p>此示例演示了图标上的弹性拖拽交互。垂直拖动时，图标会拉伸并回弹，产生弹性效果，模拟弹簧或橡皮筋​​的行为。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">ElasticDraggableBox</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">animatableOffset</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="n">Animatable</span><span class="p">(</span><span class="m">0f</span><span class="p">))</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Box</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">().</span><span class="n">background</span><span class="p">(</span><span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">xFFFFA732</span><span class="p">)),</span> <span class="n">contentAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">Center</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                <span class="p">.</span><span class="n">offset</span><span class="p">(</span><span class="n">y</span> <span class="p">=</span> <span class="n">animatableOffset</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">draggable</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">orientation</span> <span class="p">=</span> <span class="n">Orientation</span><span class="p">.</span><span class="n">Vertical</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">state</span> <span class="p">=</span> <span class="n">rememberDraggableState</span> <span class="p">{</span> <span class="n">delta</span> <span class="p">-&gt;</span>
</span><span class='line'>                        <span class="n">animatableOffset</span> <span class="p">=</span> <span class="n">Animatable</span><span class="p">(</span><span class="n">animatableOffset</span><span class="p">.</span><span class="n">value</span> <span class="p">+</span> <span class="n">delta</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">},</span>
</span><span class='line'>                    <span class="n">onDragStopped</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">animatableOffset</span><span class="p">.</span><span class="n">animateTo</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="n">animationSpec</span> <span class="p">=</span> <span class="n">spring</span><span class="p">())</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">350.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>            <span class="n">contentAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">Center</span>
</span><span class='line'>        <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Icon</span><span class="p">(</span>
</span><span class='line'>                <span class="n">Icons</span><span class="p">.</span><span class="n">Filled</span><span class="p">.</span><span class="n">Favorite</span><span class="p">,</span>
</span><span class='line'>                <span class="n">contentDescription</span> <span class="p">=</span> <span class="s">&quot;heart&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="n">animatableOffset</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">dp</span> <span class="p">+</span> <span class="m">150.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>                <span class="n">tint</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Red</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>说明</h4>

<ul>
<li>使用 draggable 修饰符将包含图标的 Box 可组合项设置为可拖动。</li>
<li>animatableOffset 跟踪图标因拖动而产生的垂直偏移。</li>
<li>在拖动过程中，图标的大小会根据拖动量而变化，从而产生拉伸效果。</li>
<li>当拖动停止（onDragStopped）时，animatableOffset 会使用弹簧动画返回到 0f，从而使图标弹回其原始大小和位置。</li>
</ul>


<h2>第 4 节 — Jetpack Compose 中的手势动画</h2>

<h3>通过响应式手势提升用户体验</h3>

<p>在本部分中，我们将探索如何使用 Jetpack Compose 创建由用户手势控制的动画。我们将重点介绍两个示例——一个支持多点触控的可变形图像和一个由手势控制的音频波形。</p>

<h3>A) 多点触控可变形图像</h3>

<p>在本示例中，我们将创建一个图像视图，用户可以使用捏合、缩放和旋转等多点触控（Multi-touch）手势进行交互。</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*34WxcBivTWhiCY6KVSVelQ.gif" alt="多点触控可变形图像" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">TransformableImage</span><span class="p">(</span><span class="n">imageId</span><span class="p">:</span> <span class="n">Int</span> <span class="p">=</span> <span class="n">R</span><span class="p">.</span><span class="n">drawable</span><span class="p">.</span><span class="n">android</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">scale</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="m">1f</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">rotation</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="m">0f</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">offset</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="n">Offset</span><span class="p">.</span><span class="n">Zero</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Box</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">().</span><span class="n">background</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">DarkGray</span><span class="p">),</span> <span class="n">contentAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">Center</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Image</span><span class="p">(</span>
</span><span class='line'>            <span class="n">painter</span> <span class="p">=</span> <span class="n">painterResource</span><span class="p">(</span><span class="n">id</span> <span class="p">=</span> <span class="n">imageId</span><span class="p">),</span>
</span><span class='line'>            <span class="n">contentDescription</span> <span class="p">=</span> <span class="s">&quot;Transformable image&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">contentScale</span> <span class="p">=</span> <span class="n">ContentScale</span><span class="p">.</span><span class="n">Crop</span><span class="p">,</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                <span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">300.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">graphicsLayer</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">scaleX</span> <span class="p">=</span> <span class="n">scale</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">scaleY</span> <span class="p">=</span> <span class="n">scale</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">rotationZ</span> <span class="p">=</span> <span class="n">rotation</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">translationX</span> <span class="p">=</span> <span class="n">offset</span><span class="p">.</span><span class="n">x</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">translationY</span> <span class="p">=</span> <span class="n">offset</span><span class="p">.</span><span class="n">y</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">pointerInput</span><span class="p">(</span><span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">detectTransformGestures</span> <span class="p">{</span> <span class="n">_</span><span class="p">,</span> <span class="n">pan</span><span class="p">,</span> <span class="n">zoom</span><span class="p">,</span> <span class="n">rotate</span> <span class="p">-&gt;</span>
</span><span class='line'>                        <span class="n">scale</span> <span class="p">*=</span> <span class="n">zoom</span>
</span><span class='line'>                        <span class="n">rotation</span> <span class="p">+=</span> <span class="n">rotate</span>
</span><span class='line'>                        <span class="n">offset</span> <span class="p">+=</span> <span class="n">pan</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>代码说明</h4>

<ul>
<li>Image 可组合项通过 graphicsLayer 进行修改，以应用缩放、旋转和平移等变换。</li>
<li>pointerInput 带有 detectTransformGestures 接口，用于处理多点触控手势，并相应地更新缩放、旋转和偏移。</li>
</ul>


<h3>B) 手势控制波形</h3>

<p>这是一个波形可视化效果，它根据用户手势（例如滑动和捏合）改变外观，以控制幅度和频率等方面。</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*qKzb1XpUrSGKdCL-OxhtLw.gif" alt="手势控制波形" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">GestureControlledWaveform</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">amplitude</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="m">100f</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">frequency</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="m">1f</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Canvas</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>        <span class="p">.</span><span class="n">fillMaxSize</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">pointerInput</span><span class="p">(</span><span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">detectDragGestures</span> <span class="p">{</span> <span class="n">_</span><span class="p">,</span> <span class="n">dragAmount</span> <span class="p">-&gt;</span>
</span><span class='line'>                <span class="n">amplitude</span> <span class="p">+=</span> <span class="n">dragAmount</span><span class="p">.</span><span class="n">y</span>
</span><span class='line'>                <span class="n">frequency</span> <span class="p">+=</span> <span class="n">dragAmount</span><span class="p">.</span><span class="n">x</span> <span class="p">/</span> <span class="m">500f</span>
</span><span class='line'>                <span class="c1">// 根据拖拽调整频率</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="p">.</span><span class="n">background</span><span class="p">(</span>
</span><span class='line'>            <span class="n">Brush</span><span class="p">.</span><span class="n">verticalGradient</span><span class="p">(</span>
</span><span class='line'>                <span class="n">colors</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span><span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">xFF003366</span><span class="p">),</span> <span class="n">Color</span><span class="p">.</span><span class="n">White</span><span class="p">,</span> <span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">xFF66B2FF</span><span class="p">))</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">width</span> <span class="p">=</span> <span class="n">size</span><span class="p">.</span><span class="n">width</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">height</span> <span class="p">=</span> <span class="n">size</span><span class="p">.</span><span class="n">height</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">path</span> <span class="p">=</span> <span class="n">Path</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="py">halfHeight</span> <span class="p">=</span> <span class="n">height</span> <span class="p">/</span> <span class="m">2</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">waveLength</span> <span class="p">=</span> <span class="n">width</span> <span class="p">/</span> <span class="n">frequency</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">path</span><span class="p">.</span><span class="n">moveTo</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="n">halfHeight</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">x</span> <span class="k">in</span> <span class="m">0</span> <span class="n">until</span> <span class="n">width</span><span class="p">.</span><span class="n">toInt</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">theta</span> <span class="p">=</span> <span class="p">(</span><span class="m">2.0</span> <span class="p">*</span> <span class="n">Math</span><span class="p">.</span><span class="n">PI</span> <span class="p">*</span> <span class="n">x</span> <span class="p">/</span> <span class="n">waveLength</span><span class="p">).</span><span class="n">toFloat</span><span class="p">()</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">y</span> <span class="p">=</span> <span class="n">halfHeight</span> <span class="p">+</span> <span class="n">amplitude</span> <span class="p">*</span> <span class="n">sin</span><span class="p">(</span><span class="n">theta</span><span class="p">.</span><span class="n">toDouble</span><span class="p">()).</span><span class="n">toFloat</span><span class="p">()</span>
</span><span class='line'>            <span class="n">path</span><span class="p">.</span><span class="n">lineTo</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">toFloat</span><span class="p">(),</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="py">gradient</span> <span class="p">=</span> <span class="n">Brush</span><span class="p">.</span><span class="n">horizontalGradient</span><span class="p">(</span>
</span><span class='line'>            <span class="n">colors</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">Blue</span><span class="p">,</span> <span class="n">Color</span><span class="p">.</span><span class="n">Cyan</span><span class="p">,</span> <span class="n">Color</span><span class="p">.</span><span class="n">Magenta</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">drawPath</span><span class="p">(</span>
</span><span class='line'>            <span class="n">path</span> <span class="p">=</span> <span class="n">path</span><span class="p">,</span>
</span><span class='line'>            <span class="n">brush</span> <span class="p">=</span> <span class="n">gradient</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>代码说明</h4>

<ul>
<li>amplitude 和 frequency 是状态变量，分别控制波形的幅度和频率。</li>
<li>Canvas 可组合项用于绘制波形。Canvas 内部的绘制逻辑根据正弦函数计算每个 X 位置的 Y 位置，从而创建波浪效果。</li>
<li>detectDragGestures 修饰符用于根据用户拖动手势更新幅度和频率。水平拖动调整频率，垂直拖动调整幅度。</li>
<li>当用户在屏幕上拖动时，波形的形状会相应变化，从而营造出互动体验。</li>
</ul>


<h4>注意事项</h4>

<ul>
<li>这是一个基本的实现。为了获得更逼真的音频波形，你需要集成实际的音频数据。</li>
<li>可以通过调整拖动过程中幅度和频率的修改方式来微调波形对手势的响应能力。</li>
</ul>


<p>此示例演示了如何在 Compose 中创建基本的交互式波形，并且可以对其进行扩展或修改，以用于更复杂的用例或处理更复杂的手势。</p>

<h2>第 5 节 — Jetpack Compose 中的状态驱动动画模式</h2>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*nkfhmC6JjQnshL3y_izhKg.gif" alt="带动画线图" /></p>

<h3>基于数据和状态变化的UI动画</h3>

<p>本部分重点介绍如何创建由数据或UI 状态变化驱动的动画，从而增强应用的交互性和响应能力。我们将探讨两个具体示例——数据图动画和在多状态 UI 中实现状态转换。</p>

<h3>A) 数据驱动的图形动画</h3>

<p>本示例演示了一个动画线图，其中图形的路径（Path）会随着数据集的变化而变化。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">AnimatedGraphExample</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">dataPoints</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="n">generateRandomDataPoints</span><span class="p">(</span><span class="m">5</span><span class="p">))</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Column</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">fillMaxSize</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">DarkGray</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">AnimatedLineGraph</span><span class="p">(</span><span class="n">dataPoints</span> <span class="p">=</span> <span class="n">dataPoints</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Spacer</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">height</span><span class="p">(</span><span class="m">16.</span><span class="n">dp</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Button</span><span class="p">(</span>
</span><span class='line'>            <span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">dataPoints</span> <span class="p">=</span> <span class="n">generateRandomDataPoints</span><span class="p">(</span><span class="m">5</span><span class="p">)</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">align</span><span class="p">(</span><span class="n">Alignment</span><span class="p">.</span><span class="n">CenterHorizontally</span><span class="p">),</span>
</span><span class='line'>            <span class="n">colors</span> <span class="p">=</span> <span class="n">ButtonDefaults</span><span class="p">.</span><span class="n">buttonColors</span><span class="p">(</span><span class="n">containerColor</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Green</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Text</span><span class="p">(</span>
</span><span class='line'>                <span class="s">&quot;Update Data&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">fontWeight</span> <span class="p">=</span> <span class="n">FontWeight</span><span class="p">.</span><span class="n">Bold</span><span class="p">,</span>
</span><span class='line'>                <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">DarkGray</span><span class="p">,</span>
</span><span class='line'>                <span class="n">fontSize</span> <span class="p">=</span> <span class="m">18.</span><span class="n">sp</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">AnimatedLineGraph</span><span class="p">(</span><span class="n">dataPoints</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Float</span><span class="p">&gt;)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">animatableDataPoints</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">dataPoints</span><span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">Animatable</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">path</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">Path</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">dataPoints</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">animatableDataPoints</span><span class="p">.</span><span class="n">forEachIndexed</span> <span class="p">{</span> <span class="n">index</span><span class="p">,</span> <span class="n">animatable</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="n">animatable</span><span class="p">.</span><span class="n">animateTo</span><span class="p">(</span><span class="n">dataPoints</span><span class="p">[</span><span class="n">index</span><span class="p">],</span> <span class="n">animationSpec</span> <span class="p">=</span> <span class="n">TweenSpec</span><span class="p">(</span><span class="n">durationMillis</span> <span class="p">=</span> <span class="m">500</span><span class="p">))</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Canvas</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">fillMaxWidth</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">height</span><span class="p">(</span><span class="m">400.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">path</span><span class="p">.</span><span class="n">reset</span><span class="p">()</span>
</span><span class='line'>        <span class="n">animatableDataPoints</span><span class="p">.</span><span class="n">forEachIndexed</span> <span class="p">{</span> <span class="n">index</span><span class="p">,</span> <span class="n">animatable</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">x</span> <span class="p">=</span> <span class="p">(</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="p">/</span> <span class="p">(</span><span class="n">dataPoints</span><span class="p">.</span><span class="n">size</span> <span class="p">-</span> <span class="m">1</span><span class="p">))</span> <span class="p">*</span> <span class="n">index</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">y</span> <span class="p">=</span> <span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="p">-</span> <span class="p">(</span><span class="n">animatable</span><span class="p">.</span><span class="n">value</span> <span class="p">*</span> <span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">index</span> <span class="p">==</span> <span class="m">0</span><span class="p">)</span> <span class="n">path</span><span class="p">.</span><span class="n">moveTo</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="k">else</span> <span class="n">path</span><span class="p">.</span><span class="n">lineTo</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">drawPath</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">Color</span><span class="p">.</span><span class="n">Green</span><span class="p">,</span> <span class="n">style</span> <span class="p">=</span> <span class="n">Stroke</span><span class="p">(</span><span class="m">5f</span><span class="p">))</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">generateRandomDataPoints</span><span class="p">(</span><span class="n">size</span><span class="p">:</span> <span class="n">Int</span><span class="p">):</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Float</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">List</span><span class="p">(</span><span class="n">size</span><span class="p">)</span> <span class="p">{</span> <span class="n">Random</span><span class="p">.</span><span class="n">nextFloat</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>代码说明</h4>

<ul>
<li>AnimatedGraphExample 可组合项创建了一个可以更新折线图数据点的环境。</li>
<li>该图表绘制在 Canvas 中，其中 drawPath 方法使用来自 animatableDataPoints 的动画值。</li>
<li>对于图表中的每个数据点，我们需要计算其在画布上对应的 x（水平）和 y（垂直）位置。</li>
<li>x 计算 - x 位置是根据数据点的索引和画布的总宽度计算得出的。我们将数据点沿画布的宽度均匀分布。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">x</span> <span class="p">=</span> <span class="p">(</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="p">/</span> <span class="p">(</span><span class="n">dataPoints</span><span class="p">.</span><span class="n">size</span> <span class="p">-</span> <span class="m">1</span><span class="p">))</span> <span class="p">*</span> <span class="n">index</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>y 计算——y 位置是根据数据点（animatable.value）的值和画布的高度计算的。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">y</span> <span class="p">=</span> <span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="p">-</span> <span class="p">(</span><span class="n">animatable</span><span class="p">.</span><span class="n">value</span> <span class="p">*</span> <span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>路径从第一个数据点开始，然后使用 lineTo 绘制一条线到每个后续点，从而创建图形线。</li>
<li>路径基于数据点的动画值绘制，从而在数据发生变化时创建动画效果。</li>
</ul>


<h3>B) 多状态 UI 中的状态转换</h3>

<p>可以使用 Animatable 在多状态 UI 中实现状态转换，从而在不同 UI 状态之间进行动画处理。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">enum</span> <span class="k">class</span> <span class="nc">UIState</span> <span class="p">{</span> <span class="n">StateA</span><span class="p">,</span> <span class="n">StateB</span><span class="p">,</span> <span class="n">StateC</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">StateTransitionUI</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">currentState</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="n">UIState</span><span class="p">.</span><span class="n">StateA</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">fillMaxSize</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">getBackgroundColorForState</span><span class="p">(</span><span class="n">currentState</span><span class="p">)),</span>
</span><span class='line'>        <span class="n">contentAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">Center</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">AnimatedContent</span><span class="p">(</span><span class="n">currentState</span> <span class="p">=</span> <span class="n">currentState</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Button</span><span class="p">(</span>
</span><span class='line'>            <span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span> <span class="n">currentState</span> <span class="p">=</span> <span class="n">getNextState</span><span class="p">(</span><span class="n">currentState</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">align</span><span class="p">(</span><span class="n">Alignment</span><span class="p">.</span><span class="n">BottomCenter</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Next State&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">AnimatedContent</span><span class="p">(</span><span class="n">currentState</span><span class="p">:</span> <span class="n">UIState</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">AnimatedVisibility</span><span class="p">(</span>
</span><span class='line'>        <span class="n">visible</span> <span class="p">=</span> <span class="n">currentState</span> <span class="p">==</span> <span class="n">UIState</span><span class="p">.</span><span class="n">StateA</span><span class="p">,</span>
</span><span class='line'>        <span class="n">enter</span> <span class="p">=</span> <span class="n">fadeIn</span><span class="p">(</span><span class="n">animationSpec</span> <span class="p">=</span> <span class="n">tween</span><span class="p">(</span><span class="n">durationMillis</span> <span class="p">=</span> <span class="m">2000</span><span class="p">))</span> <span class="p">+</span> <span class="n">expandVertically</span><span class="p">(),</span>
</span><span class='line'>        <span class="n">exit</span> <span class="p">=</span> <span class="n">fadeOut</span><span class="p">(</span><span class="n">animationSpec</span> <span class="p">=</span> <span class="n">tween</span><span class="p">(</span><span class="n">durationMillis</span> <span class="p">=</span> <span class="m">2000</span><span class="p">))</span> <span class="p">+</span> <span class="n">shrinkVertically</span><span class="p">()</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Text</span><span class="p">(</span><span class="s">&quot;This is ${currentState.name}&quot;</span><span class="p">,</span> <span class="n">fontSize</span> <span class="p">=</span> <span class="m">32.</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 与B 和 C 的类似的代码块</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">getBackgroundColorForState</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">UIState</span><span class="p">):</span> <span class="n">Color</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">when</span> <span class="p">(</span><span class="n">state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">UIState</span><span class="p">.</span><span class="n">StateA</span> <span class="p">-&gt;</span> <span class="n">Color</span><span class="p">.</span><span class="n">Red</span>
</span><span class='line'>        <span class="n">UIState</span><span class="p">.</span><span class="n">StateB</span> <span class="p">-&gt;</span> <span class="n">Color</span><span class="p">.</span><span class="n">Green</span>
</span><span class='line'>        <span class="n">UIState</span><span class="p">.</span><span class="n">StateC</span> <span class="p">-&gt;</span> <span class="n">Color</span><span class="p">.</span><span class="n">Blue</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">getNextState</span><span class="p">(</span><span class="n">currentState</span><span class="p">:</span> <span class="n">UIState</span><span class="p">):</span> <span class="n">UIState</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">when</span> <span class="p">(</span><span class="n">currentState</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">UIState</span><span class="p">.</span><span class="n">StateA</span> <span class="p">-&gt;</span> <span class="n">UIState</span><span class="p">.</span><span class="n">StateB</span>
</span><span class='line'>        <span class="n">UIState</span><span class="p">.</span><span class="n">StateB</span> <span class="p">-&gt;</span> <span class="n">UIState</span><span class="p">.</span><span class="n">StateC</span>
</span><span class='line'>        <span class="n">UIState</span><span class="p">.</span><span class="n">StateC</span> <span class="p">-&gt;</span> <span class="n">UIState</span><span class="p">.</span><span class="n">StateA</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>代码说明</h4>

<ul>
<li>在此示例中，AnimatedVisibility 用于为每个状态下内容的出现和消失添加动画效果。这会在状态变化时添加平滑的过渡效果。</li>
<li>对于每个状态（StateA、StateB、StateC），都有一个 AnimatedVisibility 块，用于通过淡入淡出和展开/收缩动画控制其内容的可见性。</li>
<li>AnimatedVisibility 的进入和退出参数分别定义了内容可见或隐藏时的动画。</li>
</ul>


<h2>第 6 节 — 在 Compose中改变（Morphing）形状</h2>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*q82EIocVzR8XBMuG_14mdg.gif" alt="形状变形" /></p>

<p>动画形状之间的变换涉及这些形状的属性的插值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">ShapeMorphingAnimation</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">animationProgress</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">Animatable</span><span class="p">(</span><span class="m">0f</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">animationProgress</span><span class="p">.</span><span class="n">animateTo</span><span class="p">(</span>
</span><span class='line'>            <span class="n">targetValue</span> <span class="p">=</span> <span class="m">1f</span><span class="p">,</span>
</span><span class='line'>            <span class="n">animationSpec</span> <span class="p">=</span> <span class="n">infiniteRepeatable</span><span class="p">(</span>
</span><span class='line'>                <span class="n">animation</span> <span class="p">=</span> <span class="n">tween</span><span class="p">(</span><span class="m">2000</span><span class="p">,</span> <span class="n">easing</span> <span class="p">=</span> <span class="n">LinearOutSlowInEasing</span><span class="p">),</span>
</span><span class='line'>                <span class="n">repeatMode</span> <span class="p">=</span> <span class="n">RepeatMode</span><span class="p">.</span><span class="n">Reverse</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Canvas</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">40.</span><span class="n">dp</span><span class="p">).</span><span class="n">fillMaxSize</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">sizeValue</span> <span class="p">=</span> <span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">.</span><span class="n">coerceAtMost</span><span class="p">(</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">)</span> <span class="p">/</span> <span class="m">2</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">squareRect</span> <span class="p">=</span> <span class="n">Rect</span><span class="p">(</span><span class="n">center</span> <span class="p">=</span> <span class="n">center</span><span class="p">,</span> <span class="n">sizeValue</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="py">morphedPath</span> <span class="p">=</span> <span class="n">interpolateShapes</span><span class="p">(</span><span class="n">progress</span> <span class="p">=</span> <span class="n">animationProgress</span><span class="p">.</span><span class="n">value</span><span class="p">,</span> <span class="n">squareRect</span> <span class="p">=</span> <span class="n">squareRect</span><span class="p">)</span>
</span><span class='line'>        <span class="n">drawPath</span><span class="p">(</span><span class="n">morphedPath</span><span class="p">,</span> <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Blue</span><span class="p">,</span> <span class="n">style</span> <span class="p">=</span> <span class="n">Fill</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">interpolateShapes</span><span class="p">(</span><span class="n">progress</span><span class="p">:</span> <span class="n">Float</span><span class="p">,</span> <span class="n">squareRect</span><span class="p">:</span> <span class="n">Rect</span><span class="p">):</span> <span class="n">Path</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">path</span> <span class="p">=</span> <span class="n">Path</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">cornerRadius</span> <span class="p">=</span> <span class="n">CornerRadius</span><span class="p">(</span>
</span><span class='line'>        <span class="n">x</span> <span class="p">=</span> <span class="n">lerp</span><span class="p">(</span><span class="n">start</span> <span class="p">=</span> <span class="n">squareRect</span><span class="p">.</span><span class="n">width</span> <span class="p">/</span> <span class="m">2</span><span class="p">,</span> <span class="n">stop</span> <span class="p">=</span> <span class="m">0f</span><span class="p">,</span> <span class="n">fraction</span> <span class="p">=</span> <span class="n">progress</span><span class="p">),</span>
</span><span class='line'>        <span class="n">y</span> <span class="p">=</span> <span class="n">lerp</span><span class="p">(</span><span class="n">start</span> <span class="p">=</span> <span class="n">squareRect</span><span class="p">.</span><span class="n">height</span> <span class="p">/</span> <span class="m">2</span><span class="p">,</span> <span class="n">stop</span> <span class="p">=</span> <span class="m">0f</span><span class="p">,</span> <span class="n">fraction</span> <span class="p">=</span> <span class="n">progress</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">path</span><span class="p">.</span><span class="n">addRoundRect</span><span class="p">(</span>
</span><span class='line'>        <span class="n">roundRect</span> <span class="p">=</span> <span class="n">RoundRect</span><span class="p">(</span><span class="n">rect</span> <span class="p">=</span> <span class="n">squareRect</span><span class="p">,</span> <span class="n">cornerRadius</span> <span class="p">=</span> <span class="n">cornerRadius</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">path</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">lerp</span><span class="p">(</span><span class="n">start</span><span class="p">:</span> <span class="n">Float</span><span class="p">,</span> <span class="n">stop</span><span class="p">:</span> <span class="n">Float</span><span class="p">,</span> <span class="n">fraction</span><span class="p">:</span> <span class="n">Float</span><span class="p">):</span> <span class="n">Float</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="m">1</span> <span class="p">-</span> <span class="n">fraction</span><span class="p">)</span> <span class="p">*</span> <span class="n">start</span> <span class="p">+</span> <span class="n">fraction</span> <span class="p">*</span> <span class="n">stop</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>代码说明</h4>

<ul>
<li>ShapeMorphingAnimation 设置了一个无限动画，将 animationProgress 的值在 0 和 1 之间切换。</li>
<li>Canvas 可组合项用于绘制形状。在这里，我们根据画布大小定义正方形 (squareRect) 的尺寸。</li>
<li>interpolateShapes 接收当前动画进度和正方形的矩形，在圆形和正方形之间进行插值。它使用 lerp（线性插值）逐步调整圆角矩形的 cornerRadius，该矩形代表我们的变形形状。</li>
<li>当 progress 为 0 时，cornerRadius 是矩形大小的一半，使形状变为圆形。当 progress 为 1 时，cornerRadius 为 0，使形状变为正方形。</li>
</ul>


<h4>实际用例</h4>

<ul>
<li>加载和进度指示器——变形形状可用于创建更具吸引力的加载或进度指示器，以视觉上引人入胜的方式指示进度或加载状态。</li>
<li>UI 中的图标过渡——变形图标可用于根据用户操作提供视觉反馈。例如，点击播放按钮时会变形为暂停按钮，汉堡菜单图标会变形为后退箭头。</li>
<li>数据可视化——在复杂的数据可视化中，变形可以帮助在不同视图或数据状态之间过渡，使用户更容易跟踪和理解随时间或类别变化的变化。</li>
</ul>


<h2>想看雪花特效吗？</h2>

<p>我们将演示一个简单的粒子系统（Particle system）来创建雪花效果。</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*E26GhhxDZLGTpE8gMvJoHw.gif" alt="雪花特效" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">data</span> <span class="k">class</span> <span class="nc">Snowflake</span><span class="p">(</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">x</span><span class="p">:</span> <span class="n">Float</span><span class="p">,</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">y</span><span class="p">:</span> <span class="n">Float</span><span class="p">,</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">radius</span><span class="p">:</span> <span class="n">Float</span><span class="p">,</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">speed</span><span class="p">:</span> <span class="n">Float</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">SnowfallEffect</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">snowflakes</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">List</span><span class="p">(</span><span class="m">100</span><span class="p">)</span> <span class="p">{</span> <span class="n">generateRandomSnowflake</span><span class="p">()</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">infiniteTransition</span> <span class="p">=</span> <span class="n">rememberInfiniteTransition</span><span class="p">(</span><span class="n">label</span> <span class="p">=</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">offsetY</span> <span class="k">by</span> <span class="n">infiniteTransition</span><span class="p">.</span><span class="n">animateFloat</span><span class="p">(</span>
</span><span class='line'>        <span class="n">initialValue</span> <span class="p">=</span> <span class="m">0f</span><span class="p">,</span>
</span><span class='line'>        <span class="n">targetValue</span> <span class="p">=</span> <span class="m">1000f</span><span class="p">,</span>
</span><span class='line'>        <span class="n">animationSpec</span> <span class="p">=</span> <span class="n">infiniteRepeatable</span><span class="p">(</span>
</span><span class='line'>            <span class="n">animation</span> <span class="p">=</span> <span class="n">tween</span><span class="p">(</span><span class="n">durationMillis</span> <span class="p">=</span> <span class="m">5000</span><span class="p">,</span> <span class="n">easing</span> <span class="p">=</span> <span class="n">LinearEasing</span><span class="p">),</span>
</span><span class='line'>            <span class="n">repeatMode</span> <span class="p">=</span> <span class="n">RepeatMode</span><span class="p">.</span><span class="n">Restart</span>
</span><span class='line'>        <span class="p">),</span> <span class="n">label</span> <span class="p">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Canvas</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">().</span><span class="n">background</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">Black</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">snowflakes</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span> <span class="n">snowflake</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="n">drawSnowflake</span><span class="p">(</span><span class="n">snowflake</span><span class="p">,</span> <span class="n">offsetY</span> <span class="p">%</span> <span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">generateRandomSnowflake</span><span class="p">():</span> <span class="n">Snowflake</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Snowflake</span><span class="p">(</span>
</span><span class='line'>        <span class="n">x</span> <span class="p">=</span> <span class="n">Random</span><span class="p">.</span><span class="n">nextFloat</span><span class="p">(),</span>
</span><span class='line'>        <span class="n">y</span> <span class="p">=</span> <span class="n">Random</span><span class="p">.</span><span class="n">nextFloat</span><span class="p">()</span> <span class="p">*</span> <span class="m">1000f</span><span class="p">,</span>
</span><span class='line'>        <span class="n">radius</span> <span class="p">=</span> <span class="n">Random</span><span class="p">.</span><span class="n">nextFloat</span><span class="p">()</span> <span class="p">*</span> <span class="m">2f</span> <span class="p">+</span> <span class="m">2f</span><span class="p">,</span> <span class="c1">// Snowflake size</span>
</span><span class='line'>        <span class="n">speed</span> <span class="p">=</span> <span class="n">Random</span><span class="p">.</span><span class="n">nextFloat</span><span class="p">()</span> <span class="p">*</span> <span class="m">1.2f</span> <span class="p">+</span> <span class="m">1f</span>  <span class="c1">// Falling speed</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">DrawScope</span><span class="p">.</span><span class="n">drawSnowflake</span><span class="p">(</span><span class="n">snowflake</span><span class="p">:</span> <span class="n">Snowflake</span><span class="p">,</span> <span class="n">offsetY</span><span class="p">:</span> <span class="n">Float</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">newY</span> <span class="p">=</span> <span class="p">(</span><span class="n">snowflake</span><span class="p">.</span><span class="n">y</span> <span class="p">+</span> <span class="n">offsetY</span> <span class="p">*</span> <span class="n">snowflake</span><span class="p">.</span><span class="n">speed</span><span class="p">)</span> <span class="p">%</span> <span class="n">size</span><span class="p">.</span><span class="n">height</span>
</span><span class='line'>    <span class="n">drawCircle</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">White</span><span class="p">,</span> <span class="n">radius</span> <span class="p">=</span> <span class="n">snowflake</span><span class="p">.</span><span class="n">radius</span><span class="p">,</span> <span class="n">center</span> <span class="p">=</span> <span class="n">Offset</span><span class="p">(</span><span class="n">snowflake</span><span class="p">.</span><span class="n">x</span> <span class="p">*</span> <span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">newY</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>代码说明</h4>

<ul>
<li>SnowfallEffect 设置了一个包含多个雪花（Snowflake 对象）的粒子系统。</li>
<li>每个雪花都具有位置 (x, y)、半径（大小）和速度等属性。</li>
<li>rememberInfiniteTransition 和 animateFloat 用于创建连续的垂直运动效果，模拟降雪。</li>
<li>Canvas 可组合函数用于绘制每片雪花。drawSnowflake 函数根据每片雪花的速度和动画的 offsetY 计算其新的位置。</li>
<li>雪花从底部落下后会重新出现在顶部，从而产生循环降雪效果。</li>
</ul>


<h2>总结</h2>

<p>随着我们对 Jetpack Compose 动画的探索逐渐深入，我们清楚地认识到，动画不仅仅是视觉上的点缀。它们是打造引人入胜、直观且赏心悦目的用户体验的关键工具。</p>

<h3>拥抱互动性</h3>

<p>从动态游戏角色运动到交互式时间轴，我们见证了动画如何让用户交互更具吸引力和信息量。</p>

<h3>打造逼真的体验</h3>

<p>雪花飘落效果和变形形状展现了该工具包将真实感和流畅性带入数字世界的能力。这些动画有助于打造与用户产生共鸣的沉浸式体验。</p>

<h3>简化复杂性</h3>

<p>无论是编排多个元素还是制作状态转换动画，其简单易用性都令人瞩目。</p>

<h2>结束语</h2>

<p>如果你喜欢本文，请随时留下宝贵的反馈或赞赏。我一直期待与其他开发者一起学习、合作、共同成长。</p>

<p>如有任何疑问，请随时给我留言！</p>

<p>在 Medium 上关注我，获取更多文章 — <a href="https://medium.com/@pherwani37">Medium 个人资料</a>（链接：<a href="https://medium.com/@pherwani37%EF%BC%89">https://medium.com/@pherwani37%EF%BC%89</a></p>

<p>在<a href="https://linkedin.com/in/nirbhaypherwani">LinkedIn</a>（链接：<a href="https://linkedin.com/in/nirbhaypherwani%EF%BC%89%E5%92%8C">https://linkedin.com/in/nirbhaypherwani%EF%BC%89%E5%92%8C</a><a href="https://twitter.com/nirbhayph">Twitter</a>（链接：<a href="https://twitter.com/nirbhayph%EF%BC%89%E4%B8%8A%E4%B8%8E%E6%88%91%E8%81%94%E7%B3%BB%EF%BC%8C%E4%BB%A5%E4%BE%BF%E6%88%91%E4%BB%AC%E8%BF%9B%E8%A1%8C%E5%90%88%E4%BD%9C%E3%80%82">https://twitter.com/nirbhayph%EF%BC%89%E4%B8%8A%E4%B8%8E%E6%88%91%E8%81%94%E7%B3%BB%EF%BC%8C%E4%BB%A5%E4%BE%BF%E6%88%91%E4%BB%AC%E8%BF%9B%E8%A1%8C%E5%90%88%E4%BD%9C%E3%80%82</a></p>

<p>祝你动画制作愉快！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[理解Jetpack Compose中副作用函数的内部原理]]></title>
    <link href="https://alexhilton.github.io/blog/2025/05/01/understanding-side-effect-handlers/"/>
    <updated>2025-05-01T11:05:24+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/05/01/understanding-side-effect-handlers</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自「Understanding the Internals of Side-Effect Handlers in Jetpack Compose」，原文链接<a href="https://proandroiddev.com/understanding-the-internals-of-side-effect-handlers-in-jetpack-compose-d55fbf914fde">https://proandroiddev.com/understanding-the-internals-of-side-effect-handlers-in-jetpack-compose-d55fbf914fde</a>，由Jaewoong Eum发布于2025年4月10日。</p></blockquote>

<p><a href="https://alexhilton.github.io/blog/2025/05/01/understanding-side-effect-handlers/"><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*GNgL_XzYpw16hn6BxocOww.jpeg" title="auto auto" ></a></p>

<!-- more -->


<p>近年来，Jetpack Compose生态呈指数级增长，现已被广泛用于构建 Android 应用的产品级UI。现在，我们可以说 Jetpack Compose 代表了 Android UI 开发的未来。</p>

<p>Compose 最大的优势之一是其声明式（declarative）方法——它允许开发者描述 UI 应该显示的内容，而框架则负责处理 UI 在底层状态发生变化时应如何更新。这种模型将焦点从命令式（imperative）UI 转移到更直观、更具响应式的思维方式。</p>

<p>然而，尽管声明式 UI有很多优势，但妥善管理副作用也至关重要。可组合函数可能会因各种原因（例如状态或参数的变化）而被重组，如果副作用处理不当，应用的行为可能会变得不可预测。</p>

<p>在本文中，你将探索 Jetpack Compose 默认提供的副作用处理 API。你还将研究它们的内部工作流程，以更好地了解 Compose 如何在底层管理这些操作。</p>

<h2>副作用（Side Effect）是啥？</h2>

<p>副作用（Side Effect）是指发生在可组合函数作用域之外的应用状态变化。在 Jetpack Compose 中，由于状态变化、参数更新或其他事件触发的重组，可组合函数可能会频繁且不可预测地重新执行（译注：也就是说Compose的重组是不受开发者控制的）。因此，你不能假设一个可组合函数只会被调用一次。</p>

<p>换句话说，在可组合函数内部直接调用业务逻辑（例如从网络获取数据或查询数据库）是有风险的。由于潜在的重组，这些操作可能会无意中运行多次，从而导致错误或性能问题。</p>

<p>为了解决这个问题，Jetpack Compose 提供了一组专门用于以安全可控的方式管理副作用的API。这些 API包括 LaunchedEffect 、 DisposableEffect 、 SideEffect 、 rememberCoroutineScope 等等。在本文中，你将重点介绍三个最常用的处理程序—— LaunchedEffect 、 DisposableEffect 和 SideEffect ——并仔细研究它们的内部实现，以便更好地理解它们的底层工作原理。</p>

<h2>LaunchedEffect</h2>

<p>LaunchedEffect是Jetpack Compose中最常用的副作用处理 API之一。它允许你以可组合生命周期感知的方式（而非 Android 生命周期）启动协程，并确保除非指定的关键参数（keys）之一发生变化，否则不会重新执行提供的代码块。这种行为使得 LaunchedEffect 特别适合执行与特定状态相关的一次性事件，例如显示 Toast或Snackbar、记录事件或触发业务逻辑，正如你在 Now in Android 项目中的示例代码中所见：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">snackbarHostState</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">SnackbarHostState</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'><span class="k">val</span> <span class="py">isOffline</span> <span class="k">by</span> <span class="n">appState</span><span class="p">.</span><span class="n">isOffline</span><span class="p">.</span><span class="n">collectAsStateWithLifecycle</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 如果用户未连接到互联网，则显示一个Snackbar来通知他们。</span>
</span><span class='line'><span class="k">val</span> <span class="py">notConnectedMessage</span> <span class="p">=</span> <span class="n">stringResource</span><span class="p">(</span><span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">not_connected</span><span class="p">)</span>
</span><span class='line'><span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">isOffline</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">isOffline</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">snackbarHostState</span><span class="p">.</span><span class="n">showSnackbar</span><span class="p">(</span>
</span><span class='line'>            <span class="n">message</span> <span class="p">=</span> <span class="n">notConnectedMessage</span><span class="p">,</span>
</span><span class='line'>            <span class="n">duration</span> <span class="p">=</span> <span class="n">Indefinite</span><span class="p">,</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要注意的是，LaunchedEffect 会在底层创建一个新的协程作用域。这意味着它主要用于在可组合函数作用域内执行基于协程的任务，并在可组合函数离开组合时自动取消其协程。因此，LaunchedEffect 最适合用于与协程相关的操作，例如数据获取、延迟效果或事件处理，而不是简单地执行非暂停函数。现在，让我们深入探究一下，以更好地理解 LaunchedEffect 的内部工作原理。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">LaunchedEffect</span><span class="p">(</span>
</span><span class='line'>    <span class="n">key1</span><span class="p">:</span> <span class="n">Any</span><span class="p">?,</span>
</span><span class='line'>    <span class="n">block</span><span class="p">:</span> <span class="n">suspend</span> <span class="n">CoroutineScope</span><span class="p">.()</span> <span class="p">-&gt;</span> <span class="n">Unit</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">applyContext</span> <span class="p">=</span> <span class="n">currentComposer</span><span class="p">.</span><span class="n">applyCoroutineContext</span>
</span><span class='line'>    <span class="n">remember</span><span class="p">(</span><span class="n">key1</span><span class="p">)</span> <span class="p">{</span> <span class="n">LaunchedEffectImpl</span><span class="p">(</span><span class="n">applyContext</span><span class="p">,</span> <span class="n">block</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">internal</span> <span class="k">class</span> <span class="nc">LaunchedEffectImpl</span><span class="p">(</span>
</span><span class='line'>    <span class="n">parentCoroutineContext</span><span class="p">:</span> <span class="n">CoroutineContext</span><span class="p">,</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">task</span><span class="p">:</span> <span class="n">suspend</span> <span class="n">CoroutineScope</span><span class="p">.()</span> <span class="p">-&gt;</span> <span class="n">Unit</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">RememberObserver</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">scope</span> <span class="p">=</span> <span class="n">CoroutineScope</span><span class="p">(</span><span class="n">parentCoroutineContext</span><span class="p">)</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">var</span> <span class="py">job</span><span class="p">:</span> <span class="n">Job</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onRemembered</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 这不应该发生，但为了安全起见留在这里</span>
</span><span class='line'>        <span class="n">job</span><span class="o">?.</span><span class="n">cancel</span><span class="p">(</span><span class="s">&quot;Old job was still running!&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">job</span> <span class="p">=</span> <span class="n">scope</span><span class="p">.</span><span class="n">launch</span><span class="p">(</span><span class="n">block</span> <span class="p">=</span> <span class="n">task</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onForgotten</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">job</span><span class="o">?.</span><span class="n">cancel</span><span class="p">(</span><span class="n">LeftCompositionCancellationException</span><span class="p">())</span>
</span><span class='line'>        <span class="n">job</span> <span class="p">=</span> <span class="k">null</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onAbandoned</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">job</span><span class="o">?.</span><span class="n">cancel</span><span class="p">(</span><span class="n">LeftCompositionCancellationException</span><span class="p">())</span>
</span><span class='line'>        <span class="n">job</span> <span class="p">=</span> <span class="k">null</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>正如你在LaunchedEffect的内部实现中所看到的，它会创建LaunchedEffectImpl并将其存储在内存中，并将给定的键值作为参数，以便在键发生变化时重新创建 LaunchedEffectImpl 实例。</p>

<p>如果你查看内部 LaunchedEffectImpl 类，你会发现它实现了RememberObserver接口，并首先创建一个新的 CoroutineScope。然后，当可组合项进入组合阶段时，提供的 lambda 会在此范围内启动。当可组合项离开组合阶段时，协程范围会自动取消，从而确保资源得到正确清理，并避免潜在的内存泄漏或性能问题。</p>

<p>话虽如此，如果你的任务不涉及任何与协程相关的操作，而只是需要在键发生变化时重新执行，那么使用 LaunchedEffect 可能略显多余。虽然创建协程作用域的开销通常很小，但在实际不使用协程的情况下，它仍然是不必要的。在这种情况下，你可以考虑使用更轻量级的副作用处理library (<a href="https://github.com/skydoves/compose-effects?tab=readme-ov-file#rememberedeffect">RememberedEffect</a>)，它更适合非挂起（non-suspending）任务。</p>

<p>另一个常见的误解是LaunchedEffect能够感知 Android生命周期——但事实并非如此。从内部实现可以看出，LaunchedEffect的作用域完全限定于Jetpack Compose组合生命周期，与 Android组件（Activity和Fragment）的生命周期没有直接关联。</p>

<p>换句话说，它本身并不了解任何有关 Activity、Fragment 或 onStop()或 onDestroy()等生命周期事件的信息。这意味着，如果你在 LaunchedEffect 中启动一个协程，并且 Android 组件（例如 Activity）在可组合项未离开组合的情况下被停止或销毁，则该协程可能会继续运行，除非它明确与Android组件生命周期绑定。</p>

<h2>DisposableEffect</h2>

<p>DisposableEffect是Jetpack Compose 运行时提供的另一个副作用处理API。它允许你与可组合项的生命周期同步执行设置和清理逻辑。与LaunchedEffect不同，它提供了一个 DisposableEffectScope 作为接收器（receiver），使你能够定义一个清理代码块（clean-up code block），该代码块在可组合项离开组合时自动运行。这使得它非常适合管理需要显式卸载的外部资源，例如监听器、回调或广播接收器。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">lifecycleOwner</span> <span class="p">=</span> <span class="n">LocalLifecycleOwner</span><span class="p">.</span><span class="n">current</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 如果 `lifecycleOwner` 发生变化，则释放并重置效果</span>
</span><span class='line'><span class="n">DisposableEffect</span><span class="p">(</span><span class="n">lifecycleOwner</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 创建一个观察者，触发我们记住的回调以发送分析事件</span>
</span><span class='line'>  <span class="k">val</span> <span class="py">observer</span> <span class="p">=</span> <span class="n">LifecycleEventObserver</span> <span class="p">{</span> <span class="n">_</span><span class="p">,</span> <span class="n">event</span> <span class="p">-&gt;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">event</span> <span class="p">==</span> <span class="n">Lifecycle</span><span class="p">.</span><span class="n">Event</span><span class="p">.</span><span class="n">ON_RESUME</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// do something</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">event</span> <span class="p">==</span> <span class="n">Lifecycle</span><span class="p">.</span><span class="n">Event</span><span class="p">.</span><span class="n">ON_PAUSE</span> <span class="p">||</span> <span class="n">event</span> <span class="p">==</span> <span class="n">Lifecycle</span><span class="p">.</span><span class="n">Event</span><span class="p">.</span><span class="n">ON_STOP</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// do something</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Add the observer to the lifecycle</span>
</span><span class='line'>  <span class="n">lifecycleOwner</span><span class="p">.</span><span class="n">lifecycle</span><span class="p">.</span><span class="n">addObserver</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 当效果离开 Composition 时，移除观察者</span>
</span><span class='line'>  <span class="n">onDispose</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">lifecycleOwner</span><span class="p">.</span><span class="n">lifecycle</span><span class="p">.</span><span class="n">removeObserver</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的示例使用 DisposableEffect 将 LifecycleEventObserver注册到lifecycleOwner，使其能够观察生命周期变化并根据当前状态执行特定逻辑。观察者会在onDispose块内被安全地移除，确保在可组合项离开组合时进行适当的清理。现在，让我们深入了解DisposableEffect的内部工作原理。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">DisposableEffect</span><span class="p">(</span>
</span><span class='line'>    <span class="n">key1</span><span class="p">:</span> <span class="n">Any</span><span class="p">?,</span>
</span><span class='line'>    <span class="n">effect</span><span class="p">:</span> <span class="n">DisposableEffectScope</span><span class="p">.()</span> <span class="p">-&gt;</span> <span class="n">DisposableEffectResult</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">remember</span><span class="p">(</span><span class="n">key1</span><span class="p">)</span> <span class="p">{</span> <span class="n">DisposableEffectImpl</span><span class="p">(</span><span class="n">effect</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">class</span> <span class="nc">DisposableEffectImpl</span><span class="p">(</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">effect</span><span class="p">:</span> <span class="n">DisposableEffectScope</span><span class="p">.()</span> <span class="p">-&gt;</span> <span class="n">DisposableEffectResult</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">RememberObserver</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">var</span> <span class="py">onDispose</span><span class="p">:</span> <span class="n">DisposableEffectResult</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onRemembered</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">onDispose</span> <span class="p">=</span> <span class="n">InternalDisposableEffectScope</span><span class="p">.</span><span class="n">effect</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onForgotten</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">onDispose</span><span class="o">?.</span><span class="n">dispose</span><span class="p">()</span>
</span><span class='line'>        <span class="n">onDispose</span> <span class="p">=</span> <span class="k">null</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onAbandoned</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 由于未调用 [onRemembered]，因此无需执行任何操作。</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">DisposableEffectScope</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">inline</span> <span class="k">fun</span> <span class="nf">onDispose</span><span class="p">(</span>
</span><span class='line'>        <span class="n">crossinline</span> <span class="n">onDisposeEffect</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span>
</span><span class='line'>    <span class="p">):</span> <span class="n">DisposableEffectResult</span> <span class="p">=</span> <span class="k">object</span> <span class="err">: </span><span class="nc">DisposableEffectResult</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">override</span> <span class="k">fun</span> <span class="nf">dispose</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">onDisposeEffect</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如 DisposableEffect 的内部实现所示，它会创建一个 DisposableEffectImpl 实例，并使用提供的键将其存储在内存中。
每当键发生变化时，都会创建一个新的DisposableEffectImpl 实例，以便相应地重新执行该效果。</p>

<p>DisposableEffectImpl类实现了 RememberObserver 接口，并初始创建一个 DisposableEffectResult。当可组合项进入组合阶段时，效果 lambda 会在 DisposableEffectScope 中启动。退出组合时，会自动调用 DisposableEffectResult的onDispose 函数，以确保在可组合项完全从组合中移除之前正确清理资源并防止内存泄漏或性能问题。</p>

<h2>SideEffect</h2>

<p>Jetpack Compose中的SideEffect API 用于安全地将可组合项内发生的状态变化通知给外部非 Compose 管理的对象。它确保效果在重组成功后运行，使其成为触发依赖于界面最终稳定状态的副作用的理想选择。</p>

<p>使用 SideEffect可以避免在重组阶段执行的操作可能会被丢弃的风险，如果你在未采取此保护措施的情况下直接在可组合项中编写效果，则可能会发生这种情况。因此，当你需要将 Compose 状态与外部系统（例如日志记录工具、分析工具或命令式界面组件）同步时，SideEffect 至关重要，如下例所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">rememberFirebaseAnalytics</span><span class="p">(</span><span class="n">user</span><span class="p">:</span> <span class="n">User</span><span class="p">):</span> <span class="n">FirebaseAnalytics</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">analytics</span><span class="p">:</span> <span class="n">FirebaseAnalytics</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">FirebaseAnalytics</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 每次成功组合后，使用当前用户的用户类型更新 FirebaseAnalytics，</span>
</span><span class='line'>    <span class="c1">// 确保将来的分析事件已附加此元数据</span>
</span><span class='line'>    <span class="n">SideEffect</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">analytics</span><span class="p">.</span><span class="n">setUserProperty</span><span class="p">(</span><span class="s">&quot;userType&quot;</span><span class="p">,</span> <span class="n">user</span><span class="p">.</span><span class="n">userType</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">analytics</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在，让我们探索一下 SideEffect API 的底层工作原理。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">SideEffect</span><span class="p">(</span>
</span><span class='line'>    <span class="n">effect</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">currentComposer</span><span class="p">.</span><span class="n">recordSideEffect</span><span class="p">(</span><span class="n">effect</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** 当我们应用组合变化时安排运行副作用。 */</span>
</span><span class='line'><span class="k">override</span> <span class="k">fun</span> <span class="nf">recordSideEffect</span><span class="p">(</span><span class="n">effect</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">changeListWriter</span><span class="p">.</span><span class="n">sideEffect</span><span class="p">(</span><span class="n">effect</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>乍一看，上面的代码可能看似简单，但实际上却难以完全理解，这很正常。这是因为 SideEffect API与 Compose运行时底层内部机制紧密相关，尤其是 ChangeList，它用于跟踪和管理用于更新渲染UI的状态驱动变更列表。</p>

<p>根据 Compose源代码中的内部注释，SideEffect API的表示如下：</p>

<blockquote><p>安排效果在当前合成成功完成并应用更改时运行。SideEffect 可用于将副作用应用于合成管理的、未受快照支持的对象，以便在当前合成操作失败时避免这些对象处于不一致的状态。</p>

<p>副作用将始终在合成的应用调度程序上运行，并且应用器永远不会与自身、彼此并发运行，也不会将更改应用于合成树或运行 RememberObserver 事件回调。SideEffect 始终在 RememberObserver 事件回调之后运行。</p></blockquote>

<p>因此，SideEffect API 会在每次成功重组后运行。</p>

<h2>结论</h2>

<p>在本文中，你探索了 Jetpack Compose 中常用的三个主要副作用处理API。由于声明式UI（declarative UI）的特性，状态会影响运行时行为的诸多方面，因此正确地使用副作用函数对于确保任务执行的正确性和可预测性至关重要。</p>

<p>本主题最初在<a href="https://github.com/doveletter/">Dove Letter</a>（译注：链接是<a href="https://github.com/doveletter/%EF%BC%89%E4%B8%AD%E4%BB%8B%E7%BB%8D%EF%BC%8C%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E7%A7%81%E4%BA%BA%E4%BB%A3%E7%A0%81%E5%BA%93%EF%BC%8C%E6%8F%90%E4%BE%9B%E6%9C%89%E5%85%B3">https://github.com/doveletter/%EF%BC%89%E4%B8%AD%E4%BB%8B%E7%BB%8D%EF%BC%8C%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E7%A7%81%E4%BA%BA%E4%BB%A3%E7%A0%81%E5%BA%93%EF%BC%8C%E6%8F%90%E4%BE%9B%E6%9C%89%E5%85%B3</a> Android 和 Kotlin 的每日见解，涵盖 Compose、架构、行业面试问题和实用代码技巧等主题。自上线以来的短短 37 周内，Dove Letter 已拥有超过 700 名个人订阅者和 20 名企业/终身订阅者。如果你渴望深入了解 Android、Kotlin 和 Compose，请务必查看<a href="https://medium.com/@skydoves/learn-kotlin-and-android-with-dove-letter-26265da11903">“通过 Dove Letter 学习 Kotlin 和 Android”</a>（译注：链接是<a href="https://medium.com/@skydoves/learn-kotlin-and-android-with-dove-letter-26265da11903%EF%BC%89%E3%80%82">https://medium.com/@skydoves/learn-kotlin-and-android-with-dove-letter-26265da11903%EF%BC%89%E3%80%82</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shortest Path in Graph]]></title>
    <link href="https://alexhilton.github.io/blog/2025/04/26/shortest-path-in-graph/"/>
    <updated>2025-04-26T21:28:55+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/04/26/shortest-path-in-graph</id>
    <content type="html"><![CDATA[<p>图中的路径问题，特别是最短路径问题是图论中算法的核心，今天 就来总结 一下。</p>

<p><a href="https://alexhilton.github.io/blog/2025/04/26/shortest-path-in-graph/"><img src="https://www.mbloging.com/_next/image?url=https%3A%2F%2Fcdn.sanity.io%2Fimages%2Fyynr1uml%2Fproduction%2F0b7098c6c641f29656d920a12b6a36feade61e38-1024x576.jpg%3Fw%3D1024%26auto%3Dformat&w=1920&q=75" title="auto auto" ></a></p>

<!-- more -->


<h2>BFS求无权最短径</h2>

<p>对于 无权图，用BFS就能找到两个节点之间的最短路径，这是BFS的天然优势。遍历 的时候 要注意 用「圈层式」遍历，也就是说对于 当前节点，把其相邻节点遍历 完，才能算走了一步。</p>

<h2>Dijkstra求有向无环带权图的最短路径</h2>

<p>对于有向无环图DAG，带有权重的最短路径问题可以用Dijkstra算法来求解。具体参见<a href="https://alexhilton.github.io/blog/2022/09/12/understanding-dijkstra-algorithm/">Understanding Dijkstra Algorithm</a>。</p>

<h2>Floyd</h2>

<ul>
<li><p><a href="https://www.programiz.com/dsa/floyd-warshall-algorithm">Floyd-Warshall Algorithm</a></p></li>
<li><p><a href="https://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm">Floyd–Warshall algorithm(Wikipedia)</a></p></li>
<li><a href="https://www.tutorialspoint.com/data_structures_algorithms/floyd_warshall_algorithm.htm">Floyd Warshall Algorithm</a></li>
</ul>


<h2>Bellman Ford</h2>

<p>Bellman Ford算法能处理负权重，这是与其他算法不同之处。</p>

<ul>
<li><a href="https://en.wikipedia.org/wiki/Bellman%E2%80%93Ford_algorithm">Bellman–Ford algorithm(Wikipedia)</a></li>
<li><a href="https://www.programiz.com/dsa/bellman-ford-algorithm">Bellman Ford&rsquo;s Algorithm</a></li>
<li><a href="https://brilliant.org/wiki/bellman-ford-algorithm/">Bellman-Ford Algorithm</a></li>
</ul>


<h2>SPFA</h2>

<p>Shortest Path Faster Algorithm，SPFA，基于Bellman Ford优化出来的更快速的算法。SPFA is an optimization of Bellman Ford algorithm.</p>

<ul>
<li><a href="https://cp-algorithms.com/graph/bellman_ford.html">Bellman-Ford Algorithm</a></li>
<li><a href="https://stackoverflow.com/questions/7710995/shortest-paths-faster-spfa-algorithm">Shortest Paths Faster - SPFA Algorithm?</a></li>
<li><a href="https://www.ultipa.com/document/ultipa-graph-analytics-algorithms/spfa/v5.0">Shortest Path Faster Algorithm (SPFA)</a></li>
</ul>


<h2>典型问题</h2>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/cheapest-flights-within-k-stops/description/">787. K 站中转内最便宜的航班</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/cheapest-flights-within-k-stops/solutions/3637197/xi-you-yuan-su-787-k-zhan-zhong-zhuan-ne-xik1/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/minimum-cost-to-reach-destination-in-time/description/">1928. 规定时间内到达终点的最小花费</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/minimum-cost-to-reach-destination-in-time/solutions/3661240/xi-you-yuan-su-1928-gui-ding-shi-jian-ne-omo5/">题解</a> </td>
<td style="text-align:left;"> 787的变种 </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h2>References</h2>

<ul>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&amp;mid=2247488007&amp;idx=1&amp;sn=9d0dcfdf475168d26a5a4bd6fcd3505d&amp;chksm=fd9cb918caeb300e1c8844583db5c5318a89e60d8d552747ff8c2256910d32acd9013c93058f&amp;token=754098973&amp;lang=zh_CN&amp;poc_token=HBXK_Wej6Ul4b-A49RUuWn8ZDe0YvHMH9w7EGTxA">【最短路/必背模板】涵盖所有的「存图方式」与「最短路算法（详尽注释）」</a></li>
<li><a href="https://leetcode.cn/problems/cheapest-flights-within-k-stops/solutions/955290/gong-shui-san-xie-xiang-jie-bellman-ford-dc94/">【宫水三叶】运用 Bellman Ford 求解有限制的最短路问题</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入理解Jetpack Compose中的函数的执行顺序]]></title>
    <link href="https://alexhilton.github.io/blog/2025/04/26/understanding-execution-order-in-jetpack-compose/"/>
    <updated>2025-04-26T21:21:31+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/04/26/understanding-execution-order-in-jetpack-compose</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自「Understanding Execution Order in Jetpack Compose: DisposableEffect, LaunchedEffect, and Composables」，原文链接<a href="https://proandroiddev.com/understanding-execution-order-in-jetpack-compose-disposableeffect-launchedeffect-and-composables-d2d0b75b7ec8">https://proandroiddev.com/understanding-execution-order-in-jetpack-compose-disposableeffect-launchedeffect-and-composables-d2d0b75b7ec8</a>，由Sahil Thakar发布于2025年4月13日。</p></blockquote>

<p><a href="https://alexhilton.github.io/blog/2025/04/26/understanding-execution-order-in-jetpack-compose/"><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*44_HTD27S8k-mxkIc_A9zg.png" title="auto auto" ></a></p>

<!-- more -->


<p>大家好，今天我们又来聊聊Jetpack-Compose的小话题。无论对于新手还是经验丰富的开发者来说，这都是一个小话题，但却是很关键的。我们将讨论一下Jetpack Compose中副作用和可组合项（composables）的执行顺序，特别是 DisposableEffect、LaunchedEffect 和可组合函数的执行顺序以及其生命周期交互过程。</p>

<p>我们将仔细探究 DisposableEffect 和 LaunchedEffect 在可组合项之间导航切换时是如何执行的，特别关注它们在返回之前访问过的页面时的行为。（许多经验丰富的开发者会告诉我我知道这一点，但我敢打赌，你们中的很多人并不知道）。</p>

<p>那么，让我们开始吧。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">MyComposable</span><span class="p">(</span><span class="n">cartId</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">lifecycleOwner</span> <span class="p">=</span> <span class="n">LocalLifecycleOwner</span><span class="p">.</span><span class="n">current</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// DisposableEffect observes the lifecycleOwner</span>
</span><span class='line'>    <span class="n">DisposableEffect</span><span class="p">(</span><span class="n">lifecycleOwner</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="p">.</span><span class="n">e</span><span class="p">(</span><span class="s">&quot;Init&quot;</span><span class="p">,</span> <span class="s">&quot;DisposableEffect&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">onDispose</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Log</span><span class="p">.</span><span class="n">e</span><span class="p">(</span><span class="s">&quot;Init&quot;</span><span class="p">,</span> <span class="s">&quot;DisposableEffect - onDispose&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// LaunchedEffect triggers when cartId changes</span>
</span><span class='line'>    <span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">key1</span> <span class="p">=</span> <span class="n">cartId</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="p">.</span><span class="n">e</span><span class="p">(</span><span class="s">&quot;Init&quot;</span><span class="p">,</span> <span class="s">&quot;LaunchedEffect&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Scaffold is the UI container</span>
</span><span class='line'>    <span class="n">Column</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="p">.</span><span class="n">e</span><span class="p">(</span><span class="s">&quot;Init&quot;</span><span class="p">,</span> <span class="s">&quot;Column&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="c1">// You can add your screen content here</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Output</span><span class="p">:-</span>
</span><span class='line'>
</span><span class='line'><span class="n">E</span><span class="p">/</span><span class="n">Init</span><span class="p">:</span> <span class="n">Column</span>
</span><span class='line'><span class="n">E</span><span class="p">/</span><span class="n">Init</span><span class="p">:</span> <span class="n">DisposableEffect</span>
</span><span class='line'><span class="n">E</span><span class="p">/</span><span class="n">Init</span><span class="p">:</span> <span class="n">LaunchedEffect</span>
</span></code></pre></td></tr></table></div></figure>


<h2>执行顺序迷题：为什么Column先执行？</h2>

<p>答案在于这些副作用 API（DisposableEffect、LaunchedEffect）相对于组合(Composition)的实际执行时间。</p>

<h3>1. 组合阶段优先</h3>

<ul>
<li>Jetpack Compose 首先在组合期间构建UI树。</li>
<li>此时，Column 是一个可组合函数。它会在组合阶段立即执行，以构建 UI。</li>
<li>因此：Column() 首先运行 → 打出日志 “Column”。</li>
</ul>


<h3>2. 副作用在组合期间注册，但在组合完成后执行</h3>

<ul>
<li>DisposableEffect 和 LaunchedEffect 在组合期间注册其工作，
但它们的实际执行发生在组合完成后。</li>
<li>Compose 使用内部调度程序（通过 Recomposer）在提交帧后运行副作用。</li>
</ul>


<p>因此，实际时间线如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'>组合（Composition） 开始
</span><span class='line'>   → Column<span class="o">()</span> 运行 → 打印日志 <span class="s2">&quot;Column&quot;</span>
</span><span class='line'>   → 注册 DisposableEffect 代码块
</span><span class='line'>   → 注册 LaunchedEffect 代码块
</span><span class='line'>组合 结束
</span><span class='line'>→ 副作用函数开始执行
</span><span class='line'>   → DisposableEffect 执行 → 打印日志 <span class="s2">&quot;DisposableEffect&quot;</span>
</span><span class='line'>   → LaunchedEffect 启动协程 → 打印日志 <span class="s2">&quot;LaunchedEffect&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里我们讨论了composables和副作用之间的执行顺序。
那么在 LaunchedEffect和 DisposableEffect副作用函数之间，谁又将先执行呢？</p>

<p>让我们来仔细看看。</p>

<p><strong>副作用函数的执行顺序（组合完成后）：</strong></p>

<ol>
<li>DisposableEffect → 首先运行</li>
<li>LaunchedEffect → 随后运行</li>
</ol>


<p>为啥子呢？</p>

<p>此顺序由Compose运行时定义的：</p>

<ul>
<li>DisposableEffect 是同步的，用于在组合后立即处理设置/清理。</li>
<li>LaunchedEffect 会启动一个协程，而协程的启动是异步的，计划在其他同步效果（例如 DisposableEffect）之后运行。</li>
</ul>


<p>内部机制：Jetpack Compose 维护了明确定义的效果应用顺序。</p>

<ol>
<li>DisposableEffect、SideEffect、SnapshotFlow 等副作用会在组合后立即触发（同步）。</li>
<li>然后，基于协程的效果（例如 LaunchedEffect）会被调度到下一个运行（异步，通过 Recomposer）。</li>
</ol>


<p>现在，让我们看看在可组合项之间导航切换时 DisposableEffect 和 LaunchedEffect 是如何执行的，尤其关注它们在返回之前访问过的屏幕时的行为。</p>

<p>输出结果会让你大吃一惊。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">MyApp</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">navController</span> <span class="p">=</span> <span class="n">rememberNavController</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NavHost</span><span class="p">(</span><span class="n">navController</span> <span class="p">=</span> <span class="n">navController</span><span class="p">,</span> <span class="n">startDestination</span> <span class="p">=</span> <span class="s">&quot;screenA&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">composable</span><span class="p">(</span><span class="s">&quot;screenA&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">ScreenA</span><span class="p">(</span>
</span><span class='line'>                <span class="n">cartId</span> <span class="p">=</span> <span class="s">&quot;123&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">onNavigateToB</span> <span class="p">=</span> <span class="p">{</span> <span class="n">navController</span><span class="p">.</span><span class="n">navigate</span><span class="p">(</span><span class="s">&quot;screenB&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">composable</span><span class="p">(</span><span class="s">&quot;screenB&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">ScreenB</span><span class="p">(</span>
</span><span class='line'>                <span class="n">cartId</span> <span class="p">=</span> <span class="s">&quot;456&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">onNavigateBack</span> <span class="p">=</span> <span class="p">{</span> <span class="n">navController</span><span class="p">.</span><span class="n">popBackStack</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">ScreenA</span><span class="p">(</span><span class="n">cartId</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">onNavigateToB</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">DisposableEffect</span><span class="p">(</span><span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;😇 ScreenA -&gt; DisposableEffect&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">onDispose</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">println</span><span class="p">(</span><span class="s">&quot;😇 ScreenA -&gt; DisposableEffect - onDispose&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">cartId</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;😇ScreenA -&gt; LaunchedEffect&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Column</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="n">top</span> <span class="p">=</span> <span class="m">100.</span><span class="n">dp</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Button</span><span class="p">(</span><span class="n">onClick</span> <span class="p">=</span> <span class="n">onNavigateToB</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Text</span><span class="p">(</span><span class="n">text</span> <span class="p">=</span> <span class="s">&quot;Navigate To ScreenB&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">ScreenB</span><span class="p">(</span><span class="n">cartId</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">onNavigateBack</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">lifecycleOwner</span> <span class="p">=</span> <span class="n">LocalLifecycleOwner</span><span class="p">.</span><span class="n">current</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">DisposableEffect</span><span class="p">(</span><span class="n">lifecycleOwner</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;😇 ScreenB -&gt; DisposableEffect&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">onDispose</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">println</span><span class="p">(</span><span class="s">&quot;😇 ScreenB -&gt; DisposableEffect - onDispose&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">cartId</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;😇 ScreenB -&gt; LaunchedEffect&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Column</span><span class="p">{</span>
</span><span class='line'>        <span class="n">Column</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Button</span><span class="p">(</span><span class="n">onClick</span> <span class="p">=</span> <span class="n">onNavigateBack</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Back to Screen A&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Output</span><span class="p">:-</span>
</span><span class='line'>
</span><span class='line'><span class="k">when</span> <span class="n">ScreenA</span> <span class="n">init</span>
</span><span class='line'><span class="err">😇</span> <span class="n">ScreenA</span> <span class="p">-&gt;</span> <span class="n">DisposableEffect</span>
</span><span class='line'><span class="err">😇</span> <span class="n">ScreenA</span> <span class="p">-&gt;</span> <span class="n">LaunchedEffect</span>
</span><span class='line'>
</span><span class='line'><span class="n">Navigate</span> <span class="n">To</span> <span class="n">ScreenA</span> <span class="p">-&gt;</span> <span class="n">ScreenB</span>
</span><span class='line'><span class="err">😇</span> <span class="n">ScreenB</span> <span class="p">-&gt;</span> <span class="n">DisposableEffect</span>
</span><span class='line'><span class="err">😇</span> <span class="n">ScreenB</span> <span class="p">-&gt;</span> <span class="n">LaunchedEffect</span>
</span><span class='line'><span class="err">😇</span> <span class="n">ScreenA</span> <span class="p">-&gt;</span> <span class="n">DisposableEffect</span> <span class="p">-</span> <span class="n">onDispose</span>
</span><span class='line'>
</span><span class='line'><span class="n">Navigate</span> <span class="n">back</span> <span class="n">to</span> <span class="n">ScreenB</span> <span class="p">-&gt;</span> <span class="n">ScreenA</span>
</span><span class='line'><span class="err">😇</span> <span class="n">ScreenA</span> <span class="p">-&gt;</span> <span class="n">DisposableEffect</span>
</span><span class='line'><span class="err">😇</span> <span class="n">ScreenA</span> <span class="p">-&gt;</span> <span class="n">LaunchedEffect</span>
</span><span class='line'><span class="err">😇</span> <span class="n">ScreenB</span> <span class="p">-&gt;</span> <span class="n">DisposableEffect</span> <span class="p">-</span> <span class="n">onDispose</span>
</span></code></pre></td></tr></table></div></figure>


<h2>它（Jetpack Compose导航）内部实际发生了什么？</h2>

<p>Compose Navigation在 NavHost中围绕可组合项的行为遵循以下逻辑：</p>

<ol>
<li>首先进行新目的地（此处为 ScreenA）的组合。

<ul>
<li>导航切换时，Compose会立即为新屏幕创建UI。</li>
<li>新页面（此处为 ScreenA）的 DisposableEffect 和 LaunchedEffect 会在新页面组合期间或之后立即执行。</li>
</ul>
</li>
<li>在新目的地成功组合并提交到 UI 层次结构后，会处理上一个页面的可组合项（此处为 ScreenB）。

<ul>
<li>Compose 会保持上一个可组合项（此处为 ScreenB）短暂处于活动状态，直到新可组合项（此处为 ScreenA）稳定，以确保导航顺畅。</li>
<li>只有在新的可组合项（此处为 ScreenA）完全组合后，Compose 才会清理并移除（dispose）上一个可组合项（此处为 ScreenB）。</li>
</ul>
</li>
</ol>


<p>因此，导航期间的实际生命周期流程是酱婶儿的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'>导航返回 <span class="o">(</span>ScreenB → ScreenA<span class="o">)</span>
</span><span class='line'>│
</span><span class='line'>├── 1️⃣ Compose 立即创建 ScreenA
</span><span class='line'>│      ├─ ScreenA DisposableEffect executes instantly.
</span><span class='line'>│      └─ ScreenA LaunchedEffect coroutine launched.
</span><span class='line'>│
</span><span class='line'>└── 2️⃣ 在ScreenA成功运行之后:
</span><span class='line'>       └─ ScreenB DisposableEffect onDispose runs.
</span></code></pre></td></tr></table></div></figure>


<h2>为啥Compose要酱紫 搞？</h2>

<p>Compose Navigation 会谨慎处理页面的组合，以确保丝滑（seamless）的用户体验和稳定性：</p>

<ul>
<li>它不会在确保目标页面 (ScreenA) 已组合并准备就绪之前过早地处理上一个可组合项 (ScreenB)。</li>
<li>这可以避免在导航切换过程中出现视觉故障或空白屏幕。</li>
<li>只有在确保新页面安全到位后，Compose 才会触发处理上一个屏幕的操作。</li>
</ul>


<h2>Jetpack Compose NavHost内部机制（简化版本）：</h2>

<p>在调用 popBackStack() 或 navigate() 时，Compose 的 NavHost 内部的工作方式如下：</p>

<ul>
<li>新的路由组合开始（可组合项创建）。</li>
<li>成功组合并提交帧后，不再位于 NavHost 后栈中的旧可组合项节点将被标记为待处理。</li>
<li>然后，Compose 会在下一帧中运行这些已移除可组合项的处置逻辑 (onDispose)。</li>
</ul>


<p>因此，即使你在视觉上立即导航回原点，销毁式的操作（如onDispose）也会略微延迟执行，以保证界面的整体稳定性。</p>

<p>如果你有任何疑问，请留言，我会尽快回复你。💬✨
我们很快会深入探讨Jetpack Compose，敬请期待！🚀
在此之前，祝你coding愉快！🎉👨‍💻</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jetpack Compose的性能优化建议]]></title>
    <link href="https://alexhilton.github.io/blog/2025/04/22/performance-optimization-in-jetpack-compose/"/>
    <updated>2025-04-22T22:34:25+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/04/22/performance-optimization-in-jetpack-compose</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自「Performance Optimization in Jetpack Compose」，原文链接<a href="https://carrion.dev/en/posts/performance-optimization-compose/">https://carrion.dev/en/posts/performance-optimization-compose/</a>，由Ignacio Carrión，发布于2025年4月8日。</p></blockquote>

<p><a href="https://alexhilton.github.io/blog/2025/04/22/performance-optimization-in-jetpack-compose/"><img src="https://www.itmob.cn/upload/2023/01/banner-jetpack-compose-a452c3e8f1ad489a8560a4f0a9f88e07.jpg" title="auto auto" ></a></p>

<!-- more -->


<p><strong>译者按：</strong> Jetpack Compose是一个优秀的声明式UI框架，对开发者非常友好，可以高效率的撸各种UI页面和UI元素。但它仍然并不是很成熟，有些事情还做不了，而且渲染性能也略输于原生的View方式，毕竟它比原生的View多了一层组合树和渲染树。因此，在享受声明式UI带来的便捷的同时，就需要深入地了解其内部的工作机制，和学习一些高级技巧，以提升运行时的渲染性能。另外，需要 注意虽然这篇文章是针对for Android的Jetpack Compose，但大部分也适用于Compose Multiplatform。</p>

<p>性能优化对于在Jetpack Compose应用中提供流畅的用户体验至关重要。本文探讨了关键技术和最佳实践，以确保你的可组合函数高效且性能卓越。</p>

<h2>理解组合（Composition）和重组（ReComposition）</h2>

<p><strong>译注：</strong> 组合与重组是Compose中非常重要 的概念，如果不熟悉的同学可以复习一下之前的文章<a href="https://juejin.cn/post/7379437165486112805">降Compose十八掌之『潜龙勿用』| Thinking in Compose</a>和<a href="https://juejin.cn/post/7401358349877346338">降Compose十八掌之『损则有孚』| Lifecycle</a>。</p>

<p>Compose 性能的一个基本方面是了解合成和重组的工作原理：</p>

<h3>智能重组（Smart Recomposition）</h3>

<p>Compose 使用智能重组功能，仅更新界面中需要更改的部分。了解触发重组的原因以及如何最小化重组的影响范围对于性能优化至关重要。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">ExpensiveCalculation</span><span class="p">(</span><span class="n">numbers</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Int</span><span class="p">&gt;)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 不好：每次重组都会执行昂贵的操作</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">average</span> <span class="p">=</span> <span class="n">numbers</span><span class="p">.</span><span class="n">takeIf</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">isNotEmpty</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>        <span class="o">?.</span><span class="n">average</span><span class="p">()</span>
</span><span class='line'>        <span class="o">?:</span> <span class="m">0.0</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 优点：昂贵的操作被缓存，并且仅在输入发生变化时重新计算</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">cachedAverage</span> <span class="p">=</span> <span class="n">remember</span><span class="p">(</span><span class="n">numbers</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">numbers</span><span class="p">.</span><span class="n">takeIf</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">isNotEmpty</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>            <span class="o">?.</span><span class="n">average</span><span class="p">()</span>
</span><span class='line'>            <span class="o">?:</span> <span class="m">0.0</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Column</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 每次重组时都会重新计算</span>
</span><span class='line'>        <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Current Average: ${&quot;</span><span class="p">%.</span><span class="m">2f</span><span class="s">&quot;.format(average)}&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 这将使用缓存住的值</span>
</span><span class='line'>        <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Cached Average: ${&quot;</span><span class="p">%.</span><span class="m">2f</span><span class="s">&quot;.format(cachedAverage)}&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>稳定类型（Stable types）和不可变性（Immutability）</h3>

<p>稳定的类型对于Compose的智能重组系统至关重要。当Compose能够保证其 equals() 方法与其属性一致，并且属性本身不会在不触发重组的情况下发生变化时，该类型即被视为稳定类型。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// 不好：类型不稳定 - 可变属性可能会在不通知Compose的情况下发生变化</span>
</span><span class='line'><span class="n">data</span> <span class="k">class</span> <span class="nc">UserState</span><span class="p">(</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="c1">// 可变属性可以偷偷地改变</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">age</span><span class="p">:</span> <span class="n">Int</span>      <span class="c1">// 而且更改不会触发重组</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 优点：稳定类型 - 不可变属性和显式稳定性</span>
</span><span class='line'><span class="n">@Stable</span>  <span class="c1">// 告诉Compose此类型具有可预测的相等性</span>
</span><span class='line'><span class="n">data</span> <span class="k">class</span> <span class="nc">UserState</span><span class="p">(</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span>  <span class="c1">// 不可变属性</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">age</span><span class="p">:</span> <span class="n">Int</span>      <span class="c1">// 如要更改需要创建新实例</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用稳定类型有以下几个好处：</p>

<ol>
<li>更高效的重组 - 当Compose确定数据未发生变化时，它可以跳过重组部分UI，换句话说可以减少很多不必要的重组，进而提高性能</li>
<li>可预测的行为 - 数据更改始终会触发正确的UI更新</li>
<li>线程安全（Thread safety） - 不可变数据可以安全地在协程之间共享</li>
</ol>


<p><strong>译注：</strong> 这里说的应该是可以在线程之间安全地共享，协程如果没有线程切换是不会有线程安全问题的。</p>

<h2>性能优化的关键点</h2>

<h3>1. 合理地使用 remember 和 derivedStateOf 进行状态（State）管理</h3>

<p>remember 和 derivedStateOf 函数在状态管理中起到不同的作用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">UserProfile</span><span class="p">(</span><span class="n">user</span><span class="p">:</span> <span class="n">User</span><span class="p">,</span> <span class="n">items</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Item</span><span class="p">&gt;)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 缺点：每次重新组合时都重新计算</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">filteredItems</span> <span class="p">=</span> <span class="n">items</span><span class="p">.</span><span class="n">filter</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">userId</span> <span class="p">==</span> <span class="n">user</span><span class="p">.</span><span class="n">id</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 好：使用记忆缓存计算</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">cachedItems</span> <span class="p">=</span> <span class="n">remember</span><span class="p">(</span><span class="n">items</span><span class="p">,</span> <span class="n">user</span><span class="p">.</span><span class="n">id</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">items</span><span class="p">.</span><span class="n">filter</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">userId</span> <span class="p">==</span> <span class="n">user</span><span class="p">.</span><span class="n">id</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 更好的方式：使用 derivedStateOf 进行反应式计算</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">reactiveItems</span> <span class="k">by</span> <span class="n">remember</span><span class="p">(</span><span class="n">items</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">derivedStateOf</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">items</span><span class="p">.</span><span class="n">filter</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">userId</span> <span class="p">==</span> <span class="n">user</span><span class="p">.</span><span class="n">id</span> <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 当 items 发生变化时，reactiveItems 会自动更新</span>
</span><span class='line'>    <span class="c1">// 并且仅在过滤结果发生变化时触发重组</span>
</span><span class='line'>    <span class="n">LazyColumn</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">itemsIndexed</span><span class="p">(</span>
</span><span class='line'>            <span class="n">items</span> <span class="p">=</span> <span class="n">reactiveItems</span><span class="p">,</span>
</span><span class='line'>            <span class="n">key</span> <span class="p">=</span> <span class="p">{</span> <span class="n">_</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">item</span><span class="p">:</span> <span class="n">Item</span> <span class="p">-&gt;</span> <span class="n">item</span><span class="p">.</span><span class="n">id</span> <span class="p">}</span>
</span><span class='line'>        <span class="p">)</span> <span class="p">{</span> <span class="n">_</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">item</span><span class="p">:</span> <span class="n">Item</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="n">ItemRow</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>译注：</strong> 对于状态的管理，可以复习一下之前专门讲解副作用(Side effects)的文章<a href="https://juejin.cn/post/7405158681078104127">降Compose十八掌之『龙战于野』| Side Effects</a>。</p>

<h3>2. 合理地使用CompositionLocal</h3>

<p><strong>译注：</strong> 关于CompositionLocal的使用可以看前面写过的文章<a href="https://juejin.cn/post/7434543407636267071">用Compose中的CompositionLocal来暗渡陈仓</a>，下面的示例是想要说明，应该在合理的地方访问CompositionLocal里面的数据，因数对CompositionLocal的访问地方会被触发重组（<a href="https://juejin.cn/post/7401358349877346338">之前的文章有讲过</a>重组的触发是状态使用的地方，而不是定义的地方），如果在所有的地方都 直接访问CompositionLocal，特别是嵌套较深的地方也都 直接访问，那都会触发重组，但大部分其实是不必要的。像下样示例展示的那样，在一定的级别中访问CompositionLocal，然后它的内部嵌套调用直接复用数值，可以避免过度重组。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// 不好：每个子组件都访问 CompositionLocal</span>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">DeepNestedContent</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">theme</span> <span class="p">=</span> <span class="n">LocalTheme</span><span class="p">.</span><span class="n">current</span>  <span class="c1">// 直接访问</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">strings</span> <span class="p">=</span> <span class="n">LocalStrings</span><span class="p">.</span><span class="n">current</span>  <span class="c1">// 多个 CompositionLocal 访问</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">dimensions</span> <span class="p">=</span> <span class="n">LocalDimensions</span><span class="p">.</span><span class="n">current</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Column</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Text</span><span class="p">(</span>
</span><span class='line'>            <span class="n">text</span> <span class="p">=</span> <span class="n">strings</span><span class="p">.</span><span class="n">title</span><span class="p">,</span>
</span><span class='line'>            <span class="n">style</span> <span class="p">=</span> <span class="n">theme</span><span class="p">.</span><span class="n">textStyle</span><span class="p">,</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="n">dimensions</span><span class="p">.</span><span class="n">padding</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>        <span class="c1">// 具有重复 CompositionLocal 访问的更多嵌套内容</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 好：提升 CompositionLocal的值以最小化查找</span>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">ParentContent</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 单独访问 CompositionLocal 值</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">theme</span> <span class="p">=</span> <span class="n">LocalTheme</span><span class="p">.</span><span class="n">current</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">strings</span> <span class="p">=</span> <span class="n">LocalStrings</span><span class="p">.</span><span class="n">current</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">dimensions</span> <span class="p">=</span> <span class="n">LocalDimensions</span><span class="p">.</span><span class="n">current</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">DeepNestedContent</span><span class="p">(</span>
</span><span class='line'>        <span class="n">theme</span> <span class="p">=</span> <span class="n">theme</span><span class="p">,</span>
</span><span class='line'>        <span class="n">strings</span> <span class="p">=</span> <span class="n">strings</span><span class="p">,</span>
</span><span class='line'>        <span class="n">dimensions</span> <span class="p">=</span> <span class="n">dimensions</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">DeepNestedContent</span><span class="p">(</span>
</span><span class='line'>    <span class="n">theme</span><span class="p">:</span> <span class="n">Theme</span><span class="p">,</span>
</span><span class='line'>    <span class="n">strings</span><span class="p">:</span> <span class="n">Strings</span><span class="p">,</span>
</span><span class='line'>    <span class="n">dimensions</span><span class="p">:</span> <span class="n">Dimensions</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 使用传递的参数而不是查找 CompositionLocal 值</span>
</span><span class='line'>    <span class="n">Column</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Text</span><span class="p">(</span>
</span><span class='line'>            <span class="n">text</span> <span class="p">=</span> <span class="n">strings</span><span class="p">.</span><span class="n">title</span><span class="p">,</span>
</span><span class='line'>            <span class="n">style</span> <span class="p">=</span> <span class="n">theme</span><span class="p">.</span><span class="n">textStyle</span><span class="p">,</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="n">dimensions</span><span class="p">.</span><span class="n">padding</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>        <span class="c1">// 使用传递的参数进行更多嵌套内容</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3. LazyList 优化技巧</h3>

<p>高效的列表渲染对于流畅的滚动性能至关重要。以下是针对 LazyList 组件的关键优化：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="err">&lt;</span><span class="nf">T</span> <span class="p">:</span> <span class="n">Any</span><span class="p">&gt;</span> <span class="n">OptimizedList</span><span class="p">(</span><span class="n">items</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">LazyColumn</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">itemsIndexed</span><span class="p">(</span>
</span><span class='line'>            <span class="n">items</span> <span class="p">=</span> <span class="n">items</span><span class="p">,</span>
</span><span class='line'>            <span class="c1">// 稳定的key有助于Compose在更新过程中跟踪项目</span>
</span><span class='line'>            <span class="n">key</span> <span class="p">=</span> <span class="p">{</span> <span class="n">_</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">item</span><span class="p">:</span> <span class="n">T</span> <span class="p">-&gt;</span> <span class="n">item</span><span class="p">.</span><span class="n">hashCode</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>        <span class="p">)</span> <span class="p">{</span> <span class="n">_</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">item</span><span class="p">:</span> <span class="n">T</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="c1">// 每个item的内容</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>LazyList 的关键优化点：</p>

<ol>
<li>提供稳定的键，帮助Compose在更新过程中跟踪项目</li>
<li>尽可能使用固定大小以避免重新测量</li>
<li>保持项目可组合项的轻量级</li>
<li>避免在项目内容中进行不必要的分配</li>
<li>记住要为每个项目缓存昂贵的计算</li>
</ol>


<h2>测量和监控性能</h2>

<h3>Layout Inspector和Composition Traces</h3>

<p>Android Studio 中的布局检查器是一款强大的Compose界面性能调试工具。它能够帮助你深入了解应用的视图层次结构、重组计数以及应用于每个可组合项的修饰符。</p>

<p>要将布局检查器与Compose结合使用，请执行以下操作：</p>

<ol>
<li>在调试模式下运行你的应用</li>
<li>在“正在运行的设备”窗口中，你将看到一个用于切换布局检查器的按钮</li>
<li>检查Compose层次结构：

<ul>
<li>查看组件树</li>
<li>检查重组计数</li>
<li>分析修饰符链</li>
<li>检查可组合项参数</li>
</ul>
</li>
</ol>


<p><img src="https://carrion.dev/images/kotlin/layout-inspector.png" alt="Layout Inspector" /></p>

<p>布局检查器中需要监控的关键指标：</p>

<ol>
<li>重组计数 - 数值较高表示存在潜在的优化机会</li>
<li>跳过计数 - 检查可组合项是否在应该跳过重组时跳过</li>
<li>修饰符链复杂度 - 较长的修饰符链可能会影响测量/布局性能</li>
</ol>


<h3>性能测试</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Test</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">performanceTest</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">benchmarkRule</span><span class="p">.</span><span class="n">measureRepeated</span><span class="p">(</span>
</span><span class='line'>        <span class="n">packageName</span> <span class="p">=</span> <span class="s">&quot;com.example.app&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">metrics</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span><span class="n">FrameTimingMetric</span><span class="p">()),</span>
</span><span class='line'>        <span class="n">iterations</span> <span class="p">=</span> <span class="m">5</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">composeTestRule</span><span class="p">.</span><span class="n">setContent</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">YourComposable</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>最佳实践总结</h2>

<ol>
<li>使用稳定类型(Stable types)和不可变数据结构(Immutable data structures)</li>
<li>使用remember提升高开销计算</li>
<li>在惰性列表(lazy list)中实现合适的键(key)</li>
<li>最小化重组范围</li>
<li>定期分析和测量性能</li>
</ol>


<p>遵循这些优化技巧将有助于确保你的Compose UI保持响应迅速且高效，从而为你的应用提供更好的用户体验。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compose Multiplatform支持热重载(Hot Reload)了]]></title>
    <link href="https://alexhilton.github.io/blog/2025/04/12/compose-hot-reload/"/>
    <updated>2025-04-12T17:11:47+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/04/12/compose-hot-reload</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自Compose Hot Reload is Now Available，原文链接<a href="https://medium.com/@wisemuji/compose-hot-reload-is-now-available-3a9aee58b0fe">Compose Hot Reload is Now Available</a>，由<a href="https://medium.com/@wisemuji">Suhyeon Kim</a>，发布于2025年3月19日。</p></blockquote>

<p><a href="https://alexhilton.github.io/blog/2025/04/12/compose-hot-reload/"><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*FMBFWn5vJOuaM41zKE6aTg.jpeg" title="auto auto" ></a></p>

<!-- more -->


<p><strong>译注：</strong>  需要注意的是Google通过Android Studio(after Giraffe)里面的<a href="https://developer.android.com/develop/ui/compose/tooling/iterative-development">Live Edit特性</a>提供了对Android上面的Jetpack Compose的实时更新支持。但它仅支持Jetpack Compose (for Adnroid)，并不支持CMP，也即不支持JetBrains的Compose。也正因为如此JetBrains才会开发面向CMP的Hot Reload。</p>

<p>在Compose UI开发过程中，你是否经常需要构建运行？Compose 热重载现已在Maven Central中推出，可为Compose多平台（桌面）应用中的UI代码提供实时更新。我们无需重启应用即可立即查看UI代码的更改。</p>

<p>让我们来一探究竟！</p>

<h2>热重载(Hot Reload)是什么鬼？</h2>

<p>许多声明式UI框架都提供了类似概念，热重载，即可以在开发过程中提供对UI更改的近乎即时的反馈（尽管它们的名称不同！）。</p>

<p>例如隔壁的两家：</p>

<ul>
<li>Flutter热加载：<a href="https://docs.flutter.dev/tools/hot-reload">https://docs.flutter.dev/tools/hot-reload</a></li>
<li>React Native快速刷新：<a href="https://reactnative.dev/docs/fast-refresh">https://reactnative.dev/docs/fast-refresh</a></li>
</ul>


<p>热重载允许开发者实时查看代码更改，无需重启应用或重新编译整个项目。在大多数情况下，热重载会保留应用的状态，因此开发者可以继续与应用交互，而不会丢失进度或上下文。这可以帮助开发者快速演示代码更改对UI的影响，从而提高工作效率，而无需等待漫长的构建。</p>

<h2>Compose的热重载</h2>

<p>看一下官方的介绍<a href="https://github.com/JetBrains/compose-hot-reload">https://github.com/JetBrains/compose-hot-reload</a>：</p>

<blockquote><p>在Compose多平台应用中更改你的UI代码，并实时查看结果。
无需重启应用。</p></blockquote>

<p>目前，Compose Hot Reload 适用于针对桌面 JVM 的多平台项目（未来是否有可能扩展？我不确定。:D）。Compose Hot Reload 的最新版本是 v1.0.0-alpha02，于昨天（2025 年 3 月 17 日）发布。现在，开发者可以在Compose多平台应用中查看其UI代码的更改，而无需重启应用。这意味着开发者可以立即预览更改，而无需缓慢的构建和重启。</p>

<p><strong>译注：</strong> 现在（2025年4月9日）最新版本是 v1.0.0-alpha04，主要是Bugfix，目前开发中的版本是 v1.0.0-alpha05 。</p>

<h2>如何上手</h2>

<p>要开始使用Compose Hot Reload，请查看<a href="https://github.com/JetBrains/compose-hot-reload">Compose Hot Reload</a>的 GitHub 代码库。</p>

<p><strong>注意：</strong> 以下内容基于 v1.0.0-alpha02 编写。</p>

<h3>依赖要求</h3>

<ul>
<li>一个以桌面为目标的Compose Multiplatform 项目（参见<a href="https://github.com/JetBrains/compose-hot-reload#faq">其FAQ</a>）</li>
<li>Kotlin 2.1.20-Beta2 或更高版本</li>
</ul>


<p>对于 Android 应用，有一个小的解决方法：
首先，你需要从Jetpack Compose插件切换到Compose Multiplatform 插件，
然后添加一个单独的 Gradle 模块并配置桌面目标。</p>

<h3>将 Gradle 插件应用到你的项目中</h3>

<p>将 org.jetbrains.compose.hot-reload Gradle 插件添加到你的构建脚本：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">plugins</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">kotlin</span><span class="p">(</span><span class="s">&quot;multiplatform&quot;</span><span class="p">)</span> <span class="n">version</span> <span class="s">&quot;2.1.20-RC&quot;</span> <span class="c1">// &lt;- Use Kotlin 2.1.20-RC or higher!</span>
</span><span class='line'>    <span class="n">kotlin</span><span class="p">(</span><span class="s">&quot;plugin.compose&quot;</span><span class="p">)</span> <span class="n">version</span> <span class="s">&quot;2.1.20-RC&quot;</span> <span class="c1">// &lt;- Use Compose Compiler Plugin 2.1.20-RC or higher!</span>
</span><span class='line'>    <span class="n">id</span><span class="p">(</span><span class="s">&quot;org.jetbrains.compose&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">id</span><span class="p">(</span><span class="s">&quot;org.jetbrains.compose.hot-reload&quot;</span><span class="p">)</span> <span class="n">version</span> <span class="s">&quot;1.0.0-alpha02&quot;</span> <span class="c1">// &lt;- add this additionally</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>启用“OptimizeNonSkippingGroups”：</h3>

<p>将以下内容添加到你的 build.gradle.kts ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">import</span> <span class="nn">org.jetbrains.kotlin.compose.compiler.gradle.ComposeFeatureFlag</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="n">composeCompiler</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">featureFlags</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">ComposeFeatureFlag</span><span class="p">.</span><span class="n">OptimizeNonSkippingGroups</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>为UI热重载提供入口点</h3>

<p>在项目的桌面源代码集中，使用 DevelopmentEntryPoint 包装窗口内容。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">import</span> <span class="nn">org.jetbrains.compose.reload.DevelopmentEntryPoint</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">singleWindowApplication</span><span class="p">(...)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">DevelopmentEntryPoint</span> <span class="p">{</span> <span class="c1">// add this line</span>
</span><span class='line'>            <span class="n">App</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这就是我们需要折腾的全部内容。现在让我们看看它是如何工作的。</p>

<h2>Demo演示</h2>

<p>要了解Compose 热重载的实际效果，我们来看看我的示例项目<a href="https://github.com/wisemuji/compose-would-you-rather-game">“Would You Rather Game”</a>。这个项目是一个简单的 Compose 多平台桌面应用，用户可以在其中回答有趣的“Would You Rather”问题。Compose 热重载插件最近已实现。</p>

<p>你可以参考 Compose 热重载的setup提交：<a href="https://github.com/wisemuji/compose-would-you-rather-game/commit/937375cea9010733ee751dc2d464a0df21318cee">setup提交</a>。</p>

<p>如果你在项目上运行desktopRun，你会注意到桌面应用程序旁边会出现一个小的Compose图标。</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1288/format:webp/1*TXn4jUzxwcSh5IfqRqFNkA.png" alt="HotReload Icon" /></p>

<p>这将触发 Compose Hot Reload Tooling 模式，如下所示：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*37gLudPijGvh3A-rKdK_kw.png" alt="HotReload Demo" /></p>

<h3>UI更改示例</h3>

<p>假设我们想要更改<a href="https://github.com/wisemuji/compose-would-you-rather-game/blob/4e9bfc7172c7145f95190fd383169bbcdc25856f/composeApp/src/commonMain/kotlin/ui/game/GameScreen.kt#L226">GameScreen.kt</a>中的动画。</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*b4xJXpWH9oA5YohC1zsWng.gif" alt="Full Demo" /></p>

<p>看到没有！一旦我们保存文件，更改就会立即显示在正在运行的应用程序中。无需重启应用！</p>

<h2>热重载当前支持的场景</h2>

<p>目前，几乎所有代码更改都支持热重载（除了从类中删除超类型）。</p>

<p><a href="https://hashnode.com/@sellmair">Sebastian Sellmair 的视频和博客文章</a>通过多个演示展示了这些功能，并详细解释了重载的底层工作原理。</p>

<h2>局限性</h2>

<p>由于它仅支持基于 JVM 的桌面应用，因此目前尚不支持 Android 和其他平台。
此外，构建性能方面可能存在一些问题。在我的本地环境中，更改大约需要 3 到 5 秒，感觉比其他声明式UI框架中的热重载慢不少。估计它会在后面得到改善。</p>

<p>由于这是一个 Alpha 版本，因此无法保证稳定性。开发者应该预料到可能会出现一些潜在的错误和迁移挑战，正如 JetBrains 团队所指出的：“Alpha 版本意味着使用风险自负，迁移问题也需谨慎。我们打算将这个想法产品化，但尚未最终成型。” 由于该功能仍在积极开发中，因此我们应该在未来的版本中持续关注更新。</p>

<h2>提供反馈</h2>

<p>如果你遇到任何问题或有改进建议，你可以通过<a href="https://slack-chats.kotlinlang.org/t/27038699/with-compose-hot-reload-now-being-available-on-maven-central"> Kotlinlang Slack - Compose Hot Reload </a>分享你的想法。</p>

<blockquote><p>尤其欢迎提：</p>

<ul>
<li>设置时遇到的问题</li>
<li>重新加载特定代码段时遇到的问题</li>
<li>关于如何改进/功能请求的想法</li>
</ul>


<p>目前不太感兴趣的内容：</p>

<ul>
<li>构建性能：目前，“Gradle 重编译器”的速度将与你的项目速度一样快。强烈建议
启用 Gradles 配置缓存，并保持项目非常干净。其他“重编译器”也会有所帮助！（IntelliJ、Amper 等）</li>
</ul>
</blockquote>

<h2>总结</h2>

<p>我相信 Compose 中的 Hot Reload 是开发 Compose UI的一大变革。
它可以让开发人员在无需重启应用的情况下看到更改，从而加快UI开发速度，但它仍处于实验阶段。目前，它最适合个人或早期项目，你可以使用 alpha 版本进行开发。在你自己的 Compose Multiplatform 项目中试用它，体验即时UI反馈的好处！</p>

<p>我迫不及待地想看到即将到来的更新！XD</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://github.com/JetBrains/compose-hot-reload">https://github.com/JetBrains/compose-hot-reload</a></li>
<li><a href="https://blog.sellmair.io/say-hello-to-compose-hot-reload-firework">https://blog.sellmair.io/say-hello-to-compose-hot-reload-firework</a></li>
<li><a href="https://www.youtube.com/watch?v=8Z-Vuo3wTd0">Firework: Introducing Compose Hot Reload</a></li>
<li><a href="https://www.youtube.com/watch?v=I_FMnPaEBEA">How ‘Hot Reload’ is implemented for Compose</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[实战：探索Jetpack Compose中的SearchBar]]></title>
    <link href="https://alexhilton.github.io/blog/2025/04/09/searchbar-in-jetpack-compose/"/>
    <updated>2025-04-09T22:40:46+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/04/09/searchbar-in-jetpack-compose</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自Exploring Jetpack Compose: SearchBar，原文链接：<a href="https://joebirch.co/android/exploring-the-searchbar-composable/">https://joebirch.co/android/exploring-the-searchbar-composable/</a>，作者是Joe Birch。</p></blockquote>

<p>在应用内搜索内容是一项常见功能，事实上，你可以在设备上的大多数应用程序中发现此功能。在 Android 上，我们看到的此功能的常见 UI 组件是浮动搜索栏，放置在屏幕的显眼位置。在某些情况下，这还会向用户提供搜索建议，以简化搜索过程。Jetpack Compose Material3 软件包提供了对提供此功能的 SearchBar 可组合项的访问，在这篇博文中，我们将学习如何在我们自己的应用中使用它。</p>

<p><a href="https://alexhilton.github.io/blog/2025/04/09/searchbar-in-jetpack-compose/"><img src="https://joebirch.co/wp-content/uploads/2025/03/Group.png" title="auto auto" ></a></p>

<!-- more -->


<p>SearchBar 可组合项允许我们显示一个浮动的搜索组件，该组件展开后会显示可选的推荐。如上所述，这是我们在许多应用中看到的常见模式，此可组合项提供了开箱即用的解决方案。SearchBar 可组合项提供了足够的自定义功能来控制组件的外观和感觉，同时使用基于插槽(slot)的方法让我们提供输入字段以供使用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">SearchBar</span><span class="p">(</span>
</span><span class='line'>    <span class="n">inputField</span><span class="p">:</span> <span class="n">@Composable</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span>
</span><span class='line'>    <span class="n">expanded</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">,</span>
</span><span class='line'>    <span class="n">onExpandedChange</span><span class="p">:</span> <span class="p">(</span><span class="n">Boolean</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="n">shape</span><span class="p">:</span> <span class="n">Shape</span> <span class="p">=</span> <span class="n">SearchBarDefaults</span><span class="p">.</span><span class="n">inputFieldShape</span><span class="p">,</span>
</span><span class='line'>    <span class="n">colors</span><span class="p">:</span> <span class="n">SearchBarColors</span> <span class="p">=</span> <span class="n">SearchBarDefaults</span><span class="p">.</span><span class="n">colors</span><span class="p">(),</span>
</span><span class='line'>    <span class="n">tonalElevation</span><span class="p">:</span> <span class="n">Dp</span> <span class="p">=</span> <span class="n">SearchBarDefaults</span><span class="p">.</span><span class="n">TonalElevation</span><span class="p">,</span>
</span><span class='line'>    <span class="n">shadowElevation</span><span class="p">:</span> <span class="n">Dp</span> <span class="p">=</span> <span class="n">SearchBarDefaults</span><span class="p">.</span><span class="n">ShadowElevation</span><span class="p">,</span>
</span><span class='line'>    <span class="n">windowInsets</span><span class="p">:</span> <span class="n">WindowInsets</span> <span class="p">=</span> <span class="n">SearchBarDefaults</span><span class="p">.</span><span class="n">windowInsets</span><span class="p">,</span>
</span><span class='line'>    <span class="n">content</span><span class="p">:</span> <span class="n">@Composable</span> <span class="n">ColumnScope</span><span class="p">.()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>该组件为我们处理了大部分内部工作——其中两个关键部分需要我们自己提供。</p>

<ul>
<li>inputField – 这是表示内容输入的搜索字段的输入可组合项</li>
<li>content – 这是搜索栏展开时用于显示推荐的内容区域</li>
</ul>


<p>除了这些字段之外，还有一组其他属性用于确定 SearchBar 的当前状态。例如，当搜索栏处于展开状态时，可组合项的内容将显示在输入字段下方。为了能够管理这一点，我们需要为可组合项提供一些参数，用于管理此状态。首先，expanded 参数用于描述 SearchBar 是否处于展开状态（这将决定是否显示内容区域），以及 onExpandedChange 参数，用于为实现提供展开状态的更新值（然后可用于反映我们自己的状态实现）。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">var</span> <span class="py">expanded</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="k">false</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">SearchBar</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxWidth</span><span class="p">(),</span>
</span><span class='line'>    <span class="n">expanded</span> <span class="p">=</span> <span class="n">expanded</span><span class="p">,</span>
</span><span class='line'>    <span class="n">onExpandedChange</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">expanded</span> <span class="p">=</span> <span class="n">it</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>除了管理这种展开状态外，我们还需要提供用于 SearchBar 输入区域的 inputField。除了遵循可组合项的基于插槽的方法之外，这还允许可组合项遵循状态提升的概念，使我们能够完全管理 SearchBar 输入字段的状态概念。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">var</span> <span class="py">expanded</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="k">false</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">var</span> <span class="py">query</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">&lt;</span><span class="n">String</span><span class="p">?&gt;(</span><span class="k">null</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">SearchBar</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxWidth</span><span class="p">(),</span>
</span><span class='line'>    <span class="n">expanded</span> <span class="p">=</span> <span class="n">expanded</span><span class="p">,</span>
</span><span class='line'>    <span class="n">onExpandedChange</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">expanded</span> <span class="p">=</span> <span class="n">it</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="n">inputField</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// ...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>为了简化此操作，SearchBarDefaults 类为我们提供了对 InputField 可组合项的访问 - 这使我们能够访问专门为 SearchBar 实现的可组合项。不需要使用此特定可组合项，但它是专门为基于搜索的输入字段提供的便利可组合项。此可组合项采用一些关键参数，用于将其配置为在 SearchBar 中使用：</p>

<ul>
<li>expanded 和 onExpandedChange - 用于管理字段的展开状态</li>
<li>query 和 onQueryChange - 用于管理字段中显示的查询的状态</li>
</ul>


<p>除了这些核心属性外，你还会注意到对标准字段参数（如占位符、leadingIcon 和 trailingIcon）的支持。除了用于提供信息之外，我们还可以在下面的示例中看到我如何使用 trailingIcon 允许 SearchBar 在单击取消按钮时恢复到折叠状态。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">SearchBarDefaults</span><span class="p">.</span><span class="n">InputField</span><span class="p">(</span>
</span><span class='line'>    <span class="n">onSearch</span> <span class="p">=</span> <span class="p">{</span> <span class="n">expanded</span> <span class="p">=</span> <span class="k">false</span> <span class="p">},</span>
</span><span class='line'>    <span class="n">expanded</span> <span class="p">=</span> <span class="n">expanded</span><span class="p">,</span>
</span><span class='line'>    <span class="n">onExpandedChange</span> <span class="p">=</span> <span class="p">{</span> <span class="n">expanded</span> <span class="p">=</span> <span class="n">it</span> <span class="p">},</span>
</span><span class='line'>    <span class="n">placeholder</span> <span class="p">=</span> <span class="p">{</span> <span class="n">Text</span><span class="p">(</span><span class="s">&quot;What are you looking for?&quot;</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'>    <span class="n">leadingIcon</span> <span class="p">=</span> <span class="p">{</span> <span class="n">Icon</span><span class="p">(</span><span class="n">Icons</span><span class="p">.</span><span class="n">Default</span><span class="p">.</span><span class="n">Search</span><span class="p">,</span> <span class="n">contentDescription</span> <span class="p">=</span> <span class="k">null</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'>    <span class="n">trailingIcon</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">expanded</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">IconButton</span><span class="p">(</span><span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">expanded</span> <span class="p">=</span> <span class="k">false</span>
</span><span class='line'>            <span class="p">})</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">Icon</span><span class="p">(</span><span class="n">Icons</span><span class="p">.</span><span class="n">Default</span><span class="p">.</span><span class="n">Close</span><span class="p">,</span> <span class="n">contentDescription</span> <span class="p">=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="n">query</span> <span class="p">=</span> <span class="n">query</span> <span class="o">?:</span> <span class="s">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">onQueryChange</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">query</span> <span class="p">=</span> <span class="n">it</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后可以将此 InputField 可组合项的实现插入到 SearchBar 可组合项的 inputField 参数中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">var</span> <span class="py">expanded</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="k">false</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">var</span> <span class="py">query</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">&lt;</span><span class="n">String</span><span class="p">?&gt;(</span><span class="k">null</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">SearchBar</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxWidth</span><span class="p">(),</span>
</span><span class='line'>    <span class="n">expanded</span> <span class="p">=</span> <span class="n">expanded</span><span class="p">,</span>
</span><span class='line'>    <span class="n">onExpandedChange</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">expanded</span> <span class="p">=</span> <span class="n">it</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="n">inputField</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">SearchBarDefaults</span><span class="p">.</span><span class="n">InputField</span><span class="p">(</span>
</span><span class='line'>            <span class="n">onSearch</span> <span class="p">=</span> <span class="p">{</span> <span class="n">expanded</span> <span class="p">=</span> <span class="k">false</span> <span class="p">},</span>
</span><span class='line'>            <span class="n">expanded</span> <span class="p">=</span> <span class="n">expanded</span><span class="p">,</span>
</span><span class='line'>            <span class="n">onExpandedChange</span> <span class="p">=</span> <span class="p">{</span> <span class="n">expanded</span> <span class="p">=</span> <span class="n">it</span> <span class="p">},</span>
</span><span class='line'>            <span class="n">placeholder</span> <span class="p">=</span> <span class="p">{</span> <span class="n">Text</span><span class="p">(</span><span class="s">&quot;What are you looking for?&quot;</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'>            <span class="n">leadingIcon</span> <span class="p">=</span> <span class="p">{</span> <span class="n">Icon</span><span class="p">(</span><span class="n">Icons</span><span class="p">.</span><span class="n">Default</span><span class="p">.</span><span class="n">Search</span><span class="p">,</span> <span class="n">contentDescription</span> <span class="p">=</span> <span class="k">null</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'>            <span class="n">trailingIcon</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">expanded</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">IconButton</span><span class="p">(</span><span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">expanded</span> <span class="p">=</span> <span class="k">false</span>
</span><span class='line'>                    <span class="p">})</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">Icon</span><span class="p">(</span><span class="n">Icons</span><span class="p">.</span><span class="n">Default</span><span class="p">.</span><span class="n">Close</span><span class="p">,</span> <span class="n">contentDescription</span> <span class="p">=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="n">query</span> <span class="p">=</span> <span class="n">query</span> <span class="o">?:</span> <span class="s">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">onQueryChange</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">query</span> <span class="p">=</span> <span class="n">it</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>此时，我们将能够组合 SearchBar 并看到在我们的 UI 中显示的浮动组件。</p>

<p><img src="https://joebirch.co/wp-content/uploads/2025/03/sea.png" alt="SearchBar" /></p>

<p>此时我们剩下要实现的就是 SearchBar 的内容，这是 SearchBar 处于展开状态时显示的内容。此参数利用了 ColumnScope，因此此处提供的任何可组合项都将垂直堆叠。此内容区域的预期形式是用户可以选择的推荐列表，因此我们将继续编写几个 ListItem 可组合项，每个可组合项都用于向用户显示搜索推荐。当点击其中任何一项时，查询将更新为选定值，并且 SearchBar 的展开状态将重置。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">var</span> <span class="py">expanded</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="k">false</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">var</span> <span class="py">query</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">&lt;</span><span class="n">String</span><span class="p">?&gt;(</span><span class="k">null</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">SearchBar</span><span class="p">(</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">listOf</span><span class="p">(</span><span class="s">&quot;Result 1&quot;</span><span class="p">,</span> <span class="s">&quot;Result 2&quot;</span><span class="p">,</span> <span class="s">&quot;Result 3&quot;</span><span class="p">,</span> <span class="s">&quot;Result 4&quot;</span><span class="p">).</span><span class="n">forEach</span> <span class="p">{</span> <span class="n">text</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="n">ListItem</span><span class="p">(</span>
</span><span class='line'>            <span class="n">headlineContent</span> <span class="p">=</span> <span class="p">{</span> <span class="n">Text</span><span class="p">(</span><span class="n">text</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'>            <span class="n">colors</span> <span class="p">=</span> <span class="n">ListItemDefaults</span><span class="p">.</span><span class="n">colors</span><span class="p">(</span><span class="n">containerColor</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Transparent</span><span class="p">),</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">clickable</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">query</span> <span class="p">=</span> <span class="n">text</span>
</span><span class='line'>                <span class="n">expanded</span> <span class="p">=</span> <span class="k">false</span>
</span><span class='line'>            <span class="p">}.</span><span class="n">fillMaxWidth</span><span class="p">().</span><span class="n">padding</span><span class="p">(</span><span class="n">horizontal</span> <span class="p">=</span> <span class="m">16.</span><span class="n">dp</span><span class="p">,</span> <span class="n">vertical</span> <span class="p">=</span> <span class="m">8.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>有了此功能，我们现在就能够看到在浮动搜索栏下方显示的推荐。</p>

<p><img src="https://joebirch.co/wp-content/uploads/2025/03/recs.png" alt="Recommendations" /></p>

<p>有了上述内容，我们就可以实现一个浮动搜索栏，向用户显示搜索建议。使用 Material3 SearchBar 可组合项，实现在这两种不同状态之间转换的可组合项非常容易。也许你已经在应用中使用了 SearchBar，或者一直在寻找类似的功能，但无论如何，我期待看到更多应用通过 Jetpack Compose 中更广泛的组件支持来节省时间！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[实战：在Compose中优雅地实现提示]]></title>
    <link href="https://alexhilton.github.io/blog/2025/03/28/hints-in-compose/"/>
    <updated>2025-03-28T22:05:00+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/03/28/hints-in-compose</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自<a href="https://proandroiddev.com/hints-in-compose-10b6470acc58">Hints in Compose</a>，原文由<a href="https://medium.com/@vitoksmile">Viktor Mykhailiv</a>发布于2025年2月13日，文章内容巨详细，TL;DR;。</p></blockquote>

<p><a href="https://alexhilton.github.io/blog/2025/03/28/hints-in-compose/"><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*0jBirMqQV-aXKXw5gekEkQ.jpeg" title="auto auto" ></a></p>

<!-- more -->


<p>有时我们的应用需要突出显示某些 UI 组件，例如在首次登录（首次使用）时，或者当我们添加新内容（“新功能”）时。</p>

<p>在本文中，我将指导如何构建自定义解决方案来显示提示/工具提示，指向 Compose（Compose Multiplatform 和 Jetpack Compose）中的特定 UI 元素。</p>

<h2>布局层次</h2>

<p>要突出显示 UI 元素，首先我们应该了解“提示”(Hints)的主要概念。
假设我们有一个带有 TopBar、BottomNavigation 和主要操作按钮的应用程序。我们想要突出显示 TopBar 的操作、主要按钮和 BottomNavigation 中的一个项目。</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*7K0zoXqZM0ajYYZARn6I5w.png" alt="Layout hierarchy" /></p>

<p>对于我们的“提示”，我们需要绘制一个暗淡的背景（也是为了拦截触摸事件），计算突出显示的 UI 元素的位置，剪掉（屏蔽）我们的元素形状以免变暗，最后绘制一个提示（例如带有背景的文本）。</p>

<h2>1. 暗淡的背景</h2>

<p>要在所有内容之上绘制一个暗淡的背景作为覆盖或弹出窗口，我们可以：</p>

<h3>a. 使用自定义可组合项包装我们应用（根组件）的所有内容（例如带有 Modifier.background 的 Box）</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">AppContent</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">HintOverlay</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">MaterialTheme</span> <span class="p">{</span>
</span><span class='line'>         <span class="n">Scaffold</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 我的应用内容</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>b. 使用对话框</h3>

<p>通过使用对话框，我们可以在所有内容之上显示一个覆盖层（例如，在 Android 上，对话框显示在自己的窗口中）。
使用对话框时，Compose Multiplatform 中的 scrimColor 会出现问题。我们无法从 Compose 通用目标配置 scrimColor ，但每个目标（Android 除外）都为 scrimColor 提供了一个实际值。作为一种可能的解决方案，我们可以创建一个例外类来提供对话框属性并为每个目标提供实际实现。</p>

<h3>c. 使用 Popup</h3>

<p>Popup 在这里看起来更好，因为它默认不绘制 scrimColor，并且覆盖层显示在所有内容之上。</p>

<p>我会采用第三种方法，不强制手动使用 HintOverlay。</p>

<p>我还想为覆盖层背景添加 Brush 支持，而不仅仅是 Color 。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">LocalHintOverlayColor</span> <span class="p">=</span> <span class="n">staticCompositionLocalOf</span><span class="p">&lt;</span><span class="n">Color</span><span class="p">&gt;</span> <span class="p">{</span> <span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">x44000000</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="py">LocalHintOverlayBrush</span> <span class="p">=</span> <span class="n">staticCompositionLocalOf</span><span class="p">&lt;</span><span class="n">Brush</span><span class="p">?&gt;</span> <span class="p">{</span> <span class="k">null</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">HintOverlay</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Popup</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                <span class="p">.</span><span class="n">fillMaxSize</span><span class="p">()</span>
</span><span class='line'>                <span class="p">.</span><span class="n">overlayBackground</span><span class="p">()</span>
</span><span class='line'>        <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Text</span><span class="p">(</span>
</span><span class='line'>                <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">align</span><span class="p">(</span><span class="n">Alignment</span><span class="p">.</span><span class="n">Center</span><span class="p">),</span>
</span><span class='line'>                <span class="n">text</span> <span class="p">=</span> <span class="s">&quot;Draw hints here&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">White</span><span class="p">,</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 从 [LocalHintOverlayBrush] 或 [LocalHintOverlayColor] 设置 `background`。</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">Modifier</span><span class="p">.</span><span class="n">overlayBackground</span><span class="p">():</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">composed</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">LocalHintOverlayBrush</span><span class="p">.</span><span class="n">current</span><span class="o">?.</span><span class="n">let</span> <span class="p">{</span> <span class="n">background</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>        <span class="o">?:</span> <span class="n">background</span><span class="p">(</span><span class="n">LocalHintOverlayColor</span><span class="p">.</span><span class="n">current</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我可以使用CompositionLocalProvider 设置 Brush 来覆盖覆盖的背景。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">CompositionLocalProvider</span><span class="p">(</span>
</span><span class='line'>    <span class="n">LocalHintOverlayBrush</span> <span class="n">provides</span> <span class="n">Brush</span><span class="p">.</span><span class="n">linearGradient</span><span class="p">(</span>
</span><span class='line'>        <span class="n">listOf</span><span class="p">(</span>
</span><span class='line'>            <span class="n">Color</span><span class="p">.</span><span class="n">Red</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="n">alpha</span> <span class="p">=</span> <span class="m">0.5f</span><span class="p">),</span>
</span><span class='line'>            <span class="n">Color</span><span class="p">.</span><span class="n">Blue</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="n">alpha</span> <span class="p">=</span> <span class="m">0.5f</span><span class="p">),</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">),</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">HintOverlay</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*KrHuSNZT0zE-Eddz1GBA2A.png" alt="Dimmed background" /></p>

<h2>2. 计算锚点坐标</h2>

<p>要获取 Compose 中 UI 元素的坐标，我们可以使用OnGloballyPositionedModifier ，当内容的全局位置可能发生变化时，会使用布局的最终​​ LayoutCoordinates 调用该方法。</p>

<p>使用示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">Column</span><span class="p">(</span>
</span><span class='line'>    <span class="n">Modifier</span><span class="p">.</span><span class="n">onGloballyPositioned</span> <span class="p">{</span> <span class="n">coordinates</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="c1">// 这将是Column的大小。</span>
</span><span class='line'>        <span class="n">coordinates</span><span class="p">.</span><span class="n">size</span>
</span><span class='line'>        <span class="c1">// Column相对于应用程序窗口的位置。</span>
</span><span class='line'>        <span class="n">coordinates</span><span class="p">.</span><span class="n">positionInWindow</span><span class="p">()</span>
</span><span class='line'>        <span class="c1">// Column相对于 Compose 根的位置。</span>
</span><span class='line'>        <span class="n">coordinates</span><span class="p">.</span><span class="n">positionInRoot</span><span class="p">()</span>
</span><span class='line'>        <span class="c1">// 这些将是提供给布局的对齐线（此处的Column为空）。</span>
</span><span class='line'>        <span class="n">coordinates</span><span class="p">.</span><span class="n">providedAlignmentLines</span>
</span><span class='line'>        <span class="c1">// 这将是与 Column 的父级相对应的 LayoutCoordinates 实例。</span>
</span><span class='line'>        <span class="n">coordinates</span><span class="p">.</span><span class="n">parentLayoutCoordinates</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Box</span><span class="p">(</span><span class="n">Modifier</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">20.</span><span class="n">dp</span><span class="p">).</span><span class="n">background</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">Green</span><span class="p">))</span>
</span><span class='line'>    <span class="n">Box</span><span class="p">(</span><span class="n">Modifier</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">20.</span><span class="n">dp</span><span class="p">).</span><span class="n">background</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">Blue</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于我们的提示，我们需要创建一个状态来保存锚点的坐标和大小，并引入一个修改器来更新状态：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Stable</span>
</span><span class='line'><span class="k">class</span> <span class="nc">HintAnchorState</span> <span class="k">internal</span> <span class="n">constructor</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">internal</span> <span class="k">var</span> <span class="py">size</span><span class="p">:</span> <span class="n">IntSize</span> <span class="k">by</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="n">IntSize</span><span class="p">.</span><span class="n">Zero</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">internal</span> <span class="k">var</span> <span class="py">offset</span><span class="p">:</span> <span class="n">Offset</span> <span class="k">by</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="n">Offset</span><span class="p">.</span><span class="n">Zero</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">rememberHintAnchorState</span><span class="p">():</span> <span class="n">HintAnchorState</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">HintAnchorState</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">Modifier</span><span class="p">.</span><span class="n">hintAnchor</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">HintAnchorState</span><span class="p">):</span> <span class="n">Modifier</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">onGloballyPositioned</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">state</span><span class="p">.</span><span class="n">size</span> <span class="p">=</span> <span class="n">it</span><span class="p">.</span><span class="n">size</span>
</span><span class='line'>        <span class="n">state</span><span class="p">.</span><span class="n">offset</span> <span class="p">=</span> <span class="n">it</span><span class="p">.</span><span class="n">positionInWindow</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>因此，我们只需订阅所需 UI 元素的大小和坐标变化即可更新锚点的状态。
现在我们需要将此 hintAnchor 修饰符应用于我们的内容：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">topAppBarActionHintAnchor</span> <span class="p">=</span> <span class="n">rememberHintAnchorState</span><span class="p">()</span>
</span><span class='line'><span class="k">val</span> <span class="py">actionHintAnchor</span> <span class="p">=</span> <span class="n">rememberHintAnchorState</span><span class="p">()</span>
</span><span class='line'><span class="k">val</span> <span class="py">bottomNavigationHintAnchor</span> <span class="p">=</span> <span class="n">rememberHintAnchorState</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">IconButton</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>        <span class="p">.</span><span class="n">hintAnchor</span><span class="p">(</span><span class="n">topAppBarActionHintAnchor</span><span class="p">),</span>
</span><span class='line'>    <span class="n">onClick</span> <span class="p">=</span> <span class="p">{},</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">Button</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>        <span class="p">.</span><span class="n">hintAnchor</span><span class="p">(</span><span class="n">actionHintAnchor</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">4.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>    <span class="n">onClick</span> <span class="p">=</span> <span class="p">{},</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Action&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BottomNavigationItem</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>        <span class="p">.</span><span class="n">hintAnchor</span><span class="p">(</span><span class="n">topAppBarActionHintAnchor</span><span class="p">),</span>
</span><span class='line'>    <span class="c1">//... 传入其他需要的参数</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><strong>注意：</strong> 修饰符顺序在 Compose 中始终很重要，我们在 hintAnchor 后设置 4.dp，以便在此按钮周围留出额外空间（锚点的尺寸将比实际按钮的尺寸大 4.dp）。</p></blockquote>

<p>HintOverlay 可组合项需要进行一些更改才能使用 HintAnchorState为此锚点绘制提示。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">HintOverlay</span><span class="p">(</span>
</span><span class='line'>    <span class="n">anchors</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">HintAnchorState</span><span class="p">&gt;,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">fillMaxSize</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">overlayBackground</span><span class="p">(</span><span class="n">anchors</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 从 [LocalHintOverlayBrush] 或 [LocalHintOverlayColor] 设置“background”。</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">Modifier</span><span class="p">.</span><span class="n">overlayBackground</span><span class="p">(</span>
</span><span class='line'>    <span class="n">anchors</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">HintAnchorState</span><span class="p">&gt;,</span>
</span><span class='line'><span class="p">):</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">composed</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">backgroundBrush</span> <span class="p">=</span> <span class="n">LocalHintOverlayBrush</span><span class="p">.</span><span class="n">current</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">backgroundColor</span> <span class="p">=</span> <span class="n">LocalHintOverlayColor</span><span class="p">.</span><span class="n">current</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">drawWithCache</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">onDrawWithContent</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">backgroundBrush</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">drawRect</span><span class="p">(</span><span class="n">backgroundBrush</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">drawRect</span><span class="p">(</span><span class="n">backgroundColor</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">anchors</span><span class="p">().</span><span class="n">forEach</span> <span class="p">{</span> <span class="n">anchor</span> <span class="p">-&gt;</span>
</span><span class='line'>                <span class="n">drawRect</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Red</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">topLeft</span> <span class="p">=</span> <span class="n">anchor</span><span class="p">.</span><span class="n">offset</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">size</span> <span class="p">=</span> <span class="n">anchor</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">toSize</span><span class="p">(),</span>
</span><span class='line'>                    <span class="n">style</span> <span class="p">=</span> <span class="n">Stroke</span><span class="p">(</span><span class="n">width</span> <span class="p">=</span> <span class="m">5f</span><span class="p">),</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">drawContent</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在我们只需在锚点周围画一个红色矩形：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*EqvV4AHsimwvwZxajIgtXg.png" alt="Anchors" /></p>

<p>但如果我们在移动设备上运行，我们会在 Android 上得到错误的数字：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*2wennrPOIcKArOK4MuayAQ.png" alt="With Window Insets" /></p>

<p>该问题与 WindowInsets 有关。让我们减去这些 insets 来修复它：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">fun</span> <span class="nf">Modifier</span><span class="p">.</span><span class="n">hintAnchor</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">HintAnchorState</span><span class="p">):</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">composed</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">statusBarInsets</span> <span class="p">=</span> <span class="n">WindowInsets</span><span class="p">.</span><span class="n">statusBars</span><span class="p">.</span><span class="n">getTop</span><span class="p">(</span><span class="n">LocalDensity</span><span class="p">.</span><span class="n">current</span><span class="p">).</span><span class="n">toFloat</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">onGloballyPositioned</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">state</span><span class="p">.</span><span class="n">size</span> <span class="p">=</span> <span class="n">it</span><span class="p">.</span><span class="n">size</span>
</span><span class='line'>        <span class="n">state</span><span class="p">.</span><span class="n">offset</span> <span class="p">=</span> <span class="n">it</span><span class="p">.</span><span class="n">positionInWindow</span><span class="p">()</span>
</span><span class='line'>            <span class="c1">// 修复 Android 上的 WindowInsets</span>
</span><span class='line'>            <span class="p">.</span><span class="n">minus</span><span class="p">(</span><span class="n">Offset</span><span class="p">(</span><span class="n">x</span> <span class="p">=</span> <span class="m">0f</span><span class="p">,</span> <span class="n">y</span> <span class="p">=</span> <span class="n">statusBarInsets</span><span class="p">))</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*LlrCLPAEgpk7q--X7i3UsA.png" alt="Fixed window insets" /></p>

<h2>3. 剪辑出锚点的形状</h2>

<p>要剪辑形状，我们将使用 Path 和 PathOperation 。修改 hintAnchor Modifier 以接受 Shape ，它将用于在锚点周围设置所需的形状。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">fun</span> <span class="nf">Modifier</span><span class="p">.</span><span class="n">hintAnchor</span><span class="p">(</span>
</span><span class='line'>    <span class="n">state</span><span class="p">:</span> <span class="n">HintAnchorState</span><span class="p">,</span>
</span><span class='line'>    <span class="n">shape</span><span class="p">:</span> <span class="n">Shape</span> <span class="p">=</span> <span class="n">RectangleShape</span><span class="p">,</span>
</span><span class='line'><span class="p">):</span> <span class="n">Modifier</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">state</span><span class="p">.</span><span class="n">shape</span> <span class="p">=</span> <span class="n">shape</span>
</span><span class='line'>    <span class="c1">//..onGloballyPositioned</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Stable</span>
</span><span class='line'><span class="k">class</span> <span class="nc">HintAnchorState</span> <span class="k">internal</span> <span class="n">constructor</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//...其他的状态放这里</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">internal</span> <span class="k">var</span> <span class="py">shape</span><span class="p">:</span> <span class="n">Shape</span> <span class="k">by</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="n">RectangleShape</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>根据提供的形状，我们可以创建一个轮廓，用于将锚点的形状从背景中剪掉：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">internal</span> <span class="k">fun</span> <span class="nf">Modifier</span><span class="p">.</span><span class="n">overlayBackground</span><span class="p">(</span>
</span><span class='line'>    <span class="n">anchors</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">HintAnchorState</span><span class="p">&gt;,</span>
</span><span class='line'><span class="p">):</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">composed</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">backgroundBrush</span> <span class="p">=</span> <span class="n">LocalHintOverlayBrush</span><span class="p">.</span><span class="n">current</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">backgroundColor</span> <span class="p">=</span> <span class="n">LocalHintOverlayColor</span><span class="p">.</span><span class="n">current</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">layoutDirection</span> <span class="p">=</span> <span class="n">LocalLayoutDirection</span><span class="p">.</span><span class="n">current</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">density</span> <span class="p">=</span> <span class="n">LocalDensity</span><span class="p">.</span><span class="n">current</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">drawWithCache</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 准备背景路径</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">path</span> <span class="p">=</span> <span class="n">Path</span><span class="p">().</span><span class="n">apply</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">lineTo</span><span class="p">(</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="m">0f</span><span class="p">)</span>
</span><span class='line'>            <span class="n">lineTo</span><span class="p">(</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">)</span>
</span><span class='line'>            <span class="n">lineTo</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">)</span>
</span><span class='line'>            <span class="n">lineTo</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="m">0f</span><span class="p">)</span>
</span><span class='line'>            <span class="n">close</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">anchors</span><span class="p">().</span><span class="n">forEach</span> <span class="p">{</span> <span class="n">anchor</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="c1">// 为锚点准备路径</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">anchorPath</span> <span class="p">=</span> <span class="n">Path</span><span class="p">()</span>
</span><span class='line'>            <span class="n">anchorPath</span><span class="p">.</span><span class="n">addOutline</span><span class="p">(</span>
</span><span class='line'>                <span class="n">anchor</span><span class="p">.</span><span class="n">shape</span><span class="p">.</span><span class="n">createOutline</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">size</span> <span class="p">=</span> <span class="n">anchor</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">toSize</span><span class="p">(),</span>
</span><span class='line'>                    <span class="n">layoutDirection</span> <span class="p">=</span> <span class="n">layoutDirection</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">density</span> <span class="p">=</span> <span class="n">density</span><span class="p">,</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>            <span class="n">anchorPath</span><span class="p">.</span><span class="n">translate</span><span class="p">(</span><span class="n">anchor</span><span class="p">.</span><span class="n">offset</span><span class="p">)</span>
</span><span class='line'>            <span class="n">anchorPath</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// 裁剪掉锚点</span>
</span><span class='line'>            <span class="n">path</span><span class="p">.</span><span class="n">op</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">anchorPath</span><span class="p">,</span> <span class="n">PathOperation</span><span class="p">.</span><span class="n">Xor</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">onDrawWithContent</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 我们不仅仅绘制路径，而不是像以前一样绘制矩形</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">backgroundBrush</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">drawPath</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">backgroundBrush</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">drawPath</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">backgroundColor</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">drawContent</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>让我们传递 CircleShape 和 RoundedCornerShape 来看看提示现在是什么样子：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*i2dWMv3Wa9at-fzGiKm8KQ.png" alt="Clip" /></p>

<p>此时，我们知道如何绘制背景覆盖层、计算锚点的位置以及如何剪裁背景。</p>

<h2>4. 绘制提示</h2>

<p>在实际绘制之前，我们应该定义提示需要呈现哪些信息。</p>

<p>为了不强制只提供文本，我们采用slot方法。通过定义slot，我们允许使用任何所需的composables。</p>

<p>我将介绍一个新的类 Hint 来保存我们的Composable内容：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Stable</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Hint</span> <span class="k">internal</span> <span class="n">constructor</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">internal</span> <span class="k">var</span> <span class="py">content</span><span class="p">:</span> <span class="n">@Composable</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span> <span class="k">by</span> <span class="n">mutableStateOf</span><span class="p">({})</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">rememberHint</span><span class="p">(</span><span class="n">content</span><span class="p">:</span> <span class="n">@Composable</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">):</span> <span class="n">Hint</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">remember</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Hint</span><span class="p">().</span><span class="n">also</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">content</span> <span class="p">=</span> <span class="n">content</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>并将此 Hint 添加为 HintAnchorState 的一部分：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Stable</span>
</span><span class='line'><span class="k">class</span> <span class="nc">HintAnchorState</span> <span class="k">internal</span> <span class="n">constructor</span><span class="p">(</span>
</span><span class='line'>    <span class="k">internal</span> <span class="k">val</span> <span class="py">hint</span><span class="p">:</span> <span class="n">Hint</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//...其他的状态放这里</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">rememberHintAnchorState</span><span class="p">(</span><span class="n">hint</span><span class="p">:</span> <span class="n">Hint</span><span class="p">):</span> <span class="n">HintAnchorState</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">remember</span><span class="p">(</span><span class="n">hint</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">HintAnchorState</span><span class="p">(</span><span class="n">hint</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在 HintOverlay 内部，我们可以采用最简单的解决方案 — BoxWithConstraints ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">HintOverlay</span><span class="p">(</span>
</span><span class='line'>    <span class="n">anchors</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">HintAnchorState</span><span class="p">&gt;,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'>    <span class="n">BoxWithConstraints</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">fillMaxSize</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">overlayBackground</span><span class="p">(</span><span class="n">anchors</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">anchors</span><span class="p">().</span><span class="n">forEach</span> <span class="p">{</span> <span class="n">anchor</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>                <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">graphicsLayer</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">translationX</span> <span class="p">=</span> <span class="n">anchor</span><span class="p">.</span><span class="n">offset</span><span class="p">.</span><span class="n">x</span>
</span><span class='line'>                        <span class="n">translationY</span> <span class="p">=</span> <span class="n">anchor</span><span class="p">.</span><span class="n">offset</span><span class="p">.</span><span class="n">y</span> <span class="p">+</span> <span class="n">anchor</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span>
</span><span class='line'>                    <span class="p">},</span>
</span><span class='line'>            <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">anchor</span><span class="p">.</span><span class="n">hint</span><span class="p">.</span><span class="n">content</span><span class="p">()</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>修改应用程序内容：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">topAppBarHint</span> <span class="p">=</span> <span class="n">rememberHint</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">OutlinedButton</span><span class="p">(</span><span class="n">onClick</span> <span class="p">=</span> <span class="p">{})</span> <span class="p">{</span> <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Hint for TopAppBar&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">val</span> <span class="py">topAppBarActionHintAnchor</span> <span class="p">=</span> <span class="n">rememberHintAnchorState</span><span class="p">(</span><span class="n">topAppBarHint</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="py">actionHint</span> <span class="p">=</span> <span class="n">rememberHint</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Hint for Action&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">val</span> <span class="py">actionHintAnchor</span> <span class="p">=</span> <span class="n">rememberHintAnchorState</span><span class="p">(</span><span class="n">actionHint</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="py">bottomNavigationHint</span> <span class="p">=</span> <span class="n">rememberHint</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Row</span><span class="p">(</span>
</span><span class='line'>        <span class="n">verticalAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">CenterVertically</span><span class="p">,</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Spacer</span><span class="p">(</span><span class="n">Modifier</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">32.</span><span class="n">dp</span><span class="p">).</span><span class="n">background</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">Magenta</span><span class="p">,</span> <span class="n">CircleShape</span><span class="p">))</span>
</span><span class='line'>        <span class="n">Spacer</span><span class="p">(</span><span class="n">Modifier</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">8.</span><span class="n">dp</span><span class="p">))</span>
</span><span class='line'>        <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Hint for BottomNavigation&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">val</span> <span class="py">bottomNavigationHintAnchor</span> <span class="p">=</span> <span class="n">rememberHintAnchorState</span><span class="p">(</span><span class="n">bottomNavigationHint</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>结果如下：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*mMenE2fp2jph6YUBlxX4pA.png" alt="Hint for action" /></p>

<p>让我们引入一个应用程序特定的代码来绘制提示背景。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">rememberHintContainer</span><span class="p">(</span><span class="n">content</span><span class="p">:</span> <span class="n">@Composable</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">):</span> <span class="n">Hint</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">rememberHint</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="n">top</span> <span class="p">=</span> <span class="m">8.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">Yellow</span><span class="p">,</span> <span class="n">shape</span> <span class="p">=</span> <span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">16.</span><span class="n">dp</span><span class="p">))</span>
</span><span class='line'>                <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">16.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>        <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">CompositionLocalProvider</span><span class="p">(</span>
</span><span class='line'>                <span class="n">LocalTextStyle</span> <span class="n">provides</span> <span class="n">TextStyle</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Black</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">fontSize</span> <span class="p">=</span> <span class="m">12.</span><span class="n">sp</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">fontWeight</span> <span class="p">=</span> <span class="n">FontWeight</span><span class="p">.</span><span class="n">Light</span><span class="p">,</span>
</span><span class='line'>                <span class="p">),</span>
</span><span class='line'>            <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">content</span><span class="p">()</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*xn8pxlU_nUQvywbtqVwUtw.png" alt="Hint2" /></p>

<p>我们遇到了 2 个问题：</p>

<ol>
<li>水平对齐，提示应与其锚点居中对齐。</li>
<li>BottomNavigation 的提示超出了屏幕范围。</li>
</ol>


<p>让我们改用自定义布局并修复这些问题。</p>

<p>要测量和布局多个可组合项，请使用 Layout。此composable允许我们手动测量和布局子项。所有更高级别的布局（如 Column 和 Row）都是使用 Layout 实现的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">internal</span> <span class="k">fun</span> <span class="nf">HintsContainer</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="n">anchors</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">HintAnchorState</span><span class="p">&gt;,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">anchors</span> <span class="p">=</span> <span class="n">anchors</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Layout</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">overlayBackground</span><span class="p">(</span><span class="n">anchors</span><span class="p">),</span>
</span><span class='line'>        <span class="n">content</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">anchors</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">hint</span><span class="p">.</span><span class="n">content</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span> <span class="n">measurables</span><span class="p">,</span> <span class="n">constraints</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="c1">// 测量每一个提示</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">placeables</span> <span class="p">=</span> <span class="n">measurables</span><span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">measurable</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="n">measurable</span><span class="p">.</span><span class="n">measure</span><span class="p">(</span>
</span><span class='line'>                <span class="n">constraints</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="n">minWidth</span> <span class="p">=</span> <span class="m">0</span><span class="p">,</span> <span class="n">minHeight</span> <span class="p">=</span> <span class="m">0</span><span class="p">)</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 将布局尺寸设置得尽可能大</span>
</span><span class='line'>        <span class="n">layout</span><span class="p">(</span><span class="n">constraints</span><span class="p">.</span><span class="n">maxWidth</span><span class="p">,</span> <span class="n">constraints</span><span class="p">.</span><span class="n">maxHeight</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 将每个提示相对于其锚点放置</span>
</span><span class='line'>            <span class="n">placeables</span><span class="p">.</span><span class="n">forEachIndexed</span> <span class="p">{</span> <span class="n">index</span><span class="p">,</span> <span class="n">placeable</span> <span class="p">-&gt;</span>
</span><span class='line'>                <span class="k">val</span> <span class="py">anchor</span> <span class="p">=</span> <span class="n">anchors</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// 将此提示居中对齐</span>
</span><span class='line'>                <span class="k">val</span> <span class="py">x</span> <span class="p">=</span> <span class="p">(</span><span class="n">anchor</span><span class="p">.</span><span class="n">offset</span><span class="p">.</span><span class="n">x</span><span class="p">.</span><span class="n">toInt</span><span class="p">()</span> <span class="p">-</span> <span class="p">(</span><span class="n">placeable</span><span class="p">.</span><span class="n">width</span> <span class="p">-</span> <span class="n">anchor</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">)</span> <span class="p">/</span> <span class="m">2</span><span class="p">)</span>
</span><span class='line'>                    <span class="c1">// 修复超出屏幕的坐标</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">coerceAtLeast</span><span class="p">(</span><span class="m">0</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">coerceAtMost</span><span class="p">(</span><span class="n">constraints</span><span class="p">.</span><span class="n">maxWidth</span> <span class="p">-</span> <span class="n">placeable</span><span class="p">.</span><span class="n">width</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// 把这个提示放在它的锚点下面</span>
</span><span class='line'>                <span class="k">var</span> <span class="py">y</span> <span class="p">=</span> <span class="p">(</span><span class="n">anchor</span><span class="p">.</span><span class="n">offset</span><span class="p">.</span><span class="n">y</span><span class="p">.</span><span class="n">toInt</span><span class="p">()</span> <span class="p">+</span> <span class="n">anchor</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">)</span>
</span><span class='line'>                    <span class="c1">// 如果超出屏幕，则修复 y 坐标</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">coerceAtMost</span><span class="p">(</span><span class="n">constraints</span><span class="p">.</span><span class="n">maxHeight</span> <span class="p">-</span> <span class="n">placeable</span><span class="p">.</span><span class="n">height</span><span class="p">)</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">y</span> <span class="p">&lt;</span> <span class="n">anchor</span><span class="p">.</span><span class="n">offset</span><span class="p">.</span><span class="n">y</span> <span class="p">+</span> <span class="n">anchor</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="c1">// 提示与锚点重叠，请将此提示放在其锚点上方</span>
</span><span class='line'>                    <span class="n">y</span> <span class="p">=</span> <span class="n">anchor</span><span class="p">.</span><span class="n">offset</span><span class="p">.</span><span class="n">y</span><span class="p">.</span><span class="n">toInt</span><span class="p">()</span> <span class="p">-</span> <span class="n">placeable</span><span class="p">.</span><span class="n">height</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">placeable</span><span class="p">.</span><span class="n">placeRelative</span><span class="p">(</span><span class="n">x</span> <span class="p">=</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="p">=</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*syuJkuAd-_BgiYfFP8bKgQ.png" alt="Hint3" /></p>

<p>因为我们允许传递任何可组合项作为提示，所以调用者可以完全控制提示的外观，例如，我们可以只使用 Text ，或者使用包含许多子项的复杂 Row 。</p>

<h2>5. 如何控制提示？</h2>

<p>我们静态地添加了提示以将其显示在屏幕上。但真正产品应用程序并非如此。让我们引入 HintController 来控制何时显示提示。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Stable</span>
</span><span class='line'><span class="k">class</span> <span class="nc">HintController</span> <span class="k">internal</span> <span class="n">constructor</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">internal</span> <span class="k">var</span> <span class="py">hint</span> <span class="k">by</span> <span class="n">mutableStateOf</span><span class="p">&lt;</span><span class="n">HintAnchorState</span><span class="p">?&gt;(</span><span class="k">null</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">show</span><span class="p">(</span><span class="n">hint</span><span class="p">:</span> <span class="n">HintAnchorState</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">hint</span> <span class="p">=</span> <span class="n">hint</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">rememberHintController</span><span class="p">():</span> <span class="n">HintController</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">controller</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">HintController</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">controller</span><span class="p">.</span><span class="n">hint</span><span class="o">?.</span><span class="n">let</span> <span class="p">{</span> <span class="n">hint</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="n">HintOverlay</span><span class="p">(</span><span class="n">anchor</span> <span class="p">=</span> <span class="n">hint</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">controller</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>修改应用程序内容，以便在我们点击锚点时显示提示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">hintController</span> <span class="p">=</span> <span class="n">rememberHintController</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">IconButton</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>        <span class="p">.</span><span class="n">hintAnchor</span><span class="p">(</span><span class="n">topAppBarActionHintAnchor</span><span class="p">,</span> <span class="n">CircleShape</span><span class="p">),</span>
</span><span class='line'>    <span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">hintController</span><span class="p">.</span><span class="n">show</span><span class="p">(</span><span class="n">topAppBarActionHintAnchor</span><span class="p">)</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">BottomNavigationItem</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>        <span class="p">.</span><span class="n">hintAnchor</span><span class="p">(</span>
</span><span class='line'>            <span class="n">bottomNavigationHintAnchor</span><span class="p">,</span>
</span><span class='line'>            <span class="n">shape</span> <span class="p">=</span> <span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">50f</span><span class="p">),</span>
</span><span class='line'>        <span class="p">),</span>
</span><span class='line'>    <span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">hintController</span><span class="p">.</span><span class="n">show</span><span class="p">(</span><span class="n">bottomNavigationHintAnchor</span><span class="p">)</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">Button</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>        <span class="p">.</span><span class="n">hintAnchor</span><span class="p">(</span><span class="n">actionHintAnchor</span><span class="p">,</span> <span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">16.</span><span class="n">dp</span><span class="p">))</span>
</span><span class='line'>        <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">4.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>    <span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">hintController</span><span class="p">.</span><span class="n">show</span><span class="p">(</span><span class="n">actionHintAnchor</span><span class="p">)</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>注意：我们不再需要显示的 HintOverlay ，它现在变得内置了。</p></blockquote>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*jIOTXOSnHVeL_jjyEx1gdg.png" alt="Control" /></p>

<p>现在我们可以逐一显示提示，但还有两个部分缺失：如何关闭提示，以及如何覆盖覆盖颜色。</p>

<p>对提示控制器进行更改以允许传递覆盖颜色：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">rememberHintController</span><span class="p">(</span><span class="n">overlay</span><span class="p">:</span> <span class="n">Brush</span><span class="p">):</span> <span class="n">HintController</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">rememberHintController</span><span class="p">(</span><span class="n">overlay</span> <span class="p">=</span> <span class="n">LocalHintOverlayBrush</span> <span class="n">provides</span> <span class="n">overlay</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">rememberHintController</span><span class="p">(</span><span class="n">overlay</span><span class="p">:</span> <span class="n">Color</span> <span class="p">=</span> <span class="n">HintOverlayColorDefault</span><span class="p">):</span> <span class="n">HintController</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">rememberHintController</span><span class="p">(</span><span class="n">overlay</span> <span class="p">=</span> <span class="n">LocalHintOverlayColor</span> <span class="n">provides</span> <span class="n">overlay</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">rememberHintController</span><span class="p">(</span><span class="n">overlay</span><span class="p">:</span> <span class="n">ProvidedValue</span><span class="p">&lt;*&gt;):</span> <span class="n">HintController</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">controller</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">HintController</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">controller</span><span class="p">.</span><span class="n">hint</span><span class="o">?.</span><span class="n">let</span> <span class="p">{</span> <span class="n">hint</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="n">CompositionLocalProvider</span><span class="p">(</span><span class="n">overlay</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">HintOverlay</span><span class="p">(</span><span class="n">anchor</span> <span class="p">=</span> <span class="n">hint</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">controller</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>为了消除我们的提示，让我们引入以下变化：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Stable</span>
</span><span class='line'><span class="k">class</span> <span class="nc">HintController</span> <span class="k">internal</span> <span class="n">constructor</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">internal</span> <span class="k">var</span> <span class="py">hint</span> <span class="k">by</span> <span class="n">mutableStateOf</span><span class="p">&lt;</span><span class="n">HintAnchorState</span><span class="p">?&gt;(</span><span class="k">null</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">show</span><span class="p">(</span><span class="n">hint</span><span class="p">:</span> <span class="n">HintAnchorState</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">hint</span> <span class="p">=</span> <span class="n">hint</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">dismiss</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">hint</span> <span class="p">=</span> <span class="k">null</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们使用 Popup 作为覆盖层的容器，如果用户点击 Android 上的返回按钮(BACK)，Popup 就会被关闭。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">internal</span> <span class="k">fun</span> <span class="nf">HintOverlay</span><span class="p">(</span>
</span><span class='line'>    <span class="n">anchor</span><span class="p">:</span> <span class="n">HintAnchorState</span><span class="p">,</span>
</span><span class='line'>    <span class="n">onDismiss</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Popup</span><span class="p">(</span>
</span><span class='line'>        <span class="n">onDismissRequest</span> <span class="p">=</span> <span class="n">onDismiss</span><span class="p">,</span>
</span><span class='line'>        <span class="c1">// 设置可聚焦以处理按压back事件</span>
</span><span class='line'>        <span class="n">properties</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">PopupProperties</span><span class="p">(</span><span class="n">focusable</span> <span class="p">=</span> <span class="k">true</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//...在这里画出我们的提示</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">internal</span> <span class="k">fun</span> <span class="nf">HintsContainer</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="n">anchor</span><span class="p">:</span> <span class="n">HintAnchorState</span><span class="p">,</span>
</span><span class='line'>    <span class="n">onDismiss</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Layout</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">overlayBackground</span><span class="p">(</span><span class="n">anchor</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">clickable</span><span class="p">(</span>
</span><span class='line'>                <span class="n">interactionSource</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>                <span class="c1">// 禁用ripple</span>
</span><span class='line'>                <span class="n">indication</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>                <span class="n">onClick</span> <span class="p">=</span> <span class="n">onDismiss</span><span class="p">,</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>结果演示视频 <a href="https://youtu.be/eo49PKlhO5Y">https://youtu.be/eo49PKlhO5Y</a></p>

<p>现在，HintController 允许我们按时间显示一个提示，但如果我们想按顺序显示多个提示，则没有实际的队列。</p>

<p>可以扩展 HintController 并添加暂停修饰符以知道提示的显示时间（例如，在显示提示后立即执行某项操作）。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Stable</span>
</span><span class='line'><span class="k">class</span> <span class="nc">HintController</span> <span class="k">internal</span> <span class="n">constructor</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">var</span> <span class="py">queue</span> <span class="p">=</span> <span class="n">mutableStateListOf</span><span class="p">&lt;</span><span class="n">HintAnchorState</span><span class="p">&gt;()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">internal</span> <span class="k">val</span> <span class="py">hint</span><span class="p">:</span> <span class="n">HintAnchorState</span><span class="p">?</span> <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="n">queue</span><span class="p">.</span><span class="n">firstOrNull</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">pendingRequests</span> <span class="p">=</span> <span class="n">mutableMapOf</span><span class="p">&lt;</span><span class="n">HintAnchorState</span><span class="p">,</span> <span class="n">Continuation</span><span class="p">&lt;</span><span class="n">Unit</span><span class="p">&gt;&gt;()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">show</span><span class="p">(</span><span class="n">hint</span><span class="p">:</span> <span class="n">HintAnchorState</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">suspendCoroutine</span> <span class="p">{</span> <span class="n">continuation</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="n">pendingRequests</span><span class="p">[</span><span class="n">hint</span><span class="p">]</span> <span class="p">=</span> <span class="n">continuation</span>
</span><span class='line'>            <span class="n">queue</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">hint</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">show</span><span class="p">(</span><span class="k">vararg</span> <span class="n">hint</span><span class="p">:</span> <span class="n">HintAnchorState</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">show</span><span class="p">(</span><span class="n">hint</span><span class="p">.</span><span class="n">toList</span><span class="p">())</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">show</span><span class="p">(</span><span class="n">hints</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">HintAnchorState</span><span class="p">&gt;)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">suspendCoroutine</span> <span class="p">{</span> <span class="n">continuation</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="n">pendingRequests</span><span class="p">[</span><span class="n">hints</span><span class="p">.</span><span class="n">last</span><span class="p">()]</span> <span class="p">=</span> <span class="n">continuation</span>
</span><span class='line'>            <span class="n">queue</span><span class="p">.</span><span class="n">addAll</span><span class="p">(</span><span class="n">hints</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">internal</span> <span class="k">fun</span> <span class="nf">onDismissed</span><span class="p">(</span><span class="n">hint</span><span class="p">:</span> <span class="n">HintAnchorState</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">pendingRequests</span><span class="p">[</span><span class="n">hint</span><span class="p">]</span><span class="o">?.</span><span class="n">let</span> <span class="p">{</span> <span class="n">continuation</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="n">continuation</span><span class="p">.</span><span class="n">resume</span><span class="p">(</span><span class="n">Unit</span><span class="p">)</span>
</span><span class='line'>            <span class="n">pendingRequests</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="n">hint</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">queue</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="n">hint</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">dismiss</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">pendingRequests</span><span class="p">.</span><span class="n">values</span>
</span><span class='line'>            <span class="p">.</span><span class="n">forEach</span> <span class="p">{</span> <span class="n">continuation</span> <span class="p">-&gt;</span>
</span><span class='line'>                <span class="n">continuation</span><span class="p">.</span><span class="n">resumeWithException</span><span class="p">(</span><span class="n">CancellationException</span><span class="p">(</span><span class="s">&quot;Hint was dismissed&quot;</span><span class="p">))</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="n">pendingRequests</span><span class="p">.</span><span class="n">clear</span><span class="p">()</span>
</span><span class='line'>        <span class="n">queue</span><span class="p">.</span><span class="n">clear</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在为了在应用程序内部显示提示，我们需要一个 CoroutineScope ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">coroutineScope</span> <span class="p">=</span> <span class="n">rememberCoroutineScope</span><span class="p">()</span>
</span><span class='line'><span class="k">val</span> <span class="py">hintController</span> <span class="p">=</span> <span class="n">rememberHintController</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 现在我们可以从提示本身中忽略所有待处理的提示</span>
</span><span class='line'><span class="k">val</span> <span class="py">topAppBarHint</span> <span class="p">=</span> <span class="n">rememberHintContainer</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">OutlinedButton</span><span class="p">(</span>
</span><span class='line'>        <span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">hintController</span><span class="p">.</span><span class="n">dismiss</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span> <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Hint for TopAppBar&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 显示 1 条提示</span>
</span><span class='line'><span class="n">BottomNavigationItem</span><span class="p">(</span>
</span><span class='line'>    <span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">coroutineScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">hintController</span><span class="p">.</span><span class="n">show</span><span class="p">(</span><span class="n">bottomNavigationHintAnchor</span><span class="p">)</span>
</span><span class='line'>            <span class="n">scaffoldState</span><span class="p">.</span><span class="n">snackbarHostState</span><span class="p">.</span><span class="n">showSnackbar</span><span class="p">(</span><span class="s">&quot;One hint was shown&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 连续显示多个提示</span>
</span><span class='line'><span class="n">Button</span><span class="p">(</span>
</span><span class='line'>    <span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">coroutineScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">hintController</span><span class="p">.</span><span class="n">show</span><span class="p">(</span>
</span><span class='line'>                <span class="n">topAppBarActionHintAnchor</span><span class="p">,</span>
</span><span class='line'>                <span class="n">actionHintAnchor</span><span class="p">,</span>
</span><span class='line'>                <span class="n">bottomNavigationHintAnchor</span><span class="p">,</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>            <span class="n">scaffoldState</span><span class="p">.</span><span class="n">snackbarHostState</span><span class="p">.</span><span class="n">showSnackbar</span><span class="p">(</span><span class="s">&quot;Many hints were shown&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><strong>注意：</strong> 如果我们通过调用 hintController.dismiss() 来关闭提示，则 hintController.show 之后的代码将不会被调用。</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">coroutineScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">hintController</span><span class="p">.</span><span class="n">show</span><span class="p">(</span><span class="n">topAppBarActionHintAnchor</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">// 如果通过调用 hintController.dismiss 关闭了之前的提示，则不会显示 Snackbar</span>
</span><span class='line'>    <span class="n">scaffoldState</span><span class="p">.</span><span class="n">snackbarHostState</span><span class="p">.</span><span class="n">showSnackbar</span><span class="p">(</span><span class="s">&quot;One hint was shown&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最终结果如这个视频演示 <a href="https://youtu.be/tyZUNJLEVxQ">https://youtu.be/tyZUNJLEVxQ</a>：我们可以显示单个提示，也可以显示提示列表。</p>

<p>由于该项目使用 Compose Multiplatform，我们可以针对不同的目标运行该应用程序：</p>

<ul>
<li>Android结果演示 <a href="https://youtu.be/BVBCipnbIUc">https://youtu.be/BVBCipnbIUc</a></li>
<li>iOS结果演示 <a href="https://youtu.be/Z1uasddgqwo">https://youtu.be/Z1uasddgqwo</a></li>
</ul>


<h2>总结</h2>

<p>Compose 和 Kotlin Multiplatform 是一个强大的组合，它允许我们使用 Kotlin 来实现 UI 和业务逻辑。CMP 库仅与Jetpack Compose Android 项目完全兼容。</p>

<p>可以在 GitHub 上查看我的repo：<a href="https://github.com/vitoksmile/ComposeHints">https://github.com/vitoksmile/ComposeHints</a>。</p>

<p>感谢你的阅读，期待在 GitHub 上获得你的Star :)。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[实战：在Compose中绘制睡眠时间线]]></title>
    <link href="https://alexhilton.github.io/blog/2025/03/26/draw-sleep-timeline-graph-in-compose/"/>
    <updated>2025-03-26T21:41:40+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/03/26/draw-sleep-timeline-graph-in-compose</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自<a href="https://proandroiddev.com/sleep-timeline-graph-in-compose-15c99f9a4af0">Draw sleep timeline graph in Compose</a>，原文由<a href="https://medium.com/@vitoksmile">Viktor Mykhailiv</a>发布于2025年1月31日。</p></blockquote>

<p><strong>译者按：</strong> 我们在前面的<a href="https://juejin.cn/column/7367555191338467337">降Compose十八掌</a>系列中讲解过在Compose自定义绘制的方法，可以先温习一下<a href="https://juejin.cn/post/7381826917086920742">上一篇文章</a>。这篇文章是提升自定义绘制技巧的一个非常好的实战例子。</p>

<p><a href="https://alexhilton.github.io/blog/2025/03/26/draw-sleep-timeline-graph-in-compose/"><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*OUAsgvNoNx9VpSk9Eyqgzg.jpeg" title="auto auto" ></a></p>

<!-- more -->


<p>当内置组件不能完全满足我们的应用需求时，自定义绘图非常有用。本文提供了创建自定义睡眠时间线图表的指南，类似于你在<a href="https://play.google.com/store/apps/details?id=com.fitbit.FitbitMobile">Fitbit 应用</a>中找到的图表。</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*cA9uPgAG29Gu2AhajArq9w.jpeg" alt="Screenshots from Fitbit Android app" /></p>

<h2>在 Compose 中如何绘图？</h2>

<p>要开始在 Compose 中绘图，我们可以使用绘图Modifier或 Canvas可组合函数，这为我们提供了 DrawScope — 一种声明式、无状态的API，用于绘制形状和路径，而无需消费者维护底层状态。DrawScope实现还提供了尺寸信息，并且变幻是相对于本地平移完成的。</p>

<blockquote><p><strong>注意：</strong> Jetpack Compose（仅限 Android）和 Compose Multiplatform（桌面、Android、iOS、Web）具有类似的绘图 API。下面的屏幕截图是在桌面（macOS）上制作的，但所有平台上的结果都是相同的（查看最后一张屏幕截图）。</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">Canvas</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">rotate</span><span class="p">(</span><span class="n">degrees</span> <span class="p">=</span> <span class="m">45F</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">drawRect</span><span class="p">(</span>
</span><span class='line'>            <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Gray</span><span class="p">,</span>
</span><span class='line'>            <span class="n">topLeft</span> <span class="p">=</span> <span class="n">Offset</span><span class="p">(</span><span class="n">x</span> <span class="p">=</span> <span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="p">/</span> <span class="m">3F</span><span class="p">,</span> <span class="n">y</span> <span class="p">=</span> <span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="p">/</span> <span class="m">3F</span><span class="p">),</span>
</span><span class='line'>            <span class="n">size</span> <span class="p">=</span> <span class="n">size</span> <span class="p">/</span> <span class="m">3F</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*_qkChFEn25kC_cfgiRXgKg.png" alt="Compose中的自定义绘制" /></p>

<h2>啥是睡眠时间表？</h2>

<p>我们可以在 Health Connect 中读取或写入睡眠数据。睡眠数据显示为会话，可分为以下睡眠阶段：</p>

<ul>
<li>清醒：用户在睡眠周期内清醒。</li>
<li>浅睡眠：用户处于浅睡眠周期。</li>
<li>深睡眠：用户处于深睡眠周期。</li>
<li>REM：用户处于 REM 睡眠周期。</li>
</ul>


<p>这些值表示用户在一定时间范围内经历的睡眠类型。SleepSessionRecord 数据类型包含两部分：</p>

<ol>
<li>整个睡眠过程，涵盖整个睡眠时间。</li>
<li>睡眠过程中的各个阶段，例如浅睡眠或深睡眠。</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">record</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">SleepSessionRecord</span><span class="p">(</span>
</span><span class='line'>        <span class="n">startTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-28T21:10:10Z&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="n">endTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-29T07:32:13Z&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="n">startZoneOffset</span> <span class="p">=</span> <span class="n">UtcOffset</span><span class="p">(</span><span class="n">hours</span> <span class="p">=</span> <span class="m">2</span><span class="p">),</span>
</span><span class='line'>        <span class="n">endZoneOffset</span> <span class="p">=</span> <span class="n">UtcOffset</span><span class="p">(</span><span class="n">hours</span> <span class="p">=</span> <span class="m">2</span><span class="p">),</span>
</span><span class='line'>        <span class="n">stages</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span>
</span><span class='line'>            <span class="n">SleepSessionRecord</span><span class="p">.</span><span class="n">Stage</span><span class="p">(</span>
</span><span class='line'>                <span class="n">startTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-28T21:10:10Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="n">endTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-28T23:15:13Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="k">type</span> <span class="p">=</span> <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">Light</span><span class="p">,</span>
</span><span class='line'>            <span class="p">),</span>
</span><span class='line'>            <span class="n">SleepSessionRecord</span><span class="p">.</span><span class="n">Stage</span><span class="p">(</span>
</span><span class='line'>                <span class="n">startTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-28T23:15:13Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="n">endTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-29T01:56:32Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="k">type</span> <span class="p">=</span> <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">Deep</span><span class="p">,</span>
</span><span class='line'>            <span class="p">),</span>
</span><span class='line'>            <span class="n">SleepSessionRecord</span><span class="p">.</span><span class="n">Stage</span><span class="p">(</span>
</span><span class='line'>                <span class="n">startTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-29T01:56:13Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="n">endTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-29T03:16:22Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="k">type</span> <span class="p">=</span> <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">Light</span><span class="p">,</span>
</span><span class='line'>            <span class="p">),</span>
</span><span class='line'>            <span class="n">SleepSessionRecord</span><span class="p">.</span><span class="n">Stage</span><span class="p">(</span>
</span><span class='line'>                <span class="n">startTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-29T03:16:22Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="n">endTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-29T04:32:13Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="k">type</span> <span class="p">=</span> <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">REM</span><span class="p">,</span>
</span><span class='line'>            <span class="p">),</span>
</span><span class='line'>            <span class="n">SleepSessionRecord</span><span class="p">.</span><span class="n">Stage</span><span class="p">(</span>
</span><span class='line'>                <span class="n">startTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-29T04:32:13Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="n">endTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-29T05:12:56Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="k">type</span> <span class="p">=</span> <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">Deep</span><span class="p">,</span>
</span><span class='line'>            <span class="p">),</span>
</span><span class='line'>            <span class="n">SleepSessionRecord</span><span class="p">.</span><span class="n">Stage</span><span class="p">(</span>
</span><span class='line'>                <span class="n">startTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-29T05:12:56Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="n">endTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-29T07:32:13Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="k">type</span> <span class="p">=</span> <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">Light</span><span class="p">,</span>
</span><span class='line'>            <span class="p">),</span>
</span><span class='line'>            <span class="n">SleepSessionRecord</span><span class="p">.</span><span class="n">Stage</span><span class="p">(</span>
</span><span class='line'>                <span class="n">startTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-28T22:11:56Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="n">endTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-28T22:17:13Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="k">type</span> <span class="p">=</span> <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">Awake</span><span class="p">,</span>
</span><span class='line'>            <span class="p">),</span>
</span><span class='line'>            <span class="n">SleepSessionRecord</span><span class="p">.</span><span class="n">Stage</span><span class="p">(</span>
</span><span class='line'>                <span class="n">startTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-28T22:39:56Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="n">endTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-28T22:51:13Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="k">type</span> <span class="p">=</span> <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">Awake</span><span class="p">,</span>
</span><span class='line'>            <span class="p">),</span>
</span><span class='line'>            <span class="n">SleepSessionRecord</span><span class="p">.</span><span class="n">Stage</span><span class="p">(</span>
</span><span class='line'>                <span class="n">startTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-29T04:47:56Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="n">endTime</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="s">&quot;2025-01-29T04:54:13Z&quot;</span><span class="p">),</span>
</span><span class='line'>                <span class="k">type</span> <span class="p">=</span> <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">Awake</span><span class="p">,</span>
</span><span class='line'>            <span class="p">),</span>
</span><span class='line'>        <span class="p">),</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>需要一点数学计算</h2>

<p>在睡眠期间，我们可以在不同时刻多次处于同一阶段。我们需要计算相对于睡眠的起点和终点。</p>

<p>要在 Compose 中绘制矩形，我们需要 topOffset 和 size。</p>

<p><img src="" alt="Math" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">calculate</span><span class="p">(</span>
</span><span class='line'>    <span class="n">canvasSize</span><span class="p">:</span> <span class="n">Size</span><span class="p">,</span>
</span><span class='line'>    <span class="n">recordStartTime</span><span class="p">:</span> <span class="n">Instant</span><span class="p">,</span>
</span><span class='line'>    <span class="n">recordEndTime</span><span class="p">:</span> <span class="n">Instant</span><span class="p">,</span>
</span><span class='line'>    <span class="n">stages</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">SleepSessionRecord</span><span class="p">.</span><span class="n">Stage</span><span class="p">&gt;,</span>
</span><span class='line'><span class="p">):</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">SleepStageDrawPoint</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">totalDuration</span> <span class="p">=</span> <span class="p">(</span><span class="n">recordEndTime</span> <span class="p">-</span> <span class="n">recordStartTime</span><span class="p">).</span><span class="n">inWholeSeconds</span><span class="p">.</span><span class="n">toFloat</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">coerceAtLeast</span><span class="p">(</span><span class="m">1f</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">stages</span><span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">stage</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">stageOffset</span> <span class="p">=</span>
</span><span class='line'>            <span class="p">(</span><span class="n">stage</span><span class="p">.</span><span class="n">startTime</span> <span class="p">-</span> <span class="n">recordStartTime</span><span class="p">).</span><span class="n">inWholeSeconds</span> <span class="p">/</span> <span class="n">totalDuration</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">stageDuration</span> <span class="p">=</span>
</span><span class='line'>            <span class="p">(</span><span class="n">stage</span><span class="p">.</span><span class="n">endTime</span> <span class="p">-</span> <span class="n">stage</span><span class="p">.</span><span class="n">startTime</span><span class="p">).</span><span class="n">inWholeSeconds</span><span class="p">.</span><span class="n">toFloat</span><span class="p">()</span> <span class="p">/</span> <span class="n">totalDuration</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">SleepStageDrawPoint</span><span class="p">(</span>
</span><span class='line'>            <span class="n">topLeft</span> <span class="p">=</span> <span class="n">Offset</span><span class="p">(</span><span class="n">x</span> <span class="p">=</span> <span class="n">canvasSize</span><span class="p">.</span><span class="n">width</span> <span class="p">*</span> <span class="n">stageOffset</span><span class="p">,</span> <span class="n">y</span> <span class="p">=</span> <span class="m">0f</span><span class="p">),</span>
</span><span class='line'>            <span class="n">size</span> <span class="p">=</span> <span class="n">canvasSize</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="n">width</span> <span class="p">=</span> <span class="n">canvasSize</span><span class="p">.</span><span class="n">width</span> <span class="p">*</span> <span class="n">stageDuration</span><span class="p">),</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>绘制</h2>

<p>让我们构建自定义 Canvas 来绘制睡眠过程的一个阶段，例如深度睡眠。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">SleepSessionCanvas</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="n">record</span><span class="p">:</span> <span class="n">SleepSessionRecord</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Spacer</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">.</span><span class="n">drawWithCache</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">points</span> <span class="p">=</span> <span class="n">calculate</span><span class="p">(</span>
</span><span class='line'>                <span class="n">canvasSize</span> <span class="p">=</span> <span class="n">size</span><span class="p">,</span>
</span><span class='line'>                <span class="n">recordStartTime</span> <span class="p">=</span> <span class="n">record</span><span class="p">.</span><span class="n">startTime</span><span class="p">,</span>
</span><span class='line'>                <span class="n">recordEndTime</span> <span class="p">=</span> <span class="n">record</span><span class="p">.</span><span class="n">endTime</span><span class="p">,</span>
</span><span class='line'>                <span class="n">stages</span> <span class="p">=</span> <span class="n">record</span><span class="p">.</span><span class="n">stages</span><span class="p">.</span><span class="n">filter</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="k">type</span> <span class="p">==</span> <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">Deep</span> <span class="p">},</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">onDrawWithContent</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// 画背景</span>
</span><span class='line'>                <span class="n">drawRoundRect</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">LightGray</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">topLeft</span> <span class="p">=</span> <span class="n">Offset</span><span class="p">(</span><span class="n">x</span> <span class="p">=</span> <span class="m">0f</span><span class="p">,</span> <span class="n">y</span> <span class="p">=</span> <span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="p">/</span> <span class="m">4f</span><span class="p">),</span>
</span><span class='line'>                    <span class="n">size</span> <span class="p">=</span> <span class="n">size</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="n">height</span> <span class="p">=</span> <span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="p">/</span> <span class="m">2f</span><span class="p">),</span>
</span><span class='line'>                    <span class="n">cornerRadius</span> <span class="p">=</span> <span class="n">CornerRadius</span><span class="p">(</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="p">/</span> <span class="m">2f</span><span class="p">),</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// 绘制阶段点</span>
</span><span class='line'>                <span class="n">points</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span> <span class="n">point</span> <span class="p">-&gt;</span>
</span><span class='line'>                    <span class="n">drawRect</span><span class="p">(</span>
</span><span class='line'>                        <span class="n">topLeft</span> <span class="p">=</span> <span class="n">point</span><span class="p">.</span><span class="n">topLeft</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">size</span> <span class="p">=</span> <span class="n">point</span><span class="p">.</span><span class="n">size</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">xFF673AB7</span><span class="p">),</span>
</span><span class='line'>                    <span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果我们使用之前定义的睡眠会话运行项目，我们将看到 3 个矩形：1 个灰色矩形表示背景，2 个紫色矩形表示深度睡眠阶段。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">SleepSessionCanvas</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>        <span class="p">.</span><span class="n">fillMaxWidth</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">height</span><span class="p">(</span><span class="m">320.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">16.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>    <span class="n">record</span> <span class="p">=</span> <span class="n">record</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*ANITvvaUEuuwwcACzY21qA.png" alt="深度睡眠阶段" /></p>

<p>为了绘制睡眠过程的所有阶段（清醒、快速眼动、浅睡眠和深睡眠），我们需要进行一些调整，将每个阶段类型垂直绘制为列组件，办法是逐行绘制并对下一行应用一些偏移量（offset）。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">SleepSessionCanvas</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="n">record</span><span class="p">:</span> <span class="n">SleepSessionRecord</span><span class="p">,</span>
</span><span class='line'>    <span class="n">stageHeight</span><span class="p">:</span> <span class="n">Dp</span> <span class="p">=</span> <span class="m">48.</span><span class="n">dp</span><span class="p">,</span>
</span><span class='line'>    <span class="n">stagesSpacing</span><span class="p">:</span> <span class="n">Dp</span> <span class="p">=</span> <span class="m">16.</span><span class="n">dp</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">colors</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">mapOf</span><span class="p">(</span>
</span><span class='line'>            <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">Awake</span> <span class="n">to</span> <span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">xFFFF9800</span><span class="p">),</span>
</span><span class='line'>            <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">Light</span> <span class="n">to</span> <span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">xFF2196F3</span><span class="p">),</span>
</span><span class='line'>            <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">Deep</span> <span class="n">to</span> <span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">xFF673AB7</span><span class="p">),</span>
</span><span class='line'>            <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">REM</span> <span class="n">to</span> <span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">xFF795548</span><span class="p">),</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">stageHeightPx</span> <span class="p">=</span> <span class="n">with</span><span class="p">(</span><span class="n">LocalDensity</span><span class="p">.</span><span class="n">current</span><span class="p">)</span> <span class="p">{</span> <span class="n">stageHeight</span><span class="p">.</span><span class="n">toPx</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">stagesSpacingPx</span> <span class="p">=</span> <span class="n">with</span><span class="p">(</span><span class="n">LocalDensity</span><span class="p">.</span><span class="n">current</span><span class="p">)</span> <span class="p">{</span> <span class="n">stagesSpacing</span><span class="p">.</span><span class="n">toPx</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Spacer</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">requiredHeight</span><span class="p">(</span><span class="n">stageHeight</span> <span class="p">*</span> <span class="n">colors</span><span class="p">.</span><span class="n">size</span> <span class="p">+</span> <span class="n">stagesSpacing</span> <span class="p">*</span> <span class="p">(</span><span class="n">colors</span><span class="p">.</span><span class="n">size</span> <span class="p">-</span> <span class="m">1</span><span class="p">))</span>
</span><span class='line'>            <span class="p">.</span><span class="n">drawWithCache</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">val</span> <span class="py">stages</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">Awake</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">REM</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">Light</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">SleepSessionStageType</span><span class="p">.</span><span class="n">Deep</span><span class="p">,</span>
</span><span class='line'>                <span class="p">).</span><span class="n">map</span> <span class="p">{</span> <span class="k">type</span> <span class="p">-&gt;</span>
</span><span class='line'>                    <span class="k">type</span> <span class="n">to</span> <span class="n">calculate</span><span class="p">(</span>
</span><span class='line'>                        <span class="n">canvasSize</span> <span class="p">=</span> <span class="n">size</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="n">height</span> <span class="p">=</span> <span class="n">stageHeightPx</span><span class="p">),</span>
</span><span class='line'>                        <span class="n">recordStartTime</span> <span class="p">=</span> <span class="n">record</span><span class="p">.</span><span class="n">startTime</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">recordEndTime</span> <span class="p">=</span> <span class="n">record</span><span class="p">.</span><span class="n">endTime</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">stages</span> <span class="p">=</span> <span class="n">record</span><span class="p">.</span><span class="n">stages</span><span class="p">.</span><span class="n">filter</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="k">type</span> <span class="p">==</span> <span class="k">type</span> <span class="p">},</span>
</span><span class='line'>                    <span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">onDrawWithContent</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">var</span> <span class="py">offset</span> <span class="p">=</span> <span class="m">0f</span>
</span><span class='line'>                    <span class="n">stages</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span> <span class="p">(</span><span class="k">type</span><span class="p">,</span> <span class="n">points</span><span class="p">)</span> <span class="p">-&gt;</span>
</span><span class='line'>                        <span class="n">translate</span><span class="p">(</span><span class="n">top</span> <span class="p">=</span> <span class="n">offset</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                            <span class="c1">// 画背景</span>
</span><span class='line'>                            <span class="n">drawRoundRect</span><span class="p">(</span>
</span><span class='line'>                                <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">LightGray</span><span class="p">,</span>
</span><span class='line'>                                <span class="n">topLeft</span> <span class="p">=</span> <span class="n">Offset</span><span class="p">(</span><span class="n">x</span> <span class="p">=</span> <span class="m">0f</span><span class="p">,</span> <span class="n">y</span> <span class="p">=</span> <span class="n">stageHeightPx</span> <span class="p">/</span> <span class="m">4</span><span class="p">),</span>
</span><span class='line'>                                <span class="n">size</span> <span class="p">=</span> <span class="n">size</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="n">height</span> <span class="p">=</span> <span class="n">stageHeightPx</span> <span class="p">/</span> <span class="m">2</span><span class="p">),</span>
</span><span class='line'>                                <span class="n">cornerRadius</span> <span class="p">=</span> <span class="n">CornerRadius</span><span class="p">(</span><span class="n">stageHeightPx</span> <span class="p">/</span> <span class="m">2</span><span class="p">),</span>
</span><span class='line'>                            <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                            <span class="c1">// 绘制阶段点</span>
</span><span class='line'>                            <span class="n">points</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span> <span class="n">point</span> <span class="p">-&gt;</span>
</span><span class='line'>                                <span class="n">drawRect</span><span class="p">(</span>
</span><span class='line'>                                    <span class="n">topLeft</span> <span class="p">=</span> <span class="n">point</span><span class="p">.</span><span class="n">topLeft</span><span class="p">,</span>
</span><span class='line'>                                    <span class="n">size</span> <span class="p">=</span> <span class="n">point</span><span class="p">.</span><span class="n">size</span><span class="p">,</span>
</span><span class='line'>                                    <span class="n">color</span> <span class="p">=</span> <span class="n">colors</span><span class="p">.</span><span class="n">getValue</span><span class="p">(</span><span class="k">type</span><span class="p">),</span>
</span><span class='line'>                                <span class="p">)</span>
</span><span class='line'>                            <span class="p">}</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                        <span class="n">offset</span> <span class="p">+=</span> <span class="n">stageHeightPx</span> <span class="p">+</span> <span class="n">stagesSpacingPx</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*iXIS4tbsvx5AhTtRqlWi7A.png" alt="最终的图形" /></p>

<h3>添加文本</h3>

<p>要在 Compose 中绘制文本，我们通常可以使用 Text 可组合项。但是，在我们的示例中，我们处于 DrawScope 中，我们可以使用 DrawScope.drawText()方法。</p>

<p>绘制文本与其他绘制命令略有不同。通常，我们为绘制命令提供绘制形状/图像的大小（宽度和高度）。对于文本，有几个参数可以控制渲染文本的大小，例如字体大小、字体、连字符和字母间距。我们需要使用 TextMeasurer 来获取文本的测量大小，具体取决于上述因素。</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*QB1QvINWUWMlpRoPSzrcUQ.png" alt="Desktop效果" /></p>

<p><img src="https://miro.medium.com/v2/resize:fit:2000/format:webp/1*U_LBREiTciw2F3ghYiHqCw.jpeg" alt="Android和iOS效果" /></p>

<p>请到我的Github repo中查找完整示例代码：<a href="https://github.com/vitoksmile/Sleep-timeline-graph">https://github.com/vitoksmile/Sleep-timeline-graph</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[高效地在Jetpack Compose中设计UI组件]]></title>
    <link href="https://alexhilton.github.io/blog/2025/03/16/effective-compose-components/"/>
    <updated>2025-03-16T20:37:18+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/03/16/effective-compose-components</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自<a href="https://proandroiddev.com/designing-effective-ui-components-in-jetpack-compose-cb8d18f7f888">Designing Effective UI Components in Jetpack Compose</a>，原文作者是Jaewoong Eum，原文发布于2025年2月7日。</p></blockquote>

<p><strong>译者按：</strong> 本文适合有一定Jetpack Compose经验的开发者阅读，假定读者熟悉Jetpack Compose的基本使用方法，以及熟悉常见 的Slot设计模式。否则理解上可能会有一些困难。</p>

<p><a href="https://alexhilton.github.io/blog/2025/03/16/effective-compose-components/"><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/0*PwVzAjyhIPGIgrT0" title="auto auto" ></a></p>

<!-- more -->


<p>自<a href="https://android-developers.googleblog.com/2021/07/jetpack-compose-announcement.html"> Google 宣布 Jetpack Compose 1.0 稳定版</a>以来，许多公司都已采用 Jetpack Compose 来利用其众多优势。随着 Compose 在 Android 生态系统中的广泛采用，库和 SDK 也开始集成对 Compose 的支持。</p>

<p>传统上，在基于 XML 的项目中，UI 组件以自定义视图的形式提供，并通过属性（attributes）提供可自定义的选项。虽然这种方法可以轻松地将组件集成到 XML 布局中，但它带来了一些挑战，例如在多个组件之间应用主题样式时不一致，以及由于底层 View 类公开的方法而导致的 API 滥用。</p>

<p>与传统的自定义视图相比，Jetpack Compose 提供了一种完全不同的组件设计策略。其声明式结构允许更直观、更灵活的 API 设计。这种转变不仅有利于库和 SDK 开发人员，也有利于构建共享 UI 组件的大型团队，使他们能够实施更好的做法、减少误用并增强整体开发人员体验。</p>

<p>在本文中，你将发现在 Jetpack Compose 中设计 UI 组件的有效策略，借鉴<a href="https://getstream.io/video/sdk/android/"> Stream Video SDK </a>的最佳实践。</p>

<h2>Modifier的最佳实践</h2>

<p><a href="https://developer.android.com/develop/ui/compose/modifiers">Modifier </a>是 Jetpack Compose 中一个功能强大的 API，可让你以链式和可组合的方式装饰和增强 UI 元素。但是，应谨慎使用它，因为它的属性可以传播到其他可组合函数，如果管理不当，可能会导致意想不到的效果。</p>

<p>Modifier函数的顺序尤其重要，因为每个函数都会修改前一个函数返回的Modifier或从可组合项外部传递的Modifier。此顺序直接影响最终输出。在本节中，我们将探讨三个关键原则和最佳实践，它们可以指导你在 Jetpack Compose 中设计有效且可预测的 UI 组件 API。</p>

<h3>1. 将Modifier应用到组件最顶层的布局</h3>

<p>Jetpack Compose 中的Modifier会通过布局层次结构向下传递，但理想情况下，它们应仅应用于可组合函数中最顶层的布局节点。在层次结构中的任意级别应用Modifier可能会导致意外行为，并增加用户误用的可能性，从而使组件更难以预测且更难以有效使用。</p>

<p>例如，假设你想要创建一个代表圆形按钮的组件，如下例所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">RoundedButton</span><span class="p">(</span>
</span><span class='line'>  <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>  <span class="n">onClick</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Button</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">.</span><span class="n">clip</span><span class="p">(</span><span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">32.</span><span class="n">dp</span><span class="p">)),</span>
</span><span class='line'>    <span class="n">onClick</span> <span class="p">=</span> <span class="n">onClick</span>
</span><span class='line'>  <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Text</span><span class="p">(</span>
</span><span class='line'>      <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">10.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>      <span class="n">text</span> <span class="p">=</span> <span class="s">&quot;Rounded&quot;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是，你不应将 Modifier 应用于 Text ，而应应用于 Button ，后者是布局层次结构中最顶层的可组合函数，如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">RoundedButton</span><span class="p">(</span>
</span><span class='line'>  <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>  <span class="n">onClick</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Button</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">clip</span><span class="p">(</span><span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">32.</span><span class="n">dp</span><span class="p">)),</span>
</span><span class='line'>    <span class="n">onClick</span> <span class="p">=</span> <span class="n">onClick</span>
</span><span class='line'>  <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Text</span><span class="p">(</span>
</span><span class='line'>      <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">10.</span><span class="n">dp</span><span class="p">),</span> <span class="c1">// 别这么干</span>
</span><span class='line'>      <span class="n">text</span> <span class="p">=</span> <span class="s">&quot;Rounded&quot;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>自定义可组合函数 RoundedButton 的主要用途是表示 Button ，而不是 Text 。因此，你应避免转移所创建主要组件的焦点或用途。</p>

<p>此外，如果布局层次结构变得复杂，并且你在可组合函数的中间级别应用Modifier，则用户可能很难预测提供的Modifier参数最终会影响哪个组件。这种不明确性可能会导致混淆和误用。</p>

<p>如果你想让用户灵活地修改按钮的内部内容，你可以使用插槽来实现，如下例所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">RoundedButton</span><span class="p">(</span>
</span><span class='line'>  <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>  <span class="n">onClick</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span>
</span><span class='line'>  <span class="n">content</span><span class="p">:</span> <span class="n">@Composable</span> <span class="n">RowScope</span><span class="p">.()</span> <span class="p">-&gt;</span> <span class="n">Unit</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Button</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">.</span><span class="n">clip</span><span class="p">(</span><span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">32.</span><span class="n">dp</span><span class="p">)),</span>
</span><span class='line'>    <span class="n">onClick</span> <span class="p">=</span> <span class="n">onClick</span>
</span><span class='line'>  <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">content</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2. 对Modifier使用单个参数</h3>

<p>你可能想知道是否可以接受多个 Modifier 参数以应用于布局层次结构中的特定组件，同时限制组件的结构，如下例所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">RoundedButton</span><span class="p">(</span>
</span><span class='line'>  <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>  <span class="n">textModifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>  <span class="n">onClick</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Button</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">.</span><span class="n">clip</span><span class="p">(</span><span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">32.</span><span class="n">dp</span><span class="p">)),</span>
</span><span class='line'>    <span class="n">onClick</span> <span class="p">=</span> <span class="n">onClick</span>
</span><span class='line'>  <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Text</span><span class="p">(</span>
</span><span class='line'>      <span class="n">modifier</span> <span class="p">=</span> <span class="n">textModifier</span><span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">10.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>      <span class="n">text</span> <span class="p">=</span> <span class="s">&quot;Rounded&quot;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是，Modifier 本质上被设计为一个单一的、可链接的参数，使用户能够定义 Composable 函数的外部行为和外观。在 Composable 中引入多个 Modifier 参数会增加不必要的复杂性，增加误用的风险，并且偏离了 Jetpack Compose 保持 API 直观和可预测的原则。</p>

<p>最好使用基于插槽的方法，让用户能够灵活地自定义内部内容。例如，你可以定义一个插槽（slot），让用户提供自定义内容，同时仍保留单个Modifier以进行外部自定义，而不是添加多个Modifier参数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">RoundedButton</span><span class="p">(</span>
</span><span class='line'>  <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>  <span class="n">onClick</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span>
</span><span class='line'>  <span class="n">content</span><span class="p">:</span> <span class="n">@Composable</span> <span class="n">RowScope</span><span class="p">.()</span> <span class="p">-&gt;</span> <span class="n">Unit</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Button</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">.</span><span class="n">clip</span><span class="p">(</span><span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">32.</span><span class="n">dp</span><span class="p">)),</span>
</span><span class='line'>    <span class="n">onClick</span> <span class="p">=</span> <span class="n">onClick</span>
</span><span class='line'>  <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">content</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3. 避免跨组件重复使用Modifier</h3>

<p>设计组件时的另一个重要考虑因素是避免重复使用提供的 Modifier 实例。一些开发人员可能会担心为每个组件创建新的 Modifier 实例可能会导致内存使用量增加或对性能产生负面影响，尤其是在具有大量Modifier的复杂布局层次结构中。</p>

<p>然而，由于 Jetpack Compose 中Modifier实现的优化性质，这种担忧通常是没有根据的。Modifier旨在应用于可组合函数中的单个布局节点，以确保行为清晰且可预测。如果在布局层次结构中不同级别的多个可组合项中使用相同的Modifier，则可能导致意外的副作用和不可预测的行为，从而损害组件的一致性和可用性。</p>

<p>例如，考虑这样一种情况，其中相同的 Modifier 参数在整个布局层次结构中重复使用，如下例所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">MyButtons</span><span class="p">(</span>
</span><span class='line'>  <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>  <span class="n">onClick</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Column</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Button</span><span class="p">(</span>
</span><span class='line'>      <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">,</span>
</span><span class='line'>      <span class="n">onClick</span> <span class="p">=</span> <span class="n">onClick</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">Text</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">10.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>        <span class="n">text</span> <span class="p">=</span> <span class="s">&quot;Rounded&quot;</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Button</span><span class="p">(</span>
</span><span class='line'>      <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">,</span>
</span><span class='line'>      <span class="n">onClick</span> <span class="p">=</span> <span class="n">onClick</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">Text</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">10.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>        <span class="n">text</span> <span class="p">=</span> <span class="s">&quot;Not Rounded&quot;</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>乍一看，代码似乎运行正常。但是，当你在调用点修改Modifier时，你会注意到意外的行为，可能会以意想不到的方式改变整个布局。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">MyButtons</span><span class="p">(</span>
</span><span class='line'>  <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>    <span class="p">.</span><span class="n">clip</span><span class="p">(</span><span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">32.</span><span class="n">dp</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">Blue</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span> <span class="p">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>为了确保行为正确并避免意外问题，你应避免在多个组件中重复使用Modifier。在本节中，你了解了在设计 Compose 组件时管理Modifier的最佳实践。接下来，让我们通过实现主题来深入了解如何提供一致的 UI 样式。</p>

<h2>主题确保 UI 一致性</h2>

<p>现在，假设你需要提供多种 Compose 组件，这些组件应共享一致的样式。如果这些组件是独立提供的，那么维护这些组件之间一致样式的责任就完全落在用户身上。这可能非常具有挑战性，因为每个组件可能会公开不同的 API 来自定义其样式，从而使同步变得繁琐且容易出错。</p>

<p>在这种情况下，你可以从 Compose Material 库提供的<a href="https://developer.android.com/develop/ui/compose/designsystems/material3#material-theming"> MaterialTheme API </a>中汲取灵感。关键在于确保组件样式一致，同时允许用户无缝自定义并在各个组件之间保持一致的样式。</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/0*AyJL0G8NsCGWX9_Q" alt="Theming Consistency" /></p>

<p>Compose 的<a href="https://getstream.io/video/sdk/"> Stream Video SDK </a>通过提供名为<a href="https://getstream.io/video/docs/android/ui-components/video-theme/"> VideoTheme </a>的专用主题 API 展示了最佳实践。此 VideoTheme API 可确保 SDK 提供的所有 Compose 组件的样式一致，包括颜色、尺寸、排版、形状、涟漪效果等。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">setContent</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">VideoTheme</span><span class="p">(</span>
</span><span class='line'>        <span class="n">colors</span> <span class="p">=</span> <span class="n">StreamColors</span><span class="p">.</span><span class="n">defaultColors</span><span class="p">().</span><span class="n">copy</span><span class="p">(</span><span class="n">appBackground</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Black</span><span class="p">),</span>
</span><span class='line'>        <span class="n">dimens</span> <span class="p">=</span> <span class="n">StreamDimens</span><span class="p">.</span><span class="n">defaultDimens</span><span class="p">().</span><span class="n">copy</span><span class="p">(</span><span class="n">callAvatarSize</span> <span class="p">=</span> <span class="m">72.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>        <span class="n">shapes</span> <span class="p">=</span> <span class="n">StreamShapes</span><span class="p">.</span><span class="n">defaultShapes</span><span class="p">().</span><span class="n">copy</span><span class="p">(</span>
</span><span class='line'>            <span class="n">avatar</span> <span class="p">=</span> <span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">8.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>            <span class="n">callButton</span> <span class="p">=</span> <span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">16.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>            <span class="n">callControls</span> <span class="p">=</span> <span class="n">RectangleShape</span><span class="p">,</span>
</span><span class='line'>            <span class="n">callControlsButton</span> <span class="p">=</span> <span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">8.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">CallContent</span><span class="p">(</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">(),</span>
</span><span class='line'>            <span class="n">call</span> <span class="p">=</span> <span class="n">call</span><span class="p">,</span>
</span><span class='line'>            <span class="n">onBackPressed</span> <span class="p">=</span> <span class="p">{</span> <span class="n">finish</span><span class="p">()</span> <span class="p">},</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过将 Stream SDK 提供的组件与 VideoTheme 包装在一起（如上例所示），自定义样式将自动一致地应用于所有组件。这种方法使用户能够轻松保持其 UI 的一致性，同时调整主题以满足其应用程序的设计要求。</p>

<h3>实现自定义主题</h3>

<p>让我们深入研究如何实现自定义主题。第一步是定义设计规范，这些规范将在你的组件之间共享或为用户提供自定义功能。考虑包括颜色、形状和尺寸等方面，因为这些通常是确保设计系统一致性的最重要因素。</p>

<p>例如，在 Stream SDK 中，组件所需的所有颜色集均在<a href="https://github.com/GetStream/stream-video-android/blob/c12db8cb6367e10682be3ab323d50dfcc59032f3/stream-video-android-ui-compose/src/main/kotlin/io/getstream/video/android/compose/theme/StreamColors.kt#L24"> StreamColors </a>类中预定义，为用户提供了一种无缝的方式来保持其整个 UI 的一致性。以下是 Stream SDK 如何通过结构良好的颜色集确保一致性的示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">public</span> <span class="n">data</span> <span class="k">class</span> <span class="nc">StreamColors</span><span class="p">(</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">brandPrimary</span><span class="p">:</span> <span class="n">Color</span><span class="p">,</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">brandPrimaryLt</span><span class="p">:</span> <span class="n">Color</span><span class="p">,</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">brandPrimaryDk</span><span class="p">:</span> <span class="n">Color</span><span class="p">,</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">brandSecondary</span><span class="p">:</span> <span class="n">Color</span><span class="p">,</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">brandSecondaryTransparent</span><span class="p">:</span> <span class="n">Color</span><span class="p">,</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">brandCyan</span><span class="p">:</span> <span class="n">Color</span><span class="p">,</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">brandGreen</span><span class="p">:</span> <span class="n">Color</span><span class="p">,</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">brandYellow</span><span class="p">:</span> <span class="n">Color</span><span class="p">,</span>
</span><span class='line'>    <span class="p">..</span>
</span><span class='line'>  <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来，你应该创建一个<a href="https://developer.android.com/develop/ui/compose/compositionlocal"> CompositionLocal </a>来保存设计规范。这将允许你的组件和用户通过使用 StreamTheme.colors 调用在自定义主题的上下文中无缝访问这些规范。</p>

<p><strong>译注：</strong> CompositionLocal是Compose中用于在上下文函数调用中，隐式的传递常量性质参数的方法，可以参考这篇文章<a href="https://juejin.cn/post/7434543407636267071">用Compose中的CompositionLocal来暗渡陈仓</a>，以了解CompositionLocal的详细用法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Local providers for various properties we connect to our components, for styling.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="py">LocalColors</span> <span class="p">=</span> <span class="n">compositionLocalOf</span><span class="p">&lt;</span><span class="n">StreamColors</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">error</span><span class="p">(</span><span class="s">&quot;No colors provided! Make sure to wrap all usages of Stream components in a VideoTheme.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="n">interface</span> <span class="n">StreamTheme</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Retrieves the current [StreamColors] at the call site&#39;s position in the hierarchy.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">val</span> <span class="py">colors</span><span class="p">:</span> <span class="n">StreamColors</span>
</span><span class='line'>        <span class="n">@Composable</span> <span class="n">@ReadOnlyComposable</span>
</span><span class='line'>        <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="n">LocalColors</span><span class="p">.</span><span class="n">current</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后，你需要利用<a href="https://developer.android.com/develop/ui/compose/compositionlocal"> CompositionLocal </a>将这些设计规范封装在自定义主题中。这种方法允许你在整个可组合层次结构中高效地提供和传播你的设计规范。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">public</span> <span class="k">fun</span> <span class="nf">VideoTheme</span><span class="p">(</span>
</span><span class='line'>    <span class="n">isInDarkMode</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="n">isSystemInDarkTheme</span><span class="p">(),</span>
</span><span class='line'>    <span class="n">colors</span><span class="p">:</span> <span class="n">StreamColors</span> <span class="p">=</span> <span class="n">StreamColors</span><span class="p">.</span><span class="n">defaultColors</span><span class="p">(),</span>
</span><span class='line'>    <span class="n">content</span><span class="p">:</span> <span class="n">@Composable</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">CompositionLocalProvider</span><span class="p">(</span>
</span><span class='line'>        <span class="n">LocalColors</span> <span class="n">provides</span> <span class="n">colors</span><span class="p">,</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">content</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在，你的所有组件都应假设它们都包含在自定义主题（例如本例中的 VideoTheme）中，并使用提供的设计规范来确保整个组件集的样式一致。这种方法不仅使你的组件 API 能够采用统一的样式，还允许用户利用这些设计规范进行自定义，从而同时提高灵活性和一致性。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">VideoRendererCallContent</span><span class="p">(</span>
</span><span class='line'>    <span class="n">call</span><span class="p">:</span> <span class="n">Call</span><span class="p">,</span>
</span><span class='line'>    <span class="n">video</span><span class="p">:</span> <span class="n">ParticipantState</span><span class="p">.</span><span class="n">Video</span><span class="p">,</span>
</span><span class='line'>    <span class="n">onRendered</span><span class="p">:</span> <span class="p">(</span><span class="n">View</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span> <span class="p">=</span> <span class="p">{},</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">VideoRenderer</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">fillMaxSize</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">VideoTheme</span><span class="p">.</span><span class="n">colors</span><span class="p">.</span><span class="n">baseSheetTertiary</span><span class="p">),</span> <span class="c1">// use pre-defined color styles</span>
</span><span class='line'>        <span class="n">call</span> <span class="p">=</span> <span class="n">call</span><span class="p">,</span>
</span><span class='line'>        <span class="n">video</span> <span class="p">=</span> <span class="n">video</span><span class="p">,</span>
</span><span class='line'>        <span class="n">onRendered</span> <span class="p">=</span> <span class="n">onRendered</span><span class="p">,</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">MyScreen</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">VideoRendererCallContent</span><span class="p">(..)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// some complicated components</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MainActivity</span> <span class="p">:</span> <span class="n">ComponentActivity</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">super</span><span class="p">.</span><span class="n">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>         <span class="n">setContent</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">VideoTheme</span> <span class="p">{</span>
</span><span class='line'>               <span class="n">MyScreen</span><span class="p">()</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种方法不仅对于实现 API（库或 SDK）有效，对于构建应用程序也同样有效，因为它能够使用结构良好、预定义的设计规范轻松维护设计一致性。对于实际示例和实际用例，你可以在<a href="https://github.com/GetStream/stream-video-android/blob/c12db8cb6367e10682be3ab323d50dfcc59032f3/stream-video-android-ui-compose/src/main/kotlin/io/getstream/video/android/compose/theme/VideoTheme.kt"> GitHub </a>上探索实际最佳实践。</p>

<h2>可定制性</h2>

<p>在实现 UI 组件时，尤其是对于库或 SDK，为 UI 和 UX 行为提供强大的自定义和灵活性至关重要。这可确保用户可以轻松重复使用组件并根据其特定要求进行调整。你可以采用各种策略在 Jetpack Compose 中有效地实现这种级别的可定制性。</p>

<h3>1. 利用样式类</h3>

<p>如果你希望为特定组件提供更具针对性的定制，请考虑提供专用的样式类。此类可以定义并允许用户轻松修改组件的 UI 和 UX 行为以满足他们的特定需求。</p>

<p>一个很好的例子是 TextStyle ，它是 Compose UI 库提供的默认类：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Immutable</span>
</span><span class='line'><span class="k">class</span> <span class="nc">TextStyle</span> <span class="k">internal</span> <span class="n">constructor</span><span class="p">(</span>
</span><span class='line'>  <span class="p">..</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">constructor</span><span class="p">(</span>
</span><span class='line'>        <span class="n">color</span><span class="p">:</span> <span class="n">Color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Unspecified</span><span class="p">,</span>
</span><span class='line'>        <span class="n">fontSize</span><span class="p">:</span> <span class="n">TextUnit</span> <span class="p">=</span> <span class="n">TextUnit</span><span class="p">.</span><span class="n">Unspecified</span><span class="p">,</span>
</span><span class='line'>        <span class="n">fontWeight</span><span class="p">:</span> <span class="n">FontWeight</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>        <span class="n">fontStyle</span><span class="p">:</span> <span class="n">FontStyle</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>        <span class="n">fontSynthesis</span><span class="p">:</span> <span class="n">FontSynthesis</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>        <span class="n">fontFamily</span><span class="p">:</span> <span class="n">FontFamily</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>        <span class="p">..</span>
</span><span class='line'>     <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如上面的代码所示，TextStyle 类封装了 Text 可组合项的所有样式属性。只需将 TextStyle 实例传递给 Text 可组合项，你就可以轻松自定义其设计，如下例所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">Text</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>        <span class="p">.</span><span class="n">fillMaxWidth</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="n">top</span> <span class="p">=</span> <span class="m">16.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>    <span class="n">text</span> <span class="p">=</span> <span class="s">&quot;Stats&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">style</span> <span class="p">=</span> <span class="n">TextStyle</span><span class="p">(</span>
</span><span class='line'>        <span class="n">fontSize</span> <span class="p">=</span> <span class="m">16.</span><span class="n">sp</span><span class="p">,</span>
</span><span class='line'>        <span class="n">lineHeight</span> <span class="p">=</span> <span class="m">24.</span><span class="n">sp</span><span class="p">,</span>
</span><span class='line'>        <span class="n">fontWeight</span> <span class="p">=</span> <span class="n">FontWeight</span><span class="p">(</span><span class="m">600</span><span class="p">),</span>
</span><span class='line'>        <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">White</span><span class="p">,</span>
</span><span class='line'>        <span class="n">textAlign</span> <span class="p">=</span> <span class="n">TextAlign</span><span class="p">.</span><span class="n">Center</span><span class="p">,</span>
</span><span class='line'>    <span class="p">),</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用样式类的优点是，它们允许组件开发人员将所有设计规范整合到一个集中的类中。这种方法可以防止设计元素分散在多个布局中，从而使代码库更简洁、更易于管理。</p>

<p>对于用户来说，样式类提供了一种直接且直观的修改设计的方法。此外，用户可以在多个布局中重复使用相同的样式实例，从而更方便地在不同布局中应用一致的自定义。</p>

<p>一个潜在的缺点是，由于<a href="https://getstream.io/blog/jetpack-compose-stability/#jetpack-compose-phases">重组机制（Recomposition）</a>，每当输入发生变化时，Compose 运行时都会比较样式类的所有属性，以确定是否需要重组。与直接在可组合函数中定义单个参数相比，这使其成本略高。然而，从 API 设计的角度来看，改进的用户体验和简化的 API 管理通常超过了这一成本，因此在许多情况下，这是一种值得的权衡。</p>

<h3>2. 借助插槽（Slots）的灵活性</h3>

<p>增强自定义灵活性的另一种有效策略是提供接受可组合函数的插槽，让用户根据自己的需求定义特定的实现。通过提供默认实现，你可以确保用户无需付出额外努力即可利用所提供的功能，同时仍然可以根据需要进行自定义。</p>

<p>例如，Stream Video SDK 提供的 CallContent 组件是一个高级 API，它集成了多个子组件，包括顶部应用栏、视频渲染器、布局结构、网格参与者等。虽然 CallContent API 包含默认实现以方便使用，但它还通过允许通过插槽参数进行自定义来确保灵活性，如以下代码所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">fun</span> <span class="nf">CallContent</span><span class="p">(</span>
</span><span class='line'>    <span class="n">call</span><span class="p">:</span> <span class="n">Call</span><span class="p">,</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="n">style</span><span class="p">:</span> <span class="n">VideoRendererStyle</span> <span class="p">=</span> <span class="n">RegularVideoRendererStyle</span><span class="p">(),</span>
</span><span class='line'>    <span class="n">appBarContent</span><span class="p">:</span> <span class="n">@Composable</span> <span class="p">(</span><span class="n">call</span><span class="p">:</span> <span class="n">Call</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">CallAppBar</span><span class="p">(..)</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="n">videoRenderer</span><span class="p">:</span> <span class="n">@Composable</span> <span class="p">(..)</span> <span class="p">-&gt;</span> <span class="n">Unit</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">ParticipantVideo</span><span class="p">(..)</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="n">videoContent</span><span class="p">:</span> <span class="n">@Composable</span> <span class="n">RowScope</span><span class="p">.(</span><span class="n">call</span><span class="p">:</span> <span class="n">Call</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">ParticipantsLayout</span><span class="p">(..)</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">..</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种方法允许用户实现自己的顶部应用栏、视频渲染器、布局结构、网格参与者等自定义版本。此外，另一种有效的策略是将相似类型的组件分组，并通过插槽使它们可自定义，这通常称为复合组件模式。</p>

<p>复合组件模式涉及创建一个父组件来管理子组件集合，通过为每个子组件公开插槽来提供自定义。此模式允许用户替换或自定义单个子组件，同时保持整体结构和功能的一致性。</p>

<p>想象一下视频通话屏幕上的控制面板包含多个操作按钮，如下图所示：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:886/format:webp/0*mNh-EWJlyCobHHed" alt="Control Panel" /></p>

<p>有些用户可能喜欢不同的操作按钮顺序，例如将麦克风按钮放在第一位，而其他用户可能希望根据其特定用例添加、删除或自定义按钮。在这种情况下，复合组件模式被证明在满足这些不同的要求方面非常有效，例如下面的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">public</span> <span class="k">fun</span> <span class="nf">ControlActions</span><span class="p">(</span>
</span><span class='line'>    <span class="n">call</span><span class="p">:</span> <span class="n">Call</span><span class="p">,</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="n">actions</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;(</span><span class="n">@Composable</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">)&gt;</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">LazyRow</span><span class="p">(</span>
</span><span class='line'>            <span class="n">verticalAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">CenterVertically</span><span class="p">,</span>
</span><span class='line'>            <span class="n">horizontalArrangement</span> <span class="p">=</span> <span class="n">Arrangement</span><span class="p">.</span><span class="n">spacedBy</span><span class="p">(</span>
</span><span class='line'>                <span class="n">VideoTheme</span><span class="p">.</span><span class="n">dimens</span><span class="p">.</span><span class="n">spacingM</span><span class="p">,</span>
</span><span class='line'>                <span class="n">Alignment</span><span class="p">.</span><span class="n">CenterHorizontally</span><span class="p">,</span>
</span><span class='line'>            <span class="p">),</span>
</span><span class='line'>        <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">items</span><span class="p">(</span><span class="n">actions</span><span class="p">)</span> <span class="p">{</span> <span class="n">action</span> <span class="p">-&gt;</span>
</span><span class='line'>                <span class="n">action</span><span class="p">.</span><span class="n">invoke</span><span class="p">()</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码演示了一个接受 Composable 函数列表的单个插槽，然后使用 Row 或 LazyRow 进行渲染。这种方法允许你提供高度灵活的组件 API，同时保持对组件布局预期结构的控制。</p>

<p>之后，你还可以提供默认实现，如下所示，以增加便利性。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">public</span> <span class="k">fun</span> <span class="nf">buildDefaultCallControlActions</span><span class="p">(</span>
</span><span class='line'>    <span class="n">onCallAction</span><span class="p">:</span> <span class="p">(</span><span class="n">CallAction</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span>
</span><span class='line'><span class="p">):</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">@Composable</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">listOf</span><span class="p">(</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">ToggleCameraAction</span><span class="p">(</span>
</span><span class='line'>                <span class="n">onCallAction</span> <span class="p">=</span> <span class="n">onCallAction</span><span class="p">,</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">ToggleMicrophoneAction</span><span class="p">(</span>
</span><span class='line'>                <span class="n">onCallAction</span> <span class="p">=</span> <span class="n">onCallAction</span><span class="p">,</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">FlipCameraAction</span><span class="p">(</span>
</span><span class='line'>                <span class="n">onCallAction</span> <span class="p">=</span> <span class="n">onCallAction</span><span class="p">,</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">public</span> <span class="k">fun</span> <span class="nf">ControlActions</span><span class="p">(</span>
</span><span class='line'>    <span class="n">call</span><span class="p">:</span> <span class="n">Call</span><span class="p">,</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="n">onCallAction</span><span class="p">:</span> <span class="p">(</span><span class="n">CallAction</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span> <span class="p">=</span> <span class="p">{</span> <span class="n">DefaultOnCallActionHandler</span><span class="p">.</span><span class="n">onCallAction</span><span class="p">(</span><span class="n">call</span><span class="p">,</span> <span class="n">it</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'>    <span class="n">actions</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;(</span><span class="n">@Composable</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">)&gt;</span> <span class="p">=</span> <span class="n">buildDefaultCallControlActions</span><span class="p">(</span><span class="n">onCallAction</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如需了解更多<a href="https://getstream.io/video/docs/android/ui-components/call/call-controls/"> ControlActions </a>的真实示例，你可以探索<a href="https://github.com/GetStream/stream-video-android/blob/c12db8cb6367e10682be3ab323d50dfcc59032f3/stream-video-android-ui-compose/src/main/kotlin/io/getstream/video/android/compose/ui/components/call/controls/ControlActions.kt#L48"> GitHub </a>上的实现。</p>

<h3>3. 使用主题进行定制</h3>

<p>设计 Compose 组件时的另一个常见挑战是，随着组件层次结构的变大，提供清晰、直接的可定制性变得更加困难。例如，假设你想为组件多个部分使用的视频渲染器提供可定制性，但 UI 层次结构嵌套很深且很复杂，如下例所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">CallContent</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">ParticipantsLayout</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">ParticipantsRegularGrid</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">OrientationVideoRenderer</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">LazyVerticalGrid</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">VideoRenderer</span><span class="p">()</span> <span class="c1">// &lt;-- users want to customize this renderer style</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">FloatingVideoRenderer</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">VideoRenderer</span><span class="p">()</span> <span class="c1">// &lt;-- users want to customize this renderer style</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这种情况下，将插槽或样式参数从最顶层的组件一直传递到 VideoRenderer 组件并不理想。随着你在不同组件之间添加更多可定制性，最顶层的组件 (CallContent) 可能会因大量插槽和样式参数而变得过载。这不仅使你的 API 更难维护，而且还增加了用户混淆或误用的可能性，因为不清楚哪个参数用于什么用途。</p>

<p>为了解决这个问题，你可以利用自定义主题和<a href="https://developer.android.com/develop/ui/compose/compositionlocal"> CompositionLocal</a>来实现可定制性，同时保持 API 更清晰、更易于管理，如下例所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Immutable</span>
</span><span class='line'><span class="k">public</span> <span class="n">data</span> <span class="k">class</span> <span class="nc">VideoRendererStyle</span><span class="p">(</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">backgroundColor</span><span class="p">:</span> <span class="n">Color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Black</span><span class="p">,</span>
</span><span class='line'>    <span class="p">..</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="py">LocalVideoRendererStyle</span> <span class="p">=</span> <span class="n">compositionLocalOf</span><span class="p">&lt;</span><span class="n">VideoRendererStyle</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">error</span><span class="p">(</span><span class="s">&quot;No VideoRendererStyle provided! Make sure to wrap all usages of Stream components in a VideoTheme.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">public</span> <span class="k">fun</span> <span class="nf">VideoTheme</span><span class="p">(</span>
</span><span class='line'>    <span class="n">videoRendererStyle</span><span class="p">:</span> <span class="n">VideoRendererStyle</span> <span class="p">=</span> <span class="n">VideoRendererStyle</span><span class="p">(),</span>
</span><span class='line'>    <span class="n">content</span><span class="p">:</span> <span class="n">@Composable</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">CompositionLocalProvider</span><span class="p">(</span>
</span><span class='line'>        <span class="n">LocalVideoRendererStyle</span> <span class="n">provides</span> <span class="n">videoRendererStyle</span><span class="p">,</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">content</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在，你可以通过在不同的组件中使用提供的样式来确保组件样式的一致性，而无需将它们作为参数反复传递。此外，用户可以通过创建自己的自定义主题轻松自定义样式，如下例所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">setContent</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">VideoTheme</span><span class="p">(</span>
</span><span class='line'>        <span class="n">videoRendererStyle</span> <span class="p">=</span> <span class="n">VideoRendererStyle</span><span class="p">(</span><span class="n">backgroundColor</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Blue</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">..</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你希望更广泛地应用此策略并高效地管理更多样式，则可以将它们合并为一个类，例如 StreamStyles ，并提供统一的样式类，而不是 CompositionLocal 中的多个单独样式。有些同学可能会担心 CompositionLocal 带来的性能影响，因为它会在值更改时触发布局层次结构的重组，但主题通常不会在应用程序中频繁更新。它们通常是静态的，以确保设计一致性，因此在这种情况下使用 CompositionLocal 是一种合适且有效的选择。</p>

<h2>预览（Preview）的兼容性</h2>

<p>提供预览非常重要，尤其是在构建组件 API 时，因为它们允许开发人员直接在 Android Studio 中可视化和验证他们的 UI 设计。
一些同学依靠<a href="https://developer.android.com/develop/ui/compose/tooling#live-edit-literals"> Live Literals </a>来动态展示预览中的变化，而其他同学则使用屏幕截图测试来确保其组件的视觉一致性。因此，在实现 Compose 组件时，必须确保它们与 Android Studio 中的预览功能完全兼容，如下面的屏幕截图所示：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/0*R74xLmTnWswi86ww" alt="Preview" /></p>

<p>有时，你的组件可能会产生副作用，例如在发出网络请求或处理动态状态后渲染图像，这可能会导致预览出现故障。在这种情况下，你可以利用<a href="https://developer.android.com/develop/ui/compose/tooling/previews#localinspectionmode"> LocalInspectionMode</a>。</p>

<p>LocalInspectionMode 允许你确定可组合项是否在预览模式下呈现，从而使你可以呈现专门用于预览目的的专用布局。这种方法可确保预览保持功能，即使你的组件依赖于复杂的逻辑或外部资源。你可以从<a href="https://github.com/skydoves/landscapist"> Landscapist </a>中找到一个用于网络图像加载的 Jetpack Compose 库的真实示例，它演示了处理预览的最佳实践。</p>

<p>下面的可组合函数会检查它是否处于预览模式。如果是，它会渲染静态图像，而不是执行诸如获取网络数据之类的副作用。这种方法允许用户为 GlideImage 可组合函数构建自己的预览，而不会在预览渲染期间遇到运行时错误。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">public</span> <span class="k">fun</span> <span class="nf">GlideImage</span><span class="p">(</span>
</span><span class='line'>  <span class="n">imageModel</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Any</span><span class="p">?,</span>
</span><span class='line'>  <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>  <span class="n">previewPlaceholder</span><span class="p">:</span> <span class="n">Painter</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>  <span class="p">..</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">LocalInspectionMode</span><span class="p">.</span><span class="n">current</span> <span class="p">&amp;&amp;</span> <span class="n">previewPlaceholder</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">Image</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">,</span>
</span><span class='line'>        <span class="n">painter</span> <span class="p">=</span> <span class="n">previewPlaceholder</span><span class="p">,</span>
</span><span class='line'>        <span class="p">..</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// complex logic about requesting network data and render it</span>
</span><span class='line'>  <span class="p">..</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>为了增强项目中的整体预览策略，请考虑探索<a href="https://getstream.io/blog/effective-compose-preview/">设计有效的 UI 以增强 Compose 预览</a>。此资源提供了有价值的见解和技术，可有效优化你的 Compose 预览。</p>

<h2>结论</h2>

<p>在本文中，我们探讨了在 Jetpack Compose 中制作有效 UI 组件的策略，重点关注最佳实践，例如高效处理Modifier、确保设计与主题一致、实施可定制性策略以及增强预览兼容性。设计直观且强大的 API 始终是一项挑战，但努力终将获得回报，因为用户体验和开发者满意度显著提升。</p>

<p>如果你对本文有任何疑问或反馈，可以在 Twitter<a href="https://twitter.com/github_skydoves"> @github_skydoves </a>或<a href="https://github.com/skydoves"> GitHub </a>上找到作者。如果你想随时了解 Stream 的最新动态，请在 Twitter 上关注我们<a href="https://twitter.com/getstream_io"> @getstream_io</a>，获取更多精彩的技术内容。</p>

<p>老规矩，祝你编码愉快！ &ndash; <a href="https://github.com/skydoves">Jaewoong</a></p>

<p>最初<a href="https://getstream.io/blog/designing-effective-compose/">发布于 GetStream.io</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding Algorithm Tarjan]]></title>
    <link href="https://alexhilton.github.io/blog/2025/03/07/understanding-algorithm-tarjan/"/>
    <updated>2025-03-07T20:45:57+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/03/07/understanding-algorithm-tarjan</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p><a href="https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm">Tarjan算法</a>是用于寻找图中强连通组件的高效算法。通常叫做「割点」或者「割边」，也叫做桥，也就是说如果去掉了某个节点，或者某条边，图中的连通分量数量会增加，那么这样的节点就是割点，这样的边就是桥。</p>

<p>比如说，下面这个图中的节点2就是一个「割点」：</p>

<p><a href="https://alexhilton.github.io/blog/2025/03/07/understanding-algorithm-tarjan/"><img src="https://oi-wiki.org/graph/images/cut1.svg" title="auto auto" ></a></p>

<!-- more -->


<p>而下面这个图中的红色的边就是「桥」：</p>

<p><img src="https://oi-wiki.org/graph/images/bridge1.svg" alt="Cut edge/Bridge" /></p>

<h2>Tarjan&rsquo;s Algorithm</h2>

<p>寻找「割点」和「桥」的朴素方法是，遍历每一个节点，或者边，尝试去掉它，然后查看连通分量的数量有没有增加，显然这样复杂度很高至少是O(n<sup>2</sup>)的，所以要介绍一个常用的算法：Tarjan。</p>

<p>为了简单，假定图的节点为0~n-1，需要两个辅助数组disc[n]用以表示每个节点被访问到的次序，或者说被访问到的时间戳，需要注意，这个对于图中节点来说是唯一的，且与每个节点是一一对应的，代表着遍历过程中访问到每个节点的次序。目的是用于唯一标识每个节点，以及节点在遍历中的次序。</p>

<p>另一个辅助数组是low[n]，它记录的是当前节点所在的子树中被访问到的最早的节点，也就是强连通分量子树的根。也就是说low[u]的值是包含u在内的子树的根，它一定是最早被访问的。原理在于，强连通分量一定有环，那么从当前节点u再往回返回到的u之前的节点时，就形成了环，也即是连通分量，low[u]就记录着这个连通分量的根，也即最早被访问到的节点。显然，当low[u] = u时，就找到了这个根节点，当然也找到了一个强连通分量，如果在遍历过程中记录顶点，那么当low[u] = u时，记录过的顶点就都在一个强连通分量里面。</p>

<p>需要注意的是，这里遍历的方法要用DFS，因为DFS肯定能以最快的方式找到环，回到已遍历过的节点。</p>

<h2>典型题目</h2>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/critical-connections-in-a-network/description/">1192. 查找集群内的关键连接</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/critical-connections-in-a-network/solutions/3599268/xi-you-yuan-su-1192-cha-zhao-ji-qun-nei-8wm0m/">题解</a> </td>
<td style="text-align:left;"> 板子题 </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h2>关联知识</h2>

<p><a href="https://en.wikipedia.org/wiki/Strongly_connected_component">强连通分量</a>，强连通分量是指图中的一组相互均可达的节点组成的子集。注意，强连通分量里面的节点，只需要相互均可达，并不要求直接有边连接。</p>

<p>不同的强连通分量之间的连接（即边或者顶点）即是「割点」和「桥」。</p>

<p>寻找强连通分量的算法，除了Tarjan以外，还有<a href="https://en.wikipedia.org/wiki/Kosaraju%27s_algorithm">Kosaraju算法</a>。</p>

<h2>References</h2>

<ul>
<li><a href="https://www.geeksforgeeks.org/tarjan-algorithm-find-strongly-connected-components/">Tarjan’s Algorithm to find Strongly Connected Components</a></li>
<li><a href="https://www.baeldung.com/cs/scc-tarjans-algorithm">Finding Strongly Connected Components: Tarjan’s Algorithm</a></li>
<li><a href="https://oi-wiki.org/graph/cut/">割点和桥</a></li>
<li><a href="https://leetcode.cn/problems/critical-connections-in-a-network/solutions/2078647/mobanjibie-by-lao-song-2f-1r0d/?envType=study-plan-v2&amp;envId=graph-theory">Tarjan 算法的模板题（Java 版本）</a></li>
<li><a href="https://www.geeksforgeeks.org/strongly-connected-components/">Strongly Connected Components</a></li>
<li><a href="https://www.geeksforgeeks.org/kosarajus-algorithm-in-c/">Kosaraju’s Algorithm in C</a></li>
<li><a href="https://www.baeldung.com/cs/kosaraju-algorithm-scc">Finding Strongly Connected Components: Kosaraju’s Algorithm</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
