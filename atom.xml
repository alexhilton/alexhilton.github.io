<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[稀有猿诉]]></title>
  <link href="https://alexhilton.github.io/atom.xml" rel="self"/>
  <link href="https://alexhilton.github.io/"/>
  <updated>2025-08-18T22:25:11+08:00</updated>
  <id>https://alexhilton.github.io/</id>
  <author>
    <name><![CDATA[Alex Hilton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[深入浅出着色器：极坐标系与炫酷环形进度条]]></title>
    <link href="https://alexhilton.github.io/blog/2025/08/18/circle-bar-with-shader/"/>
    <updated>2025-08-18T22:20:10+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/08/18/circle-bar-with-shader</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自「Circle bars with AGSL」，原文链接<a href="https://medium.com/@off.mind.by/circle-bars-with-agsl-37d0612c34a2">https://medium.com/@off.mind.by/circle-bars-with-agsl-37d0612c34a2</a>，由Alex Volkov发布于2025年1月6日。</p></blockquote>

<p><a href="https://alexhilton.github.io/blog/2025/08/18/circle-bar-with-shader/"><img src="https://miro.medium.com/v2/resize:fit:2000/1*eA4A8yhl-BSTW4EoFMDRJw.jpeg" title="auto auto" ></a></p>

<!-- more -->


<p>大家好！今天，我将向大家讲解如何使用极坐标系。这是一个重要但又相当简单的主题，因此我选择了一个直截了当的效果，以避免过多地深入讲解其他细节。与往常一样，本教程分为几个部分。首先，我将概述设置着色器所需的最简 Compose 代码。在第二部分中，我将详细解释着色器本身以及使用极坐标的原理。最后，我们将进行一些收尾工作，使效果更加惊艳。</p>

<p>最终，我们将实现如下效果：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1000/1*RA4vKEMtnGVL78RVxe9Avg.gif" alt="" /></p>

<blockquote><p>在深入探讨之前，我想提醒你，我并没有为每个效果创建教程。不过，所有效果都可以在我的 <a href="https://github.com/AleksiejVolkov/runtimeshaders">GitHub</a> （链接：<a href="https://github.com/AleksiejVolkov/runtimeshaders%EF%BC%89%E4%B8%8A%E6%89%BE%E5%88%B0%E3%80%82%E4%BD%A0%E8%BF%98%E5%8F%AF%E4%BB%A5%E5%9C%A8%E6%88%91%E7%9A%84">https://github.com/AleksiejVolkov/runtimeshaders%EF%BC%89%E4%B8%8A%E6%89%BE%E5%88%B0%E3%80%82%E4%BD%A0%E8%BF%98%E5%8F%AF%E4%BB%A5%E5%9C%A8%E6%88%91%E7%9A%84</a> <a href="https://t.me/droidshaderworks">Telegram 频道</a> 中找到视频、新效果的公告以及问题的解答。期待在那里见到你！</p></blockquote>

<p>和往常一样，让我们从布局开始。我将基础 Compose 组件命名为“TimerShaderScreen”。在组件内部，我们将从一个“Column”容器开始，该容器顶部包含一个输入字段，后面跟着一个“Box”。这个“Box”在同一层级上包含一个将应用着色器的“Box”和一个显示当前计时器值的“Text”元素（这一点很重要）。从技术上讲，我们可以只使用一个“Box”，但这会使着色器稍微复杂一些。为了简化本教程，我选择了稍微复杂的构图，以使着色器保持简洁。在这个“Box”之后，有一个用于启动计时器的按钮。我提供了一个布局图，以便更清晰地展示，但总的来说，布局本身已经非常简单了。</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/1*oIa0bosA1IbHuMZVKw9tFw.png" alt="" /></p>

<p>接下来，让我们添加必要的变量并定义整个布局。由于我们尚未准备好着色器，因此你可以暂时跳过“RuntimeShader”变量，只需运行项目并确保一切正常即可。我想强调一个重要的细节：如果你将着色器应用于一个不包含任何内容的“Box”，则需要为其设置背景颜色。这确保它参与合成，从而使我们的效果可见。但是，务必在应用“graphicsLayer”之后设置背景颜色。否则，只会渲染颜色，着色器将不可见。目前，布局应该如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">TimerShaderScreen</span><span class="p">(</span><span class="n">paddingValues</span><span class="p">:</span> <span class="n">PaddingValues</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">startValue</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="m">20</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">percentage</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableFloatStateOf</span><span class="p">(</span><span class="m">0.0f</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">isRunning</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="k">false</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">seconds</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="n">startValue</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// circularTimeShader是一个包含着色器代码的字符串对象，我们将在下面的部分中编写</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">shader</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">RuntimeShader</span><span class="p">(</span><span class="n">circularTimerShader</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Column</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">fillMaxSize</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="n">paddingValues</span><span class="p">),</span>
</span><span class='line'>        <span class="n">verticalArrangement</span> <span class="p">=</span> <span class="n">Arrangement</span><span class="p">.</span><span class="n">Center</span><span class="p">,</span>
</span><span class='line'>        <span class="n">horizontalAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">CenterHorizontally</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">OutlinedTextField</span><span class="p">(</span>
</span><span class='line'>            <span class="n">value</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">startValue</span> <span class="p">!=</span> <span class="m">0</span><span class="p">)</span> <span class="n">startValue</span><span class="p">.</span><span class="n">toString</span><span class="p">()</span> <span class="k">else</span> <span class="s">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">onValueChange</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">startValue</span> <span class="p">=</span> <span class="n">it</span><span class="p">.</span><span class="n">toIntOrNull</span><span class="p">()</span> <span class="o">?:</span> <span class="m">0</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="n">label</span> <span class="p">=</span> <span class="p">{</span> <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Start value&quot;</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">width</span><span class="p">(</span><span class="m">200.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>        <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">250.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>            <span class="n">contentAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">Center</span>
</span><span class='line'>        <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>                <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">250.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">onSizeChanged</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">shader</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span><span class="s">&quot;resolution&quot;</span><span class="p">,</span> <span class="n">it</span><span class="p">.</span><span class="n">width</span><span class="p">.</span><span class="n">toFloat</span><span class="p">(),</span> <span class="n">it</span><span class="p">.</span><span class="n">height</span><span class="p">.</span><span class="n">toFloat</span><span class="p">())</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">graphicsLayer</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">shader</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span><span class="s">&quot;percentage&quot;</span><span class="p">,</span> <span class="n">percentage</span><span class="p">)</span>
</span><span class='line'>                        <span class="n">renderEffect</span> <span class="p">=</span> <span class="n">RenderEffect</span><span class="p">.</span><span class="n">createRuntimeShaderEffect</span><span class="p">(</span><span class="n">shader</span><span class="p">,</span> <span class="s">&quot;image&quot;</span><span class="p">).</span><span class="n">asComposeRenderEffect</span><span class="p">()</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Black</span><span class="p">),</span> <span class="c1">// &lt;-- 我们必须添加一些颜色，否则空框就会从构图中移除，就看不出效果了</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">Text</span><span class="p">(</span>
</span><span class='line'>                <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">fillMaxWidth</span><span class="p">(),</span>
</span><span class='line'>                <span class="n">textAlign</span> <span class="p">=</span> <span class="n">TextAlign</span><span class="p">.</span><span class="n">Center</span><span class="p">,</span>
</span><span class='line'>                <span class="n">text</span> <span class="p">=</span> <span class="n">seconds</span><span class="p">.</span><span class="n">toString</span><span class="p">(),</span>
</span><span class='line'>                <span class="n">fontSize</span> <span class="p">=</span> <span class="m">50.</span><span class="n">sp</span><span class="p">,</span>
</span><span class='line'>                <span class="n">fontWeight</span> <span class="p">=</span> <span class="n">FontWeight</span><span class="p">.</span><span class="n">Thin</span><span class="p">,</span>
</span><span class='line'>                <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">White</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">OutlinedButton</span><span class="p">(</span>
</span><span class='line'>            <span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span> <span class="n">isRunning</span> <span class="p">=</span> <span class="p">!</span><span class="n">isRunning</span> <span class="p">},</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="n">top</span> <span class="p">=</span> <span class="m">16.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Text</span><span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="n">isRunning</span><span class="p">)</span> <span class="s">&quot;Stop&quot;</span> <span class="k">else</span> <span class="s">&quot;Start&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是它在手机上的实际显示效果：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:924/1*HPGAGRtgTmxrihj91xiRXw.png" alt="" /></p>

<p>剩下的就是添加计时器本身的逻辑，然后我们就可以开始进入正文了。首先，让我们创建一个 <code>LaunchedEffect</code> 来在计时器运行时更新其值。同时，我们将在此代码块中计算着色器的 <code>percentage</code>。由于我们的着色器会从计时器的起始值向下过渡到零，因此我们需要对 <code>percentage</code> 变量进行归一化，使其相应地从 0 变为 1。代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">isRunning</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">startTime</span> <span class="p">=</span> <span class="n">System</span><span class="p">.</span><span class="n">currentTimeMillis</span><span class="p">()</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">isRunning</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">seconds</span><span class="p">.</span><span class="n">value</span> <span class="p">&lt;</span> <span class="m">0</span><span class="p">)</span> <span class="p">{</span> <span class="n">isRunning</span> <span class="p">=</span> <span class="k">false</span> <span class="p">}</span> <span class="c1">// 时间到时停止倒计时</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="py">elapsedTime</span> <span class="p">=</span> <span class="n">System</span><span class="p">.</span><span class="n">currentTimeMillis</span><span class="p">()</span> <span class="p">-</span> <span class="n">startTime</span> <span class="c1">// 已用时间（单位是毫秒）</span>
</span><span class='line'>        <span class="n">percentage</span> <span class="p">=</span> <span class="p">(</span><span class="n">elapsedTime</span> <span class="p">/</span> <span class="m">1000f</span><span class="p">)</span> <span class="p">/</span> <span class="n">startValue</span> <span class="c1">// 将经过的时间归一化为[0,1]</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 将百分比限制在 [0, 1] 之间以避免过冲</span>
</span><span class='line'>        <span class="n">percentage</span> <span class="p">=</span> <span class="n">percentage</span><span class="p">.</span><span class="n">coerceIn</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="m">1f</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 计算剩余秒数</span>
</span><span class='line'>        <span class="n">seconds</span><span class="p">.</span><span class="n">value</span> <span class="p">=</span> <span class="p">((</span><span class="n">startValue</span> <span class="p">-</span> <span class="p">(</span><span class="n">elapsedTime</span> <span class="p">/</span> <span class="m">1000f</span><span class="p">))).</span><span class="n">toInt</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">delay</span><span class="p">(</span><span class="m">10</span><span class="p">)</span> <span class="c1">// 延迟以控制更新频率</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Compose 部分就到此为止；让我们继续编写着色器吧！</p>

<p>首先，让我们定义来自 UI 的变量，以及着色器的最低设置。现在，我们将返回像素与归一化坐标中心的距离，作为颜色：<code>length(uv)</code>。如果这部分内容不太清楚，强烈建议你查看我的<a href="https://juejin.cn/post/7535292253813981247">教程</a>，了解如何在 Android 中使用着色器。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="py">circularTimerShader</span> <span class="p">=</span> <span class="s">&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">uniform</span> <span class="n">float</span> <span class="n">time</span><span class="p">;</span>
</span><span class='line'>    <span class="n">uniform</span> <span class="n">float</span> <span class="n">percentage</span><span class="p">;</span>
</span><span class='line'>    <span class="n">uniform</span> <span class="n">vec2</span> <span class="n">resolution</span><span class="p">;</span>
</span><span class='line'>    <span class="n">uniform</span> <span class="n">shader</span> <span class="n">image</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">vec4</span> <span class="n">main</span><span class="p">(</span><span class="n">float2</span> <span class="n">fragCoord</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">float2</span> <span class="n">uv</span> <span class="p">=</span> <span class="n">fragCoord</span> <span class="p">/</span> <span class="n">resolution</span> <span class="p">-</span> <span class="m">0.5</span><span class="p">;</span> <span class="c1">// 归一化坐标</span>
</span><span class='line'>        <span class="n">uv</span><span class="p">.</span><span class="n">x</span> <span class="p">*=</span> <span class="n">resolution</span><span class="p">.</span><span class="n">x</span> <span class="p">/</span> <span class="n">resolution</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">vec4</span><span class="p">(</span><span class="n">length</span><span class="p">(</span><span class="n">uv</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;.trimIndent()</span>
</span></code></pre></td></tr></table></div></figure>


<p>因此，目前我们得到的大致如下：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1000/1*e2GHAO-1N7K0KBjN4wAYww.png" alt="" /></p>

<p>现在，让我们尝试在标准笛卡尔平面上绘制一个“栅栏”，即一系列垂直的条形。如何实现这个效果？首先，我们将 y 轴上的所有值限制在零以下。着色器现在如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="k">vec4</span> <span class="n">main</span><span class="p">(</span><span class="n">float2</span> <span class="n">fragCoord</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">float2</span> <span class="n">uv</span> <span class="o">=</span> <span class="n">fragCoord</span> <span class="o">/</span> <span class="n">resolution</span> <span class="o">-</span> <span class="mf">0.5</span><span class="p">;</span> <span class="c1">// 归一化坐标</span>
</span><span class='line'>    <span class="n">uv</span><span class="p">.</span><span class="n">x</span> <span class="o">*=</span> <span class="n">resolution</span><span class="p">.</span><span class="n">x</span> <span class="o">/</span> <span class="n">resolution</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">vec3</span> <span class="n">color</span> <span class="o">=</span> <span class="k">vec3</span><span class="p">(</span><span class="mf">1.</span><span class="p">)</span> <span class="o">*</span> <span class="n">step</span><span class="p">(</span><span class="n">uv</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="k">vec4</span><span class="p">(</span><span class="n">color</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来，我们还将沿 x 轴裁剪掉一半的区域。记住，我们的 <code>uv</code> 坐标偏移了 0.5，使零点位于中心。这样，我们也可以沿 x 轴在零点处裁剪，只留下右上象限。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="k">float</span> <span class="n">fence</span> <span class="o">=</span> <span class="n">step</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="n">uv</span><span class="p">.</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'><span class="k">vec3</span> <span class="n">color</span> <span class="o">=</span> <span class="k">vec3</span><span class="p">(</span><span class="mf">1.</span><span class="p">)</span> <span class="o">*</span> <span class="n">step</span><span class="p">(</span><span class="n">uv</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">)</span> <span class="o">*</span> <span class="n">fence</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在，如果我们将 x 轴上的坐标乘以 10，并只取小数部分，我们将得到如下所示的 x 轴值：<code>[0...1, 0...1, 0...1, ...]</code>。再将它们平移 0.5，我们就得到了“栅栏”。下面，我演示了构建垂直条的三个步骤。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="k">vec4</span> <span class="n">main</span><span class="p">(</span><span class="n">float2</span> <span class="n">fragCoord</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">float2</span> <span class="n">uv</span> <span class="o">=</span> <span class="n">fragCoord</span> <span class="o">/</span> <span class="n">resolution</span> <span class="o">-</span> <span class="mf">0.5</span><span class="p">;</span> <span class="c1">// 归一化坐标</span>
</span><span class='line'>    <span class="n">uv</span><span class="p">.</span><span class="n">x</span> <span class="o">*=</span> <span class="n">resolution</span><span class="p">.</span><span class="n">x</span> <span class="o">/</span> <span class="n">resolution</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">float</span> <span class="n">fence</span> <span class="o">=</span> <span class="n">step</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="n">fract</span><span class="p">(</span><span class="n">uv</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="mf">10.</span><span class="p">)</span> <span class="o">-</span> <span class="mf">0.5</span><span class="p">);</span>
</span><span class='line'>    <span class="k">vec3</span> <span class="n">color</span> <span class="o">=</span> <span class="k">vec3</span><span class="p">(</span><span class="mf">1.0</span><span class="p">)</span> <span class="o">*</span> <span class="n">step</span><span class="p">(</span><span class="n">uv</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">)</span> <span class="o">*</span> <span class="n">fence</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="k">vec4</span><span class="p">(</span><span class="n">color</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://miro.medium.com/v2/resize:fit:1400/1*l7X_24sRzAI7iYZLqeWKFQ.png" alt="" /></p>

<p>现在到了最激动人心的部分：如何从笛卡尔坐标系过渡到极坐标系？换句话说，如何创建相同的“栅栏”，但使其看起来像圆形？让我们来弄清楚。</p>

<p>我们习惯用两个值来描述函数：<code>x</code> 和 <code>y</code>。这使我们能够确定像素在平面上的精确位置并为其分配颜色。在我们的例子中，坐标系是 <code>uv</code>。为了垂直裁剪，我们使用 <code>y</code>；为了水平裁剪“栅栏”的各个部分，我们使用 <code>x</code>。</p>

<p>极坐标系与此非常相似，但我们使用的不是水平轴和垂直轴，而是半径（与原点的距离）和角度。</p>

<p>换句话说，由于这两个坐标系都包含两个分量，理解它们的含义使我们能够相对轻松地将笛卡尔坐标系中使用的公式和技术应用于极坐标系。然而，最终的图像看起来会“弯曲”成一个圆形。让我们尝试将“栅栏”转换为极坐标：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="k">vec2</span> <span class="n">cartesianToPolar</span><span class="p">(</span><span class="k">vec2</span> <span class="n">uv</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">r</span> <span class="o">=</span> <span class="n">length</span><span class="p">(</span><span class="n">uv</span><span class="p">);</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">theta</span> <span class="o">=</span> <span class="n">atan</span><span class="p">(</span><span class="n">uv</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="n">uv</span><span class="p">.</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">vec2</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">theta</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span><span class="k">vec4</span> <span class="n">main</span><span class="p">(</span><span class="n">float2</span> <span class="n">fragCoord</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">float2</span> <span class="n">uv</span> <span class="o">=</span> <span class="n">fragCoord</span> <span class="o">/</span> <span class="n">resolution</span> <span class="o">-</span> <span class="mf">0.5</span><span class="p">;</span> <span class="c1">// 归一化坐标</span>
</span><span class='line'>    <span class="n">uv</span><span class="p">.</span><span class="n">x</span> <span class="o">*=</span> <span class="n">resolution</span><span class="p">.</span><span class="n">x</span> <span class="o">/</span> <span class="n">resolution</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 转换为极坐标</span>
</span><span class='line'>    <span class="k">vec2</span> <span class="n">polar</span> <span class="o">=</span> <span class="n">cartesianToPolar</span><span class="p">(</span><span class="n">uv</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">float</span> <span class="n">r</span> <span class="o">=</span> <span class="n">polar</span><span class="p">.</span><span class="n">x</span><span class="p">;</span> <span class="c1">// 半径</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">float</span> <span class="n">theta</span> <span class="o">=</span> <span class="n">polar</span><span class="p">.</span><span class="n">y</span><span class="p">;</span> <span class="c1">// 角度</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">float</span> <span class="n">fence</span> <span class="o">=</span> <span class="n">step</span><span class="p">(</span> <span class="mf">0.5</span><span class="p">,</span> <span class="n">fract</span><span class="p">(</span><span class="n">theta</span> <span class="o">*</span> <span class="mf">10.0</span><span class="p">));</span>
</span><span class='line'>    <span class="k">vec3</span> <span class="n">color</span> <span class="o">=</span> <span class="k">vec3</span><span class="p">(</span><span class="mf">1.</span><span class="p">)</span> <span class="o">*</span> <span class="n">step</span><span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">r</span><span class="p">)</span> <span class="o">*</span> <span class="n">fence</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="k">vec4</span><span class="p">(</span><span class="n">color</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://miro.medium.com/v2/resize:fit:1000/1*UR389J0im6ziWvc_d9ERzA.png" alt="极坐标系中的“栅栏”" /></p>

<p>但是，你可能会注意到，光线的宽度随着远离中心而增加。我们可以添加补偿来消除这种影响。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="c1">// 宽度已调整的进度条</span>
</span><span class='line'><span class="k">float</span> <span class="n">width</span> <span class="o">=</span> <span class="mf">0.02</span><span class="p">;</span> <span class="c1">// Bar width</span>
</span><span class='line'><span class="k">float</span> <span class="n">adjustedWidth</span> <span class="o">=</span> <span class="n">width</span> <span class="o">/</span> <span class="n">max</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="mf">0.001</span><span class="p">);</span> <span class="c1">// 补偿径向缩放</span>
</span><span class='line'><span class="k">float</span> <span class="n">fence</span> <span class="o">=</span> <span class="n">step</span><span class="p">(</span> <span class="mf">0.5</span> <span class="o">-</span> <span class="n">adjustedWidth</span><span class="p">,</span> <span class="n">fract</span><span class="p">(</span><span class="n">theta</span> <span class="o">*</span> <span class="mf">10.0</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来，我们不仅需要限制内半径，还需要限制外半径，以创建一个环，而不是无限延伸的光线。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="c1">// 将波浪蒙版均匀地涂抹在进度条上</span>
</span><span class='line'><span class="k">float</span> <span class="n">barRadius</span> <span class="o">=</span> <span class="mf">0.3</span><span class="p">;</span>
</span><span class='line'><span class="k">float</span> <span class="n">barMask</span> <span class="o">=</span> <span class="n">smoothstep</span><span class="p">(</span><span class="n">barRadius</span><span class="o">+</span><span class="mf">0.01</span><span class="p">,</span> <span class="n">barRadius</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>总的来说，此时它看起来应该像这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="k">vec4</span> <span class="n">main</span><span class="p">(</span><span class="n">float2</span> <span class="n">fragCoord</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">float2</span> <span class="n">uv</span> <span class="o">=</span> <span class="n">fragCoord</span> <span class="o">/</span> <span class="n">resolution</span> <span class="o">-</span> <span class="mf">0.5</span><span class="p">;</span> <span class="c1">// 归一化坐标</span>
</span><span class='line'>    <span class="n">uv</span><span class="p">.</span><span class="n">x</span> <span class="o">*=</span> <span class="n">resolution</span><span class="p">.</span><span class="n">x</span> <span class="o">/</span> <span class="n">resolution</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">float</span> <span class="n">width</span> <span class="o">=</span> <span class="mf">0.02</span><span class="p">;</span> <span class="c1">// 进度条宽度</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 转化为极坐标</span>
</span><span class='line'>    <span class="k">vec2</span> <span class="n">polar</span> <span class="o">=</span> <span class="n">cartesianToPolar</span><span class="p">(</span><span class="n">uv</span><span class="p">);</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">r</span> <span class="o">=</span> <span class="n">polar</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 半径</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">theta</span> <span class="o">=</span> <span class="n">polar</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 角度</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">innerMask</span> <span class="o">=</span> <span class="n">step</span><span class="p">(</span><span class="mf">0.3</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 宽度已调整的进度条</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">adjustedWidth</span> <span class="o">=</span> <span class="n">width</span> <span class="o">/</span> <span class="n">max</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="mf">0.001</span><span class="p">);</span> <span class="c1">// 补偿径向缩放</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">fence</span> <span class="o">=</span> <span class="n">step</span><span class="p">(</span> <span class="mf">0.5</span> <span class="o">-</span> <span class="n">adjustedWidth</span><span class="p">,</span> <span class="n">fract</span><span class="p">(</span><span class="n">theta</span> <span class="o">*</span> <span class="mf">10.0</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 将波浪蒙版均匀地涂抹在进度条上</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">barRadius</span> <span class="o">=</span> <span class="mf">0.3</span><span class="p">;</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">barMask</span> <span class="o">=</span> <span class="n">smoothstep</span><span class="p">(</span><span class="n">barRadius</span><span class="o">+</span><span class="mf">0.01</span><span class="p">,</span> <span class="n">barRadius</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 结合进度条和内层蒙版</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">combinedMask</span> <span class="o">=</span> <span class="n">barMask</span> <span class="o">*</span> <span class="n">fence</span> <span class="o">*</span> <span class="n">innerMask</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">vec3</span> <span class="n">col</span> <span class="o">=</span> <span class="k">vec3</span><span class="p">(</span><span class="mf">1.0</span><span class="p">)</span> <span class="o">*</span> <span class="n">combinedMask</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="k">vec4</span><span class="p">(</span><span class="n">col</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://miro.medium.com/v2/resize:fit:1288/1*B_VJQme_vnEdXq0pEmfLZg.png" alt="" /></p>

<p>最后一步是根据 <code>percentage</code> 的值增加列的大小。这里需要注意的是，角度 <code>theta</code> 的当前范围是从 <code>-Pi</code> 到 <code>Pi</code>，因此需要对其进行归一化，即将其转换为从 <code>0</code> 到 <code>1</code> 的范围。这样可以更容易地将其与 <code>percentage</code> 的值对齐，因为 <code>percentage</code> 的值也是从 <code>0</code> 到 <code>1</code> 变化的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="c1">// 还将其移动，使零位于顶部而不是左侧</span>
</span><span class='line'><span class="k">float</span> <span class="n">normalizedAngle</span> <span class="o">=</span> <span class="n">mod</span><span class="p">((</span><span class="n">theta</span> <span class="o">+</span> <span class="mf">1.57079632679</span><span class="p">)</span> <span class="o">/</span> <span class="mf">6.28318530718</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在我们可以为“wave”应用另一个蒙版，它将取决于 <code>percentage</code> 变量的当前值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="c1">// 计算条形中心的波浪蒙版</span>
</span><span class='line'><span class="k">float</span> <span class="n">wave</span> <span class="o">=</span> <span class="n">smoothstep</span><span class="p">(</span><span class="n">fixPercentage</span><span class="p">,</span> <span class="n">fixPercentage</span> <span class="o">-</span> <span class="mf">0.1</span><span class="p">,</span> <span class="n">centerNormalizedAngle</span><span class="p">);</span>
</span><span class='line'><span class="k">float</span> <span class="n">waveMask</span> <span class="o">=</span> <span class="n">smoothstep</span><span class="p">(</span><span class="mf">0.32</span> <span class="o">+</span> <span class="mf">0.1</span> <span class="o">*</span> <span class="n">wave</span><span class="p">,</span> <span class="mf">0.31</span> <span class="o">+</span> <span class="mf">0.1</span> <span class="o">*</span> <span class="n">wave</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们还需要将这个波浪的值添加到 <code>barRadius</code> 中，并在最后将整体遮罩乘以 <code>waveMask</code>。此外，我将最终 Alpha 值的常量值替换为组合遮罩的值。这样，我们现在得到了一个几乎完整的效果。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="c1">// 其余代码 ...</span>
</span><span class='line'>
</span><span class='line'><span class="k">float</span> <span class="n">barRadius</span> <span class="o">=</span> <span class="mf">0.3</span> <span class="o">+</span> <span class="mf">0.1</span> <span class="o">*</span> <span class="n">wave</span><span class="p">;</span> <span class="c1">// 使用波形蒙版设置条形半径</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'><span class="k">float</span> <span class="n">combinedMask</span> <span class="o">=</span> <span class="n">barMask</span> <span class="o">*</span> <span class="n">fence</span> <span class="o">*</span> <span class="n">innerMask</span> <span class="o">*</span> <span class="n">waveMask</span><span class="p">;</span>
</span><span class='line'><span class="k">vec3</span> <span class="n">col</span> <span class="o">=</span> <span class="k">vec3</span><span class="p">(</span><span class="mf">1.0</span><span class="p">)</span> <span class="o">*</span> <span class="n">combinedMask</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="k">vec4</span><span class="p">(</span><span class="n">col</span><span class="p">,</span> <span class="n">combinedMask</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://miro.medium.com/v2/resize:fit:1000/1*ZduMs_yVlmd5r7CxADMpRQ.gif" alt="" /></p>

<p>我想在本节中添加的最后一点是稍微优化一下蒙版。你可能已经注意到，每个列的左右边缘半径不同，但我希望它们的高度一致。这样可以使效果看起来更简洁一些。以下是实现方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="c1">// 在每个条形的中心采样波形蒙版</span>
</span><span class='line'><span class="k">float</span> <span class="n">barIndex</span> <span class="o">=</span> <span class="n">floor</span><span class="p">(</span><span class="n">theta</span> <span class="o">*</span> <span class="mf">10.0</span><span class="p">);</span> <span class="c1">// 确定条的索引</span>
</span><span class='line'><span class="k">float</span> <span class="n">centerTheta</span> <span class="o">=</span> <span class="p">(</span><span class="n">barIndex</span> <span class="o">+</span> <span class="mf">0.5</span><span class="p">)</span> <span class="o">/</span> <span class="mf">10.0</span><span class="p">;</span> <span class="c1">// 条的中心角</span>
</span><span class='line'><span class="k">float</span> <span class="n">centerNormalizedAngle</span> <span class="o">=</span> <span class="n">mod</span><span class="p">((</span><span class="n">centerTheta</span> <span class="o">+</span> <span class="mf">1.57079632679</span><span class="p">)</span> <span class="o">/</span> <span class="mf">6.28318530718</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 计算条形中心的波浪蒙版</span>
</span><span class='line'><span class="k">float</span> <span class="n">wave</span> <span class="o">=</span> <span class="n">smoothstep</span><span class="p">(</span><span class="n">fixPercentage</span><span class="p">,</span> <span class="n">fixPercentage</span> <span class="o">-</span> <span class="mf">0.1</span><span class="p">,</span> <span class="n">centerNormalizedAngle</span><span class="p">);</span>
</span><span class='line'><span class="k">float</span> <span class="n">waveMask</span> <span class="o">=</span> <span class="n">smoothstep</span><span class="p">(</span><span class="mf">0.32</span> <span class="o">+</span> <span class="mf">0.1</span> <span class="o">*</span> <span class="n">wave</span><span class="p">,</span> <span class="mf">0.31</span> <span class="o">+</span> <span class="mf">0.1</span> <span class="o">*</span> <span class="n">wave</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>总的来说，核心效果现在已经完成。然而，在着色器中，通常情况下，99% 复杂而有趣的工作构成了效果的基础，但单独来看，效果可能看起来简单平淡。正是这最后的 1% 的润色，才能彻底改变一切！</p>

<p>让我们为着色器添加一个渐变。我使用了最简单的一个，它在 <a href="http://shadertoy.com/">ShaderToy</a> （链接：<a href="http://shadertoy.com/%EF%BC%89%E4%B8%AD%E5%90%AF%E5%8A%A8%E6%96%B0%E9%A1%B9%E7%9B%AE%E6%97%B6%E9%BB%98%E8%AE%A4%E5%88%9B%E5%BB%BA%EF%BC%88%E4%BD%A0%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE%E7%BD%91%E7%AB%99%E5%B9%B6%E7%82%B9%E5%87%BB%E5%8F%B3%E4%B8%8A%E8%A7%92%E7%9A%84%E2%80%9C%E6%96%B0%E5%BB%BA%E2%80%9D%E6%8C%89%E9%92%AE%E6%9F%A5%E7%9C%8B%EF%BC%89%E3%80%82%E6%88%91%E6%8A%8A%E5%AE%83%E7%A7%BB%E5%88%B0%E4%BA%86%E4%B8%80%E4%B8%AA%E5%8D%95%E7%8B%AC%E7%9A%84%E6%96%B9%E6%B3%95%E4%B8%AD%EF%BC%8C%E5%B9%B6%E5%B0%86%E5%85%B6%E5%91%BD%E5%90%8D%E4%B8%BA">http://shadertoy.com/%EF%BC%89%E4%B8%AD%E5%90%AF%E5%8A%A8%E6%96%B0%E9%A1%B9%E7%9B%AE%E6%97%B6%E9%BB%98%E8%AE%A4%E5%88%9B%E5%BB%BA%EF%BC%88%E4%BD%A0%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE%E7%BD%91%E7%AB%99%E5%B9%B6%E7%82%B9%E5%87%BB%E5%8F%B3%E4%B8%8A%E8%A7%92%E7%9A%84%E2%80%9C%E6%96%B0%E5%BB%BA%E2%80%9D%E6%8C%89%E9%92%AE%E6%9F%A5%E7%9C%8B%EF%BC%89%E3%80%82%E6%88%91%E6%8A%8A%E5%AE%83%E7%A7%BB%E5%88%B0%E4%BA%86%E4%B8%80%E4%B8%AA%E5%8D%95%E7%8B%AC%E7%9A%84%E6%96%B9%E6%B3%95%E4%B8%AD%EF%BC%8C%E5%B9%B6%E5%B0%86%E5%85%B6%E5%91%BD%E5%90%8D%E4%B8%BA</a> <code>gradient</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'> <span class="k">vec3</span> <span class="n">gradient</span><span class="p">(</span><span class="k">vec2</span> <span class="n">uv</span><span class="p">,</span> <span class="k">float</span> <span class="n">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mf">0.5</span> <span class="o">+</span> <span class="mf">0.5</span> <span class="o">*</span> <span class="n">cos</span><span class="p">(</span><span class="n">t</span> <span class="o">+</span> <span class="n">uv</span><span class="p">.</span><span class="n">xyx</span> <span class="o">+</span> <span class="k">vec3</span><span class="p">(</span><span class="mo">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">));</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在，我不再将最终颜色乘以 <code>vec3(1.)</code>（即白色），而是将其乘以我们刚刚创建的渐变。此外，我还对其余区域应用了相同的渐变，但 Alpha 值非常低，这为整个屏幕增添了微妙的辉光。</p>

<blockquote><p>请注意，要看到这个效果，我们还必须从 Compose 代码中传递 <code>time</code>。</p></blockquote>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/1*DXGRdfXQ67eQG7UMnMy8lw.png" alt="" /></p>

<p>现在，让我们转到项目的可组合部分，并在文本变化时添加动画和模糊效果。我不会详细介绍这一点，因为这超出了本课的范围。但是，如果本教程完全不包含代码，感觉不太对劲。所以，以下是可组合部分（包含时间更新和文本动画）的最终版本：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">TimerShaderScreen</span><span class="p">(</span><span class="n">paddingValues</span><span class="p">:</span> <span class="n">PaddingValues</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">startValue</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="m">20</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">percentage</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableFloatStateOf</span><span class="p">(</span><span class="m">0.0f</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">isRunning</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="k">false</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">shader</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">RuntimeShader</span><span class="p">(</span><span class="n">circularTimerShader</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="py">time</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="m">0f</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">LaunchedEffect</span><span class="p">(</span><span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="k">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">time</span> <span class="p">+=</span> <span class="m">0.01f</span>
</span><span class='line'>            <span class="n">delay</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">seconds</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="n">startValue</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">isRunning</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">startTime</span> <span class="p">=</span> <span class="n">System</span><span class="p">.</span><span class="n">currentTimeMillis</span><span class="p">()</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">isRunning</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">seconds</span><span class="p">.</span><span class="n">value</span> <span class="p">&lt;</span> <span class="m">0</span><span class="p">)</span> <span class="p">{</span> <span class="n">isRunning</span> <span class="p">=</span> <span class="k">false</span> <span class="p">}</span> <span class="c1">// 时间到时停止倒计时</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">val</span> <span class="py">elapsedTime</span> <span class="p">=</span> <span class="n">System</span><span class="p">.</span><span class="n">currentTimeMillis</span><span class="p">()</span> <span class="p">-</span> <span class="n">startTime</span> <span class="c1">// 已用时间（单位是毫秒）</span>
</span><span class='line'>            <span class="n">percentage</span> <span class="p">=</span> <span class="p">(</span><span class="n">elapsedTime</span> <span class="p">/</span> <span class="m">1000f</span><span class="p">)</span> <span class="p">/</span> <span class="n">startValue</span> <span class="c1">// 将经过的时间归一化为[0,1]</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// 将百分比限制在 [0, 1] 之间以避免过冲</span>
</span><span class='line'>            <span class="n">percentage</span> <span class="p">=</span> <span class="n">percentage</span><span class="p">.</span><span class="n">coerceIn</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="m">1f</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// 计算剩余秒数</span>
</span><span class='line'>            <span class="n">seconds</span><span class="p">.</span><span class="n">value</span> <span class="p">=</span> <span class="p">((</span><span class="n">startValue</span> <span class="p">-</span> <span class="p">(</span><span class="n">elapsedTime</span> <span class="p">/</span> <span class="m">1000f</span><span class="p">))).</span><span class="n">toInt</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">delay</span><span class="p">(</span><span class="m">10</span><span class="p">)</span> <span class="c1">// 延迟以控制更新频率</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Column</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">fillMaxSize</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="n">paddingValues</span><span class="p">),</span>
</span><span class='line'>        <span class="n">verticalArrangement</span> <span class="p">=</span> <span class="n">Arrangement</span><span class="p">.</span><span class="n">Center</span><span class="p">,</span>
</span><span class='line'>        <span class="n">horizontalAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">CenterHorizontally</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">OutlinedTextField</span><span class="p">(</span>
</span><span class='line'>            <span class="n">value</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">startValue</span> <span class="p">!=</span> <span class="m">0</span><span class="p">)</span> <span class="n">startValue</span><span class="p">.</span><span class="n">toString</span><span class="p">()</span> <span class="k">else</span> <span class="s">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">onValueChange</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">startValue</span> <span class="p">=</span> <span class="n">it</span><span class="p">.</span><span class="n">toIntOrNull</span><span class="p">()</span> <span class="o">?:</span> <span class="m">0</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="n">label</span> <span class="p">=</span> <span class="p">{</span> <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Start value&quot;</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">width</span><span class="p">(</span><span class="m">200.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>        <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">250.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>            <span class="n">contentAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">Center</span>
</span><span class='line'>        <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>                <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">250.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">onSizeChanged</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">shader</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span><span class="s">&quot;resolution&quot;</span><span class="p">,</span> <span class="n">it</span><span class="p">.</span><span class="n">width</span><span class="p">.</span><span class="n">toFloat</span><span class="p">(),</span> <span class="n">it</span><span class="p">.</span><span class="n">height</span><span class="p">.</span><span class="n">toFloat</span><span class="p">())</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">graphicsLayer</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">shader</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span><span class="s">&quot;percentage&quot;</span><span class="p">,</span> <span class="n">percentage</span><span class="p">)</span>
</span><span class='line'>                        <span class="n">shader</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span><span class="s">&quot;time&quot;</span><span class="p">,</span> <span class="n">time</span><span class="p">)</span>
</span><span class='line'>                        <span class="n">renderEffect</span> <span class="p">=</span> <span class="n">RenderEffect</span><span class="p">.</span><span class="n">createRuntimeShaderEffect</span><span class="p">(</span><span class="n">shader</span><span class="p">,</span> <span class="s">&quot;image&quot;</span><span class="p">).</span><span class="n">asComposeRenderEffect</span><span class="p">()</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Black</span><span class="p">),</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>            <span class="k">var</span> <span class="py">previousSeconds</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="n">seconds</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">coerceAtLeast</span><span class="p">(</span><span class="m">0</span><span class="p">))</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">AnimatedContent</span><span class="p">(</span>
</span><span class='line'>                <span class="n">targetState</span> <span class="p">=</span> <span class="n">seconds</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">coerceAtLeast</span><span class="p">(</span><span class="m">0</span><span class="p">),</span>
</span><span class='line'>                <span class="n">transitionSpec</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                    <span class="p">(</span><span class="n">slideInVertically</span><span class="p">(</span><span class="n">animationSpec</span> <span class="p">=</span> <span class="n">tween</span><span class="p">(</span><span class="m">500</span><span class="p">))</span> <span class="p">{</span> <span class="n">height</span> <span class="p">-&gt;</span> <span class="p">-</span><span class="n">height</span> <span class="p">}</span> <span class="p">+</span> <span class="n">fadeIn</span><span class="p">(</span>
</span><span class='line'>                        <span class="n">animationSpec</span> <span class="p">=</span> <span class="n">tween</span><span class="p">(</span>
</span><span class='line'>                            <span class="m">500</span>
</span><span class='line'>                        <span class="p">)</span>
</span><span class='line'>                    <span class="p">))</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">togetherWith</span><span class="p">(</span><span class="n">slideOutVertically</span><span class="p">(</span><span class="n">animationSpec</span> <span class="p">=</span> <span class="n">tween</span><span class="p">(</span><span class="m">500</span><span class="p">))</span> <span class="p">{</span> <span class="n">height</span> <span class="p">-&gt;</span> <span class="n">height</span> <span class="p">}</span> <span class="p">+</span> <span class="n">fadeOut</span><span class="p">(</span>
</span><span class='line'>                            <span class="n">tween</span><span class="p">(</span><span class="m">500</span><span class="p">)</span>
</span><span class='line'>                        <span class="p">))</span>
</span><span class='line'>                <span class="p">},</span>
</span><span class='line'>                <span class="n">label</span> <span class="p">=</span> <span class="s">&quot;CountdownAnimation&quot;</span>
</span><span class='line'>            <span class="p">)</span> <span class="p">{</span> <span class="n">targetSeconds</span> <span class="p">-&gt;</span>
</span><span class='line'>                <span class="c1">// 检测是否正在转换</span>
</span><span class='line'>                <span class="k">val</span> <span class="py">isTransitioning</span> <span class="p">=</span> <span class="n">targetSeconds</span> <span class="p">!=</span> <span class="n">previousSeconds</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// 过渡期间模糊动画</span>
</span><span class='line'>                <span class="k">val</span> <span class="py">blurRadius</span> <span class="k">by</span> <span class="n">animateFloatAsState</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">targetValue</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">isTransitioning</span><span class="p">)</span> <span class="m">30f</span> <span class="k">else</span> <span class="m">0f</span><span class="p">,</span> <span class="c1">// 过渡时模糊</span>
</span><span class='line'>                    <span class="n">animationSpec</span> <span class="p">=</span> <span class="n">tween</span><span class="p">(</span><span class="n">durationMillis</span> <span class="p">=</span> <span class="m">500</span><span class="p">)</span> <span class="c1">// 匹配过渡持续时间</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// 转换完成后更新 previousSeconds</span>
</span><span class='line'>                <span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">targetSeconds</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">previousSeconds</span> <span class="p">=</span> <span class="n">targetSeconds</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">Text</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">fillMaxWidth</span><span class="p">()</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">graphicsLayer</span> <span class="p">{</span>
</span><span class='line'>                            <span class="c1">// 应用动画模糊效果</span>
</span><span class='line'>                            <span class="n">renderEffect</span> <span class="p">=</span> <span class="n">RenderEffect</span><span class="p">.</span><span class="n">createBlurEffect</span><span class="p">(</span>
</span><span class='line'>                                <span class="n">blurRadius</span><span class="p">,</span> <span class="n">blurRadius</span><span class="p">,</span> <span class="n">android</span><span class="p">.</span><span class="n">graphics</span><span class="p">.</span><span class="n">Shader</span><span class="p">.</span><span class="n">TileMode</span><span class="p">.</span><span class="n">CLAMP</span>
</span><span class='line'>                            <span class="p">).</span><span class="n">asComposeRenderEffect</span><span class="p">()</span>
</span><span class='line'>                        <span class="p">},</span>
</span><span class='line'>                    <span class="n">textAlign</span> <span class="p">=</span> <span class="n">androidx</span><span class="p">.</span><span class="n">compose</span><span class="p">.</span><span class="n">ui</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="n">style</span><span class="p">.</span><span class="n">TextAlign</span><span class="p">.</span><span class="n">Center</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">text</span> <span class="p">=</span> <span class="n">targetSeconds</span><span class="p">.</span><span class="n">toString</span><span class="p">(),</span>
</span><span class='line'>                    <span class="n">fontSize</span> <span class="p">=</span> <span class="m">50.</span><span class="n">sp</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">fontWeight</span> <span class="p">=</span> <span class="n">androidx</span><span class="p">.</span><span class="n">compose</span><span class="p">.</span><span class="n">ui</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="n">font</span><span class="p">.</span><span class="n">FontWeight</span><span class="p">.</span><span class="n">Thin</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">White</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">OutlinedButton</span><span class="p">(</span>
</span><span class='line'>            <span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span> <span class="n">isRunning</span> <span class="p">=</span> <span class="p">!</span><span class="n">isRunning</span> <span class="p">},</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="n">top</span> <span class="p">=</span> <span class="m">16.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Text</span><span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="n">isRunning</span><span class="p">)</span> <span class="s">&quot;Stop&quot;</span> <span class="k">else</span> <span class="s">&quot;Start&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以及最终的着色器代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="k">uniform</span> <span class="k">float</span> <span class="n">time</span><span class="p">;</span>
</span><span class='line'><span class="k">uniform</span> <span class="k">float</span> <span class="n">percentage</span><span class="p">;</span>
</span><span class='line'><span class="k">uniform</span> <span class="k">vec2</span> <span class="n">resolution</span><span class="p">;</span>
</span><span class='line'><span class="k">uniform</span> <span class="n">shader</span> <span class="n">image</span><span class="p">;</span><span class="k">vec2</span> <span class="n">cartesianToPolar</span><span class="p">(</span><span class="k">vec2</span> <span class="n">uv</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">r</span> <span class="o">=</span> <span class="n">length</span><span class="p">(</span><span class="n">uv</span><span class="p">);</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">theta</span> <span class="o">=</span> <span class="n">atan</span><span class="p">(</span><span class="n">uv</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="n">uv</span><span class="p">.</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">vec2</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">theta</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span><span class="k">vec3</span> <span class="n">gradient</span><span class="p">(</span><span class="k">vec2</span> <span class="n">uv</span><span class="p">,</span> <span class="k">float</span> <span class="n">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="mf">0.5</span> <span class="o">+</span> <span class="mf">0.5</span> <span class="o">*</span> <span class="n">cos</span><span class="p">(</span><span class="n">t</span> <span class="o">+</span> <span class="n">uv</span><span class="p">.</span><span class="n">xyx</span> <span class="o">+</span> <span class="k">vec3</span><span class="p">(</span><span class="mo">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span><span class="k">vec4</span> <span class="n">main</span><span class="p">(</span><span class="n">float2</span> <span class="n">fragCoord</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">float2</span> <span class="n">uv</span> <span class="o">=</span> <span class="n">fragCoord</span> <span class="o">/</span> <span class="n">resolution</span> <span class="o">-</span> <span class="mf">0.5</span><span class="p">;</span> <span class="c1">// 归一化坐标</span>
</span><span class='line'>    <span class="n">uv</span><span class="p">.</span><span class="n">x</span> <span class="o">*=</span> <span class="n">resolution</span><span class="p">.</span><span class="n">x</span> <span class="o">/</span> <span class="n">resolution</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">float</span> <span class="n">width</span> <span class="o">=</span> <span class="mf">0.02</span><span class="p">;</span> <span class="c1">// 条形宽度</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 转换为极坐标</span>
</span><span class='line'>    <span class="k">vec2</span> <span class="n">polar</span> <span class="o">=</span> <span class="n">cartesianToPolar</span><span class="p">(</span><span class="n">uv</span><span class="p">);</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">r</span> <span class="o">=</span> <span class="n">polar</span><span class="p">.</span><span class="n">x</span><span class="p">;</span> <span class="c1">// 半径</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">float</span> <span class="n">theta</span> <span class="o">=</span> <span class="n">polar</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>    <span class="c1">// 角度</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">float</span> <span class="n">innerMask</span> <span class="o">=</span> <span class="n">step</span><span class="p">(</span><span class="mf">0.3</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 将顶部设为零，使角度标准化</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">normalizedAngle</span> <span class="o">=</span> <span class="n">mod</span><span class="p">((</span><span class="n">theta</span> <span class="o">+</span> <span class="mf">1.57079632679</span><span class="p">)</span> <span class="o">/</span> <span class="mf">6.28318530718</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 固定百分比补偿</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">fixPercentage</span> <span class="o">=</span> <span class="n">percentage</span> <span class="o">+</span> <span class="n">percentage</span> <span class="o">*</span> <span class="mf">0.1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 在每个条形的中心采样波形蒙板</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">barIndex</span> <span class="o">=</span> <span class="n">floor</span><span class="p">(</span><span class="n">theta</span> <span class="o">*</span> <span class="mf">10.0</span><span class="p">);</span> <span class="c1">// 确定条的索引</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">centerTheta</span> <span class="o">=</span> <span class="p">(</span><span class="n">barIndex</span> <span class="o">+</span> <span class="mf">0.5</span><span class="p">)</span> <span class="o">/</span> <span class="mf">10.0</span><span class="p">;</span> <span class="c1">// 条的中心角</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">centerNormalizedAngle</span> <span class="o">=</span> <span class="n">mod</span><span class="p">((</span><span class="n">centerTheta</span> <span class="o">+</span> <span class="mf">1.57079632679</span><span class="p">)</span> <span class="o">/</span> <span class="mf">6.28318530718</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 计算条形中心的波浪蒙板</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">wave</span> <span class="o">=</span> <span class="n">smoothstep</span><span class="p">(</span><span class="n">fixPercentage</span><span class="p">,</span> <span class="n">fixPercentage</span> <span class="o">-</span> <span class="mf">0.1</span><span class="p">,</span> <span class="n">centerNormalizedAngle</span><span class="p">);</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">waveMask</span> <span class="o">=</span> <span class="n">smoothstep</span><span class="p">(</span><span class="mf">0.32</span> <span class="o">+</span> <span class="mf">0.1</span> <span class="o">*</span> <span class="n">wave</span><span class="p">,</span> <span class="mf">0.31</span> <span class="o">+</span> <span class="mf">0.1</span> <span class="o">*</span> <span class="n">wave</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 宽度已调整的条形图案</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">adjustedWidth</span> <span class="o">=</span> <span class="n">width</span> <span class="o">/</span> <span class="n">max</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="mf">0.001</span><span class="p">);</span> <span class="c1">// 补偿径向缩放</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">fence</span> <span class="o">=</span> <span class="n">step</span><span class="p">(</span> <span class="mf">0.5</span> <span class="o">-</span> <span class="n">adjustedWidth</span><span class="p">,</span> <span class="n">fract</span><span class="p">(</span><span class="n">theta</span> <span class="o">*</span> <span class="mf">10.0</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 将波浪蒙版均匀地涂抹在吧台上</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">barRadius</span> <span class="o">=</span> <span class="mf">0.3</span> <span class="o">+</span> <span class="mf">0.1</span> <span class="o">*</span> <span class="n">wave</span><span class="p">;</span> <span class="c1">// 使用波形蒙版设置条形半径</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">barMask</span> <span class="o">=</span> <span class="n">smoothstep</span><span class="p">(</span><span class="n">barRadius</span><span class="o">+</span><span class="mf">0.01</span><span class="p">,</span> <span class="n">barRadius</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 结合条形和内层蒙版</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">combinedMask</span> <span class="o">=</span> <span class="n">barMask</span> <span class="o">*</span> <span class="n">fence</span> <span class="o">*</span> <span class="n">innerMask</span> <span class="o">*</span> <span class="n">waveMask</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">vec3</span> <span class="n">grad</span> <span class="o">=</span> <span class="n">gradient</span><span class="p">(</span><span class="n">uv</span><span class="p">,</span> <span class="n">time</span><span class="p">);</span>
</span><span class='line'>    <span class="k">vec3</span> <span class="n">col</span> <span class="o">=</span> <span class="n">grad</span> <span class="o">*</span> <span class="n">combinedMask</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="k">vec4</span><span class="p">(</span><span class="n">col</span> <span class="o">+</span> <span class="n">grad</span> <span class="o">*</span> <span class="mf">0.1</span><span class="p">,</span> <span class="n">combinedMask</span> <span class="o">+</span> <span class="n">length</span><span class="p">(</span><span class="n">uv</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>感谢阅读！如果你觉得我的实验有趣且讲解有帮助，欢迎加入我的<a href="https://t.me/droidshaderworks">Telegram频道</a>或在<a href="https://x.com/KrowaNaMostku">Twitter (X)</a>上关注我。你的支持意义重大，并激励着我。祝你撸码愉快！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Compose中的Shader实现一个雪花飘飘弹窗效果]]></title>
    <link href="https://alexhilton.github.io/blog/2025/08/17/snow-dialog-shader/"/>
    <updated>2025-08-17T22:02:24+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/08/17/snow-dialog-shader</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自「Snow Dialog Shader Tutorial」，原文链接<a href="https://medium.com/@off.mind.by/snow-dialog-shader-tutorial-dde1b4a61e20">https://medium.com/@off.mind.by/snow-dialog-shader-tutorial-dde1b4a61e20</a>，由Alex Volkov发布于2024年12月27日。</p></blockquote>

<p><a href="https://alexhilton.github.io/blog/2025/08/17/snow-dialog-shader/"><img src="https://miro.medium.com/v2/resize:fit:2000/1*oNN6ZtalbQEvYCpTx8gLWg.png" title="auto auto" ></a></p>

<!-- more -->


<p>大家好！在本教程中，我将向大家展示如何创建雪花覆盖的对话框效果。总的来说，该效果可以分为三个部分。</p>

<ol>
<li><strong>设置 Compose 代码</strong>：这确保了基础效果的实现。</li>
<li><strong>创建对话框底部积雪的着色器</strong>：这是我在今天教程中重点讲解的核心效果。</li>
<li><strong>添加飘落的雪花</strong>：为此，我在 ShaderToy 上找到了一个现成的着色器，并对其进行了一些优化，使其不会对手机性能造成太大负担。第三部分将包含原始着色器的链接以及一些优化说明。</li>
</ol>


<p>本教程主要讲解如何为对话框创建不断增长的雪盖效果。</p>

<p>最终效果如下：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:804/1*SRa57BglcDzpLzAAw1UAPw.gif" alt="最终效果" /></p>

<blockquote><p>在深入探讨之前，我想提醒你，我并没有为所有效果创建教程。不过，所有效果都可以在我的 <a href="https://github.com/AleksiejVolkov/runtimeshaders">GitHub</a> （链接：<a href="https://github.com/AleksiejVolkov/runtimeshaders%EF%BC%89%E4%B8%8A%E6%89%BE%E5%88%B0%E3%80%82%E4%BD%A0%E8%BF%98%E5%8F%AF%E4%BB%A5%E5%9C%A8%E6%88%91%E7%9A%84">https://github.com/AleksiejVolkov/runtimeshaders%EF%BC%89%E4%B8%8A%E6%89%BE%E5%88%B0%E3%80%82%E4%BD%A0%E8%BF%98%E5%8F%AF%E4%BB%A5%E5%9C%A8%E6%88%91%E7%9A%84</a> <a href="https://t.me/droidshaderworks">Telegram 频道</a> （链接：<a href="https://t.me/droidshaderworks%EF%BC%89%E4%B8%AD%E6%89%BE%E5%88%B0%E8%A7%86%E9%A2%91%E3%80%81%E6%96%B0%E6%95%88%E6%9E%9C%E5%85%AC%E5%91%8A%E4%BB%A5%E5%8F%8A%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E7%AD%94%E3%80%82%E6%9C%9F%E5%BE%85%E5%9C%A8%E9%82%A3%E9%87%8C%E8%A7%81%E5%88%B0%E4%BD%A0%EF%BC%81">https://t.me/droidshaderworks%EF%BC%89%E4%B8%AD%E6%89%BE%E5%88%B0%E8%A7%86%E9%A2%91%E3%80%81%E6%96%B0%E6%95%88%E6%9E%9C%E5%85%AC%E5%91%8A%E4%BB%A5%E5%8F%8A%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E7%AD%94%E3%80%82%E6%9C%9F%E5%BE%85%E5%9C%A8%E9%82%A3%E9%87%8C%E8%A7%81%E5%88%B0%E4%BD%A0%EF%BC%81</a></p></blockquote>

<p>让我们从 Compose 中为效果设置一个最小页面开始。它包含一张背景图片和一个位于中心的按钮，用于触发对话框。</p>

<p>需要注意的是，对话框不应来自 Material 库，而应使用 Compose 中最基本的“AlertDialog”。</p>

<p>以下是最低配置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">SnowDialogScreen</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">showDialog</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="k">false</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">(),</span>
</span><span class='line'>        <span class="n">contentAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">Center</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Image</span><span class="p">(</span>
</span><span class='line'>            <span class="n">painter</span> <span class="p">=</span> <span class="n">painterResource</span><span class="p">(</span><span class="n">id</span> <span class="p">=</span> <span class="n">R</span><span class="p">.</span><span class="n">drawable</span><span class="p">.</span><span class="n">christmas_night</span><span class="p">),</span>
</span><span class='line'>            <span class="n">contentDescription</span> <span class="p">=</span> <span class="s">&quot;Sample Image&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">contentScale</span> <span class="p">=</span> <span class="n">ContentScale</span><span class="p">.</span><span class="n">Crop</span><span class="p">,</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">()</span>
</span><span class='line'>        <span class="p">)</span>        <span class="k">if</span> <span class="p">(!</span><span class="n">showDialog</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Button</span><span class="p">(</span><span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span> <span class="n">showDialog</span> <span class="p">=</span> <span class="k">true</span> <span class="p">})</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Ho-ho-ho!&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">SnowedDialog</span> <span class="p">{</span> <span class="n">showDialog</span> <span class="p">=</span> <span class="k">false</span> <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">SnowedDialog</span><span class="p">(</span><span class="n">onDismiss</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">BasicAlertDialog</span><span class="p">(</span>
</span><span class='line'>        <span class="n">onDismissRequest</span> <span class="p">=</span> <span class="p">{</span> <span class="n">onDismiss</span><span class="p">()</span> <span class="p">},</span>
</span><span class='line'>        <span class="n">properties</span> <span class="p">=</span> <span class="n">DialogProperties</span><span class="p">(</span><span class="n">usePlatformDefaultWidth</span> <span class="p">=</span> <span class="k">false</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Column</span><span class="p">(</span>
</span><span class='line'>            <span class="n">Modifier</span>
</span><span class='line'>                <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="n">horizontal</span> <span class="p">=</span> <span class="m">16.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">shape</span> <span class="p">=</span> <span class="n">MaterialTheme</span><span class="p">.</span><span class="n">shapes</span><span class="p">.</span><span class="n">large</span><span class="p">,</span>
</span><span class='line'>                            <span class="n">color</span> <span class="p">=</span> <span class="n">MaterialTheme</span><span class="p">.</span><span class="n">colorScheme</span><span class="p">.</span><span class="n">surface</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">16.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>        <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Merry Christmas!&quot;</span><span class="p">,</span> <span class="n">style</span> <span class="p">=</span> <span class="n">MaterialTheme</span><span class="p">.</span><span class="n">typography</span><span class="p">.</span><span class="n">titleLarge</span><span class="p">)</span>
</span><span class='line'>            <span class="n">Spacer</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">height</span><span class="p">(</span><span class="m">10.</span><span class="n">dp</span><span class="p">))</span>
</span><span class='line'>            <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Happy New Year!&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">Spacer</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">height</span><span class="p">(</span><span class="m">26.</span><span class="n">dp</span><span class="p">))</span>
</span><span class='line'>            <span class="n">Row</span><span class="p">(</span>
</span><span class='line'>                <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">fillMaxWidth</span><span class="p">(),</span>
</span><span class='line'>                <span class="n">horizontalArrangement</span> <span class="p">=</span> <span class="n">Arrangement</span><span class="p">.</span><span class="n">End</span>
</span><span class='line'>            <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">Text</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">clickable</span> <span class="p">{</span> <span class="n">onDismiss</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">5.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>                    <span class="n">text</span> <span class="p">=</span> <span class="s">&quot;Close&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">style</span> <span class="p">=</span> <span class="n">MaterialTheme</span><span class="p">.</span><span class="n">typography</span><span class="p">.</span><span class="n">bodyMedium</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="n">color</span> <span class="p">=</span> <span class="n">MaterialTheme</span><span class="p">.</span><span class="n">colorScheme</span><span class="p">.</span><span class="n">primary</span><span class="p">)</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最终，你应该得到类似这样的效果：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/1*fnlF56ZxRxMwa7vHkCOudA.png" alt="颜色可能会有所不同，此外观已针对暗黑模式进行了调整" /></p>

<p>现在我们可以开始编写着色器了！我将简要介绍如何设置着色器并将其附加到对话框中。有关运行时着色器的更详细介绍和初学者指南，你可以查看我的另一个<a href="https://juejin.cn/post/7535292253813981247">教程</a>。</p>

<p>开始使用着色器所需的最低要求如下所示。在对话框中，我们添加一个 <code>runtimeShader</code>，并使用 <code>graphicsLayer</code> 将其分配给 <code>Column</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">SnowedDialog</span><span class="p">(</span><span class="n">onDismiss</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 从字符串编译我们的着色器</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">snowCapShader</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">RuntimeShader</span><span class="p">(</span><span class="n">snowCapShader</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">BasicAlertDialog</span><span class="p">(</span>
</span><span class='line'>        <span class="n">onDismissRequest</span> <span class="p">=</span> <span class="p">{</span> <span class="n">onDismiss</span><span class="p">()</span> <span class="p">},</span>
</span><span class='line'>        <span class="n">properties</span> <span class="p">=</span> <span class="n">DialogProperties</span><span class="p">(</span><span class="n">usePlatformDefaultWidth</span> <span class="p">=</span> <span class="k">false</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Column</span><span class="p">(</span>
</span><span class='line'>            <span class="n">Modifier</span>
</span><span class='line'>                <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="n">horizontal</span> <span class="p">=</span> <span class="m">16.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">shape</span> <span class="p">=</span> <span class="n">MaterialTheme</span><span class="p">.</span><span class="n">shapes</span><span class="p">.</span><span class="n">large</span><span class="p">,</span> <span class="n">color</span> <span class="p">=</span> <span class="n">MaterialTheme</span><span class="p">.</span><span class="n">colorScheme</span><span class="p">.</span><span class="n">surface</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">onSizeChanged</span> <span class="p">{</span> <span class="n">size</span> <span class="p">-&gt;</span>
</span><span class='line'>                    <span class="c1">// pass resolution</span>
</span><span class='line'>                    <span class="n">snowCapShader</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span>
</span><span class='line'>                        <span class="s">&quot;resolution&quot;</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">.</span><span class="n">toFloat</span><span class="p">(),</span>
</span><span class='line'>                        <span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">.</span><span class="n">toFloat</span><span class="p">()</span>
</span><span class='line'>                    <span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="p">.</span><span class="n">graphicsLayer</span> <span class="p">{</span>
</span><span class='line'>                    <span class="c1">// apply shader </span>
</span><span class='line'>                    <span class="k">this</span><span class="p">.</span><span class="n">renderEffect</span> <span class="p">=</span> <span class="n">RenderEffect</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">createRuntimeShaderEffect</span><span class="p">(</span><span class="n">snowCapShader</span><span class="p">,</span> <span class="s">&quot;image&quot;</span><span class="p">)</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">asComposeRenderEffect</span><span class="p">()</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">16.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>        <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// 其余代码保持不变</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//...</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Language</span><span class="p">(</span><span class="s">&quot;agsl&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="py">snowCapShader</span> <span class="p">=</span> <span class="s">&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">uniform</span> <span class="n">shader</span> <span class="n">image</span><span class="p">;</span>
</span><span class='line'>    <span class="n">uniform</span> <span class="n">vec2</span> <span class="n">resolution</span><span class="p">;</span>
</span><span class='line'>    <span class="n">vec4</span> <span class="n">main</span><span class="p">(</span><span class="n">float2</span> <span class="n">fragCoord</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>         <span class="n">float2</span> <span class="n">uv</span> <span class="p">=</span> <span class="n">fragCoord</span> <span class="p">/</span> <span class="n">resolution</span> <span class="p">-</span> <span class="m">0.5</span><span class="p">;</span>
</span><span class='line'>         <span class="k">if</span><span class="p">(</span><span class="n">abs</span><span class="p">(</span><span class="n">uv</span><span class="p">.</span><span class="n">x</span><span class="p">)&gt;</span><span class="m">0.5</span> <span class="p">||</span> <span class="n">abs</span><span class="p">(</span><span class="n">uv</span><span class="p">.</span><span class="n">y</span><span class="p">)&gt;</span><span class="m">0.5</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>             <span class="k">return</span> <span class="n">vec4</span><span class="p">(</span><span class="m">0.0</span><span class="p">);</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>         <span class="n">float</span> <span class="n">ratio</span> <span class="p">=</span> <span class="n">resolution</span><span class="p">.</span><span class="n">x</span> <span class="p">/</span> <span class="n">resolution</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>         <span class="n">uv</span><span class="p">.</span><span class="n">x</span> <span class="p">*=</span> <span class="n">ratio</span><span class="p">;</span>
</span><span class='line'>         <span class="n">vec4</span> <span class="n">imageColor</span> <span class="p">=</span> <span class="n">image</span><span class="p">.</span><span class="n">eval</span><span class="p">(</span><span class="n">fragCoord</span><span class="p">);</span>
</span><span class='line'>         <span class="k">return</span> <span class="n">vec4</span><span class="p">(</span><span class="n">vec3</span><span class="p">(</span><span class="m">1.0</span><span class="p">),</span> <span class="n">imageColor</span><span class="p">.</span><span class="n">a</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;.trimIndent()</span>
</span></code></pre></td></tr></table></div></figure>


<p>目前，它将显示为一个空白矩形，就像我们的对话框一样：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/1*C5O1IMHS7MvK0lFnIqHFYA.png" alt="" /></p>

<p>在继续之前，让我先尽可能简单地解释一下实现此效果背后的逻辑。我将算法分为四个概念步骤：</p>

<ol>
<li><strong>找到一个函数</strong>来定义雪边缘的轮廓。</li>
<li><strong>在 y 轴上</strong>绘制此函数上方的所有内容**，并将其垂直移向底部边缘。</li>
<li><strong>定义一个遮罩区域</strong>，这意味着在此区域之外，函数将被完全忽略，我们只需绘制着色器从系统接收的内容即可。</li>
<li><strong>修改侧面和顶部的遮罩</strong>，使雪的形状更自然，而底部边缘的轮廓则由我们的函数处理。</li>
</ol>


<p><img src="https://miro.medium.com/v2/resize:fit:1400/1*Vbq5YEL42g1tQsLjWKAokQ.png" alt="" /></p>

<p>现在，让我们在着色器中按顺序实现这些步骤。为简单起见，我选择了一个基本的正弦波作为雪边缘的函数。我添加了一些系数来压缩它并降低其振幅：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="k">float</span> <span class="n">snowEdge</span> <span class="o">=</span> <span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="mf">10.</span><span class="o">*</span><span class="n">uv</span><span class="p">.</span><span class="n">x</span><span class="p">)</span><span class="o">*</span><span class="mf">0.5</span><span class="o">+</span><span class="mf">0.5</span><span class="p">)</span><span class="o">*</span><span class="mf">0.2</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来，我们需要用白色填充此线上方的所有内容，同时忽略其下方的所有内容。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="k">vec4</span> <span class="n">snow</span> <span class="o">=</span> <span class="n">step</span><span class="p">(</span><span class="n">uv</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="n">snowEdge</span><span class="p">)</span><span class="o">*</span><span class="k">vec4</span><span class="p">(</span><span class="mf">1.0</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>通过向 <code>uv.y</code> 添加一个常量，我们可以垂直移动整个函数。</p></blockquote>

<p>最后，我们需要将该方法移近对话框的底部边缘并添加一个遮罩。现在，我们使用一个简单的矩形区域作为遮罩。我们可以通过分别指定每个边缘来定义它。这种方法可能看起来有点冗长，但它使代码更容易理解：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'> <span class="k">vec4</span> <span class="n">main</span><span class="p">(</span><span class="n">float2</span> <span class="n">fragCoord</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>         <span class="n">float2</span> <span class="n">uv</span> <span class="o">=</span> <span class="n">fragCoord</span> <span class="o">/</span> <span class="n">resolution</span> <span class="o">-</span> <span class="mf">0.5</span><span class="p">;</span>
</span><span class='line'>         <span class="k">float</span> <span class="n">ratio</span> <span class="o">=</span> <span class="n">resolution</span><span class="p">.</span><span class="n">x</span> <span class="o">/</span> <span class="n">resolution</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>         <span class="n">uv</span><span class="p">.</span><span class="n">x</span> <span class="o">*=</span> <span class="n">ratio</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>         <span class="k">float</span> <span class="n">snowEdge</span> <span class="o">=</span> <span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="mf">10.</span><span class="o">*</span><span class="n">uv</span><span class="p">.</span><span class="n">x</span><span class="p">)</span><span class="o">*</span><span class="mf">0.5</span><span class="o">+</span><span class="mf">0.5</span><span class="p">)</span><span class="o">*</span><span class="mf">0.2</span><span class="p">;</span>
</span><span class='line'>         <span class="n">snowEdge</span> <span class="o">=</span> <span class="n">step</span><span class="p">(</span><span class="n">uv</span><span class="p">.</span><span class="n">y</span><span class="o">-</span><span class="mf">0.4</span><span class="p">,</span> <span class="n">snowEdge</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>         <span class="k">float</span> <span class="n">topBound</span> <span class="o">=</span> <span class="mf">0.3</span><span class="p">;</span>
</span><span class='line'>         <span class="k">float</span> <span class="n">leftBound</span> <span class="o">=</span> <span class="o">-</span><span class="mf">.5</span><span class="o">*</span><span class="n">ratio</span><span class="p">;</span>
</span><span class='line'>         <span class="k">float</span> <span class="n">rightBound</span> <span class="o">=</span> <span class="mf">.5</span><span class="o">*</span><span class="n">ratio</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>         <span class="k">float</span> <span class="n">snowMask</span> <span class="o">=</span> <span class="mf">0.</span><span class="p">;</span>
</span><span class='line'>         <span class="k">if</span><span class="p">(</span><span class="n">uv</span><span class="p">.</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">leftBound</span> <span class="o">&amp;&amp;</span> <span class="n">uv</span><span class="p">.</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">rightBound</span> <span class="o">&amp;&amp;</span> <span class="n">uv</span><span class="p">.</span><span class="n">y</span> <span class="o">&gt;</span> <span class="n">topBound</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">snowMask</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">;</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>         <span class="n">snowMask</span> <span class="o">*=</span> <span class="n">snowEdge</span><span class="p">;</span>
</span><span class='line'>         <span class="k">vec4</span> <span class="n">imageColor</span> <span class="o">=</span> <span class="n">image</span><span class="p">.</span><span class="n">eval</span><span class="p">(</span><span class="n">fragCoord</span><span class="p">);</span>
</span><span class='line'>         <span class="k">vec3</span> <span class="n">snowColor</span> <span class="o">=</span> <span class="k">vec3</span><span class="p">(</span><span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'>         <span class="k">vec3</span> <span class="n">finalColor</span> <span class="o">=</span> <span class="n">mix</span><span class="p">(</span><span class="n">imageColor</span><span class="p">.</span><span class="n">rgb</span><span class="p">,</span> <span class="n">snowColor</span><span class="p">,</span> <span class="n">snowMask</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>         <span class="k">return</span> <span class="k">vec4</span><span class="p">(</span><span class="n">finalColor</span><span class="p">,</span> <span class="n">snowMask</span><span class="o">+</span><span class="n">imageColor</span><span class="p">.</span><span class="n">a</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>调整后，我们应该得到类似这样的结果。</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/1*GM2d-tsCUOAHnloMiDYAAA.png" alt="" /></p>

<p>现在可能不是提及这一点的最佳时机，也许应该早点提及，但在这里强调这一点至关重要。请记住，我们对坐标进行了归一化，并对其进行了平移，使零点恰好位于画布（即对话框）的中心。具体操作如下：<code>_float2 uv = fragCoord/resolution — 0.5;_</code></p>

<p>理解这一点很重要，因为现在我想减小中心正弦波的振幅，并随着我们向左右两侧远离中心而增大振幅。理解坐标系的设置方式后，我们可以通过将函数乘以沿 x 轴距离中心的距离来实现这一点。这样，函数将在中心处恰好返回零点，并随着向外移动而增大。最终，我们将实现以下效果：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/1*oW8OP3R2VFo0SkJmDhgVSw.png" alt="" /></p>

<p>现在，让我们使用函数而不是常量来定义遮罩的顶部边界。现在，让我们使用另一个正弦波，但间隔等于对话框的宽度。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="k">float</span> <span class="n">topBound</span> <span class="o">=</span> <span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="n">ratio</span><span class="o">*</span><span class="n">uv</span><span class="p">.</span><span class="n">x</span><span class="o">*</span><span class="mf">0.8</span><span class="o">+</span><span class="mf">2.</span><span class="p">)</span><span class="o">*</span><span class="mf">0.5</span><span class="o">+</span><span class="mf">0.5</span><span class="p">)</span><span class="o">*</span><span class="mf">.2</span><span class="o">+</span><span class="mf">0.3</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们将为左右边界添加类似的代码：我希望它们也使用正弦波，但这次是垂直运行的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="k">float</span> <span class="n">leftBound</span> <span class="o">=</span> <span class="o">-</span><span class="mf">.5</span><span class="o">*</span><span class="n">ratio</span><span class="o">+</span><span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="mf">10.</span><span class="o">*</span><span class="n">uv</span><span class="p">.</span><span class="n">y</span><span class="p">)</span><span class="o">*</span><span class="mf">0.5</span><span class="o">+</span><span class="mf">0.5</span><span class="p">)</span><span class="o">*</span><span class="mf">0.5</span><span class="o">*</span><span class="n">length</span><span class="p">(</span><span class="n">uv</span><span class="p">.</span><span class="n">y</span><span class="o">-</span><span class="n">topBound</span><span class="p">);</span>
</span><span class='line'><span class="k">float</span> <span class="n">rightBound</span> <span class="o">=</span> <span class="mf">.5</span><span class="o">*</span><span class="n">ratio</span><span class="o">-</span><span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="mf">10.</span><span class="o">*</span><span class="n">uv</span><span class="p">.</span><span class="n">y</span><span class="p">)</span><span class="o">*</span><span class="mf">0.5</span><span class="o">+</span><span class="mf">0.5</span><span class="p">)</span><span class="o">*</span><span class="mf">0.4</span><span class="o">*</span><span class="n">length</span><span class="p">(</span><span class="n">uv</span><span class="p">.</span><span class="n">y</span><span class="o">-</span><span class="n">topBound</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后，我们需要为底部边缘添加一个常量：这是一个时间变量，我们会将它从 Compose 传递给着色器。在着色器中，我们只需添加相应的 <code>uniform</code> 变量，并将底部边缘函数乘以它即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="k">uniform</span> <span class="n">shader</span> <span class="n">image</span><span class="p">;</span>
</span><span class='line'>    <span class="k">uniform</span> <span class="k">vec2</span> <span class="n">resolution</span><span class="p">;</span>
</span><span class='line'>    <span class="k">uniform</span> <span class="k">float</span> <span class="n">time</span><span class="p">;</span>        <span class="k">vec4</span> <span class="n">main</span><span class="p">(</span><span class="n">float2</span> <span class="n">fragCoord</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>         <span class="n">float2</span> <span class="n">uv</span> <span class="o">=</span> <span class="n">fragCoord</span> <span class="o">/</span> <span class="n">resolution</span> <span class="o">-</span> <span class="mf">0.5</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>         <span class="k">float</span> <span class="n">ratio</span> <span class="o">=</span> <span class="n">resolution</span><span class="p">.</span><span class="n">x</span> <span class="o">/</span> <span class="n">resolution</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>         <span class="n">uv</span><span class="p">.</span><span class="n">x</span> <span class="o">*=</span> <span class="n">ratio</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>         <span class="k">float</span> <span class="n">adjustedTime</span> <span class="o">=</span> <span class="n">clamp</span><span class="p">(</span><span class="n">time</span> <span class="o">*</span> <span class="mf">0.3</span><span class="p">,</span><span class="mf">0.0</span><span class="p">,</span><span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'>         <span class="k">float</span> <span class="n">snowEdge</span> <span class="o">=</span> <span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="mf">10.</span><span class="o">*</span><span class="n">uv</span><span class="p">.</span><span class="n">x</span><span class="p">)</span><span class="o">*</span><span class="mf">0.5</span><span class="o">+</span><span class="mf">0.5</span><span class="p">)</span><span class="o">*</span><span class="mf">0.2</span> <span class="o">*</span> <span class="n">length</span><span class="p">(</span><span class="n">uv</span><span class="p">.</span><span class="n">x</span><span class="p">)</span><span class="o">*</span><span class="n">adjustedTime</span><span class="p">;</span>
</span><span class='line'>         <span class="n">snowEdge</span> <span class="o">=</span> <span class="n">step</span><span class="p">(</span><span class="n">uv</span><span class="p">.</span><span class="n">y</span><span class="o">-</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">snowEdge</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>         <span class="k">float</span> <span class="n">topBound</span> <span class="o">=</span> <span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="n">ratio</span><span class="o">*</span><span class="n">uv</span><span class="p">.</span><span class="n">x</span><span class="o">*</span><span class="mf">0.8</span><span class="o">+</span><span class="mf">2.</span><span class="p">)</span><span class="o">*</span><span class="mf">0.5</span><span class="o">+</span><span class="mf">0.5</span><span class="p">)</span><span class="o">*</span><span class="mf">.2</span><span class="o">+</span><span class="mf">0.3</span><span class="p">;</span>
</span><span class='line'>         <span class="k">float</span> <span class="n">leftBound</span> <span class="o">=</span> <span class="o">-</span><span class="mf">.5</span><span class="o">*</span><span class="n">ratio</span><span class="o">+</span><span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="mf">10.</span><span class="o">*</span><span class="n">uv</span><span class="p">.</span><span class="n">y</span><span class="p">)</span><span class="o">*</span><span class="mf">0.5</span><span class="o">+</span><span class="mf">0.5</span><span class="p">)</span><span class="o">*</span><span class="mf">0.5</span><span class="o">*</span><span class="n">length</span><span class="p">(</span><span class="n">uv</span><span class="p">.</span><span class="n">y</span><span class="o">-</span><span class="n">topBound</span><span class="p">);</span>
</span><span class='line'>         <span class="k">float</span> <span class="n">rightBound</span> <span class="o">=</span> <span class="mf">.5</span><span class="o">*</span><span class="n">ratio</span><span class="o">-</span><span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="mf">10.</span><span class="o">*</span><span class="n">uv</span><span class="p">.</span><span class="n">y</span><span class="p">)</span><span class="o">*</span><span class="mf">0.5</span><span class="o">+</span><span class="mf">0.5</span><span class="p">)</span><span class="o">*</span><span class="mf">0.4</span><span class="o">*</span><span class="n">length</span><span class="p">(</span><span class="n">uv</span><span class="p">.</span><span class="n">y</span><span class="o">-</span><span class="n">topBound</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>         <span class="k">float</span> <span class="n">snowMask</span> <span class="o">=</span> <span class="mf">0.</span><span class="p">;</span>
</span><span class='line'>         <span class="k">if</span><span class="p">(</span><span class="n">uv</span><span class="p">.</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">leftBound</span> <span class="o">&amp;&amp;</span> <span class="n">uv</span><span class="p">.</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">rightBound</span> <span class="o">&amp;&amp;</span> <span class="n">uv</span><span class="p">.</span><span class="n">y</span> <span class="o">&gt;</span> <span class="n">topBound</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">snowMask</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">;</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>         <span class="n">snowMask</span> <span class="o">*=</span> <span class="n">snowEdge</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>         <span class="k">vec4</span> <span class="n">imageColor</span> <span class="o">=</span> <span class="n">image</span><span class="p">.</span><span class="n">eval</span><span class="p">(</span><span class="n">fragCoord</span><span class="p">);</span>
</span><span class='line'>         <span class="k">vec3</span> <span class="n">snowColor</span> <span class="o">=</span> <span class="k">vec3</span><span class="p">(</span><span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'>         <span class="k">vec3</span> <span class="n">finalColor</span> <span class="o">=</span> <span class="n">mix</span><span class="p">(</span><span class="n">imageColor</span><span class="p">.</span><span class="n">rgb</span><span class="p">,</span> <span class="n">snowColor</span><span class="p">,</span> <span class="n">snowMask</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>         <span class="k">return</span> <span class="k">vec4</span><span class="p">(</span><span class="n">finalColor</span><span class="p">,</span> <span class="n">snowMask</span><span class="o">+</span><span class="n">imageColor</span><span class="p">.</span><span class="n">a</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>别忘了从composable中提供时间：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">SnowedDialog</span><span class="p">(</span><span class="n">onDismiss</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">snowCapShader</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">RuntimeShader</span><span class="p">(</span><span class="n">snowCapShader</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">time</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="m">0f</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">LaunchedEffect</span><span class="p">(</span><span class="k">null</span><span class="p">)</span>  <span class="p">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="k">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">delay</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>
</span><span class='line'>            <span class="n">time</span> <span class="p">+=</span> <span class="m">0.01f</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">BasicAlertDialog</span><span class="p">(</span>
</span><span class='line'>        <span class="n">onDismissRequest</span> <span class="p">=</span> <span class="p">{</span> <span class="n">onDismiss</span><span class="p">()</span> <span class="p">},</span>
</span><span class='line'>        <span class="n">properties</span> <span class="p">=</span> <span class="n">DialogProperties</span><span class="p">(</span><span class="n">usePlatformDefaultWidth</span> <span class="p">=</span> <span class="k">false</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Column</span><span class="p">(</span>
</span><span class='line'>            <span class="n">Modifier</span>
</span><span class='line'>                <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="n">horizontal</span> <span class="p">=</span> <span class="m">16.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">shape</span> <span class="p">=</span> <span class="n">MaterialTheme</span><span class="p">.</span><span class="n">shapes</span><span class="p">.</span><span class="n">large</span><span class="p">,</span> <span class="n">color</span> <span class="p">=</span> <span class="n">MaterialTheme</span><span class="p">.</span><span class="n">colorScheme</span><span class="p">.</span><span class="n">surface</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">onSizeChanged</span> <span class="p">{</span> <span class="n">size</span> <span class="p">-&gt;</span>
</span><span class='line'>                    <span class="n">snowCapShader</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span>
</span><span class='line'>                        <span class="s">&quot;resolution&quot;</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">.</span><span class="n">toFloat</span><span class="p">(),</span>
</span><span class='line'>                        <span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">.</span><span class="n">toFloat</span><span class="p">()</span>
</span><span class='line'>                    <span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="p">.</span><span class="n">graphicsLayer</span> <span class="p">{</span>
</span><span class='line'>                    <span class="c1">// 这里提供时间：</span>
</span><span class='line'>                    <span class="n">snowCapShader</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span><span class="s">&quot;time&quot;</span><span class="p">,</span> <span class="n">time</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">this</span><span class="p">.</span><span class="n">renderEffect</span> <span class="p">=</span> <span class="n">RenderEffect</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">createRuntimeShaderEffect</span><span class="p">(</span><span class="n">snowCapShader</span><span class="p">,</span> <span class="s">&quot;image&quot;</span><span class="p">)</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">asComposeRenderEffect</span><span class="p">()</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">16.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>        <span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="c1">// 其余代码保持不变</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们得到如下效果：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/1*5YYiM3lZYp42O8Fa9iS-4A.gif" alt="" /></p>

<p>关于这个效果，我想分享的差不多就是这些了！这是核心思想，从这里开始，你可以尝试不同的设置。例如，我用一个基于 Perlin 噪声的更混乱的版本替换了基本的正弦波。</p>

<p>但这些只是细节，在实现上可以有无限的变化。创建着色器的关键在于掌握其背后的核心思想。</p>

<p>你可以在我的代码库中找到我的实现，其中还包含各种用于不同增强功能的辅助方法。例如，这里有一系列过渡效果（线性、三次、指数等）。</p>

<p>添加雪花是最后一步，但创建雪、雨、星星等效果的方法值得另开一个教程。下次我一定会讲解。今天，我只想提一下，为了实现这个特定的效果，我使用了 <strong>Andrew Baldwin</strong> 于 2013 年在 ShaderToy 上创建的着色器。链接如下：<a href="https://www.shadertoy.com/view/ldsGDn">https://www.shadertoy.com/view/ldsGDn</a></p>

<p>由于原始着色器对于手机来说过于庞大，我做了一些简化。此外，它还需要一些适配 AGSL 的功能。这是我的版本：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'>  <span class="k">uniform</span> <span class="n">shader</span> <span class="n">image</span><span class="p">;</span>
</span><span class='line'>   <span class="k">uniform</span> <span class="k">vec2</span> <span class="n">resolution</span><span class="p">;</span>
</span><span class='line'>   <span class="k">uniform</span> <span class="k">float</span> <span class="n">time</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">uniform</span> <span class="k">int</span> <span class="n">uLayers</span><span class="p">;</span>
</span><span class='line'>   <span class="k">uniform</span> <span class="k">float</span> <span class="n">uDepth</span><span class="p">;</span>
</span><span class='line'>   <span class="k">uniform</span> <span class="k">float</span> <span class="n">uSpeed</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">const</span> <span class="k">int</span> <span class="n">MAX_LAYERS</span> <span class="o">=</span> <span class="mi">50</span><span class="p">;</span>
</span><span class='line'>   <span class="k">const</span> <span class="k">float</span> <span class="n">WIDTH</span> <span class="o">=</span> <span class="mf">0.4</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">vec2</span> <span class="n">NormalizeCoordinates</span><span class="p">(</span><span class="k">vec2</span> <span class="n">o</span><span class="p">,</span> <span class="k">vec2</span> <span class="n">r</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">float2</span> <span class="n">uv</span> <span class="o">=</span> <span class="n">o</span> <span class="o">/</span> <span class="n">r</span> <span class="o">-</span> <span class="mf">0.5</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">r</span><span class="p">.</span><span class="n">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">uv</span><span class="p">.</span><span class="n">x</span> <span class="o">*=</span> <span class="n">r</span><span class="p">.</span><span class="n">x</span> <span class="o">/</span> <span class="n">r</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">uv</span><span class="p">.</span><span class="n">y</span> <span class="o">*=</span> <span class="n">r</span><span class="p">.</span><span class="n">y</span> <span class="o">/</span> <span class="n">r</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">uv</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">vec4</span> <span class="n">GetImageTexture</span><span class="p">(</span><span class="k">vec2</span> <span class="n">p</span><span class="p">,</span> <span class="k">vec2</span> <span class="n">pivot</span><span class="p">,</span> <span class="k">vec2</span> <span class="n">r</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">r</span><span class="p">.</span><span class="n">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">p</span><span class="p">.</span><span class="n">x</span> <span class="o">/=</span> <span class="n">r</span><span class="p">.</span><span class="n">x</span> <span class="o">/</span> <span class="n">r</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">p</span><span class="p">.</span><span class="n">y</span> <span class="o">/=</span> <span class="n">r</span><span class="p">.</span><span class="n">y</span> <span class="o">/</span> <span class="n">r</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">p</span> <span class="o">+=</span> <span class="n">pivot</span><span class="p">;</span>
</span><span class='line'>        <span class="n">p</span> <span class="o">*=</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">image</span><span class="p">.</span><span class="n">eval</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">vec4</span> <span class="n">main</span><span class="p">(</span><span class="n">float2</span> <span class="n">fragCoord</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>       <span class="n">float2</span> <span class="n">uv</span> <span class="o">=</span> <span class="n">NormalizeCoordinates</span><span class="p">(</span><span class="n">fragCoord</span><span class="p">,</span> <span class="n">resolution</span><span class="p">);</span>
</span><span class='line'>       <span class="k">vec4</span> <span class="n">image</span> <span class="o">=</span> <span class="n">GetImageTexture</span><span class="p">(</span><span class="n">uv</span><span class="p">,</span> <span class="k">vec2</span><span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">),</span> <span class="n">resolution</span><span class="p">);</span>
</span><span class='line'>       <span class="k">const</span> <span class="k">mat3</span> <span class="n">p</span> <span class="o">=</span> <span class="k">mat3</span><span class="p">(</span><span class="mf">13.323122</span><span class="p">,</span> <span class="mf">23.5112</span><span class="p">,</span> <span class="mf">21.71123</span><span class="p">,</span> <span class="mf">21.1212</span><span class="p">,</span> <span class="mf">28.7312</span><span class="p">,</span> <span class="mf">11.9312</span><span class="p">,</span> <span class="mf">21.8112</span><span class="p">,</span> <span class="mf">14.7212</span><span class="p">,</span> <span class="mf">61.3934</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">float</span> <span class="n">ratio</span> <span class="o">=</span> <span class="n">resolution</span><span class="p">.</span><span class="n">y</span> <span class="o">/</span> <span class="n">resolution</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>       <span class="k">vec3</span> <span class="n">acc</span> <span class="o">=</span> <span class="k">vec3</span><span class="p">(</span><span class="mf">0.0</span><span class="p">);</span>
</span><span class='line'>       <span class="k">float</span> <span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span> <span class="c1">// 初始化 alpha</span>
</span><span class='line'>       <span class="k">float</span> <span class="n">dof</span> <span class="o">=</span> <span class="mf">5.0</span> <span class="o">*</span> <span class="n">sin</span><span class="p">(</span><span class="n">time</span> <span class="o">*</span> <span class="mf">0.1</span><span class="p">);</span>
</span><span class='line'>       <span class="k">for</span> <span class="p">(</span><span class="k">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mo">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">MAX_LAYERS</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>           <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&gt;=</span> <span class="n">uLayers</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span> <span class="c1">// 如果 i 超出 uLayers，则跳出循环</span>
</span><span class='line'>
</span><span class='line'>           <span class="k">float</span> <span class="n">fi</span> <span class="o">=</span> <span class="k">float</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>           <span class="k">vec2</span> <span class="n">q</span> <span class="o">=</span> <span class="n">uv</span> <span class="o">*</span> <span class="p">(</span><span class="mf">1.0</span> <span class="o">+</span> <span class="n">fi</span> <span class="o">*</span> <span class="n">uDepth</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>           <span class="c1">// 通过调制和时间调整雪花位置</span>
</span><span class='line'>           <span class="n">q</span> <span class="o">-=</span> <span class="k">vec2</span><span class="p">(</span><span class="n">q</span><span class="p">.</span><span class="n">y</span> <span class="o">*</span> <span class="p">(</span><span class="n">WIDTH</span> <span class="o">*</span> <span class="n">mod</span><span class="p">(</span><span class="n">fi</span> <span class="o">*</span> <span class="mf">7.238917</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">)</span> <span class="o">-</span> <span class="n">WIDTH</span> <span class="o">*</span> <span class="mf">0.5</span><span class="p">),</span> <span class="n">uSpeed</span> <span class="o">*</span> <span class="n">time</span> <span class="o">/</span> <span class="p">(</span><span class="mf">1.0</span> <span class="o">+</span> <span class="n">fi</span> <span class="o">*</span> <span class="n">uDepth</span> <span class="o">*</span> <span class="mf">0.03</span><span class="p">));</span>                      <span class="k">vec3</span> <span class="n">n</span> <span class="o">=</span> <span class="k">vec3</span><span class="p">(</span><span class="n">floor</span><span class="p">(</span><span class="n">q</span><span class="p">),</span> <span class="mf">31.189</span> <span class="o">+</span> <span class="n">fi</span><span class="p">);</span>
</span><span class='line'>           <span class="k">vec3</span> <span class="n">m</span> <span class="o">=</span> <span class="n">floor</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="o">*</span> <span class="mf">0.00001</span> <span class="o">+</span> <span class="n">fract</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>           <span class="k">vec3</span> <span class="n">mp</span> <span class="o">=</span> <span class="p">(</span><span class="mf">31415.9</span> <span class="o">+</span> <span class="n">m</span><span class="p">)</span> <span class="o">/</span> <span class="n">fract</span><span class="p">(</span><span class="n">p</span> <span class="o">*</span> <span class="n">m</span><span class="p">);</span>
</span><span class='line'>           <span class="k">vec3</span> <span class="n">r</span> <span class="o">=</span> <span class="n">fract</span><span class="p">(</span><span class="n">mp</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>           <span class="c1">// 使用圆形mask的圆形雪花形状</span>
</span><span class='line'>           <span class="n">float2</span> <span class="n">center</span> <span class="o">=</span> <span class="n">mod</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">)</span> <span class="o">-</span> <span class="mf">0.5</span> <span class="o">+</span> <span class="mf">0.5</span> <span class="o">*</span> <span class="n">r</span><span class="p">.</span><span class="n">xy</span><span class="p">;</span>
</span><span class='line'>           <span class="k">float</span> <span class="n">distanceToCenter</span> <span class="o">=</span> <span class="n">length</span><span class="p">(</span><span class="n">center</span><span class="p">);</span> <span class="c1">// 圆周距离</span>
</span><span class='line'>           <span class="k">float</span> <span class="n">flakeRadius</span> <span class="o">=</span> <span class="mf">0.015</span> <span class="o">+</span> <span class="mf">0.01</span> <span class="o">*</span> <span class="n">r</span><span class="p">.</span><span class="n">z</span><span class="p">;</span> <span class="c1">// 每个薄片的半径略有不同</span>
</span><span class='line'>
</span><span class='line'>           <span class="c1">// 通过扩展的平滑步进实现更平滑的边缘</span>
</span><span class='line'>           <span class="k">float</span> <span class="n">intensity</span> <span class="o">=</span> <span class="n">smoothstep</span><span class="p">(</span><span class="n">flakeRadius</span> <span class="o">+</span> <span class="mf">0.015</span><span class="p">,</span> <span class="n">flakeRadius</span><span class="p">,</span> <span class="n">distanceToCenter</span><span class="p">)</span> <span class="o">*</span>
</span><span class='line'>                               <span class="n">smoothstep</span><span class="p">(</span><span class="n">flakeRadius</span><span class="p">,</span> <span class="n">flakeRadius</span> <span class="o">-</span> <span class="mf">0.015</span><span class="p">,</span> <span class="n">distanceToCenter</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>           <span class="c1">// Ensure flakes are white or transparent (prevent black color)</span>
</span><span class='line'>           <span class="k">vec3</span> <span class="n">flakeColor</span> <span class="o">=</span> <span class="k">vec3</span><span class="p">(</span><span class="mf">1.0</span><span class="p">);</span> <span class="c1">// 雪花要是白色</span>
</span><span class='line'>           <span class="n">acc</span> <span class="o">+=</span> <span class="n">flakeColor</span> <span class="o">*</span> <span class="n">intensity</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>           <span class="c1">// 通过平滑过渡积累 alpha</span>
</span><span class='line'>           <span class="n">alpha</span> <span class="o">+=</span> <span class="n">intensity</span><span class="p">;</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>       <span class="c1">// 归一化 alpha 以确保其不超过 1.0</span>
</span><span class='line'>       <span class="n">alpha</span> <span class="o">=</span> <span class="n">clamp</span><span class="p">(</span><span class="n">alpha</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'>       <span class="k">vec3</span> <span class="n">finalColor</span> <span class="o">=</span> <span class="n">mix</span><span class="p">(</span><span class="n">image</span><span class="p">.</span><span class="n">rgb</span><span class="p">,</span> <span class="n">acc</span><span class="p">,</span> <span class="n">alpha</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">uv</span><span class="p">.</span><span class="n">y</span> <span class="o">&lt;</span> <span class="o">-</span><span class="mf">0.5</span><span class="o">*</span><span class="n">ratio</span> <span class="o">||</span> <span class="n">uv</span><span class="p">.</span><span class="n">y</span> <span class="o">&gt;</span> <span class="mf">.5</span><span class="o">*</span><span class="n">ratio</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>           <span class="n">finalColor</span> <span class="o">=</span> <span class="k">vec3</span><span class="p">(</span><span class="mf">0.0</span><span class="p">);</span>
</span><span class='line'>           <span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>       <span class="k">return</span> <span class="k">vec4</span><span class="p">(</span><span class="n">finalColor</span><span class="p">,</span> <span class="n">alpha</span><span class="o">+</span><span class="n">image</span><span class="p">.</span><span class="n">a</span><span class="p">);</span>
</span><span class='line'>   <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然，为了让一些雪花出现在屏幕前方，而另一些雪花飘到屏幕后方，我必须在这个着色器中使用两层。这是对话框可组合函数的最终效果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">SnowedDialog</span><span class="p">(</span><span class="n">onDismiss</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">snowCapShader</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">RuntimeShader</span><span class="p">(</span><span class="n">snowCapShader</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">flakesShaderForeground</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">RuntimeShader</span><span class="p">(</span><span class="n">snowShader</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">flakesShaderBackground</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">RuntimeShader</span><span class="p">(</span><span class="n">snowShader</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="py">time</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="m">0f</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">LaunchedEffect</span><span class="p">(</span><span class="k">null</span><span class="p">)</span>  <span class="p">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="k">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">delay</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>
</span><span class='line'>            <span class="n">time</span> <span class="p">+=</span> <span class="m">0.01f</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">flakesShaderForeground</span><span class="p">.</span><span class="n">setIntUniform</span><span class="p">(</span><span class="s">&quot;uLayers&quot;</span><span class="p">,</span> <span class="m">5</span><span class="p">)</span>
</span><span class='line'>    <span class="n">flakesShaderForeground</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span><span class="s">&quot;uDepth&quot;</span><span class="p">,</span> <span class="m">0.15f</span><span class="p">)</span>
</span><span class='line'>    <span class="n">flakesShaderForeground</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span><span class="s">&quot;uSpeed&quot;</span><span class="p">,</span> <span class="m">1.0f</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">flakesShaderBackground</span><span class="p">.</span><span class="n">setIntUniform</span><span class="p">(</span><span class="s">&quot;uLayers&quot;</span><span class="p">,</span> <span class="m">10</span><span class="p">)</span>
</span><span class='line'>    <span class="n">flakesShaderBackground</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span><span class="s">&quot;uDepth&quot;</span><span class="p">,</span> <span class="m">1.5f</span><span class="p">)</span>
</span><span class='line'>    <span class="n">flakesShaderBackground</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span><span class="s">&quot;uSpeed&quot;</span><span class="p">,</span> <span class="m">0.8f</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">BasicAlertDialog</span><span class="p">(</span>
</span><span class='line'>        <span class="n">onDismissRequest</span> <span class="p">=</span> <span class="p">{</span> <span class="n">onDismiss</span><span class="p">()</span> <span class="p">},</span>
</span><span class='line'>        <span class="n">properties</span> <span class="p">=</span> <span class="n">DialogProperties</span><span class="p">(</span><span class="n">usePlatformDefaultWidth</span> <span class="p">=</span> <span class="k">false</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                <span class="p">.</span><span class="n">fillMaxSize</span><span class="p">()</span>
</span><span class='line'>                <span class="p">.</span><span class="n">onSizeChanged</span> <span class="p">{</span> <span class="n">size</span> <span class="p">-&gt;</span>
</span><span class='line'>                    <span class="n">flakesShaderForeground</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span>
</span><span class='line'>                        <span class="s">&quot;resolution&quot;</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">.</span><span class="n">toFloat</span><span class="p">(),</span>
</span><span class='line'>                        <span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">.</span><span class="n">toFloat</span><span class="p">()</span>
</span><span class='line'>                    <span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="p">.</span><span class="n">graphicsLayer</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">flakesShaderForeground</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span><span class="s">&quot;time&quot;</span><span class="p">,</span> <span class="n">time</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">this</span><span class="p">.</span><span class="n">renderEffect</span> <span class="p">=</span> <span class="n">RenderEffect</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">createRuntimeShaderEffect</span><span class="p">(</span><span class="n">flakesShaderForeground</span><span class="p">,</span> <span class="s">&quot;image&quot;</span><span class="p">)</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">asComposeRenderEffect</span><span class="p">()</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">16.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>            <span class="n">contentAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">Center</span>
</span><span class='line'>        <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>                <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">fillMaxSize</span><span class="p">()</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">onSizeChanged</span> <span class="p">{</span> <span class="n">size</span> <span class="p">-&gt;</span>
</span><span class='line'>                        <span class="n">flakesShaderBackground</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span>
</span><span class='line'>                            <span class="s">&quot;resolution&quot;</span><span class="p">,</span>
</span><span class='line'>                            <span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">.</span><span class="n">toFloat</span><span class="p">(),</span>
</span><span class='line'>                            <span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">.</span><span class="n">toFloat</span><span class="p">()</span>
</span><span class='line'>                        <span class="p">)</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">graphicsLayer</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">flakesShaderBackground</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span><span class="s">&quot;time&quot;</span><span class="p">,</span> <span class="n">time</span><span class="p">)</span>
</span><span class='line'>                        <span class="k">this</span><span class="p">.</span><span class="n">renderEffect</span> <span class="p">=</span> <span class="n">RenderEffect</span>
</span><span class='line'>                            <span class="p">.</span><span class="n">createRuntimeShaderEffect</span><span class="p">(</span><span class="n">flakesShaderBackground</span><span class="p">,</span> <span class="s">&quot;image&quot;</span><span class="p">)</span>
</span><span class='line'>                            <span class="p">.</span><span class="n">asComposeRenderEffect</span><span class="p">()</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>            <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">fillMaxSize</span><span class="p">()</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Black</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="m">0.1f</span><span class="p">))</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">Column</span><span class="p">(</span>
</span><span class='line'>                <span class="n">Modifier</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="n">horizontal</span> <span class="p">=</span> <span class="m">16.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">shape</span> <span class="p">=</span> <span class="n">MaterialTheme</span><span class="p">.</span><span class="n">shapes</span><span class="p">.</span><span class="n">large</span><span class="p">,</span> <span class="n">color</span> <span class="p">=</span> <span class="n">MaterialTheme</span><span class="p">.</span><span class="n">colorScheme</span><span class="p">.</span><span class="n">surface</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">onSizeChanged</span> <span class="p">{</span> <span class="n">size</span> <span class="p">-&gt;</span>
</span><span class='line'>                        <span class="n">snowCapShader</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span>
</span><span class='line'>                            <span class="s">&quot;resolution&quot;</span><span class="p">,</span>
</span><span class='line'>                            <span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">.</span><span class="n">toFloat</span><span class="p">(),</span>
</span><span class='line'>                            <span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">.</span><span class="n">toFloat</span><span class="p">()</span>
</span><span class='line'>                        <span class="p">)</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">graphicsLayer</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">snowCapShader</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span><span class="s">&quot;time&quot;</span><span class="p">,</span> <span class="n">time</span><span class="p">)</span>
</span><span class='line'>                        <span class="k">this</span><span class="p">.</span><span class="n">renderEffect</span> <span class="p">=</span> <span class="n">RenderEffect</span>
</span><span class='line'>                            <span class="p">.</span><span class="n">createRuntimeShaderEffect</span><span class="p">(</span><span class="n">snowCapShader</span><span class="p">,</span> <span class="s">&quot;image&quot;</span><span class="p">)</span>
</span><span class='line'>                            <span class="p">.</span><span class="n">asComposeRenderEffect</span><span class="p">()</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">16.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>            <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Merry Christmas!&quot;</span><span class="p">,</span> <span class="n">style</span> <span class="p">=</span> <span class="n">MaterialTheme</span><span class="p">.</span><span class="n">typography</span><span class="p">.</span><span class="n">titleLarge</span><span class="p">)</span>
</span><span class='line'>                <span class="n">Spacer</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">height</span><span class="p">(</span><span class="m">10.</span><span class="n">dp</span><span class="p">))</span>
</span><span class='line'>                <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Happy New Year!&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="n">Spacer</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">height</span><span class="p">(</span><span class="m">26.</span><span class="n">dp</span><span class="p">))</span>
</span><span class='line'>                <span class="n">Row</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">fillMaxWidth</span><span class="p">(),</span>
</span><span class='line'>                    <span class="n">horizontalArrangement</span> <span class="p">=</span> <span class="n">Arrangement</span><span class="p">.</span><span class="n">End</span>
</span><span class='line'>                <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">Text</span><span class="p">(</span>
</span><span class='line'>                        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                            <span class="p">.</span><span class="n">clickable</span> <span class="p">{</span> <span class="n">onDismiss</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>                            <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">5.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>                        <span class="n">text</span> <span class="p">=</span> <span class="s">&quot;Close&quot;</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">style</span> <span class="p">=</span> <span class="n">MaterialTheme</span><span class="p">.</span><span class="n">typography</span><span class="p">.</span><span class="n">bodyMedium</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="n">color</span> <span class="p">=</span> <span class="n">MaterialTheme</span><span class="p">.</span><span class="n">colorScheme</span><span class="p">.</span><span class="n">primary</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最终结果：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1000/1*UG3e4b_9AqY1J1kKCNFqAw.png" alt="" /></p>

<p>感谢你的阅读！如果你觉得我的实验有趣且我的解释对你有帮助，欢迎加入我的<a href="https://t.me/droidshaderworks">Telegram频道</a>或在<a href="https://x.com/KrowaNaMostku">Twitter (X)</a>上关注我。你的支持意义重大，并激励着我。祝你撸码愉快！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初探Compose中的着色器RuntimeShader]]></title>
    <link href="https://alexhilton.github.io/blog/2025/08/15/first-look-at-runtimeshader/"/>
    <updated>2025-08-15T22:21:24+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/08/15/first-look-at-runtimeshader</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自「First look at RuntimeShaders in Compose」，原文链接<a href="https://medium.com/@off.mind.by/first-look-at-runtimeshaders-in-compose-b0b431083644">https://medium.com/@off.mind.by/first-look-at-runtimeshaders-in-compose-b0b431083644</a>，由Alex Volkov发布于2024年4月12日。</p></blockquote>

<p><a href="https://alexhilton.github.io/blog/2025/08/15/first-look-at-runtimeshader/"><img src="https://miro.medium.com/v2/resize:fit:1302/1*QXaDvaYryDIZ1GItjM1uqQ.png" title="auto auto" ></a></p>

<!-- more -->


<p>自从我们有机会在 Compose 中使用 RuntimeShaders 自定义Shader（着色器）以来，已经过去了一年多的时间。说实话，我原本以为会有大量关于这个主题的文章。我以为现在 Android 上应该已经充斥着无数令人惊叹的示例、意想不到的效果，以及听到“着色器”这个词时脑海中浮现的其他令人着迷的东西。但事实并非如此。在 RuntimeShaders 可用之后，几乎立刻就出现了几篇文章，之后就再也没有了。一片寂静。</p>

<p>我想答案很简单：Android 开发者并不熟悉着色器，而着色器程序员通常不会直接为 Android 编写代码；他们通常会使用某种游戏引擎。事实上，如果我的假设正确，我希望用这篇文章来弥合这两个世界之间的差距。我真心希望着色器编写能够渗透到 Android 开发领域。因此，在本文的剩余部分，我将介绍一些必要的基础知识，以便你可以坐下来编写着色器并享受其成果。</p>

<p>因此，我假设你已经对 Compose 有了一定的了解。本文不会过多讨论着色器。我的主要重点是连接这两个世界。我们将在未来讨论具体的技术。假设我们有两个项目：一个带有背景图像，顶部有一个框，我们暂时将其设置为黑色。以下是代码的简化版本：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">VerySimpleShaderTheme</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Box</span><span class="p">(</span><span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">(),</span>
</span><span class='line'>        <span class="n">contentAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">Center</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Image</span><span class="p">(</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">(),</span>
</span><span class='line'>            <span class="n">contentScale</span> <span class="p">=</span> <span class="n">androidx</span><span class="p">.</span><span class="n">compose</span><span class="p">.</span><span class="n">ui</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">ContentScale</span><span class="p">.</span><span class="n">Crop</span><span class="p">,</span>
</span><span class='line'>            <span class="n">painter</span> <span class="p">=</span> <span class="n">painterResource</span><span class="p">(</span><span class="n">id</span> <span class="p">=</span> <span class="n">R</span><span class="p">.</span><span class="n">drawable</span><span class="p">.</span><span class="n">background_pattern</span><span class="p">),</span>
</span><span class='line'>            <span class="n">contentDescription</span> <span class="p">=</span> <span class="k">null</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>        <span class="n">Box</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">200.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">clipToBounds</span><span class="p">()</span>
</span><span class='line'>          <span class="p">){</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在，要将着色器添加到框中，你需要获取着色器文本本身，该文本以常规字符串形式传递。使用此文本创建一个 <code>RuntimeShader</code> 对象。然后，将其传递给 <code>graphicsLayer</code> 方法。这是一个简单的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">runtimeShader</span> <span class="p">=</span> <span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="n">uniform</span> <span class="n">shader</span> <span class="n">image</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">half4</span> <span class="n">main</span><span class="p">(</span><span class="n">float2</span> <span class="n">fragCoord</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">half4</span><span class="p">(</span><span class="m">0.</span><span class="p">,</span> <span class="m">0.0</span><span class="p">,</span> <span class="m">0.0</span><span class="p">,</span> <span class="p">.</span><span class="m">5</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;.trimIndent()</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="py">shader</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">RuntimeShader</span><span class="p">(</span><span class="n">runtimeShader</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="n">Box</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">200.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">clipToBounds</span><span class="p">()</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">graphicsLayer</span> <span class="p">{</span>
</span><span class='line'>                            <span class="k">this</span><span class="p">.</span><span class="n">renderEffect</span> <span class="p">=</span> <span class="n">RenderEffect</span>
</span><span class='line'>                                <span class="p">.</span><span class="n">createRuntimeShaderEffect</span><span class="p">(</span>
</span><span class='line'>                                    <span class="n">shader</span><span class="p">,</span> <span class="s">&quot;image&quot;</span>
</span><span class='line'>                                <span class="p">)</span>
</span><span class='line'>                                <span class="p">.</span><span class="n">asComposeRenderEffect</span><span class="p">()</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">White</span><span class="p">)</span>
</span><span class='line'>                       <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是一个非常基础的着色器示例，它输出黑色，透明度为 50%。它看起来像下面的屏幕截图所示（背景只是来自资源库的图片）。它可能还不够令人印象深刻，但我想在这里强调两个重要的细节。首先，我们如何将着色器应用到盒子上。在我们的着色器代码中，我们需要一个着色器对象，以便在创建 renderEffect 时传递它。第二个重要的细节是，我们需要为盒子添加一个背景，并且背景不能完全透明；只有这样，我们的着色器才能应用到盒子上，否则它将不可见。</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/1*DWbBFHchSRHzeVv_9FuxvQ.png" alt="" /></p>

<p>在使用着色器时，通常需要对坐标进行归一化，使其从 0 变为 1。理想情况下，从 -0.5 到 0.5，这样坐标中心就位于画布的正中央。这有助于使用各种数学公式。然而，要做到这一点，不仅需要知道当前像素坐标，还需要知道画布的总尺寸。为了演示如何做到这一点，我将向你展示下一个重点：将参数从代码传递给着色器。我们将传递盒子的尺寸并修改着色器，使其绘制一个圆圈：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">runtimeShader</span> <span class="p">=</span> <span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="n">uniform</span> <span class="n">shader</span> <span class="n">image</span><span class="p">;</span>
</span><span class='line'><span class="n">uniform</span> <span class="n">float2</span> <span class="n">resolution</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">half4</span> <span class="n">main</span><span class="p">(</span><span class="n">float2</span> <span class="n">fragCoord</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">vec2</span> <span class="n">uv</span> <span class="p">=</span> <span class="n">fragCoord</span><span class="p">/</span><span class="n">resolution</span><span class="p">.</span><span class="n">xy</span> <span class="p">-</span> <span class="p">.</span><span class="m">5</span><span class="p">;</span>
</span><span class='line'>    <span class="n">uv</span><span class="p">.</span><span class="n">x</span> <span class="p">*=</span> <span class="n">resolution</span><span class="p">.</span><span class="n">x</span><span class="p">/</span><span class="n">resolution</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">half4</span><span class="p">(</span><span class="n">step</span><span class="p">(</span><span class="n">length</span><span class="p">(</span><span class="n">uv</span><span class="p">),</span><span class="m">0.5</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;.trimIndent()</span>
</span><span class='line'>
</span><span class='line'><span class="n">Box</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">200.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">clipToBounds</span><span class="p">()</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">onSizeChanged</span> <span class="p">{</span> <span class="n">size</span> <span class="p">-&gt;</span>
</span><span class='line'>                            <span class="n">shader</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span>
</span><span class='line'>                                <span class="s">&quot;resolution&quot;</span><span class="p">,</span> <span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">.</span><span class="n">toFloat</span><span class="p">(),</span> <span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">.</span><span class="n">toFloat</span><span class="p">()</span>
</span><span class='line'>                            <span class="p">)</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">graphicsLayer</span> <span class="p">{</span>
</span><span class='line'>                            <span class="k">this</span><span class="p">.</span><span class="n">renderEffect</span> <span class="p">=</span> <span class="n">RenderEffect</span>
</span><span class='line'>                                <span class="p">.</span><span class="n">createRuntimeShaderEffect</span><span class="p">(</span>
</span><span class='line'>                                    <span class="n">shader</span><span class="p">,</span> <span class="s">&quot;image&quot;</span>
</span><span class='line'>                                <span class="p">)</span>
</span><span class='line'>                                <span class="p">.</span><span class="n">asComposeRenderEffect</span><span class="p">()</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">White</span><span class="p">)</span>
</span><span class='line'>                       <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://miro.medium.com/v2/resize:fit:1400/1*nBzr_W24ekFtGgf3xdz8QA.png" alt="" /></p>

<p>现在我们已经学习了如何创建自己的着色器并为其传递参数，重要的是要理解你可以传递任何你需要的参数，无论是时间、颜色还是着色器所需的其他参数。为了巩固这些知识，我将向你展示一个我为 Android 制作的第一个着色器的示例——一个用于加载的发光圆圈。我们将传递当前时间来为其添加动画效果；下面是一个此类效果的简单示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">runtimeShader</span> <span class="p">=</span> <span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="n">uniform</span> <span class="n">shader</span> <span class="n">image</span><span class="p">;</span>
</span><span class='line'><span class="n">uniform</span> <span class="n">float2</span> <span class="n">resolution</span><span class="p">;</span>
</span><span class='line'><span class="n">uniform</span> <span class="n">float</span> <span class="n">radius</span><span class="p">;</span>
</span><span class='line'><span class="n">uniform</span> <span class="n">float</span> <span class="n">time</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">half4</span> <span class="n">main</span><span class="p">(</span><span class="n">float2</span> <span class="n">fragCoord</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">vec2</span> <span class="n">uv</span> <span class="p">=</span> <span class="n">fragCoord</span><span class="p">/</span><span class="n">resolution</span><span class="p">.</span><span class="n">xy</span> <span class="p">-</span> <span class="p">.</span><span class="m">5</span><span class="p">;</span>
</span><span class='line'>    <span class="n">uv</span><span class="p">.</span><span class="n">x</span> <span class="p">*=</span> <span class="n">resolution</span><span class="p">.</span><span class="n">x</span><span class="p">/</span><span class="n">resolution</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>    <span class="n">float</span> <span class="n">radiusWithTime</span> <span class="p">=</span> <span class="p">(</span><span class="m">1</span><span class="p">+</span><span class="n">sin</span><span class="p">(</span><span class="n">time</span><span class="p">))*</span><span class="m">0.1</span> <span class="p">+</span> <span class="n">radius</span><span class="p">;</span>
</span><span class='line'>    <span class="n">float</span> <span class="n">glowingCircle</span> <span class="p">=</span> <span class="n">smoothstep</span><span class="p">(</span><span class="n">radiusWithTime</span><span class="p">,</span> <span class="n">radiusWithTime</span><span class="p">-</span><span class="n">radiusWithTime</span><span class="p">*</span><span class="m">0.3</span><span class="p">,</span> <span class="n">length</span><span class="p">(</span><span class="n">uv</span><span class="p">));</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">half4</span><span class="p">(</span><span class="n">glowingCircle</span><span class="p">-</span><span class="n">step</span><span class="p">(</span><span class="n">length</span><span class="p">(</span><span class="n">uv</span><span class="p">),</span><span class="n">radius</span><span class="p">*</span><span class="m">0.7</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;.trimIndent()</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="py">shader</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">RuntimeShader</span><span class="p">(</span><span class="n">runtimeShader</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">var</span> <span class="py">time</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="m">0f</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="n">shader</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span><span class="s">&quot;radius&quot;</span><span class="p">,</span> <span class="m">0.6f</span><span class="p">)</span>
</span><span class='line'><span class="n">LaunchedEffect</span><span class="p">(</span><span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="k">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">delay</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>
</span><span class='line'>        <span class="n">time</span><span class="p">+=</span><span class="m">0.01f</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">shader</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span><span class="s">&quot;time&quot;</span><span class="p">,</span> <span class="n">time</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://miro.medium.com/v2/resize:fit:1400/1*Lr85zuDhk8o0-TUgw993_A.png" alt="它实际上有一个光晕动画" /></p>

<p>我已经演示了最基础的部分。我的目标是提供一个切入点，并展示它是多么的简单。关于着色器，我还有很多想讨论的，但我们留到下次再说。</p>

<p>感谢你的关注，祝你使用 Android、Compose 和Shader（着色器）顺利进入非凡的 UI 世界。期待与你相见！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[学会说不！让你彻底学会Kotlin Flow的取消机制]]></title>
    <link href="https://alexhilton.github.io/blog/2025/08/08/flow-cancellation/"/>
    <updated>2025-08-08T20:25:21+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/08/08/flow-cancellation</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自「Cancellable Flows in Kotlin Coroutines: The Complete Guide to Flow Cancellation Techniques」，原文链接<a href="https://proandroiddev.com/cancellable-flows-in-kotlin-coroutines-the-complete-guide-to-flow-cancellation-techniques-8988a85fc158">https://proandroiddev.com/cancellable-flows-in-kotlin-coroutines-the-complete-guide-to-flow-cancellation-techniques-8988a85fc158</a>，由Sahil Thakar发布于2025年7月21日。</p></blockquote>

<p><strong>译者按：</strong> 本文并不是Flow的基础教程，而是专门讲解如何取消flow的，适合对Flow有一定基础的同学。如果对Flow还不够熟悉，可以先行阅读一下之前的文章：</p>

<ul>
<li><a href="https://juejin.cn/post/7336751931375648820">包教包会的Kotlin Flow教程</a></li>
<li><a href="https://juejin.cn/post/7337517508151590947">专家之路上的Flow高级秘籍</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[学会用最优雅的姿式在Compose中显示富文本]]></title>
    <link href="https://alexhilton.github.io/blog/2025/07/30/styledstring-in-jetpack-compose/"/>
    <updated>2025-07-30T22:50:40+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/07/30/styledstring-in-jetpack-compose</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自「StyledString: A Better Pattern for Rich Text in Jetpack Compose」，原文链接<a href="https://proandroiddev.com/styledstring-a-better-pattern-for-rich-text-in-jetpack-compose-5930bde981b1">https://proandroiddev.com/styledstring-a-better-pattern-for-rich-text-in-jetpack-compose-5930bde981b1</a>，由Eury Pérez Beltré发布于2025年7月14日。</p></blockquote>

<p><a href="https://alexhilton.github.io/blog/2025/07/30/styledstring-in-jetpack-compose/"><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*NS_T-i72tS5eOs5F0f_Tnw.png" title="auto auto" ></a></p>

<!-- more -->


<p>在 Jetpack Compose 中设置文本样式看似简单……但其实不然。在本文中，我们将探讨 AnnotatedString 的局限性，以及 StyledString 如何让富文本更易于管理。让我们来详细分析一下。👇</p>

<h2>📚 目录</h2>

<ol>
<li>引言：一个粗体字、一个链接，以及一大堆麻烦</li>
<li>AnnotatedString：样式过多，简洁性不足</li>
<li>StyledString 简介：一个 API 即可设置所有样式</li>
<li>StyledString 底层原理：API 背后的引擎</li>
<li>结语</li>
</ol>


<h2>引言：一个加粗的单词、一个链接，以及一大堆麻烦</h2>

<p>一开始，你拥有了 AnnotatedString 和一个 SpanStyle ，一切看起来都很顺畅。你想加粗一个单词？很简单✅。给某个东西加下划线？没问题。这甚至感觉有点有趣，尤其是在你像<a href="https://developer.android.com/develop/ui/compose/text/style-text#multiple-styles">官方文档</a>中那样手动构建整个字符串的时候。</p>

<p>但问题是：🧠</p>

<p>当你完全控制字符串时，这种方法非常有效。但当你处理实际内容：动态副本、本地化文本、从其他地方传入的段落，而你只需要设置其中一部分的样式时？</p>

<p>事情很快就变得很糟糕。</p>

<p>突然间，你需要跟踪子字符串、计算索引、应用样式，并连接点击监听器。只需对文本进行一次更改，你的逻辑就会像纸牌屋一样崩溃。🃏</p>

<p>你原本想要的只是加粗一个单词并让链接可点击。现在你深陷于样板代码中，祈祷一切都不会改变。</p>

<p>在这篇文章中，我将解释为什么 AnnotatedString 在实际 UI 中无法很好地扩展，并介绍一个我为了解决这个问题而构建的微型抽象。它叫做 StyledString，它的功能非常强大：💡 它确实做到了：</p>

<p><strong>让Compose 中的文本样式再次变得简单。</strong></p>

<h2>AnnotatedString：样式太多，简洁性不足</h2>

<p>首先，让我们称赞一下 AnnotatedString。它是一款强大的工具💪.</p>

<p>你可以使用一个 Text 可组合项来创建带样式、可点击、可交互的文本。想要让一个单词加粗，另一个单词像链接一样显示？完全可以。该 API 灵活、底层，并且由 Compose 本身的富文本引擎支持。</p>

<p>问题是，它只有<strong>在手动</strong>构建整个字符串时才能发挥最佳效果。</p>

<p>文档中的大多数示例如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">buildAnnotatedString</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">append</span><span class="p">(</span><span class="s">&quot;Hello &quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">withStyle</span><span class="p">(</span><span class="n">style</span> <span class="p">=</span> <span class="n">SpanStyle</span><span class="p">(</span><span class="n">fontWeight</span> <span class="p">=</span> <span class="n">FontWeight</span><span class="p">.</span><span class="n">Bold</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">append</span><span class="p">(</span><span class="s">&quot;world&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>看起来不错，对吧？但棘手的地方就在这里。👀</p>

<p>如果你有一整段动态文本，比如一段本地化的字符串或一个从其他地方拉取的句子，而你只想为其中的部分内容添加样式，该怎么办？</p>

<p>现在你需要处理：</p>

<ul>
<li>查找要添加样式的子字符串</li>
<li>计算起始和结束索引</li>
<li>手动添加样式或注释</li>
<li>希望文本永远不变，否则一切都会崩溃。</li>
</ul>


<p>如果你需要多种样式，比如粗体单词、可点击的电子邮件和带下划线的 URL，动态地，事情很快就会变得混乱。🔥
这时，buildAnnotatedString 就会变成一堆脆弱的索引数学运算、重复的逻辑和样板代码，难以阅读，更难以维护。</p>

<p>当然，AnnotatedString 功能强大。但当你的文本是动态的，而你只想为其中的部分内容添加样式时？它很快就会变得索然无味。</p>

<h2>StyledString 隆重出场：一个 API 即可实现所有样式</h2>

<p>在与 AnnotatedString 纠结了无数次之后，我决定构建一个更好的东西。它并非一个庞大的库，也不是一个完整的样式框架。而是一个简单、兼容 Compose 的抽象，用于解决一个非常具体的问题。</p>

<p><strong>StyledString 来啦！👋</strong></p>

<p>它的目标很简单：让你定义字符串的哪些部分应该被设置样式或可点击，而无需担心 indexOf 、 addStyle 或 AnnotatedString.Builder 。你只需编写文本，告诉它需要设置哪些单词的样式，以及点击后该执行的操作。</p>

<p>它的实际效果如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// This list can be built in the ViewModel</span>
</span><span class='line'><span class="k">val</span> <span class="py">styledStrings</span> <span class="p">=</span> <span class="n">persistentListOf</span><span class="p">(</span>
</span><span class='line'>    <span class="n">StyledString</span><span class="p">.</span><span class="n">ClickableEmail</span><span class="p">(</span>
</span><span class='line'>        <span class="n">highlightedText</span> <span class="p">=</span> <span class="s">&quot;support@example.com&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">email</span> <span class="p">=</span> <span class="s">&quot;support@example.com&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">style</span> <span class="p">=</span> <span class="n">SpanStyle</span><span class="p">(</span>
</span><span class='line'>            <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Blue</span><span class="p">,</span>
</span><span class='line'>            <span class="n">textDecoration</span> <span class="p">=</span> <span class="n">TextDecoration</span><span class="p">.</span><span class="n">Underline</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">),</span>
</span><span class='line'>    <span class="n">StyledString</span><span class="p">.</span><span class="n">ClickableUrl</span><span class="p">(</span>
</span><span class='line'>        <span class="n">highlightedText</span> <span class="p">=</span> <span class="s">&quot;website&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">url</span> <span class="p">=</span> <span class="s">&quot;https://euryperez.dev&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">style</span> <span class="p">=</span> <span class="n">SpanStyle</span><span class="p">(</span>
</span><span class='line'>            <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Blue</span><span class="p">,</span>
</span><span class='line'>            <span class="n">textDecoration</span> <span class="p">=</span> <span class="n">TextDecoration</span><span class="p">.</span><span class="n">Underline</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// In your Compose Screen</span>
</span><span class='line'><span class="n">StyledText</span><span class="p">(</span>
</span><span class='line'>    <span class="n">fullText</span> <span class="p">=</span> <span class="s">&quot;Contact us at support@example.com or visit our website&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">styledStrings</span> <span class="p">=</span> <span class="n">styledStrings</span><span class="p">,</span>
</span><span class='line'>    <span class="n">style</span> <span class="p">=</span> <span class="n">MaterialTheme</span><span class="p">.</span><span class="n">typography</span><span class="p">.</span><span class="n">label</span><span class="p">,</span>
</span><span class='line'>    <span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span> <span class="n">styled</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="k">when</span> <span class="p">(</span><span class="n">styled</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">is</span> <span class="n">ClickableEmail</span> <span class="p">-&gt;</span> <span class="n">openEmailClient</span><span class="p">(</span><span class="n">styled</span><span class="p">.</span><span class="n">email</span><span class="p">)</span>
</span><span class='line'>            <span class="k">is</span> <span class="n">ClickableUrl</span> <span class="p">-&gt;</span> <span class="n">openUrl</span><span class="p">(</span><span class="n">styled</span><span class="p">.</span><span class="n">url</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>就是这样。无需手动构建文本，无需索引计算，无需样板代码。只需简洁、易读、声明式的样式，即可与真实文本兼容。</p>

<p>由于 StyledString 支持 Simple 、 ClickableEmail 和 ClickableUrl 等类型，因此它易于在你的应用中扩展和复用。你可以获得可点击的、带样式的文本，而无需牺牲其合理性和可维护性。🙏</p>

<h2>StyledString 的底层：API 背后的引擎</h2>

<p>让我们揭开它的面纱，逐步了解 StyledString 的工作原理。🪄</p>

<p>当你在 UI 中使用 StyledText 时，🧠它可能感觉像魔法一样神奇，但在幕后，它只是一个简洁、易于组合的架构，旨在减少样式设计的痛苦，而不会增加不必要的复杂性。</p>

<p>本节涵盖了 StyledString 系统的每个部分，从样式的描述方式，到样式的查找、应用和在屏幕上渲染。</p>

<h3>🧱 1. 数据模型：StyledString 和 ClickableStyleString</h3>

<p>整个实用程序的核心是一个名为 StyledString 的密封接口。我们通过它来对需要以某种方式设置样式的文本片段进行建模。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Immutable</span>
</span><span class='line'><span class="n">sealed</span> <span class="n">interface</span> <span class="n">StyledString</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">highlightedText</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">style</span><span class="p">:</span> <span class="n">SpanStyle</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Add `Simple` type</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Add `ClickableEmail` type</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Add `ClickableUrl` type</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>每个 StyledString 都需要两条信息：</p>

<ul>
<li>highlightedText：需要设置样式的文本的确切部分</li>
<li>style：定义其外观的 SpanStyle（颜色、下划线、字体粗细等）。</li>
</ul>


<p>然后，我们定义一些实现此接口的特定类型：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Immutable</span>
</span><span class='line'><span class="n">data</span> <span class="k">class</span> <span class="nc">Simple</span><span class="p">(</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">val</span> <span class="py">highlightedText</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">val</span> <span class="py">style</span><span class="p">:</span> <span class="n">SpanStyle</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">StyledString</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个是纯视觉效果的，它会改变文本的外观，但不响应点击。</p>

<p>然后我们介绍交互类型：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Immutable</span>
</span><span class='line'><span class="n">data</span> <span class="k">class</span> <span class="nc">ClickableEmail</span><span class="p">(</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">val</span> <span class="py">highlightedText</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">email</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">val</span> <span class="py">style</span><span class="p">:</span> <span class="n">SpanStyle</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">StyledString</span><span class="p">,</span> <span class="n">ClickableStyleString</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Immutable</span>
</span><span class='line'><span class="n">data</span> <span class="k">class</span> <span class="nc">ClickableUrl</span><span class="p">(</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">val</span> <span class="py">highlightedText</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">url</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">val</span> <span class="py">style</span><span class="p">:</span> <span class="n">SpanStyle</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">StyledString</span><span class="p">,</span> <span class="n">ClickableStyleString</span>
</span></code></pre></td></tr></table></div></figure>


<p>它们执行相同的样式设置工作，但还携带额外的数据（例如点击时应打开的 URL 或电子邮件）。更重要的是，它们实现了第二个接口：ClickableStyleString。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">sealed</span> <span class="n">interface</span> <span class="n">ClickableStyleString</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个小接口意义重大，它让我们能够区分纯视觉样式和应该响应点击的样式。这使得我们的点击处理逻辑简洁且类型安全。💡</p>

<p>你可以轻松添加更多变体，例如 @mentions、#hashtags 或电话号码，只需创建另一个数据类并选择性地实现ClickableStyleString 即可。</p>

<h3>🎯 2. 样式和链接：applyStyle</h3>

<p>一旦我们知道了哪些文本需要样式，我们就需要一种将这些样式应用于实际的 AnnotatedString 的方法。这就是 applyStyle() 的作用，它是一个简单的扩展函数，它根据 StyledString 的类型应用样式（和点击监听器）。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">AnnotatedString</span><span class="p">.</span><span class="n">Builder</span><span class="p">.</span><span class="n">applyStyle</span><span class="p">(</span>
</span><span class='line'>    <span class="n">styledString</span><span class="p">:</span> <span class="n">StyledString</span><span class="p">,</span>
</span><span class='line'>    <span class="n">startIndex</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span>
</span><span class='line'>    <span class="n">endIndex</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span>
</span><span class='line'>    <span class="n">onClick</span><span class="p">:</span> <span class="p">(</span><span class="n">ClickableStyleString</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">when</span> <span class="p">(</span><span class="n">styledString</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">StyledString</span><span class="p">.</span><span class="n">ClickableUrl</span> <span class="p">-&gt;</span> <span class="n">TODO</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">is</span> <span class="n">StyledString</span><span class="p">.</span><span class="n">ClickableEmail</span> <span class="p">-&gt;</span> <span class="n">TODO</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">is</span> <span class="n">StyledString</span><span class="p">.</span><span class="n">Simple</span> <span class="p">-&gt;</span> <span class="n">TODO</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>每次匹配每个 StyledString 时，都会调用一次此函数。现在让我们看看它做了什么：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">is</span> <span class="n">StyledString</span><span class="p">.</span><span class="n">ClickableUrl</span> <span class="p">-&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">linkAnnotation</span> <span class="p">=</span> <span class="n">LinkAnnotation</span><span class="p">.</span><span class="n">Url</span><span class="p">(</span>
</span><span class='line'>        <span class="n">url</span> <span class="p">=</span> <span class="n">styledString</span><span class="p">.</span><span class="n">url</span><span class="p">,</span>
</span><span class='line'>        <span class="n">styles</span> <span class="p">=</span> <span class="n">TextLinkStyles</span><span class="p">(</span><span class="n">style</span> <span class="p">=</span> <span class="n">styledString</span><span class="p">.</span><span class="n">style</span><span class="p">),</span>
</span><span class='line'>        <span class="n">linkInteractionListener</span> <span class="p">=</span> <span class="p">{</span> <span class="n">onClick</span><span class="p">(</span><span class="n">styledString</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="n">addLink</span><span class="p">(</span><span class="n">linkAnnotation</span><span class="p">,</span> <span class="n">startIndex</span><span class="p">,</span> <span class="n">endIndex</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果是 URL，我们会创建一个 LinkAnnotation.Url 对象，附加样式，并为其添加一个点击监听器。addLink 负责将其附加到正确的文本范围。</p>

<p>我们执行的操作类似，但针对电子邮件使用的是 LinkAnnotation.Clickable ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">is</span> <span class="n">StyledString</span><span class="p">.</span><span class="n">ClickableEmail</span> <span class="p">-&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">linkAnnotation</span> <span class="p">=</span> <span class="n">LinkAnnotation</span><span class="p">.</span><span class="n">Clickable</span><span class="p">(</span>
</span><span class='line'>        <span class="n">tag</span> <span class="p">=</span> <span class="n">styledString</span><span class="p">.</span><span class="n">highlightedText</span><span class="p">,</span>
</span><span class='line'>        <span class="n">styles</span> <span class="p">=</span> <span class="n">TextLinkStyles</span><span class="p">(</span><span class="n">style</span> <span class="p">=</span> <span class="n">styledString</span><span class="p">.</span><span class="n">style</span><span class="p">),</span>
</span><span class='line'>        <span class="n">linkInteractionListener</span> <span class="p">=</span> <span class="p">{</span> <span class="n">onClick</span><span class="p">(</span><span class="n">styledString</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="n">addLink</span><span class="p">(</span><span class="n">linkAnnotation</span><span class="p">,</span> <span class="n">startIndex</span><span class="p">,</span> <span class="n">endIndex</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果样式只是视觉上的（不可点击），我们会应用常规跨度：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">is</span> <span class="n">StyledString</span><span class="p">.</span><span class="n">Simple</span> <span class="p">-&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">addStyle</span><span class="p">(</span>
</span><span class='line'>        <span class="n">style</span> <span class="p">=</span> <span class="n">styledString</span><span class="p">.</span><span class="n">style</span><span class="p">,</span>
</span><span class='line'>        <span class="n">start</span> <span class="p">=</span> <span class="n">startIndex</span><span class="p">,</span>
</span><span class='line'>        <span class="n">end</span> <span class="p">=</span> <span class="n">endIndex</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种分离将所有样式应用逻辑集中在一处。如果你想要支持新的链接类型或行为，只需更新此函数即可。</p>

<h3>🔍 3. 匹配文本：findAllOccurrences</h3>

<p>在应用样式之前，我们需要找到文本中所有出现指定highlightedText 的位置。这就是此函数的用途。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Find all occurrences of a substring in a string, optionally ignoring case.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @param substring The substring to search for.</span>
</span><span class='line'><span class="cm"> * @param ignoreCase Whether to perform a case-insensitive search.</span>
</span><span class='line'><span class="cm"> * @return A list of indices where the substring was found.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">String</span><span class="p">.</span><span class="n">findAllOccurrences</span><span class="p">(</span>
</span><span class='line'>    <span class="n">substring</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'>    <span class="n">ignoreCase</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">false</span>
</span><span class='line'><span class="p">):</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Int</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这将获取全文，并返回给定子字符串的每个匹配项的起始索引列表。</p>

<p>工作原理如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">substring</span><span class="p">.</span><span class="n">isEmpty</span><span class="p">())</span> <span class="k">return</span> <span class="n">emptyList</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于空子字符串，快速提前退出。避免奇怪的边缘情况。然后，我们准备进行不区分大小写的搜索（如果需要）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">indices</span> <span class="p">=</span> <span class="n">mutableListOf</span><span class="p">&lt;</span><span class="n">Int</span><span class="p">&gt;()</span>
</span><span class='line'><span class="k">val</span> <span class="py">searchString</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">ignoreCase</span><span class="p">)</span> <span class="k">this</span><span class="p">.</span><span class="n">lowercase</span><span class="p">()</span> <span class="k">else</span> <span class="k">this</span>
</span><span class='line'><span class="k">val</span> <span class="py">searchSubstring</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">ignoreCase</span><span class="p">)</span> <span class="n">substring</span><span class="p">.</span><span class="n">lowercase</span><span class="p">()</span> <span class="k">else</span> <span class="n">substring</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在我们遍历字符串，找到所有匹配项：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">var</span> <span class="py">startIndex</span> <span class="p">=</span> <span class="m">0</span>
</span><span class='line'><span class="k">val</span> <span class="py">maxStartIndex</span> <span class="p">=</span> <span class="n">length</span> <span class="p">-</span> <span class="n">substring</span><span class="p">.</span><span class="n">length</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="n">startIndex</span> <span class="p">&lt;=</span> <span class="n">maxStartIndex</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">index</span> <span class="p">=</span> <span class="n">searchString</span><span class="p">.</span><span class="n">indexOf</span><span class="p">(</span><span class="n">searchSubstring</span><span class="p">,</span> <span class="n">startIndex</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">index</span> <span class="p">==</span> <span class="p">-</span><span class="m">1</span><span class="p">)</span> <span class="k">break</span>
</span><span class='line'>    <span class="n">indices</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">index</span><span class="p">)</span>
</span><span class='line'>    <span class="n">startIndex</span> <span class="p">=</span> <span class="n">index</span> <span class="p">+</span> <span class="m">1</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们最终返回结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">return</span> <span class="n">indices</span><span class="p">.</span><span class="n">toList</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>这使得我们的样式逻辑保持灵活性和弹性，无论我们设计的单词出现一次还是十几次。</p>

<h3>🧠 4. 构建 AnnotatedString：rememberStyledAnnotationString</h3>

<p>以下函数将所有内容整合在一起。它接收完整文本和你的StyledString 列表，并返回一个应用了所有样式的 AnnotatedString。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">rememberStyledAnnotationString</span><span class="p">(</span>
</span><span class='line'>    <span class="n">fullText</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'>    <span class="n">styledStrings</span><span class="p">:</span> <span class="n">ImmutableList</span><span class="p">&lt;</span><span class="n">StyledString</span><span class="p">&gt;,</span>
</span><span class='line'>    <span class="n">ignoreCase</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'>    <span class="n">onClick</span><span class="p">:</span> <span class="p">(</span><span class="n">ClickableStyleString</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span>
</span><span class='line'><span class="p">):</span> <span class="n">AnnotatedString</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们确保使用 rememberUpdatedState() 来保持点击监听器的最新状态：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">currentOnClick</span> <span class="k">by</span> <span class="n">rememberUpdatedState</span><span class="p">(</span><span class="n">onClick</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后我们使用记住来缓存工作，除非输入发生变化：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">return</span> <span class="n">remember</span><span class="p">(</span><span class="n">fullText</span><span class="p">,</span> <span class="n">styledStrings</span><span class="p">,</span> <span class="n">ignoreCase</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// TODO: build annotated string</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们首先附加完整的未样式化的文本。然后，对于每个 StyledString ，我们找到所有匹配的位置并应用样式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">buildAnnotatedString</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">append</span><span class="p">(</span><span class="n">fullText</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">styledStrings</span><span class="p">.</span><span class="n">fastForEach</span> <span class="p">{</span> <span class="n">styledStringInfo</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">indices</span> <span class="p">=</span>
</span><span class='line'>            <span class="n">fullText</span><span class="p">.</span><span class="n">findAllOccurrences</span><span class="p">(</span><span class="n">styledStringInfo</span><span class="p">.</span><span class="n">highlightedText</span><span class="p">,</span> <span class="n">ignoreCase</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">indices</span><span class="p">.</span><span class="n">fastForEach</span> <span class="p">{</span> <span class="n">startIndex</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">endIndex</span> <span class="p">=</span> <span class="n">startIndex</span> <span class="p">+</span> <span class="n">styledStringInfo</span><span class="p">.</span><span class="n">highlightedText</span><span class="p">.</span><span class="n">length</span>
</span><span class='line'>            <span class="n">applyStyle</span><span class="p">(</span><span class="n">styledStringInfo</span><span class="p">,</span> <span class="n">startIndex</span><span class="p">,</span> <span class="n">endIndex</span><span class="p">,</span> <span class="n">currentOnClick</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个循环使得样式设置能够动态且多目标化。你可以将任何本地化或运行时生成的字符串作为 fullText 传递，它仍然能够正确应用样式。</p>

<h3>🧩 5. 可组合项：StyledText</h3>

<p>最后，StyledText 可组合项将所有内容连接在一起。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">StyledText</span><span class="p">(</span>
</span><span class='line'>    <span class="n">fullText</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'>    <span class="n">styledStrings</span><span class="p">:</span> <span class="n">ImmutableList</span><span class="p">&lt;</span><span class="n">StyledString</span><span class="p">&gt;,</span>
</span><span class='line'>    <span class="n">style</span><span class="p">:</span> <span class="n">TextStyle</span><span class="p">,</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="n">onClick</span><span class="p">:</span> <span class="p">(</span><span class="n">ClickableStyleString</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span> <span class="p">=</span> <span class="p">{},</span>
</span><span class='line'>    <span class="n">ignoreCase</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// TODO: Implementation</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>你传入全文、样式以及可选的点击处理程序。它的内部功能如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">annotatedString</span> <span class="p">=</span> <span class="n">rememberStyledAnnotationString</span><span class="p">(</span>
</span><span class='line'>    <span class="n">fullText</span> <span class="p">=</span> <span class="n">fullText</span><span class="p">,</span>
</span><span class='line'>    <span class="n">styledStrings</span> <span class="p">=</span> <span class="n">styledStrings</span><span class="p">,</span>
</span><span class='line'>    <span class="n">ignoreCase</span> <span class="p">=</span> <span class="n">ignoreCase</span><span class="p">,</span>
</span><span class='line'>    <span class="n">onClick</span> <span class="p">=</span> <span class="n">onClick</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这调用了我们刚刚讲过的逻辑。它返回一个带样式的 AnnotatedString 。然后我们渲染它：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">Text</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="n">text</span> <span class="p">=</span> <span class="n">annotatedString</span><span class="p">,</span>
</span><span class='line'>    <span class="n">style</span> <span class="p">=</span> <span class="n">style</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>它只是一个普通的 Compose Text 。但所有样式逻辑都已预先烘焙。现在，你的 UI 代码保持简洁且声明式。🌚</p>

<h3>⚡️ 6. StyledText 实践</h3>

<p>现在，让我们来看看 StyledText 的实践，为此，我整理了一个预览，你可以自己测试一下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@PreviewLightDark</span>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">StyledTextPreview</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">MyTheme</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">color</span> <span class="p">=</span> <span class="n">MaterialTheme</span><span class="p">.</span><span class="n">colors</span><span class="p">.</span><span class="n">background</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">16.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// This list can be built in the ViewModel</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">styledStrings</span> <span class="p">=</span> <span class="n">persistentListOf</span><span class="p">(</span>
</span><span class='line'>                <span class="n">StyledString</span><span class="p">.</span><span class="n">ClickableEmail</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">highlightedText</span> <span class="p">=</span> <span class="s">&quot;support@example.com&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">email</span> <span class="p">=</span> <span class="s">&quot;support@example.com&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">style</span> <span class="p">=</span> <span class="n">SpanStyle</span><span class="p">(</span>
</span><span class='line'>                        <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Gray</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">textDecoration</span> <span class="p">=</span> <span class="n">TextDecoration</span><span class="p">.</span><span class="n">Underline</span>
</span><span class='line'>                    <span class="p">)</span>
</span><span class='line'>                <span class="p">),</span>
</span><span class='line'>                <span class="n">StyledString</span><span class="p">.</span><span class="n">ClickableUrl</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">highlightedText</span> <span class="p">=</span> <span class="s">&quot;website&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">url</span> <span class="p">=</span> <span class="s">&quot;https://euryperez.dev&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">style</span> <span class="p">=</span> <span class="n">SpanStyle</span><span class="p">(</span>
</span><span class='line'>                        <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Gray</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">textDecoration</span> <span class="p">=</span> <span class="n">TextDecoration</span><span class="p">.</span><span class="n">Underline</span>
</span><span class='line'>                    <span class="p">)</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// In your Compose Screen</span>
</span><span class='line'>            <span class="n">StyledText</span><span class="p">(</span>
</span><span class='line'>                <span class="n">fullText</span> <span class="p">=</span> <span class="s">&quot;Contact us at support@example.com or visit our website&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">styledStrings</span> <span class="p">=</span> <span class="n">styledStrings</span><span class="p">,</span>
</span><span class='line'>                <span class="n">style</span> <span class="p">=</span> <span class="n">MaterialTheme</span><span class="p">.</span><span class="n">typography</span><span class="p">.</span><span class="n">body2</span><span class="p">,</span>
</span><span class='line'>                <span class="n">color</span> <span class="p">=</span> <span class="n">MaterialTheme</span><span class="p">.</span><span class="n">colors</span><span class="p">.</span><span class="n">onBackground</span><span class="p">,</span>
</span><span class='line'>                <span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span> <span class="n">styled</span> <span class="p">-&gt;</span>
</span><span class='line'>                    <span class="k">when</span> <span class="p">(</span><span class="n">styled</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="k">is</span> <span class="n">StyledString</span><span class="p">.</span><span class="n">ClickableEmail</span> <span class="p">-&gt;</span> <span class="n">TODO</span><span class="p">()</span>
</span><span class='line'>                        <span class="k">is</span> <span class="n">StyledString</span><span class="p">.</span><span class="n">ClickableUrl</span> <span class="p">-&gt;</span> <span class="n">TODO</span><span class="p">()</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>你将在预览中看到以下内容：
<img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*9Tc22BNoUfij54fBGQ7YCg.png" alt="StyledTextPreview" /></p>

<h3>✅ 总结：一个输出简洁的简单引擎</h3>

<p>总而言之，我们构建了一个完全可复用的 Compose 实用程序，它：</p>

<ul>
<li>使用 StyledString 以声明式方式描述样式</li>
<li>安全地区分可视样式和可点击样式</li>
<li>使用 applyStyle 应用 span 和 link</li>
<li>使用 findAllOccurrences 查找多个匹配项</li>
<li>以 Compose 稳定的方式组装所有内容</li>
<li>封装在一个简洁的 API 中：StyledText</li>
</ul>


<p>无需 indexOf ，无需复杂的范围逻辑，也无需复制粘贴 buildAnnotatedString样板代码。</p>

<p><a href="https://gist.github.com/euri16/614a460fe6a690ce57cd23cc41164b5a">点击此处</a>（链接：<a href="https://gist.github.com/euri16/614a460fe6a690ce57cd23cc41164b5a%EF%BC%89%E8%8E%B7%E5%8F%96%E5%AE%8C%E6%95%B4%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E3%80%82">https://gist.github.com/euri16/614a460fe6a690ce57cd23cc41164b5a%EF%BC%89%E8%8E%B7%E5%8F%96%E5%AE%8C%E6%95%B4%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E3%80%82</a></p>

<h2>结语🎯</h2>

<p>Jetpack Compose 赋予我们强大的功能，但并非总是最符合人体工程学的开箱即用工具。AnnotatedString 对于一次性需求来说非常棒，但一旦你的 UI 需要多种样式、复用模式或动态点击处理，它就会很快变得冗长。</p>

<p>这就是 StyledString 的用武之地。</p>

<p>它并非取代 AnnotatedString，而是对其进行包装，为你提供一种更安全、更清晰的方式来描述意图：</p>

<ul>
<li>→ “将此单词加粗”</li>
<li>→ “将此短语设为链接”</li>
<li>→ “为该字符串的每个实例设置样式”</li>
</ul>


<p>你无需再考虑文本偏移量和跨度范围，而是开始思考含义。结果：代码更简洁、样板更少，开发者体验更佳💆</p>

<h3>🧩 易于采用</h3>

<p>你无需重构整个应用即可使用 StyledString 。</p>

<p>只需将一两个 Text() 元素替换为 StyledText() 即可。将内联的 buildAnnotatedString { &hellip; } 块替换为 StyledString.Simple 或 ClickableUrl 的简单列表即可。</p>

<p>就这样，你就成功了。✨</p>

<h3>🛠️ 易于扩展</h3>

<p>还有其他用例吗？</p>

<ul>
<li>为 #hashtags 设置样式？</li>
<li>处理 @mentions？</li>
<li>自动检测电话号码？</li>
<li>添加图标或背景高亮？</li>
</ul>


<p>只需创建一个实现 StyledString 的新数据类，并在 applyStyle() 中处理它即可。系统的其余部分保持不变。</p>

<p>这种分离使你的文本逻辑模块化、可测试，并能够适应未来的设计或业务需求。</p>

<p>如果你有什么有趣的想法，别忘了在评论区分享。😉</p>

<h3>🫱 轮到你了</h3>

<p>现在你已经了解了它的工作原理（以及它实际需要的代码量有多小），那就在下一个 Compose 屏幕中尝试一下吧。不再需要繁琐的 AnnotatedString.Builder 代码。不再需要重复的 span 逻辑。只需描述你想要的内容，剩下的交给 StyledText 处理。</p>

<p><strong>让 Compose 中的文本样式再次变得简单。😎</strong></p>

<h3>🤝 感谢阅读</h3>

<p>如果你最终在项目中使用了 StyledString，请告诉我！看到这些微型模式在现实世界中落地总是很酷。👀</p>

<p>感谢阅读！如果你觉得这篇文章有用，请考虑分享给其他开发者，点赞或留言。这很有帮助。✌️</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[揭密Jetpack Compose中的PausableComposition]]></title>
    <link href="https://alexhilton.github.io/blog/2025/07/24/exploring-pausablecomposition/"/>
    <updated>2025-07-24T19:55:51+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/07/24/exploring-pausablecomposition</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自「Exploring PausableComposition internals in Jetpack Compose」，原文链接<a href="https://blog.shreyaspatil.dev/exploring-pausablecomposition-internals-in-jetpack-compose">https://blog.shreyaspatil.dev/exploring-pausablecomposition-internals-in-jetpack-compose</a>，由Shreyas Patil发布于2025年7月14日。</p></blockquote>

<p><a href="https://alexhilton.github.io/blog/2025/07/24/exploring-pausablecomposition/"><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1751791091096/4e5b36e3-485c-4079-88be-987082e7d67e.png?w=1600&h=840&fit=crop&crop=entropy&auto=compress,format&format=webp" title="auto auto" ></a></p>

<!-- more -->


<p>嗨，Composers 们👋，在最近的 Compose 1.9.X 版本中，Compose-runtime 引入了一个名为 PausableComposition 的新内部 API，据称它可以解决性能问题。它听起来像魔法，但在底层，这一切都归功于一些非常巧妙的工程设计。在深入研究 Compose 运行时以更好地理解这一点时，我偶然发现了一个强大的内部工具，它使这一切成为可能。</p>

<p>这篇文章将深入分析这一机制：PausableComposition。这是 Compose 的内部 API，开发者无需了解它。但了解它的底层工作原理总是有益的。对于想要深入了解 Compose 如何实现其惊人性能的 Jetpack Compose 开发者来说，这篇探索文章将为你提供更清晰的视角。我们将深入运行时源代码，了解它的工作原理、它对性能如此重要的原因，以及如何协调所有组件以使我们的 UI 感觉如此流畅。让我们开始吧！</p>

<h2>缘起</h2>

<p>为了实现流畅的 60 帧/秒 (fps)，我们的应用需要在 16.7 毫秒内绘制每一帧。当用户滚动浏览 LazyColumn 时，必须在这个微小的窗口内创建、测量和绘制新的项目。</p>

<p>如果一个项目很复杂，包含嵌套布局、图片和大量逻辑，那么组合它所需的工作很容易超过 16 毫秒。当这种情况发生时，主线程会被阻塞，帧会丢失，用户会在滚动过程中看到“卡顿”或卡顿。😩</p>

<p>这正是 PausableComposition 的初衷。</p>

<h2>“做什么”：更智能的 Compose 方式</h2>

<p>想象一下，你是一位厨师，正在为一场活动准备一顿大餐。👨‍🍳 与其在第一位客人到来时慌乱地从头开始烹饪所有食材，不如提前几个小时做好准备工作。切菜、调酱、烤甜点。等到上桌时，最后的烹饪和组装速度会快得令人难以置信。</p>

<p>PausableComposition 将这种“准备工作”的理念带到了 Compose 中。它允许运行时：</p>

<ol>
<li>增量式 Compose：将大型 UI 元素的合成分解成更小、更易于管理的部分。</li>
<li>异步准备：在 UI 真正需要显示在屏幕上之前进行合成工作，通常利用帧间的空闲时间。</li>
</ol>


<p>这种可组合项的预热意味着，当某个项目最终滚动到视图中时，大部分繁重的工作已经完成，使其几乎可以立即显示。</p>

<p>为了直观地理解这一概念，请观看以下动画：</p>

<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1751997214840/f9f7308a-7b83-4a3d-9d38-e3ce6aa8d9a9.gif?auto=format,compress&amp;gif-q=60&amp;format=webm" alt="滚动帧时间线" /></p>

<p>滚动发生时，假设项目 A、B、C、D 和 E 已在屏幕上可见，下一个项目是 F。如果项目 F 的布局或结构复杂，需要更多时间进行布局计算或其他预处理才能在 UI 上渲染，则此预处理将在帧时间轴内分块进行（例如 16 毫秒）。因此，如果它需要 2 帧，则 F 所需的预处理会在 2 帧的空闲时间内完成，不会造成任何帧卡顿。最后，当需要显示时，它会被绘制到 UI 上。项目 G 和 H 也采用相同的流程。</p>

<h2>工作原理：核心组件</h2>

<p>通过查看运行时源代码，我们可以看到它是如何通过一些关键接口和类来处理的。虽然你不会直接使用这些 API，但理解它们可以揭示 LazyColumn 的性能提升。🕵️‍♂️</p>

<h3>生命周期：PausableComposition 及其控制器</h3>

<p>旅程从 PausableComposition 接口开始，该接口扩展了 ReusableComposition 并添加了暂停功能。</p>

<blockquote><p>关于 ReusableComposition 的简要说明：</p>

<p>在讨论暂停之前，我们先来了解一下什么是 ReusableComposition？它是一种特殊的组合，专为需要高效回收 UI 内容的高性能场景而设计。想象一下 LazyColumn 中的项目。ReusableComposition 不会销毁滚动到屏幕外的项目的整个组合，而是允许运行时停用它。这会保留底层 UI 节点，但会清除已记住的状态。然后，这个停用的组合可以快速地用新内容“重新填充”，从而节省了从头创建节点的成本。PausableComposition 直接构建于这个强大的回收基础之上。</p></blockquote>

<p>PausableComposition 的外观如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// https://cs.android.com/androidx/platform/frameworks/support/+/8d08d42d60f7cc7ec0034d0b7ff6fd953516d96a:compose/runtime/runtime/src/commonMain/kotlin/androidx/compose/runtime/PausableComposition.kt;l=66</span>
</span><span class='line'><span class="n">sealed</span> <span class="n">interface</span> <span class="n">PausableComposition</span> <span class="p">:</span> <span class="n">ReusableComposition</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">setPausableContent</span><span class="p">(</span><span class="n">content</span><span class="p">:</span> <span class="n">@Composable</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">):</span> <span class="n">PausedComposition</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">setPausableContentWithReuse</span><span class="p">(</span><span class="n">content</span><span class="p">:</span> <span class="n">@Composable</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">):</span> <span class="n">PausedComposition</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>（注意：该接口是密封的，因为它仅在 Compose 运行时内部具有一组封闭且有限的实现。这为编译器提供了更多信息来进行优化。）</p>

<p>调用 setPausableContent 不会立即组合界面。相反，它会返回一个 PausedComposition 对象，该对象充当逐步过程的控制器。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// https://cs.android.com/androidx/platform/frameworks/support/+/8d08d42d60f7cc7ec0034d0b7ff6fd953516d96a:compose/runtime/runtime/src/commonMain/kotlin/androidx/compose/runtime/PausableComposition.kt;l=112</span>
</span><span class='line'><span class="n">sealed</span> <span class="n">interface</span> <span class="n">PausedComposition</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">isComplete</span><span class="p">:</span> <span class="n">Boolean</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">resume</span><span class="p">(</span><span class="n">shouldPause</span><span class="p">:</span> <span class="n">ShouldPauseCallback</span><span class="p">):</span> <span class="n">Boolean</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">apply</span><span class="p">()</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">cancel</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个生命周期最好以状态机的形式来表示：</p>

<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1751864148018/27512893-f186-47e7-9bdc-26036460aed7.png?auto=compress,format&amp;format=webp" alt="PausableComposition生命周期流程图" /></p>

<ul>
<li>resume(shouldPause: ShouldPauseCallback)：这是引擎。预取系统（此处指 LazyColumn 上下文）会反复调用 resume() 来执行大量的组合工作。神奇之处在于 shouldPause 回调。Compose 运行时会在组合过程中频繁调用此 lambda。如果它返回 true（例如，由于帧截止时间已近），则组合过程将停止，并将主线程交还给更重要的工作，例如绘制当前帧。</li>
<li>apply()：一旦 resume() 返回 true，即表示操作完成，就会调用 apply()。这会获取所有计算出的界面更改，并将其提交到实际的界面树中。</li>
<li>cancel()：如果用户滚动离开，并且不再需要预先组合的项目，则会调用 cancellation() 来丢弃工作并释放资源。</li>
</ul>


<h3>内部结构概览：PausedCompositionImpl</h3>

<p>上述状态机由内部的 PausedCompositionImpl 类管理。该类保存状态并连接所有部分。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// https://cs.android.com/androidx/platform/frameworks/support/+/8d08d42d60f7cc7ec0034d0b7ff6fd953516d96a:compose/runtime/runtime/src/commonMain/kotlin/androidx/compose/runtime/PausableComposition.kt;l=202</span>
</span><span class='line'><span class="k">internal</span> <span class="k">class</span> <span class="nc">PausedCompositionImpl</span><span class="p">(...)</span> <span class="p">:</span> <span class="n">PausedComposition</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">var</span> <span class="py">state</span> <span class="p">=</span> <span class="n">PausedCompositionState</span><span class="p">.</span><span class="n">InitialPending</span>
</span><span class='line'>    <span class="k">internal</span> <span class="k">val</span> <span class="py">pausableApplier</span> <span class="p">=</span> <span class="n">RecordingApplier</span><span class="p">(</span><span class="n">applier</span><span class="p">.</span><span class="n">current</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">resume</span><span class="p">(</span><span class="n">shouldPause</span><span class="p">:</span> <span class="n">ShouldPauseCallback</span><span class="p">):</span> <span class="n">Boolean</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">when</span> <span class="p">(</span><span class="n">state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">PausedCompositionState</span><span class="p">.</span><span class="n">InitialPending</span> <span class="p">-&gt;</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// This is the first time resume() is called.</span>
</span><span class='line'>                <span class="c1">// It starts the initial composition of the content.</span>
</span><span class='line'>                <span class="n">invalidScopes</span> <span class="p">=</span>
</span><span class='line'>                    <span class="n">context</span><span class="p">.</span><span class="n">composeInitialPaused</span><span class="p">(</span><span class="n">composition</span><span class="p">,</span> <span class="n">shouldPause</span><span class="p">,</span> <span class="n">content</span><span class="p">)</span>
</span><span class='line'>                <span class="n">state</span> <span class="p">=</span> <span class="n">PausedCompositionState</span><span class="p">.</span><span class="n">RecomposePending</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">invalidScopes</span><span class="p">.</span><span class="n">isEmpty</span><span class="p">())</span> <span class="n">markComplete</span><span class="p">()</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">PausedCompositionState</span><span class="p">.</span><span class="n">RecomposePending</span> <span class="p">-&gt;</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// This is for subsequent calls to resume().</span>
</span><span class='line'>                <span class="n">state</span> <span class="p">=</span> <span class="n">PausedCompositionState</span><span class="p">.</span><span class="n">Recomposing</span>
</span><span class='line'>                <span class="c1">// It tells the Composer to continue where it left off,</span>
</span><span class='line'>                <span class="c1">// processing any pending invalidations.</span>
</span><span class='line'>                <span class="n">invalidScopes</span> <span class="p">=</span>
</span><span class='line'>                    <span class="n">context</span><span class="p">.</span><span class="n">recomposePaused</span><span class="p">(</span><span class="n">composition</span><span class="p">,</span> <span class="n">shouldPause</span><span class="p">,</span> <span class="n">invalidScopes</span><span class="p">)</span>
</span><span class='line'>                <span class="n">state</span> <span class="p">=</span> <span class="n">PausedCompositionState</span><span class="p">.</span><span class="n">RecomposePending</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">invalidScopes</span><span class="p">.</span><span class="n">isEmpty</span><span class="p">())</span> <span class="n">markComplete</span><span class="p">()</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="c1">// ... other states like Recomposing, Applied, Cancelled are handled here ...</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">isComplete</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">apply</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// ... other state checks ...</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">state</span> <span class="p">==</span> <span class="n">PausedCompositionState</span><span class="p">.</span><span class="n">ApplyPending</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">applyChanges</span><span class="p">()</span> <span class="c1">// The call site</span>
</span><span class='line'>            <span class="n">state</span> <span class="p">=</span> <span class="n">PausedCompositionState</span><span class="p">.</span><span class="n">Applied</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">// ...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">fun</span> <span class="nf">applyChanges</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// ...</span>
</span><span class='line'>        <span class="n">pausableApplier</span><span class="p">.</span><span class="n">playTo</span><span class="p">(</span><span class="n">applier</span><span class="p">,</span> <span class="n">rememberManager</span><span class="p">)</span>
</span><span class='line'>        <span class="n">rememberManager</span><span class="p">.</span><span class="n">dispatchRememberObservers</span><span class="p">()</span>
</span><span class='line'>        <span class="n">rememberManager</span><span class="p">.</span><span class="n">dispatchSideEffects</span><span class="p">()</span>
</span><span class='line'>        <span class="c1">// ...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>调用 resume() 时，它会检查其内部状态并采取相应的措施：</p>

<ul>
<li>InitialPending：首次调用时，它会通过调用 context.composeInitialPaused 启动合成过程。这会告知核心 ComposerImpl 开始执行 @Composable 内容，并执行 shouldPause 回调。</li>
<li>RecomposePending：后续调用时，它会通过调用 context.recomposePaused 继续工作。此方法用于处理合成中任何因状态变化而失效的部分，或继续之前暂停的工作。</li>
<li>Applier：在此过程中，ComposerImpl 将所有 UI 更改操作转发给 pausableApplier（即 RecordingApplier），该操作会进行缓冲，而不是立即应用。</li>
<li>此过程持续进行，直到工作完成或 shouldPause 回调返回 true。</li>
</ul>


<h3>RecordingApplier：推迟最后的润色</h3>

<p>一个关键的性能技巧是 RecordingApplier。调用 resume() 时，Composer 不会直接更改实时 UI 树。如果分小步执行，可能会很慢，并导致 UI 更新不完整，显得怪异。</p>

<p>PausableComposition 使用的是 RecordingApplier。这个特殊的 Applier 会将其应该执行的所有 UI 操作（例如“创建 Text 节点”、“设置其文本属性”或“添加子图像”）记录到一个内部列表中。</p>

<p>只有调用 PausedComposition.apply() 时，RecordingApplier 才会将其记录的操作列表“回放”到实际的 Applier 上，从而高效地单步更新 UI 树。PausedComposition 的公共 apply() 方法是一个简单的状态机守卫。真正的工作发生在内部的 applyChanges() 方法中（如上面的代码片段所示）。</p>

<p>当调用 applyChanges 时，它会按顺序执行三项关键操作：</p>

<ul>
<li>它会告诉 RecordingApplier 将其所有缓冲的命令播放到实际的 applier 上。这才是 UI 真正出现在屏幕上的关键。</li>
<li>它会为所有已创建的 RememberObservers（例如 DisposableEffect）调度所有 onRemembered 生命周期回调。</li>
<li>最后，它会运行在合成过程中排队的所有 SideEffect。</li>
</ul>


<p>这种有序的批处理过程确保 UI 高效更新，并且所有生命周期事件都在正确的时间发生。</p>

<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1751794209046/49f5c1c7-b424-4c7d-a017-8ba65bb7b2d3.png?auto=compress,format&amp;format=webp" alt="PausableComposition时序图" /></p>

<h2>使用了 PausableComposition 的 LazyList</h2>

<p>LazyList 已经开始使用 PausableComposition API了。在 LazyList 中，PausableComposition 并非独立工作，而是协同工作的系统的一部分。</p>

<ul>
<li>指挥器 (Recomposer)：主 Recomposer 负责控制节奏，驱动可见 UI 的逐帧更新。</li>
<li>规划器 (LazyLayoutPrefetchState)：当用户滚动时，此组件会预测哪些项目即将显示。</li>
<li>舞台管理器 (SubcomposeLayout)：这个强大的 SubcomposeLayout 是 LazyList 的基础。它的 SubcomposeLayoutState 可以在需要时为各个项目创建和管理合成。最重要的是，它提供了 createPausedPrecomposition() API。</li>
<li>舞台调度器 (PrefetchScheduler)：此调度器会在帧之间寻找空闲时间来执行规划器请求的预合成工作。</li>
</ul>


<p>了解此功能的开发过程也很有趣。在 LazyLayoutPrefetchState 文件中，你可以找到控制它的功能标志：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// A simplified look inside LazyLayoutPrefetchState.kt: https://cs.android.com/androidx/platform/frameworks/support/+/8d08d42d60f7cc7ec0034d0b7ff6fd953516d96a:compose/foundation/foundation/src/commonMain/kotlin/androidx/compose/foundation/lazy/layout/LazyLayoutPrefetchState.kt;l=647</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">ComposeFoundationFlags</span><span class="p">.</span><span class="n">isPausableCompositionInPrefetchEnabled</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// This is the future, modern path.</span>
</span><span class='line'>    <span class="n">performPausableComposition</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">contentType</span><span class="p">,</span> <span class="n">average</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// This is the older, non-pausable fallback.</span>
</span><span class='line'>    <span class="n">performFullComposition</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">contentType</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>isPausableCompositionInPrefetchEnabled 这个标志充当了终止开关的作用。虽然它在源代码中的默认值为 false。如果你想在惰性布局（LazyColumn、LazyRow 等）中启用可暂停组合行为，我们可以简单地按如下方式启用它：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">class</span> <span class="nc">MyApplication</span> <span class="p">:</span> <span class="n">Application</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">ComposeFoundationFlags</span><span class="p">.</span><span class="n">isPausableCompositionInPrefetchEnabled</span> <span class="p">=</span> <span class="k">true</span>
</span><span class='line'>        <span class="k">super</span><span class="p">.</span><span class="n">onCreate</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>规划器：LazyLayoutPrefetchState 详解</h3>

<p>LazyLayoutPrefetchState 是预取操作的核心。它的作用是获取来自 LazyLayout 的预测（例如，“第 25 项即将上线”），并将其转换为实际的预组合任务。</p>

<p>它通过 PrefetchHandleProvider 实现此操作，该提供者会创建一个 PrefetchRequest。此请求是 PrefetchScheduler 可以执行的工作单元。在这个请求中，我们找到了暂停逻辑的核心。</p>

<p>当 PrefetchScheduler 执行请求时，它会进入一个循环，在 PausableComposition 上调用 resume()。传递给 resume 的 lambda 表达式决定是否暂停。</p>

<p>因此，如果启用了上述功能标记，它将通过 Pausable Composition API 执行请求，如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// https://cs.android.com/androidx/platform/frameworks/support/+/8d08d42d60f7cc7ec0034d0b7ff6fd953516d96a:compose/foundation/foundation/src/commonMain/kotlin/androidx/compose/foundation/lazy/layout/LazyLayoutPrefetchState.kt;l=754</span>
</span><span class='line'><span class="c1">// Simplified from HandleAndRequestImpl inside LazyLayoutPrefetchState</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">PrefetchRequestScope</span><span class="p">.</span><span class="n">performPausableComposition</span><span class="p">(...)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">composition</span> <span class="p">=</span> <span class="c1">// get the composition for the item of the LazyLayout </span>
</span><span class='line'>    <span class="n">pauseRequested</span> <span class="p">=</span> <span class="k">false</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(!</span><span class="n">composition</span><span class="p">.</span><span class="n">isComplete</span> <span class="p">&amp;&amp;</span> <span class="p">!</span><span class="n">pauseRequested</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">composition</span><span class="p">.</span><span class="n">resume</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(!</span><span class="n">pauseRequested</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// 1. Update how much time is left in this frame&#39;s idle window.</span>
</span><span class='line'>                <span class="n">updateElapsedAndAvailableTime</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// 2. Save how long this work chunk took, to improve future estimates.</span>
</span><span class='line'>                <span class="n">averages</span><span class="p">.</span><span class="n">saveResumeTimeNanos</span><span class="p">(</span><span class="n">elapsedTimeNanos</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// 3. The Core Decision: Is there enough time left to do another</span>
</span><span class='line'>                <span class="c1">//    chunk of work without risking a frame drop?</span>
</span><span class='line'>                <span class="n">pauseRequested</span> <span class="p">=</span> <span class="p">!</span><span class="n">shouldExecute</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">availableTimeNanos</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">averages</span><span class="p">.</span><span class="n">resumeTimeNanos</span> <span class="p">+</span> <span class="n">averages</span><span class="p">.</span><span class="n">pauseTimeNanos</span><span class="p">,</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="c1">// 4. Return the decision to the composition engine.</span>
</span><span class='line'>            <span class="n">pauseRequested</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">updateElapsedAndAvailableTime</span><span class="p">()</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">pauseRequested</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// If we decided to pause, record how long the final pause check took.</span>
</span><span class='line'>        <span class="n">averages</span><span class="p">.</span><span class="n">savePauseTimeNanos</span><span class="p">(</span><span class="n">elapsedTimeNanos</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// If we finished without pausing, record the time for the final resume chunk.</span>
</span><span class='line'>        <span class="n">averages</span><span class="p">.</span><span class="n">saveResumeTimeNanos</span><span class="p">(</span><span class="n">elapsedTimeNanos</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>让我们分解一下这个逻辑：</p>

<ol>
<li>updateElapsedAndAvailableTime()：在恢复 lambda 函数内部，系统会不断检查距离下一帧需要绘制还剩多少时间。</li>
<li>averages.saveResumeTimeNanos(&hellip;)：它会记录每个小块合成工作所需的时间。这有助于它构建一个平均值 (averages) 来预测未来工作的成本。</li>
<li>!shouldExecute(&hellip;)：这是核心决策。它会将 availableTimeNanos 与预算进行比较。这个预算是一个智能估算：完成另一块工作所需的平均时间加上暂停所需的平均时间。如果时间不足，pauseRequested 会变为 true。</li>
<li>最终计时：在本次循环退出后（因为工作完成或请求暂停），会调用最后一次 updateElapsedAndAvailableTime()。这会捕获最后一个操作的时间。</li>
<li>保存平均值：然后系统会保存这个最终计时。如果请求了暂停，则它会影响 pauseTimeNanos。如果循环自然完成，则它会影响 resumeTimeNanos。这确保了用于未来预测的历史数据始终准确。</li>
</ol>


<p>这种自我调节的反馈循环允许预取器在系统空闲时保持积极主动，但在需要渲染 UI 时又能保持礼貌，尊重主线程。</p>

<h3>最后一步：应用预组合 UI</h3>

<p>那么，当屏幕上真正需要预组合的项目时会发生什么呢？这时 SubcomposeLayout 就占据了中心位置。在正常的测量过程中，它会为现在可见的项目调用其 subcompose 函数。在内部，这会触发最后一步。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// https://cs.android.com/androidx/platform/frameworks/support/+/8d08d42d60f7cc7ec0034d0b7ff6fd953516d96a:compose/ui/ui/src/commonMain/kotlin/androidx/compose/ui/layout/SubcomposeLayout.kt;l=1186</span>
</span><span class='line'><span class="c1">// Simplified from LayoutNodeSubcompositionsState inside SubcomposeLayout.kt</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">NodeState</span><span class="p">.</span><span class="n">applyPausedPrecomposition</span><span class="p">(</span><span class="n">shouldComplete</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">pausedComposition</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">pausedComposition</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">pausedComposition</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 1. If the work must be completed now...</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">shouldComplete</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// ...force the composition to finish by looping `resume`</span>
</span><span class='line'>            <span class="c1">// and always passing `false` to the `shouldPause` callback.</span>
</span><span class='line'>            <span class="k">while</span> <span class="p">(!</span><span class="n">pausedComposition</span><span class="p">.</span><span class="n">isComplete</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">pausedComposition</span><span class="p">.</span><span class="n">resume</span> <span class="p">{</span> <span class="k">false</span> <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">// 2. Apply the changes to the real UI tree.</span>
</span><span class='line'>        <span class="n">pausedComposition</span><span class="p">.</span><span class="n">apply</span><span class="p">()</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">pausedComposition</span> <span class="p">=</span> <span class="k">null</span> <span class="c1">// Clear the handle.</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当某个项目可见时，其组合不再是低优先级的后台任务，而是高优先级的同步任务。shouldComplete = true 参数确保所有剩余的组合工作立即完成，无需暂停。然后，apply() 被调用，完整的 UI 会立即显示在屏幕上。</p>

<p>它们如何协同工作：</p>

<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1751799217100/82837ef0-e97e-49c7-bee6-cd68ab1804ba.png?auto=compress,format&amp;format=webp" alt="LazyList滚动时序图" /></p>

<h2>结论</h2>

<p>深入研究 Compose 运行时后，PausableComposition 的设计堪称性能工程的杰作。</p>

<ul>
<li>它并非魔法，而是延迟：其核心理念是在紧急任务之前完成。通过在空闲时间合成项目，快速滚动时主线程所需的工作量会大大减少。</li>
<li>协作式和非阻塞式：shouldPause 回调是处理多任务的绝佳方式。它可以让长时间运行的合成任务优雅地让位于更紧急的当前帧渲染任务，从而直接防止卡顿。</li>
<li>通过批处理提高效率：RecordingApplier 通过将 UI 树中的许多小的独立更改分组为单个高效的更新，避免了这些更改带来的开销。</li>
</ul>


<p>虽然 PausableComposition 是一个你可能永远不会直接使用的内部功能，但了解它的存在和运作方式，可以让你真正体会到 Jetpack Compose 如此高性能的明智决策。下次你轻松流畅地滚动浏览复杂的 LazyColumn 时，你就会体会到这巧妙且精心编排的“舞蹈”是如何在表面之下进行的。✅ 这种架构不仅解决了当前的性能挑战，还为 Compose 未来更先进的渲染策略铺平了道路。</p>

<p>希望你已经了解了这个新 API 在 Jetpack Compose 中的工作原理。</p>

<p>太棒了！希望你从中获得了一些宝贵的见解。如果你喜欢这篇文章，请分享 😉，因为……</p>

<p>“分享即关爱”</p>

<p>谢谢！😄</p>

<p>让我们一起回顾 X （链接：<a href="https://twitter.com/imShreyasPatil%EF%BC%89%E7%9A%84%E6%9C%80%E6%96%B0%E5%8A%A8%E6%80%81%EF%BC%8C%E6%88%96%E8%80%85%E8%AE%BF%E9%97%AE%E6%88%91%E7%9A%84%E7%BD%91%E7%AB%99%EF%BC%88%E9%93%BE%E6%8E%A5%EF%BC%9Ahttps://shreyaspatil.dev/%EF%BC%89%E4%BA%86%E8%A7%A3%E6%9B%B4%E5%A4%9A%E5%85%B3%E4%BA%8E%E6%88%91%E7%9A%84%E4%BF%A1%E6%81%AF">https://twitter.com/imShreyasPatil%EF%BC%89%E7%9A%84%E6%9C%80%E6%96%B0%E5%8A%A8%E6%80%81%EF%BC%8C%E6%88%96%E8%80%85%E8%AE%BF%E9%97%AE%E6%88%91%E7%9A%84%E7%BD%91%E7%AB%99%EF%BC%88%E9%93%BE%E6%8E%A5%EF%BC%9Ahttps://shreyaspatil.dev/%EF%BC%89%E4%BA%86%E8%A7%A3%E6%9B%B4%E5%A4%9A%E5%85%B3%E4%BA%8E%E6%88%91%E7%9A%84%E4%BF%A1%E6%81%AF</a> 😎。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SnapshotFlow还是collectAsState？对于Jetpack Compose来说哪个更香？]]></title>
    <link href="https://alexhilton.github.io/blog/2025/07/16/snapshotflow-or-collectasstate/"/>
    <updated>2025-07-16T22:31:22+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/07/16/snapshotflow-or-collectasstate</id>
    <content type="html"><![CDATA[<p>本文译自「SnapshotFlow or collectAsState? How to pick the right tool for Jetpack Compose」，原文链接<a href="https://proandroiddev.com/snapshotflow-or-collectasstate-how-to-pick-the-right-tool-for-jetpack-compose-d6f1cc9d2123">https://proandroiddev.com/snapshotflow-or-collectasstate-how-to-pick-the-right-tool-for-jetpack-compose-d6f1cc9d2123</a>，由Dmitry Glazunov发布于2025年7月7日。</p>

<p><a href="https://alexhilton.github.io/blog/2025/07/16/snapshotflow-or-collectasstate/"><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/0*P0darOG2IeBIDWdY" title="auto auto" ></a></p>

<!-- more -->


<p>构建 UI 可能感觉很简单，直到需要订阅状态变化并有效处理副作用时之前。许多开发者过度使用 collectAsState，导致延迟和意外的重组（reComposition）。还有一些人听说过 snapshotFlow，但却不太明白既然 StateFlow 和 collectAsState 已经存在，为什么还需要它？</p>

<p>在这篇文章中，我将通过探索实际项目中简短且实用的示例，分享我对何时使用 snapshotFlow 以及何时更适合使用 collectAsState 的看法，帮助你避免项目中隐藏的 bug 和性能问题。</p>

<p>让我们来详细分析一下。</p>

<h2>collectAsState 的作用</h2>

<p>collectAsState 在 Compose 中订阅 Flow，并自动将其公开为State，以便在 UI 中轻松显示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">uiState</span> <span class="k">by</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">uiStateFlow</span><span class="p">.</span><span class="n">collectAsState</span><span class="p">()</span>
</span><span class='line'><span class="n">Text</span><span class="p">(</span><span class="n">uiState</span><span class="p">.</span><span class="n">text</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>要点：</p>

<ul>
<li>非常易于使用。</li>
<li>重组时自动取消并重新开始收集。</li>
<li>非常适合 ViewModel → UI 数据绑定。</li>
</ul>


<p>但是：</p>

<ul>
<li>每次发出新数据时都会触发重组，哪怕只是发生了微小的变化。</li>
<li>可组合项进入重组状态后立即开始收集。</li>
<li>不适用于观察 Compose 特有的状态，例如滚动或手势。</li>
</ul>


<h2>快照流 (snapshotFlow) 的作用</h2>

<p>快照流 (snapshotFlow) 将 Compose 状态（例如 LazyListState 、 derivedStateOf ）转换为冷流 (cold Flow)，让你无需进行不必要的重组即可对状态变化做出反应：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">listState</span> <span class="p">=</span> <span class="n">rememberLazyListState</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">snapshotFlow</span> <span class="p">{</span> <span class="n">listState</span><span class="p">.</span><span class="n">firstVisibleItemIndex</span> <span class="p">}</span>
</span><span class='line'>        <span class="p">.</span><span class="n">distinctUntilChanged</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">collect</span> <span class="p">{</span> <span class="n">index</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="n">analytics</span><span class="p">.</span><span class="n">logScrollPosition</span><span class="p">(</span><span class="n">index</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>要点：</p>

<ul>
<li>非常适合 Compose 状态变化的副作用。</li>
<li>不会触发重组。</li>
<li>可在 LaunchedEffect 或协程中使用。</li>
</ul>


<p>但是：</p>

<ul>
<li>不会公开状态以进行直接 UI 渲染。</li>
<li>不会替代 CollectAsState 来实现 ViewModel → UI 更新。</li>
</ul>


<h2>何时使用 collectAsState</h2>

<ul>
<li>从 ViewModel 订阅 UI 的 Flow 或 StateFlow。</li>
<li>在 UI 中显示数据（文本、加载状态、获取的数据）。</li>
<li>用户需要看到的低频更新。</li>
</ul>


<p>避免使用：</p>

<ul>
<li>高频更新（滚动偏移、传感器数据）。</li>
<li>触发不需要 UI 更新的副作用。</li>
</ul>


<h2>何时使用 snaphotFlow</h2>

<ul>
<li>响应 Compose 状态（滚动、手势、动画）。</li>
<li>触发副作用但不会导致重组。</li>
<li>从 Compose 状态构建 Flow 管道（分析、延迟加载触发器）。</li>
</ul>


<p>避免使用：</p>

<ul>
<li>直接 UI 数据渲染。</li>
<li>用 viewModel → UI 流替换 collectAsState。</li>
</ul>


<h2>snapshotFlow 的实用示例</h2>

<p>错误体位：使用 snaphotFlow.collectAsState 进行动画进度</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">progress</span> <span class="k">by</span> <span class="n">snapshotFlow</span> <span class="p">{</span> <span class="n">animationState</span><span class="p">.</span><span class="n">progress</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">.</span><span class="n">collectAsState</span><span class="p">(</span><span class="n">initial</span> <span class="p">=</span> <span class="m">0f</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">Text</span><span class="p">(</span><span class="s">&quot;Progress: ${(progress * 100).toInt()}%&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用 snaphotFlow 和 collectAsState 来驱动动画进度的 UI 更新会导致每一帧都重新合成，从而导致卡顿，违背了 snaphotFlow 的初衷。</p>

<p>正确姿式：使用 snaphotFlow 在动画过程中进行分析</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">snapshotFlow</span> <span class="p">{</span> <span class="n">animationState</span><span class="p">.</span><span class="n">progress</span> <span class="p">}</span>
</span><span class='line'>        <span class="p">.</span><span class="n">distinctUntilChanged</span> <span class="p">{</span> <span class="n">old</span><span class="p">,</span> <span class="n">new</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="p">(</span><span class="n">old</span> <span class="p">*</span> <span class="m">100</span><span class="p">).</span><span class="n">toInt</span><span class="p">()</span> <span class="p">==</span> <span class="p">(</span><span class="n">new</span> <span class="p">*</span> <span class="m">100</span><span class="p">).</span><span class="n">toInt</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="p">.</span><span class="n">collect</span> <span class="p">{</span> <span class="n">progress</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="n">analytics</span><span class="p">.</span><span class="n">logAnimationProgress</span><span class="p">(</span><span class="n">progress</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这会跟踪动画进度，以便进行分析或记录，而不会触发 UI 重构。</p>

<h2>collectAsState 的实用示例</h2>

<p>错误体位：将 collectAsState 用于高频滚动数据</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">scrollOffset</span> <span class="k">by</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">scrollOffsetFlow</span><span class="p">.</span><span class="n">collectAsState</span><span class="p">()</span>
</span><span class='line'><span class="n">Text</span><span class="p">(</span><span class="s">&quot;Offset: $scrollOffset&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这会在滚动的每个像素上触发重新合成，导致 CPU 过载。</p>

<p>正确姿式：使用 collectAsState 获取有意义的 UI 数据</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">userName</span> <span class="k">by</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">userNameFlow</span><span class="p">.</span><span class="n">collectAsState</span><span class="p">()</span>
</span><span class='line'><span class="n">Text</span><span class="p">(</span><span class="s">&quot;Hello, $userName!&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这适用于显示用户需要查看且不经常更改的数据。</p>

<h2>结论</h2>

<p>collectAsState 和 snapshotFlow 相辅相成：</p>

<ul>
<li>使用 collectAsState 在 UI 中显示 ViewModel 数据。</li>
<li>使用 snapshotFlow 响应 Compose 状态变化的副作用，而无需触发重组。</li>
</ul>


<p>正确使用它们将帮助你避免不必要的重组，提升应用的响应速度，并保持 Compose 代码简洁、可扩展且可预测。</p>

<p>如果你觉得本文分析有用，请随时关注我以获取更多见解。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为什么你的App总是忘记所有事情]]></title>
    <link href="https://alexhilton.github.io/blog/2025/07/11/app-keep-forgetting/"/>
    <updated>2025-07-11T23:20:20+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/07/11/app-keep-forgetting</id>
    <content type="html"><![CDATA[<p>本文译自「Why Your App Keeps Forgetting Everything」，原文链接<a href="https://medium.com/mobile-app-development-publication/why-your-app-keeps-forgetting-everything-aa9ad8dd8f6b">https://medium.com/mobile-app-development-publication/why-your-app-keeps-forgetting-everything-aa9ad8dd8f6b</a>，由Android Dev Nexus发布于2025年6月13日。</p>

<p><a href="https://alexhilton.github.io/blog/2025/07/11/app-keep-forgetting/"><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*OqqSvUytY9D0D4EIX_Cn0A.png" title="auto auto" ></a></p>

<!-- more -->


<p>不知你有没有发现了一个让许多 Android 开发者困惑的关键问题：ViewModel 和 savedInstanceState 解决的是不同的问题，并且拥有不同的生命周期。</p>

<p>让我来解释一下你的测试中究竟发生了什么，以及为什么这两种机制都存在。</p>

<h2>Android 中的两种“死亡”类型</h2>

<p>Android 应用可以通过两种截然不同的方式“死亡”：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*1-DtrKgBiEVyWj0RgbaNoQ.png" alt="" /></p>

<h3>1. 配置变更（屏幕旋转等）</h3>

<ul>
<li>Activity/Fragment：死亡并重建</li>
<li>ViewModel：幸存！🎉</li>
<li>savedInstanceState：也幸存，但此时你并不需要它</li>
</ul>


<h3>2. 进程死亡（应用最小化、内存不足等）</h3>

<ul>
<li>Activity/Fragment：死亡</li>
<li>ViewModel：也死亡！💀</li>
<li>savedInstanceState：幸存并成为你的生命线</li>
</ul>


<h2>测试结果不撒谎</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// 进程死亡时会发生什么:</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 最小化应用程序之前:</span>
</span><span class='line'><span class="k">class</span> <span class="nc">MyViewModel</span> <span class="p">:</span> <span class="n">ViewModel</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">userData</span> <span class="p">=</span> <span class="s">&quot;Important data&quot;</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">counter</span> <span class="p">=</span> <span class="m">42</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 重新打开应用程序后:</span>
</span><span class='line'><span class="c1">// - 新的 ViewModel 实例已创建（旧数据已消失）</span>
</span><span class='line'><span class="c1">// - 但是 onCreate() 接收了已保存数据的 savedInstanceState 包</span>
</span><span class='line'><span class="c1">// - 你需要手动从 savedInstanceState 恢复 ViewModel</span>
</span></code></pre></td></tr></table></div></figure>


<p>你猜测的完全正确：ViewModel 需要额外的步骤来存储/恢复数据，即使进程终止。</p>

<h2>完整的解决方案：两者结合</h2>

<p>以下是现代 Android 开发处理这个双层系统的方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">class</span> <span class="nc">MainActivity</span> <span class="p">:</span> <span class="n">AppCompatActivity</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="n">lateinit</span> <span class="k">var</span> <span class="py">viewModel</span><span class="p">:</span> <span class="n">MyViewModel</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">super</span><span class="p">.</span><span class="n">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">viewModel</span> <span class="p">=</span> <span class="n">ViewModelProvider</span><span class="p">(</span><span class="k">this</span><span class="p">)[</span><span class="n">MyViewModel</span><span class="o">::</span><span class="k">class</span><span class="p">.</span><span class="n">java</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 检查我们是否正在从进程死亡中恢复</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">savedInstanceState</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">isEmpty</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 从 savedInstanceState 恢复 ViewModel</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">userData</span> <span class="p">=</span> <span class="n">savedInstanceState</span><span class="p">.</span><span class="n">getString</span><span class="p">(</span><span class="s">&quot;user_data&quot;</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">counter</span> <span class="p">=</span> <span class="n">savedInstanceState</span><span class="p">.</span><span class="n">getInt</span><span class="p">(</span><span class="s">&quot;counter&quot;</span><span class="p">,</span> <span class="m">0</span><span class="p">)</span>
</span><span class='line'>            <span class="n">viewModel</span><span class="p">.</span><span class="n">restoreFromSavedState</span><span class="p">(</span><span class="n">userData</span><span class="p">,</span> <span class="n">counter</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onSaveInstanceState</span><span class="p">(</span><span class="n">outState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">super</span><span class="p">.</span><span class="n">onSaveInstanceState</span><span class="p">(</span><span class="n">outState</span><span class="p">)</span>
</span><span class='line'>        <span class="c1">// 保存关键的 ViewModel 数据以避免进程死亡</span>
</span><span class='line'>        <span class="n">outState</span><span class="p">.</span><span class="n">putString</span><span class="p">(</span><span class="s">&quot;user_data&quot;</span><span class="p">,</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">userData</span><span class="p">)</span>
</span><span class='line'>        <span class="n">outState</span><span class="p">.</span><span class="n">putInt</span><span class="p">(</span><span class="s">&quot;counter&quot;</span><span class="p">,</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">counter</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MyViewModel</span> <span class="p">:</span> <span class="n">ViewModel</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">userData</span><span class="p">:</span> <span class="n">String</span> <span class="p">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">counter</span><span class="p">:</span> <span class="n">Int</span> <span class="p">=</span> <span class="m">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">isEmpty</span><span class="p">():</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="n">userData</span><span class="p">.</span><span class="n">isEmpty</span><span class="p">()</span> <span class="p">&amp;&amp;</span> <span class="n">counter</span> <span class="p">==</span> <span class="m">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">restoreFromSavedState</span><span class="p">(</span><span class="n">userData</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">counter</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">userData</span> <span class="p">=</span> <span class="n">userData</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">counter</span> <span class="p">=</span> <span class="n">counter</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>当每个机制生效时</h2>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*dmQnYfNrJik_bbpuNT7bzQ.png" alt="" /></p>

<p>让我来向你展示一下不同场景下的具体情况：</p>

<h3>场景 1：屏幕旋转</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'>Before rotation:
</span><span class='line'>- ViewModel: Alive with data ✅
</span><span class='line'>- savedInstanceState: Gets saved but not really needed
</span><span class='line'>
</span><span class='line'>After rotation:
</span><span class='line'>- ViewModel: Same instance, data intact ✅
</span><span class='line'>- savedInstanceState: Available but redundant
</span><span class='line'>- Result: ViewModel data is immediately available
</span></code></pre></td></tr></table></div></figure>


<h3>场景2：应用程序最小化→重新打开（进程死亡）</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'>Before minimizing:
</span><span class='line'>- ViewModel: Alive with data ✅
</span><span class='line'>- onSaveInstanceState<span class="o">()</span>: Saves critical data to Bundle
</span><span class='line'>After reopening:
</span><span class='line'>- ViewModel: NEW instance, no data ❌
</span><span class='line'>- savedInstanceState: Contains saved data ✅
</span><span class='line'>- Result: Must restore ViewModel from savedInstanceState
</span></code></pre></td></tr></table></div></figure>


<h3>场景 3：应用程序最小化 → 重新打开（进程存活）</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'>Before minimizing:
</span><span class='line'>- ViewModel: Alive with data ✅
</span><span class='line'>After reopening:
</span><span class='line'>- ViewModel: Same instance, data intact ✅
</span><span class='line'>- savedInstanceState: null <span class="o">(</span>no recreation happened<span class="o">)</span>
</span><span class='line'>- Result: ViewModel data is immediately available
</span></code></pre></td></tr></table></div></figure>


<h2>那么，为什么存在这个双层系统？</h2>

<p>ViewModel 处理常见情况：</p>

<ul>
<li>复杂的 UI 状态，你不希望在频繁旋转屏幕时丢失。</li>
<li>任何需要耗费大量资源重新创建的内容。</li>
</ul>


<p>savedInstanceState 处理特殊情况：</p>

<ul>
<li>进程死亡难以预测。但当它发生时，用户希望其状态能够持久保存。</li>
<li>小而关键的数据片段（例如用户输入、滚动位置）。</li>
<li>简单的 UI 状态，对用户体验至关重要。</li>
</ul>


<h2>Bundle 大小的现实检验</h2>

<p>以下是一些可以帮你免去调试麻烦的事情：Bundle 并非无限大的存储空间。你大约有 1MB 的空间可用，超过这个限制会导致
崩溃，让你质疑自己的人生选择。</p>

<p>保持 onSavedInstanceState 数据精简。保存用户写到一半的电子邮件草稿，而不是整个联系人列表。</p>

<h2>现代方法：SavedStateHandle</h2>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*ThuE7YpnrtfFQe2fwDlbDg.png" alt="" /></p>

<p>Google 意识到这种手动操作非常繁琐，因此他们创建了 SavedStateHandle ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">class</span> <span class="nc">MyViewModel</span><span class="p">(</span><span class="k">private</span> <span class="k">val</span> <span class="py">savedStateHandle</span><span class="p">:</span> <span class="n">SavedStateHandle</span><span class="p">)</span> <span class="p">:</span> <span class="n">ViewModel</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 这将自动保留配置更改和进程终止！</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">userData</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>        <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="n">savedStateHandle</span><span class="p">.</span><span class="k">get</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;(</span><span class="s">&quot;user_data&quot;</span><span class="p">)</span> <span class="o">?:</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>        <span class="k">set</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="p">=</span> <span class="n">savedStateHandle</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="s">&quot;user_data&quot;</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="py">counter</span><span class="p">:</span> <span class="n">Int</span>
</span><span class='line'>        <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="n">savedStateHandle</span><span class="p">.</span><span class="k">get</span><span class="p">&lt;</span><span class="n">Int</span><span class="p">&gt;(</span><span class="s">&quot;counter&quot;</span><span class="p">)</span> <span class="o">?:</span> <span class="m">0</span>
</span><span class='line'>        <span class="k">set</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="p">=</span> <span class="n">savedStateHandle</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="s">&quot;counter&quot;</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 无需手动恢复！</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>对于以下情况，为什么仍然需要手动 onSaveInstanceState？</h2>

<h3>1. 不属于 ViewModel 的 UI 特定状态</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">override</span> <span class="k">fun</span> <span class="nf">onSaveInstanceState</span><span class="p">(</span><span class="n">outState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">super</span><span class="p">.</span><span class="n">onSaveInstanceState</span><span class="p">(</span><span class="n">outState</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">// 这些不属于你的业务逻辑层</span>
</span><span class='line'>    <span class="n">outState</span><span class="p">.</span><span class="n">putInt</span><span class="p">(</span><span class="s">&quot;scroll_position&quot;</span><span class="p">,</span> <span class="n">recyclerView</span><span class="p">.</span><span class="n">computeVerticalScrollOffset</span><span class="p">())</span>
</span><span class='line'>    <span class="n">outState</span><span class="p">.</span><span class="n">putBoolean</span><span class="p">(</span><span class="s">&quot;is_toolbar_expanded&quot;</span><span class="p">,</span> <span class="n">collapsingToolbar</span><span class="p">.</span><span class="n">isExpanded</span><span class="p">)</span>
</span><span class='line'>    <span class="n">outState</span><span class="p">.</span><span class="n">putParcelable</span><span class="p">(</span><span class="s">&quot;dialog_state&quot;</span><span class="p">,</span> <span class="n">currentDialog</span><span class="o">?.</span><span class="n">onSaveInstanceState</span><span class="p">())</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2. Fragment 参数和 Activity Extras</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// 这些需要在进程终止后继续存在，但不是 ViewModel 状态</span>
</span><span class='line'><span class="k">class</span> <span class="nc">DetailFragment</span> <span class="p">:</span> <span class="n">Fragment</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">companion</span> <span class="k">object</span> <span class="err">{</span>
</span><span class='line'>        <span class="k">fun</span> <span class="nf">newInstance</span><span class="p">(</span><span class="n">itemId</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">=</span> <span class="n">DetailFragment</span><span class="p">().</span><span class="n">apply</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">arguments</span> <span class="p">=</span> <span class="n">Bundle</span><span class="p">().</span><span class="n">apply</span> <span class="p">{</span>  <span class="c1">// 这在内部使用 savedInstanceState</span>
</span><span class='line'>                <span class="n">putString</span><span class="p">(</span><span class="s">&quot;item_id&quot;</span><span class="p">,</span> <span class="n">itemId</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3. 视图状态过于特定于 UI</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// 诸如 EditText 光标位置、焦点状态等。</span>
</span><span class='line'><span class="k">override</span> <span class="k">fun</span> <span class="nf">onSaveInstanceState</span><span class="p">(</span><span class="n">outState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">super</span><span class="p">.</span><span class="n">onSaveInstanceState</span><span class="p">(</span><span class="n">outState</span><span class="p">)</span>
</span><span class='line'>    <span class="n">outState</span><span class="p">.</span><span class="n">putInt</span><span class="p">(</span><span class="s">&quot;edit_text_selection_start&quot;</span><span class="p">,</span> <span class="n">editText</span><span class="p">.</span><span class="n">selectionStart</span><span class="p">)</span>
</span><span class='line'>    <span class="n">outState</span><span class="p">.</span><span class="n">putInt</span><span class="p">(</span><span class="s">&quot;edit_text_selection_end&quot;</span><span class="p">,</span> <span class="n">editText</span><span class="p">.</span><span class="n">selectionEnd</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>把手弄脏（动手试一试）</h2>

<p>你可以强制终止进程进行测试：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Kill your app process </span>
</span><span class='line'>adb shell am <span class="nb">kill </span>com.yourpackage.name
</span><span class='line'><span class="c"># Or use &quot;Don&#39;t keep activities&quot; in Developer Options</span>
</span></code></pre></td></tr></table></div></figure>


<p>这将帮助你验证状态恢复是否正确进行。</p>

<h2>关键洞察</h2>

<p>ViewModel 非常适合配置更改，但需要帮助应对进程死亡。</p>

<p>现代方法是在 ViewModel 中使用 SavedStateHandle，它可以自动处理这两种情况。如果你尚未使用它，则需要手动执行 savedInstanceState → ViewModel 的恢复过程。</p>

<p>这个双层系统看似复杂，但实际上非常优雅：常见情况（配置更改）的快速恢复，以及罕见情况（进程死亡）的可靠恢复。</p>

<p>祝你编码愉快，愿你的状态始终持久！🚀</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用优雅的姿式应对Kotlin Flow的回压]]></title>
    <link href="https://alexhilton.github.io/blog/2025/07/03/handling-flow-backpress/"/>
    <updated>2025-07-03T22:09:26+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/07/03/handling-flow-backpress</id>
    <content type="html"><![CDATA[<p>本文译自「How to Manage Backpressure in Kotlin Flow: collect • buffer • conflate • collectLatest」，原文链接<a href="https://proandroiddev.com/how-to-manage-backpressure-in-kotlin-flow-collect-buffer-conflate-collectlatest-b8102284d968">https://proandroiddev.com/how-to-manage-backpressure-in-kotlin-flow-collect-buffer-conflate-collectlatest-b8102284d968</a>，由Shbazhenov发布于2025年6月13日。</p>

<p><a href="https://alexhilton.github.io/blog/2025/07/03/handling-flow-backpress/"><img src="https://blog.mindorks.com/images/kotlin-flow-banner-image.png" title="auto auto" ></a></p>

<!-- more -->


<p>你是否曾遇到过快速数据源发送的数据量超出应用处理能力的情况，导致应用速度变慢甚至崩溃？Kotlin Flow 内置了一些方法，可让你的生产者和消费者保持同步。本文将介绍：</p>

<ol>
<li>回压的含义</li>
<li>Flow 默认的“互相等待”模式如何工作</li>
<li>何时使用 buffer() 添加小型队列</li>
<li>conflate() 如何跳过旧数据项</li>
<li>为什么 collectLatest { } 会停止旧数据处理</li>
<li>如何根据你的情况选择合适的选项</li>
</ol>


<h2>回压的含义</h2>

<p>回压的作用是确保快速的数据发送方不会压垮较慢的接收方。如果没有回压，你可能会在内存中存储过多的数据，或者浪费时间处理过时的信息。</p>

<p>回压可以帮助你：</p>

<ul>
<li>控制内存使用量</li>
<li>避免不必要的工作</li>
<li>使应用性能更可预测</li>
</ul>


<h2>1. 默认“互相等待”模式</h2>

<p>默认情况下，当你执行以下操作时：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">flow</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">repeat</span><span class="p">(</span><span class="m">3</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">emit</span><span class="p">(</span><span class="n">it</span><span class="p">)</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Sent $it&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">delay</span><span class="p">(</span><span class="m">100</span><span class="p">)</span>            <span class="c1">// 快速的发送者</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">.</span><span class="n">collect</span> <span class="p">{</span> <span class="n">value</span> <span class="p">-&gt;</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot;Handling $value&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">delay</span><span class="p">(</span><span class="m">300</span><span class="p">)</span>             <span class="c1">// 慢速的处理者</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>发送方 ( emit ) 将暂停，直到处理方 ( collect ) 处理完最后一个值。没有队列，每个值都是一次发送和处理一个。</p>

<h2>2. 使用 buffer() 添加一个小队列</h2>

<p>如果你希望发送方提前一点，请使用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">flow</span> <span class="p">{</span> <span class="err">…</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">.</span><span class="n">buffer</span><span class="p">(</span><span class="n">capacity</span> <span class="p">=</span> <span class="m">2</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="n">collect</span> <span class="p">{</span> <span class="n">value</span> <span class="p">-&gt;</span>
</span><span class='line'>    <span class="c1">// slow work here</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>现在，发送者最多可以将 2 个项目放入一个小队列中。</li>
<li>一旦队列满了，它就会再次暂停。</li>
</ul>


<p>这给了你一个有限的队列：你仍然可以处理每个项目，但可以平滑速度峰值。</p>

<h2>3. 使用 conflate() 跳过旧项目</h2>

<p>当你只关心最新数据（例如更新进度条）时，你可以这样写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">flow</span> <span class="p">{</span> <span class="err">…</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">.</span><span class="n">conflate</span><span class="p">()</span>
</span><span class='line'>  <span class="p">.</span><span class="n">collect</span> <span class="p">{</span> <span class="n">value</span> <span class="p">-&gt;</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Update to $value&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">delay</span><span class="p">(</span><span class="m">300</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>如果处理程序繁忙，则仅保留最新未处理的项目。</li>
<li>较旧的项目将被丢弃，因此你无需处理过时的更新。</li>
</ul>


<p>注意：conflate() 不会停止当前工作；它只是在下次读取时跳过旧值。</p>

<h2>4. 使用 collectLatest { } 停止旧工作</h2>

<p>要进一步操作并在新数据进入时取消任何正在进行的工作，请使用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">flow</span> <span class="p">{</span> <span class="err">…</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">.</span><span class="n">collectLatest</span> <span class="p">{</span> <span class="n">value</span> <span class="p">-&gt;</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Start $value&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">delay</span><span class="p">(</span><span class="m">300</span><span class="p">)</span>    <span class="c1">// 可能会被切断</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Done $value&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>每次发出（emit）新的数据时，处理前一个值的块都会立即被丢弃。</li>
<li>只有当发送方的发送速度持续超出你的处理能力时，你才需要完成最后一个值的工作。</li>
</ul>


<p>这非常适合边输入边搜索的情况，在这种情况下，你希望在用户再次输入时立即丢弃旧请求。</p>

<h2>5. 选择合适的工具</h2>

<h3>普通 collect</h3>

<ul>
<li>功能：发送方和处理方互相等待，一个接一个</li>
<li>何时选择它：你必须按顺序处理每个项目

<h3>.buffer(n)</h3></li>
<li>功能：大小为 n 的小队列；不丢弃任何项目</li>
<li>何时选择它：你需要少量缓冲，但仍要处理所有项目

<h3>.conflate()</h3></li>
<li>功能：如果处理方繁忙，则仅保留最新项目</li>
<li>何时选择它：你需要最新数据，但仍要完成当前工作

<h3>collectLatest { }</h3></li>
<li>功能：新数据到达后立即取消所有正在进行的工作</li>
<li>何时选择它：只考虑最新的结果；立即放下其他一切

<h2>6. 总结</h2></li>
<li>回压机制可防止快速数据流过载慢速处理器。</li>
<li>默认模式没有队列：安全但速度可能较慢。</li>
<li>buffer() 函数添加了一个小队列：更灵活，不会丢包。</li>
<li>conflate() 函数跳过旧值：始终保持最新，但让当前工作完成。</li>
<li>collectLatest { } 函数停止旧工作：仅完成最新项。</li>
</ul>


<p>下次你的 Flow 感觉太快或太慢时，请问自己：</p>

<ol>
<li>我需要处理每个值吗？</li>
<li>小型队列有帮助吗？</li>
<li>只有最新数据才重要吗？</li>
<li>当新数据到达时，我应该取消旧工作吗？</li>
</ol>


<p>选择最合适的简单选项，Kotlin Flow 会处理余下的事情。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Kotlin ViewModel中正确处理相同的UI组件交互]]></title>
    <link href="https://alexhilton.github.io/blog/2025/07/01/handling-ui-action/"/>
    <updated>2025-07-01T22:34:20+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/07/01/handling-ui-action</id>
    <content type="html"><![CDATA[<p>本文译自「Handling UI Actions the Right Way in Kotlin ViewModels」，原文链接<a href="https://proandroiddev.com/handling-ui-actions-the-right-way-in-kotlin-viewmodels-119a06bb43ef">https://proandroiddev.com/handling-ui-actions-the-right-way-in-kotlin-viewmodels-119a06bb43ef</a>，由Vaibhav Jaiswal发布于2025年4月16日。</p>

<p><a href="https://alexhilton.github.io/blog/2025/07/01/handling-ui-action/"><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*MLROq8NAKOSnutBMj3WivQ.png" title="auto auto" ></a></p>

<!-- more -->


<h2>缘起</h2>

<p>作为Android开发者，我们经常会遇到需要在多个ViewModel中实现相同或者非常类似UI功能的情况。</p>

<p>例如，我们有多个页面，它们具有类似的功能，例如显示帖子、撰写评论或处理用户交互。</p>

<p>在每个ViewModel中分别处理这些UI交互很快就会变得混乱，导致大量的代码重复。随着应用规模的扩大和页面数量的增加，这个问题会变得更加棘手，导致代码库难以维护，并带来可扩展性问题。</p>

<p>对于这种代码重复问题，我们Android开发者常用的几种常见解决方案包括：</p>

<ul>
<li>额外的辅助类方法</li>
<li>“继承”或“使用委托的组合”方法</li>
</ul>


<p>在以下章节中，我们将详细探讨这些解决方案，了解每种方法如何解决代码重复问题，并重点介绍每种方法的局限性。然后，我们将深入探讨我的解决方案，它基于这些想法，并解决了它们的局限性，从而实现了更高效的UI交互管理。</p>

<blockquote><p>这个解决方案我已经在<a href="https://medial.app/"> Medial 的应用</a>（链接 <a href="https://medial.app/%EF%BC%89%E4%BB%A3%E7%A0%81%E5%BA%93%E4%B8%AD%E4%BD%BF%E7%94%A8%E8%BF%87%E4%BA%86%E2%80%94%E2%80%94%E5%B0%86">https://medial.app/%EF%BC%89%E4%BB%A3%E7%A0%81%E5%BA%93%E4%B8%AD%E4%BD%BF%E7%94%A8%E8%BF%87%E4%BA%86%E2%80%94%E2%80%94%E5%B0%86</a> UI交互处理代码变成了近乎即插即用的体验。</p></blockquote>

<p>我的解决方案根本不建议使用 BaseViewModel，也不基于 BaseViewModel。BaseViewModel 只是一个例子，用来说明我们可以使用从任何其他类/接口继承的功能，这些类/接口可以是 BaseViewModel、ViewModel、Decompose 的 ComponentContext 或其他任何东西。</p>

<h2>⚡️ TL;DR: 处理ViewModel中的共享UI交互</h2>

<p>当在多个页面上显示相同的UI组件时，在每个ViewModel中处理它们的交互会导致重复和逻辑混乱。我们探索了三种方法来解决这个问题：</p>

<ol>
<li>辅助类方法</li>
<li>➖ 简单，但无法覆写任何行为</li>
<li>➖ 并非ViewModel的直接功能</li>
<li>通过 Kotlin 委托进行组合</li>
<li>✅ 更好的设计，支持覆写行为。</li>
<li>➖ 无法访问viewModelScope或其他ViewModel功能。</li>
<li>➖ 无法从任何其他继承类访问任何内容。</li>
<li>💡 我的解决方案 — 使用带有默认函数的接口</li>
<li>✅ 简洁、可复用，支持覆写（Override）行为。</li>
<li>✅ 完全访问ViewModel功能或任何其他继承类的功能。</li>
<li>✅ 只需从接口实现即可轻松插入任何 ViewModel</li>
</ol>


<p>本博客中的所有解决方案均在<a href="https://github.com/Vaibhav2002/Ui-Intreraction-Handler-Sample">此示例项目</a>（链接 <a href="https://github.com/Vaibhav2002/Ui-Intreraction-Handler-Sample%EF%BC%89%E4%B8%AD%E5%AE%9E%E7%8E%B0%EF%BC%9A">https://github.com/Vaibhav2002/Ui-Intreraction-Handler-Sample%EF%BC%89%E4%B8%AD%E5%AE%9E%E7%8E%B0%EF%BC%9A</a></p>

<h2>🏗️ 设置</h2>

<p>假设我们有一个后置UI 元素，它有一些UI 交互，并像 MVI 建议的那样，在一个密封的界面中呈现。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">sealed</span> <span class="n">interface</span> <span class="n">PostAction</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">Clicked</span><span class="p">(</span><span class="k">val</span> <span class="py">id</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">:</span> <span class="n">PostAction</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">LikeClicked</span><span class="p">(</span><span class="k">val</span> <span class="py">id</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">:</span> <span class="n">PostAction</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">ShareClicked</span><span class="p">(</span><span class="k">val</span> <span class="py">id</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">:</span> <span class="n">PostAction</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们还有一个 BaseViewModel 类，用于保存每个ViewModel所需的通用功能</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">abstract</span> <span class="k">class</span> <span class="nc">BaseViewModel</span> <span class="p">:</span> <span class="n">ViewModel</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="py">showShackBar</span> <span class="k">by</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">showBottomSheet</span> <span class="k">by</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">navigate</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 实现</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">showSnackbar</span><span class="p">(</span><span class="n">message</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">showSnackBar</span> <span class="p">=</span> <span class="n">message</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>额外的辅助类方法</h3>

<p>在这种方法中，我们创建一个单独的辅助类来封装UI交互的处理。我们将这个类作为ViewModel的一个属性。</p>

<p>首先，我们定义一个辅助类 PostActionHandler 来处理交互。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">class</span> <span class="nc">PostActionHandler</span><span class="p">(</span><span class="k">private</span> <span class="k">val</span> <span class="py">viewModel</span><span class="p">:</span> <span class="n">BaseViewModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">handleAction</span><span class="p">(</span><span class="n">action</span><span class="p">:</span> <span class="n">PostAction</span><span class="p">)</span> <span class="p">=</span> <span class="k">when</span> <span class="p">(</span><span class="n">action</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">PostAction</span><span class="p">.</span><span class="n">Clicked</span> <span class="p">-&gt;</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">navigate</span><span class="p">()</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">PostAction</span><span class="p">.</span><span class="n">LikeClicked</span> <span class="p">-&gt;</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">showSnackBar</span><span class="p">(</span><span class="s">&quot;Liked&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">PostAction</span><span class="p">.</span><span class="n">ShareClicked</span> <span class="p">-&gt;</span> <span class="p">{</span> <span class="cm">/* 实现 */</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在，在 PostScreenViewModel 中我们创建一个 PostActionHandler 实例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">class</span> <span class="nc">PostScreenViewModel</span> <span class="p">:</span> <span class="n">BaseViewModel</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">actionHandler</span> <span class="p">=</span> <span class="n">PostActionHandler</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">PostScreen</span><span class="p">(</span><span class="n">viewModel</span><span class="p">:</span> <span class="n">PostScreenViewModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">PostItem</span><span class="p">(</span><span class="n">onAction</span> <span class="p">=</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">actionHandler</span><span class="o">::</span><span class="n">handleAction</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">PostItem</span><span class="p">(</span><span class="n">onAction</span><span class="p">:</span> <span class="p">(</span><span class="n">PostAction</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>虽然这种方法确实解决了跨多个ViewModel重复代码的问题，但它也存在一些主要缺点，这些缺点包括：</p>

<ul>
<li>🚫 自定义功能有限：由于 PostActionHandler 是一个封装类，我们无法覆写任何行为。</li>
<li>🚫 通过属性访问：我们不是将功能添加到ViewModel本身，而是将其作为ViewModel的一个属性添加。</li>
</ul>


<p><strong>无法覆写（Override）行为是这种方法不建议用于UI交互处理的主要原因。</strong></p>

<h2>🧬 使用 Kotlin 委托进行组合（优雅但受限的解决方案）</h2>

<p>这是互联网上解决这个问题的标准方法，也是最受推荐的方法。该解决方案基于继承，但不是继承自某个类，这样就无法再扩展任何类。我们利用 Kotlin 委托将实现委托给另一个类，这样就无需扩展某个类，也无需再终止继承。</p>

<p>以下是我们实现该解决方案的方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">interface</span> <span class="n">PostActionHandler</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">handleAction</span><span class="p">(</span><span class="n">action</span><span class="p">:</span> <span class="n">PostAction</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">PostActionHandlerImpl</span> <span class="p">:</span> <span class="n">PostActionHandler</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">handleAction</span><span class="p">(</span><span class="n">action</span><span class="p">:</span> <span class="n">PostAction</span><span class="p">)</span> <span class="p">=</span> <span class="k">when</span> <span class="p">(</span><span class="n">action</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">PostAction</span><span class="p">.</span><span class="n">Clicked</span> <span class="p">-&gt;</span> <span class="n">handlePostClick</span><span class="p">(</span><span class="n">action</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">PostAction</span><span class="p">.</span><span class="n">LikeClicked</span> <span class="p">-&gt;</span> <span class="n">handleLikeClick</span><span class="p">(</span><span class="n">action</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">PostAction</span><span class="p">.</span><span class="n">ShareClicked</span> <span class="p">-&gt;</span> <span class="n">handleShareClick</span><span class="p">(</span><span class="n">action</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">fun</span> <span class="nf">handlePostClick</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">fun</span> <span class="nf">handleLikeClick</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">fun</span> <span class="nf">handleShareClick</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这就是我们的使用方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">class</span> <span class="nc">PostViewModel</span> <span class="p">:</span> <span class="n">BaseViewModel</span><span class="p">(),</span> <span class="n">PostActionHandler</span> <span class="k">by</span> <span class="n">PostActionHandlerImpl</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">PostScreen</span><span class="p">(</span><span class="n">viewModel</span><span class="p">:</span> <span class="n">PostViewModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">PostItem</span><span class="p">(</span><span class="n">onAction</span> <span class="p">=</span> <span class="n">viewModel</span><span class="o">::</span><span class="n">handleAction</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">PostItem</span><span class="p">(</span><span class="n">onAction</span><span class="p">:</span> <span class="p">(</span><span class="n">PostAction</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种方法解决了额外辅助类方法中存在的所有问题。</p>

<ul>
<li>✅ 覆写行为：通过使用接口和委托，我们可以轻松地覆写任何行为。</li>
<li>✅ 更简洁的设计：功能直接成为ViewModel的一部分，允许我们像调用原生ViewModel方法一样调用这些函数。</li>
</ul>


<p>然而，这种方法有一个主要缺点，使其在处理UI交互和UI逻辑方面不够完善。</p>

<h3>访问从其他类继承的功能</h3>

<p>此模式的一个主要挑战是我们无法访问从其他类继承的功能，因为我们无法传递引用。</p>

<p>让我们看看这个限制带来了哪些挑战：</p>

<ul>
<li>无法访问ViewModel功能：我们无法从实现类访问任何ViewModel功能。这是因为我们无法在实现类中传递当前类的引用。</li>
<li>无法使用 viewModelScope：此限制带来的一个主要警告是，我们无法使用 viewModelScope，因此无法直接启动协程。我们必须在 viewModel 中创建包装函数，这会破坏可重用性，因为现在可组合函数会调用我们的ViewModel函数。</li>
</ul>


<p>当我们尝试将其作为构造函数参数传递时，Android Studio 会抛出一个错误：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*xcJAyapM8023-hqu06vwUw.png" alt="Kotlin Compiler showing error when passing “this”" /></p>

<h2>🧩 我的解决方案：使用接口默认函数进行组合</h2>

<p>在我自己实现使用委托的 Composition 方案时，我遇到了一个难题：如何传递当前ViewModel的引用来访问viewModelScope 和我的 BaseViewModel 功能。后来我想起了 Kotlin 接口中的默认函数，于是尝试了这个方案，完美地解决了这个问题。</p>

<p>通过这个方案，我可以：</p>

<ul>
<li>💡 支持功能重写</li>
<li>🔗 完全访问我的BaseViewModel和ViewModel 的功能，例如viewModelScope 等，或任何其他类的功能。</li>
<li>❌ 无需单独的实现类</li>
</ul>


<blockquote><p>在我们<a href="https://medial.app/"> Medial 的应用</a>（链接 <a href="https://medial.app/%EF%BC%89%E7%94%9F%E4%BA%A7%E4%BB%A3%E7%A0%81%E4%B8%AD%EF%BC%8C%E6%88%91%E9%9B%86%E6%88%90%E4%BA%86%E8%BF%99%E4%B8%AA%E6%96%B9%E6%A1%88%EF%BC%8C%E4%BB%A5%E7%AE%80%E5%8C%96ViewModel%E5%A4%84%E7%90%86UI%E4%BA%A4%E4%BA%92%E7%9A%84%E6%96%B9%E5%BC%8F%E3%80%82%E7%BB%93%E6%9E%9C%E5%A6%82%E4%BD%95%EF%BC%9F%E6%AF%8F%E4%B8%AA%E6%96%B0%E9%A1%B5%E9%9D%A2%E5%8F%AA%E9%9C%80%E5%AE%9E%E7%8E%B0%E8%BF%99%E4%B8%AA%E6%8E%A5%E5%8F%A3%EF%BC%8C%E7%84%B6%E5%90%8E%EF%BC%8C%E5%AE%83%E5%B0%B1%E5%B9%B2%E5%87%80%E5%88%A9%E8%90%BD%E5%9C%B0%E8%8E%B7%E5%BE%97%E4%BA%86%E5%8A%9F%E8%83%BD%E3%80%82">https://medial.app/%EF%BC%89%E7%94%9F%E4%BA%A7%E4%BB%A3%E7%A0%81%E4%B8%AD%EF%BC%8C%E6%88%91%E9%9B%86%E6%88%90%E4%BA%86%E8%BF%99%E4%B8%AA%E6%96%B9%E6%A1%88%EF%BC%8C%E4%BB%A5%E7%AE%80%E5%8C%96ViewModel%E5%A4%84%E7%90%86UI%E4%BA%A4%E4%BA%92%E7%9A%84%E6%96%B9%E5%BC%8F%E3%80%82%E7%BB%93%E6%9E%9C%E5%A6%82%E4%BD%95%EF%BC%9F%E6%AF%8F%E4%B8%AA%E6%96%B0%E9%A1%B5%E9%9D%A2%E5%8F%AA%E9%9C%80%E5%AE%9E%E7%8E%B0%E8%BF%99%E4%B8%AA%E6%8E%A5%E5%8F%A3%EF%BC%8C%E7%84%B6%E5%90%8E%EF%BC%8C%E5%AE%83%E5%B0%B1%E5%B9%B2%E5%87%80%E5%88%A9%E8%90%BD%E5%9C%B0%E8%8E%B7%E5%BE%97%E4%BA%86%E5%8A%9F%E8%83%BD%E3%80%82</a></p></blockquote>

<p>让我们来探索一下这个方案是如何解决我们的问题的。</p>

<h3>设计 ActionHandler 接口</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">interface</span> <span class="n">PostActionHandler</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">viewModel</span><span class="p">:</span> <span class="n">BaseViewModel</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">handleAction</span><span class="p">(</span><span class="n">action</span><span class="p">:</span> <span class="n">PostAction</span><span class="p">)</span> <span class="p">=</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">viewModelScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">when</span> <span class="p">(</span><span class="n">action</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">is</span> <span class="n">PostAction</span><span class="p">.</span><span class="n">Clicked</span> <span class="p">-&gt;</span> <span class="n">handlePostClick</span><span class="p">(</span><span class="n">action</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>            <span class="k">is</span> <span class="n">PostAction</span><span class="p">.</span><span class="n">LikeClicked</span> <span class="p">-&gt;</span> <span class="n">handleLikeClick</span><span class="p">(</span><span class="n">action</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>            <span class="k">is</span> <span class="n">PostAction</span><span class="p">.</span><span class="n">ShareClicked</span> <span class="p">-&gt;</span> <span class="n">handleShareClick</span><span class="p">(</span><span class="n">action</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">handlePostClick</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">viewModel</span><span class="p">.</span><span class="n">navigate</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">handleLikeClick</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">viewModel</span><span class="p">.</span><span class="n">showToast</span><span class="p">(</span><span class="s">&quot;Liked&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">handleShareClick</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 实现</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>让我们的ViewModel实现这个接口</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">class</span> <span class="nc">PostViewModel</span> <span class="p">:</span> <span class="n">BaseViewModel</span><span class="p">(),</span> <span class="n">PostActionHandler</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 传入当前的baseViewModel</span>
</span><span class='line'>    <span class="k">override</span> <span class="n">valViewModel</span><span class="p">=</span> <span class="k">this</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">handleShareClick</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 添加 override实现</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>这是它在 Composable 中的使用方式</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">PostScreen</span><span class="p">(</span><span class="n">viewModel</span><span class="p">:</span> <span class="n">PostViewModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">PostItem</span><span class="p">(</span><span class="n">onAction</span> <span class="p">=</span> <span class="n">viewModel</span><span class="o">::</span><span class="n">handleAction</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">PostItem</span><span class="p">(</span>
</span><span class='line'>    <span class="n">onAction</span><span class="p">:</span> <span class="p">(</span><span class="n">PostAction</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以，正如你所见，我们只需要定义 viewModel 变量，就大功告成了，现在我们可以使用ViewModel和 BaseViewModel 提供的所有功能了。</p>

<p>请注意，我们是如何解决使用委托进行组合的主要缺点的：</p>

<ul>
<li>通过将 viewModel 引用保留为接口属性，我们可以轻松地在ViewModel中定义它。这使我们能够直接访问 BaseViewModel 或任何其他ViewModel提供的所有功能。</li>
<li>我们简化了 viewModelScope 的使用。现在，启动协程、收集流程以及执行其他任务都变得非常简单，无需任何复杂的变通方法或 hack。这就是此解决方案带来的优雅和简洁之处。</li>
</ul>


<p>这种方法只有一个小缺点，那就是</p>

<ul>
<li>我们必须在ViewModel中定义所有接口属性，这在大多数情况下是可以接受的，因为我们主要会引用 Repository 或 Domain Layer 类，以及一些可变状态（如果有的话）。</li>
</ul>


<p>这个问题比我们在这个解决方案中克服的缺点要小得多，这使得它成为处理任何共享UI交互或任何共享UI业务逻辑的最佳解决方案。</p>

<blockquote><p>嗯，这一部分比前面几部分简单得多。这里没有复杂的问题需要深入研究——只是一个简单的解决方案，它确实做到了它应该做的事情，并解决了我们所有的问题。</p></blockquote>

<h2>🥷🏻 让我们在实际用例中看看这个解决方案的实际应用。</h2>

<p>假设我们有一个主页面，它以列表形式显示各种UI元素，例如包含帖子和新闻等项目的动态。每个元素都包含一组用户交互，例如点赞帖子、分享新闻文章或导航到详情视图。我们的解决方案可以帮助我们高效地处理跨不同ViewModel的这些交互，确保以可扩展的方式处理通用功能。</p>

<h3>为每个UI组件设计UI交互</h3>

<p>然后，我们使用 Kotlin 的 Sealed 接口，像在典型的 MVI 架构中一样设计UI交互：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">sealed</span> <span class="n">interface</span> <span class="n">PostAction</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">Clicked</span><span class="p">(</span><span class="k">val</span> <span class="py">post</span><span class="p">:</span> <span class="n">Post</span><span class="p">)</span> <span class="p">:</span> <span class="n">PostAction</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">LikeClicked</span><span class="p">(</span><span class="k">val</span> <span class="py">post</span><span class="p">:</span> <span class="n">Post</span><span class="p">)</span> <span class="p">:</span> <span class="n">PostAction</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">ShareClicked</span><span class="p">(</span><span class="k">val</span> <span class="py">post</span><span class="p">:</span> <span class="n">Post</span><span class="p">)</span> <span class="p">:</span> <span class="n">PostAction</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">sealed</span> <span class="n">interface</span> <span class="n">NewsAction</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">Clicked</span><span class="p">(</span><span class="k">val</span> <span class="py">news</span><span class="p">:</span> <span class="n">News</span><span class="p">)</span> <span class="p">:</span> <span class="n">NewsAction</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">LikeClicked</span><span class="p">(</span><span class="k">val</span> <span class="py">news</span><span class="p">:</span> <span class="n">News</span><span class="p">)</span> <span class="p">:</span> <span class="n">NewsAction</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">BookmarkClicked</span><span class="p">(</span><span class="k">val</span> <span class="py">news</span><span class="p">:</span> <span class="n">News</span><span class="p">)</span> <span class="p">:</span> <span class="n">NewsAction</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>创建我们的动作处理程序接口</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">interface</span> <span class="n">PostActionHandler</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">viewModel</span><span class="p">:</span> <span class="n">BaseViewModel</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">postRepo</span><span class="p">:</span> <span class="n">PostRepository</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">handleAction</span><span class="p">(</span><span class="n">action</span><span class="p">:</span> <span class="n">PostAction</span><span class="p">)</span> <span class="p">=</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">viewModelScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">when</span> <span class="p">(</span><span class="n">action</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">is</span> <span class="n">PostAction</span><span class="p">.</span><span class="n">Clicked</span> <span class="p">-&gt;</span> <span class="n">handlePostClick</span><span class="p">(</span><span class="n">action</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>          <span class="k">is</span> <span class="n">PostAction</span><span class="p">.</span><span class="n">LikeClicked</span> <span class="p">-&gt;</span> <span class="n">handleLikeClick</span><span class="p">(</span><span class="n">action</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">handlePostClick</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">viewModel</span><span class="p">.</span><span class="n">navigate</span><span class="p">(......)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">handleLikeClick</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">postRepo</span><span class="p">.</span><span class="n">like</span><span class="p">(</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>      <span class="n">viewModel</span><span class="p">.</span><span class="n">showSnackbar</span><span class="p">(</span><span class="s">&quot;Post Liked&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">interface</span> <span class="n">NewsActionHandler</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">viewModel</span><span class="p">:</span> <span class="n">BaseViewModel</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">newsRepo</span><span class="p">:</span> <span class="n">NewsRepository</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">handleAction</span><span class="p">(</span><span class="n">action</span><span class="p">:</span> <span class="n">NewsAction</span><span class="p">)</span> <span class="p">=</span> <span class="k">when</span> <span class="p">(</span><span class="n">action</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">NewsAction</span><span class="p">.</span><span class="n">Clicked</span> <span class="p">-&gt;</span> <span class="n">handleNewsClick</span><span class="p">(</span><span class="n">action</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">NewsAction</span><span class="p">.</span><span class="n">Bookmark</span> <span class="p">-&gt;</span> <span class="n">handleNewsBookmark</span><span class="p">(</span><span class="n">action</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">handleNewsClick</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">viewModel</span><span class="p">.</span><span class="n">navigate</span><span class="p">(.....)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">handleNewsBookmark</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">newsRepo</span><span class="p">.</span><span class="n">bookmark</span><span class="p">(</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>      <span class="n">viewModel</span><span class="p">.</span><span class="n">showSnackBar</span><span class="p">(</span><span class="s">&quot;News Bookmarked&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如上所示，我们为每个数据模型创建了一个 Action Handler 接口。</p>

<p>我们在这里所做的就是遵循上一节所示的接口设计。</p>

<ul>
<li>我们有两个属性，分别是ViewModel和Repository 类。</li>
<li>我们分别创建了处理每个 Action 的函数。当然，这是可选的。我保留这种方式是为了方便覆写任何特定的行为，并且我们为每个 Action 类型分别调用相应的 Action 处理函数。</li>
</ul>


<h3>创建 ViewModel</h3>

<p>让我们构建一个实现这两个接口的 ViewModel，以继承它们的功能。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">class</span> <span class="nc">HomeViewModel</span> <span class="p">:</span> <span class="n">BaseViewModel</span><span class="p">(),</span> <span class="n">PostActionHandler</span><span class="p">,</span> <span class="n">NewsActionHandler</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">val</span> <span class="py">viewModel</span> <span class="p">=</span> <span class="k">this</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">val</span> <span class="py">postRepo</span> <span class="p">=</span> <span class="n">PostRepository</span><span class="p">()</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">val</span> <span class="py">newsRepo</span> <span class="p">=</span> <span class="n">NewsRepository</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">      ViewModel其余代码</span>
</span><span class='line'><span class="cm">    **/</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后，我们在ViewModel中定义必要的属性（ viewModel 、 postRepo 和 newsRepo ），这些属性会被两个接口使用。</p>

<p>这种设计消除了冗余，并保持了代码的简洁性，因为我们只需设置一次属性，只要属性名称相同，两个接口就可以无缝地与其交互。
这种方法保持了ViewModel的中心地位，同时又可以轻松处理不同组件的UI交互和业务逻辑。</p>

<h2>🪝连接一切：将操作连接到 UI</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">HomeScreen</span><span class="p">(</span><span class="n">viewModel</span><span class="p">:</span> <span class="n">HomeViewModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">LazyColumn</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">items</span><span class="p">(</span><span class="n">viewModel</span><span class="p">.</span><span class="n">items</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">when</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">is</span> <span class="n">News</span> <span class="p">-&gt;</span> <span class="n">NewsCard</span><span class="p">(</span><span class="n">it</span><span class="p">,</span> <span class="n">onAction</span> <span class="p">=</span> <span class="n">viewModel</span><span class="o">::</span><span class="n">handleAction</span><span class="p">)</span>
</span><span class='line'>                <span class="k">is</span> <span class="n">Post</span> <span class="p">-&gt;</span> <span class="n">PostCard</span><span class="p">(</span><span class="n">it</span><span class="p">,</span> <span class="n">onAction</span> <span class="p">=</span> <span class="n">viewModel</span><span class="o">::</span><span class="n">handleAction</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">NewsCard</span><span class="p">(</span>
</span><span class='line'>  <span class="n">news</span><span class="p">:</span> <span class="n">News</span><span class="p">,</span>
</span><span class='line'>  <span class="n">onAction</span><span class="p">:</span> <span class="p">(</span><span class="n">NewsAction</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">PostCard</span><span class="p">(</span>
</span><span class='line'>  <span class="n">post</span><span class="p">:</span> <span class="n">Post</span><span class="p">,</span>
</span><span class='line'>  <span class="n">onAction</span><span class="p">:</span> <span class="p">(</span><span class="n">PostAction</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在我们的UI组件中，我们可以直接将这些函数用作ViewModel本身的函数，这样就完成了在 Screen 中添加交互处理的功能。</p>

<ul>
<li>现在，假设我们有另一个只显示新闻的页面（Screen）。我们需要做的就是在ViewModel中实现 NewsActionHandler 接口——就这样，一切就绪。</li>
<li>我们可以无缝地从 BaseViewModel 或ViewModel调用任何函数，从而能够在一个单一的、集中的位置实现完整的端到端功能。如果我们在多个位置显示相同的数据模型，这将非常有利。</li>
</ul>


<h2>📦 整合所有功能</h2>

<p>在这篇博文中，我们探讨了在扩展Android UI（基本上是任何 UI）时最容易被忽视的问题之一，即跨ViewModel的重复UI交互逻辑。我们探索了三种不同的方法来解决这个问题：</p>

<ol>
<li>辅助类 - 一种快速解决方案，但存在严格的限制。</li>
<li>使用委托进行组合——一种更现代的继承驱动解决方案，
但它难以从外部访问功能。</li>
<li>使用默认函数的接口（我的解决方案）——一种实用、优雅且灵活的方法，克服了前两种方法的所有限制。</li>
</ol>


<p>通过利用 Kotlin 的接口默认方法并将ViewModel作为接口内部的属性，我们解锁了完整的可扩展性，并能够从其他继承的类/接口访问扩展功能。</p>

<p>现在，让我们以表格的形式比较一下每个解决方案：</p>

<table>
<thead>
<tr>
<th> 好处                           </th>
<th> 通过辅助类                                       </th>
<th> 使用委托进行组合                             </th>
<th> 带有默认函数的接口 (✅ 最好)         </th>
</tr>
</thead>
<tbody>
<tr>
<td> 🔁 可重用性                                 </td>
<td>  ✅ Yes        </td>
<td>  ✅ Yes         </td>
<td>  ✅ Yes </td>
</tr>
<tr>
<td> 🧠 覆写行为                        </td>
<td> ❌ 不可能          </td>
<td> ✅ 可以，由于继承        </td>
<td> ✅  可以，由于继承           </td>
</tr>
<tr>
<td> 🔗 访问从其他来源继承的功能                 </td>
<td> ❌ 不可以，因为它是一个封装类      </td>
<td> ❌  不可以，因为我们无法传递当前引用       </td>
<td> ✅  可以，因为我们可以将继承类保留为接口属性    </td>
</tr>
<tr>
<td> 🏗️ 跨页面可扩展性                  </td>
<td> ⚠️ 差——当逻辑还涉及视图模型特定功能时会变得困难               </td>
<td> ✅ 更好——可重复使用的逻辑                    </td>
<td> ✅ 最佳——跨页面即插即用            </td>
</tr>
<tr>
<td> ✅ 最佳用例                               </td>
<td> 对于非UI交互封装功能                   </td>
<td> 业务逻辑重用，非UI上下文            </td>
<td> 多个ViewModel中需要的UI交互 </td>
</tr>
</tbody>
</table>


<p>你可以在<a href="https://github.com/Vaibhav2002/Ui-Intreraction-Handler-Sample">专用的 GitHub 代码库</a>（链接：<a href="https://github.com/Vaibhav2002/Ui-Intreraction-Handler-Sample%EF%BC%89%E4%B8%AD%E6%8E%A2%E7%B4%A2%E6%9C%AC%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%90%E5%88%B0%E7%9A%84%E6%89%80%E6%9C%89%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E3%80%82%E6%AC%A2%E8%BF%8E%E9%9A%8F%E6%84%8Fclone%E3%80%81fork%E6%88%96%E8%AF%95%E7%94%A8%E3%80%82">https://github.com/Vaibhav2002/Ui-Intreraction-Handler-Sample%EF%BC%89%E4%B8%AD%E6%8E%A2%E7%B4%A2%E6%9C%AC%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%90%E5%88%B0%E7%9A%84%E6%89%80%E6%9C%89%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E3%80%82%E6%AC%A2%E8%BF%8E%E9%9A%8F%E6%84%8Fclone%E3%80%81fork%E6%88%96%E8%AF%95%E7%94%A8%E3%80%82</a></p>

<h2>✌️ 告别</h2>

<p>总而言之，希望这篇博客能帮助你解锁一些强大的技巧，提升你的Kotlin 和UI处理知识。有了Kotlin 的界面默认函数，你的构建将更加简洁、快速，并兼顾长期可扩展性。</p>

<p>如果你喜欢这篇文章并想随时了解最新动态：</p>

<ul>
<li>查看我的 LinkedIn、GitHub 和 X 个人资料，了解我正在做的事情。</li>
<li>想要更多 Kotlin 的魔法？阅读我之前的博客，了解另一种可以让你的代码库更精简、更智能的技术。</li>
</ul>


<p>感谢你的阅读，希望你喜欢！🚀</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MVI架构：Compose中的响应式状态管理]]></title>
    <link href="https://alexhilton.github.io/blog/2025/06/25/reactive-state-in-compose/"/>
    <updated>2025-06-25T22:32:21+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/06/25/reactive-state-in-compose</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自「Reactive State Management in Compose — MVI Architecture」，原文链接<a href="https://proandroiddev.com/reactive-state-management-in-compose-mvi-architecture-71546c9f1b52">https://proandroiddev.com/reactive-state-management-in-compose-mvi-architecture-71546c9f1b52</a>，由Davies Adedayo AbdulGafar发布于2025年4月22日。</p></blockquote>

<p>译注：原文作者虽然是基于Jetpack Compose来写的，但重点讨论的是应用的MVI架构方式，涉及的都是纯Kotlin语言层面的，以及Compose层面的，并不涉及平台特性，因此完全适用于跨平台的Compose Multiplatform。</p>

<p><a href="https://alexhilton.github.io/blog/2025/06/25/reactive-state-in-compose/"><img src="https://alexhilton.github.io/Users/alexhilton/Downloads/banner_reactive.png" title="auto auto" ></a></p>

<!-- more -->


<h2>MVI是什么鬼</h2>

<h3>MVI架构的基本概念</h3>

<p>MVI（模型-视图-意图）架构为 Android 应用程序中可扩展、稳健且可测试的 UI 状态管理提供了一种结构良好的方法。它强调代码简洁和关注点分离（Separation of Concerns），将应用程序划分为三个主要组件——模型(Model)、视图(View)和意图(Intent)——它们共同构成一个循环：意图 -> 视图模型 -> 模型 -> 视图，从而定义单向数据流（<strong>译注：</strong>这里的意图Intent是架构中的一个逻辑概念，与Android系统中的Intent没有关系）。此架构模式提供的不同角色有助于更轻松地理解和维护 UI 状态。从本质上讲，MVI 不仅仅是一种架构模式，而是一个旨在流畅响应变化的响应式系统。这种响应性是其定义特征之一，也是其最大的优势。</p>

<ul>
<li>单向数据流：指数据以单向流动——从模型流向视图，并以意图的形式返回。这确保了架构的清晰度、可预测性和易维护性。</li>
<li>关注点分离：指模型、视图和意图组件具有不同的角色。模型管理状态，视图处理 UI 渲染，意图捕获并传达用户操作。</li>
<li>不可变性（Immutability）：确保模型的状态一旦设置便保持不变。这保证了可预测性，消除了意外的副作用，并促进了稳定可靠的应用状态。</li>
<li>响应式：当状态发生变化时，UI 会自动更新。</li>
</ul>


<p>该架构分解为三个和谐的组件，它们以响应式流程协同工作：</p>

<ul>
<li>模型 (Model) 是单一事实来源，它是应用程序在任何特定时刻的状态快照。当此状态发生变化时，它会触发整个系统的级联响应式更新。UI 会在状态变化时自动更新，这凸显了这一核心的响应式原则。</li>
<li>视图 (View) 根据当前模型状态以响应式方式渲染用户所见内容。它订阅状态变化并自动进行转换以反映这些变化，而无需任何命令式更新调用。这种响应式渲染正是 MVI 如此强大的原因——视图始终与状态同步。</li>
<li>意图 (Intent) 完善了响应式电路，捕获用户交互并将其反馈回系统以创建新状态。这形成了一个持续的反馈循环：用户操作触发意图，意图产生新状态，新状态触发 UI 更新。</li>
</ul>


<p>当我们说 MVI 具有响应式特性时，我们指的是整个系统都是围绕自动响应变化而构建的。数据发生变化时，UI 无需手动更新，而是会自动反映当前状态。这种响应式特性能够创建一个动态、响应迅速的应用程序，让用户感觉生动活泼。</p>

<h3>MVI架构的典型实现方式</h3>

<p>在原生 Android 开发中，MVI 的大部分实现都放在 ViewModel 类中。以下是实现 MVI 模式的一种简单方法：</p>

<ol>
<li>我们打算建模的 UI 状态将实现为一个不可变的 Kotlin 数据类（data class），其字段保存着我们想要在视图中显示的状态。</li>
<li>StateFlow 是将整个架构绑定在一起的响应式粘合剂。这个观察者对象包装了模型，并将变化通知给视图，以便它反映新的状态。这个响应式管道确保任何状态变化都会自动传播到 UI。</li>
<li>目前，我们的意图可以实现为 ViewModel 中的公共函数。这些函数应该没有返回值，以确保视图只接收来自观察者的状态更新。类似于对象作为编程语言中的一等公民，可以通过引用传递，同样，函数也依赖于方法引用。我们利用这一点将意图传递给使用它的 UI 节点。我们无需编写复杂的类来建模意图，因为那样需要额外实现意图处理程序。</li>
</ol>


<p>以下是在 ViewModel 中实现 MVI 模式的模板。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">class</span> <span class="nc">ScreenViewModel</span><span class="p">()</span> <span class="p">:</span> <span class="n">ViewModel</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">val</span> <span class="py">_uiState</span><span class="p">:</span> <span class="n">MutableStateFlow</span><span class="p">&lt;</span><span class="n">MyModel</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">MutableStateFlow</span><span class="p">(</span><span class="n">MyModel</span><span class="p">(...))</span> <span class="c1">// private observer object</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="py">uiState</span><span class="p">:</span> <span class="n">StateFlow</span><span class="p">&lt;</span><span class="n">MyModel</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">_uiState</span> <span class="c1">// observer object exposed as an immutable instance</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">fun</span> <span class="nf">doUpdateOnState</span><span class="p">(...)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span> <span class="c1">// public function serves as an intent</span>
</span><span class='line'>  <span class="k">fun</span> <span class="nf">doAnotherUpdate</span><span class="p">(...)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">data</span> <span class="k">class</span> <span class="nc">MyModel</span><span class="p">(...)</span>
</span></code></pre></td></tr></table></div></figure>


<p>新状态在 ViewModel 中生成，然后由观察 uiState 的视图使用。请注意，Intent 是如何作为触发状态更改的回调传递到可组合项页面的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'> <span class="k">fun</span> <span class="nf">MyScreen</span><span class="p">(</span><span class="n">viewModel</span><span class="p">:</span> <span class="n">ScreenViewModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">val</span> <span class="py">uiState</span><span class="p">:</span> <span class="n">MyModel</span> <span class="p">=</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">uiState</span><span class="p">.</span><span class="n">collectAsStateWithLifeCycle</span><span class="p">()</span> <span class="c1">// consumes the state produced in the viewModel</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">MyScreenContent</span><span class="p">(</span>
</span><span class='line'>     <span class="n">uiState</span> <span class="p">=</span> <span class="n">uiState</span><span class="p">,</span>
</span><span class='line'>     <span class="n">doUpdate</span> <span class="p">=</span> <span class="n">viewModel</span><span class="o">::</span><span class="n">doUpdateOnState</span><span class="p">,</span> <span class="c1">// intent to do update</span>
</span><span class='line'>     <span class="n">doAnotherUpdate</span> <span class="p">=</span> <span class="n">viewModel</span><span class="o">::</span><span class="n">doAnotherUpdate</span> <span class="c1">// intent to do another update</span>
</span><span class='line'>   <span class="p">)</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种反应模式通过 Kotlin 的 StateFlow 实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="py">_uiState</span><span class="p">:</span> <span class="n">MutableStateFlow</span><span class="p">&lt;</span><span class="n">MyModel</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">MutableStateFlow</span><span class="p">(</span><span class="n">MyModel</span><span class="p">(...))</span>
</span><span class='line'><span class="k">val</span> <span class="py">uiState</span><span class="p">:</span> <span class="n">StateFlow</span><span class="p">&lt;</span><span class="n">MyModel</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">_uiState</span>
</span></code></pre></td></tr></table></div></figure>


<p>在 UI 方面，这种反应性通过收集操作来表达，该操作消耗从 viewModel 生成的新状态。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">uiState</span> <span class="p">=</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">uiState</span><span class="p">.</span><span class="n">collectAsStateWithLifeCycle</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>这行代码建立了一个响应式连接，每当状态发生变化时都会自动刷新 UI。无需手动刷新调用或复杂的更新逻辑——系统本身就是响应式的。</p>

<h2>案例研究</h2>

<p>让我们采用更实用的方法，实现 MVI 模式来管理页面 状态。下图是一个页面，用户可以从给定的选项中选择所显示问题的答案。</p>

<p><img src="https://miro.medium.com/v2/resize:fit:838/format:webp/0*uwa_-6EYNOhyNuNJ" alt="Case study" /></p>

<p>图片来源 — <a href="https://github.com/android/compose-samples/tree/v2024.01.00/Jetsurvey">Compose 示例 Jetsurvey</a>（译注：链接是<a href="https://github.com/android/compose-samples/tree/v2024.01.00/Jetsurvey%EF%BC%89%E3%80%82%E7%82%B9">https://github.com/android/compose-samples/tree/v2024.01.00/Jetsurvey%EF%BC%89%E3%80%82%E7%82%B9</a><a href="https://github.com/SahDavies/mvi-architecture-sample/">击此</a>（译注：链接是<a href="https://github.com/SahDavies/mvi-architecture-sample/%EF%BC%89%E5%A4%84%E6%9F%A5%E7%9C%8B%E5%AE%8C%E6%95%B4%E5%AE%9E%E7%8E%B0%E3%80%82">https://github.com/SahDavies/mvi-architecture-sample/%EF%BC%89%E5%A4%84%E6%9F%A5%E7%9C%8B%E5%AE%8C%E6%95%B4%E5%AE%9E%E7%8E%B0%E3%80%82</a></p>

<p>页面包含以下状态：</p>

<ol>
<li>问题</li>
<li>选项列表</li>
<li>问题计数</li>
<li>选择指示器</li>
<li>启用/禁用按钮</li>
</ol>


<p>此外，页面还提供以下用户操作的输入：</p>

<ol>
<li>获取下一个问题</li>
<li>获取上一个问题</li>
<li>选择一个选项</li>
<li>关闭/结束操作。这些操作用于将用户的意图传达给应用程序。</li>
</ol>


<p>保存页面状态的模型可以这样实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">data</span> <span class="k">class</span> <span class="nc">UiState</span><span class="p">(</span>
</span><span class='line'>  <span class="k">val</span> <span class="py">questionCount</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span>
</span><span class='line'>  <span class="k">val</span> <span class="py">totalQuestion</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span>
</span><span class='line'>  <span class="k">val</span> <span class="py">question</span><span class="p">:</span> <span class="n">Question</span><span class="p">,</span>
</span><span class='line'>  <span class="k">val</span> <span class="py">userSelection</span><span class="p">:</span> <span class="n">Option</span><span class="p">?</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="py">hasNext</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="n">questionCount</span> <span class="p">&lt;</span> <span class="n">totalQuestion</span>
</span><span class='line'>  <span class="k">val</span> <span class="py">hasPrevious</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="n">questionCount</span> <span class="p">&gt;</span> <span class="m">1</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如前所述，为了简单起见，我们使用公共函数来描述意图，这些函数没有返回值。我们在下面列举了将在 ViewModel 中实现的函数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">fun</span> <span class="nf">next</span><span class="p">()</span> <span class="c1">// 加载下一个问题</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">previous</span><span class="p">()</span> <span class="c1">// 加载上一个问题</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">onOptionSelected</span><span class="p">(</span><span class="n">selection</span><span class="p">:</span> <span class="n">Option</span><span class="p">)</span> <span class="c1">// 激活选中选项的标识</span>
</span></code></pre></td></tr></table></div></figure>


<p>在视图中调用的每个函数都会触发一个新的状态以供视图使用，这样我们的页面就是可预测和可测试的，因为每个用户交互都会产生一个新的不可变状态，可以在测试期间进行比较。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">QuestionScreen</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="n">onDone</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">BackHandler</span> <span class="p">{</span> <span class="cm">/* Do nothing */</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">viewModel</span> <span class="p">=</span> <span class="n">QuestionViewModel</span><span class="p">(</span><span class="n">getQuestions</span><span class="p">())</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">uiState</span> <span class="k">by</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">uiState</span><span class="p">.</span><span class="n">collectAsStateWithLifecycle</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">QuestionScreenContent</span><span class="p">(</span>
</span><span class='line'>        <span class="n">uiState</span> <span class="p">=</span> <span class="n">uiState</span><span class="p">,</span>
</span><span class='line'>        <span class="n">onClickNext</span> <span class="p">=</span> <span class="n">viewModel</span><span class="o">::</span><span class="n">next</span><span class="p">,</span>
</span><span class='line'>        <span class="n">onClickPrevious</span> <span class="p">=</span> <span class="n">viewModel</span><span class="o">::</span><span class="n">previous</span><span class="p">,</span>
</span><span class='line'>        <span class="n">onOptionSelected</span> <span class="p">=</span> <span class="n">viewModel</span><span class="o">::</span><span class="n">onOptionSelected</span><span class="p">,</span>
</span><span class='line'>        <span class="n">onDone</span> <span class="p">=</span> <span class="n">onDone</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意：并非所有带有状态的页面组件都能用 MVI 管理。有些组件由单独的状态持有类管理，有些则由可组合组件本身的内部状态管理——例如上图中的进度指示器。不真正处理业务逻辑的状态不应该使用 MVI 管理。</p>

<h2>超越基本响应式</h2>

<p>上述案例研究基于我们的页面需求，使用了一个模型的简单实现。编写 MVI 模式的模型实现有很多方法——根据页面需求进行实现——例如，一个包含加载和错误状态的页面。通常，最简单的方法是使用密封的类层次结构来实现——尽管如此，你也可以选择以不同的方式实现你自己的模型。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// 考虑加载和错误状态的模型</span>
</span><span class='line'><span class="k">internal</span> <span class="n">sealed</span> <span class="k">class</span> <span class="nc">UiState</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">object</span> <span class="nc">Loading</span> <span class="p">:</span> <span class="n">UiState</span><span class="p">()</span>
</span><span class='line'>    <span class="n">@Immutable</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Content</span><span class="p">(</span><span class="k">val</span> <span class="py">myModel</span><span class="p">:</span> <span class="n">UiModel</span><span class="p">)</span> <span class="p">:</span> <span class="n">UiState</span><span class="p">()</span>
</span><span class='line'>    <span class="n">@Immutable</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Error</span><span class="p">(</span><span class="k">val</span> <span class="py">error</span><span class="p">:</span> <span class="n">ErrorUiModel</span><span class="p">):</span> <span class="n">UiState</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>视图使用这种新类型的方式略有不同，如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'> <span class="n">@Composable</span>
</span><span class='line'> <span class="k">fun</span> <span class="nf">MyScreenContent</span><span class="p">(</span><span class="n">uiState</span><span class="p">:</span> <span class="n">UiState</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">when</span><span class="p">(</span><span class="n">uiState</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">is</span> <span class="n">Loading</span> <span class="p">-&gt;</span> <span class="n">LoadingScreen</span><span class="p">()</span>
</span><span class='line'>      <span class="k">is</span> <span class="n">Error</span> <span class="p">-&gt;</span> <span class="n">ErrorScreen</span><span class="p">(</span><span class="n">uiState</span><span class="p">.</span><span class="n">error</span><span class="p">)</span>
</span><span class='line'>      <span class="k">is</span> <span class="n">Content</span> <span class="p">-&gt;</span> <span class="n">ContentScreen</span><span class="p">(</span><span class="n">uiState</span><span class="p">.</span><span class="n">myModel</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">LoadingScreen</span><span class="p">()</span> <span class="p">{</span> <span class="cm">/* implementation block */</span> <span class="p">}</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">ErrorScreen</span><span class="p">(</span><span class="n">error</span><span class="p">:</span> <span class="n">ErrorUiModel</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* implementation block */</span> <span class="p">}</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">ContentScreen</span><span class="p">(</span><span class="n">content</span><span class="p">:</span> <span class="n">UiModel</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* implementation block */</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要注意的是，这种模型是互斥的——它保证三个状态不会同时发生，而是一次发生一个，这有助于防止 UI 状态渲染中常见的错误。</p>

<h3>重写 Intent 实现</h3>

<p>Intent 实现也可以通过添加 Reducer/Handler 来修改，Reducer/Handler 是 ViewModel 中的一个公共函数，它会调用私有实现（辅助函数）来执行操作，并使用 when 表达式分支到相应的操作。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">Class</span> <span class="n">HomeScreenViewModel</span><span class="p">()</span> <span class="p">:</span> <span class="n">ViewModel</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Some class properties</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// our reducer/handler</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">onHomeAction</span><span class="p">(</span><span class="n">action</span><span class="p">:</span> <span class="n">HomeAction</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">when</span> <span class="p">(</span><span class="n">action</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">is</span> <span class="n">HomeAction</span><span class="p">.</span><span class="n">CategorySelected</span> <span class="p">-&gt;</span> <span class="n">onCategorySelected</span><span class="p">(</span><span class="n">action</span><span class="p">.</span><span class="n">category</span><span class="p">)</span>
</span><span class='line'>            <span class="k">is</span> <span class="n">HomeAction</span><span class="p">.</span><span class="n">TopicFollowed</span> <span class="p">-&gt;</span> <span class="n">onTopicFollowed</span><span class="p">(</span><span class="n">action</span><span class="p">.</span><span class="n">topic</span><span class="p">)</span>
</span><span class='line'>            <span class="k">is</span> <span class="n">HomeAction</span><span class="p">.</span><span class="n">HomeCategorySelected</span> <span class="p">-&gt;</span> <span class="n">onHomeCategorySelected</span><span class="p">(</span><span class="n">action</span><span class="p">.</span><span class="n">category</span><span class="p">)</span>
</span><span class='line'>            <span class="k">is</span> <span class="n">HomeAction</span><span class="p">.</span><span class="n">ToggleTopicFollowed</span> <span class="p">-&gt;</span> <span class="n">onToggleTopicFollowed</span><span class="p">(</span><span class="n">action</span><span class="p">.</span><span class="n">topic</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>    <span class="k">private</span> <span class="k">fun</span> <span class="nf">onCategorySelected</span><span class="p">(</span><span class="n">category</span><span class="p">:</span> <span class="n">CategoryInfo</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">fun</span> <span class="nf">onTopicFollowed</span><span class="p">(</span><span class="n">topic</span><span class="p">:</span> <span class="n">TopicInfo</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">fun</span> <span class="nf">onToggleTopicFollowed</span><span class="p">(</span><span class="n">topic</span><span class="p">:</span> <span class="n">TopicInfo</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">fun</span> <span class="nf">onHomeCategorySelected</span><span class="p">(</span><span class="n">category</span><span class="p">:</span> <span class="n">HomeCategory</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>为了使此设置正常工作，我们定义了一个密封的接口层次结构，对应于每个操作，其子类属性用于保存参数，然后这些参数将通过视图中的 reducer/handler 传递给这些操作。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Immutable</span>
</span><span class='line'><span class="n">sealed</span> <span class="n">interface</span> <span class="n">HomeAction</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">CategorySelected</span><span class="p">(</span><span class="k">val</span> <span class="py">category</span><span class="p">:</span> <span class="n">CategoryInfo</span><span class="p">)</span> <span class="p">:</span> <span class="n">HomeAction</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">HomeCategorySelected</span><span class="p">(</span><span class="k">val</span> <span class="py">category</span><span class="p">:</span> <span class="n">HomeCategory</span><span class="p">)</span> <span class="p">:</span> <span class="n">HomeAction</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">TopicFollowed</span><span class="p">(</span><span class="k">val</span> <span class="py">topic</span><span class="p">:</span> <span class="n">TopicInfo</span><span class="p">)</span> <span class="p">:</span> <span class="n">HomeAction</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">ToggleTopicFollowed</span><span class="p">(</span><span class="k">val</span> <span class="py">topic</span><span class="p">:</span> <span class="n">TopicInfo</span><span class="p">)</span> <span class="p">:</span> <span class="n">HomeAction</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>与我们第一次实现 Intent 时需要在视图中使用方法引用传递所有操作不同，这里我们只需要传递 Reducer/Handler。然后，决定需要调用哪个操作的责任就落在了调用者身上。</p>

<p>这是视图中的样子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">HomeScreen</span><span class="p">(</span><span class="n">viewModel</span><span class="p">:</span> <span class="n">HomeScreenViewModel</span><span class="p">,</span> <span class="n">onNavigate</span><span class="p">:</span> <span class="p">(</span><span class="n">String</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">HomeContent</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="n">contentPadding</span><span class="p">),</span>
</span><span class='line'>        <span class="n">onHomeAction</span> <span class="p">=</span> <span class="n">viewModel</span><span class="o">::</span><span class="n">onHomeAction</span><span class="p">,</span>
</span><span class='line'>        <span class="n">onNavigate</span> <span class="p">=</span> <span class="n">onNavigate</span><span class="p">,</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>HomeContent 可组合函数现在负责决定调用哪个操作，方法是实例化以下任意对象，然后使用实例化的对象调用 onHomeAction</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">HomeAction</span><span class="p">.</span><span class="n">CategorySelected</span><span class="p">(</span><span class="n">category</span> <span class="p">=</span> <span class="n">CategoryInfo</span><span class="p">())</span>
</span><span class='line'><span class="n">HomeAction</span><span class="p">.</span><span class="n">HomeCategorySelected</span><span class="p">(</span><span class="n">category</span> <span class="p">=</span> <span class="n">HomeCategory</span><span class="p">())</span>
</span><span class='line'><span class="n">HomeAction</span><span class="p">.</span><span class="n">TopicFollowed</span><span class="p">(</span><span class="n">topic</span> <span class="p">=</span> <span class="n">TopicInfo</span><span class="p">())</span>
</span><span class='line'><span class="n">HomeAction</span><span class="p">.</span><span class="n">ToggleTopicFollowed</span><span class="p">(</span><span class="n">topic</span> <span class="p">=</span> <span class="n">TopicInfo</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<p>请参阅下面的实际操作！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">HomeContent</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="n">onHomeAction</span><span class="p">:</span> <span class="p">(</span><span class="n">HomeAction</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span> <span class="c1">// HomeAction是一个密封类型层次</span>
</span><span class='line'>    <span class="n">onNavigate</span><span class="p">:</span> <span class="p">(</span><span class="n">String</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="py">homeCategory</span> <span class="p">=</span> <span class="n">HomeAction</span><span class="p">.</span><span class="n">HomeCategorySelected</span><span class="p">(</span><span class="n">CategoryInfo</span><span class="p">())</span>
</span><span class='line'>  <span class="n">onHomeAction</span><span class="p">(</span><span class="n">homeCategory</span><span class="p">)</span> <span class="c1">// triggers a state change</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>即使增加了复杂度，核心的响应式原则依然保持不变。Reducer 只是提供了一种更有条理的方式来处理意图并生成新的状态，而从状态到 UI 的响应式流程保持不变。</p>

<p>这种实现方式使得迭代构建变得简单——无论我们需要对意图进行什么更改（无论是添加新的意图还是删除现有的意图），都不需要像我们最初的实现那样在很多地方进行重写；我们只需在处理程序中注册新的操作，然后在调用处理程序时根据具体情况实例化不同的对象即可。</p>

<p>总结一下这篇文章，MVI 最优雅的方面在于它如何创建一个完整的响应式链路：</p>

<ol>
<li>模型发出状态</li>
<li>视图使用状态并渲染 UI</li>
<li>用户与视图的交互生成意图</li>
<li>意图被处理以创建新的模型</li>
<li>这个循环以响应式的方式持续进行</li>
</ol>


<p>这种不间断的响应式循环确保你的应用程序始终与用户操作和后端数据保持同步。这不仅仅是响应变化——而是创建一个系统，让变化自然地通过预定义的响应式路径进行。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用用例（Use Case）以让Android代码更简洁]]></title>
    <link href="https://alexhilton.github.io/blog/2025/06/16/making-android-code-cleaner-with-use-cases/"/>
    <updated>2025-06-16T22:20:33+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/06/16/making-android-code-cleaner-with-use-cases</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自「Making Android Code Cleaner with Use Cases: A Practical Approach Using Kotlin Coroutines」，原文链接<a href="https://proandroiddev.com/making-android-code-cleaner-with-use-cases-a-practical-approach-using-kotlin-coroutines-2700e724c4fd">https://proandroiddev.com/making-android-code-cleaner-with-use-cases-a-practical-approach-using-kotlin-coroutines-2700e724c4fd</a>，由Siarhei Krupenich发布于2025年4月11日。</p></blockquote>

<p><a href="https://alexhilton.github.io/blog/2025/06/16/making-android-code-cleaner-with-use-cases/"><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/0*eVj9Vuqq31RUWd2y" title="auto auto" ></a></p>

<!-- more -->


<h2>介绍</h2>

<p>之前，我们开发了一个 Android 应用，重点关注了整洁架构 (Clean Architecture)、输入/输出 MVVM 拆分和 Repository 模式。这种方法遵循了 Google Android 团队推荐的最佳实践，使代码库具有可扩展性、可维护性和可测试性。</p>

<p>在本文中，我们将深入探讨另一个重要概念——用例 (Use Case)，并向你介绍它的用法及其背后的背景。采用这种模式将使你的代码更具可读性和可测试性——这是一个巨大的优势。</p>

<h3>使用Interactors带来的问题</h3>

<p>过去，我们经常使用 Interactors 作为层与层之间的中间件组件——例如，Presenter 可以使用 Interactors 与领域层（Domain layer）进行通信。这使我们能够将一些逻辑从 Presenter 中移出，并放入单独的可复用组件中。在当时，这是一种可靠的逻辑拆分解决方案，能够保持代码简洁。</p>

<p>我们来看一个简单的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// Interactor</span>
</span><span class='line'><span class="k">class</span> <span class="nc">UserInteractor</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">var</span> <span class="py">username</span><span class="p">:</span> <span class="n">String</span> <span class="p">=</span> <span class="s">&quot;Guest&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">getUsername</span><span class="p">():</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">username</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">saveUsername</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">username</span> <span class="p">=</span> <span class="n">name</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Presenter</span>
</span><span class='line'><span class="k">class</span> <span class="nc">UserPresenter</span><span class="p">(</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">view</span><span class="p">:</span> <span class="n">UserView</span><span class="p">,</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">interactor</span><span class="p">:</span> <span class="n">UserInteractor</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">loadUsername</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">name</span> <span class="p">=</span> <span class="n">interactor</span><span class="p">.</span><span class="n">getUsername</span><span class="p">()</span>
</span><span class='line'>        <span class="n">view</span><span class="p">.</span><span class="n">showUsername</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">updateUsername</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">interactor</span><span class="p">.</span><span class="n">saveUsername</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>        <span class="n">view</span><span class="p">.</span><span class="n">showSavedMessage</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>随着 Presenter 的增长，逻辑的复杂性也会随之增加——这通常会导致 Interactor 中方法数量的增加。Presenter 越大，Interactor 也就越庞大。最终，我们会得到一坨塞满状态、方法和变量的屎堆，它们都堆挤在一个地方。</p>

<p>显然，这样的代码库维护起来很困难，测试起来也很困难，甚至更难用合适的单元测试来覆盖。最重要的是，这种架构会陷入反模式的境地，违反 <strong>SOLID（尤其是单一职责原则）</strong> 和 <strong>KISS</strong> 等核心原则。</p>

<p>这就是为什么我要强调使用 Interactor 方法时容易遇到的以下坑：</p>

<ul>
<li>一处塞太多东西</li>
</ul>


<p>当一个类处理所有操作——读取、写入、删除——它最终会做太多事情。这会导致测试更加困难，并且很难在不破坏其他功能的情况下进行更改。</p>

<ul>
<li>功能不明确</li>
</ul>


<p>像 LoginUser() 这样的用例会清楚地告诉你发生了什么。但是，如果交互器（interactor）很大，就很难区分它的作用——它是关于用户的、设置的还是其他什么的？</p>

<ul>
<li>无法复用</li>
</ul>


<p>只完成一项工作的用例很容易插入到任何需要的地方。交互器会随着时间的推移而增长，变得过于混乱，无法复用。</p>

<ul>
<li>扩展性差</li>
</ul>


<p>想象一下，有 10 个功能，每个功能都有自己的交互器，并且包含 5 个以上的方法。这需要记住很多东西，也需要管理很多代码。</p>

<ul>
<li>逻辑混乱</li>
</ul>


<p>当所有内容都放在一个文件中时，很容易意外地将不该放在一起的内容放在一起——例如，登录逻辑与个人资料更新逻辑就会混杂在一起。</p>

<h2>用例（Use Case）：从 UML 到 Android</h2>

<p>我们刚才讨论的所有问题都可以通过使用用例（Use Case）方法完全解决或至少部分解决。但在深入探讨在Android上的实现之前，让我们先快速了解一下用例在 UML 术语中的含义。在 UML 中，用例是关于一个明确的意图——它代表一个特定的业务逻辑或功能。</p>

<p>查看下面的示例，了解它通常是如何可视化的：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/0*CK9zG_B9spS8JQ8-" alt="Use Case" /></p>

<p>基本上，我们即将实现的用例遵循与 UML 相同的理念：一个意图，一个用例（One Intent, one Use Case）。这个简单的规则帮助我们解决了之前的所有问题——测试变得更简单，代码更具可扩展性，整体也更易于维护。</p>

<p>现在，让我们使用用例方法改进上面的代码片段：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// Use-Case 1</span>
</span><span class='line'><span class="k">class</span> <span class="nc">GetUserNameUseCase</span><span class="p">(</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">repository</span><span class="p">:</span> <span class="n">UserRepository</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">operator</span> <span class="k">fun</span> <span class="nf">invoke</span><span class="p">():</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">repository</span><span class="p">.</span><span class="n">getUserName</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Use-Case 2</span>
</span><span class='line'><span class="k">class</span> <span class="nc">SaveUsernameUseCase</span><span class="p">(</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">repository</span><span class="p">:</span> <span class="n">UserRepository</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">operator</span> <span class="k">fun</span> <span class="nf">invoke</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">repository</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>因此，我们刚刚将 Interactor 拆分成了两个用例。我建议使用 Invoke 操作函数，这样我们就可以将它们的用例名称视为函数。此外，这种方式测试起来也更加容易。</p>

<p>以下 ViewModel 演示了用例的用法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// ViewModel</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ViewModel</span><span class="p">(</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">getUsername</span><span class="p">:</span> <span class="n">GetUserNameUseCase</span><span class="p">,</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">saveUsername</span><span class="p">:</span> <span class="n">SaveUsernameUseCase</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">userName</span><span class="p">:</span> <span class="n">StateFlow</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">loadUsername</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">userName</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">getUsername</span><span class="p">())</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">updateUsername</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">saveUsername</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>简单的测试可以写如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Before</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">useCase</span> <span class="p">=</span> <span class="n">GetUserNameUseCase</span><span class="p">(</span><span class="n">repository</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Test</span>
</span><span class='line'><span class="k">fun</span> <span class="err">`</span><span class="nf">should</span> <span class="k">return</span> <span class="n">username</span> <span class="n">from</span> <span class="n">repository</span><span class="err">`</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>     <span class="n">`when`</span><span class="p">(</span><span class="n">repository</span><span class="p">.</span><span class="n">getUserName</span><span class="p">()).</span><span class="n">thenReturn</span><span class="p">(</span><span class="s">&quot;JohnDoe&quot;</span><span class="p">)</span>
</span><span class='line'>     <span class="k">val</span> <span class="py">result</span> <span class="p">=</span> <span class="n">useCase</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>     <span class="n">assertEquals</span><span class="p">(</span><span class="s">&quot;JohnDoe&quot;</span><span class="p">,</span> <span class="n">result</span><span class="p">)</span>
</span><span class='line'>     <span class="n">verify</span><span class="p">(</span><span class="n">repository</span><span class="p">).</span><span class="n">getUserName</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Test</span>
</span><span class='line'><span class="k">fun</span> <span class="err">`</span><span class="nf">should</span> <span class="n">save</span> <span class="n">username</span> <span class="n">to</span> <span class="n">repository</span><span class="err">`</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">testName</span> <span class="p">=</span> <span class="s">&quot;JaneDoe&quot;</span>
</span><span class='line'>    <span class="n">useCase</span><span class="p">(</span><span class="n">testName</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">verify</span><span class="p">(</span><span class="n">repository</span><span class="p">).</span><span class="n">save</span><span class="p">(</span><span class="n">testName</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>如何将其纳入真正的 Repos 应用程序</h2>

<p>我的建议是始终从抽象开始。鉴于用例的性质（通常只有一个公共方法），我建议使用运算符函数（例如，invoke 在这里就很有效）。可以实现以下抽象：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// 模板接口作为所有用例的抽象</span>
</span><span class='line'><span class="n">interface</span> <span class="n">SuspendUseCase</span><span class="p">&lt;</span><span class="k">in</span> <span class="n">T</span><span class="p">,</span> <span class="k">out</span> <span class="n">O</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">suspend</span> <span class="n">operator</span> <span class="k">fun</span> <span class="nf">invoke</span><span class="p">(</span><span class="n">param</span><span class="p">:</span> <span class="n">T</span><span class="p">):</span> <span class="n">O</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>它的名称带有前缀Suspend（译注：这里应该是前缀，原文有错误），表示它处理暂停的结果。这种通用方法允许我们为参数和返回类型定义特定的类型。例如，以下特定的用例接口可以进一步使用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// 特定的用例接口</span>
</span><span class='line'><span class="n">interface</span> <span class="n">GetReposUseCase</span><span class="p">:</span> <span class="n">SuspendUseCase</span><span class="p">&lt;</span><span class="n">Boolean</span><span class="p">,</span> <span class="n">ResultWithFallback</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">DomainRepoEntity</span><span class="p">&gt;&gt;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>根据其名称，它可以用于获取 Repos，并抛出其 Result 包装器。客户端可以以函数式的方式使用它（例如，val repos = getRepos(&hellip;)）。它的实现如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// GetReposUseCase 的简单实现</span>
</span><span class='line'><span class="k">internal</span> <span class="k">class</span> <span class="nc">GetReposUseCaseImpl</span><span class="p">(</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">mapper</span><span class="p">:</span> <span class="n">Mapper</span><span class="p">,</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">repository</span><span class="p">:</span> <span class="n">ReposRepository</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">GetReposUseCase</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="n">suspend</span> <span class="n">operator</span> <span class="k">fun</span> <span class="nf">invoke</span><span class="p">(</span><span class="n">param</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">):</span>
</span><span class='line'>      <span class="n">ResultWithFallback</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">DomainRepoEntity</span><span class="p">&gt;&gt;</span> <span class="p">=</span>
</span><span class='line'>          <span class="n">repository</span><span class="p">.</span><span class="n">getRepos</span><span class="p">(</span><span class="n">param</span><span class="p">).</span><span class="n">map</span><span class="p">(</span><span class="n">mapper</span><span class="o">::</span><span class="n">map</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在，让我们让任务更具挑战性，并在用例结构中添加一个额外的抽象层。我想要实现仅与存储库交互的用例。这些用例将包含存储库的实例作为泛型中的附加参数类型。让我们看一下以下代码片段：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// 模板接口作为所有用例的抽象</span>
</span><span class='line'><span class="n">interface</span> <span class="n">SuspendUseCase</span><span class="p">&lt;</span><span class="k">in</span> <span class="n">T</span><span class="p">,</span> <span class="k">out</span> <span class="n">O</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">execute</span><span class="p">(</span><span class="n">param</span><span class="p">:</span> <span class="n">T</span><span class="p">):</span> <span class="n">O</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我修改了execute方法，使其能够从另一个抽象子类中调用。以下是更新后的代码片段：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// 扩展 SuspendUseCase 接口</span>
</span><span class='line'><span class="n">interface</span> <span class="n">RepositoryUseCase</span><span class="p">&lt;</span><span class="k">in</span> <span class="n">I</span><span class="p">,</span> <span class="k">out</span> <span class="n">O</span><span class="p">,</span> <span class="n">R</span> <span class="p">:</span> <span class="n">Repository</span><span class="p">&gt;</span> <span class="p">:</span>
</span><span class='line'>    <span class="n">SuspendUseCase</span><span class="p">&lt;</span><span class="n">I</span><span class="p">,</span> <span class="n">O</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="py">repository</span><span class="p">:</span> <span class="n">R</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>每个实现类型R的存储库的子类都将遵守该接口（Contract）。最合适的方法是使用抽象类。让我们实现一个抽象类来实现这一点：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// 确保遵守接口的抽象类</span>
</span><span class='line'><span class="k">abstract</span> <span class="k">class</span> <span class="nc">BaseRepositoryUseCase</span><span class="p">&lt;</span><span class="k">in</span> <span class="n">I</span><span class="p">,</span> <span class="k">out</span> <span class="n">O</span><span class="p">,</span> <span class="n">R</span> <span class="p">:</span> <span class="n">Repository</span><span class="p">&gt;(</span><span class="k">override</span> <span class="k">var</span> <span class="py">repository</span><span class="p">:</span> <span class="n">R</span><span class="p">)</span> <span class="p">:</span>
</span><span class='line'>    <span class="n">RepositoryUseCase</span><span class="p">&lt;</span><span class="n">I</span><span class="p">,</span> <span class="n">O</span><span class="p">,</span> <span class="n">R</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">suspend</span> <span class="n">operator</span> <span class="k">fun</span> <span class="nf">invoke</span><span class="p">(</span><span class="n">params</span><span class="p">:</span> <span class="n">I</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span><span class="p">):</span> <span class="n">O</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 这是对 SuspendUseCase 接口的调用</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">execute</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们需要做的就是扩展 BaseRepositoryUseCase ，遵循其泛型接口，提供一个输入类、一个输出类以及一个被覆写的Repo实例。以下实现已经足够：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// 用例的实现</span>
</span><span class='line'><span class="k">class</span> <span class="nc">GetReposUseCase</span><span class="p">(</span><span class="n">repository</span><span class="p">:</span> <span class="n">RepoRepository</span><span class="p">):</span>
</span><span class='line'>    <span class="n">BaseRepositoryUseCase</span><span class="p">&lt;</span><span class="n">Boolean</span><span class="p">,</span><span class="n">ResultWithFallback</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">DomainRepoEntity</span><span class="p">&gt;&gt;,</span> <span class="n">RepoRepository</span><span class="p">&gt;(</span><span class="n">repository</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">execute</span><span class="p">(</span><span class="n">param</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">):</span> <span class="n">ResultWithFallback</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">DomainRepoEntity</span><span class="p">&gt;&gt;</span> <span class="p">=</span>
</span><span class='line'>        <span class="c1">// 使用存储库获取并返回结果，如 repository.getData()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>结论</h2>

<p>因此，我们探索了从零开始使用用例（Use Case）、捕捉客户意图（Client Intent）的最佳方法。我演示了如何以功能性的方式实现和使用它们，使其易于测试和集成。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Android应用中实战Repository模式]]></title>
    <link href="https://alexhilton.github.io/blog/2025/06/13/incoporating-the-repository/"/>
    <updated>2025-06-13T22:57:11+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/06/13/incoporating-the-repository</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自「Incorporating the Repository Pattern into a Real-World Android」，原文链接<a href="https://medium.com/@siarhei.krupenich/incorporating-the-repository-pattern-into-a-real-world-android-app-739f2fee1460">https://medium.com/@siarhei.krupenich/incorporating-the-repository-pattern-into-a-real-world-android-app-739f2fee1460</a>，由Siarhei Krupenich发布于2025年4月4日。</p></blockquote>

<p><a href="https://alexhilton.github.io/blog/2025/06/13/incoporating-the-repository/"><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*qkmRcr1xl7uFYPUfNyk2rw.png" title="auto auto" ></a></p>

<!-- more -->


<h2>引言</h2>

<p>之前，我们探讨了整洁架构 (Clean Architecture) 中可能存在的问题，这些问题可能会损害 SOLID 原则、增加紧密耦合或使可测试性复杂化。我介绍了一种解决这些问题的解决方案，帮助我们维护更可扩展的代码库并更高效地添加新功能。在上一篇文章中，我还演示了如何将 ViewModel 拆分为两个主要部分——输入流和输出流——以减少紧密耦合并提高 ViewModel 的灵活性。</p>

<p>本文延续了这一思路，通过构建一个示例应用来展示 Android 开发的最佳实践，该应用通过 API 请求获取并显示 Git 仓库列表。我们的目标是将离线模式融入到项目中。实现这一目标最合适的方法是实现 Repository 模式。Repository 模式充当 Facade（如 GoF 设计模式中所述），在网络 API 和本地存储之间进行协调，确保高效的数据访问。</p>

<p>为了充分理解本文中的概念，建议你熟悉协程或 RxJava，尽管这些主题超出了本文的讨论范围。</p>

<h2>存储库方法：离线模式的最佳解决方案</h2>

<p>我们的目标是在应用中实现离线模式，确保即使在没有互联网连接的情况下也能访问数据。应用首次运行时，它会从网络获取数据，将其存储在缓存中，然后使用缓存的数据来最大限度地减少网络使用量并降低流量。</p>

<p>另一个关键方面是提供在需要时手动刷新网络数据的功能。最后，为了帮助用户在连接问题后识别应用何时恢复互联网连接，我们会在缓存数据旁边显示一条错误消息，直到连接恢复。</p>

<p>现在任务已经明确，让我们深入探讨即用型解决方案背后的理论。其核心是，我们需要解决经典的数据同步问题——从网络获取数据，将其存储在本地，并确保访问最新信息。</p>

<p>这意味着我们的应用至少需要两个数据源：一个用于网络 API 通信，另一个用于本地存储访问。根据应用的需求，可能会用到其他数据源，例如 Firebase（内置同步功能）、BLE 数据等等。</p>

<p>为了协调这些数据源（在我们的例子中是网络 API 和本地存储），最直观的设计模式是四人帮 (GoF) 的 Facade 模式。</p>

<p>Facade 模式是一种通过提供统一接口来简化与复杂系统交互的设计模式。在我们的例子中，这意味着我们可以将网络 API 和本地存储封装在一个抽象层之后。</p>

<p>我们新创建的 Facade 将同时保存 API 网络接口和本地存储接口的实例。另一方面，它将公开单一的访问方法，处理诸如强制从网络更新数据、本地存储数据以及管理错误等任务，同时隐藏内部复杂性。</p>

<p>我们来看看下面的图表：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1070/format:webp/0*FF1TQeYdw1F60rOZ" alt="图 1：外观模式" /></p>

<p>该图呈现了一种简单的逻辑：客户端仅与Facade 实例交互以访问数据，而所有底层复杂性都隐藏在其背后。这种方法完全符合我们的需求。</p>

<p>现在，让我们看一下代表该图的以下伪代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// API Network</span>
</span><span class='line'><span class="n">interface</span> <span class="n">Network</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">obtainData</span><span class="p">():</span> <span class="n">Data</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Local Storage</span>
</span><span class='line'><span class="n">interface</span> <span class="n">Storage</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">save</span><span class="p">(</span><span class="n">data</span><span class="p">:</span> <span class="n">Data</span><span class="p">)</span>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">getData</span><span class="p">():</span> <span class="n">Data</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Facade</span>
</span><span class='line'><span class="k">class</span> <span class="nc">DataFacade</span><span class="p">(</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">network</span><span class="p">:</span> <span class="n">Network</span><span class="p">,</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">storage</span><span class="p">:</span> <span class="n">Storage</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">obtainData</span><span class="p">():</span> <span class="n">Data</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">data</span> <span class="p">=</span> <span class="n">network</span><span class="p">.</span><span class="n">obtainData</span><span class="p">()</span>
</span><span class='line'>        <span class="n">storage</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">storage</span><span class="p">.</span><span class="n">getData</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Client</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Client</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>        <span class="n">testScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">data</span> <span class="p">=</span> <span class="n">facade</span><span class="p">.</span><span class="n">obtainData</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个简单的例子演示了这种方法：客户端持有一个 DataFacade 实例，并调用其obtainData() 方法。当然，在实际场景中，obtainData() 方法会包含更复杂的逻辑——处理错误、映射数据、将结果包装到 Result 类中，以及决定是获取新数据还是使用缓存版本。</p>

<p>现在，让我们更进一步，将这个 Facade 转换为 Repository 类。
Repository 模式旨在通过清晰的接口管理数据访问，同时隐藏底层的复杂性。从客户端的角度来看，
没有任何变化——用法保持不变——但在内部，逻辑结构良好且封装完整。</p>

<p>现在，让我们通过下图来查看 Repository 模式的结构：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1070/format:webp/0*_A5f_Tv_9UhUuFqz" alt="图 2：存储库模式" /></p>

<p>上图表明，Repository 模式有效地捕捉了 Facade 模式；然而，“Repository”一词更能体现访问数据的逻辑，
因此我们将使用“Repository”版本。</p>

<p>现在，让我们实现该模式的增强版本：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// Repository Interface</span>
</span><span class='line'><span class="n">interface</span> <span class="n">DataRepository</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">obtainData</span><span class="p">():</span> <span class="n">Data</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Repository</span>
</span><span class='line'><span class="k">class</span> <span class="nc">DataRepositoryImpl</span><span class="p">(</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">network</span><span class="p">:</span> <span class="n">Network</span><span class="p">,</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">storage</span><span class="p">:</span> <span class="n">Storage</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">DataRepository</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">obtainData</span><span class="p">():</span> <span class="n">Data</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">data</span> <span class="p">=</span> <span class="n">network</span><span class="p">.</span><span class="n">obtainData</span><span class="p">()</span>
</span><span class='line'>        <span class="n">storage</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">storage</span><span class="p">.</span><span class="n">getData</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Client</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Client</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">testScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">data</span> <span class="p">=</span> <span class="n">repository</span><span class="p">.</span><span class="n">obtainData</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>存储库模式：优势与劣势</h2>

<h3>存储库的优势</h3>

<ol>
<li>保持井然有序——你的业务逻辑无需处理数据库查询。</li>
<li>易于测试——你可以将真实数据库与模拟数据库交换以进行测试。</li>
<li>面向未来——如果你从 SQLite 切换到 Firebase，只需更新存储库即可。</li>
<li>可重用——应用程序的不同部分可以使用相同的存储库，而无需编写重复的代码。</li>
<li>代码更简洁——它隐藏了复杂的查询，因此其余代码保持简洁。</li>
</ol>


<h3>为什么它可能很繁琐</h3>

<ol>
<li>增加额外代码——如果你的应用程序很小，使用存储库可能会有些过度。</li>
<li>可能会降低速度——更多的层级意味着更多的对象和方法调用。</li>
<li>缓存不是自动的——如果你想避免不必要的数据库调用，则需要付出额外的努力。</li>
<li>可能过于依赖数据模型——如果设计不当，更改数据库结构可能会很麻烦。</li>
<li>并非总是必要——有时，仅使用 DAO 就足够了。</li>
</ol>


<p>Repository 模式非常适合保持简洁性和可扩展性，但它并非总是最简单的选择。如果你的应用规模较小，跳过它可能会更轻松。然而，我们的重点是为快速增长且可扩展的应用提供解决方案，因此我们选择了它。</p>

<p>现在，是时候编写代码并增强 Repo 应用了。</p>

<p>首先，让我们改进 Repository 结构并使其适应应用。由于没有太多细节需要整合，因此最终的图表与之前的版本非常相似：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1144/format:webp/0*aH3Jd9RK9EI0AA9I" alt="图3：获取Repos的Repository实现" /></p>

<h2>开撸</h2>

<p>接下来，让我们实现 Repository 并将其集成到应用程序中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// The Repository pattern implementation</span>
</span><span class='line'><span class="k">internal</span> <span class="k">class</span> <span class="nc">ReposRepositoryImpl</span> <span class="n">@Inject</span> <span class="n">constructor</span><span class="p">(</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">reposNetworkApi</span><span class="p">:</span> <span class="n">ReposNetworkApi</span><span class="p">,</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">reposDao</span><span class="p">:</span> <span class="n">ReposDao</span><span class="p">,</span>
</span><span class='line'>    <span class="c1">// mappers may be placed here</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">ReposRepository</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">getRepos</span><span class="p">(</span><span class="n">i</span>
</span><span class='line'>        <span class="n">sRefreshing</span><span class="p">:</span> <span class="n">Boolean</span>
</span><span class='line'>    <span class="p">):</span> <span class="n">ResultWithFallback</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Repo</span><span class="p">&gt;&gt;</span> <span class="p">{</span>
</span><span class='line'>         <span class="k">return</span> <span class="n">runCatching</span> <span class="p">{</span>
</span><span class='line'>             <span class="k">val</span> <span class="py">dbRepos</span> <span class="p">=</span> <span class="n">reposDao</span><span class="p">.</span><span class="n">getReposWithRelations</span><span class="p">()</span>
</span><span class='line'>             <span class="k">if</span> <span class="p">(</span><span class="n">isRefreshing</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                 <span class="n">reposNetworkApi</span><span class="p">.</span><span class="n">getRepos</span><span class="p">().</span><span class="n">fold</span><span class="p">({</span> <span class="n">result</span> <span class="p">-&gt;</span>
</span><span class='line'>                     <span class="n">reposDao</span><span class="p">.</span><span class="n">insertReposWithRelations</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</span><span class='line'>                     <span class="n">ResultWithFallback</span><span class="p">.</span><span class="n">Success</span><span class="p">(</span>
</span><span class='line'>                         <span class="n">reposDao</span><span class="p">.</span><span class="n">getReposWithRelations</span><span class="p">()</span>
</span><span class='line'>                     <span class="p">)</span>
</span><span class='line'>                  <span class="p">},</span> <span class="p">{</span> <span class="n">error</span> <span class="p">-&gt;</span>
</span><span class='line'>                     <span class="n">error</span><span class="p">.</span><span class="n">errorToResultWithFallback</span><span class="p">(</span><span class="n">dbRepos</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">})</span>
</span><span class='line'>              <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                  <span class="n">ResultWithFallback</span><span class="p">.</span><span class="n">Success</span><span class="p">(</span><span class="n">dbRepos</span><span class="p">)</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}.</span><span class="n">getOrElse</span> <span class="p">{</span> <span class="n">error</span> <span class="p">-&gt;</span>
</span><span class='line'>              <span class="n">error</span><span class="p">.</span><span class="n">exceptionToResultWithFallback</span><span class="p">(</span>
</span><span class='line'>                  <span class="n">reposDao</span><span class="p">.</span><span class="n">getReposWithRelations</span><span class="p">()</span>
</span><span class='line'>              <span class="p">)</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">clearRepos</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">reposDao</span><span class="p">.</span><span class="n">clearRepos</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>该代码片段演示了如何将 Repository 模式集成到应用中。它包含两个方法：一个用于清除数据，另一个用于获取数据。getRepos(isRefreshing: Boolean) 方法包含一个标志，用于强制从网络刷新数据。同时，它也可能从缓存中返回数据（例如，Room DB 用作缓存）。如果发生错误，即使数据已缓存，该方法也会返回一个包含失败信息的响应。</p>

<p>由于我们主要关注的是协程，因此让我们使用 RxJava 重写 getRepos(isRefreshing: Boolean) 方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">override</span> <span class="k">fun</span> <span class="nf">getRepos</span><span class="p">(</span>
</span><span class='line'>    <span class="n">isRefreshing</span><span class="p">:</span> <span class="n">Boolean</span>
</span><span class='line'><span class="p">):</span> <span class="n">Single</span><span class="p">&lt;</span><span class="n">ResultWithFallback</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Repo</span><span class="p">&gt;&gt;&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">if</span> <span class="p">(</span><span class="n">isRefreshing</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">reposNetworkApi</span><span class="p">.</span><span class="n">getRepos</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">flatMap</span> <span class="p">{</span> <span class="n">result</span> <span class="p">-&gt;</span>
</span><span class='line'>                <span class="n">reposDao</span><span class="p">.</span><span class="n">insertReposWithRelations</span><span class="p">(</span><span class="n">networkReposToDbReposMapper</span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="n">result</span><span class="p">))</span>
</span><span class='line'>                <span class="n">reposDao</span><span class="p">.</span><span class="n">getReposWithRelations</span><span class="p">()</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">dbReposToReposMapper</span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">ResultWithFallback</span><span class="p">.</span><span class="n">Success</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="p">.</span><span class="n">onErrorResumeNext</span> <span class="p">{</span> <span class="n">error</span> <span class="p">-&gt;</span>
</span><span class='line'>                <span class="n">reposDao</span><span class="p">.</span><span class="n">getReposWithRelations</span><span class="p">()</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">error</span><span class="p">.</span><span class="n">errorToResultWithFallback</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">reposDao</span><span class="p">.</span><span class="n">getReposWithRelations</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">dbReposToReposMapper</span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>            <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">ResultWithFallback</span><span class="p">.</span><span class="n">Success</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>            <span class="p">.</span><span class="n">onErrorReturn</span> <span class="p">{</span> <span class="n">error</span> <span class="p">-&gt;</span>
</span><span class='line'>                <span class="n">error</span><span class="p">.</span><span class="n">exceptionToResultWithFallback</span><span class="p">(</span><span class="n">emptyList</span><span class="p">())</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>异常处理的扩展可能如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">fun</span> <span class="nf">Throwable</span><span class="p">.</span><span class="n">exceptionToResultWithFallback</span><span class="p">(</span>
</span><span class='line'>        <span class="n">data</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">RepoWithRelations</span><span class="p">&gt;,</span>
</span><span class='line'>    <span class="p">):</span> <span class="n">ResultWithFallback</span><span class="p">.</span><span class="n">Failure</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Repo</span><span class="p">&gt;&gt;</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">isNotEmpty</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">ResultWithFallback</span><span class="p">.</span><span class="n">Failure</span><span class="p">(</span>
</span><span class='line'>            <span class="n">dbReposToReposMapper</span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="n">data</span><span class="p">),</span> <span class="n">RepoError</span><span class="p">.</span><span class="n">Unknown</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">ResultWithFallback</span><span class="p">.</span><span class="n">Failure</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Repo</span><span class="p">&gt;&gt;(</span>
</span><span class='line'>            <span class="n">data</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>            <span class="n">RepoError</span><span class="p">.</span><span class="n">Unknown</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>结果错误处理扩展可以写成如下形式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">fun</span> <span class="nf">Throwable</span><span class="p">.</span><span class="n">errorToResultWithFallback</span><span class="p">(</span>
</span><span class='line'>        <span class="n">localData</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">RepoWithRelations</span><span class="p">&gt;</span>
</span><span class='line'>    <span class="p">):</span> <span class="n">ResultWithFallback</span><span class="p">.</span><span class="n">Failure</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Repo</span><span class="p">&gt;&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">repoError</span> <span class="p">=</span> <span class="k">when</span> <span class="p">(</span><span class="k">this</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">is</span> <span class="n">IOException</span> <span class="p">-&gt;</span> <span class="n">RepoError</span><span class="p">.</span><span class="n">NetworkLost</span>
</span><span class='line'>            <span class="k">is</span> <span class="n">HttpException</span> <span class="p">-&gt;</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">code</span><span class="p">()</span> <span class="p">==</span> <span class="m">401</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">RepoError</span><span class="p">.</span><span class="n">Unauthorized</span>
</span><span class='line'>                <span class="k">else</span> <span class="n">RepoError</span><span class="p">.</span><span class="n">Unknown</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span><span class='line'>            <span class="k">else</span> <span class="p">-&gt;</span> <span class="n">RepoError</span><span class="p">.</span><span class="n">Unknown</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">ResultWithFallback</span><span class="p">.</span><span class="n">Failure</span><span class="p">(</span>
</span><span class='line'>            <span class="n">dbReposToReposMapper</span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="n">localData</span><span class="p">),</span>
</span><span class='line'>            <span class="n">repoError</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>包装的故障数据类：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">sealed</span> <span class="k">class</span> <span class="nc">ResultWithFallback</span><span class="p">&lt;</span><span class="k">out</span> <span class="n">T</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">Success</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">val</span> <span class="py">data</span><span class="p">:</span> <span class="n">T</span><span class="p">)</span> <span class="p">:</span> <span class="n">ResultWithFallback</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">Failure</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">val</span> <span class="py">data</span><span class="p">:</span> <span class="n">T</span><span class="p">?,</span> <span class="k">val</span> <span class="py">error</span><span class="p">:</span> <span class="n">RepoError</span><span class="p">)</span> <span class="p">:</span> <span class="n">ResultWithFallback</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>并且转换映射扩展如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">inline</span> <span class="k">fun</span> <span class="err">&lt;</span><span class="nf">T</span><span class="p">,</span> <span class="n">R</span><span class="p">&gt;</span> <span class="n">ResultWithFallback</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;.</span><span class="n">map</span><span class="p">(</span><span class="n">transform</span><span class="p">:</span> <span class="p">(</span><span class="n">T</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">R</span><span class="p">):</span> <span class="n">ResultWithFallback</span><span class="p">&lt;</span><span class="n">R</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">when</span> <span class="p">(</span><span class="k">this</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">ResultWithFallback</span><span class="p">.</span><span class="n">Success</span> <span class="p">-&gt;</span> <span class="n">ResultWithFallback</span><span class="p">.</span><span class="n">Success</span><span class="p">(</span><span class="n">transform</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">ResultWithFallback</span><span class="p">.</span><span class="n">Failure</span> <span class="p">-&gt;</span> <span class="n">ResultWithFallback</span><span class="p">.</span><span class="n">Failure</span><span class="p">(</span>
</span><span class='line'>            <span class="n">data</span><span class="o">?.</span><span class="n">let</span> <span class="p">{</span> <span class="n">transform</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'>            <span class="n">error</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>结论</h2>

<p>我们已成功将存储库模式(Repository pattern)集成到应用中，事实证明，这是一种维护离线模式的绝佳方法。此模式不仅简化了数据管理，还确保了可扩展性。它是实现数据检索和存储功能的最有效方法之一，随着项目规模的增长，你可以更轻松地管理本地和远程数据源。</p>

<p>你可以通过以下链接探索与本文主题相关的 GitHub 代码库：<a href="https://github.com/sergeykrupenich/TestRepo/tree/repository">https://github.com/sergeykrupenich/TestRepo/tree/repository</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jetpack Compose 中ViewModel的最佳实践]]></title>
    <link href="https://alexhilton.github.io/blog/2025/06/11/mvvm-inputs-outputs-jetpack-compose/"/>
    <updated>2025-06-11T22:20:55+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/06/11/mvvm-inputs-outputs-jetpack-compose</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自「MVVM Inputs/Outputs: Best Practices and Implementation in Jetpack Compose」，原文链接<a href="https://medium.com/@siarhei.krupenich/mvvm-inputs-outputs-best-practices-and-implementation-in-jetpack-compose-18966d4d914e">https://medium.com/@siarhei.krupenich/mvvm-inputs-outputs-best-practices-and-implementation-in-jetpack-compose-18966d4d914e</a>， 由Siarhei Krupenich发布于2025年3月16日。</p></blockquote>

<p><strong>译注：</strong> 因为文章重点讨论的是ViewModel的实现方式，并不涉及平台特性，所以完全适用于跨平台的Compose Multiplatform。</p>

<p><a href="https://alexhilton.github.io/blog/2025/06/11/mvvm-inputs-outputs-jetpack-compose/"><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*vIJH8waAV-986AZatyXxwA.png" title="auto auto" ></a></p>

<!-- more -->


<h2>简介</h2>

<p>在我<a href="https://juejin.cn/post/7509376843951554596">之前的文章</a>中，我探讨了“整洁架构”（Clean Architecture）作为一种实用的 Android 开发方法。这种架构解决方案侧重于将逻辑组件划分为不同的层，每一层负责各自的任务。</p>

<p>本文以此为基础，通过一个真实的应用示例介绍另一种最佳实践。我们将重点介绍使用 ViewModel 时的一个常见问题，概述一个结构化的解决方案，并深入探讨其背后的理论。此外，我将演示如何使用 Jetpack Compose 有效地实现这种方法，并提供各种示例。所有代码片段都假设读者理解使用 Hilt 的依赖注入 (DI - Dependency Injection)。</p>

<h2>ViewModel概述</h2>

<p>MVVM 的核心思想是通过将 UI 逻辑移入状态来将其与视图分离。这确保了视图在保持逻辑井然有序的同时保持简洁。首先，这种方法符合单一职责原则，从而增强了可测试性和可扩展性。此外，它还解决了一个典型的 Android 挑战——在生命周期事件（例如配置更改）期间处理 UI 状态。</p>

<p>为了实现这一点，我们使用 ViewModel 来管理并保留其状态，即使关联的 Activity 被重新创建。我们来看下面的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// ViewModel 例子</span>
</span><span class='line'><span class="n">@HiltViewModel</span>
</span><span class='line'><span class="k">internal</span> <span class="k">class</span> <span class="nc">ScreenViewModel</span> <span class="n">@Inject</span> <span class="n">constructor</span><span class="p">(</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">getData</span><span class="p">:</span> <span class="n">GetUiDataUseCase</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">ViewModel</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">_state</span> <span class="p">=</span> <span class="n">MutableStateFlow</span><span class="p">&lt;</span><span class="n">State</span><span class="p">&gt;(</span><span class="n">State</span><span class="p">.</span><span class="n">Loading</span><span class="p">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">state</span><span class="p">:</span> <span class="n">StateFlow</span><span class="p">&lt;</span><span class="n">State</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">_state</span><span class="p">.</span><span class="n">asStateFlow</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">loadData</span><span class="p">(</span><span class="n">isRefreshing</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">updateState</span><span class="p">(</span><span class="n">isRefreshing</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">fun</span> <span class="nf">updateState</span><span class="p">(</span><span class="n">isRefreshing</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">)</span> <span class="p">=</span> <span class="n">viewModelScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_state</span><span class="p">.</span><span class="n">value</span> <span class="p">=</span> <span class="n">State</span><span class="p">.</span><span class="n">Loading</span>
</span><span class='line'>        <span class="n">_state</span><span class="p">.</span><span class="n">value</span> <span class="p">=</span> <span class="n">getData</span><span class="p">(</span><span class="n">isRefreshing</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码片段演示了一个简单的 ViewModel，它只有一个状态和一个由 init 触发的方法。loadData() 方法启动状态更新过程，该过程由协程 StateFlow 管理。</p>

<p>一个好的做法是将所有可能的页面状态合并到一个密封类中。这种方法能够以结构化的单方法风格处理 UI 状态变化，从而使你的代码更具可读性和可维护性。</p>

<p>以下示例说明了这一概念：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// State</span>
</span><span class='line'><span class="k">internal</span> <span class="n">sealed</span> <span class="n">interface</span> <span class="n">State</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">Success</span><span class="p">(</span><span class="k">val</span> <span class="py">repos</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">DataUi</span><span class="p">&gt;):</span> <span class="n">State</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">object</span> <span class="nc">Empty</span><span class="p">:</span> <span class="n">State</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">object</span> <span class="nc">Loading</span><span class="p">:</span> <span class="n">State</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">Error</span><span class="p">(</span><span class="k">val</span> <span class="py">message</span><span class="p">:</span> <span class="n">String</span><span class="p">?):</span> <span class="n">State</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在，让我们看一下以下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// Composable View that uses the ViewModel:</span>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">Screen</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">viewModel</span><span class="p">:</span> <span class="n">ScreenViewModel</span> <span class="p">=</span> <span class="n">hiltViewModel</span><span class="p">()</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">state</span> <span class="k">by</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">collectAsState</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">viewModel</span><span class="p">.</span><span class="n">loadRepos</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">RepoState</span><span class="p">(</span><span class="n">repoState</span><span class="p">,</span> <span class="n">viewModel</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">RepoState</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">State</span><span class="p">,</span> <span class="n">viewModel</span><span class="p">:</span> <span class="n">ScreenViewModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">when</span> <span class="p">(</span><span class="n">state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">State</span><span class="p">.</span><span class="n">Success</span> <span class="p">-&gt;</span> <span class="n">LazyColumn</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">items</span><span class="p">(</span><span class="n">state</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">count</span><span class="p">())</span> <span class="p">{</span> <span class="n">index</span> <span class="p">-&gt;</span>
</span><span class='line'>                <span class="n">Item</span><span class="p">(</span><span class="n">state</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="n">index</span><span class="p">])</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">State</span><span class="p">.</span><span class="n">Empty</span> <span class="p">-&gt;</span> <span class="n">EmptyState</span><span class="p">(</span>
</span><span class='line'>            <span class="n">stateMessage</span> <span class="p">=</span> <span class="err">“</span><span class="n">Empty</span> <span class="n">message</span><span class="err">”</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">emptyButtonAction</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">viewModel</span><span class="p">.</span><span class="n">loadData</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">State</span><span class="p">.</span><span class="n">Error</span> <span class="p">-&gt;</span> <span class="n">RepoEmptyState</span><span class="p">(</span>
</span><span class='line'>            <span class="n">stateMessage</span> <span class="p">=</span> <span class="n">state</span><span class="p">.</span><span class="n">message</span><span class="p">,</span>
</span><span class='line'>            <span class="n">emptyButtonAction</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">viewModel</span><span class="p">.</span><span class="n">loadData</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>        <span class="n">State</span><span class="p">.</span><span class="n">Loading</span> <span class="p">-&gt;</span> <span class="n">LoadingState</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Screen() 可组合函数从 StateFlow 中观察状态，并在状态发生变化时进行更新。根据具体状态（Data、Empty、Error 或 Loading），将使用单函数方法触发相应的可组合函数进行处理。</p>

<p>总体而言，一切看起来都很稳定——状态在 ViewModel 中管理，并且视图（Activity 的一部分）可以安全地重新创建而不会丢失数据。此外，这种方法还可以更轻松地编写状态处理、ViewModel 函数调用和 UI 外观的单元测试。</p>

<h2>常规ViewModel的不足之处</h2>

<p>纵观当前的实现，首先突出的问题是 ViewModel 可能会不堪重负。随着应用的增长，我们将多个状态和逻辑打包在一个 ViewModel 中处理，这可能会违反单一职责原则。</p>

<p>另一个关键问题是 UI 和逻辑之间的紧密耦合。直接操作 ViewModel 的实例会使 UI 更加依赖于其具体实现，从而降低灵活性和可复用性。</p>

<h2>为什么常规 ViewModel 会成为问题</h2>

<p>使用常规 ViewModel（不分离输入和输出）乍一看似乎没什么问题。但随着应用规模的增长，情况可能会变得混乱。原因如下：</p>

<ol>
<li>UI 和逻辑过于混杂</li>
<li>ViewModel 同时处理业务逻辑和 UI 更新，使它们紧密相连。</li>
<li>如果需要更改 UI，通常也需要修改 ViewModel，这不应该发生。</li>
<li><p>💡 例如：你的 UI 可能在一个地方处理验证、数据转换和加载状态。</p></li>
<li><p>测试难度加大</p></li>
<li>功能过多的 ViewModel 会使测试编写变得复杂。</li>
<li>不同时处理数据和状态，就无法轻松测试 UI 行为。</li>
<li><p>💡 例如：即使是简单的 UI 测试也会变得棘手，因为 ViewModel 控制着一切。</p></li>
<li><p>更改 UI 变得令人头疼</p></li>
<li>如果你的 ViewModel 没有正确分离，更改一个 UI 元素就会影响所有 UI 元素。</li>
<li><p>💡 示例：将 TextView 替换为 RecyclerView 会迫使你修改 ViewModel，即使它不应该关心 UI 细节。</p></li>
<li><p>ViewModel 变得过大</p></li>
<li>随着时间的推移，ViewModel 会变得庞大且难以管理。</li>
<li><p>它们会同时处理用户输入、API 调用和状态更新。💡 💡 示例：包含数百行代码的 ViewModel 难以阅读、调试或更新。</p></li>
<li><p>逻辑难以复用</p></li>
<li>如果 ViewModel 混合了输入处理（按钮点击）和输出逻辑（数据格式化），那么复用其中的部分内容会变得非常麻烦。</li>
<li><p>💡 示例：你想在另一个页面上复用某些业务逻辑，但它与特定于 UI 的代码纠缠在一起。</p></li>
<li><p>UI 状态管理变得混乱</p></li>
<li>在 ViewModel 内部处理加载、成功和错误状态会让事情变得混乱。</li>
<li><p>💡 示例：处理失败的网络请求并显示错误消息不应与其他逻辑混淆。</p></li>
<li><p>大型应用中难以扩展</p></li>
<li>如果多个页面共享一个 ViewModel，它就会超载。</li>
<li>在一个 ViewModel 中管理许多不同的 UI 状态会导致混乱。</li>
<li>💡 示例：管理 10 个以上页面的 ViewModel 很快就会成为维护的噩梦。</li>
</ol>


<h2>灵丹妙药：输入/输出式ViewModel</h2>

<p>我们讨论的许多问题都可以通过使用输入/输出 ViewModel 方法得到最小化，甚至完全解决。此方法将 ViewModel 中的“输入”流和“输出”流分离。</p>

<ul>
<li>输出处理 UI 的更新（例如，公开状态）。</li>
<li>输入接收来自 UI 的消息（例如，用户交互）。</li>
</ul>


<p>例如，在典型的 ViewModel 中，StateFlow 代表“输出”流，因为它向 UI 提供状态更新。相反，像 reloadData(refreshing: Boolean) 这样的方法充当“输入”流，处理 UI 触发的操作。</p>

<p>此模式不是直接与 ViewModel 交互，而是通过输入和输出接口强制进行结构化访问，从而明确依赖关系并减少紧密耦合。</p>

<p>使用此模式的示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// 取代viewModel.reloadData(refreshing = true)</span>
</span><span class='line'><span class="n">input</span><span class="p">.</span><span class="n">reloadData</span><span class="p">(</span><span class="n">refreshing</span> <span class="p">=</span> <span class="k">true</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 取代val dataState by viewModel.data.collectAsState()</span>
</span><span class='line'><span class="k">val</span> <span class="py">dataState</span> <span class="k">by</span> <span class="n">output</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">collectAsState</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种结构化方法提高了代码的清晰度、可测试性和可维护性，使 ViewModel 更加模块化和可扩展。</p>

<p>我们来画个图，直观地了解一下它的工作原理：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1082/format:webp/0*aOEwjnoh4uw8_C9y" alt="ViewModel" /></p>

<p>该图展示了该模式。ViewModel 实现了 ScreenViewModel 接口，该接口进一步细分为两个独立的接口——一个用于处理输入（操作），另一个用于提供输出（数据）。这种设置如同契约，确保了清晰的结构和分离。ViewModel 本身仍然是一个实例，避免在其层面直接操作。所有操作都通过输入和输出接口进行，从而强化了单一职责原则。最后，View 仅与 ScreenViewModel 接口交互，在抽象层进行操作。此外，View 还可以进一步细分为输入和输出接口，从而允许以简洁、模块化的方式访问方法和数据。</p>

<h2>开撸吧！</h2>

<p>首先，应该重构 ViewModel，将其封装在一个接口中，并将其功能分离到专用的输入和输出接口中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// ViewModel</span>
</span><span class='line'><span class="k">internal</span> <span class="n">interface</span> <span class="n">ScreenViewModel</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">interface</span> <span class="n">Input</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">fun</span> <span class="nf">loadData</span><span class="p">(</span><span class="n">isRefreshing</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">interface</span> <span class="n">Output</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">state</span><span class="p">:</span> <span class="n">StateFlow</span><span class="p">&lt;</span><span class="n">State</span><span class="p">&gt;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">@HiltViewModel</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">ViewModel</span> <span class="n">@Inject</span> <span class="n">constructor</span><span class="p">(</span>
</span><span class='line'>        <span class="k">private</span> <span class="k">val</span> <span class="py">getData</span><span class="p">:</span> <span class="n">GetUiDataUseCase</span><span class="p">,</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">:</span> <span class="n">BaseViewModel</span><span class="p">(),</span> <span class="n">Input</span><span class="p">,</span> <span class="n">Output</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">input</span><span class="p">:</span> <span class="n">Input</span> <span class="p">=</span> <span class="k">this</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">output</span><span class="p">:</span> <span class="n">Output</span> <span class="p">=</span> <span class="k">this</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">private</span> <span class="k">val</span> <span class="py">_state</span> <span class="p">=</span> <span class="n">MutableStateFlow</span><span class="p">&lt;</span><span class="n">State</span><span class="p">&gt;(</span><span class="n">State</span><span class="p">.</span><span class="n">Loading</span><span class="p">)</span>
</span><span class='line'>        <span class="k">override</span> <span class="k">val</span> <span class="py">state</span><span class="p">:</span> <span class="n">StateFlow</span><span class="p">&lt;</span><span class="n">State</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">_state</span><span class="p">.</span><span class="n">asStateFlow</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">override</span> <span class="k">fun</span> <span class="nf">loadData</span><span class="p">(</span><span class="n">isRefreshing</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">updateState</span><span class="p">(</span><span class="n">isRefreshing</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">private</span> <span class="k">fun</span> <span class="nf">updateState</span><span class="p">(</span><span class="n">isRefreshing</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">)</span> <span class="p">=</span> <span class="n">viewModelScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">_state</span><span class="p">.</span><span class="n">value</span> <span class="p">=</span> <span class="n">State</span><span class="p">.</span><span class="n">Loading</span>
</span><span class='line'>            <span class="n">_state</span><span class="p">.</span><span class="n">value</span> <span class="p">=</span> <span class="n">getData</span><span class="p">(</span><span class="n">isRefreshing</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来，我们实现与 ViewModel 交互的视图。以下代码片段提供了一个使用 Jetpack Compose 的示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">Screen</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">viewModel</span><span class="p">:</span> <span class="n">ReposScreenViewModel</span><span class="p">.</span><span class="n">ViewModel</span> <span class="p">=</span> <span class="n">hiltViewModel</span><span class="p">()</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">state</span> <span class="k">by</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">output</span><span class="p">.</span><span class="n">repoState</span><span class="p">.</span><span class="n">collectAsState</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">viewModel</span><span class="p">.</span><span class="n">input</span><span class="p">.</span><span class="n">loadData</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">UIState</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">viewModel</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// UiState使用接口 ScreenViewModel.Input来操作ViewModel的输入</span>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">UIState</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">State</span><span class="p">,</span> <span class="n">input</span><span class="p">:</span> <span class="n">ScreenViewModel</span><span class="p">.</span><span class="n">Input</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">when</span> <span class="p">(</span><span class="n">state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">State</span><span class="p">.</span><span class="n">Success</span> <span class="p">-&gt;</span> <span class="n">LazyColumn</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">items</span><span class="p">(</span><span class="n">state</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">count</span><span class="p">())</span> <span class="p">{</span> <span class="n">index</span> <span class="p">-&gt;</span>
</span><span class='line'>                <span class="n">UIItem</span><span class="p">(</span><span class="n">state</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="n">index</span><span class="p">])</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">State</span><span class="p">.</span><span class="n">Empty</span> <span class="p">-&gt;</span> <span class="n">EmptyState</span><span class="p">(</span>
</span><span class='line'>          <span class="n">emptyButtonAction</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 取代 viewModel.loadData(true)</span>
</span><span class='line'>            <span class="n">input</span><span class="p">.</span><span class="n">loadData</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">RepoState</span><span class="p">.</span><span class="n">Error</span> <span class="p">-&gt;</span> <span class="n">EmptyState</span><span class="p">(</span><span class="n">isError</span> <span class="p">=</span> <span class="k">true</span><span class="p">)</span>
</span><span class='line'>        <span class="n">RepoState</span><span class="p">.</span><span class="n">Loading</span> <span class="p">-&gt;</span> <span class="n">LoadingState</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>使用输入/输出式ViewModel 的优势</h2>

<p>通过将 ViewModel 构建为输入和输出接口，你可以创建更简洁、更高效的架构。其优势如下：</p>

<h3>✅ 清晰的关注点分离（SoC - Separation of Concerns）</h3>

<p>输入处理用户操作（例如，按钮点击、文本输入），而输出管理 UI 状态和数据。这使得你的代码库更加结构化，更易于导航。</p>

<h3>✅ 更轻松的测试</h3>

<p>通过清晰的分离，你可以分别测试输入（用户交互）和输出（状态更新），从而使单元测试更加专注和可靠。</p>

<h3>✅ 更好的可重用性和可扩展性</h3>

<p>输入和输出可以在多个页面或功能之间重复使用，而无需重复逻辑，从而帮助你的应用在扩展过程中避免不必要的复杂性。</p>

<h3>✅ 简化的状态管理</h3>

<p>将 UI 状态（加载、成功、错误）保留在输出中，可以防止 ViewModel 被无关的逻辑淹没，从而使状态处理更加直观。</p>

<h2>结论</h2>

<p>我们探索了另一个可以无缝集成到你项目中的强大工具。通过采用这种方法，你可以增强应用的可扩展性，保持代码库简洁，并提高测试效率。这是一种简单而有效的方法，可以提高可维护性，并让你的开发流程面向未来。</p>

<p>欢迎查看包含现成解决方案的代码库：<a href="https://github.com/sergeykrupenich/TestRepo/tree/inputs-outputs">https://github.com/sergeykrupenich/TestRepo/tree/inputs-outputs</a>。</p>

<p>文章更新：有人指出，最好避免在 ViewModel 的 init 块中加载数据。相反，一种更灵活的方法是使用 Composable 中的 LaunchedEffect() 延迟触发数据加载。这可以确保 ViewModel 不会过早获取数据，并更好地与 Compose 的生命周期保持一致。（译注：关于副作用函数可参考之前的文章<a href="https://juejin.cn/post/7405158681078104127">降Compose十八掌之『龙战于野』| Side Effects</a>）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在现代Android开发中实战Clean Architecture]]></title>
    <link href="https://alexhilton.github.io/blog/2025/06/10/clean-architecture-for-android/"/>
    <updated>2025-06-10T22:33:00+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/06/10/clean-architecture-for-android</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自「Refining Clean Architecture for Android: A
Practical Approach」，原文链接<a href="https://medium.com/@siarhei.krupenich/refining-clean-architecture-for-android-a-practical-approach-32ce966f8ba3">https://medium.com/@siarhei.krupenich/refining-clean-architecture-for-android-a-practical-approach-32ce966f8ba3</a>，由Siarhei Krupenich发布于2025年2月23日。</p></blockquote>

<p><a href="https://alexhilton.github.io/blog/2025/06/10/clean-architecture-for-android/"><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*964gi7PELf9cc4CQwp6XBA.png" title="auto auto" ></a></p>

<!-- more -->


<h2>简介</h2>

<p>本文是专注于 Android 开发和设计中实际问题一系列文章中的第一篇，这些文章将会涵盖整洁架构 (Clean Architecture)、ViewModel 输入/输出拆分、Repository 模式等，并基于最佳实践提供解决方案。每篇都将聚焦于一个特定主题，并包含一个 GitHub 分支的链接，用于演示该主题的实践代码。作为开篇，本文将探讨整洁架构、其面临的挑战以及可在生产环境中应用的实用解决方案。</p>

<h2>整洁架构（Clean Architecture）简介</h2>

<p>整洁架构是一种结构化的方法，通过将应用程序的代码库划分为数据层、领域层和展现层来组织它。</p>

<ul>
<li>数据层（Data Layer）：处理数据检索和存储，无需了解域层或表示层。</li>
<li>领域层（Domain Layer）：包含业务逻辑和用例，与数据层交互，但独立于表示层。</li>
<li>展现层（Presentation Layer）：专注于 UI，从领域层接收状态，并保持逻辑最小化。</li>
</ul>


<p>这里关键原则是依赖关系只向内流动——每一层只了解其下一层，从而确保可维护性和关注点分离（Separation of Concerns）。下图展示了 Android 中一个简单的整洁架构 (Clean Architecture) 实现：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1064/format:webp/0*iND5nS_w8q9O_o2z" alt="图 1：Android 的简单整洁架构实现" /></p>

<h2>让我们开始撸吧！</h2>

<p>首先，我们需要按照图 1构建项目结构。虽然功能模块通常是大型项目的一部分，但为了演示方便，我们将尽量简化，仅关注整洁架构。</p>

<p>我们将构建一个小型应用，该应用使用整洁架构 + MVVM + 协程，进行单个 API 调用并显示一个简单的列表。</p>

<p>为了保持独立性，每个层将被拆分为独立的模块：</p>

<ul>
<li>数据层(Data Layer)：包含 Retrofit 依赖项、网络模型和用于数据访问的存储库。（也可以选择添加本地存储实现。）</li>
<li>领域层(Domain Layer)：包含用例（或交互器）、领域模型和用于将网络模型转换为领域模型的映射器。它依赖于数据模块，因为它使用其存储库。</li>
<li>表示层(Presentation Layer)：包含与领域模块中的用例交互的 ViewModel，用于处理 UI 数据。</li>
</ul>


<p>项目结构如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'>- Data
</span><span class='line'>  API Interface <span class="o">(</span>Retrofit<span class="o">)</span>
</span><span class='line'>  DAO
</span><span class='line'>  Repository Interface
</span><span class='line'>  Repository Instance
</span><span class='line'>- Domain
</span><span class='line'>  Use-cases and their interfaces
</span><span class='line'>  Domain models
</span><span class='line'>  Mappers from Network to Domain models
</span><span class='line'>- Presentation
</span><span class='line'>  ViewModels
</span><span class='line'>  Views
</span></code></pre></td></tr></table></div></figure>


<h3>数据模块（Data Module）:</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">interface</span> <span class="n">DataNetworkApi</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">@GET</span><span class="p">(</span><span class="n">API_DATA</span><span class="p">)</span> <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">getData</span><span class="p">():</span> <span class="n">Result</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">ApiEntity</span><span class="p">&gt;&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">companion</span> <span class="k">object</span> <span class="err">{ </span>
</span><span class='line'>    <span class="k">private</span> <span class="n">const</span> <span class="k">val</span> <span class="py">API_DATA</span> <span class="p">=</span> <span class="s">&quot;/api/data&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Keep</span>
</span><span class='line'><span class="n">data</span> <span class="k">class</span> <span class="nc">DataApiEntity</span><span class="p">(</span>
</span><span class='line'>  <span class="n">@SerializedName</span><span class="p">(</span><span class="s">&quot;id&quot;</span><span class="p">)</span> <span class="k">val</span> <span class="py">id</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'>  <span class="n">@SerializedName</span><span class="p">(</span><span class="s">&quot;name&quot;</span><span class="p">)</span> <span class="k">val</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'>  <span class="n">@SerializedName</span><span class="p">(</span><span class="s">&quot;description&quot;</span><span class="p">)</span> <span class="k">val</span> <span class="py">description</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">interface</span> <span class="n">DataRepository</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">getData</span><span class="p">(</span><span class="n">isRefreshing</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">):</span> <span class="n">Result</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">DataApiEntity</span><span class="p">&gt;&gt;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">internal</span> <span class="k">class</span> <span class="nc">DataRepositoryImpl</span> <span class="n">@Inject</span> <span class="n">constructor</span><span class="p">(</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">val</span> <span class="py">dataNetworkApi</span><span class="p">:</span> <span class="n">DataNetworkApi</span><span class="p">,</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">val</span> <span class="py">dataLocalStorage</span><span class="p">:</span> <span class="n">DataLocalStorage</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">DataRepository</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">getData</span><span class="p">(</span><span class="n">isRefreshing</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">):</span>
</span><span class='line'>    <span class="n">Result</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">DataApiEntity</span><span class="p">&gt;&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// dataLocalStorage and dataLocalStorage usage </span>
</span><span class='line'>    <span class="err">…</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">dataNetworkApi</span><span class="p">.</span><span class="n">getData</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>显然，这不是存储库模式(Repository Pattern)的经典实现——它纯粹是为了演示而设计的，以让我们能专注于整洁架构。</p>

<h3>领域模块（Domain Module）：</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">data</span> <span class="k">class</span> <span class="nc">DataEntity</span><span class="p">(</span>
</span><span class='line'>  <span class="k">val</span> <span class="py">id</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'>  <span class="k">val</span> <span class="py">title</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'>  <span class="k">val</span> <span class="py">description</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">internal</span> <span class="k">class</span> <span class="nc">DataEntityMapperImpl</span><span class="p">:</span> <span class="n">DataEntityMapper</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">fun</span> <span class="nf">map</span><span class="p">(</span><span class="n">param</span><span class="p">:</span> <span class="n">DataApiEntity</span><span class="p">):</span> <span class="n">DataEntity</span> <span class="p">=</span> <span class="n">with</span><span class="p">(</span><span class="n">param</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">DataEntity</span><span class="p">(</span>
</span><span class='line'>      <span class="err">…</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">interface</span> <span class="n">GetDataUseCase</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">suspend</span> <span class="n">operator</span> <span class="k">fun</span> <span class="nf">invoke</span><span class="p">(</span><span class="n">param</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">):</span>  <span class="n">Result</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">DataEntity</span><span class="p">&gt;&gt;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">internal</span> <span class="k">class</span> <span class="nc">GetDataUseCaseImpl</span><span class="p">(</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">val</span> <span class="py">mapper</span><span class="p">:</span> <span class="n">DataEntityMapper</span><span class="p">,</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">val</span> <span class="py">repository</span><span class="p">:</span> <span class="n">DataRepository</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">GetDataUseCase</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="n">suspend</span> <span class="n">operator</span> <span class="k">fun</span> <span class="nf">invoke</span><span class="p">(</span>
</span><span class='line'>    <span class="n">param</span><span class="p">:</span> <span class="n">Boolean</span>
</span><span class='line'>  <span class="p">):</span> <span class="n">Result</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">DataEntity</span><span class="p">&gt;&gt;</span> <span class="p">=</span>
</span><span class='line'>    <span class="n">repository</span><span class="p">.</span><span class="n">getData</span><span class="p">(</span><span class="n">param</span><span class="p">).</span><span class="n">map</span> <span class="p">{</span> <span class="n">repositoryData</span> <span class="p">-&gt;</span>
</span><span class='line'>      <span class="n">repositoryData</span><span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">data</span> <span class="p">-&gt;</span> <span class="n">mapper</span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>展现模块（Presentation Module）：</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">internal</span> <span class="n">sealed</span> <span class="n">interface</span> <span class="n">UiDataState</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">data</span> <span class="k">class</span> <span class="nc">Success</span><span class="p">(</span><span class="k">val</span> <span class="py">repos</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Data</span><span class="p">&gt;):</span> <span class="n">UiDataState</span>
</span><span class='line'>   <span class="n">data</span> <span class="k">object</span> <span class="nc">Empty</span><span class="p">:</span> <span class="n">UiDataState</span>
</span><span class='line'>   <span class="n">data</span> <span class="k">object</span> <span class="nc">Loading</span><span class="p">:</span> <span class="n">UiDataState</span>
</span><span class='line'>   <span class="n">data</span> <span class="k">class</span> <span class="nc">Error</span><span class="p">(</span><span class="k">val</span> <span class="py">message</span><span class="p">:</span> <span class="n">String</span><span class="p">?):</span> <span class="n">UiDataState</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">interface</span> <span class="n">GetUiDataUseCase</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">suspend</span> <span class="n">operator</span> <span class="k">fun</span> <span class="nf">invoke</span><span class="p">(</span><span class="n">param</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">):</span> <span class="n">UiDataState</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">internal</span> <span class="k">class</span> <span class="nc">GetUiDataUseCaseImpl</span> <span class="n">constructor</span><span class="p">(</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">val</span> <span class="py">getData</span><span class="p">:</span> <span class="n">GetDataUseCase</span><span class="p">,</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">val</span> <span class="py">mapUiData</span><span class="p">:</span> <span class="n">MapDataUiModelUseCase</span><span class="p">,</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">val</span> <span class="py">mapUiStateData</span><span class="p">:</span> <span class="n">MapDataUiStateUseCase</span>
</span><span class='line'><span class="p">):</span> <span class="n">GetUiDataUseCase</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">invoke</span><span class="p">(</span><span class="n">param</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">):</span> <span class="n">UiDataState</span> <span class="p">=</span>
</span><span class='line'>    <span class="n">mapUiStateData</span><span class="p">(</span>
</span><span class='line'>      <span class="n">getData</span><span class="p">(</span><span class="n">param</span><span class="p">).</span><span class="n">mapCatching</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">it</span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="n">mapUiRepos</span><span class="o">::</span><span class="n">invoke</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于 GetUiDataUseCaseImpl 有几个关键点需要注意。如你所见，它包含一个上述 GetDataUseCase 实现的实例以及两个额外的映射器。MapDataUiModelUseCase 可以将领域模型转换为 UI 模型（属于表示层）。同时，MapDataUiStateUseCase 确定相应的 UI 状态，可以是以下之一：</p>

<ul>
<li>正在加载(Loading)</li>
<li>空数据(Empty)</li>
<li>非空(Non-Empty)</li>
<li>错误(Error)</li>
</ul>


<h4>ViewModel：</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">class</span> <span class="nc">TestViewModel</span> <span class="n">constructor</span><span class="p">(</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">val</span> <span class="py">getData</span><span class="p">:</span> <span class="n">GetUiDataUseCase</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">ViewModel</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="py">state</span><span class="p">:</span> <span class="n">StateFlow</span><span class="p">&lt;</span><span class="n">State</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">_state</span><span class="p">.</span><span class="n">asStateFlow</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">init</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">refresh</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">fun</span> <span class="nf">refresh</span><span class="p">(</span><span class="n">isRefreshing</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">updateState</span><span class="p">(</span><span class="n">isRefreshing</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span> <span class="k">fun</span> <span class="nf">updateState</span><span class="p">(</span><span class="n">isRefreshing</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">)</span> <span class="p">=</span> <span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>     <span class="n">_state</span><span class="p">.</span><span class="n">value</span> <span class="p">=</span> <span class="n">RepoState</span><span class="p">.</span><span class="n">Loading</span>
</span><span class='line'>     <span class="n">_state</span><span class="p">.</span><span class="n">value</span> <span class="p">=</span> <span class="n">getData</span><span class="p">(</span><span class="n">isRefreshing</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>GitHub 项目与提供的代码片段略有不同，因为它使用了 ViewModel 输入/输出模式和 Hilt 依赖注入——这两者都是可扩展开发的基本原则，我们将在后续文章中探讨。此外，所有组件都用接口包装，确保可测试性，同时允许在接口级别进行无缝操作。后续文章将深入探讨这些方面。</p>

<p>我们成功了！现在，让我们深入研究代码。每一层都负责特定的功能，使其既模块化又易于测试。数据层的存储库依赖于 API 和本地存储，而领域用例依赖于存储库。表示层与领域用例交互。</p>

<p>如果我需要替换 HTTP 客户端，我只需将新的依赖项注入存储库，同时保持契约，确保功能无缝衔接。此外，每个组件都可以被单元测试覆盖，从而使架构可扩展且易于维护。</p>

<p>同样需要强调的是，接口应该属于使用它们的层。乍一看，一切都井井有条，似乎没有什么需要改进的地方。但让我们仔细看看。</p>

<h2>经典整洁架构实现的缺点</h2>

<h3>观察结果和潜在问题</h3>

<p>我们上面开发的实现允许直接访问底层模块组件，例如 API 实现或数据库存储。一种可能的解决方案是将它们内部化，并确保只能通过存储库访问数据。然而，这种方法仍然存在一个关键的缺点：存储库的接口及其实例都保存在同一个数据模块中。这会导致一些潜在的风险：</p>

<ol>
<li>违反封装——直接使用具体实例而不是接口存在风险，这也会影响接口隔离原则。</li>
<li>违反整洁架构契约——随着项目的发展，可能会出现偷工减料的倾向，例如允许领域用例与数据库实例而不是存储库接口交互。</li>
<li>存储库委托的复杂性增加——将组件绑定在一起变得更具挑战性，尤其是在依赖关系增加的情况下。</li>
<li>更高的维护成本——随着时间的推移，违反架构契约会导致维护工作量增加，并降低代码的可扩展性。</li>
<li>更复杂的单元测试——对低级组件的无限制访问使测试变得复杂，因为依赖项可能会以非预期的方式使用。</li>
</ol>


<p>缓解上述风险的唯一方法是将职责进一步拆分成更多独立的层和模块。数据模块应继续包含 API 和数据存储的实例，但所有存储库接口都应移出。建议在领域模块内创建子模块，并确保它们保持独立。</p>

<p>此外，API 和数据库实例可以通过专用服务层（例如 API 服务和本地存储服务）访问。这不仅增强了可测试性，还强制执行了适当的抽象。此外，数据实体应放置在数据子模块中，这些子模块仍与域层保持连接。</p>

<p>通过遵循这种方法，所有组件仅通过各自的接口进行交互，而无需直接了解它们的实际实现。这确保了更好的模块化、可维护性，并遵循了整洁架构原则。</p>

<p>下图展示了改进的解决方案：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/0*6pQ1HngSx6WIwaZx" alt="图 2. 增强型 Android Clean Architecture 实现" /></p>

<p>以下项目结构说明了增强的架构：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'>- Data
</span><span class='line'>  API Interface <span class="o">(</span>Retrofit<span class="o">)</span>
</span><span class='line'>  DAO
</span><span class='line'>  Data Services
</span><span class='line'>  API Services
</span><span class='line'>  Repositories implementations of Domain.Repository
</span><span class='line'>- Domain
</span><span class='line'>  Use-cases
</span><span class='line'>  Domain Entities
</span><span class='line'>  Mappers from Network models to Domain ones
</span><span class='line'>  -- Repository
</span><span class='line'>     Repository Interface
</span><span class='line'>     API Entity
</span><span class='line'>- Presentation
</span><span class='line'>  ViewModels
</span><span class='line'>  Views
</span></code></pre></td></tr></table></div></figure>


<h3>重新开始编码</h3>

<p>现在，我们将重点关注架构的改进部分。你可以通过以下链接在 GitHub 上找到完整的示例。</p>

<h4>Domain.Repository 子模块：</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">interface</span> <span class="n">DataRepository</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">getData</span><span class="p">(</span><span class="n">isRefreshing</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">):</span> <span class="n">Result</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">DataEntity</span><span class="p">&gt;&gt;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Data Module:</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">internal</span> <span class="k">class</span> <span class="nc">DataRepositoryImpl</span> <span class="n">@Inject</span> <span class="n">constructor</span><span class="p">(</span>
</span><span class='line'>   <span class="k">private</span> <span class="k">val</span> <span class="py">dataNetworkApi</span><span class="p">:</span> <span class="n">DataNetworkApi</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">DataRepository</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">override</span> <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">getData</span><span class="p">(</span><span class="n">isRefreshing</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">)</span> <span class="p">=</span>
</span><span class='line'>       <span class="n">dataNetworkApi</span><span class="p">.</span><span class="n">getData</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Domain Module:</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">internal</span> <span class="k">class</span> <span class="nc">GetDataUseCaseImpl</span><span class="p">(</span>
</span><span class='line'>   <span class="k">private</span> <span class="k">val</span> <span class="py">mapper</span><span class="p">:</span> <span class="n">DataEntityMapper</span><span class="p">,</span>
</span><span class='line'>   <span class="k">private</span> <span class="k">val</span> <span class="py">repository</span><span class="p">:</span> <span class="n">DataRepository</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">GetDataUseCase</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">override</span> <span class="n">suspend</span> <span class="n">operator</span> <span class="k">fun</span> <span class="nf">invoke</span><span class="p">(</span><span class="n">param</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">):</span> <span class="n">Result</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">DataEntity</span><span class="p">&gt;&gt;</span> <span class="p">=</span>
</span><span class='line'>       <span class="n">repository</span><span class="p">.</span><span class="n">getData</span><span class="p">(</span><span class="n">param</span><span class="p">)</span>
</span><span class='line'>           <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">listOfData</span> <span class="p">-&gt;</span>
</span><span class='line'>               <span class="n">listOfData</span><span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">data</span> <span class="p">-&gt;</span> <span class="n">mapper</span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>           <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>结论</h2>

<p>总而言之，我们实现了增强版的整洁架构。逻辑可以按功能进一步划分，每个功能模块都遵循其自身的整洁架构结构。此外，这种划分可以扩展到展现层，确保领域层和展现层之间的界限清晰区分。这种方法允许 UI用例严格通过接口与领域用例交互，从而保持模块化和可扩展性。</p>

<h2>额外注意事项</h2>

<p>项目示例演示了这种方法。通过实现了一个简单的应用程序，可以进行 API 调用、接收数据并显示列表。为了使应用程序功能齐全，它还使用了本文未涉及的其他组件：Retrofit、Hilt 以及包含通用组件的核心模块。这些额外组件不会影响你对本文主题的理解。</p>

<p>完整实例代码：<a href="https://github.com/sergeykrupenich/TestRepo/tree/clean-architecture">https://github.com/sergeykrupenich/TestRepo/tree/clean-architecture</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[长驻UI元素的UI层体系结构]]></title>
    <link href="https://alexhilton.github.io/blog/2025/06/07/ui-layer-architecture/"/>
    <updated>2025-06-07T22:47:48+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/06/07/ui-layer-architecture</id>
    <content type="html"><![CDATA[<p>本文译自「UI layer architecture for persistent UI elements」，原文链接<a href="https://www.tunjid.com/articles/ui-layer-architecture-for-persistent-ui-elements-68248e8ecc8e85f53ce1aa46">https://www.tunjid.com/articles/ui-layer-architecture-for-persistent-ui-elements-68248e8ecc8e85f53ce1aa46</a>，由TJ Dahunsi</p>

<p>发布于2025年5月14日。</p>

<p><a href="https://alexhilton.github.io/blog/2025/06/07/ui-layer-architecture/"><img src="file:///Users/alexhilton/Downloads/navi.png" title="auto auto" ></a></p>

<!-- more -->


<p>在移动应用中，某些 UI 元素会在多种上下文中贯穿整个用户界面。对于用于导航的 UI 元素尤其如此，例如：</p>

<ol>
<li>导航栏和导航栏。</li>
<li>顶部和底部应用栏。</li>
<li>浮动操作按钮。</li>
</ol>


<p>在为这些屏幕构建 UI 时，通常有两种布局方式：</p>

<ol>
<li>根级 UI 元素：整个应用在根级脚手架布局中共享这些元素的单个实例。在 Android 上，这通常处于 Activity 或 NavHostFragment 级别。</li>
<li>每个屏幕的 UI 元素：每个导航目标负责绘制自己的 UI 元素。</li>
</ol>


<p>因此，问题是，一种方法通常比另一种更好吗？它们可以共存吗？令人满意的是，我认为这是经典的软件工程“视情况而定”答案不适用的少数情况之一。我坚信，对于 Jetpack Compose 应用，应该始终优先采用每个屏幕的 UI 元素方法。让我们简要回顾一下过去。</p>

<h2>根级 UI 元素</h2>

<p>在 Android 上，根级 UI 元素的起源可以追溯到最初的 Activity ActionBar API 以及随后引入的 Fragment API。Fragment 可以调用：</p>

<ol>
<li>getSupportActionBar() 在其父 Activity 中设置标题和其他 ActionBar 属性。</li>
<li>setHasOptionsMenu() 在其父 Activity 中更新菜单项。</li>
</ol>


<p><img src="https://storage.googleapis.com/tunji-web-public/articles/68248e8ecc8e85f53ce1aa46/action-bar.png" alt="经典的ActionBar" /></p>

<p>由于 Activity 拥有 ActionBar，这隐式地建立了层级关系。这与转向单 Activity 架构相结合，为在某个根级别管理顶级装饰（例如浮动操作按钮、AppBar 和导航栏）奠定了基调。当然，这有利有弊：</p>

<h3>优点</h3>

<ul>
<li>真正的持久性：UI 元素是同一个实例，保证了视觉一致性，无需在实例之间进行复杂的过渡。这对于使用浮动操作按钮的应用尤其有利，因为屏幕过渡不会因为每个屏幕使用不同的 FAB 实例而引入 UI/UX 噪音。</li>
</ul>


<h3>缺点</h3>

<ul>
<li>紧密耦合：屏幕与宿主 Activity 的实现细节和框架 API 紧密耦合。</li>
<li>复杂的状态管理：宿主 Activity 成为瓶颈，需要复杂的逻辑来更新每个特定屏幕的标题、菜单选项、FAB 可见性/图标/操作，尤其是在屏幕进行动画处理时。这会导致扩展性不佳。</li>
<li>灵活性受限：更改工具栏样式、在特定屏幕上彻底移除工具栏或处理边缘情况（如果不给主机增加更多条件复杂性）变得困难。</li>
<li>测试挑战：由于屏幕依赖于主机 Activity 提供必要的 UI 组件和配置钩子，因此单独测试屏幕变得更加困难。</li>
</ul>


<h2>每个屏幕的 UI 元素</h2>

<p>根级 UI 元素的弊端非常严重，以至于 fragment 的 setHasOptionsMenu() 方法在 2022 年被弃用。尽管 MenuHost 和 MenuProvider API 中提供了替代方案，但这主要是为了保持向后兼容性。</p>

<p>至关重要的是，Jetpack Compose 已经发布了 1.1.1 版本，值得注意的是，它没有提供 ActionBar 或类似 MenuHost 的 API。事实上，最接近于提供如何管理导航目的地通用框架功能的 API 是 Scaffold 可组合组件。有趣的是，它：</p>

<ul>
<li>material3 Compose 库中的一个自成体系的实现。</li>
<li>是一个基于每个屏幕的 UI 元素实现，为应用栏、浮动操作按钮等提供插槽。</li>
<li>隐式地鼓励应用中的导航目的地替换整个屏幕内容，包括其特定的应用栏、浮动操作按钮等。</li>
</ul>


<p><img src="https://storage.googleapis.com/tunji-web-public/articles/68248e8ecc8e85f53ce1aa46/scaffold_resized.png" alt="Now In Android 应用中脚手架" /></p>

<p>同样，我们可以列出优缺点：</p>

<h3>优点</h3>

<ul>
<li>封装和模块化：每个导航目的地都是独立的，并管理其自身的UI元素及其状态。这符合单一职责原则。</li>
<li>高度灵活性：导航目的地可以轻松自定义持久UI元素，而不会影响其他元素。需要完全自定义的应用栏？没问题。不需要浮动操作按钮？那就不要添加它。</li>
<li>简化状态管理：UI状态（标题、菜单项、导航栏状态）在屏幕的ViewModel或可组合状态中进行本地管理，使其更易于推理。</li>
<li>提高可测试性：导航目的地可以更轻松地进行独立测试。</li>
<li>解耦：导航目的地与宿主Activity在这些特定的UI元素方面解耦。</li>
</ul>


<h3>缺点</h3>

<ul>
<li>代码重复：如果没有适当的结构化，导航目的地之间可能会重复使用常用的UI元素。</li>
<li>沉浸感受损：要使相同的应用栏或浮动操作按钮在屏幕之间顺利保持/转换，需要明确的过渡处理。</li>
</ul>


<h2>持久 UI 的 UI 层架构</h2>

<p>通过比较这两种实现方式的优缺点，我们可以得出这样的印象：无论我们在 Compose 中使用每个屏幕的 UI 来降低复杂性方面获得了什么好处，我们都需要付出代价才能在 UX 中真正传达出 UI 元素是持久的，如下面的屏幕记录所示。</p>

<p><img src="https://storage.googleapis.com/tunji-web-public/articles/68248e8ecc8e85f53ce1aa46/noise_cropped.gif" alt="Bluesky 应用程序中的多个 FAB" /></p>

<p>不过，有一个简单的解决方案：Compose 共享元素过渡和动画修改器 API，以及精心设计的 UI 层架构。</p>

<h3>持久化 UI 和 UI 逻辑</h3>

<p>上述动画 API 的入口点位于它们提供的作用域中：SharedTransitionScope 和 AnimatedVisibilityScope。对于导航目的地过渡，两者几乎总是串联使用，因此创建一个继承自两者的 UI 逻辑状态持有者非常有用。我个人喜欢将其称为 ScaffoldState。此 ScaffoldState 应该位于一个公共模块中，应用中所有显示导航目的地的模块都可以访问。我通常将此模块称为脚手架。</p>

<p><strong>注意：</strong> 请勿将此处提到的 ScaffoldState 与原始 Material Compose 库中的 ScaffoldState 混淆。它是一个遗留实现，在 Compose Material3 中没有等效实现。</p>

<p>ScaffoldState 的定义可以简单如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">class</span> <span class="nc">ScaffoldState</span> <span class="k">internal</span> <span class="n">constructor</span><span class="p">(</span>
</span><span class='line'>    <span class="n">animatedVisibilityScope</span><span class="p">:</span> <span class="n">AnimatedVisibilityScope</span><span class="p">,</span>
</span><span class='line'>    <span class="n">sharedTransitionScope</span><span class="p">:</span> <span class="n">SharedTransitionScope</span><span class="p">,</span>
</span><span class='line'>    <span class="k">internal</span> <span class="k">val</span> <span class="py">isMediumScreenWidthOrWider</span><span class="p">:</span> <span class="n">State</span><span class="p">&lt;</span><span class="n">Boolean</span><span class="p">&gt;,</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">AnimatedVisibilityScope</span> <span class="k">by</span> <span class="n">animatedVisibilityScope</span><span class="p">,</span>
</span><span class='line'>    <span class="n">SharedTransitionScope</span> <span class="k">by</span> <span class="n">sharedTransitionScope</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">internal</span> <span class="k">val</span> <span class="py">canShowBottomNavigation</span> <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="p">!</span><span class="n">isMediumScreenWidthOrWider</span><span class="p">.</span><span class="n">value</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">internal</span> <span class="k">val</span> <span class="py">canShowNavRail</span> <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="n">isMediumScreenWidthOrWider</span><span class="p">.</span><span class="n">value</span>
</span><span class='line'>                                            <span class="c1">// implementation omitted</span>
</span><span class='line'>                                            <span class="p">&amp;&amp;</span> <span class="n">isAtDeviceEdge</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>注意：</strong> canShowBottomNavigation 和 canShowNavRail 并不一定意味着它们各自的界面元素一定会显示；这取决于在脚手架内实际调用 Composable 的情况（如下所述）。相反，它们定义了界面元素在被调用时能够显示的界面逻辑。</p>

<p>ScaffoldState 有一个内部构造函数，其他模块可能无法创建它。相反，它们会使用同样在 scaffold 模块中定义的实用方法来记住它在组合中的实例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">rememberScaffoldState</span><span class="p">(</span>
</span><span class='line'>    <span class="n">animatedVisibilityScope</span><span class="p">:</span> <span class="n">AnimatedVisibilityScope</span><span class="p">,</span>
</span><span class='line'>    <span class="n">sharedTransitionScope</span><span class="p">:</span> <span class="n">SharedTransitionScope</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">ScaffoldState</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">isMediumScreenWidthOrWider</span> <span class="p">=</span> <span class="n">isMediumScreenWidthOrWider</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">remember</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">ScaffoldState</span><span class="p">(</span>
</span><span class='line'>            <span class="n">animatedVisibilityScope</span> <span class="p">=</span> <span class="n">animatedVisibilityScope</span><span class="p">,</span>
</span><span class='line'>            <span class="n">sharedTransitionScope</span> <span class="p">=</span> <span class="n">sharedTransitionScope</span><span class="p">,</span>
</span><span class='line'>            <span class="n">isMediumScreenWidthOrWider</span> <span class="p">=</span> <span class="n">isMediumScreenWidthOrWider</span><span class="p">,</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">isMediumScreenWidthOrWider</span><span class="p">():</span> <span class="n">State</span><span class="p">&lt;</span><span class="n">Boolean</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">isMediumScreenWidthOrWider</span> <span class="p">=</span> <span class="n">currentWindowAdaptiveInfo</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">windowSizeClass</span>
</span><span class='line'>        <span class="p">.</span><span class="n">isWidthAtLeastBreakpoint</span><span class="p">(</span><span class="n">WindowSizeClass</span><span class="p">.</span><span class="n">WIDTH_DP_MEDIUM_LOWER_BOUND</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">rememberUpdatedState</span><span class="p">(</span><span class="n">isMediumScreenWidthOrWider</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上文中，定义显示哪个导航 UI 元素的 UI 逻辑是通过 ScaffoldState 中的 WindowSizeClass 实现的。AnimatedVisibilityScope 和 SharedTransitionScope 参数被显式传入。前者通常由导航库在定义目的地时提供，后者则由 CompositionLocal 或 prop drilling 提供。后面会介绍 CompositionLocal 的使用示例。</p>

<h3>持久化 UI 脚手架</h3>

<p>通过定义记住组合中 ScaffoldState 的方法，实际的 PersistentScaffold Composable 如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">ScaffoldState</span><span class="p">.</span><span class="n">PersistentScaffold</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="n">topBar</span><span class="p">:</span> <span class="n">@Composable</span> <span class="n">ScaffoldState</span><span class="p">.()</span> <span class="p">-&gt;</span> <span class="n">Unit</span> <span class="p">=</span> <span class="p">{},</span>
</span><span class='line'>    <span class="n">floatingActionButton</span><span class="p">:</span> <span class="n">@Composable</span> <span class="n">ScaffoldState</span><span class="p">.()</span> <span class="p">-&gt;</span> <span class="n">Unit</span> <span class="p">=</span> <span class="p">{},</span>
</span><span class='line'>    <span class="n">navigationBar</span><span class="p">:</span> <span class="n">@Composable</span> <span class="n">ScaffoldState</span><span class="p">.()</span> <span class="p">-&gt;</span> <span class="n">Unit</span> <span class="p">=</span> <span class="p">{},</span>
</span><span class='line'>    <span class="n">navigationRail</span><span class="p">:</span> <span class="n">@Composable</span> <span class="n">ScaffoldState</span><span class="p">.()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span>
</span><span class='line'>    <span class="n">content</span><span class="p">:</span> <span class="n">@Composable</span> <span class="n">ScaffoldState</span><span class="p">.(</span><span class="n">PaddingValues</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NavigationRailScaffold</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">,</span>
</span><span class='line'>        <span class="n">navigationRail</span> <span class="p">=</span> <span class="n">navigationRail</span><span class="p">,</span>
</span><span class='line'>        <span class="n">content</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Scaffold</span><span class="p">(</span>
</span><span class='line'>                <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">animateBounds</span><span class="p">(</span><span class="n">lookaheadScope</span> <span class="p">=</span> <span class="k">this</span><span class="p">),</span>
</span><span class='line'>                <span class="n">topBar</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">topBar</span><span class="p">()</span>
</span><span class='line'>                <span class="p">},</span>
</span><span class='line'>                <span class="n">floatingActionButton</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">floatingActionButton</span><span class="p">()</span>
</span><span class='line'>                <span class="p">},</span>
</span><span class='line'>                <span class="n">bottomBar</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">navigationBar</span><span class="p">()</span>
</span><span class='line'>                <span class="p">},</span>
</span><span class='line'>                <span class="n">content</span> <span class="p">=</span> <span class="p">{</span> <span class="n">paddingValues</span> <span class="p">-&gt;</span>
</span><span class='line'>                    <span class="n">content</span><span class="p">(</span><span class="n">paddingValues</span><span class="p">)</span>
</span><span class='line'>                <span class="p">},</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>注意：</strong> 在上面的定义中，持久 UI 元素的每个可组合插槽都以 ScaffoldState 作为接收器，并且当 navigationRail 或 navigationBar 隐藏或显示时，使用 Modifier.animateBounds() 对 Scaffold 进行动画处理。</p>

<p>上面使用了一个中间可组合项：NavigationRailScaffold。这只是一个简单的 Row，包含两个项目：navigationRail 和 content：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">private</span> <span class="n">inline</span> <span class="k">fun</span> <span class="nf">NavigationRailScaffold</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="n">navigationRail</span><span class="p">:</span> <span class="n">@Composable</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span>
</span><span class='line'>    <span class="n">content</span><span class="p">:</span> <span class="n">@Composable</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">Row</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">,</span>
</span><span class='line'>        <span class="n">content</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>                <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">widthIn</span><span class="p">(</span><span class="n">max</span> <span class="p">=</span> <span class="m">80.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">zIndex</span><span class="p">(</span><span class="m">2f</span><span class="p">),</span>
</span><span class='line'>            <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">navigationRail</span><span class="p">()</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>                <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">fillMaxSize</span><span class="p">()</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">zIndex</span><span class="p">(</span><span class="m">1f</span><span class="p">),</span>
</span><span class='line'>            <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">content</span><span class="p">()</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>注意：</strong> 导航轨道的 z 索引比内容更高。</p>

<p>遗憾的是，NavigationSuiteScaffold 的 API 集无法在此处使用，因为与普通的 Scaffold 可组合函数不同，它们不允许通过插槽访问构成脚手架的持久化 UI 元素，因此无法将 Modifier 实例传递给它们。这使得本文的其余部分不适用于 NavigationSuiteScaffold。</p>

<h3>持久化 UI 元素作为 UI 逻辑的扩展</h3>

<p>为了营造这些 UI 元素在导航目标之间持久化的视觉效果，可以将这些 UI 元素的可组合函数编写为 ScaffoldState 的扩展，从而提供对 SharedTransitionScope 的访问权限，以便为元素提供共享元素修饰符。这些定义也应位于脚手架模块中。例如，PersistentNavigationAppBar 可以是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">ScaffoldState</span><span class="p">.</span><span class="n">PersistentNavigationBar</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="n">enterTransition</span><span class="p">:</span> <span class="n">EnterTransition</span> <span class="p">=</span> <span class="n">slideInVertically</span><span class="p">(</span><span class="n">initialOffsetY</span> <span class="p">=</span> <span class="p">{</span> <span class="n">it</span> <span class="p">}),</span>
</span><span class='line'>    <span class="n">exitTransition</span><span class="p">:</span> <span class="n">ExitTransition</span> <span class="p">=</span> <span class="n">slideOutVertically</span><span class="p">(</span><span class="n">targetOffsetY</span> <span class="p">=</span> <span class="p">{</span> <span class="n">it</span> <span class="p">}),</span>
</span><span class='line'>    <span class="n">content</span><span class="p">:</span> <span class="n">@Composable</span> <span class="n">RowScope</span><span class="p">.()</span> <span class="p">-&gt;</span> <span class="n">Unit</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">AnimatedVisibility</span><span class="p">(</span>
</span><span class='line'>       <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">sharedElement</span><span class="p">(</span>
</span><span class='line'>                <span class="n">sharedContentState</span> <span class="p">=</span> <span class="n">rememberSharedContentState</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">BottomNavSharedElementKey</span>
</span><span class='line'>                <span class="p">),</span>
</span><span class='line'>                <span class="n">animatedVisibilityScope</span> <span class="p">=</span> <span class="k">this</span><span class="p">,</span>
</span><span class='line'>                <span class="n">zIndexInOverlay</span> <span class="p">=</span> <span class="n">BottomNavSharedElementZIndex</span><span class="p">,</span>
</span><span class='line'>            <span class="p">),</span>
</span><span class='line'>        <span class="n">visible</span> <span class="p">=</span> <span class="n">canShowBottomNavigation</span><span class="p">,</span>
</span><span class='line'>        <span class="n">enter</span> <span class="p">=</span> <span class="n">enterTransition</span><span class="p">,</span>
</span><span class='line'>        <span class="n">exit</span> <span class="p">=</span> <span class="n">exitTransition</span><span class="p">,</span>
</span><span class='line'>        <span class="n">content</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">NavigationBar</span> <span class="p">{</span> <span class="p">...</span> <span class="p">},</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="n">data</span> <span class="k">object</span> <span class="nc">BottomNavSharedElementKey</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>注意：</strong> canShowBottomNavigation 是从 ScaffoldState 读取的，用于 AnimatedVisibility。</p>

<p>可以为其他持久性 UI 元素（例如导航栏或浮动操作按钮）编写同类扩展。功能模块可以依赖于脚手架模块，并按如下方式使用脚手架：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">FeedRoute</span><span class="p">(</span>
</span><span class='line'>    <span class="n">viewModel</span><span class="p">:</span> <span class="n">ListingFeedViewModel</span><span class="p">,</span>
</span><span class='line'>    <span class="c1">//从导航库中获取。</span>
</span><span class='line'>    <span class="c1">// 在 Navigation Compose 中，它由composable&lt;Destination&gt; { } lambda 提供。</span>
</span><span class='line'>    <span class="n">animatedVisibilityScope</span><span class="p">:</span> <span class="n">AnimatedVisibilityScope</span><span class="p">,</span>
</span><span class='line'>    <span class="c1">// 从导航目的地声明中传递。</span>
</span><span class='line'>    <span class="n">sharedTransitionScope</span><span class="p">:</span> <span class="n">SharedTransitionScope</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span> <span class="n">route</span> <span class="p">-&gt;</span>
</span><span class='line'>    <span class="n">rememberScaffoldState</span><span class="p">(</span>
</span><span class='line'>        <span class="n">animatedVisibilityScope</span> <span class="p">=</span> <span class="n">animatedVisibilityScope</span><span class="p">,</span>
</span><span class='line'>        <span class="n">sharedTransitionScope</span> <span class="p">=</span> <span class="n">sharedTransitionScope</span><span class="p">,</span>
</span><span class='line'>    <span class="p">).</span><span class="n">PersistentScaffold</span><span class="p">(</span>
</span><span class='line'>        <span class="n">topBar</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">TopAppBar</span><span class="p">(</span>
</span><span class='line'>                <span class="n">title</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">Text</span><span class="p">(</span><span class="n">text</span> <span class="p">=</span> <span class="n">stringResource</span><span class="p">(</span><span class="n">id</span> <span class="p">=</span> <span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">listing_app</span><span class="p">))</span>
</span><span class='line'>                <span class="p">},</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="n">content</span> <span class="p">=</span> <span class="p">{</span> <span class="n">paddingValues</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="n">ListingFeedScreen</span><span class="p">(</span>
</span><span class='line'>                <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="n">paddingValues</span><span class="p">),</span>
</span><span class='line'>                <span class="n">scaffoldState</span> <span class="p">=</span> <span class="k">this</span><span class="p">,</span>
</span><span class='line'>                <span class="n">state</span> <span class="p">=</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">collectAsStateWithLifecycle</span><span class="p">().</span><span class="n">value</span><span class="p">,</span>
</span><span class='line'>                <span class="n">actions</span> <span class="p">=</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">accept</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="n">navigationBar</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>           <span class="n">PersistentNavigationAppBar</span><span class="p">(</span>
</span><span class='line'>                <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">animateEnterExit</span><span class="p">(</span>
</span><span class='line'>                        <span class="n">enter</span> <span class="p">=</span> <span class="n">slideInVertically</span><span class="p">(</span><span class="n">initialOffsetY</span> <span class="p">=</span> <span class="p">{</span> <span class="n">it</span> <span class="p">}),</span>
</span><span class='line'>                        <span class="n">exit</span> <span class="p">=</span> <span class="n">slideOutVertically</span><span class="p">(</span><span class="n">targetOffsetY</span> <span class="p">=</span> <span class="p">{</span> <span class="n">it</span> <span class="p">}),</span>
</span><span class='line'>                    <span class="p">)</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="n">navigationRail</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">PersistentNavigationNavRail</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>每个使用的 API 以及它们支持的 UI/UX 如下所示：</p>

<p><img src="https://storage.googleapis.com/tunji-web-public/articles/68248e8ecc8e85f53ce1aa46/shared_elements_cropped.gif" alt="A" /></p>

<p><img src="https://storage.googleapis.com/tunji-web-public/articles/68248e8ecc8e85f53ce1aa46/navigation_changes_cropped.gif" alt="B" /></p>

<p><img src="https://storage.googleapis.com/tunji-web-public/articles/68248e8ecc8e85f53ce1aa46/local_changes_cropped.gif" alt="C" /></p>

<p>从上到下：跨导航目的地的持久 UI 共享元素、跨导航目的地的持久 UI 进入和退出以及同一目的地内的持久 UI 进入和退出。</p>

<p>如上表所示，使用 ScaffoldState 作为界面状态容器，可以根据 Jetpack Compose 动画 API 的优势进行定制，同时将它们组合成一个整体。更详细地说：</p>

<ol>
<li>ScaffoldState 和 Modifier.sharedElement()：在不同导航目标上调用的持久化界面元素将使用共享元素 API 来保持视觉连续性。在所示的示例中，每个导航目标都负责其自身的浮动操作按钮，但仍保持了持久化的效果。在此特定示例中，图库目标脚手架与详情目标完全相同，只是它使用不同的参数调用 PersistentFab。</li>
<li>ScaffoldState 和 AnimatedContent：持久化界面元素的调用可以使用 Modifier.animateEnterExit() 来定义 EnterTransition 和/或 ExitTransition 来用于导航更改。在此示例中，持久化导航栏通过垂直滑动来动画化地显示和隐藏。在此特定示例中，详情目标脚手架与动态目标完全相同，但以下几点不同：</li>
<li>不调用 PersistentNavigationAppBar。</li>
<li>调用 PersistentFab。</li>
<li>ScaffoldState、AnimatedVisibility 和 Modifier.animateBounds()：调用 PersistentNavigationAppBar 和/或 PersistentNavigationNavRail 会根据当前 WindowSizeClass（即本地屏幕变化）自动隐藏或显示。当其中一个显示或隐藏时，内容可组合项会根据变化调整其大小和位置。用户还可以直接将 EnterTransition 或 ExitTransition 传递给可组合项来自定义动画。</li>
</ol>


<h3>持久的 UI 和业务逻辑</h3>

<p>像导航栏或导航栏这样的持久性 UI 有时需要显示与其本地上下文相距甚远的状态；这就是业务逻辑。有时，这些信息可能位于不同的模块中。例如：</p>

<ul>
<li>未显示通知的通知标记。</li>
<li>消息的未读计数。</li>
<li>用户个人资料警报或提醒。</li>
</ul>


<p>在这种情况下，你的应用应该定义一个 AppState。在 Now In Android 示例中，这个 AppState 是 NiaAppState。在跨导航目标使用持久性 UI 时，这个 AppState 至关重要，因为它可以访问应用的导航语义以及填充导航栏中当前项目所需的所有资源。最简单的 AppState 可能如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Stable</span>
</span><span class='line'><span class="k">class</span> <span class="nc">AppState</span><span class="p">(</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">navigationStateHolder</span><span class="p">:</span> <span class="n">NavigationStateHolder</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">navState</span> <span class="k">by</span> <span class="n">navigationStateHolder</span><span class="p">.</span><span class="n">state</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">lateinit</span> <span class="k">var</span> <span class="py">sharedTransitionScope</span><span class="p">:</span> <span class="n">SharedTransitionScope</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">navItems</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">NavItem</span><span class="p">&gt;</span> <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="n">navItemsFrom</span><span class="p">(</span><span class="n">navState</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>注意：</strong> 在上面，导航状态由 Compose 状态支持，但是当使用带有 NavigationController 的导航 API 时，这仍然适用。</p>

<p>AppState 是应用层级服务的入口点。应用的导航状态、应用能够显示的窗格数量等等都驻留在 AppState 中。它可能需要访问业务逻辑，并且通常需要依赖注入的数据源。在 Now In Android 示例中，NiaAppState 使用数据源来确定哪些选项卡带有通知标记。</p>

<p>为了从 AppState 为持久化 UI 元素提供状态，ScaffoldState 应该依赖 AppState 作为内部实现细节，并作为状态持有者复合的示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">class</span> <span class="nc">ScaffoldState</span> <span class="k">internal</span> <span class="n">constructor</span><span class="p">(</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="k">internal</span> <span class="k">val</span> <span class="py">appState</span><span class="p">:</span> <span class="n">AppState</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">AnimatedVisibilityScope</span> <span class="k">by</span> <span class="n">animatedVisibilityScope</span><span class="p">,</span>
</span><span class='line'>    <span class="c1">// 从 AppState 中检索 SharedTransitionScope</span>
</span><span class='line'>    <span class="n">SharedTransitionScope</span> <span class="k">by</span> <span class="n">appState</span><span class="p">.</span><span class="n">sharedTransitionScope</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">internal</span> <span class="k">val</span> <span class="py">canShowNavRail</span>
</span><span class='line'>        <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="n">appState</span><span class="p">.</span><span class="n">isInEdgePane</span> <span class="p">&amp;&amp;</span> <span class="n">isMediumScreenWidthOrWider</span><span class="p">.</span><span class="n">value</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">internal</span> <span class="k">val</span> <span class="py">LocalAppState</span> <span class="p">=</span> <span class="n">staticCompositionLocalOf</span><span class="p">&lt;</span><span class="n">AppState</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="n">IllegalArgumentException</span><span class="p">(</span><span class="s">&quot;AppState must be provided in the app scaffolding.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>要检索要使用的 AppState，脚手架模块中应该有一个内部 LocalAppState 定义以及一个 App Composable。然后，此 AppState 会在应用的入口点提供给组合树，以便进行 Composing。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">App</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="n">appState</span><span class="p">:</span> <span class="n">AppState</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">AppTheme</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Surface</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 根 LookaheadScope 用于锚定所有共享元素转换</span>
</span><span class='line'>            <span class="n">SharedTransitionLayout</span><span class="p">(</span>
</span><span class='line'>                <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">()</span>
</span><span class='line'>            <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// 你可以选择保留对 SharedElementTransitionScope 的引用</span>
</span><span class='line'>                <span class="n">appState</span><span class="p">.</span><span class="n">sharedElementTransitionScope</span> <span class="p">=</span> <span class="k">this</span><span class="n">@SharedTransitionLayout</span>
</span><span class='line'>                <span class="n">CompositionLocalProvider</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">LocalAppState</span> <span class="n">provides</span> <span class="n">appState</span><span class="p">,</span>
</span><span class='line'>                <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="c1">// 应用 UI 的其余部分都放在这里，例如 `NavHost`，等等。</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">internal</span> <span class="k">val</span> <span class="py">LocalAppState</span> <span class="p">=</span> <span class="n">staticCompositionLocalOf</span><span class="p">&lt;</span><span class="n">AppState</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="n">IllegalStateException</span><span class="p">(</span><span class="s">&quot;CompositionLocal LocalAppState not present&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在 Android 应用程序中，上述内容将在活动中使用，类似于以下内容：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">class</span> <span class="nc">MainActivity</span> <span class="p">:</span> <span class="n">ComponentActivity</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">enableEdgeToEdge</span><span class="p">()</span>
</span><span class='line'>        <span class="k">super</span><span class="p">.</span><span class="n">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 在此处创建你的应用状态。如果它需要依赖注入的数据源</span>
</span><span class='line'>        <span class="c1">// 或访问导航控制器或导航状态，也请在此处提供或在 Composition 中提供。</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="py">appState</span><span class="p">:</span> <span class="n">AppState</span> <span class="p">=</span> <span class="p">...</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">setContent</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">App</span><span class="p">(</span>
</span><span class='line'>                <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>                <span class="n">appState</span> <span class="p">=</span> <span class="n">appState</span><span class="p">,</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来，用于记住 ScaffoldState 的调用站点将更新为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">rememberScaffoldState</span><span class="p">(</span>
</span><span class='line'>    <span class="c1">// 这是由导航库提供的</span>
</span><span class='line'>    <span class="n">animatedVisibilityScope</span><span class="p">:</span> <span class="n">AnimatedVisibilityScope</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">ScaffoldState</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">isMediumScreenWidthOrWider</span> <span class="p">=</span> <span class="n">isMediumScreenWidthOrWider</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">appState</span> <span class="p">=</span> <span class="n">LocalAppState</span><span class="p">.</span><span class="n">current</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">remember</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">ScaffoldState</span><span class="p">(</span>
</span><span class='line'>            <span class="n">animatedVisibilityScope</span> <span class="p">=</span> <span class="n">animatedVisibilityScope</span><span class="p">,</span>
</span><span class='line'>            <span class="n">isMediumScreenWidthOrWider</span> <span class="p">=</span> <span class="n">isMediumScreenWidthOrWider</span><span class="p">,</span>
</span><span class='line'>            <span class="c1">// SharedTransitionScope 现在由 AppState 提供</span>
</span><span class='line'>            <span class="n">appState</span> <span class="p">=</span> <span class="n">appState</span><span class="p">,</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>注意：</strong> LocalAppState 应该位于脚手架模块内部。</p>

<p>只需指定要运行的修饰符或转换即可声明 PersistentNavigationAppBar：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">fun</span> <span class="nf">ScaffoldState</span><span class="p">.</span><span class="n">PersistentNavigationAppBar</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="p">...,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">AnimatedVisibility</span><span class="p">(</span>
</span><span class='line'>       <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">sharedElement</span><span class="p">(...),</span>
</span><span class='line'>        <span class="p">...,</span>
</span><span class='line'>        <span class="n">content</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">NavigationBar</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">val</span> <span class="py">appState</span> <span class="p">=</span> <span class="n">LocalAppState</span><span class="p">.</span><span class="n">current</span>
</span><span class='line'>                <span class="n">appState</span><span class="p">.</span><span class="n">navItems</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span> <span class="n">item</span> <span class="p">-&gt;</span>
</span><span class='line'>                    <span class="n">NavigationBarItem</span><span class="p">(...)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>真正的持久化 UI</h2>

<p>如果持久化 UI 元素中存在一些无法通过共享元素保存的局部瞬时状态，则可以使用可移动共享元素。请考虑此处描述和实现的导航栏设计，其中选中某个选项卡时，选项卡之间会呈现动画效果：</p>

<p><img src="https://storage.googleapis.com/tunji-web-public/articles/68248e8ecc8e85f53ce1aa46/transient_animation.gif" alt="导航栏中的局部瞬态动画" /></p>

<p>幻想只能到此为止，此时需要真正的持久性。这可以通过添加可移动内容 API 来创建可移动的共享元素来实现。也就是说，架构将提升的不仅仅是 UI 状态，而是整个 UI 元素及其状态。要了解更多关于为什么此时需要可移动内容 API 的信息，请阅读以下详细介绍<a href="https://www.tunjid.com/articles/3-neat-animations-you-can-create-with-modifieranimatebounds-67e474130e9ba862fe18b5e5?open-graph-scrape=true">组合持久性概念的文章</a>。</p>

<p>在 Compose 中使用 movedContentOf 时，必须注意确保可移动内容每次只在一个位置进行组合。例如，从目的地 A 导航到目的地 B 时，在动画持续时间内，有两个目的地可组合项共存：</p>

<ol>
<li>目的地 A 动画退出。</li>
<li>目的地 B 动画进入。</li>
</ol>


<p>动画启动后，可移动导航栏必须立即与目的地 A 中的诱饵导航栏进行交换，同时，必须立即在目的地 B 开始组合。以下概述了实现此目的的界面逻辑。</p>

<h3>定义可移动持久界面</h3>

<p>ScaffoldState 导航栏首先将其声明拆分。仅依赖于 AppState 的部分作为 AppState 的扩展单独编写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">internal</span> <span class="k">fun</span> <span class="nf">AppState</span><span class="p">.</span><span class="n">NavigationBar</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NavigationBar</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">navItems</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span> <span class="n">item</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="n">NavigationBarItem</span><span class="p">(...)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>提升可移动持久化 UI</h3>

<p>真正持久化的导航栏 (NavigationBar) 可以使用可移动内容 (movableContentOf) 提升到 AppState 中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">class</span> <span class="nc">AppState</span><span class="p">(</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">internal</span> <span class="k">val</span> <span class="py">movableNavigationBar</span> <span class="p">=</span> <span class="n">movableContentOf</span><span class="p">&lt;</span><span class="n">Modifier</span><span class="p">&gt;</span> <span class="p">{</span> <span class="n">modifier</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="n">NavigationBar</span><span class="p">(</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">,</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>可移动持久 UI 的 UI 逻辑</h3>

<p>定义可移动导航栏后，将确定何时可以安全组合的逻辑添加到 ScaffoldState 中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">class</span> <span class="nc">ScaffoldState</span> <span class="k">internal</span> <span class="n">constructor</span><span class="p">(</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="k">internal</span> <span class="k">val</span> <span class="py">appState</span><span class="p">:</span> <span class="n">AppState</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">AnimatedVisibilityScope</span> <span class="k">by</span> <span class="n">animatedVisibilityScope</span><span class="p">,</span>
</span><span class='line'>    <span class="n">SharedTransitionScope</span> <span class="k">by</span> <span class="n">appState</span><span class="p">.</span><span class="n">sharedTransitionScope</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">internal</span> <span class="k">val</span> <span class="py">canShowNavigationBar</span> <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="p">!</span><span class="n">isMediumScreenWidthOrWider</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">internal</span> <span class="k">val</span> <span class="py">canUseMovableNavigationBar</span>
</span><span class='line'>        <span class="c1">// 从 AnimatedVisibility Scope 读取过渡目标状态</span>
</span><span class='line'>        <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="n">canShowNavigationBar</span> <span class="p">&amp;&amp;</span> <span class="n">transition</span><span class="p">.</span><span class="n">targetState</span> <span class="p">==</span> <span class="n">EnterExitState</span><span class="p">.</span><span class="n">Visible</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>构建可移动的持久化 UI</h3>

<p>最后，在 ScaffoldState 的公共扩展方法中，根据 ScaffoldState 中定义的 UI 逻辑，在 AppState 中的持久化 UI 元素与其诱饵元素之间进行切换：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">ScaffoldState</span><span class="p">.</span><span class="n">PeristentNavigationBar</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">AnimatedVisibility</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">sharedElement</span><span class="p">(...),</span>
</span><span class='line'>        <span class="n">visible</span> <span class="p">=</span> <span class="n">canShowNavigationBar</span><span class="p">,</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>        <span class="n">content</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">canUseMovableNavigationBar</span><span class="p">)</span> <span class="n">appState</span><span class="p">.</span><span class="n">movableNavigationBar</span><span class="p">(</span>
</span><span class='line'>                <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>            <span class="k">else</span> <span class="n">appState</span><span class="p">.</span><span class="n">NavigationBar</span><span class="p">(</span>
</span><span class='line'>                <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其结果如下所示：</p>

<p><img src="https://storage.googleapis.com/tunji-web-public/articles/68248e8ecc8e85f53ce1aa46/cropped_persistent_navigation_bar.gif" alt="使用可移动内容 (movableContentOf) 在导航栏中保留局部瞬态动画" /></p>

<h2>总结</h2>

<p>以上描述了一种用于应用持久化 UI 的架构模式。该架构的一大优势在于它能够扩展到平板电脑和桌面设备；这将在后续的博客文章中介绍。</p>

<p>总结一下，该架构支持以下功能：</p>

<ul>
<li>导航目标控制持久化 UI 动画，用于导航目标内部的局部变化，例如窗口大小变化。</li>
<li>导航目标控制持久化 UI 动画，用于跨导航目标进行导航变化。</li>
<li>完全自定义每个导航目标上哪些 UI 元素是持久化的，哪些不是。</li>
<li>一种将持久化 UI 元素描述为导航目标 ScaffoldState 函数的模式。</li>
<li>能够将具有内部瞬态状态的 UI 元素提升到 AppState，这些 UI 元素驱动的动画无法通过不同实例之间的共享元素过渡来近似实现。</li>
</ul>


<p>使用脚手架模块或类似组件，将 AppState 的细粒度控制分发到导航目标。</p>

<p><a href="https://github.com/tunjid/listingApp?open-graph-scrape=true">这里</a>可以看到一个带有脚手架模块、AppState 和每个导航目的地定制的应用程序中上述内容的示例。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Kotlin Multiplatform项目中使用DataStore]]></title>
    <link href="https://alexhilton.github.io/blog/2025/06/04/datastore-in-kmp/"/>
    <updated>2025-06-04T23:05:35+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/06/04/datastore-in-kmp</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自「Implementing DataStore in Kotlin Multiplatform Projects」，原文链接<a href="https://carrion.dev/en/posts/datastore-in-kmp/">https://carrion.dev/en/posts/datastore-in-kmp/</a>，由 Ignacio Carrión发布于2025年5月9日。</p></blockquote>

<p>DataStore 是 Google 开发的一种现代数据存储解决方案，用于替代 SharedPreferences。它提供了一个一致、类型安全的 API，用于存储键值对和类型化对象，并支持 Kotlin 协程和 Flow。随着 Kotlin Multiplatform (KMP) 的最新进展，我们现在可以将 DataStore 集成到 KMP 项目中，从而实现跨平台共享偏好设置和数据存储代码。这篇博文探讨了如何在 KMP 环境中配置、实现和优化 DataStore。</p>

<p><a href="https://alexhilton.github.io/blog/2025/06/04/datastore-in-kmp/"><img src="file:///Users/alexhilton/Downloads/datastore.png" title="auto auto" ></a></p>

<!-- more -->


<h2>理解 Kotlin 多平台环境中的 DataStore</h2>

<p>KMP 中的 DataStore 旨在提供跨平台一致的 API，同时利用平台特定的存储机制。DataStore 有两种类型：</p>

<ol>
<li>Preferences DataStore：用于存储键值对</li>
<li>Proto DataStore：用于使用协议缓冲区存储类型化对象</li>
</ol>


<p>在 KMP 上下文中，DataStore：</p>

<ol>
<li>平台特定的实现提供实际的存储机制</li>
<li>API 使用协程和 Flow，跨平台保持一致</li>
</ol>


<p>这种方法使我们能够用通用代码定义数据访问模式，而底层存储操作则由平台特定的实现处理。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// In commonMain - DataStore interface</span>
</span><span class='line'><span class="n">interface</span> <span class="n">UserPreferences</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">userData</span><span class="p">:</span> <span class="n">Flow</span><span class="p">&lt;</span><span class="n">UserData</span><span class="p">&gt;</span>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">updateUsername</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">updateEmail</span><span class="p">(</span><span class="n">email</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">clearData</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// In commonMain - Data model</span>
</span><span class='line'><span class="n">data</span> <span class="k">class</span> <span class="nc">UserData</span><span class="p">(</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">username</span><span class="p">:</span> <span class="n">String</span> <span class="p">=</span> <span class="s">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">email</span><span class="p">:</span> <span class="n">String</span> <span class="p">=</span> <span class="s">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">isLoggedIn</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">false</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>在 KMP 项目中设置数据存储</h2>

<p>要将 DataStore 集成到你的 KMP 项目中，你需要正确配置构建文件。以下是分步指南：</p>

<h3>1. 在共享模块中配置 build.gradle.kts 文件</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">plugins</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">kotlin</span><span class="p">(</span><span class="s">&quot;multiplatform&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">id</span><span class="p">(</span><span class="s">&quot;com.android.library&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">id</span><span class="p">(</span><span class="s">&quot;com.google.devtools.ksp&quot;</span><span class="p">)</span> <span class="n">version</span> <span class="s">&quot;2.1.20-2.0.1&quot;</span> <span class="c1">// For Proto DataStore</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">kotlin</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">androidTarget</span><span class="p">()</span>
</span><span class='line'>    <span class="n">iosX64</span><span class="p">()</span>
</span><span class='line'>    <span class="n">iosArm64</span><span class="p">()</span>
</span><span class='line'>    <span class="n">iosSimulatorArm64</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sourceSets</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">commonMain</span> <span class="k">by</span> <span class="n">getting</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">dependencies</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// For Preferences DataStore</span>
</span><span class='line'>                <span class="n">implementation</span><span class="p">(</span><span class="s">&quot;androidx.datastore:datastore-preferences-core:1.1.0&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// For coroutines</span>
</span><span class='line'>                <span class="n">implementation</span><span class="p">(</span><span class="s">&quot;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2. 从通用代码创建 DataStore 实例</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 获取单例 DataStore 实例，如有必要则创建它。</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">createDataStore</span><span class="p">(</span><span class="n">producePath</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">String</span><span class="p">):</span> <span class="n">DataStore</span><span class="p">&lt;</span><span class="n">Preferences</span><span class="p">&gt;</span> <span class="p">=</span>
</span><span class='line'>   <span class="n">PreferenceDataStoreFactory</span><span class="p">.</span><span class="n">createWithPath</span><span class="p">(</span>
</span><span class='line'>      <span class="n">produceFile</span> <span class="p">=</span> <span class="p">{</span> <span class="n">producePath</span><span class="p">().</span><span class="n">toPath</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>   <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">internal</span> <span class="n">const</span> <span class="k">val</span> <span class="py">dataStoreFileName</span> <span class="p">=</span> <span class="s">&quot;dice.preferences_pb&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>特定平台的考虑因素</h2>

<h3>Android 实现</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// shared/src/androidMain/kotlin/DataStore.kt</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">createDataStoreAndroid</span><span class="p">(</span><span class="n">context</span><span class="p">:</span> <span class="n">Context</span><span class="p">):</span> <span class="n">DataStore</span><span class="p">&lt;</span><span class="n">Preferences</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">createDataStore</span><span class="p">(</span>
</span><span class='line'>   <span class="n">producePath</span> <span class="p">=</span> <span class="p">{</span> <span class="n">context</span><span class="p">.</span><span class="n">filesDir</span><span class="p">.</span><span class="n">resolve</span><span class="p">(</span><span class="n">dataStoreFileName</span><span class="p">).</span><span class="n">absolutePath</span> <span class="p">}</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>iOS 实现</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// shared/src/iosMain/kotlin/DataStore.kt</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">createDataStoreIOS</span><span class="p">():</span> <span class="n">DataStore</span><span class="p">&lt;</span><span class="n">Preferences</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">createDataStore</span><span class="p">(</span>
</span><span class='line'>   <span class="n">producePath</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="py">documentDirectory</span><span class="p">:</span> <span class="n">NSURL</span><span class="p">?</span> <span class="p">=</span> <span class="n">NSFileManager</span><span class="p">.</span><span class="n">defaultManager</span><span class="p">.</span><span class="n">URLForDirectory</span><span class="p">(</span>
</span><span class='line'>         <span class="n">directory</span> <span class="p">=</span> <span class="n">NSDocumentDirectory</span><span class="p">,</span>
</span><span class='line'>         <span class="n">inDomain</span> <span class="p">=</span> <span class="n">NSUserDomainMask</span><span class="p">,</span>
</span><span class='line'>         <span class="n">appropriateForURL</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>         <span class="n">create</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'>         <span class="n">error</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>      <span class="n">requireNotNull</span><span class="p">(</span><span class="n">documentDirectory</span><span class="p">).</span><span class="n">path</span> <span class="p">+</span> <span class="s">&quot;/$dataStoreFileName&quot;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>实际示例：实现用户偏好存储库</h2>

<p>为了演示完整的实现，让我们创建一个使用 DataStore 的存储库：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// In commonMain</span>
</span><span class='line'><span class="k">class</span> <span class="nc">UserPreferencesRepository</span><span class="p">(</span><span class="k">private</span> <span class="k">val</span> <span class="py">dataStore</span><span class="p">:</span> <span class="n">PreferencesDataStore</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//定义preferences的键</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">object</span> <span class="nc">PreferenceKeys</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">USERNAME</span> <span class="p">=</span> <span class="n">stringPreferencesKey</span><span class="p">(</span><span class="s">&quot;username&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">EMAIL</span> <span class="p">=</span> <span class="n">stringPreferencesKey</span><span class="p">(</span><span class="s">&quot;email&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">IS_LOGGED_IN</span> <span class="p">=</span> <span class="n">booleanPreferencesKey</span><span class="p">(</span><span class="s">&quot;is_logged_in&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Get user data as a Flow</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">userData</span><span class="p">:</span> <span class="n">Flow</span><span class="p">&lt;</span><span class="n">UserData</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">dataStore</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">preferences</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="n">UserData</span><span class="p">(</span>
</span><span class='line'>            <span class="n">username</span> <span class="p">=</span> <span class="n">preferences</span><span class="p">[</span><span class="n">PreferenceKeys</span><span class="p">.</span><span class="n">USERNAME</span><span class="p">]</span> <span class="o">?:</span> <span class="s">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">email</span> <span class="p">=</span> <span class="n">preferences</span><span class="p">[</span><span class="n">PreferenceKeys</span><span class="p">.</span><span class="n">EMAIL</span><span class="p">]</span> <span class="o">?:</span> <span class="s">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">isLoggedIn</span> <span class="p">=</span> <span class="n">preferences</span><span class="p">[</span><span class="n">PreferenceKeys</span><span class="p">.</span><span class="n">IS_LOGGED_IN</span><span class="p">]</span> <span class="o">?:</span> <span class="k">false</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Update username</span>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">updateUsername</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">dataStore</span><span class="p">.</span><span class="n">updateData</span> <span class="p">{</span> <span class="n">preferences</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="n">preferences</span><span class="p">.</span><span class="n">toMutablePreferences</span><span class="p">().</span><span class="n">apply</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">this</span><span class="p">[</span><span class="n">PreferenceKeys</span><span class="p">.</span><span class="n">USERNAME</span><span class="p">]</span> <span class="p">=</span> <span class="n">name</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Update email</span>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">updateEmail</span><span class="p">(</span><span class="n">email</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">dataStore</span><span class="p">.</span><span class="n">updateData</span> <span class="p">{</span> <span class="n">preferences</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="n">preferences</span><span class="p">.</span><span class="n">toMutablePreferences</span><span class="p">().</span><span class="n">apply</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">this</span><span class="p">[</span><span class="n">PreferenceKeys</span><span class="p">.</span><span class="n">EMAIL</span><span class="p">]</span> <span class="p">=</span> <span class="n">email</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Set login status</span>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">setLoggedIn</span><span class="p">(</span><span class="n">isLoggedIn</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">dataStore</span><span class="p">.</span><span class="n">updateData</span> <span class="p">{</span> <span class="n">preferences</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="n">preferences</span><span class="p">.</span><span class="n">toMutablePreferences</span><span class="p">().</span><span class="n">apply</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">this</span><span class="p">[</span><span class="n">PreferenceKeys</span><span class="p">.</span><span class="n">IS_LOGGED_IN</span><span class="p">]</span> <span class="p">=</span> <span class="n">isLoggedIn</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Clear all data</span>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">clearData</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">dataStore</span><span class="p">.</span><span class="n">updateData</span> <span class="p">{</span> <span class="n">preferences</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="n">preferences</span><span class="p">.</span><span class="n">toMutablePreferences</span><span class="p">().</span><span class="n">apply</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">remove</span><span class="p">(</span><span class="n">PreferenceKeys</span><span class="p">.</span><span class="n">USERNAME</span><span class="p">)</span>
</span><span class='line'>                <span class="n">remove</span><span class="p">(</span><span class="n">PreferenceKeys</span><span class="p">.</span><span class="n">EMAIL</span><span class="p">)</span>
</span><span class='line'>                <span class="n">remove</span><span class="p">(</span><span class="n">PreferenceKeys</span><span class="p">.</span><span class="n">IS_LOGGED_IN</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// In commonMain - ViewModel or Presenter</span>
</span><span class='line'><span class="k">class</span> <span class="nc">UserViewModel</span><span class="p">(</span><span class="k">private</span> <span class="k">val</span> <span class="py">userPreferencesRepository</span><span class="p">:</span> <span class="n">UserPreferencesRepository</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">userData</span><span class="p">:</span> <span class="n">Flow</span><span class="p">&lt;</span><span class="n">UserData</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">userPreferencesRepository</span><span class="p">.</span><span class="n">userData</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">updateUserProfile</span><span class="p">(</span><span class="n">username</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">email</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">username</span><span class="p">.</span><span class="n">isNotBlank</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">userPreferencesRepository</span><span class="p">.</span><span class="n">updateUsername</span><span class="p">(</span><span class="n">username</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">email</span><span class="p">.</span><span class="n">isNotBlank</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">userPreferencesRepository</span><span class="p">.</span><span class="n">updateEmail</span><span class="p">(</span><span class="n">email</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">login</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">userPreferencesRepository</span><span class="p">.</span><span class="n">setLoggedIn</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">logout</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">userPreferencesRepository</span><span class="p">.</span><span class="n">setLoggedIn</span><span class="p">(</span><span class="k">false</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">clearUserData</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">userPreferencesRepository</span><span class="p">.</span><span class="n">clearData</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>KMP 中的高级数据存储功能</h2>

<p>DataStore 提供了几种可在 KMP 环境中利用的高级功能：</p>

<h3>1. 用于类型化对象的 Proto DataStore</h3>

<p>如果你需要存储复杂对象，Proto DataStore 提供了一个类型安全的解决方案：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='proto'><span class='line'><span class="c1">// 在 .proto 文件中定义数据结构</span>
</span><span class='line'><span class="na">syntax</span> <span class="o">=</span> <span class="s">&quot;proto3&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">option</span> <span class="na">java_package</span> <span class="o">=</span> <span class="s">&quot;com.example.app&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">option</span> <span class="na">java_multiple_files</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">message</span> <span class="nc">UserPreferences</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">string</span> <span class="na">username</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">string</span> <span class="na">email</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="na">is_logged_in</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// In commonMain - 创建序列化器</span>
</span><span class='line'><span class="k">class</span> <span class="nc">UserPreferencesSerializer</span> <span class="p">:</span> <span class="n">Serializer</span><span class="p">&lt;</span><span class="n">UserPreferences</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">val</span> <span class="py">defaultValue</span><span class="p">:</span> <span class="n">UserPreferences</span> <span class="p">=</span> <span class="n">UserPreferences</span><span class="p">.</span><span class="n">getDefaultInstance</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">readFrom</span><span class="p">(</span><span class="n">input</span><span class="p">:</span> <span class="n">InputStream</span><span class="p">):</span> <span class="n">UserPreferences</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">UserPreferences</span><span class="p">.</span><span class="n">parseFrom</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">writeTo</span><span class="p">(</span><span class="n">t</span><span class="p">:</span> <span class="n">UserPreferences</span><span class="p">,</span> <span class="n">output</span><span class="p">:</span> <span class="n">OutputStream</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">t</span><span class="p">.</span><span class="n">writeTo</span><span class="p">(</span><span class="n">output</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Proto DataStore 的平台特定实现</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2.数据迁移</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// In androidMain - 从 SharedPreferences 迁移到 DataStore</span>
</span><span class='line'><span class="k">val</span> <span class="py">dataStore</span> <span class="p">=</span> <span class="n">context</span><span class="p">.</span><span class="n">createDataStore</span><span class="p">(</span>
</span><span class='line'>    <span class="n">name</span> <span class="p">=</span> <span class="s">&quot;user_preferences&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">produceMigrations</span> <span class="p">=</span> <span class="p">{</span> <span class="n">context</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="n">listOf</span><span class="p">(</span>
</span><span class='line'>            <span class="n">SharedPreferencesMigration</span><span class="p">(</span>
</span><span class='line'>                <span class="n">context</span> <span class="p">=</span> <span class="n">context</span><span class="p">,</span>
</span><span class='line'>                <span class="n">sharedPreferencesName</span> <span class="p">=</span> <span class="s">&quot;legacy_preferences&quot;</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3.处理异常</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// In commonMain - 数据操作过程中的异常处理</span>
</span><span class='line'><span class="k">val</span> <span class="py">userData</span> <span class="p">=</span> <span class="n">dataStore</span><span class="p">.</span><span class="n">data</span>
</span><span class='line'>    <span class="p">.</span><span class="k">catch</span> <span class="p">{</span> <span class="n">exception</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="c1">// 处理异常（例如数据损坏）</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">exception</span> <span class="k">is</span> <span class="n">IOException</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">emit</span><span class="p">(</span><span class="n">emptyPreferences</span><span class="p">())</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="n">exception</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">preferences</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="c1">// Map preferences to your data model</span>
</span><span class='line'>        <span class="n">UserData</span><span class="p">(</span>
</span><span class='line'>            <span class="n">username</span> <span class="p">=</span> <span class="n">preferences</span><span class="p">[</span><span class="n">USERNAME</span><span class="p">]</span> <span class="o">?:</span> <span class="s">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">email</span> <span class="p">=</span> <span class="n">preferences</span><span class="p">[</span><span class="n">EMAIL</span><span class="p">]</span> <span class="o">?:</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>KMP 中数据存储的最佳实践</h2>

<ol>
<li>利用协程和 Flow 进行异步操作

<ul>
<li>DataStore 操作本质上是异步的</li>
<li>使用 Flow 观察存储数据的变化</li>
<li>应用 Map、Filter 和 Combine 等 Flow 操作符进行数据转换</li>
</ul>
</li>
<li>创建存储库层

<ul>
<li>将 DataStore 操作抽象到存储库后面</li>
<li>这样可以更轻松地根据需要切换实现</li>
<li>为你的业务逻辑提供简洁的 API</li>
</ul>
</li>
<li>优雅地处理错误

<ul>
<li>使用 catch 操作符处理 Flow 中的异常</li>
<li>在无法读取数据时提供回退值</li>
<li>考虑为关键操作实现重试机制</li>
</ul>
</li>
<li>优化性能

<ul>
<li>最大限度地减少 DataStore 更新次数</li>
<li>将相关的更改集中处理</li>
<li>使用 distinctUntilChanged() 避免不必要的排放</li>
</ul>
</li>
<li>彻底测试你的 DataStore 代码

<ul>
<li>在 commonTest 中为你的存储库编写测试</li>
<li>使用测试替身模拟不同的场景</li>
</ul>
</li>
</ol>


<h2>结论</h2>

<p>将 DataStore 集成到 Kotlin Multiplatform 项目中，提供了一种现代化、类型安全的跨平台数据存储和访问方法。</p>

<p>本文概述的方法提供了一种实用的方法，可以跨平台共享首选项和数据存储逻辑，并且只需极少的平台特定代码。DataStore 对协程和 Flow 的支持使其与 KMP 项目完美契合，能够通过一致的 API 实现响应式和异步数据操作。</p>

<p>通过遵循本文概述的配置步骤、平台特定注意事项和最佳实践，你可以在 KMP 项目中成功实现 DataStore，并创建稳定、高效的跨平台数据存储解决方案，并且只需极少的平台特定代码。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[揭秘原生View与Jetpack Compose之间的传送门]]></title>
    <link href="https://alexhilton.github.io/blog/2025/06/02/android-vies-in-compose/"/>
    <updated>2025-06-02T21:44:19+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/06/02/android-vies-in-compose</id>
    <content type="html"><![CDATA[<p>芳菲随春去，碧绿入夏来，不知不觉中<a href="https://juejin.cn/column/7367555191338467337">Compose专题</a>已经写了近40篇文章了，从Compose各组件的使用方法，到Compose的编程思想，再到内部原理和最佳实践。通过<a href="https://juejin.cn/column/7367555191338467337">这一系列的文章</a>相信对Compose已经有了足够的理解，能够在项目中进行实战和运用。学无止境，今天将继续学习，重点探讨如何在已有的项目中使用Compose。</p>

<p><a href="https://alexhilton.github.io/blog/2025/06/02/android-vies-in-compose/"><img src="file:///Users/alexhilton/Downloads/portal_2.png" title="auto auto" ></a></p>

<!-- more -->


<h2>缘起</h2>

<p>无疑Jetpack Compose是一个优秀的声明式UI框架，它与原生的View方式最大的区别，在于思考问题的方式上并不一样。声明式框架能把开发者从繁杂的命令式的UI细节中解放出来，重点思考一个好的体验应该是什么样子的，而具体的UI细节由框架来处理。尽管如此，毕竟Compose是近几年来发展起来的，现今大量的项目仍是原生View主导的。此外，Compose也还在发展中，有些特定业务领域如Camera，视频，3D渲染，还没有能力支持。因此，整合原生View和Compose是项目中很现实的一个难题，本文将重点讨论两个议题：一个是如何在原生View中嵌入Compose，另一个就是如何在Compose中嵌入原生View。</p>

<p><strong>注意：</strong> 本文中提到的两个组件ComposeView和AndroidView都仅在Jetpack Compose（for Android）生效，并不适用于跨平台的Compose Multiplatform。</p>

<h2>在原生View中嵌入Compose</h2>

<p>第一个传送门是如何进入Compose的世界。相信现在绝大多数项目都是基于原生View的，借助<a href="https://developer.android.com/reference/kotlin/androidx/compose/ui/platform/ComposeView">ComposeView</a>就可以进入到Compose的世界。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">composeView</span> <span class="p">=</span> <span class="n">ComposeView</span><span class="p">(</span><span class="n">context</span><span class="p">).</span><span class="n">apply</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">setContent</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// 这里调用Composables</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ComposeView是View的一个子类，能够作为Compose的容器，在<a href="https://developer.android.com/reference/kotlin/androidx/compose/ui/platform/ComposeView#setContent(kotlin.Function0">其setContent方法</a>)中提供一个Composable即可。ComposeView与其他View一样，可以用在View tree中，用在Fragment里和Activity里面。实际上作为平台的入口ComponentActivity用的也是ComposeView。</p>

<h3>在View层级中直接嵌入</h3>

<p>ComposeView就是一个普通的Android View，跟其他View的子类是一样的，所以可以把它放在任何可以使用View的地方，比如一个布局里面，作为一个页面的一部分。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;LinearLayout</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">xmlns:tools=</span><span class="s">&quot;http://schemas.android.com/tools&quot;</span>
</span><span class='line'>    <span class="na">android:id=</span><span class="s">&quot;@+id/container&quot;</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:orientation=</span><span class="s">&quot;vertical&quot;</span>
</span><span class='line'>    <span class="na">tools:context=</span><span class="s">&quot;.MainActivity&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;androidx.compose.ui.platform.ComposeView</span>
</span><span class='line'>        <span class="na">android:id=</span><span class="s">&quot;@+id/compose_view&quot;</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;Button</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:text=</span><span class="s">&quot;WidgetButton&quot;</span>
</span><span class='line'>        <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/LinearLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>注意：</strong> 尽管可以把ComposeView当成普通的View，直接嵌入到布局中，作为页面中的一部分，但这并不是一个好的做法，一来是不能发挥Compose的优势，另外Compose本身是有特定的生命周期的（重组），它需要知道平台的生命周期，以管控它自己的生命周期。而常规的View tree之中是没有平台生命周期的，因为常规的View tree并不关心平台的生命周期，view tree主要受窗口影响（attachToWindow，detachFromWindow），这个与平台组件的生命周期没有关系。</p>

<h3>用在Fragment中</h3>

<p>想要在某个Fragment中集成Compose的方式就是把ComposeView作为Fragment的根View即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">class</span> <span class="nc">ExampleFragmentNoXml</span> <span class="p">:</span> <span class="n">Fragment</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreateView</span><span class="p">(</span>
</span><span class='line'>        <span class="n">inflater</span><span class="p">:</span> <span class="n">LayoutInflater</span><span class="p">,</span>
</span><span class='line'>        <span class="n">container</span><span class="p">:</span> <span class="n">ViewGroup</span><span class="p">?,</span>
</span><span class='line'>        <span class="n">savedInstanceState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">?</span>
</span><span class='line'>    <span class="p">):</span> <span class="n">View</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">ComposeView</span><span class="p">(</span><span class="n">requireContext</span><span class="p">()).</span><span class="n">apply</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 当View的宿主destroy时销毁组合</span>
</span><span class='line'>            <span class="n">setViewCompositionStrategy</span><span class="p">(</span><span class="n">ViewCompositionStrategy</span><span class="p">.</span><span class="n">DisposeOnViewTreeLifecycleDestroyed</span><span class="p">)</span>
</span><span class='line'>            <span class="n">setContent</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">MaterialTheme</span> <span class="p">{</span>
</span><span class='line'>                    <span class="c1">// 进入到Compose世界</span>
</span><span class='line'>                    <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Hello Compose!&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>用在Activity中</h3>

<p>这其实是最好的方式，在一个新的页面窗口中使用Compose，这就能与其余view独立开来，是最为理想的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">class</span> <span class="nc">ExampleActivity</span> <span class="p">:</span> <span class="n">ComponentActivity</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">super</span><span class="p">.</span><span class="n">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">setContent</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">MaterialTheme</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">Greeting</span><span class="p">(</span><span class="n">name</span> <span class="p">=</span> <span class="s">&quot;compose&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">Greeting</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Text</span><span class="p">(</span><span class="n">text</span> <span class="p">=</span> <span class="s">&quot;Hello $name!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>使用建议</h3>

<p>虽然ComposeView可以当成一个普通的View来使用，但最为合理的方式就是在一个新的Activity中才使用Compose，也就是说当有一个全新的页面时，考虑使用Compose来开发，这样才能发挥出它的价值。</p>

<p>除非有特别的需求，否则不要把ComposeView作为现有页面的一部分嵌入到View tree中（也就是作为页面的一部分）。</p>

<p>至于在Fragment中使用，如果是一个全新的页面，而非现有布局的一部分，那也可以考虑使用Compose。</p>

<p><strong>注意：</strong> 其根本原因在于，我们使用Jetpack Compose并不是图它能实现什么特别的UI效果，Compose能做的事情View都能做，甚至它不能做的事情View也能做。用Compose是因为它是声明式的UI框架，在开发效率和可扩展性上面有巨大的优势。所以，只应该在想要发挥声明式框架优势的时候，才考虑使用它，并且应该从一个全新的页面开始。</p>

<h2>在Compose中嵌入原生View</h2>

<p>Jetpack Compose提供了足够丰富的组件，足以应对常规的UI，但它毕竟还不是特别的成熟，总会遇到一些场景，发现Compose无法胜任，而且并不是通过自定义组件就能够解决的，比如一些特定领域的UI，如camera，如视频，如3D渲染。或者说，已经有了自定义好的View，并不想重复开发。再或者说对于一些三方的库，它并没有对应的Compose组件。这些场景就需要把原生的View嵌入到Compose之中。</p>

<p><a href="https://developer.android.com/reference/kotlin/androidx/compose/ui/viewinterop/package-summary#AndroidView(kotlin.Function1,androidx.compose.ui.Modifier,kotlin.Function1,kotlin.Function1,kotlin.Function1">AndroidView</a>)就是专门用于把原生View嵌入到Compose中的一个特殊composable。它就像一个传送门一样，能把原生的View，无论是一个现成的自定义View，还是特定领域的View或者三方库的View，带入到Compose中，变成一个composable。</p>

<h3>AndroidView的使用方法</h3>

<p>AndroidView是一个composable，把它放在想要的位置即可。它有三个参数，一个是常规的Modifier用以约束这个composable的；另两个是lambda，一个是用于创建View的，返回一个View的实例，只会被调用一次；另一个就是用于更新View的，会被调用多次：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">CustomView</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">selectedItem</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="m">0</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 添加原生View到Compose</span>
</span><span class='line'>    <span class="n">AndroidView</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">(),</span>
</span><span class='line'>        <span class="n">factory</span> <span class="p">=</span> <span class="p">{</span> <span class="n">context</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="c1">// 创建View的实例</span>
</span><span class='line'>            <span class="n">MyView</span><span class="p">(</span><span class="n">context</span><span class="p">).</span><span class="n">apply</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// 设置View的点击事件，更新状态，这会触发重组</span>
</span><span class='line'>                <span class="n">setOnClickListener</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">selectedItem</span> <span class="p">=</span> <span class="m">1</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="n">update</span> <span class="p">=</span> <span class="p">{</span> <span class="n">view</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="c1">// 更新View的状态</span>
</span><span class='line'>            <span class="c1">// 这里读了状态，所以重组时update会被再次调用，view能拿到最新的状态</span>
</span><span class='line'>            <span class="n">view</span><span class="p">.</span><span class="n">selectedItem</span> <span class="p">=</span> <span class="n">selectedItem</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">ContentExample</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Column</span><span class="p">(</span><span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Look at this CustomView!&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">CustomView</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>注意：</strong> factory仅会被调用一次，用于创建View实例，update会被调用多次，用于更新view的状态，包括初次组合时，也就是factory执行之后，就会调用update。AndroidView函数会帮助提供View需要的参数context，以及管理View的实例，所以update中会把view当作参数传给我们，所以我们完全没有必要再用额外的状态（remember）去缓存View的实例了。</p>

<h3>使用建议</h3>

<p>虽然AndroidView是一个传送门，可以连接两个世界，但是能不用还是不要用，非必要不使用。如果能用Compose搞定的事情，还是要用Compose来搞，比如用Canvas去实现自定义组件。</p>

<p>需要使用AndroidView的场景只有三个：一是有现成的自定义View，拿过来就可以用，不想二次开发；二是三方库的View；三就是Compose确实搞不定的特定领域，如WebView，如视频，如SurfaceView或者3D渲染（OpenGL ES）等等。除以之外，不建议使用。</p>

<p>还需要特别注意的是，如果原生的View交互比较复杂，不光是点击，还涉及Touch事件处理，处理事件的同时还要不断更新View的状态，那也不应该使用它。比较理想的情况是，嵌入的这个View是一个比较纯粹的生产者，比如它只产生事件，不需要再往回更新状态；或者是一个比较纯粹的消费者，比如它就负责展示，只需要塞数据就行了。</p>

<h2>总结</h2>

<p>网上的教程或者Demo中的世界是很美好的，往往都是一个新建的项目，一个新的页面，直接就进入了Compose世界，也都在讲Compose能做的事情。但现实的世界往往不是这样子的，极少情况下是全新开始的项目，往往需要与遗留代码打交道，需要实现的需求也是多种多样的。本文中介绍了两个传送门，ComposeView和AndroidView可以方便地连接原生View和Compose两个世界，为现实项目中遇到的问题提供了一个可行的解决方案。</p>

<h3>让Compose支持OpenGL ES</h3>

<ul>
<li><a href="https://stackoverflow.com/questions/78796021/how-to-render-opengl-alongside-jetpack-compose-ui-without-covering-other-element">How to render OpenGL alongside Jetpack Compose UI without covering other elements</a></li>
<li><a href="https://www.reddit.com/r/Kotlin/comments/on36sy/experiment_to_make_opengl_work_together_with/?rdt=62185">Experiment to make OpenGL work together with Jetpack Compose</a></li>
<li><a href="https://composables.com/foundation/androidexternalsurface">AndroidExternalSurface</a></li>
<li><a href="https://youtrack.jetbrains.com/issue/CMP-3810/Using-Open-GL-with-Compose-Multiplatform">Using Open GL with Compose Multiplatform</a></li>
</ul>


<h2>References</h2>

<ul>
<li><a href="https://developer.android.com/develop/ui/compose/migrate/interoperability-apis/compose-in-views">Using Compose in Views</a></li>
<li><a href="https://developer.android.com/develop/ui/compose/migrate/interoperability-apis/views-in-compose">Using Views in Compose</a></li>
<li><a href="https://medium.com/@seungbae2/jetpack-compose-androidview-seamless-integration-of-android-views-into-compose-ui-644f217437d3">Jetpack Compose AndroidView: Seamless Integration of Android Views into Compose UI</a></li>
<li><a href="https://stackoverflow.com/questions/59995970/using-custom-views-with-jetpack-compose">Using Custom Views with Jetpack Compose</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Jetpack Compose构建创意动画]]></title>
    <link href="https://alexhilton.github.io/blog/2025/05/31/animations-in-jetpack-compose/"/>
    <updated>2025-05-31T23:19:03+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/05/31/animations-in-jetpack-compose</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自「Animating Inside and Outside the Box with Jetpack Compose」，原文链接<a href="https://medium.com/proandroiddev/animating-inside-and-outside-the-box-with-jetpack-compose-a56eba1b6af6">https://medium.com/proandroiddev/animating-inside-and-outside-the-box-with-jetpack-compose-a56eba1b6af6</a>，由Nirbhay Pherwani发布于2023年12月13日。</p></blockquote>

<p><a href="https://alexhilton.github.io/blog/2025/05/31/animations-in-jetpack-compose/"><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*YDhqS2nzvjXmvlC58vcDNQ.png" title="auto auto" ></a></p>

<!-- more -->


<h2>缘起</h2>

<p>动画能够让用户界面充满活力、引人入胜。在Android中，Jetpack Compose提供高级工具，让你轻松掌握这项强大功能，打造真正的动态UI。本文将深入探讨 Jetpack Compose 中动画的深层技术。</p>

<p><strong>译注：</strong> 虽然原文是以Jetpack Compose为基础来写的，但其实动画这块并不涉及平台特性，也适用于Compose Multiplatform。</p>

<p>我们将涵盖一系列技巧，从创建流畅的、基于物理的动效（增添真实感）到创建复杂的编排序列（为界面增添叙事质感）。无论你是想提升技能，还是仅仅想探索无限可能，本教程都将提供实用的见解，帮助你的应用不仅运行流畅，还能让用户在每次交互中都感到愉悦。</p>

<p>让我们深入探索这些动画如何改变你的 UI设计方法，使其更加直观、响应迅速，并为用户带来愉悦的体验。</p>

<h2>第 1 部分 — Jetpack Compose中的自定义动画</h2>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*C1_mzDHNHOfSZkIiULgRzw.gif" alt="游戏角色的移动" /></p>

<h3>利用自定义动画实现动态交互</h3>

<p>在本节中，我们将探索如何在 Jetpack Compose中使用高级自定义动画来创建动态且可交互的 UI 元素。我们将重点介绍一个真实示例，该示例演示了用户交互如何以有意义的方式影响动画。</p>

<h3>案例 - 交互式游戏角色移动</h3>

<p>我们将通过一个示例来说明这一概念，其中游戏角色（由面部图标表示）沿着由用户可拖动控制点确定的路径移动。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">GameCharacterMovement</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">startPosition</span> <span class="p">=</span> <span class="n">Offset</span><span class="p">(</span><span class="m">100f</span><span class="p">,</span> <span class="m">100f</span><span class="p">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">endPosition</span> <span class="p">=</span> <span class="n">Offset</span><span class="p">(</span><span class="m">250f</span><span class="p">,</span> <span class="m">400f</span><span class="p">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">controlPoint</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="n">Offset</span><span class="p">(</span><span class="m">200f</span><span class="p">,</span> <span class="m">300f</span><span class="p">))</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">position</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">Animatable</span><span class="p">(</span><span class="n">startPosition</span><span class="p">,</span> <span class="n">Offset</span><span class="p">.</span><span class="n">VectorConverter</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">controlPoint</span><span class="p">.</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">position</span><span class="p">.</span><span class="n">animateTo</span><span class="p">(</span>
</span><span class='line'>            <span class="n">targetValue</span> <span class="p">=</span> <span class="n">endPosition</span><span class="p">,</span>
</span><span class='line'>            <span class="n">animationSpec</span> <span class="p">=</span> <span class="n">keyframes</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">durationMillis</span> <span class="p">=</span> <span class="m">5000</span>
</span><span class='line'>                <span class="n">controlPoint</span><span class="p">.</span><span class="n">value</span> <span class="n">at</span> <span class="m">2500</span> <span class="c1">// 可拖动控制点控制的中间点</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">onControlPointChange</span><span class="p">:</span> <span class="p">(</span><span class="n">offset</span><span class="p">:</span> <span class="n">Offset</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">controlPoint</span><span class="p">.</span><span class="n">value</span> <span class="p">=</span> <span class="n">it</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Box</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Icon</span><span class="p">(</span>
</span><span class='line'>            <span class="n">Icons</span><span class="p">.</span><span class="n">Filled</span><span class="p">.</span><span class="n">Face</span><span class="p">,</span> <span class="n">contentDescription</span> <span class="p">=</span> <span class="s">&quot;Localized description&quot;</span><span class="p">,</span> <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                <span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">50.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">offset</span><span class="p">(</span><span class="n">x</span> <span class="p">=</span> <span class="n">position</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">x</span><span class="p">.</span><span class="n">dp</span><span class="p">,</span> <span class="n">y</span> <span class="p">=</span> <span class="n">position</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">y</span><span class="p">.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">DraggableControlPoint</span><span class="p">(</span><span class="n">controlPoint</span><span class="p">.</span><span class="n">value</span><span class="p">,</span> <span class="n">onControlPointChange</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>代码说明</h4>

<ul>
<li>GameCharacterMovement 为代表游戏角色的图标设置动画。动画路径由 controlPoint 控制，该控制点通过用户交互设置和更新。</li>
<li>Animatable 用于将图标的位置从 startPosition 平滑过渡到 endPosition。</li>
<li>LaunchedEffect 监听 controlPoint 值的变化，并在控制点移动时重新触发动画。</li>
<li>animationSpec — 这是一种配置项，用于定义动画的持续时间、延迟和缓动。它决定了动画值如何随时间变化。</li>
<li>keyframes — 允许你在动画的特定时间点指定值，从而控制动画的中间点。这对于创建复杂的、精心设计的动画特别有用。</li>
<li>keyframes 块将动画定义为一系列关键帧。在 2500 毫秒（中间点）时，角色到达控制点，然后继续移动到结束位置。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">DraggableControlPoint</span><span class="p">(</span><span class="n">controlPoint</span><span class="p">:</span> <span class="n">Offset</span><span class="p">,</span> <span class="n">onControlPointChange</span><span class="p">:</span> <span class="p">(</span><span class="n">Offset</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">localPosition</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="n">controlPoint</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">offset</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">IntOffset</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">x</span> <span class="p">=</span> <span class="n">localPosition</span><span class="p">.</span><span class="n">x</span><span class="p">.</span><span class="n">roundToInt</span><span class="p">()</span> <span class="p">-</span> <span class="m">15</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">y</span> <span class="p">=</span> <span class="n">localPosition</span><span class="p">.</span><span class="n">y</span><span class="p">.</span><span class="n">roundToInt</span><span class="p">()</span> <span class="p">-</span> <span class="m">15</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">30.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">Red</span><span class="p">,</span> <span class="n">shape</span> <span class="p">=</span> <span class="n">CircleShape</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">pointerInput</span><span class="p">(</span><span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">detectDragGestures</span><span class="p">(</span><span class="n">onDragEnd</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">onControlPointChange</span><span class="p">(</span><span class="n">localPosition</span><span class="p">)</span>
</span><span class='line'>                <span class="p">})</span> <span class="p">{</span> <span class="n">_</span><span class="p">,</span> <span class="n">dragAmount</span> <span class="p">-&gt;</span>
</span><span class='line'>                    <span class="c1">// adjust based on screen bounds</span>
</span><span class='line'>                    <span class="k">val</span> <span class="py">newX</span> <span class="p">=</span> <span class="p">(</span><span class="n">localPosition</span><span class="p">.</span><span class="n">x</span> <span class="p">+</span> <span class="n">dragAmount</span><span class="p">.</span><span class="n">x</span><span class="p">).</span><span class="n">coerceIn</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="m">600f</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">val</span> <span class="py">newY</span> <span class="p">=</span> <span class="p">(</span><span class="n">localPosition</span><span class="p">.</span><span class="n">y</span> <span class="p">+</span> <span class="n">dragAmount</span><span class="p">.</span><span class="n">y</span><span class="p">).</span><span class="n">coerceIn</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="m">600f</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">localPosition</span> <span class="p">=</span> <span class="n">Offset</span><span class="p">(</span><span class="n">newX</span><span class="p">,</span> <span class="n">newY</span><span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>代码说明</h4>

<ul>
<li>DraggableControlPoint 是一个可组合项，允许用户以交互方式更改控制点的位置。</li>
<li>拖动控制点会更新 localPosition，并在拖动手势完成（onDragEnd）后将其反馈回 GameCharacterMovement。此交互会改变动画图标的路径。</li>
</ul>


<h3>实际用例</h3>

<ol>
<li>交互式教育应用：在教育应用中，动画可用于提升学习的吸引力。例如，在天文学应用中，拖动行星沿其轨道运行即可查看不同的星座。</li>
<li>交互式故事叙述和游戏：在数字故事叙述或游戏应用中，允许用户通过可拖动元素来影响故事或游戏环境，可以创造更具沉浸感的体验。</li>
</ol>


<h2>第 2 部分 — 在 Jetpack Compose中编排复杂动画</h2>

<h3>同步多个元素以实现和谐效果</h3>

<p>在本部分中，我们将深入探讨在 Jetpack Compose 中编排（Choreographing）复杂动画的艺术。我们专注于创建同步动画，使多个元素能够无缝交互，从而提升整体用户体验。</p>

<h3>A) 连锁反应动画 — 多米诺骨牌效应</h3>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*iNeJJU3ixcdcZnQFHHSWYw.gif" alt="多米诺骨牌效应" /></p>

<p>通过设置一系列动画可以在 UI 中创建多米诺骨牌效应，其中一个动画的完成会触发下一个动画的开始。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">DominoEffect</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">animatedValues</span> <span class="p">=</span> <span class="n">List</span><span class="p">(</span><span class="m">6</span><span class="p">)</span> <span class="p">{</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">Animatable</span><span class="p">(</span><span class="m">0f</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">animatedValues</span><span class="p">.</span><span class="n">forEachIndexed</span> <span class="p">{</span> <span class="n">index</span><span class="p">,</span> <span class="n">animate</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="n">animate</span><span class="p">.</span><span class="n">animateTo</span><span class="p">(</span>
</span><span class='line'>                <span class="n">targetValue</span> <span class="p">=</span> <span class="m">1f</span><span class="p">,</span>
</span><span class='line'>                <span class="n">animationSpec</span> <span class="p">=</span> <span class="n">tween</span><span class="p">(</span><span class="n">durationMillis</span> <span class="p">=</span> <span class="m">1000</span><span class="p">,</span> <span class="n">delayMillis</span> <span class="p">=</span> <span class="n">index</span> <span class="p">*</span> <span class="m">100</span><span class="p">)</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Box</span> <span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">()){</span>
</span><span class='line'>      <span class="n">animatedValues</span><span class="p">.</span><span class="n">forEachIndexed</span> <span class="p">{</span> <span class="n">index</span><span class="p">,</span> <span class="n">value</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                <span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">50.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">offset</span><span class="p">(</span><span class="n">x</span> <span class="p">=</span> <span class="p">((</span><span class="n">index</span><span class="p">+</span><span class="m">1</span><span class="p">)</span> <span class="p">*</span> <span class="m">50</span><span class="p">).</span><span class="n">dp</span><span class="p">,</span> <span class="n">y</span> <span class="p">=</span> <span class="p">((</span><span class="n">index</span><span class="p">+</span><span class="m">1</span><span class="p">)</span> <span class="p">*</span> <span class="m">30</span><span class="p">).</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">getRandomColor</span><span class="p">(</span><span class="n">index</span><span class="p">).</span><span class="n">copy</span><span class="p">(</span><span class="n">alpha</span> <span class="p">=</span> <span class="n">value</span><span class="p">.</span><span class="n">value</span><span class="p">))</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">getRandomColor</span><span class="p">(</span><span class="n">seed</span><span class="p">:</span> <span class="n">Int</span><span class="p">):</span> <span class="n">Color</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">random</span> <span class="p">=</span> <span class="n">Random</span><span class="p">(</span><span class="n">seed</span> <span class="p">=</span> <span class="n">seed</span><span class="p">).</span><span class="n">nextInt</span><span class="p">(</span><span class="m">256</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Color</span><span class="p">(</span><span class="n">random</span><span class="p">,</span> <span class="n">random</span><span class="p">,</span> <span class="n">random</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>代码说明</h4>

<ul>
<li>animatedValues 是一个Animatable对象的列表，每个值控制一个框的 Alpha（不透明度）。</li>
<li>LaunchedEffect 会触发这些值的一系列动画，从而创建一种交错效果，即每个框在前一个框之后淡入，类似于多米诺骨牌倒下。</li>
<li>getRandomColor 函数会为每个框生成随机的灰色阴影，为序列中的每个组件添加独特的视觉元素。</li>
<li>这些框沿屏幕对角线放置，增强了多米诺骨牌效应。</li>
</ul>


<h3>B) 交互式滚动时间轴</h3>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*Kk-V0g5pEqy83NajRy_6lA.gif" alt="交互式滚动时间轴" /></p>

<p>在这个时间轴中，每个元素都会随着用户滚动而淡入并移动到位。我们将使用 LazyColumn来呈现可滚动列表，并使用Animatable来呈现动画。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">InteractiveTimeline</span><span class="p">(</span><span class="n">timelineItems</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">scrollState</span> <span class="p">=</span> <span class="n">rememberLazyListState</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">LazyColumn</span><span class="p">(</span><span class="n">state</span> <span class="p">=</span> <span class="n">scrollState</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">itemsIndexed</span><span class="p">(</span><span class="n">timelineItems</span><span class="p">)</span> <span class="p">{</span> <span class="n">index</span><span class="p">,</span> <span class="n">item</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">animatableAlpha</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">Animatable</span><span class="p">(</span><span class="m">0f</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">isVisible</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">derivedStateOf</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">scrollState</span><span class="p">.</span><span class="n">firstVisibleItemIndex</span> <span class="p">&lt;=</span> <span class="n">index</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">isVisible</span><span class="p">.</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">isVisible</span><span class="p">.</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">animatableAlpha</span><span class="p">.</span><span class="n">animateTo</span><span class="p">(</span>
</span><span class='line'>                        <span class="m">1f</span><span class="p">,</span> <span class="n">animationSpec</span> <span class="p">=</span> <span class="n">tween</span><span class="p">(</span><span class="n">durationMillis</span> <span class="p">=</span> <span class="m">1000</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">TimelineItem</span><span class="p">(</span>
</span><span class='line'>                <span class="n">text</span> <span class="p">=</span> <span class="n">item</span><span class="p">,</span>
</span><span class='line'>                <span class="n">alpha</span> <span class="p">=</span> <span class="n">animatableAlpha</span><span class="p">.</span><span class="n">value</span><span class="p">,</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">TimelineItem</span><span class="p">(</span><span class="n">text</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">alpha</span><span class="p">:</span> <span class="n">Float</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Row</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">fillMaxWidth</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">DarkGray</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="n">alpha</span> <span class="p">=</span> <span class="n">alpha</span><span class="p">))</span>
</span><span class='line'>            <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">16.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>        <span class="n">verticalAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">CenterVertically</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Text</span><span class="p">(</span>
</span><span class='line'>            <span class="n">text</span> <span class="p">=</span> <span class="n">text</span><span class="p">,</span>
</span><span class='line'>            <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">White</span><span class="p">,</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxWidth</span><span class="p">(),</span>
</span><span class='line'>            <span class="n">textAlign</span> <span class="p">=</span> <span class="n">TextAlign</span><span class="p">.</span><span class="n">Center</span><span class="p">,</span>
</span><span class='line'>            <span class="n">fontSize</span> <span class="p">=</span> <span class="m">18.</span><span class="n">sp</span><span class="p">,</span>
</span><span class='line'>            <span class="n">fontWeight</span> <span class="p">=</span> <span class="n">FontWeight</span><span class="p">.</span><span class="n">SemiBold</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>代码说明</h4>

<ul>
<li>animatableAlpha 控制每个时间轴项目的 Alpha（不透明度），初始设置为 0（完全透明）。</li>
<li>isVisible 状态源自当前滚动位置，用于确定项目是否可见。</li>
<li>当用户滚动时，LaunchedEffect会触发进入视口的项目的淡入动画。</li>
</ul>


<h4>用例</h4>

<p>此交互式时间轴非常适合那些希望以视觉吸引力十足的方式呈现一系列事件或步骤的应用。动画通过在项目进入视野时吸引用户的注意力来增强用户的参与度。</p>

<p><strong>此类动画不仅引人入胜，还可以用来引导用户关注应用中的一系列事件或操作。</strong></p>

<h2>第 3 部分 — Jetpack Compose中基于物理的真实动画</h2>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*lZ_rpGorcFzewpUJN6WPAQ.gif" alt="弹性拖拽动画" /></p>

<h3>利用物理原理增强UI动态效果</h3>

<p>在本节中，我们将探索如何使用 Jetpack Compose将物理原理融入动画，为 UI 增添一层真实感和交互性。我们将重点介绍一个弹性拖拽交互示例。</p>

<h3>拖拽时的弹性效果</h3>

<p>此示例演示了图标上的弹性拖拽交互。垂直拖动时，图标会拉伸并回弹，产生弹性效果，模拟弹簧或橡皮筋​​的行为。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">ElasticDraggableBox</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">animatableOffset</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="n">Animatable</span><span class="p">(</span><span class="m">0f</span><span class="p">))</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Box</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">().</span><span class="n">background</span><span class="p">(</span><span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">xFFFFA732</span><span class="p">)),</span> <span class="n">contentAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">Center</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                <span class="p">.</span><span class="n">offset</span><span class="p">(</span><span class="n">y</span> <span class="p">=</span> <span class="n">animatableOffset</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">draggable</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">orientation</span> <span class="p">=</span> <span class="n">Orientation</span><span class="p">.</span><span class="n">Vertical</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">state</span> <span class="p">=</span> <span class="n">rememberDraggableState</span> <span class="p">{</span> <span class="n">delta</span> <span class="p">-&gt;</span>
</span><span class='line'>                        <span class="n">animatableOffset</span> <span class="p">=</span> <span class="n">Animatable</span><span class="p">(</span><span class="n">animatableOffset</span><span class="p">.</span><span class="n">value</span> <span class="p">+</span> <span class="n">delta</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">},</span>
</span><span class='line'>                    <span class="n">onDragStopped</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">animatableOffset</span><span class="p">.</span><span class="n">animateTo</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="n">animationSpec</span> <span class="p">=</span> <span class="n">spring</span><span class="p">())</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">350.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>            <span class="n">contentAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">Center</span>
</span><span class='line'>        <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Icon</span><span class="p">(</span>
</span><span class='line'>                <span class="n">Icons</span><span class="p">.</span><span class="n">Filled</span><span class="p">.</span><span class="n">Favorite</span><span class="p">,</span>
</span><span class='line'>                <span class="n">contentDescription</span> <span class="p">=</span> <span class="s">&quot;heart&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="n">animatableOffset</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">dp</span> <span class="p">+</span> <span class="m">150.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>                <span class="n">tint</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Red</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>说明</h4>

<ul>
<li>使用 draggable 修饰符将包含图标的 Box 可组合项设置为可拖动。</li>
<li>animatableOffset 跟踪图标因拖动而产生的垂直偏移。</li>
<li>在拖动过程中，图标的大小会根据拖动量而变化，从而产生拉伸效果。</li>
<li>当拖动停止（onDragStopped）时，animatableOffset 会使用弹簧动画返回到 0f，从而使图标弹回其原始大小和位置。</li>
</ul>


<h2>第 4 节 — Jetpack Compose 中的手势动画</h2>

<h3>通过响应式手势提升用户体验</h3>

<p>在本部分中，我们将探索如何使用 Jetpack Compose 创建由用户手势控制的动画。我们将重点介绍两个示例——一个支持多点触控的可变形图像和一个由手势控制的音频波形。</p>

<h3>A) 多点触控可变形图像</h3>

<p>在本示例中，我们将创建一个图像视图，用户可以使用捏合、缩放和旋转等多点触控（Multi-touch）手势进行交互。</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*34WxcBivTWhiCY6KVSVelQ.gif" alt="多点触控可变形图像" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">TransformableImage</span><span class="p">(</span><span class="n">imageId</span><span class="p">:</span> <span class="n">Int</span> <span class="p">=</span> <span class="n">R</span><span class="p">.</span><span class="n">drawable</span><span class="p">.</span><span class="n">android</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">scale</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="m">1f</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">rotation</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="m">0f</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">offset</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="n">Offset</span><span class="p">.</span><span class="n">Zero</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Box</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">().</span><span class="n">background</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">DarkGray</span><span class="p">),</span> <span class="n">contentAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">Center</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Image</span><span class="p">(</span>
</span><span class='line'>            <span class="n">painter</span> <span class="p">=</span> <span class="n">painterResource</span><span class="p">(</span><span class="n">id</span> <span class="p">=</span> <span class="n">imageId</span><span class="p">),</span>
</span><span class='line'>            <span class="n">contentDescription</span> <span class="p">=</span> <span class="s">&quot;Transformable image&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">contentScale</span> <span class="p">=</span> <span class="n">ContentScale</span><span class="p">.</span><span class="n">Crop</span><span class="p">,</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                <span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">300.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">graphicsLayer</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">scaleX</span> <span class="p">=</span> <span class="n">scale</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">scaleY</span> <span class="p">=</span> <span class="n">scale</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">rotationZ</span> <span class="p">=</span> <span class="n">rotation</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">translationX</span> <span class="p">=</span> <span class="n">offset</span><span class="p">.</span><span class="n">x</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">translationY</span> <span class="p">=</span> <span class="n">offset</span><span class="p">.</span><span class="n">y</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">pointerInput</span><span class="p">(</span><span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">detectTransformGestures</span> <span class="p">{</span> <span class="n">_</span><span class="p">,</span> <span class="n">pan</span><span class="p">,</span> <span class="n">zoom</span><span class="p">,</span> <span class="n">rotate</span> <span class="p">-&gt;</span>
</span><span class='line'>                        <span class="n">scale</span> <span class="p">*=</span> <span class="n">zoom</span>
</span><span class='line'>                        <span class="n">rotation</span> <span class="p">+=</span> <span class="n">rotate</span>
</span><span class='line'>                        <span class="n">offset</span> <span class="p">+=</span> <span class="n">pan</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>代码说明</h4>

<ul>
<li>Image 可组合项通过 graphicsLayer 进行修改，以应用缩放、旋转和平移等变换。</li>
<li>pointerInput 带有 detectTransformGestures 接口，用于处理多点触控手势，并相应地更新缩放、旋转和偏移。</li>
</ul>


<h3>B) 手势控制波形</h3>

<p>这是一个波形可视化效果，它根据用户手势（例如滑动和捏合）改变外观，以控制幅度和频率等方面。</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*qKzb1XpUrSGKdCL-OxhtLw.gif" alt="手势控制波形" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">GestureControlledWaveform</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">amplitude</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="m">100f</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">frequency</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="m">1f</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Canvas</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>        <span class="p">.</span><span class="n">fillMaxSize</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">pointerInput</span><span class="p">(</span><span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">detectDragGestures</span> <span class="p">{</span> <span class="n">_</span><span class="p">,</span> <span class="n">dragAmount</span> <span class="p">-&gt;</span>
</span><span class='line'>                <span class="n">amplitude</span> <span class="p">+=</span> <span class="n">dragAmount</span><span class="p">.</span><span class="n">y</span>
</span><span class='line'>                <span class="n">frequency</span> <span class="p">+=</span> <span class="n">dragAmount</span><span class="p">.</span><span class="n">x</span> <span class="p">/</span> <span class="m">500f</span>
</span><span class='line'>                <span class="c1">// 根据拖拽调整频率</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="p">.</span><span class="n">background</span><span class="p">(</span>
</span><span class='line'>            <span class="n">Brush</span><span class="p">.</span><span class="n">verticalGradient</span><span class="p">(</span>
</span><span class='line'>                <span class="n">colors</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span><span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">xFF003366</span><span class="p">),</span> <span class="n">Color</span><span class="p">.</span><span class="n">White</span><span class="p">,</span> <span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">xFF66B2FF</span><span class="p">))</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">width</span> <span class="p">=</span> <span class="n">size</span><span class="p">.</span><span class="n">width</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">height</span> <span class="p">=</span> <span class="n">size</span><span class="p">.</span><span class="n">height</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">path</span> <span class="p">=</span> <span class="n">Path</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="py">halfHeight</span> <span class="p">=</span> <span class="n">height</span> <span class="p">/</span> <span class="m">2</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">waveLength</span> <span class="p">=</span> <span class="n">width</span> <span class="p">/</span> <span class="n">frequency</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">path</span><span class="p">.</span><span class="n">moveTo</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="n">halfHeight</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">x</span> <span class="k">in</span> <span class="m">0</span> <span class="n">until</span> <span class="n">width</span><span class="p">.</span><span class="n">toInt</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">theta</span> <span class="p">=</span> <span class="p">(</span><span class="m">2.0</span> <span class="p">*</span> <span class="n">Math</span><span class="p">.</span><span class="n">PI</span> <span class="p">*</span> <span class="n">x</span> <span class="p">/</span> <span class="n">waveLength</span><span class="p">).</span><span class="n">toFloat</span><span class="p">()</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">y</span> <span class="p">=</span> <span class="n">halfHeight</span> <span class="p">+</span> <span class="n">amplitude</span> <span class="p">*</span> <span class="n">sin</span><span class="p">(</span><span class="n">theta</span><span class="p">.</span><span class="n">toDouble</span><span class="p">()).</span><span class="n">toFloat</span><span class="p">()</span>
</span><span class='line'>            <span class="n">path</span><span class="p">.</span><span class="n">lineTo</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">toFloat</span><span class="p">(),</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="py">gradient</span> <span class="p">=</span> <span class="n">Brush</span><span class="p">.</span><span class="n">horizontalGradient</span><span class="p">(</span>
</span><span class='line'>            <span class="n">colors</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">Blue</span><span class="p">,</span> <span class="n">Color</span><span class="p">.</span><span class="n">Cyan</span><span class="p">,</span> <span class="n">Color</span><span class="p">.</span><span class="n">Magenta</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">drawPath</span><span class="p">(</span>
</span><span class='line'>            <span class="n">path</span> <span class="p">=</span> <span class="n">path</span><span class="p">,</span>
</span><span class='line'>            <span class="n">brush</span> <span class="p">=</span> <span class="n">gradient</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>代码说明</h4>

<ul>
<li>amplitude 和 frequency 是状态变量，分别控制波形的幅度和频率。</li>
<li>Canvas 可组合项用于绘制波形。Canvas 内部的绘制逻辑根据正弦函数计算每个 X 位置的 Y 位置，从而创建波浪效果。</li>
<li>detectDragGestures 修饰符用于根据用户拖动手势更新幅度和频率。水平拖动调整频率，垂直拖动调整幅度。</li>
<li>当用户在屏幕上拖动时，波形的形状会相应变化，从而营造出互动体验。</li>
</ul>


<h4>注意事项</h4>

<ul>
<li>这是一个基本的实现。为了获得更逼真的音频波形，你需要集成实际的音频数据。</li>
<li>可以通过调整拖动过程中幅度和频率的修改方式来微调波形对手势的响应能力。</li>
</ul>


<p>此示例演示了如何在 Compose 中创建基本的交互式波形，并且可以对其进行扩展或修改，以用于更复杂的用例或处理更复杂的手势。</p>

<h2>第 5 节 — Jetpack Compose 中的状态驱动动画模式</h2>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*nkfhmC6JjQnshL3y_izhKg.gif" alt="带动画线图" /></p>

<h3>基于数据和状态变化的UI动画</h3>

<p>本部分重点介绍如何创建由数据或UI 状态变化驱动的动画，从而增强应用的交互性和响应能力。我们将探讨两个具体示例——数据图动画和在多状态 UI 中实现状态转换。</p>

<h3>A) 数据驱动的图形动画</h3>

<p>本示例演示了一个动画线图，其中图形的路径（Path）会随着数据集的变化而变化。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">AnimatedGraphExample</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">dataPoints</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="n">generateRandomDataPoints</span><span class="p">(</span><span class="m">5</span><span class="p">))</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Column</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">fillMaxSize</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">DarkGray</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">AnimatedLineGraph</span><span class="p">(</span><span class="n">dataPoints</span> <span class="p">=</span> <span class="n">dataPoints</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Spacer</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">height</span><span class="p">(</span><span class="m">16.</span><span class="n">dp</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Button</span><span class="p">(</span>
</span><span class='line'>            <span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">dataPoints</span> <span class="p">=</span> <span class="n">generateRandomDataPoints</span><span class="p">(</span><span class="m">5</span><span class="p">)</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">align</span><span class="p">(</span><span class="n">Alignment</span><span class="p">.</span><span class="n">CenterHorizontally</span><span class="p">),</span>
</span><span class='line'>            <span class="n">colors</span> <span class="p">=</span> <span class="n">ButtonDefaults</span><span class="p">.</span><span class="n">buttonColors</span><span class="p">(</span><span class="n">containerColor</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Green</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Text</span><span class="p">(</span>
</span><span class='line'>                <span class="s">&quot;Update Data&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">fontWeight</span> <span class="p">=</span> <span class="n">FontWeight</span><span class="p">.</span><span class="n">Bold</span><span class="p">,</span>
</span><span class='line'>                <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">DarkGray</span><span class="p">,</span>
</span><span class='line'>                <span class="n">fontSize</span> <span class="p">=</span> <span class="m">18.</span><span class="n">sp</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">AnimatedLineGraph</span><span class="p">(</span><span class="n">dataPoints</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Float</span><span class="p">&gt;)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">animatableDataPoints</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">dataPoints</span><span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">Animatable</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">path</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">Path</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">dataPoints</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">animatableDataPoints</span><span class="p">.</span><span class="n">forEachIndexed</span> <span class="p">{</span> <span class="n">index</span><span class="p">,</span> <span class="n">animatable</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="n">animatable</span><span class="p">.</span><span class="n">animateTo</span><span class="p">(</span><span class="n">dataPoints</span><span class="p">[</span><span class="n">index</span><span class="p">],</span> <span class="n">animationSpec</span> <span class="p">=</span> <span class="n">TweenSpec</span><span class="p">(</span><span class="n">durationMillis</span> <span class="p">=</span> <span class="m">500</span><span class="p">))</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Canvas</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">fillMaxWidth</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">height</span><span class="p">(</span><span class="m">400.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">path</span><span class="p">.</span><span class="n">reset</span><span class="p">()</span>
</span><span class='line'>        <span class="n">animatableDataPoints</span><span class="p">.</span><span class="n">forEachIndexed</span> <span class="p">{</span> <span class="n">index</span><span class="p">,</span> <span class="n">animatable</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">x</span> <span class="p">=</span> <span class="p">(</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="p">/</span> <span class="p">(</span><span class="n">dataPoints</span><span class="p">.</span><span class="n">size</span> <span class="p">-</span> <span class="m">1</span><span class="p">))</span> <span class="p">*</span> <span class="n">index</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">y</span> <span class="p">=</span> <span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="p">-</span> <span class="p">(</span><span class="n">animatable</span><span class="p">.</span><span class="n">value</span> <span class="p">*</span> <span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">index</span> <span class="p">==</span> <span class="m">0</span><span class="p">)</span> <span class="n">path</span><span class="p">.</span><span class="n">moveTo</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="k">else</span> <span class="n">path</span><span class="p">.</span><span class="n">lineTo</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">drawPath</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">Color</span><span class="p">.</span><span class="n">Green</span><span class="p">,</span> <span class="n">style</span> <span class="p">=</span> <span class="n">Stroke</span><span class="p">(</span><span class="m">5f</span><span class="p">))</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">generateRandomDataPoints</span><span class="p">(</span><span class="n">size</span><span class="p">:</span> <span class="n">Int</span><span class="p">):</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Float</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">List</span><span class="p">(</span><span class="n">size</span><span class="p">)</span> <span class="p">{</span> <span class="n">Random</span><span class="p">.</span><span class="n">nextFloat</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>代码说明</h4>

<ul>
<li>AnimatedGraphExample 可组合项创建了一个可以更新折线图数据点的环境。</li>
<li>该图表绘制在 Canvas 中，其中 drawPath 方法使用来自 animatableDataPoints 的动画值。</li>
<li>对于图表中的每个数据点，我们需要计算其在画布上对应的 x（水平）和 y（垂直）位置。</li>
<li>x 计算 - x 位置是根据数据点的索引和画布的总宽度计算得出的。我们将数据点沿画布的宽度均匀分布。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">x</span> <span class="p">=</span> <span class="p">(</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="p">/</span> <span class="p">(</span><span class="n">dataPoints</span><span class="p">.</span><span class="n">size</span> <span class="p">-</span> <span class="m">1</span><span class="p">))</span> <span class="p">*</span> <span class="n">index</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>y 计算——y 位置是根据数据点（animatable.value）的值和画布的高度计算的。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">y</span> <span class="p">=</span> <span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="p">-</span> <span class="p">(</span><span class="n">animatable</span><span class="p">.</span><span class="n">value</span> <span class="p">*</span> <span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>路径从第一个数据点开始，然后使用 lineTo 绘制一条线到每个后续点，从而创建图形线。</li>
<li>路径基于数据点的动画值绘制，从而在数据发生变化时创建动画效果。</li>
</ul>


<h3>B) 多状态 UI 中的状态转换</h3>

<p>可以使用 Animatable 在多状态 UI 中实现状态转换，从而在不同 UI 状态之间进行动画处理。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">enum</span> <span class="k">class</span> <span class="nc">UIState</span> <span class="p">{</span> <span class="n">StateA</span><span class="p">,</span> <span class="n">StateB</span><span class="p">,</span> <span class="n">StateC</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">StateTransitionUI</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">currentState</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="n">UIState</span><span class="p">.</span><span class="n">StateA</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">fillMaxSize</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">getBackgroundColorForState</span><span class="p">(</span><span class="n">currentState</span><span class="p">)),</span>
</span><span class='line'>        <span class="n">contentAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">Center</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">AnimatedContent</span><span class="p">(</span><span class="n">currentState</span> <span class="p">=</span> <span class="n">currentState</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Button</span><span class="p">(</span>
</span><span class='line'>            <span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span> <span class="n">currentState</span> <span class="p">=</span> <span class="n">getNextState</span><span class="p">(</span><span class="n">currentState</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">align</span><span class="p">(</span><span class="n">Alignment</span><span class="p">.</span><span class="n">BottomCenter</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Next State&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">AnimatedContent</span><span class="p">(</span><span class="n">currentState</span><span class="p">:</span> <span class="n">UIState</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">AnimatedVisibility</span><span class="p">(</span>
</span><span class='line'>        <span class="n">visible</span> <span class="p">=</span> <span class="n">currentState</span> <span class="p">==</span> <span class="n">UIState</span><span class="p">.</span><span class="n">StateA</span><span class="p">,</span>
</span><span class='line'>        <span class="n">enter</span> <span class="p">=</span> <span class="n">fadeIn</span><span class="p">(</span><span class="n">animationSpec</span> <span class="p">=</span> <span class="n">tween</span><span class="p">(</span><span class="n">durationMillis</span> <span class="p">=</span> <span class="m">2000</span><span class="p">))</span> <span class="p">+</span> <span class="n">expandVertically</span><span class="p">(),</span>
</span><span class='line'>        <span class="n">exit</span> <span class="p">=</span> <span class="n">fadeOut</span><span class="p">(</span><span class="n">animationSpec</span> <span class="p">=</span> <span class="n">tween</span><span class="p">(</span><span class="n">durationMillis</span> <span class="p">=</span> <span class="m">2000</span><span class="p">))</span> <span class="p">+</span> <span class="n">shrinkVertically</span><span class="p">()</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Text</span><span class="p">(</span><span class="s">&quot;This is ${currentState.name}&quot;</span><span class="p">,</span> <span class="n">fontSize</span> <span class="p">=</span> <span class="m">32.</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 与B 和 C 的类似的代码块</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">getBackgroundColorForState</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="n">UIState</span><span class="p">):</span> <span class="n">Color</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">when</span> <span class="p">(</span><span class="n">state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">UIState</span><span class="p">.</span><span class="n">StateA</span> <span class="p">-&gt;</span> <span class="n">Color</span><span class="p">.</span><span class="n">Red</span>
</span><span class='line'>        <span class="n">UIState</span><span class="p">.</span><span class="n">StateB</span> <span class="p">-&gt;</span> <span class="n">Color</span><span class="p">.</span><span class="n">Green</span>
</span><span class='line'>        <span class="n">UIState</span><span class="p">.</span><span class="n">StateC</span> <span class="p">-&gt;</span> <span class="n">Color</span><span class="p">.</span><span class="n">Blue</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">getNextState</span><span class="p">(</span><span class="n">currentState</span><span class="p">:</span> <span class="n">UIState</span><span class="p">):</span> <span class="n">UIState</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">when</span> <span class="p">(</span><span class="n">currentState</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">UIState</span><span class="p">.</span><span class="n">StateA</span> <span class="p">-&gt;</span> <span class="n">UIState</span><span class="p">.</span><span class="n">StateB</span>
</span><span class='line'>        <span class="n">UIState</span><span class="p">.</span><span class="n">StateB</span> <span class="p">-&gt;</span> <span class="n">UIState</span><span class="p">.</span><span class="n">StateC</span>
</span><span class='line'>        <span class="n">UIState</span><span class="p">.</span><span class="n">StateC</span> <span class="p">-&gt;</span> <span class="n">UIState</span><span class="p">.</span><span class="n">StateA</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>代码说明</h4>

<ul>
<li>在此示例中，AnimatedVisibility 用于为每个状态下内容的出现和消失添加动画效果。这会在状态变化时添加平滑的过渡效果。</li>
<li>对于每个状态（StateA、StateB、StateC），都有一个 AnimatedVisibility 块，用于通过淡入淡出和展开/收缩动画控制其内容的可见性。</li>
<li>AnimatedVisibility 的进入和退出参数分别定义了内容可见或隐藏时的动画。</li>
</ul>


<h2>第 6 节 — 在 Compose中改变（Morphing）形状</h2>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*q82EIocVzR8XBMuG_14mdg.gif" alt="形状变形" /></p>

<p>动画形状之间的变换涉及这些形状的属性的插值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">ShapeMorphingAnimation</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">animationProgress</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">Animatable</span><span class="p">(</span><span class="m">0f</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">animationProgress</span><span class="p">.</span><span class="n">animateTo</span><span class="p">(</span>
</span><span class='line'>            <span class="n">targetValue</span> <span class="p">=</span> <span class="m">1f</span><span class="p">,</span>
</span><span class='line'>            <span class="n">animationSpec</span> <span class="p">=</span> <span class="n">infiniteRepeatable</span><span class="p">(</span>
</span><span class='line'>                <span class="n">animation</span> <span class="p">=</span> <span class="n">tween</span><span class="p">(</span><span class="m">2000</span><span class="p">,</span> <span class="n">easing</span> <span class="p">=</span> <span class="n">LinearOutSlowInEasing</span><span class="p">),</span>
</span><span class='line'>                <span class="n">repeatMode</span> <span class="p">=</span> <span class="n">RepeatMode</span><span class="p">.</span><span class="n">Reverse</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Canvas</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">40.</span><span class="n">dp</span><span class="p">).</span><span class="n">fillMaxSize</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">sizeValue</span> <span class="p">=</span> <span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">.</span><span class="n">coerceAtMost</span><span class="p">(</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">)</span> <span class="p">/</span> <span class="m">2</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">squareRect</span> <span class="p">=</span> <span class="n">Rect</span><span class="p">(</span><span class="n">center</span> <span class="p">=</span> <span class="n">center</span><span class="p">,</span> <span class="n">sizeValue</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="py">morphedPath</span> <span class="p">=</span> <span class="n">interpolateShapes</span><span class="p">(</span><span class="n">progress</span> <span class="p">=</span> <span class="n">animationProgress</span><span class="p">.</span><span class="n">value</span><span class="p">,</span> <span class="n">squareRect</span> <span class="p">=</span> <span class="n">squareRect</span><span class="p">)</span>
</span><span class='line'>        <span class="n">drawPath</span><span class="p">(</span><span class="n">morphedPath</span><span class="p">,</span> <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Blue</span><span class="p">,</span> <span class="n">style</span> <span class="p">=</span> <span class="n">Fill</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">interpolateShapes</span><span class="p">(</span><span class="n">progress</span><span class="p">:</span> <span class="n">Float</span><span class="p">,</span> <span class="n">squareRect</span><span class="p">:</span> <span class="n">Rect</span><span class="p">):</span> <span class="n">Path</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">path</span> <span class="p">=</span> <span class="n">Path</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">cornerRadius</span> <span class="p">=</span> <span class="n">CornerRadius</span><span class="p">(</span>
</span><span class='line'>        <span class="n">x</span> <span class="p">=</span> <span class="n">lerp</span><span class="p">(</span><span class="n">start</span> <span class="p">=</span> <span class="n">squareRect</span><span class="p">.</span><span class="n">width</span> <span class="p">/</span> <span class="m">2</span><span class="p">,</span> <span class="n">stop</span> <span class="p">=</span> <span class="m">0f</span><span class="p">,</span> <span class="n">fraction</span> <span class="p">=</span> <span class="n">progress</span><span class="p">),</span>
</span><span class='line'>        <span class="n">y</span> <span class="p">=</span> <span class="n">lerp</span><span class="p">(</span><span class="n">start</span> <span class="p">=</span> <span class="n">squareRect</span><span class="p">.</span><span class="n">height</span> <span class="p">/</span> <span class="m">2</span><span class="p">,</span> <span class="n">stop</span> <span class="p">=</span> <span class="m">0f</span><span class="p">,</span> <span class="n">fraction</span> <span class="p">=</span> <span class="n">progress</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">path</span><span class="p">.</span><span class="n">addRoundRect</span><span class="p">(</span>
</span><span class='line'>        <span class="n">roundRect</span> <span class="p">=</span> <span class="n">RoundRect</span><span class="p">(</span><span class="n">rect</span> <span class="p">=</span> <span class="n">squareRect</span><span class="p">,</span> <span class="n">cornerRadius</span> <span class="p">=</span> <span class="n">cornerRadius</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">path</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">lerp</span><span class="p">(</span><span class="n">start</span><span class="p">:</span> <span class="n">Float</span><span class="p">,</span> <span class="n">stop</span><span class="p">:</span> <span class="n">Float</span><span class="p">,</span> <span class="n">fraction</span><span class="p">:</span> <span class="n">Float</span><span class="p">):</span> <span class="n">Float</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="m">1</span> <span class="p">-</span> <span class="n">fraction</span><span class="p">)</span> <span class="p">*</span> <span class="n">start</span> <span class="p">+</span> <span class="n">fraction</span> <span class="p">*</span> <span class="n">stop</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>代码说明</h4>

<ul>
<li>ShapeMorphingAnimation 设置了一个无限动画，将 animationProgress 的值在 0 和 1 之间切换。</li>
<li>Canvas 可组合项用于绘制形状。在这里，我们根据画布大小定义正方形 (squareRect) 的尺寸。</li>
<li>interpolateShapes 接收当前动画进度和正方形的矩形，在圆形和正方形之间进行插值。它使用 lerp（线性插值）逐步调整圆角矩形的 cornerRadius，该矩形代表我们的变形形状。</li>
<li>当 progress 为 0 时，cornerRadius 是矩形大小的一半，使形状变为圆形。当 progress 为 1 时，cornerRadius 为 0，使形状变为正方形。</li>
</ul>


<h4>实际用例</h4>

<ul>
<li>加载和进度指示器——变形形状可用于创建更具吸引力的加载或进度指示器，以视觉上引人入胜的方式指示进度或加载状态。</li>
<li>UI 中的图标过渡——变形图标可用于根据用户操作提供视觉反馈。例如，点击播放按钮时会变形为暂停按钮，汉堡菜单图标会变形为后退箭头。</li>
<li>数据可视化——在复杂的数据可视化中，变形可以帮助在不同视图或数据状态之间过渡，使用户更容易跟踪和理解随时间或类别变化的变化。</li>
</ul>


<h2>想看雪花特效吗？</h2>

<p>我们将演示一个简单的粒子系统（Particle system）来创建雪花效果。</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*E26GhhxDZLGTpE8gMvJoHw.gif" alt="雪花特效" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">data</span> <span class="k">class</span> <span class="nc">Snowflake</span><span class="p">(</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">x</span><span class="p">:</span> <span class="n">Float</span><span class="p">,</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">y</span><span class="p">:</span> <span class="n">Float</span><span class="p">,</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">radius</span><span class="p">:</span> <span class="n">Float</span><span class="p">,</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">speed</span><span class="p">:</span> <span class="n">Float</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">SnowfallEffect</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">snowflakes</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">List</span><span class="p">(</span><span class="m">100</span><span class="p">)</span> <span class="p">{</span> <span class="n">generateRandomSnowflake</span><span class="p">()</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">infiniteTransition</span> <span class="p">=</span> <span class="n">rememberInfiniteTransition</span><span class="p">(</span><span class="n">label</span> <span class="p">=</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">offsetY</span> <span class="k">by</span> <span class="n">infiniteTransition</span><span class="p">.</span><span class="n">animateFloat</span><span class="p">(</span>
</span><span class='line'>        <span class="n">initialValue</span> <span class="p">=</span> <span class="m">0f</span><span class="p">,</span>
</span><span class='line'>        <span class="n">targetValue</span> <span class="p">=</span> <span class="m">1000f</span><span class="p">,</span>
</span><span class='line'>        <span class="n">animationSpec</span> <span class="p">=</span> <span class="n">infiniteRepeatable</span><span class="p">(</span>
</span><span class='line'>            <span class="n">animation</span> <span class="p">=</span> <span class="n">tween</span><span class="p">(</span><span class="n">durationMillis</span> <span class="p">=</span> <span class="m">5000</span><span class="p">,</span> <span class="n">easing</span> <span class="p">=</span> <span class="n">LinearEasing</span><span class="p">),</span>
</span><span class='line'>            <span class="n">repeatMode</span> <span class="p">=</span> <span class="n">RepeatMode</span><span class="p">.</span><span class="n">Restart</span>
</span><span class='line'>        <span class="p">),</span> <span class="n">label</span> <span class="p">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Canvas</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">().</span><span class="n">background</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">Black</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">snowflakes</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span> <span class="n">snowflake</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="n">drawSnowflake</span><span class="p">(</span><span class="n">snowflake</span><span class="p">,</span> <span class="n">offsetY</span> <span class="p">%</span> <span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">generateRandomSnowflake</span><span class="p">():</span> <span class="n">Snowflake</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Snowflake</span><span class="p">(</span>
</span><span class='line'>        <span class="n">x</span> <span class="p">=</span> <span class="n">Random</span><span class="p">.</span><span class="n">nextFloat</span><span class="p">(),</span>
</span><span class='line'>        <span class="n">y</span> <span class="p">=</span> <span class="n">Random</span><span class="p">.</span><span class="n">nextFloat</span><span class="p">()</span> <span class="p">*</span> <span class="m">1000f</span><span class="p">,</span>
</span><span class='line'>        <span class="n">radius</span> <span class="p">=</span> <span class="n">Random</span><span class="p">.</span><span class="n">nextFloat</span><span class="p">()</span> <span class="p">*</span> <span class="m">2f</span> <span class="p">+</span> <span class="m">2f</span><span class="p">,</span> <span class="c1">// Snowflake size</span>
</span><span class='line'>        <span class="n">speed</span> <span class="p">=</span> <span class="n">Random</span><span class="p">.</span><span class="n">nextFloat</span><span class="p">()</span> <span class="p">*</span> <span class="m">1.2f</span> <span class="p">+</span> <span class="m">1f</span>  <span class="c1">// Falling speed</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">DrawScope</span><span class="p">.</span><span class="n">drawSnowflake</span><span class="p">(</span><span class="n">snowflake</span><span class="p">:</span> <span class="n">Snowflake</span><span class="p">,</span> <span class="n">offsetY</span><span class="p">:</span> <span class="n">Float</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">newY</span> <span class="p">=</span> <span class="p">(</span><span class="n">snowflake</span><span class="p">.</span><span class="n">y</span> <span class="p">+</span> <span class="n">offsetY</span> <span class="p">*</span> <span class="n">snowflake</span><span class="p">.</span><span class="n">speed</span><span class="p">)</span> <span class="p">%</span> <span class="n">size</span><span class="p">.</span><span class="n">height</span>
</span><span class='line'>    <span class="n">drawCircle</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">White</span><span class="p">,</span> <span class="n">radius</span> <span class="p">=</span> <span class="n">snowflake</span><span class="p">.</span><span class="n">radius</span><span class="p">,</span> <span class="n">center</span> <span class="p">=</span> <span class="n">Offset</span><span class="p">(</span><span class="n">snowflake</span><span class="p">.</span><span class="n">x</span> <span class="p">*</span> <span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">newY</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>代码说明</h4>

<ul>
<li>SnowfallEffect 设置了一个包含多个雪花（Snowflake 对象）的粒子系统。</li>
<li>每个雪花都具有位置 (x, y)、半径（大小）和速度等属性。</li>
<li>rememberInfiniteTransition 和 animateFloat 用于创建连续的垂直运动效果，模拟降雪。</li>
<li>Canvas 可组合函数用于绘制每片雪花。drawSnowflake 函数根据每片雪花的速度和动画的 offsetY 计算其新的位置。</li>
<li>雪花从底部落下后会重新出现在顶部，从而产生循环降雪效果。</li>
</ul>


<h2>总结</h2>

<p>随着我们对 Jetpack Compose 动画的探索逐渐深入，我们清楚地认识到，动画不仅仅是视觉上的点缀。它们是打造引人入胜、直观且赏心悦目的用户体验的关键工具。</p>

<h3>拥抱互动性</h3>

<p>从动态游戏角色运动到交互式时间轴，我们见证了动画如何让用户交互更具吸引力和信息量。</p>

<h3>打造逼真的体验</h3>

<p>雪花飘落效果和变形形状展现了该工具包将真实感和流畅性带入数字世界的能力。这些动画有助于打造与用户产生共鸣的沉浸式体验。</p>

<h3>简化复杂性</h3>

<p>无论是编排多个元素还是制作状态转换动画，其简单易用性都令人瞩目。</p>

<h2>结束语</h2>

<p>如果你喜欢本文，请随时留下宝贵的反馈或赞赏。我一直期待与其他开发者一起学习、合作、共同成长。</p>

<p>如有任何疑问，请随时给我留言！</p>

<p>在 Medium 上关注我，获取更多文章 — <a href="https://medium.com/@pherwani37">Medium 个人资料</a>（链接：<a href="https://medium.com/@pherwani37%EF%BC%89">https://medium.com/@pherwani37%EF%BC%89</a></p>

<p>在<a href="https://linkedin.com/in/nirbhaypherwani">LinkedIn</a>（链接：<a href="https://linkedin.com/in/nirbhaypherwani%EF%BC%89%E5%92%8C">https://linkedin.com/in/nirbhaypherwani%EF%BC%89%E5%92%8C</a><a href="https://twitter.com/nirbhayph">Twitter</a>（链接：<a href="https://twitter.com/nirbhayph%EF%BC%89%E4%B8%8A%E4%B8%8E%E6%88%91%E8%81%94%E7%B3%BB%EF%BC%8C%E4%BB%A5%E4%BE%BF%E6%88%91%E4%BB%AC%E8%BF%9B%E8%A1%8C%E5%90%88%E4%BD%9C%E3%80%82">https://twitter.com/nirbhayph%EF%BC%89%E4%B8%8A%E4%B8%8E%E6%88%91%E8%81%94%E7%B3%BB%EF%BC%8C%E4%BB%A5%E4%BE%BF%E6%88%91%E4%BB%AC%E8%BF%9B%E8%A1%8C%E5%90%88%E4%BD%9C%E3%80%82</a></p>

<p>祝你动画制作愉快！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[理解Jetpack Compose中副作用函数的内部原理]]></title>
    <link href="https://alexhilton.github.io/blog/2025/05/01/understanding-side-effect-handlers/"/>
    <updated>2025-05-01T11:05:24+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/05/01/understanding-side-effect-handlers</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自「Understanding the Internals of Side-Effect Handlers in Jetpack Compose」，原文链接<a href="https://proandroiddev.com/understanding-the-internals-of-side-effect-handlers-in-jetpack-compose-d55fbf914fde">https://proandroiddev.com/understanding-the-internals-of-side-effect-handlers-in-jetpack-compose-d55fbf914fde</a>，由Jaewoong Eum发布于2025年4月10日。</p></blockquote>

<p><a href="https://alexhilton.github.io/blog/2025/05/01/understanding-side-effect-handlers/"><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*GNgL_XzYpw16hn6BxocOww.jpeg" title="auto auto" ></a></p>

<!-- more -->


<p>近年来，Jetpack Compose生态呈指数级增长，现已被广泛用于构建 Android 应用的产品级UI。现在，我们可以说 Jetpack Compose 代表了 Android UI 开发的未来。</p>

<p>Compose 最大的优势之一是其声明式（declarative）方法——它允许开发者描述 UI 应该显示的内容，而框架则负责处理 UI 在底层状态发生变化时应如何更新。这种模型将焦点从命令式（imperative）UI 转移到更直观、更具响应式的思维方式。</p>

<p>然而，尽管声明式 UI有很多优势，但妥善管理副作用也至关重要。可组合函数可能会因各种原因（例如状态或参数的变化）而被重组，如果副作用处理不当，应用的行为可能会变得不可预测。</p>

<p>在本文中，你将探索 Jetpack Compose 默认提供的副作用处理 API。你还将研究它们的内部工作流程，以更好地了解 Compose 如何在底层管理这些操作。</p>

<h2>副作用（Side Effect）是啥？</h2>

<p>副作用（Side Effect）是指发生在可组合函数作用域之外的应用状态变化。在 Jetpack Compose 中，由于状态变化、参数更新或其他事件触发的重组，可组合函数可能会频繁且不可预测地重新执行（译注：也就是说Compose的重组是不受开发者控制的）。因此，你不能假设一个可组合函数只会被调用一次。</p>

<p>换句话说，在可组合函数内部直接调用业务逻辑（例如从网络获取数据或查询数据库）是有风险的。由于潜在的重组，这些操作可能会无意中运行多次，从而导致错误或性能问题。</p>

<p>为了解决这个问题，Jetpack Compose 提供了一组专门用于以安全可控的方式管理副作用的API。这些 API包括 LaunchedEffect 、 DisposableEffect 、 SideEffect 、 rememberCoroutineScope 等等。在本文中，你将重点介绍三个最常用的处理程序—— LaunchedEffect 、 DisposableEffect 和 SideEffect ——并仔细研究它们的内部实现，以便更好地理解它们的底层工作原理。</p>

<h2>LaunchedEffect</h2>

<p>LaunchedEffect是Jetpack Compose中最常用的副作用处理 API之一。它允许你以可组合生命周期感知的方式（而非 Android 生命周期）启动协程，并确保除非指定的关键参数（keys）之一发生变化，否则不会重新执行提供的代码块。这种行为使得 LaunchedEffect 特别适合执行与特定状态相关的一次性事件，例如显示 Toast或Snackbar、记录事件或触发业务逻辑，正如你在 Now in Android 项目中的示例代码中所见：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">snackbarHostState</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">SnackbarHostState</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'><span class="k">val</span> <span class="py">isOffline</span> <span class="k">by</span> <span class="n">appState</span><span class="p">.</span><span class="n">isOffline</span><span class="p">.</span><span class="n">collectAsStateWithLifecycle</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 如果用户未连接到互联网，则显示一个Snackbar来通知他们。</span>
</span><span class='line'><span class="k">val</span> <span class="py">notConnectedMessage</span> <span class="p">=</span> <span class="n">stringResource</span><span class="p">(</span><span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">not_connected</span><span class="p">)</span>
</span><span class='line'><span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">isOffline</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">isOffline</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">snackbarHostState</span><span class="p">.</span><span class="n">showSnackbar</span><span class="p">(</span>
</span><span class='line'>            <span class="n">message</span> <span class="p">=</span> <span class="n">notConnectedMessage</span><span class="p">,</span>
</span><span class='line'>            <span class="n">duration</span> <span class="p">=</span> <span class="n">Indefinite</span><span class="p">,</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要注意的是，LaunchedEffect 会在底层创建一个新的协程作用域。这意味着它主要用于在可组合函数作用域内执行基于协程的任务，并在可组合函数离开组合时自动取消其协程。因此，LaunchedEffect 最适合用于与协程相关的操作，例如数据获取、延迟效果或事件处理，而不是简单地执行非暂停函数。现在，让我们深入探究一下，以更好地理解 LaunchedEffect 的内部工作原理。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">LaunchedEffect</span><span class="p">(</span>
</span><span class='line'>    <span class="n">key1</span><span class="p">:</span> <span class="n">Any</span><span class="p">?,</span>
</span><span class='line'>    <span class="n">block</span><span class="p">:</span> <span class="n">suspend</span> <span class="n">CoroutineScope</span><span class="p">.()</span> <span class="p">-&gt;</span> <span class="n">Unit</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">applyContext</span> <span class="p">=</span> <span class="n">currentComposer</span><span class="p">.</span><span class="n">applyCoroutineContext</span>
</span><span class='line'>    <span class="n">remember</span><span class="p">(</span><span class="n">key1</span><span class="p">)</span> <span class="p">{</span> <span class="n">LaunchedEffectImpl</span><span class="p">(</span><span class="n">applyContext</span><span class="p">,</span> <span class="n">block</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">internal</span> <span class="k">class</span> <span class="nc">LaunchedEffectImpl</span><span class="p">(</span>
</span><span class='line'>    <span class="n">parentCoroutineContext</span><span class="p">:</span> <span class="n">CoroutineContext</span><span class="p">,</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">task</span><span class="p">:</span> <span class="n">suspend</span> <span class="n">CoroutineScope</span><span class="p">.()</span> <span class="p">-&gt;</span> <span class="n">Unit</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">RememberObserver</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">scope</span> <span class="p">=</span> <span class="n">CoroutineScope</span><span class="p">(</span><span class="n">parentCoroutineContext</span><span class="p">)</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">var</span> <span class="py">job</span><span class="p">:</span> <span class="n">Job</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onRemembered</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 这不应该发生，但为了安全起见留在这里</span>
</span><span class='line'>        <span class="n">job</span><span class="o">?.</span><span class="n">cancel</span><span class="p">(</span><span class="s">&quot;Old job was still running!&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">job</span> <span class="p">=</span> <span class="n">scope</span><span class="p">.</span><span class="n">launch</span><span class="p">(</span><span class="n">block</span> <span class="p">=</span> <span class="n">task</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onForgotten</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">job</span><span class="o">?.</span><span class="n">cancel</span><span class="p">(</span><span class="n">LeftCompositionCancellationException</span><span class="p">())</span>
</span><span class='line'>        <span class="n">job</span> <span class="p">=</span> <span class="k">null</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onAbandoned</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">job</span><span class="o">?.</span><span class="n">cancel</span><span class="p">(</span><span class="n">LeftCompositionCancellationException</span><span class="p">())</span>
</span><span class='line'>        <span class="n">job</span> <span class="p">=</span> <span class="k">null</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>正如你在LaunchedEffect的内部实现中所看到的，它会创建LaunchedEffectImpl并将其存储在内存中，并将给定的键值作为参数，以便在键发生变化时重新创建 LaunchedEffectImpl 实例。</p>

<p>如果你查看内部 LaunchedEffectImpl 类，你会发现它实现了RememberObserver接口，并首先创建一个新的 CoroutineScope。然后，当可组合项进入组合阶段时，提供的 lambda 会在此范围内启动。当可组合项离开组合阶段时，协程范围会自动取消，从而确保资源得到正确清理，并避免潜在的内存泄漏或性能问题。</p>

<p>话虽如此，如果你的任务不涉及任何与协程相关的操作，而只是需要在键发生变化时重新执行，那么使用 LaunchedEffect 可能略显多余。虽然创建协程作用域的开销通常很小，但在实际不使用协程的情况下，它仍然是不必要的。在这种情况下，你可以考虑使用更轻量级的副作用处理library (<a href="https://github.com/skydoves/compose-effects?tab=readme-ov-file#rememberedeffect">RememberedEffect</a>)，它更适合非挂起（non-suspending）任务。</p>

<p>另一个常见的误解是LaunchedEffect能够感知 Android生命周期——但事实并非如此。从内部实现可以看出，LaunchedEffect的作用域完全限定于Jetpack Compose组合生命周期，与 Android组件（Activity和Fragment）的生命周期没有直接关联。</p>

<p>换句话说，它本身并不了解任何有关 Activity、Fragment 或 onStop()或 onDestroy()等生命周期事件的信息。这意味着，如果你在 LaunchedEffect 中启动一个协程，并且 Android 组件（例如 Activity）在可组合项未离开组合的情况下被停止或销毁，则该协程可能会继续运行，除非它明确与Android组件生命周期绑定。</p>

<h2>DisposableEffect</h2>

<p>DisposableEffect是Jetpack Compose 运行时提供的另一个副作用处理API。它允许你与可组合项的生命周期同步执行设置和清理逻辑。与LaunchedEffect不同，它提供了一个 DisposableEffectScope 作为接收器（receiver），使你能够定义一个清理代码块（clean-up code block），该代码块在可组合项离开组合时自动运行。这使得它非常适合管理需要显式卸载的外部资源，例如监听器、回调或广播接收器。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">lifecycleOwner</span> <span class="p">=</span> <span class="n">LocalLifecycleOwner</span><span class="p">.</span><span class="n">current</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 如果 `lifecycleOwner` 发生变化，则释放并重置效果</span>
</span><span class='line'><span class="n">DisposableEffect</span><span class="p">(</span><span class="n">lifecycleOwner</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 创建一个观察者，触发我们记住的回调以发送分析事件</span>
</span><span class='line'>  <span class="k">val</span> <span class="py">observer</span> <span class="p">=</span> <span class="n">LifecycleEventObserver</span> <span class="p">{</span> <span class="n">_</span><span class="p">,</span> <span class="n">event</span> <span class="p">-&gt;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">event</span> <span class="p">==</span> <span class="n">Lifecycle</span><span class="p">.</span><span class="n">Event</span><span class="p">.</span><span class="n">ON_RESUME</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// do something</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">event</span> <span class="p">==</span> <span class="n">Lifecycle</span><span class="p">.</span><span class="n">Event</span><span class="p">.</span><span class="n">ON_PAUSE</span> <span class="p">||</span> <span class="n">event</span> <span class="p">==</span> <span class="n">Lifecycle</span><span class="p">.</span><span class="n">Event</span><span class="p">.</span><span class="n">ON_STOP</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// do something</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Add the observer to the lifecycle</span>
</span><span class='line'>  <span class="n">lifecycleOwner</span><span class="p">.</span><span class="n">lifecycle</span><span class="p">.</span><span class="n">addObserver</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 当效果离开 Composition 时，移除观察者</span>
</span><span class='line'>  <span class="n">onDispose</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">lifecycleOwner</span><span class="p">.</span><span class="n">lifecycle</span><span class="p">.</span><span class="n">removeObserver</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的示例使用 DisposableEffect 将 LifecycleEventObserver注册到lifecycleOwner，使其能够观察生命周期变化并根据当前状态执行特定逻辑。观察者会在onDispose块内被安全地移除，确保在可组合项离开组合时进行适当的清理。现在，让我们深入了解DisposableEffect的内部工作原理。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">DisposableEffect</span><span class="p">(</span>
</span><span class='line'>    <span class="n">key1</span><span class="p">:</span> <span class="n">Any</span><span class="p">?,</span>
</span><span class='line'>    <span class="n">effect</span><span class="p">:</span> <span class="n">DisposableEffectScope</span><span class="p">.()</span> <span class="p">-&gt;</span> <span class="n">DisposableEffectResult</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">remember</span><span class="p">(</span><span class="n">key1</span><span class="p">)</span> <span class="p">{</span> <span class="n">DisposableEffectImpl</span><span class="p">(</span><span class="n">effect</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">class</span> <span class="nc">DisposableEffectImpl</span><span class="p">(</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">effect</span><span class="p">:</span> <span class="n">DisposableEffectScope</span><span class="p">.()</span> <span class="p">-&gt;</span> <span class="n">DisposableEffectResult</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">RememberObserver</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">var</span> <span class="py">onDispose</span><span class="p">:</span> <span class="n">DisposableEffectResult</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onRemembered</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">onDispose</span> <span class="p">=</span> <span class="n">InternalDisposableEffectScope</span><span class="p">.</span><span class="n">effect</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onForgotten</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">onDispose</span><span class="o">?.</span><span class="n">dispose</span><span class="p">()</span>
</span><span class='line'>        <span class="n">onDispose</span> <span class="p">=</span> <span class="k">null</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onAbandoned</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 由于未调用 [onRemembered]，因此无需执行任何操作。</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">DisposableEffectScope</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">inline</span> <span class="k">fun</span> <span class="nf">onDispose</span><span class="p">(</span>
</span><span class='line'>        <span class="n">crossinline</span> <span class="n">onDisposeEffect</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span>
</span><span class='line'>    <span class="p">):</span> <span class="n">DisposableEffectResult</span> <span class="p">=</span> <span class="k">object</span> <span class="err">: </span><span class="nc">DisposableEffectResult</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">override</span> <span class="k">fun</span> <span class="nf">dispose</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">onDisposeEffect</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如 DisposableEffect 的内部实现所示，它会创建一个 DisposableEffectImpl 实例，并使用提供的键将其存储在内存中。
每当键发生变化时，都会创建一个新的DisposableEffectImpl 实例，以便相应地重新执行该效果。</p>

<p>DisposableEffectImpl类实现了 RememberObserver 接口，并初始创建一个 DisposableEffectResult。当可组合项进入组合阶段时，效果 lambda 会在 DisposableEffectScope 中启动。退出组合时，会自动调用 DisposableEffectResult的onDispose 函数，以确保在可组合项完全从组合中移除之前正确清理资源并防止内存泄漏或性能问题。</p>

<h2>SideEffect</h2>

<p>Jetpack Compose中的SideEffect API 用于安全地将可组合项内发生的状态变化通知给外部非 Compose 管理的对象。它确保效果在重组成功后运行，使其成为触发依赖于界面最终稳定状态的副作用的理想选择。</p>

<p>使用 SideEffect可以避免在重组阶段执行的操作可能会被丢弃的风险，如果你在未采取此保护措施的情况下直接在可组合项中编写效果，则可能会发生这种情况。因此，当你需要将 Compose 状态与外部系统（例如日志记录工具、分析工具或命令式界面组件）同步时，SideEffect 至关重要，如下例所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">rememberFirebaseAnalytics</span><span class="p">(</span><span class="n">user</span><span class="p">:</span> <span class="n">User</span><span class="p">):</span> <span class="n">FirebaseAnalytics</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">analytics</span><span class="p">:</span> <span class="n">FirebaseAnalytics</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">FirebaseAnalytics</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 每次成功组合后，使用当前用户的用户类型更新 FirebaseAnalytics，</span>
</span><span class='line'>    <span class="c1">// 确保将来的分析事件已附加此元数据</span>
</span><span class='line'>    <span class="n">SideEffect</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">analytics</span><span class="p">.</span><span class="n">setUserProperty</span><span class="p">(</span><span class="s">&quot;userType&quot;</span><span class="p">,</span> <span class="n">user</span><span class="p">.</span><span class="n">userType</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">analytics</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在，让我们探索一下 SideEffect API 的底层工作原理。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">SideEffect</span><span class="p">(</span>
</span><span class='line'>    <span class="n">effect</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">currentComposer</span><span class="p">.</span><span class="n">recordSideEffect</span><span class="p">(</span><span class="n">effect</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** 当我们应用组合变化时安排运行副作用。 */</span>
</span><span class='line'><span class="k">override</span> <span class="k">fun</span> <span class="nf">recordSideEffect</span><span class="p">(</span><span class="n">effect</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">changeListWriter</span><span class="p">.</span><span class="n">sideEffect</span><span class="p">(</span><span class="n">effect</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>乍一看，上面的代码可能看似简单，但实际上却难以完全理解，这很正常。这是因为 SideEffect API与 Compose运行时底层内部机制紧密相关，尤其是 ChangeList，它用于跟踪和管理用于更新渲染UI的状态驱动变更列表。</p>

<p>根据 Compose源代码中的内部注释，SideEffect API的表示如下：</p>

<blockquote><p>安排效果在当前合成成功完成并应用更改时运行。SideEffect 可用于将副作用应用于合成管理的、未受快照支持的对象，以便在当前合成操作失败时避免这些对象处于不一致的状态。</p>

<p>副作用将始终在合成的应用调度程序上运行，并且应用器永远不会与自身、彼此并发运行，也不会将更改应用于合成树或运行 RememberObserver 事件回调。SideEffect 始终在 RememberObserver 事件回调之后运行。</p></blockquote>

<p>因此，SideEffect API 会在每次成功重组后运行。</p>

<h2>结论</h2>

<p>在本文中，你探索了 Jetpack Compose 中常用的三个主要副作用处理API。由于声明式UI（declarative UI）的特性，状态会影响运行时行为的诸多方面，因此正确地使用副作用函数对于确保任务执行的正确性和可预测性至关重要。</p>

<p>本主题最初在<a href="https://github.com/doveletter/">Dove Letter</a>（译注：链接是<a href="https://github.com/doveletter/%EF%BC%89%E4%B8%AD%E4%BB%8B%E7%BB%8D%EF%BC%8C%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E7%A7%81%E4%BA%BA%E4%BB%A3%E7%A0%81%E5%BA%93%EF%BC%8C%E6%8F%90%E4%BE%9B%E6%9C%89%E5%85%B3">https://github.com/doveletter/%EF%BC%89%E4%B8%AD%E4%BB%8B%E7%BB%8D%EF%BC%8C%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E7%A7%81%E4%BA%BA%E4%BB%A3%E7%A0%81%E5%BA%93%EF%BC%8C%E6%8F%90%E4%BE%9B%E6%9C%89%E5%85%B3</a> Android 和 Kotlin 的每日见解，涵盖 Compose、架构、行业面试问题和实用代码技巧等主题。自上线以来的短短 37 周内，Dove Letter 已拥有超过 700 名个人订阅者和 20 名企业/终身订阅者。如果你渴望深入了解 Android、Kotlin 和 Compose，请务必查看<a href="https://medium.com/@skydoves/learn-kotlin-and-android-with-dove-letter-26265da11903">“通过 Dove Letter 学习 Kotlin 和 Android”</a>（译注：链接是<a href="https://medium.com/@skydoves/learn-kotlin-and-android-with-dove-letter-26265da11903%EF%BC%89%E3%80%82">https://medium.com/@skydoves/learn-kotlin-and-android-with-dove-letter-26265da11903%EF%BC%89%E3%80%82</a></p>
]]></content>
  </entry>
  
</feed>
