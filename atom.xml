<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[稀有猿诉]]></title>
  <link href="http://toughcoder.net/atom.xml" rel="self"/>
  <link href="http://toughcoder.net/"/>
  <updated>2024-01-20T11:39:42+08:00</updated>
  <id>http://toughcoder.net/</id>
  <author>
    <name><![CDATA[Alex Hilton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Kotlin进阶之协程从上车到起飞]]></title>
    <link href="http://toughcoder.net/blog/2024/01/14/kotlin-coroutines-an-advanced-guide/"/>
    <updated>2024-01-14T21:17:20+08:00</updated>
    <id>http://toughcoder.net/blog/2024/01/14/kotlin-coroutines-an-advanced-guide</id>
    <content type="html"><![CDATA[<p>通过<a href="http://toughcoder.net/blog/2024/01/11/kotlin-coroutine-made-easy/">前面的一篇文章</a>我们理解了协程的基本概念，学会协程的基本使用方法，算是正式入门了，接下来就是要深入的学习技术细节和高级使用方法，以期完全掌握Kotlin协程并能熟练的正确的使用协程，发挥出协程应有的并发编程能力。</p>

<p><a href="http://toughcoder.net/blog/2024/01/14/kotlin-coroutines-an-advanced-guide/"><img src="https://repository-images.githubusercontent.com/61722736/08e87280-62dc-11ea-8fed-a8a4a4ea865d" title="auto auto" ></a></p>

<!-- more -->


<p>本篇为协程三步曲中的第二篇：</p>

<ul>
<li>初级篇：<a href="http://toughcoder.net/blog/2024/01/11/kotlin-coroutine-made-easy/">Kotlin进阶之协程从入门到放弃</a></li>
<li>高级篇：<a href="http://toughcoder.net/blog/2024/01/14/kotlin-coroutines-an-advanced-guide/">Kotlin进阶之协程从上车到起飞</a></li>
<li>终极篇：<a href="http://toughcoder.net/blog/2023/01/27/understanding-coroutines/">Kotlin进阶之协程从专家到出家</a></li>
</ul>


<p>本篇将细致的讨论协程中的一些重要的话题，以期更好的理解协程的原理和正确的使用协程，将从协程运行的上下文开始。</p>

<h2>深究协程上下文</h2>

<p><img src="https://files.betamax.kodeco.com/attachments/videos/3493/c049283d-193b-43b9-b796-0aafe8e9c804.png" alt="" /></p>

<p>创建协程的方法launch/async一共有3个参数，除了最后一个是协程的代码块以外，另外两个参数都是用来控制协程的，如协程上下文是用以控制协程运行环境的，包括在什么线程中去运行，句柄和树形关系以及何时切换线程，通过传递给launch/async的参数CoroutineContext。以及CoroutineStart就可以控制协程的运行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">fun</span> <span class="nf">CoroutineScope</span><span class="p">.</span><span class="n">launch</span><span class="p">(</span>
</span><span class='line'>    <span class="n">context</span><span class="p">:</span> <span class="n">CoroutineContext</span> <span class="p">=</span> <span class="n">EmptyCoroutineContext</span><span class="p">,</span>
</span><span class='line'>    <span class="n">start</span><span class="p">:</span> <span class="n">CoroutineStart</span> <span class="p">=</span> <span class="n">CoroutineStart</span><span class="p">.</span><span class="n">DEFAULT</span><span class="p">,</span>
</span><span class='line'>    <span class="n">block</span><span class="p">:</span> <span class="n">suspend</span> <span class="n">CoroutineScope</span><span class="p">.()</span> <span class="p">-&gt;</span> <span class="n">Unit</span>
</span><span class='line'><span class="p">):</span> <span class="n">Job</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="err">&lt;</span><span class="nf">T</span><span class="p">&gt;</span> <span class="n">CoroutineScope</span><span class="p">.</span><span class="n">async</span><span class="p">(</span>
</span><span class='line'>    <span class="n">context</span><span class="p">:</span> <span class="n">CoroutineContext</span> <span class="p">=</span> <span class="n">EmptyCoroutineContext</span><span class="p">,</span>
</span><span class='line'>    <span class="n">start</span><span class="p">:</span> <span class="n">CoroutineStart</span> <span class="p">=</span> <span class="n">CoroutineStart</span><span class="p">.</span><span class="n">DEFAULT</span><span class="p">,</span>
</span><span class='line'>    <span class="n">block</span><span class="p">:</span> <span class="n">suspend</span> <span class="n">CoroutineScope</span><span class="p">.()</span> <span class="p">-&gt;</span> <span class="n">T</span>
</span><span class='line'><span class="p">):</span> <span class="n">Deferred</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先我们来看一下协程上下文对象CoroutineContext。</p>

<h3>CoroutineContext</h3>

<p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines/-coroutine-context/">CoroutineContext</a>是一个集合，具体元素类型是<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines/-coroutine-context/-element/">Element</a>，Element重载了操作符，可以通过<strong>+</strong>来形成集合。CoroutineContext是类似于Map的，每个Element有自己的Key，这是为了保证每个CoroutineContext对象中每个Key只能有一个Element对象。可以把CoroutineContext看成是Map，因此可以使用<strong>[]</strong>来获取Key对应的Element，如取Job，可以用context[Job]，取名字时可以用context[CoroutineName]等。</p>

<p>具体Element有四种：</p>

<ul>
<li><a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/">Job</a>：协程的句柄，或者说唯一标识，用以具体控制每个协程的（cancel和join等），具有树形关系</li>
<li><a href="">CoroutineDispatcher</a>：用以指定协程的运行线程</li>
<li><a href="">CoroutineName</a>：给协程取个名字，方便调试</li>
<li><a href="">CoroutineExceptionHandler</a>：指定协程的异常处理器，用以处理未被捕获的异常</li>
</ul>


<p>这里主要介绍一下Job，CoroutineDispatcher和Name，至于ExceptionHandler留到后面讲异常处理时再细讲。</p>

<h4><a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/">Job</a></h4>

<p>用launch创建一个协程时也会返回一个Job对象，它就是新创建的协程的句柄，但更好的方式是通过launch的参数，在上下文中指定一个Job对象作为协程的句柄。前面了讲过了，Job用以控制协程的，更为重要的是它能维持树形关系，父协程是可以控制子协程的，像cancel是会传导到所有的子协程的。自己创建Job对象就可以自由指定父协程，而不是默认的从CoroutineScope中继承。</p>

<p>另外，Job也会影响Exception handling，会在后面异常处理部分详细的讲。</p>

<h4><a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-dispatcher/">CoroutineDispatcher</a></h4>

<p>这个是在平时用的最多的，因为协程是一种并发编程范式，而要想真并发，必然要涉及线程的切换，不可能指望着主线程把所有的事情都干了，而Dispatcher的作用就是用于主动的指定协程的运行线程。与Java中的Executor，和RxJava中的Schedulers作用是一样的。有一些预定义好的Dispatcher可以用，它们定义在<a href="">Dispatchers</a>里面：</p>

<ul>
<li><a href="">Main</a> 主线程，主函数所在的主线程，以及像UI框架（如Swing和Android）等的UI线程（主线程）</li>
<li><a href="">IO</a> 适合I/O密集型的协程，如网络操作（上传/下载），文件读写，数据库读写等等。它背后是线程池，线程的数量是比较多的。因为I/O虽然耗时，但一般都耗在等待上面，所以线程的数量可以多一些。</li>
<li><a href="">Default</a> 适合CPU密集型的协程，比如计算类型的，图形的计算，矩阵计算，多媒体文件的编解码，压缩解压缩，或者算法时间复杂度较高的任务等等。也是线程池，线程的数量一般是CPU的核数。这个线程池的数量很少，因为这是CPU密集型的任务，需要大量占用着CPU，使CPU一直处于忙碌状态，因此线程数量即使多了，也是没有用处的，因为多创建的线程根本得不到操作系统的调试，没有多余的CPU给线程跑。</li>
<li><a href="">Unconfied</a> 未给协程指定线程，协程会在当前的线程中执行（也就是调用者的线程），直到协程被挂起(suspended)。挂起后再继续(resume)时，由在恢复的线程中继续执行。很混乱吧，是的并发虽然讲究效率，虽然线程/协程啥时候进行，挂起并不能直接完全控制，但是我们仍希望并发要有秩序和确定性。一定要为新创建的协程指定其线程运行环境，因此，<strong>Unconfined不应该被使用</strong>。</li>
</ul>


<p>一般情况下，框架预定义好了的这些dispatcher已经够用了。但如果真的不够用，也可以自定义dispatcher，用扩展函数<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/as-coroutine-dispatcher.html">asCoroutineDispatcher</a>可以非常方便的把Java中的线程池Executors转化为dispatcher：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">dispatcher</span> <span class="p">=</span> <span class="n">Executors</span><span class="p">.</span><span class="n">newSingleThreadExecutor</span><span class="p">().</span><span class="n">asCoroutineDispatcher</span>
</span><span class='line'><span class="n">launch</span><span class="p">(</span><span class="n">dispatcher</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">delay</span><span class="p">(</span><span class="m">1000</span><span class="p">)</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Single thread dispatcher&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>CoroutineName</h4>

<p><a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-name/">CoroutineName</a>是比较简单的结构，的构造方法可以传一个字符串用以指定协程的名字。协程的名字只有调试的意义，对于代码的运行没有任何影响。比如在调试的时候，或者在性能分析Profiling的时候，可以用名字更加方便的区分不同的协程，进而缩小调试的范围。</p>

<h3>CoroutineStart</h3>

<p><a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-start/">CoroutineStart</a>，是一个枚举类型，用以控制协程的启动方式，具体有四种模式类型：</p>

<ul>
<li><a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-start/-d-e-f-a-u-l-t/">DEFAULT</a> 默认，如果未指定这个参数 时也是默认模式，根据指定的上下文环境，立即调度此协程</li>
<li><a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-start/-l-a-z-y/">LAZY</a> 只有当需要此协程时才调度它。比较有意思，具体啥是<strong>需要</strong>呢，也就是当await其结果时，或者需要此协程去<strong>生产事件(produce)</strong>或者<strong>消费事件(consume)</strong>时。</li>
<li><a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-start/-a-t-o-m-i-c/">ATOMIC</a> 以原子化的方式来调度此协程，也就是以不可取消的方式来调度协程。也就是说在协程代码块执行之前是不可取消的。</li>
<li><a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-start/-u-n-d-i-s-p-a-t-c-h-e-d/">UNDISPATCHED</a> 在当前的线程环境（也就是调用者的线程）中立即执行协程直到协程的第一个挂起点。挂起之后，继续时则在指定的上下文中的线程运行。</li>
</ul>


<p>一般情况下，我们用默认的就行了。但当熟悉了协程以后，在适当的场景使用不同的启动方式参数可以更大限度的发挥协程的威力。</p>

<p>延展阅读：</p>

<ul>
<li><a href="https://kotlinlang.org/docs/coroutine-context-and-dispatchers.html">Coroutine context and dispatchers</a></li>
<li><a href="https://juejin.cn/post/6926695962354122765">揭秘kotlin协程中的CoroutineContext</a></li>
<li><a href="https://juejin.cn/post/7270899168532152381">深入Kotlin协程系列|图解上下文</a></li>
<li><a href="https://juejin.cn/post/7137927889835524126">协程是怎么切换线程的</a></li>
</ul>


<h2>启动，挂起，让度和延续</h2>

<p>知道了如何创建协程，以及如何通过参数指定它运行的上下文和影响启动的参数后，就需要详细的了解一下协程的几中运行状态，以及什么是挂起，如何让度再到咋回到延续。</p>

<h3>协程的状态</h3>

<p>与Java中的线程类似，协程也是有几种不同的状态的，可以参考下表：</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> 协程状态 </th>
<th style="text-align:left;"> 描述 </th>
<th style="text-align:center;"> isActive </th>
<th style="text-align:center;"> isCompleted </th>
<th style="text-align:center;"> isCancelled </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> New </td>
<td style="text-align:left;"> 协程刚被创建，但还未被调度，未运行 </td>
<td style="text-align:center;"> false </td>
<td style="text-align:center;"> false </td>
<td style="text-align:center;"> false </td>
</tr>
<tr>
<td style="text-align:center;"> Active </td>
<td style="text-align:left;"> 已被调度，已运行 </td>
<td style="text-align:center;"> true </td>
<td style="text-align:center;"> false </td>
<td style="text-align:center;"> false </td>
</tr>
<tr>
<td style="text-align:center;"> Completing </td>
<td style="text-align:left;"> 等待子协程结束中 </td>
<td style="text-align:center;"> true </td>
<td style="text-align:center;"> false </td>
<td style="text-align:center;"> false </td>
</tr>
<tr>
<td style="text-align:center;"> Cancelling </td>
<td style="text-align:left;"> cancel子协程中 </td>
<td style="text-align:center;"> false </td>
<td style="text-align:center;"> false </td>
<td style="text-align:center;"> true </td>
</tr>
<tr>
<td style="text-align:center;"> Cancelled </td>
<td style="text-align:left;"> 已被取消，是最终状态 </td>
<td style="text-align:center;"> false </td>
<td style="text-align:center;"> true </td>
<td style="text-align:center;"> true </td>
</tr>
<tr>
<td style="text-align:center;"> Completed </td>
<td style="text-align:left;"> 已结束，是最终状态 </td>
<td style="text-align:center;"> false </td>
<td style="text-align:center;"> true </td>
<td style="text-align:center;"> false </td>
</tr>
</tbody>
</table>


<p>需要注意，这些状态是由<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/">接口Job</a>来定义的，它是一个广义上的异步并发任务，协程是它的一个实现而已，协程返回的也是对象Job，可以通过Job的方法如join，cancel，isActive等方法来控制协程和查询状态。协程的状态转移可以看这张图：</p>

<p><img src="https://assets.alexandria.raywenderlich.com/books/kco/images/7116dd4d1cf7d079a1ece92d888198c4fdcd6cced5bc408119700a236409fdbd/original.png" alt="" /></p>

<h3>协程的挂起，让度和延续</h3>

<p>用suspend修饰的函数必须在协程里调用，因为它们在运行的时候可以让协程挂起，协程遇到<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html">delay</a>或者<a href="">join</a>以及<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/await.html">await/awaitAll</a>时就会被挂起。除此之外，还可以调用<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/yield.html">yield</a>主动进行挂起，这会释放线程，让其他协程得以运行，这便是<strong>让度</strong>。挂起，是可能导致线程切换的，这取决 于我们如何设置协程的上下文以及start参数。那么，Kotlin中的协程是如何做到协程延续(resume)时，协程的运行状态和本地变量等是如何得以在线程之间保存和传播的呢？这就涉及到了<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines/-continuation/">Continuation</a>，在挂起的时候会创建一个Continuation对象，它把恢复协程所需要的数据都会打包起来，延续运行的的时候只需要调用Continuation#resume就可以了。一般情况下，我们不需要了解Conitnuation的创建过程，因为这过于底层了，Kotlin的编译器会帮我们做好一切。</p>

<p><img src="https://doordash.engineering/wp-content/uploads/2021/11/coroutine-11-1-1024x484.jpg" alt="" /></p>

<p>扩展阅读：</p>

<ul>
<li><a href="https://juejin.cn/post/7288606110336401467">一文搞懂 Kotlin Coroutine Job 的工作流程</a></li>
<li><a href="https://juejin.cn/post/7304615395741351988">详解Kotlin协程实现原理</a></li>
<li><a href="https://juejin.cn/post/7312404578958934054">源解 Kotlin 协程</a></li>
</ul>


<h2>无限序列</h2>

<p>在继续深入学习其他话题之前先来看一个实际的妙用协程的例子，使用协程创建异步无限序列。<a href="https://kotlinlang.org/docs/constructing-collections.html">集合(Collections)</a>是对象的容器，用来存储对象实例（objects）的，把对象放入到集合中，也就是说在『放入』的过程中时，元素必须已经创建好了。而<a href="https://kotlinlang.org/docs/sequences.html">序列(Sequences)</a>并不存储对象实例，它按需生成对象，也就是说只有需要某个元素时，序列才会生成它，并且序列可以有无限个元素，它是按需生成元素，如果需要可以有无限发子弹。</p>

<p>序列是按需生成元素，因此它具有延迟化，占用资源少的特点。对于用<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/sequence.html">sequence builder</a>来创建无限序列时，其实就用到了协程，比如说创建一个质数的序列：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">fun</span> <span class="nf">primes</span><span class="p">(</span><span class="n">start</span><span class="p">:</span> <span class="n">Int</span><span class="p">):</span> <span class="n">Sequence</span><span class="p">&lt;</span><span class="n">Int</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">sequence</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Infinite prime sequence:&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">n</span> <span class="p">=</span> <span class="n">start</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="k">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="p">&gt;</span> <span class="m">1</span> <span class="p">&amp;&amp;</span> <span class="p">(</span><span class="m">2</span> <span class="n">until</span> <span class="n">n</span><span class="p">).</span><span class="n">none</span> <span class="p">{</span> <span class="n">i</span> <span class="p">-&gt;</span> <span class="n">n</span> <span class="p">%</span> <span class="n">i</span> <span class="p">==</span> <span class="m">0</span> <span class="p">})</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">yield</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>            <span class="n">println</span><span class="p">(</span><span class="s">&quot;\tGenerating next prime after $n&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">n</span><span class="p">++</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">prime</span> <span class="k">in</span> <span class="n">primes</span><span class="p">(</span><span class="n">start</span> <span class="p">=</span> <span class="m">10</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;Received $prime&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">prime</span> <span class="p">&gt;</span> <span class="m">30</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">break</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码的输出是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'>Infinite prime sequence:
</span><span class='line'>Received 11
</span><span class='line'>  Generating next prime after 11
</span><span class='line'>Received 13
</span><span class='line'>  Generating next prime after 13
</span><span class='line'>Received 17
</span><span class='line'>  Generating next prime after 17
</span><span class='line'>Received 19
</span><span class='line'>  Generating next prime after 19
</span><span class='line'>Received 23
</span><span class='line'>  Generating next prime after 23
</span><span class='line'>Received 29
</span><span class='line'>  Generating next prime after 29
</span><span class='line'>Received 31
</span></code></pre></td></tr></table></div></figure>


<p>序列生成器之所以能够一个一个的生成元素，并返回给调用者的原因就是在于<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/-sequence-scope/yield.html">yield()</a>函数，它是一个suspend函数，执行后就会挂起，然后调用者的代码得以继续执行。如果没有把sequence生成器挂起的话，它会陷入死循环。我们可以详细的看一眼sequence的签名：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">fun</span> <span class="err">&lt;</span><span class="nf">T</span><span class="p">&gt;</span> <span class="n">sequence</span><span class="p">(</span>
</span><span class='line'>    <span class="n">block</span><span class="p">:</span> <span class="n">suspend</span> <span class="n">SequenceScope</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;.()</span> <span class="p">-&gt;</span> <span class="n">Unit</span>
</span><span class='line'><span class="p">):</span> <span class="n">Sequence</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以发现sequence builder的参数是一个运行在SequenceScope中的挂起函数，内部一定是会创建一个协程来运行此代码块。并且，我们在此代码块中一定要让协程挂起，否则可能会陷入死循环。</p>

<p>拓展阅读 <a href="https://kt.academy/article/cc-sequence">Sequence builders in Kotlin Coroutines</a>。</p>

<h2>协程取消</h2>

<p>创建协程能得到协程的句柄即Job对象，可以用来控制协程，最重要的一个操作就是取消协程，通过<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/cancel.html">cancel</a>方法，目的是终止协程的运行。我们先来看一个示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">job</span> <span class="p">=</span> <span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">repeat</span><span class="p">(</span><span class="m">1000</span><span class="p">)</span> <span class="p">{</span> <span class="n">i</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;job: I&#39;m sleeping $i ...&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">delay</span><span class="p">(</span><span class="m">500L</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">delay</span><span class="p">(</span><span class="m">1300L</span><span class="p">)</span> <span class="c1">// delay a bit</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;main: I&#39;m tired of waiting!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">job</span><span class="p">.</span><span class="n">cancel</span><span class="p">()</span> <span class="c1">// cancels the job</span>
</span><span class='line'><span class="n">job</span><span class="p">.</span><span class="n">join</span><span class="p">()</span> <span class="c1">// waits for job&#39;s completion </span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;main: Now I can quit.&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">job</span><span class="p">:</span> <span class="n">I</span><span class="err">&#39;</span><span class="n">m</span> <span class="n">sleeping</span> <span class="m">0</span> <span class="p">...</span>
</span><span class='line'><span class="n">job</span><span class="p">:</span> <span class="n">I</span><span class="err">&#39;</span><span class="n">m</span> <span class="n">sleeping</span> <span class="m">1</span> <span class="p">...</span>
</span><span class='line'><span class="n">job</span><span class="p">:</span> <span class="n">I</span><span class="err">&#39;</span><span class="n">m</span> <span class="n">sleeping</span> <span class="m">2</span> <span class="p">...</span>
</span><span class='line'><span class="n">main</span><span class="p">:</span> <span class="n">I</span><span class="err">&#39;</span><span class="n">m</span> <span class="n">tired</span> <span class="n">of</span> <span class="n">waiting</span><span class="p">!</span>
</span><span class='line'><span class="n">main</span><span class="p">:</span> <span class="n">Now</span> <span class="n">I</span> <span class="n">can</span> <span class="n">quit</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<h3>协程取消的特性</h3>

<p>协程只有<strong>处于挂起状态时才能被取消</strong>，这个可以看上面Job的状态表格。父协程被取消，它同时也会取消所有的子协程，并且父协程只有在所有子协程退出后才会退出，这种树形管理关系是结构化并发的基础。另外就是，为了更好的<strong>实现可取消性</strong>，在协程内部要在关键的地方检查<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/is-active.html">isActive</a>，比如循环时，或者做一些耗时操作时，以及时响应cancel。</p>

<p>为了更全面的响应取消操作，也要捕获<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-cancellation-exception/">CancellationException</a>，并在finally中清理占用的资源，这是因为对于挂起的库函数，当被cancel时会抛出CancellationException。如果有Java的并发经验的同学可以发现，这跟取消Thread是一样的（即interrupt一个Thread）。</p>

<h3>不可取消协程</h3>

<p>有时候可能希望协程不被取消，也就是不能被取消，因为可能在执行一些关键的初始化工作，不可被打断和取消，这时可以用<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-non-cancellable/">withContext(NonCancellable) { &hellip; }</a>来作为协程的上下文环境，这坨代码块就不可被取消了，只有执行完才会返回，任外部如何cancel都没用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">job</span> <span class="p">=</span> <span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">repeat</span><span class="p">(</span><span class="m">1000</span><span class="p">)</span> <span class="p">{</span> <span class="n">i</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="n">println</span><span class="p">(</span><span class="s">&quot;job: I&#39;m sleeping $i ...&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">delay</span><span class="p">(</span><span class="m">500L</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">finally</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">withContext</span><span class="p">(</span><span class="n">NonCancellable</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">println</span><span class="p">(</span><span class="s">&quot;job: I&#39;m running finally&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">delay</span><span class="p">(</span><span class="m">1000L</span><span class="p">)</span>
</span><span class='line'>            <span class="n">println</span><span class="p">(</span><span class="s">&quot;job: And I&#39;ve just delayed for 1 sec because I&#39;m non-cancellable&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">delay</span><span class="p">(</span><span class="m">1300L</span><span class="p">)</span> <span class="c1">// delay a bit</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;main: I&#39;m tired of waiting!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">job</span><span class="p">.</span><span class="n">cancelAndJoin</span><span class="p">()</span> <span class="c1">// cancels the job and waits for its completion</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;main: Now I can quit.&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码非常有意思，父协程启动了子协程后就取消它，子协程中的try代码块会被取消，repeat不会执行完，但它的finally代码块是不可以取消的，一定要执行完子协程才能返回。</p>

<p>扩展阅读<a href="https://kotlinlang.org/docs/cancellation-and-timeouts.html">Cancellation and timeouts</a>。</p>

<h2>超时处理</h2>

<p>对于异步和并发编程来说，超时处理是非常关键的，虽然异步地或者并发地去执行任务，但对于主线程来说不可能永远等待任务，比如请求网络时，如果在网络库未设置连接超时，那么主线程或者说主协程就有可能面临无限等待。一般的做法是把问题丢给用户，用户受不了了，不想等了，那就返回或者退出，返回或者退出自然会去cancel掉所有的异步任务，无论是协程还是线程。</p>

<p>但是，更为优雅的方式是对于每一个启动的异步任务，都主动的设置一个超时时间，在给定的时间内任务仍未结束，那就取消它，终止它。这样整体的并发会更加的有秩序和可控，当然了，取消随时仍可能发生，超时时间未到时，仍是可以主动取消的。</p>

<p>在Kotlin中，给协程加上超时时限非常的方便，用扩展函数<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/with-timeout.html">withTimeout(limit) {&hellip;}</a>就可以非常方便的给代码块加上超时时限，当超时时限达到时，如果协程仍未返回，会终止协程并抛出异常<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-cancellation-exception/index.html">TimeoutCancellationException</a>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">withTimeout</span><span class="p">(</span><span class="m">1300L</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">repeat</span><span class="p">(</span><span class="m">1000</span><span class="p">)</span> <span class="p">{</span> <span class="n">i</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;I&#39;m sleeping $i ...&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">delay</span><span class="p">(</span><span class="m">500L</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//I&#39;m sleeping 0 ...</span>
</span><span class='line'><span class="c1">//I&#39;m sleeping 1 ...</span>
</span><span class='line'><span class="c1">//I&#39;m sleeping 2 ...</span>
</span><span class='line'><span class="c1">//Exception in thread &quot;main&quot; kotlinx.coroutines.TimeoutCancellationException: Timed out waiting for 1300 ms</span>
</span></code></pre></td></tr></table></div></figure>


<p>扩展阅读 <a href="https://juejin.cn/post/7250085815431020605">探索 Kotlin 协程 withTimeout 原理</a>。</p>

<h2>异常处理</h2>

<p>程序运行总会遇到异常情况，至少有一半的代码都是在处理各种异常情况。协程就是以异常的方式运行一坨代码块，这些代码块自然也可能会抛出异常，这时要如何处理呢？有同学举手了，好办啊，try-catch不就行了？这位同学先坐下，对于同步的代码是可行的，但对于异步代码并不总是可行。并发编程中的异常处理略微稍复杂一些，我们来详细的看看协程中的异常处理方法。</p>

<h3>协程中异常的传播</h3>

<p>对于同步代码来说，在外面调用层包裹try-catch总是管用的，比如说：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">fun</span> <span class="nf">boo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// do some sync works that may throw exceptions</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">e</span><span class="p">:</span> <span class="n">Exception</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;Got you, no where to run!!!&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但对于异步代码，这不管用，比如说想在协程外面try-catch异常，是行不通的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">=</span> <span class="n">runBlocking</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">job</span> <span class="p">=</span> <span class="n">launch</span><span class="p">(</span><span class="n">Dispatchers</span><span class="p">.</span><span class="n">Default</span> <span class="p">+</span> <span class="n">SupervisorJob</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">println</span><span class="p">(</span><span class="s">&quot;Ready to run!&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">delay</span><span class="p">(</span><span class="m">400</span><span class="p">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="n">Exception</span><span class="p">(</span><span class="s">&quot;You will never catch me, hahaha!&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">job</span><span class="p">.</span><span class="n">join</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">e</span><span class="p">:</span> <span class="n">Exception</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;Try to handle everything: ${e.message}&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//Ready to run!</span>
</span><span class='line'><span class="c1">//Exception in thread &quot;DefaultDispatcher-worker-1&quot; java.lang.Exception: You will never catch me, hahaha!</span>
</span></code></pre></td></tr></table></div></figure>


<p>协程中抛出了异常，但外层并没有能catch住，这段代码会crash。我们再看看async的情况：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">=</span> <span class="n">runBlocking</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">deferred</span> <span class="p">=</span> <span class="n">async</span><span class="p">(</span><span class="n">Dispatchers</span><span class="p">.</span><span class="n">Default</span> <span class="p">+</span> <span class="n">SupervisorJob</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">println</span><span class="p">(</span><span class="s">&quot;Ready to run!&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">delay</span><span class="p">(</span><span class="m">400</span><span class="p">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="n">Exception</span><span class="p">(</span><span class="s">&quot;You will never catch me, hahaha!&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">deferred</span><span class="p">.</span><span class="n">await</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">e</span><span class="p">:</span> <span class="n">Exception</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;No where to run: ${e.message}&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//Ready to run!</span>
</span><span class='line'><span class="c1">//No where to run: You will never catch me, hahaha!</span>
</span></code></pre></td></tr></table></div></figure>


<p>这回外层的catch是生效的，能把协程中的异常捕获住！到此，我们可以总结一下协程中的异常的传播：<strong>launch创建的协程异常是不可在外面捕获的，而async则可以</strong>。</p>

<p><strong>注意：</strong>无论是launch还是async，如果父协程不去join或者await等待子协程的话，则是死活都无法捕获到子协程的异常的，因为协程是异步的，launch/async很快就返回了，会立马执行它后面的语句，所以，当协程运行时，外面的代码（即launch/async后面的语句）可能已执行完了，自然是不可能捕获到任何异常的，可以通过把上面两个例子中的join和await去掉，然后运行试试看，都会crash。</p>

<p>那么，要想处理协程中的异常，一是让协程自己去try-catch，另外就是使用CoroutineContext的另一个Element，叫作CoroutineExceptionHandler。</p>

<h3>未捕获异常处理器CoroutineExceptionHandler</h3>

<p>如果协程内部出现了未捕获的异常(uncaught exceptions)时，会先看协程上下文中有没有指定未捕获异常处理器(uncaught exception handler)，如果没有则会按前面说的方式再传播。在指定协程上下文时可以用一个<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-exception-handler/">CoroutineExceptionHandler</a>对象来当作uncaught excpetion handler，以处理未捕获异常：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">=</span> <span class="n">runBlocking</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">handler</span> <span class="p">=</span> <span class="n">CoroutineExceptionHandler</span> <span class="p">{</span> <span class="n">_</span><span class="p">,</span> <span class="n">exception</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;Totally under control: ${exception.message}&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">job1</span> <span class="p">=</span> <span class="n">launch</span><span class="p">(</span><span class="n">Dispatchers</span><span class="p">.</span><span class="n">Default</span> <span class="p">+</span> <span class="n">SupervisorJob</span><span class="p">()</span> <span class="p">+</span> <span class="n">handler</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">delay</span><span class="p">(</span><span class="m">200</span><span class="p">)</span>
</span><span class='line'>        <span class="k">throw</span> <span class="n">Exception</span><span class="p">(</span><span class="s">&quot;Exploded!!!&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">job2</span> <span class="p">=</span> <span class="n">launch</span><span class="p">(</span><span class="n">Dispatchers</span><span class="p">.</span><span class="n">Default</span> <span class="p">+</span> <span class="n">SupervisorJob</span><span class="p">()</span> <span class="p">+</span> <span class="n">handler</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">delay</span><span class="p">(</span><span class="m">800</span><span class="p">)</span>
</span><span class='line'>        <span class="k">throw</span> <span class="n">Exception</span><span class="p">(</span><span class="s">&quot;Can I run away???&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">deferred</span> <span class="p">=</span> <span class="n">async</span><span class="p">(</span><span class="n">Dispatchers</span><span class="p">.</span><span class="n">Default</span> <span class="p">+</span> <span class="n">SupervisorJob</span><span class="p">()</span> <span class="p">+</span> <span class="n">handler</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">delay</span><span class="p">(</span><span class="m">400</span><span class="p">)</span>
</span><span class='line'>        <span class="k">throw</span> <span class="n">Exception</span><span class="p">(</span><span class="s">&quot;You will never catch me, hahaha!&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">joinAll</span><span class="p">(</span><span class="n">job1</span><span class="p">,</span> <span class="n">job2</span><span class="p">,</span> <span class="n">deferred</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//Totally under control: Exploded!!!</span>
</span><span class='line'><span class="c1">//Totally under control: Can I run away???</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以发现通过给launch指定CoroutineExceptionHandler可以捕获其uncaught excpetions。但是注意看async创建的协程似乎没效果，这是因为async本来就会把异常传播给其父协程，不会给CoroutineExceptionHandler处理，所以对于async来说指定了handler也是没有效果的，会<strong>被async忽略掉</strong>。</p>

<p>还需要注意的是，只有根协程（root coroutine）的上下文中的CoroutineExceptionHandler是有效的，被用于处理uncaught exceptions。协程是有树形关系的，一个协程出现未捕获异常(uncaught exception)时，它会把它丢给它的父协程处理，一层一层的传播直到根协程（root coroutine），如果根协程的上下文环境中有handler，那就用它来处理，否则就crash。换句话说，只有最外层的协程(root coroutine)设置一个handler给其context就够了，其他的子协程即使设置了handler也是没有用处的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">=</span> <span class="n">runBlocking</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">handler</span> <span class="p">=</span> <span class="n">CoroutineExceptionHandler</span> <span class="p">{</span> <span class="n">_</span><span class="p">,</span> <span class="n">exception</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;Totally under control: ${exception.message}&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">job1</span> <span class="p">=</span> <span class="n">launch</span><span class="p">(</span><span class="n">Dispatchers</span><span class="p">.</span><span class="n">Default</span> <span class="p">+</span> <span class="n">SupervisorJob</span><span class="p">()</span> <span class="p">+</span> <span class="n">handler</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">subHandler</span> <span class="p">=</span> <span class="n">CoroutineExceptionHandler</span> <span class="p">{</span> <span class="n">_</span><span class="p">,</span> <span class="n">exp</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="n">println</span><span class="p">(</span><span class="s">&quot;Try to intercept exceptions: ${exp.message}&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">subJob</span> <span class="p">=</span> <span class="n">launch</span><span class="p">(</span><span class="n">Dispatchers</span><span class="p">.</span><span class="n">Default</span> <span class="p">+</span> <span class="n">subHandler</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">grandJob</span> <span class="p">=</span> <span class="n">launch</span><span class="p">(</span><span class="n">Dispatchers</span><span class="p">.</span><span class="n">Default</span> <span class="p">+</span> <span class="n">subHandler</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="n">Exception</span><span class="p">(</span><span class="s">&quot;Bad thing happened deep down!&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">grandJob</span><span class="p">.</span><span class="n">join</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">subJob</span><span class="p">.</span><span class="n">join</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">job2</span> <span class="p">=</span> <span class="n">launch</span><span class="p">(</span><span class="n">Dispatchers</span><span class="p">.</span><span class="n">Default</span> <span class="p">+</span> <span class="n">SupervisorJob</span><span class="p">()</span> <span class="p">+</span> <span class="n">handler</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">delay</span><span class="p">(</span><span class="m">800</span><span class="p">)</span>
</span><span class='line'>        <span class="k">throw</span> <span class="n">Exception</span><span class="p">(</span><span class="s">&quot;Can I run away???&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">joinAll</span><span class="p">(</span><span class="n">job1</span><span class="p">,</span> <span class="n">job2</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//Totally under control: Bad thing happened deep down!</span>
</span><span class='line'><span class="c1">//Totally under control: Can I run away???</span>
</span></code></pre></td></tr></table></div></figure>


<p>是的，聪明的你一定发现了，这里的规则其实与Java中的<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html#setUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler">Thread.UncaughtExceptionHandler</a>)是一样一样的，它也是只需要有一个所以用<strong>static</strong>成员就可以了。</p>

<h3>链式反应</h3>

<p>当协程发生未捕获异常(uncaught exceptions)而被动终止时，它自己肯定是会被终止的，这个异常会沿树形向上传给它的父协程，其父协程也会被终止(cancle)，由于结构化并发，父协程被cancel时，会cancel其所有的子协程。就像链式反应一样，在未经特殊处理情况下，一旦子协程发生异常，就会导致其所在的树形结构的所有协程被终止，可以通过一个示例来验证一下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">=</span> <span class="n">runBlocking</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">handler</span> <span class="p">=</span> <span class="n">CoroutineExceptionHandler</span> <span class="p">{</span> <span class="n">_</span><span class="p">,</span> <span class="n">exception</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;Totally under control: ${exception.message}&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">root</span> <span class="p">=</span> <span class="n">launch</span><span class="p">(</span><span class="n">Dispatchers</span><span class="p">.</span><span class="n">Default</span> <span class="p">+</span> <span class="n">SupervisorJob</span><span class="p">()</span> <span class="p">+</span> <span class="n">handler</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">subJob1</span> <span class="p">=</span> <span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">grandJob</span> <span class="p">=</span> <span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">delay</span><span class="p">(</span><span class="m">100</span><span class="p">)</span>
</span><span class='line'>                <span class="k">throw</span> <span class="n">Exception</span><span class="p">(</span><span class="s">&quot;Bad thing happened from deep down!&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">grandJob</span><span class="p">.</span><span class="n">join</span><span class="p">()</span>
</span><span class='line'>            <span class="n">println</span><span class="p">(</span><span class="s">&quot;Sub coroutine #1 completed&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="py">subJob2</span> <span class="p">=</span> <span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">delay</span><span class="p">(</span><span class="m">60</span> <span class="p">*</span> <span class="m">1000</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">finally</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">println</span><span class="p">(</span><span class="s">&quot;Sub coroutine #2 cancelled!!&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="py">subJob3</span> <span class="p">=</span> <span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">delay</span><span class="p">(</span><span class="m">60</span> <span class="p">*</span> <span class="m">1000</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">finally</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">println</span><span class="p">(</span><span class="s">&quot;Sub coroutine #3 cancelled!!!&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="py">subJob4</span> <span class="p">=</span> <span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">delay</span><span class="p">(</span><span class="m">60</span> <span class="p">*</span> <span class="m">1000</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">finally</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">println</span><span class="p">(</span><span class="s">&quot;Sub coroutine #4 cancelled!!!!&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">joinAll</span><span class="p">(</span><span class="n">subJob1</span><span class="p">,</span> <span class="n">subJob2</span><span class="p">,</span> <span class="n">subJob3</span><span class="p">,</span> <span class="n">subJob4</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">root</span><span class="p">.</span><span class="n">join</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//Sub coroutine #2 cancelled!!</span>
</span><span class='line'><span class="c1">//Sub coroutine #4 cancelled!!!!</span>
</span><span class='line'><span class="c1">//Sub coroutine #3 cancelled!!!</span>
</span><span class='line'><span class="c1">//Totally under control: Bad thing happened from deep down!</span>
</span></code></pre></td></tr></table></div></figure>


<p>其他几个子协程subJob2，subJob3和subJob4都在工作中，但被grandJob的未捕获异常给终止掉了。另外，我们还可以发现这个异常是在根协程(root)里面的Uncaught exception handler中处理了，同时还可以发现，异常处理handler是在所有子协程被终止结束后才得以处理。再来看一个来自官方教程上面的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">handler</span> <span class="p">=</span> <span class="n">CoroutineExceptionHandler</span> <span class="p">{</span> <span class="n">_</span><span class="p">,</span> <span class="n">exception</span> <span class="p">-&gt;</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;CoroutineExceptionHandler got $exception&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">val</span> <span class="py">job</span> <span class="p">=</span> <span class="n">GlobalScope</span><span class="p">.</span><span class="n">launch</span><span class="p">(</span><span class="n">handler</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">launch</span> <span class="p">{</span> <span class="c1">// the first child</span>
</span><span class='line'>        <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">delay</span><span class="p">(</span><span class="n">Long</span><span class="p">.</span><span class="n">MAX_VALUE</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">finally</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">withContext</span><span class="p">(</span><span class="n">NonCancellable</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">println</span><span class="p">(</span><span class="s">&quot;Children are cancelled, but exception is not handled until all children terminate&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="n">delay</span><span class="p">(</span><span class="m">100</span><span class="p">)</span>
</span><span class='line'>                <span class="n">println</span><span class="p">(</span><span class="s">&quot;The first child finished its non cancellable block&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">launch</span> <span class="p">{</span> <span class="c1">// the second child</span>
</span><span class='line'>        <span class="n">delay</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;Second child throws an exception&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">throw</span> <span class="n">ArithmeticException</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">job</span><span class="p">.</span><span class="n">join</span><span class="p">()</span>
</span><span class='line'><span class="c1">//Second child throws an exception</span>
</span><span class='line'><span class="c1">//Children are cancelled, but exception is not handled until all children terminate</span>
</span><span class='line'><span class="c1">//The first child finished its non cancellable block</span>
</span><span class='line'><span class="c1">//CoroutineExceptionHandler got java.lang.ArithmeticException</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个例子非常的有意思，用到了好几个特性，先是第二个子协程发生了未捕获异常(ArithmeticException)，导致其父协程job被取消，但job还有其他子协程，所以还会去cancel仍在运行中的子协程，这个子协程被取消了，它正在delay，这时cancel它会抛CancellationException而终止delay，进入finally，finally中有一个不可以被打断的任务。而只有当所有子协程都终止完成了，job的handler才得以处理这个异常(ArithmeticException)。</p>

<h3>监护责任(Supervision)</h3>

<p>链式反应，异常会在树形关系中传递导致整个树形协程都被终止，这样设计的目的在于结构化并发，它能让整体结构的行为较一致，形成一个整体结构。很多时候这并不是想要的行为，比如说启动四个协程去服务器取四段数据，然后拼成一个整体使用，即使某段异常了，取不到，也没有必须把整体都取消掉。</p>

<p>可以给父协程加上监护责任，这样当其某一个子协程失败了，它会履行监护责任，保障其他子协程仍能运行，可以用一个例子来看一下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">supervisor</span> <span class="p">=</span> <span class="n">SupervisorJob</span><span class="p">()</span>
</span><span class='line'><span class="n">with</span><span class="p">(</span><span class="n">CoroutineScope</span><span class="p">(</span><span class="n">coroutineContext</span> <span class="p">+</span> <span class="n">supervisor</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// launch the first child -- its exception is ignored for this example (don&#39;t do this in practice!)</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">firstChild</span> <span class="p">=</span> <span class="n">launch</span><span class="p">(</span><span class="n">CoroutineExceptionHandler</span> <span class="p">{</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span> <span class="p">-&gt;</span>  <span class="p">})</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;The first child is failing&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">throw</span> <span class="n">AssertionError</span><span class="p">(</span><span class="s">&quot;The first child is cancelled&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// launch the second child</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">secondChild</span> <span class="p">=</span> <span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">firstChild</span><span class="p">.</span><span class="n">join</span><span class="p">()</span>
</span><span class='line'>        <span class="c1">// Cancellation of the first child is not propagated to the second child</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;The first child is cancelled: ${firstChild.isCancelled}, but the second one is still active&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">delay</span><span class="p">(</span><span class="n">Long</span><span class="p">.</span><span class="n">MAX_VALUE</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">finally</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// But cancellation of the supervisor is propagated</span>
</span><span class='line'>            <span class="n">println</span><span class="p">(</span><span class="s">&quot;The second child is cancelled because the supervisor was cancelled&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// wait until the first child fails &amp; completes</span>
</span><span class='line'>    <span class="n">firstChild</span><span class="p">.</span><span class="n">join</span><span class="p">()</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Cancelling the supervisor&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">supervisor</span><span class="p">.</span><span class="n">cancel</span><span class="p">()</span>
</span><span class='line'>    <span class="n">secondChild</span><span class="p">.</span><span class="n">join</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//The first child is failing</span>
</span><span class='line'><span class="c1">//The first child is cancelled: true, but the second one is still active</span>
</span><span class='line'><span class="c1">//Cancelling the supervisor</span>
</span><span class='line'><span class="c1">//The second child is cancelled because the supervisor was cancelled</span>
</span></code></pre></td></tr></table></div></figure>


<p>有两种方式加上监护责任，一种是在协程上下文时指定一个<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-supervisor-job.html">SupervisorJob</a>对象，比如前面那个例子，可以这样修改：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">=</span> <span class="n">runBlocking</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">handler</span> <span class="p">=</span> <span class="n">CoroutineExceptionHandler</span> <span class="p">{</span> <span class="n">_</span><span class="p">,</span> <span class="n">exception</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;Totally under control: ${exception.message}&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">root</span> <span class="p">=</span> <span class="n">launch</span><span class="p">(</span><span class="n">Dispatchers</span><span class="p">.</span><span class="n">Default</span> <span class="p">+</span> <span class="n">SupervisorJob</span><span class="p">()</span> <span class="p">+</span> <span class="n">handler</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">subJob1</span> <span class="p">=</span> <span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">grandJob</span> <span class="p">=</span> <span class="n">launch</span><span class="p">(</span><span class="n">SupervisorJob</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">delay</span><span class="p">(</span><span class="m">100</span><span class="p">)</span>
</span><span class='line'>                <span class="k">throw</span> <span class="n">Exception</span><span class="p">(</span><span class="s">&quot;Bad thing happened from deep down!&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">grandJob</span><span class="p">.</span><span class="n">join</span><span class="p">()</span>
</span><span class='line'>            <span class="n">println</span><span class="p">(</span><span class="s">&quot;Sub coroutine #1 completed&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="py">subJob2</span> <span class="p">=</span> <span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">delay</span><span class="p">(</span><span class="m">10</span> <span class="p">*</span> <span class="m">1000</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">finally</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">println</span><span class="p">(</span><span class="s">&quot;Sub coroutine #2 cancelled!!&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="py">subJob3</span> <span class="p">=</span> <span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">delay</span><span class="p">(</span><span class="m">20</span> <span class="p">*</span> <span class="m">1000</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">finally</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">println</span><span class="p">(</span><span class="s">&quot;Sub coroutine #3 cancelled!!!&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="py">subJob4</span> <span class="p">=</span> <span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">delay</span><span class="p">(</span><span class="m">30</span> <span class="p">*</span> <span class="m">1000</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">finally</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">println</span><span class="p">(</span><span class="s">&quot;Sub coroutine #4 cancelled!!!!&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">joinAll</span><span class="p">(</span><span class="n">subJob1</span><span class="p">,</span> <span class="n">subJob2</span><span class="p">,</span> <span class="n">subJob3</span><span class="p">,</span> <span class="n">subJob4</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">root</span><span class="p">.</span><span class="n">join</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//Totally under control: Bad thing happened from deep down!</span>
</span><span class='line'><span class="c1">//Sub coroutine #1 completed</span>
</span><span class='line'><span class="c1">//Sub coroutine #2 cancelled!!</span>
</span><span class='line'><span class="c1">//Sub coroutine #3 cancelled!!!</span>
</span><span class='line'><span class="c1">//Sub coroutine #4 cancelled!!!!</span>
</span></code></pre></td></tr></table></div></figure>


<p>除了单独的为每个协程上下文指定SupervisorJob以外，还有更为优雅的方式就是在合适的层级使用<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/supervisor-scope.html">扩展函数superivorScope</a>来创建一个scope，我们用此方法改造另一 个例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">=</span> <span class="n">runBlocking</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">handler</span> <span class="p">=</span> <span class="n">CoroutineExceptionHandler</span> <span class="p">{</span> <span class="n">_</span><span class="p">,</span> <span class="n">exception</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;CoroutineExceptionHandler got $exception&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">job</span> <span class="p">=</span> <span class="n">GlobalScope</span><span class="p">.</span><span class="n">launch</span><span class="p">(</span><span class="n">handler</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">supervisorScope</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">launch</span> <span class="p">{</span> <span class="c1">// the first child</span>
</span><span class='line'>                <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">delay</span><span class="p">(</span><span class="m">10</span> <span class="p">*</span> <span class="m">1000</span><span class="p">)</span>
</span><span class='line'>                <span class="p">}</span> <span class="k">finally</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">withContext</span><span class="p">(</span><span class="n">NonCancellable</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">println</span><span class="p">(</span><span class="s">&quot;Children are cancelled, but exception is not handled until all children terminate&quot;</span><span class="p">)</span>
</span><span class='line'>                        <span class="n">delay</span><span class="p">(</span><span class="m">100</span><span class="p">)</span>
</span><span class='line'>                        <span class="n">println</span><span class="p">(</span><span class="s">&quot;The first child finished its non cancellable block&quot;</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">launch</span> <span class="p">{</span> <span class="c1">// the second child</span>
</span><span class='line'>                <span class="n">delay</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>
</span><span class='line'>                <span class="n">println</span><span class="p">(</span><span class="s">&quot;Second child throws an exception&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="k">throw</span> <span class="n">ArithmeticException</span><span class="p">()</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">job</span><span class="p">.</span><span class="n">join</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//Second child throws an exception</span>
</span><span class='line'><span class="c1">//CoroutineExceptionHandler got java.lang.ArithmeticException</span>
</span><span class='line'><span class="c1">//Children are cancelled, but exception is not handled until all children terminate</span>
</span><span class='line'><span class="c1">//The first child finished its non cancellable block</span>
</span></code></pre></td></tr></table></div></figure>


<h3>取消异常(CancellationException)不是异常</h3>

<p>需要注意取消异常<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-cancellation-exception/">CancellationException</a>并不是常规的异常，不遵循前面说的规则，它会被忽略掉。这是因为CancellationException只会发生在主动取消协程时<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/cancel.html">Job#cancel</a>，这是自上而下的取消协程，并不需要链式反应和异常处理。</p>

<p>扩展阅读：</p>

<ul>
<li><a href="https://kotlinlang.org/docs/exception-handling.html">Coroutine exceptions handling</a></li>
<li><a href="https://juejin.cn/post/7270478168758829111">彻底掌握kotlin 协程异常处理</a></li>
<li><a href="https://juejin.cn/post/7249647450515996732">Kotlin篇 > > 协程中的异常及异常处理</a></li>
</ul>


<h2>调试</h2>

<p>调试总是必须且难免的，有时候代码运行与预期不符，但又想不通为啥时就需要进行调试以弄清楚为啥会产生那样的结果。与常规的代码一样，调试有两种方式，一是通过IDE中的『Debug』功能，step-by-step的运行代码，修改代码；另一种就是通过加日志。</p>

<h3>在IDE中『Debug』</h3>

<p>凡是IDE，或者说敢称自己是IDE的，肯定有调试功能，也就是step-by-step式的单步跟踪功能。对Kotlin比较友好的IDEA和Android Studio自然也不例外。协程也是标准的Kotlin代码，所以也是可以调试的，并且在调试方面其实没有区别。都是先在代码中设置断点，然后使用虫子图标的『Debug』功能就好了。对于IDEA系（包括Android Studio），设置断点就是在代码编辑器行号旁边点一下就可以了：</p>

<p><img src="https://kotlinlang.org/docs/images/coroutine-breakpoint.png" alt="" /></p>

<p>然后点虫子图标进行『Debug』即可：</p>

<p><img src="https://kotlinlang.org/docs/images/flow-debug-project.png" alt="" /></p>

<p>这时代码会运行，然后在预设置的断点处停止，并出现调试窗口，这里面可以单步跟踪，继续执行，或者查看代码的运行状态。对于协程来说，会比较方便的显示每个协程的状态，比如是<em>SUSPENDED</em>还是<em>RUNNING</em>等。</p>

<p><img src="https://kotlinlang.org/docs/images/coroutine-idea-debugging-1.png" alt="" /></p>

<p>注意，对于异步流程和并发流程比较多的代码来说，『Debug』会扰乱原本的时序，因为JVM必须在断点处停下来。因此，『Debug』更适用于比较复杂的大段的同步代码的调试，比如协程内部的某一段逻辑。</p>

<h3>用日志来调试</h3>

<p>另外的方式就是用日志来查看代码的运行状态，其实这跟协程也没啥关系，用日志输出想要输出的信息就可以了。只不过对于协程，我们需要知道协程信息，也就是说要知道每条日志是哪个协程输出的。这就需要一个能够输出当前协程名字的方法，一个办法是在打日志时输出CoroutineName，可以通过context[CoroutineName]；更为方便的方法是直接输出线程名字<strong>Thread.currentThread().name</strong>，然后给JVM加上选项<strong>-Dkotlinx.coroutines.debug</strong>就可以得到协程的详细名字：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">fun</span> <span class="nf">log</span><span class="p">(</span><span class="n">msg</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">=</span> <span class="n">println</span><span class="p">(</span><span class="s">&quot;[${Thread.currentThread().name}] $msg&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">=</span> <span class="n">runBlocking</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">a</span> <span class="p">=</span> <span class="n">async</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">log</span><span class="p">(</span><span class="s">&quot;I&#39;m computing a piece of the answer&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="m">6</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">b</span> <span class="p">=</span> <span class="n">async</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">log</span><span class="p">(</span><span class="s">&quot;I&#39;m computing another piece of the answer&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="m">7</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">log</span><span class="p">(</span><span class="s">&quot;The answer is ${a.await() * b.await()}&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//[main @coroutine#2] I&#39;m computing a piece of the answer</span>
</span><span class='line'><span class="c1">//[main @coroutine#3] I&#39;m computing another piece of the answer</span>
</span><span class='line'><span class="c1">//[main @coroutine#1] The answer is 42</span>
</span></code></pre></td></tr></table></div></figure>


<p>从日志中可以看每条日志所在的线程名字（即前面的main）和协程名字（即&#64;后面的内容）。注意，一定要给VM加上选项<strong>-Dkotlinx.coroutines.debug</strong>，要不然不会带有协程名字，只有线程名字：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'><span class="c"># Output without -Dkotlinx.coroutines.debug</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span>main<span class="o">]</span> I<span class="s1">&#39;m computing a piece of the answer</span>
</span><span class='line'><span class="s1">[main] I&#39;</span>m computing another piece of the answer
</span><span class='line'><span class="o">[</span>main<span class="o">]</span> The answer is 42
</span></code></pre></td></tr></table></div></figure>


<p>对于Android应用来说，是没有办法<strong>直接给VM加上选项的</strong>，这时可以通过<strong>设置系统属性</strong>，在应用的入口处，比如在<a href="">Application#onCreate</a>或者<a href="">Activity#onCreate</a>时，设置属性即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">System</span><span class="p">.</span><span class="n">setProperty</span><span class="p">(</span><span class="s">&quot;kotlinx.coroutines.debug&quot;</span><span class="p">,</span> <span class="k">if</span> <span class="p">(</span><span class="n">BuildConfig</span><span class="p">.</span><span class="n">DEBUG</span><span class="p">)</span> <span class="s">&quot;on&quot;</span> <span class="k">else</span> <span class="s">&quot;off&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于异步流程和并发流程较多的地方，用日志是比较理想的调试手段，因为它对程序运行的干扰相对较小。当然了，并发编程最大的问题就是比较难调试，调试必然需要知道程序运行的状态，无论是日志还是单步调试都会对程序的运行造成影响，从而使原本的逻辑发生改变。相信同学们都会遇到类似的情景：加了几句日志，Bug就不复现了。这就好比量子世界里面观察者对量子的影响一样，听起来不可思议，但确实会发生。并发编程需要在编码之前做好功课，用什么样的模型，选什么样的范式，谁是生产者，谁是消费者，用图形画一画，厘清思路，之后再去编码实现。而不是上来就编码，边想边做，发现线程不够用了，就多开一个吧，A数据回来的太快了，消费者还没有准备好，那就先用一个Map存着吧，这样乱撞式的开发，最后可能会实现需求，但出现Bug必然是极难调试的。</p>

<p>扩展阅读：</p>

<ul>
<li><a href="https://kotlinlang.org/docs/coroutine-context-and-dispatchers.html#debugging-coroutines-and-threads">Debugging coroutines and threads﻿</a></li>
<li><a href="https://kotlinlang.org/docs/debug-coroutines-with-idea.html">Debug coroutines using IntelliJ IDEA – tutorial</a></li>
<li><a href="https://juejin.cn/post/6860647298926379021">Kotlin Jetpack 实战 | 08. 协程“不为人知”的调试技巧</a></li>
</ul>


<h2>协程间通信</h2>

<p>大多数时候协程之间是需要通信的，比如说一个协程在从网络拉取数据，另一个协程可能需要显示进度。可以通过一些共享变量来实现，但这会有潜在的问题，因为<strong>协程随时可能会切换线程运行环境</strong>，这时共享变量就会存在线程安全问题。Kotlin则提供了更为优雅的方式，即Channel。</p>

<p><img src="https://kotlinlang.org/docs/images/using-channel-many-coroutines.png" alt="" /></p>

<p><a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel/">Channel</a>是一个<a href="https://jenkov.com/tutorials/java-concurrency/producer-consumer.html">生产者-消费者模式</a>，它是线程安全的，可以在生产者与消费之间传递数据。它与Java中的<a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingQueue.html">BlockingQueue</a>是类似的，不同之处在于，它是为协程而生的，它的操作只会挂起不会阻塞，但都是线程安全的。生产者通过<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-send-channel/">send</a>来生产数据，消费者通过<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-receive-channel/">receive</a>来消费数据。生产者和消费者都可以用协程来实现，所以Channel是一个非常优雅的协程通信方式，高效，可靠且线程安全，来看个小示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">=</span> <span class="n">runBlocking</span><span class="p">&lt;</span><span class="n">Unit</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">channel</span> <span class="p">=</span> <span class="n">Channel</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">launch</span><span class="p">(</span><span class="n">Dispatchers</span><span class="p">.</span><span class="n">Default</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">channel</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;A1&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">delay</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>
</span><span class='line'>        <span class="n">channel</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;A2&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">logd</span><span class="p">(</span><span class="s">&quot;Producer A done&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">launch</span><span class="p">(</span><span class="n">Dispatchers</span><span class="p">.</span><span class="n">IO</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">channel</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;B1&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">logd</span><span class="p">(</span><span class="s">&quot;Producer B done&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">repeat</span><span class="p">(</span><span class="m">3</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">x</span> <span class="p">=</span> <span class="n">channel</span><span class="p">.</span><span class="n">receive</span><span class="p">()</span>
</span><span class='line'>            <span class="n">logd</span><span class="p">(</span><span class="s">&quot;Got $x&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">logd</span><span class="p">(</span><span class="n">message</span><span class="p">:</span> <span class="n">Any</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;[${Thread.currentThread().name}] $message&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//[main @coroutine#4] Got A1</span>
</span><span class='line'><span class="c1">//[main @coroutine#4] Got B1</span>
</span><span class='line'><span class="c1">//[DefaultDispatcher-worker-1 @coroutine#3] Producer B done</span>
</span><span class='line'><span class="c1">//[DefaultDispatcher-worker-2 @coroutine#2] Producer A done</span>
</span><span class='line'><span class="c1">//[main @coroutine#4] Got A2</span>
</span></code></pre></td></tr></table></div></figure>


<p>进一步学习：</p>

<ul>
<li><a href="https://kotlinlang.org/docs/coroutines-and-channels.html#channels">Coroutines and Channels﻿</a></li>
<li><a href="https://kotlinlang.org/docs/channels.html">More about channels﻿</a></li>
<li><a href="https://juejin.cn/post/7171272840426029063">Kotlin协程之一文看懂Channel管道</a></li>
<li><a href="https://juejin.cn/post/7272174836335296548">Kotlin协程之Channel的使用与原理</a></li>
<li><a href="https://kt.academy/article/cc-channel">Channel in Kotlin Coroutines</a></li>
</ul>


<h2>在安卓中使用协程</h2>

<p><img src="https://ts1.cn.mm.bing.net/th/id/R-C.bd4dc46a7a5a9909ddeb90af8b5d689c?rik=6LThCIIV%2bEN67w&amp;riu=http%3a%2f%2fwikicodecamp.com%2fwp-content%2fuploads%2f2022%2f07%2fandroid_2_coroutine.jpg&amp;ehk=EORu%2fSzDMOJNZINUWgwnsOQ%2bf%2f53YvmcuiPz9Cj%2b%2bNI%3d&amp;risl=&amp;pid=ImgRaw&amp;r=0" alt="" /></p>

<p>从2019年开始，安卓开发生态中已经是<a href="https://developer.android.com/kotlin/first">Kotlin first</a>了，Kotlin是推荐的编程语言，因此协程自然也变成了推荐的异步和并发编程方式。想要在Android应用开发中用好协程，除了协程本身的知识以外，还需要注意的就是Android本身的东西。Android本身是有框架和相当多组件的，并不像我们前面写demo那样，都是从主函数main开始。因此，我们需要注意的就是多多使用框架和组件已经为我们定义好的协程工具，比如UI逻辑层的协程都要在viewModelScope中启动；以及要符合一些架构上的原则，比如Repository要有自己的scope和dispatcher。</p>

<p>扩展阅读：</p>

<ul>
<li><a href="https://developer.android.com/kotlin/coroutines">Kotlin coroutines on Android</a></li>
<li><a href="https://developer.android.com/kotlin/coroutines/coroutines-adv">Improve app performance with Kotlin coroutines</a></li>
<li><a href="https://developer.android.com/kotlin/coroutines/coroutines-best-practices">Best practices for coroutines in Android</a></li>
</ul>


<h2>书籍推荐</h2>

<p>当对Kotlin以及协程有了基本的认识之后，如果想要进阶的学习，就需要读一些专题书籍，这里推荐两本：</p>

<ul>
<li><a href="https://www.packtpub.com/product/learning-concurrency-in-kotlin/9781788627160">《Learn Concurrency in Kotlin》</a> 这本书以并发为主题，只不过是用Kotlin协程的方式来实现并发，所以它的重点在于<strong>并发编程Concurrency</strong>，具体实现方式其实可以多种多样。</li>
<li><a href="https://www.bennyhuo.com/project/kotlin-coroutines.html">《深入理解Kotlin协程》</a> 这本书的优点在于会横向的介绍其他编程语言中的并发范式，从而能够深入的理解协程，对于有一定编程经验的人来说，横向比较的方式是非常有效的。</li>
</ul>


<h2>参考资料</h2>

<ul>
<li><a href="https://amitshekhar.me/blog/kotlin-coroutines">Mastering Kotlin Coroutines</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kotlin进阶之协程从入门到放弃]]></title>
    <link href="http://toughcoder.net/blog/2024/01/11/kotlin-coroutine-made-easy/"/>
    <updated>2024-01-11T22:29:39+08:00</updated>
    <id>http://toughcoder.net/blog/2024/01/11/kotlin-coroutine-made-easy</id>
    <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Coroutine">协程Coroutine</a>是最新式的并发编程范式，它是纯编程语言层面的东西，不受制于操作系统，轻量级，易于控制，结构严谨，不易出错，易于测试，工具和配套设施都比较完备。在新生代编程语言（如Kotlin和Swift）中支持良好，在Kotlin中有着非常友好的支持，并且是写异步和并发程序的推荐方式。为了彻底学会使用协程和理解协程背后的原理，计划用三篇文章专注来学习协程。</p>

<p><a href="http://toughcoder.net/blog/2024/01/11/kotlin-coroutine-made-easy/"><img src="https://cdn.filestackcontent.com/fShtqYm3Tp2Xl9C36xN8" title="auto auto" ></a></p>

<!-- more -->


<ul>
<li>第一篇：主要介绍协程的基本概念，以及如何使用协程，目标就是讲清基本概念，并快速上手。</li>
<li>第二篇：协程的高级用法，如结构化协程，Scope，Context，Exception handling，在框架中使用（如在Compose和Jetpack中），与Flow一起使用。目标就是进一步发挥协程的威力，写出专业健壮的协程代码 。</li>
<li>第三篇：理解协程的核心原理，以及协程的实现机制，以及在其他编程语言中的支持情况。目标是深刻理解协程的原理的实现机制，做到心中无剑，以及尝试在不支持协程的语言中实现协程</li>
</ul>


<p><strong>注意</strong>：在任何一个编程语言中异步和并发编程总是略微复杂的话题，Kotlin中的协程也不例外，因此需要先有一定的前置知识，也就是说要大概弄懂操作系统中的进程与线程， 以及要有一些Java中的线程和并发编程经验，否则是没有办法很好理解和使用Kotlin协程的。</p>

<h2>Hello, coroutines</h2>

<p>每当学习一门新的技术，最喜欢的方式就是快速的上手，比如先弄个『Hello, world!』之类的，而不是上来就讲什么概念，原理，范式和方法论。编程是门实践性很强的学科，要快速上手快速体验，当有了一定的感觉之后，再去研究它的概念和原理。</p>

<p>我们也要从一个『Hello, coroutines!』开始我们的Kotlin协程之旅。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">=</span> <span class="n">runBlocking</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">delay</span><span class="p">(</span><span class="m">1000</span><span class="p">)</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;, coroutines!&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;Hello&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// Hello, coroutines!</span>
</span></code></pre></td></tr></table></div></figure>


<p>以常规的方式来思考，写在前面的语句会先执行，写在后面的语句会后执行，这就是同步的意思，似乎应该输出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'>, coroutines!
</span><span class='line'>Hello
</span></code></pre></td></tr></table></div></figure>


<p>但我们得到了期望的输出『Hello, coroutines!』，这就是协程的作用，它可以实现异步。这里launch是一个函数，后面的lambda是它的参数，它的作用就是启动一个协程来运行传入的代码块。这个代码块很简单，它先delay了1秒，然后再输出语句。因为启动了协程，并且协程里的代码等了1秒再执行余下的语句，因此，主函数中的输出语句先执行了，这样就得到了我们期望的输出顺序。</p>

<h3>配置协程运行环境</h3>

<p><strong>注意，注意</strong>，协程并不是Kotlin标准库的一部分，它属于<a href="https://github.com/Kotlin/kotlinx.coroutines/tree/master">官方扩展库</a>的一部分，有自己单独的版本号，要想使用协程还需要<a href="https://github.com/Kotlin/kotlinx.coroutines/blob/master/README.md#using-in-your-projects">单独配置依赖</a>。协程模块的名字是kotlinx.coroutines，有自已独立的版本号，需要注意的是，要注意Kotlin版本与协程版本之间的匹配关系，协程库对它所支持的Kotlin有最低版本要求。目前协程库最新版本是1.8.0-RC2，它对应的Kotlin版本是1.9.21。</p>

<p>配置协程库依赖：</p>

<h4>Maven</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.jetbrains.kotlinx<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>kotlinx-coroutines-core<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>1.8.0-RC2<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;properties&gt;</span>
</span><span class='line'>    <span class="nt">&lt;kotlin.version&gt;</span>1.9.21<span class="nt">&lt;/kotlin.version&gt;</span>
</span><span class='line'><span class="nt">&lt;/properties&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Gradle</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='Groovy'><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">implementation</span><span class="o">(</span><span class="s2">&quot;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.0-RC2&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">plugins</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// For build.gradle.kts (Kotlin DSL)</span>
</span><span class='line'>    <span class="n">kotlin</span><span class="o">(</span><span class="s2">&quot;jvm&quot;</span><span class="o">)</span> <span class="n">version</span> <span class="s2">&quot;1.9.21&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// For build.gradle (Groovy DSL)</span>
</span><span class='line'>    <span class="n">id</span> <span class="s2">&quot;org.jetbrains.kotlin.jvm&quot;</span> <span class="n">version</span> <span class="s2">&quot;1.9.21&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mavenCentral</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Android</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Groovy'><span class='line'><span class="n">implementation</span><span class="o">(</span><span class="s2">&quot;org.jetbrains.kotlinx:kotlinx-coroutines-android:1.8.0-RC2&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>协程是啥</h2>

<p><img src="https://gss0.baidu.com/-4o3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/58ee3d6d55fbb2fb3f8cdfbe474a20a44723dcf3.jpg" alt="" /></p>

<p>那么协程是啥呢？协程就是一个子例程，或者说一个函数，与常规的函数其实也没啥区别，只不过它可以异步地执行，可以挂起，当然不同的协程也可以并行的执行（这就是并发了）。协程是没有阻塞的，协程只会挂起，一旦协程挂起，就交出CPU的控制权，就可以去执行其他协程了。协程是一种轻量级的线程，但它并不是线程，跟线程也没有直接关系，当然它跟其他函数一样，也是要运行在某一个线程里面的。</p>

<p>在Kotlin中协程的关键字是suspend，它用以修饰一个函数，suspend函数只能被另一个suspend函数调用，或者运行在一个协程内。另外就是delay函数了，它是将协程挂起一定时间。<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/launch.html">launch/async</a>函数则是创建并启动一个协程，await函数是等待一个协程执行结束并返回结果。runBlocking函数则是创建一个可以使用协程的作用域，叫作CoroutineScope，协程只能在协程作用域内启动，作用域的目的就是为了管理在其内启动的协程。不理解或者记不住这些关键字和函数也没有关系，这里只需要先有一个印象就够了。</p>

<h3>动动手，折腾一下</h3>

<p>对于我们的『Hello, coroutines!』程序，可以尝试进行一些修改，比如改一下delay的值，去掉runBlocking，或者去掉launch看看会发生什么！</p>

<h2>创建协程</h2>

<p>在继续之前，我们把之前的代码重构一下，把协程代码块抽象成一个函数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">=</span> <span class="n">runBlocking</span> <span class="p">{</span> <span class="c1">// this: CoroutineScope</span>
</span><span class='line'>    <span class="n">launch</span> <span class="p">{</span> <span class="n">doWorld</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Hello&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// Hello, coroutines!</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// this is your first suspending function</span>
</span><span class='line'><span class="n">suspend</span> <span class="k">fun</span> <span class="nf">doWorld</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">delay</span><span class="p">(</span><span class="m">1000L</span><span class="p">)</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;, coroutines!!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>功能没变仍是输出『Hello, coroutines!』只不过代码块变成了一个suspend函数，被suspend修饰的函数只能运行在协程之中，或者被另一个suspend函数调用，当然 最终仍是要运行在某一个协程之中的。</p>

<p>创建协程的函数是launch()和<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/async.html">async()</a>，它们都是函数，参数都是一个代码块，它们的作用是创建一个协程并让代码块参数运行在此协程内。把上面的launch换成async得到的结果是一模一样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">=</span> <span class="n">runBlocking</span> <span class="p">{</span> <span class="c1">// this: CoroutineScope</span>
</span><span class='line'>    <span class="n">async</span> <span class="p">{</span> <span class="n">doWorld</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Hello&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// Hello, coroutines!</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然了，它们之间肯定是区别的，要不然何必费事弄两个函数呢，我们后面再讲它们的具体区别。</p>

<p>到现在我们知道了如何创建协程了，但如我们手动把<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html">runBlocking</a>删除掉，就会有编译错误，说launch/async找不到，那是因为这两个函数是扩展函数，它们是CoroutineScope类的扩展函数。前面说了，所有的协程必须运行在一个CoroutineScope内，前面的runBlocking函数的作用就是创建一个CoroutineScope，下面我们重点来看看啥是CoroutineScope。</p>

<h2>协程作用域</h2>

<p><a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/">作用域（CoroutineScope）</a>是用于管理协程的，所有的协程必须运行在某个作用域内，这样通过作用域就可以更好的管理协程，比如控制它们的生命周期。这里面的概念就是<a href="https://kotlinlang.org/docs/coroutines-basics.html#structured-concurrency">结构化并发(structured concurrency)</a>，也就是让所有的协程以一种结构化的方式来组织和管理，以让整体的并发更为有秩序和可控。</p>

<p><img src="https://www.ericthecoder.com/wp-content/uploads/2019/09/feature-1.jpg" alt="" /></p>

<p>这与人类社会是类似的，比如军队，要把士兵编为不同的组织结构（如团，旅，师，军，集团军），目的就是增强整体的执行效率，进而增强战斗力，试想一个军队，如果没有组织结构，那就会是一盘散沙，战斗力可想而知。</p>

<h3>如何创建作用域</h3>

<p>有很多<a href="https://kotlinlang.org/docs/coroutines-basics.html#scope-builder">构造器方法</a>可以用于创建作用域，基本上不会直接创建作用域对象。最常见的就是用<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/coroutine-scope.html">coroutineScope</a>函数，它的作用是创建一个CoroutineScope，执行里面的协程，并等待所有的协程执行完毕后再退出(返回)，我们可以继续改造我们的例子，自己为我们的协程创建一个作用域：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">=</span> <span class="n">runBlocking</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">doWorld</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">suspend</span> <span class="k">fun</span> <span class="nf">doWorld</span><span class="p">()</span> <span class="p">=</span> <span class="n">coroutineScope</span> <span class="p">{</span>  <span class="c1">// this: CoroutineScope</span>
</span><span class='line'>    <span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">delay</span><span class="p">(</span><span class="m">1000L</span><span class="p">)</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;, coroutines!!&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Hello&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>还有一些其他的作用域生成方法如runBlocking和<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-global-scope/">GlobalScope</a>，GlobalScope是一个全局的作用域，也就是Kotlin提供的一个在整个Kotlin中都可以直接使用的协程作用域，显然，我们不应该使用它，因为作用域的目的在于组织和管理协程，如果把所有的协程都放在一个全局作用域下面了，那跟没有使用域也没有啥区别了。就好比一个军队，只有一个将军，下面直辖一万个士兵，这跟没有将军是没有分别的。</p>

<p>至于runBlocking，它是创建一个作用域，执行其里面创建的协程，等待所有协程执行完毕后退出，但它还有一个重要的功能就是，在等待协程执行的过程中它会阻塞线程，以保证调用者的线程一定比协程晚些退出。因此，只应该在一个地方使用runBlocking，那就是在主函数中使用，其他地方都不应该使用它。</p>

<p>虽然说协程必须运行在某一个CoroutineScope中，但是不是说在每个要创建协程的地方都使用coroutineScope创建一个新的作用域呢？这显然是滥用了。作用域的目的在于组织和管理协程，因此作用域应该符合架构设计的原则，比如为一个模块或者同一类功能创建一个作用域，以方便管理其内部分的协程。并且CoroutineScope是树形结构的，也就是说作用域本身也可以管理其他作用域，这才能形成完整的结构，体现结构化并发的思想。</p>

<h3>使用框架中的CoroutineScope</h3>

<p>如前所述作用域更多的要从架构角度来考虑。实际上大多数时候，我们并不需要自己创建作用域，因为框架会为我们准备好。就好比Jetpack中的<a href="https://developer.android.com/topic/libraries/architecture/viewmodel">ViewModel</a>，它的作用是把UI操作的逻辑封装起来，那么ViewModel中的所有协程都应该运行在viewModelScope之中，而这是框架已经为我们创建好了的，它会结合系统组件生命周期来管理协程。</p>

<h2>运行上下文</h2>

<p>协程不是什么神密的东西，也不是什么银弹，它就是一个普通的函数（例程routine），只不过它可以异步执行，也就是说launch了一个协程后，这条语句很快就执行完了，马上去执行launch {&hellip;}下面的语句了，协程代码块的执行是在协程里面，它什么时候返回结果是不知道的。也可以挂起，协程挂起后就释放了运行它的线程，并不会阻塞运行它的线程，那么其他协程就有机会运行。</p>

<p>这就涉及另一个重要的东西，就是协程运行的上下文，或者说协程运行的线程环境。协程它就是一个函数，它当然需要运行在某个线程里面。除非特别指定以切换运行的线程，否则所有的协程是运行在主线程中的。</p>

<p>协程的运行环境由<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines/-coroutine-context/">CoroutineContext</a>来定义，但其实基本上不会直接创建这个对象，都是通过参数或者其他构建函数来指定协程的运行上下文环境。</p>

<h3>创建协程时指定上下文</h3>

<p>创建协程的函数launch和async是有多个参数，一共有三个参数，最后一个当然是代码块，前面两个都是有默认值的参数，因此大部分时候可以省略，它们的完整函数签名是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">fun</span> <span class="nf">CoroutineScope</span><span class="p">.</span><span class="n">launch</span><span class="p">(</span>
</span><span class='line'>    <span class="n">context</span><span class="p">:</span> <span class="n">CoroutineContext</span> <span class="p">=</span> <span class="n">EmptyCoroutineContext</span><span class="p">,</span>
</span><span class='line'>    <span class="n">start</span><span class="p">:</span> <span class="n">CoroutineStart</span> <span class="p">=</span> <span class="n">CoroutineStart</span><span class="p">.</span><span class="n">DEFAULT</span><span class="p">,</span>
</span><span class='line'>    <span class="n">block</span><span class="p">:</span> <span class="n">suspend</span> <span class="n">CoroutineScope</span><span class="p">.()</span> <span class="p">-&gt;</span> <span class="n">Unit</span>
</span><span class='line'><span class="p">):</span> <span class="n">Job</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="err">&lt;</span><span class="nf">T</span><span class="p">&gt;</span> <span class="n">CoroutineScope</span><span class="p">.</span><span class="n">async</span><span class="p">(</span>
</span><span class='line'>    <span class="n">context</span><span class="p">:</span> <span class="n">CoroutineContext</span> <span class="p">=</span> <span class="n">EmptyCoroutineContext</span><span class="p">,</span>
</span><span class='line'>    <span class="n">start</span><span class="p">:</span> <span class="n">CoroutineStart</span> <span class="p">=</span> <span class="n">CoroutineStart</span><span class="p">.</span><span class="n">DEFAULT</span><span class="p">,</span>
</span><span class='line'>    <span class="n">block</span><span class="p">:</span> <span class="n">suspend</span> <span class="n">CoroutineScope</span><span class="p">.()</span> <span class="p">-&gt;</span> <span class="n">T</span>
</span><span class='line'><span class="p">):</span> <span class="n">Deferred</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>第一个参数便是指定协程运行的上下文。现在可以为我们的协程加上线程环境了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">=</span> <span class="n">runBlocking</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">doWorld</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">suspend</span> <span class="k">fun</span> <span class="nf">doWorld</span><span class="p">()</span> <span class="p">=</span> <span class="n">coroutineScope</span> <span class="p">{</span>  <span class="c1">// this: CoroutineScope</span>
</span><span class='line'>    <span class="n">launch</span><span class="p">(</span><span class="n">Dispatchers</span><span class="p">.</span><span class="n">Default</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">delay</span><span class="p">(</span><span class="m">1000L</span><span class="p">)</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;, coroutines!!&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Hello&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>使用扩展函数withContext</h3>

<p>另外一种方式就是使用<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/with-context.html">扩展函数withContext</a>，在其参数指定的上下文环境中调用代码块中的协程，等待其执行完，并返回结果。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">suspend</span> <span class="k">fun</span> <span class="err">&lt;</span><span class="nf">T</span><span class="p">&gt;</span> <span class="n">withContext</span><span class="p">(</span><span class="n">context</span><span class="p">:</span> <span class="n">CoroutineContext</span><span class="p">,</span> <span class="n">block</span><span class="p">:</span> <span class="n">suspend</span> <span class="n">CoroutineScope</span><span class="p">.()</span> <span class="p">-&gt;</span> <span class="n">T</span><span class="p">):</span> <span class="n">T</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的例子也可以这样写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">=</span> <span class="n">runBlocking</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">doWorld</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">suspend</span> <span class="k">fun</span> <span class="nf">doWorld</span><span class="p">()</span> <span class="p">=</span> <span class="n">coroutineScope</span> <span class="p">{</span>  <span class="c1">// this: CoroutineScope</span>
</span><span class='line'>    <span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">withContext</span><span class="p">(</span><span class="n">Dispatchers</span><span class="p">.</span><span class="n">Default</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">delay</span><span class="p">(</span><span class="m">1000L</span><span class="p">)</span>
</span><span class='line'>            <span class="n">println</span><span class="p">(</span><span class="s">&quot;, coroutines!!&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Hello&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但这并不是好的用法，withContext应该用在一些suspend方法中，并且这些方法想自己指定执行环境，并且执行环境对调用方是透明的。比如说，一个负责用户操作的UesrRepository，它只向外部暴露一些suspend方法，在这些suspend方法内部通过withContext来指定它自己运行的上下文环境，从而不用管调用者的执行环境，不也需要调用者知道repo的执行环境：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">class</span> <span class="nc">UserRepository</span><span class="p">(</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">dispatcher</span><span class="p">:</span> <span class="n">Dispatcher</span> <span class="p">=</span> <span class="n">Dispathers</span><span class="p">.</span><span class="n">IO</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">login</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">withContext</span><span class="p">(</span><span class="n">dispatcher</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Do login</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>让每一个架构层次或者模块自己管理好自己运行的上下文，还有一个好处在于，可以方便的通过<strong>依赖注入</strong>来进行<strong>Mock或者测试</strong>。</p>

<h3>使用框架中的上下文环境</h3>

<p>虽然我们可以指定<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-dispatcher/">协程运行的上下文环境</a>，那是不是意味着要自己创建很多的context呢？非也，非也。框架中也预定义好了<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/">很多context</a>，可以直接拿来用，比如<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-default.html">Dispatchers.Default</a>，这是Kotlin中的默认线程适合做计算密集类任务；<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-i-o.html">Dispatchers.IO</a>，这适合做IO密集的操作，如文件读写，网络等；<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-main.html">Dispatchers.Main</a>，这是Kotlin中的主线程（即main函数运行的线程），UI中的主线程（如Swing和安卓的主线程）；等等，当然了，也可以自己创建一个context。</p>

<p>到这里我们可以发现，现代化的并发框架较以前是是非常的完备，从创建，到管理，再到运行环境都考虑的非常全面。比如<a href="https://github.com/ReactiveX/RxJava">RxJava</a>或者我们现在正在学习的协程，都是如此。在Java中，其实也有类似的东西，其实就是<a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html">ExecutorService</a>，它就是异步和并发任务运行的环境。只不过，它的API设计的还是太过原始，你仍然 需要自己去实现一个<a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executor.html">Executor</a>，并没有像RxJava中的<a href="https://reactivex.io/RxJava/3.x/javadoc/io/reactivex/rxjava3/schedulers/Schedulers.html">Schedulers</a>以及Kotlin中的Dispatchers一样，有一些功能明确的预定义的对象可以直接使用。</p>

<h2>并发性</h2>

<p>并发就是代码『同时运行』，当然 有真并发，那就是并行，比如两台电脑同时都在运行不同的或者相同的应用程序，类似于两个人同时都在干活儿，这是并行（真并发）；大多数并发都是假的，只不过操作系统以粒度非常小的时间片在不同的代码间来回切换，让人感觉起来好像所有的代码都在同时运行，但真到了CPU的指令周期里面，其实同一个周期只能执行一个命令。当然了，现代处理器都具有多核心，每个核心可以执行一个指令，因此多核心可以真的同时运行多个线程，也可以实现真并发。</p>

<p>并发的前提是要能异步，也就是像我们的launch {&hellip;}一样，它很快就执行完了，这样后面可以继续执行，因此，协程是可以实现并发的，也就是让多个协程『同时运行』：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">=</span> <span class="n">runBlocking</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">doWorld</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Concurrently executes both sections</span>
</span><span class='line'><span class="n">suspend</span> <span class="k">fun</span> <span class="nf">doWorld</span><span class="p">()</span> <span class="p">=</span> <span class="n">coroutineScope</span> <span class="p">{</span> <span class="c1">// this: CoroutineScope</span>
</span><span class='line'>    <span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">delay</span><span class="p">(</span><span class="m">2000L</span><span class="p">)</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;, coroutine #2, comes later!&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">delay</span><span class="p">(</span><span class="m">1000L</span><span class="p">)</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;, coroutine #1, here I am!&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;Hello&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//Hello, coroutine #2, here I am!</span>
</span><span class='line'><span class="c1">//, coroutine #1, comes later!</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意，我们这里是假并发，我们没有指定线程，两个协程都是运行在主线程里面的，但它们没有相互影响，更没有阻塞发生，它们确实是『同时运行的』。</p>

<p>当然了，在实际开发过程中呢，肯定还是要指定协程的运行线程，以实现真的并发，原因在于真实的软件代码是比较复杂，主线程，以及每个协程都有大量的代码要执行，都去揩主线程的油，肯定 很快就被榨干了，所以必然要上<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-i-o.html">Dispatchers.IO</a>之类的多线程以实现真正的并发。</p>

<h2>可控制性</h2>

<p>好的并发框架一定是可控的，也就是说对于异步任务来说要能很好的<strong>开启</strong>，<strong>等待</strong>和<strong>终止</strong>。Kotlin中的协程是可以做到这一点的。前面说到launch和async都可以创建一个协程，那它俩到底 啥区别？我们从前面它们的函数签名可以看出它俩的返回值是不一样的，launch返回一个<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/">Job对象</a>，而async返回一个<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-deferred/">Deferred对象</a>。</p>

<p>Job对象可以理解为协程的一个句柄，可以用来控制协程，比如终止它（取消它cancel），『同步等待』它执行完（join()）。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">suspend</span> <span class="k">fun</span> <span class="nf">doWorld</span><span class="p">()</span> <span class="p">=</span> <span class="n">coroutineScope</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">job</span> <span class="p">=</span> <span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">delay</span><span class="p">(</span><span class="m">2000L</span><span class="p">)</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot; and coroutine #2&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">delay</span><span class="p">(</span><span class="m">1000L</span><span class="p">)</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;from coroutine #1 !&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Hello&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">job</span><span class="p">.</span><span class="n">join</span><span class="p">()</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;All jobs done.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">=</span> <span class="n">runBlocking</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">doWorld</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的例子输出是符合期望的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'>Hello
</span><span class='line'>from coroutine <span class="c">#1 !</span>
</span><span class='line'> and coroutine <span class="c">#2</span>
</span><span class='line'>All <span class="nb">jobs </span><span class="k">done</span>.
</span></code></pre></td></tr></table></div></figure>


<p>而如果，把 job.join()去掉的话，因为launch {&hellip;}创建的协程是异步执行，很快就返回了，最后的语句println(&ldquo;All jobs done.&rdquo;)会得到执行，因为协程都有delay，所以『All jobs done.』要先于协程中的语句输出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'>Hello
</span><span class='line'>All <span class="nb">jobs </span><span class="k">done</span>?
</span><span class='line'>from coroutine <span class="c">#1 !</span>
</span><span class='line'> and coroutine <span class="c">#2</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://tse3-mm.cn.bing.net/th/id/OIP-C.gkI-tiJSxqG7wpydbs9EugHaEK?rs=1&amp;pid=ImgDetMain" alt="" /></p>

<p>而Deferred是Job的一个子类，它特有的功能是取得协程的返回结果，通过其await函数可以『同步的等待』协程结果返回，launch可以通过Job来等待协程执行完成，但是拿不到协程的返回结果，这就是launch与async的最大的区别。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">=</span> <span class="n">runBlocking</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">one</span> <span class="p">=</span> <span class="n">async</span> <span class="p">{</span> <span class="n">computeOne</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">two</span> <span class="p">=</span> <span class="n">async</span> <span class="p">{</span> <span class="n">computeTwo</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot; Finally we got: ${one.await() + two.await()}&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">computeOne</span><span class="p">():</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">withContext</span><span class="p">(</span><span class="n">Dispatchers</span><span class="p">.</span><span class="n">IO</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="s">&quot;Coroutine #1: Calculating ...&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">delay</span><span class="p">(</span><span class="m">2400</span><span class="p">)</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">res</span> <span class="p">=</span> <span class="m">12</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;, got $res&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span><span class="n">@withContext</span> <span class="n">res</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">computeTwo</span><span class="p">():</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">withContext</span><span class="p">(</span><span class="n">Dispatchers</span><span class="p">.</span><span class="n">IO</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="s">&quot;Coroutine #2: Calculating ...&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">delay</span><span class="p">(</span><span class="m">2200</span><span class="p">)</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">res</span> <span class="p">=</span> <span class="m">20</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;, got $res&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span><span class="n">@withContext</span> <span class="n">res</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//Coroutine #1: Calculating ...Coroutine #2: Calculating ..., got 20</span>
</span><span class='line'><span class="c1">//, got 12</span>
</span><span class='line'><span class="c1">// Finally we got: 32</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>注意，注意</strong>：前面说Job#join()和Deferred#await()都可以『同步地等待』协程执行完成，但这里的『同步等待』是非阻塞式的，它只是把当前协程挂起，虽然说join和await后面的语句在协程返回前不会得到执行，但这并不是像<a href="https://docs.oracle.com/javase/tutorial/essential/concurrency/sleep.html">join/sleep/wait</a>之于<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html">Thread</a>那种阻塞式的。协程的join和await只是挂起，把运行环境中的线程释放，在此期间其他协程是可以得到CPU资源（即线程）继续运行的。</p>

<h2>总结</h2>

<p>本文主要介绍了Kotlin中的协程基本使用方法：在一个协程作用域中，通过launch/async来创建一个协程，通过context来切换协程的运行上下文（线程环境），并可以通过Job/Deferred对象来控制协程。</p>

<p>到此，我们可以总结出协程的一些特点：</p>

<ul>
<li><strong>轻量级</strong>，它是纯编程语言层面的东西，不涉及操作系统支持的进程和线程的创建，因此它占用的资源非常少，是轻量级的异步和并发利器。</li>
<li><strong>非阻塞式</strong>，协程最重要的特点是非阻塞，它的等待虽然会让其后面的语句延迟执行，但此时运行的线程已被释放，其他协程可以得到运行。</li>
<li><strong>设施完备</strong>，管理协程的作用域，切换运行环境的context，协程的可控，可以非常优雅的实现结构化并发编程，从而减少出错，并且完全可测。</li>
</ul>


<p>其实，可以看出<strong>协程是一种代码执行上的操作框架</strong>，它能让代码挂起，交出真实的CPU控制权（可以想像为一个大的switch语句，在不同的函数之间跳转切换）。进程和线程都是操作系统直接支持的，操作硬件资源的方法，一个运行中的线程必须占有一个CPU核心，线程只能被阻塞，无法挂起，因为操作系统切换线程就意味着让CPU去运行另外一个线程，那么前一个线程就进入了阻塞状态(Blocked)，等操作系统再切换回这个线程时，它才得以继续运行，从阻塞状态转为运行状态。而协程是纯的编程语言层面实现的东西，视线程为透明，一旦挂起，就可以去执行另一坨代码，它全靠程序员自己来控制，协程，即一起协作的子例程，这也是协程，作为新一代并发编程范式最大的优势。</p>

<h2>书籍推荐</h2>

<p>《Kotlin编程实战》是推荐的书籍，这本书比较厚实，把Kotlin的每个特性都论述的十分详细。</p>

<h2>实践</h2>

<p>强烈推荐<a href="https://kotlinlang.org/docs/coroutines-and-channels.html">官方的一个实战教程</a>，非常适合入门，难度也不大，并且有答案，可以一步一步的学会使用协程，并理解它。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://kotlinlang.org/docs/coroutines-guide.html">Coroutines guide</a></li>
<li><a href="https://kotlinlang.org/docs/coroutines-basics.html">Coroutines basics</a></li>
<li><a href="https://kotlinlang.org/docs/coroutines-and-channels.html">Coroutines and channels − tutorial</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding KMP Algorithm]]></title>
    <link href="http://toughcoder.net/blog/2023/12/11/understanding-kmp-algortihm/"/>
    <updated>2023-12-11T22:21:17+08:00</updated>
    <id>http://toughcoder.net/blog/2023/12/11/understanding-kmp-algortihm</id>
    <content type="html"><![CDATA[<p>字符串模式匹配问题是非常重要且基础的问题，它是解决在目标字符串str中搜索模式字符串pattern出现的次数，或者索引位置。这个问题最为高效的方法就是著名的KMP算法，但这个算法不太好理解，毕竟是解决了从O(n<sup>2</sup>)的复杂度提升到线程O(n)的，今天就来学习并理解一下KMP算法。</p>

<p><a href="http://toughcoder.net/blog/2023/12/11/understanding-kmp-algortihm/"><img src="https://www.boardinfinity.com/blog/content/images/2022/10/27c5585ec1e3503400.webp" title="auto auto" ></a></p>

<!-- more -->


<p>字符串模式匹配问题有很多变幻，比如从头匹配就是前缀匹配，从后就是后缀匹配，找出所有匹配的索引，找第一个，看是否有匹配等等。以及其他能转化为模式匹配的问题，比如回文相关问题，但本质都<strong>模式匹配</strong>问题。这里就以寻找模式pattern在str中的第一个索引位置为例题。</p>

<h2>暴力大法</h2>

<p>世上无难题，只要能用暴力不超时。很容易写出一个暴力方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kt">int</span> <span class="nf">index</span><span class="o">(</span><span class="n">String</span> <span class="n">str</span><span class="o">,</span> <span class="n">String</span> <span class="n">pattern</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span> <span class="o">-</span> <span class="n">m</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>      <span class="k">while</span> <span class="o">(</span><span class="n">j</span> <span class="o">&lt;</span> <span class="n">m</span> <span class="o">&amp;&amp;</span> <span class="n">str</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="o">)</span> <span class="o">==</span> <span class="n">pattern</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">j</span><span class="o">++;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">j</span> <span class="o">==</span> <span class="n">m</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>很明显暴力大法的时间复杂度是O(nm)，需要从str中的每一个字符开始尝试去匹配pattern。str的指针在尝试这一次匹配后，只能向前<strong>步进一个</strong>，这是暴力大法最大的问题。假如能有方法让它步进的快一些，那么就能显著 的提升效率，这就是KMP算法的牛逼之处。</p>

<h2><a href="https://en.wikipedia.org/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm">KMP算法</a></h2>

<p>KMP算法的牛逼之处就是利用<strong>预处理</strong>和已做过的<strong>上一次匹配</strong>来<strong>快速步进</strong>str的i指针，使总的匹配次数降到O(n + m)。</p>

<p>无论是否能理解，好在代码不长，就当模板题背下来吧。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">int</span> <span class="nf">index</span><span class="o">(</span><span class="n">String</span> <span class="n">str</span><span class="o">,</span> <span class="n">String</span> <span class="n">pattern</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">char</span><span class="o">[]</span> <span class="n">sc</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>
</span><span class='line'>    <span class="kt">char</span><span class="o">[]</span> <span class="n">pc</span> <span class="o">=</span> <span class="n">pattern</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">pc</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span><span class="o">[]</span> <span class="n">next</span> <span class="o">=</span> <span class="n">calcNext</span><span class="o">(</span><span class="n">pc</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">j</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">sc</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">!=</span> <span class="n">pc</span><span class="o">[</span><span class="n">j</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">j</span> <span class="o">=</span> <span class="n">next</span><span class="o">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="o">];</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">sc</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="n">pc</span><span class="o">[</span><span class="n">j</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">j</span><span class="o">++;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">j</span> <span class="o">==</span> <span class="n">m</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">i</span> <span class="o">-</span> <span class="n">m</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">calcNext</span><span class="o">(</span><span class="kt">char</span><span class="o">[]</span> <span class="n">pattern</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">pattern</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span><span class="o">[]</span> <span class="n">next</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">m</span><span class="o">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">k</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">pattern</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">!=</span> <span class="n">pattern</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">k</span> <span class="o">=</span> <span class="n">next</span><span class="o">[</span><span class="n">k</span> <span class="o">-</span> <span class="mi">1</span><span class="o">];</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">pattern</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">==</span> <span class="n">pattern</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">k</span><span class="o">++;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">next</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">k</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>next数组</strong>的现实意义是在pattern中当前字符之前的<strong>最长前后缀长度</strong>。前后缀就是即是前缀，又是后缀，比如&#8217;abcddabc&#8217;，这里&#8217;abc&#8217;就是这个字符串的前后缀。next数组长度与pattern长度一致，next[i]的意义是，在pattern中截止到pattern[i]的子串的最长前后缀长度。要牢记next数组的意义，这会是KMP的重点应用范围，比如题214回文问题。</p>

<p>整个KMP算法，匹配过程并不难理解，主串的指针i从不回溯，一直在前进，而模式串的j指针则不断的跳转到其next数组指示的位置。核心仍是next数组的计算方式，有些难于理解，当作模板背下来也行。当涉及<strong>最长前后缀</strong>的题目时，就可以拿出next数组来使用。</p>

<h2>典型题目</h2>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">  <a href="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/description/">28. 找出字符串中第一个匹配项的下标</a>  </td>
<td style="text-align:left;">  <a href="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/solutions/1650934/by-alexhilton-7n6e/">题解</a>  </td>
<td style="text-align:left;"> KMP板子题 </td>
</tr>
<tr>
<td style="text-align:left;">  <a href="https://leetcode.cn/problems/shortest-palindrome/description/">214. 最短回文串</a>  </td>
<td style="text-align:left;">  <a href="https://leetcode.cn/problems/shortest-palindrome/solutions/2562115/xi-you-yuan-su-214-zui-duan-hui-wen-chua-0nac/">题解</a>  </td>
<td style="text-align:left;"> next数组妙用 </td>
</tr>
<tr>
<td style="text-align:left;">  <a href=""></a>  </td>
<td style="text-align:left;">  <a href="">题解</a>  </td>
<td style="text-align:left;">  </td>
</tr>
</tbody>
</table>


<h2>参考资料</h2>

<ul>
<li><a href="https://www.geeksforgeeks.org/kmp-algorithm-for-pattern-searching/">KMP Algorithm for Pattern Searching</a></li>
<li><a href="https://www.javatpoint.com/daa-knuth-morris-pratt-algorithm">The Knuth-Morris-Pratt (KMP)Algorithm</a></li>
<li><a href="https://cp-algorithms.com/string/prefix-function.html">Prefix function. Knuth–Morris–Pratt algorithm</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/83334559">KMP 算法详解</a></li>
<li><a href="https://www.cnblogs.com/dusf/p/kmp.html">KMP算法详解-彻底清楚了(转载+部分原创) </a></li>
<li><a href="http://data.biancheng.net/view/180.html">KMP算法（快速模式匹配算法）C语言详解</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/145536254">全网最通俗的KMP算法图解</a></li>
<li><a href="https://blog.csdn.net/weixin_46007276/article/details/104372119">数据结构KMP算法配图详解（超详细）</a></li>
<li><a href="https://www.cnblogs.com/lin0/p/16252948.html">图解KMP字符串匹配算法+代码实现</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让你从此不再惧怕ANR]]></title>
    <link href="http://toughcoder.net/blog/2023/12/08/android-anr-made-easy/"/>
    <updated>2023-12-08T22:12:55+08:00</updated>
    <id>http://toughcoder.net/blog/2023/12/08/android-anr-made-easy</id>
    <content type="html"><![CDATA[<blockquote><p>这篇文章是基于官方的<a href="https://developer.android.com/topic/performance/anrs/diagnose-and-fix-anrs">Diagnose and fix ANRs</a>翻译而来，但也不是严格的翻译，原文的内容都在，又加上了自己的理解以及自己的经验，以译注的形式对原文的作一些补充。</p></blockquote>

<hr />


<p>当一个Android应用的UI线程被阻塞时间过长，系统就会发出一个臭名昭著的“应用程序未响应”(ANR, Application Not Responding&#8221;)错误。本文将讲述不同类型的ANR，如何分析以及如何解决。文中列出的所有的超时时间范围都是基于<a href="https://source.android.com/">AOSP</a>和Pixel设备；这些时间范围可能会依OEM厂商而不同。</p>

<p><a href="http://toughcoder.net/blog/2023/12/08/android-anr-made-easy/"><img src="https://ts1.cn.mm.bing.net/th/id/R-C.b5cd953e9f33003456314ae6608fcecc?rik=pPBn5R3rPZ83ew&riu=http%3a%2f%2fiotts.com.cn%2fblog%2fimages%2fAndroid_a.jpg&ehk=qj91EEfUUgZ32njo8AfBJIdOoPJYInW%2b7chI6g6Jxqs%3d&risl=&pid=ImgRaw&r=0" title="auto auto" ></a></p>

<!-- more -->


<p>需要注意的是，当分析ANR的根因时，区分<strong>系统原因</strong>和<strong>应用本身的原因</strong>是很有帮助的。
当整个系统处于一个糟糕状态时，下面这些问题可能会引发ANR：</p>

<ul>
<li>系统服务内部的一些瞬时问题(Transient issues)就会导致通常很快的binder call变得非常慢。</li>
<li>系统服务的问题以及较高的系统负载会导致应用程序的线程无法被正常的调度。</li>
</ul>


<blockquote><p><strong>译注：</strong><a href="https://learn.microsoft.com/en-us/azure/architecture/best-practices/transient-faults">瞬时问题Transient issue</a>是指一些服务运行时出现了一些瞬时的小错误比如服务器的网络抽风(闪断又闪连)，或者一个系统服务的I/O错误，但可能会导致客户无法正常的获得响应。这里要这样来理解，服务(servers)一般都是长时间运行的，它是有可能会发生一些小错误的，瞬时的很快就恢复了，但如果客户恰好在此时来请求就不会得到响应。尽管这对于服务来说是一个可以忽略的小错误，毕竟它是长时间运行的，几秒钟的小错误不影响它本身的运行，但对客户侧的影响却是较大，对客户侧来说就是请求得不到响应。</p></blockquote>

<p>如果可以的话，区分系统问题还是应用问题的好方法就是使用<a href="https://perfetto.dev/docs/">Perfetto traces</a>:</p>

<ul>
<li>通过查看在Perfetto跟踪的是运行中还是未运行的线程的状态来判断应用的主线程有没有被正常的调度。</li>
<li>查看系统进程system_server的线程，看有没有锁竞争之类的问题。</li>
<li>对于耗时的(跨进程调用)binder calls，查看一下是否存在应答进程，以及为何它会耗时。</li>
</ul>


<blockquote><p><strong>译注：</strong>很多重要的系统服务都在system_server进程里面，如负责创建调度所有组件的<a href="https://android.googlesource.com/platform/frameworks/base/+/4f868ed/services/core/java/com/android/server/am/ActivityManagerService.java">AMS(Activity Manager Service)</a>，包管理<a href="https://android.googlesource.com/platform/frameworks/base/+/refs/heads/master/services/core/java/com/android/server/pm/PackageManagerService.java">PMS(Package Manager Service)</a>，窗口管理<a href="https://android.googlesource.com/platform/frameworks/base/+/android-4.3_r2.1/services/java/com/android/server/wm/WindowManagerService.java">WMS(Window Manager Service)</a>等等，system_server进程本来的load其实不轻。再加上很多OEM定制化的功能也必须要在AMS处做事情（如hook或者拦截），导致system_server并不比应用程序少引发问题，而一旦system_server有耗时操作或者在等待锁，会导致整个系统处于极度卡顿状态，这时事件的派发，组件的创建，生命周期的调度，以及WMS的焦点处理等等正常的逻辑都不可能得到及时的流转和响应。这种时候任何一个应用都可能随时发生ANR，但应用本身却都是idle状态，问题是在system_server这一侧。</p>

<p><a href="https://developer.android.com/reference/android/os/Binder">Binder</a>是安卓系统的核心基础通信机制，组件件间的通信，Intent，ContentResolver，应用与AMS，PMS和WMS等等之间的交互都是通过binder call来进行的，常规情况下大部分时候binder call都没有问题会很快问题，但如果binder另一头的某个服务发生了问题，即使是瞬时问题，也会导致binder call被阻塞或者变慢，这时就可能引发应用侧的ANR。</p>

<p>需要厘清概念，系统服务(services)与进程并不是同一回事，也不是一一对应的关系。系统服务是安卓系统架构上的模块，都分布于框架层，支撑着系统的运转。而进程则是CPU（准确的说是操作系统内核）运行和调度的基本单元（进程则再细分为线程）。一个系统服务可能独立占用一个进程，比如像<a href="https://cs.android.com/android/platform/superproject/+/master:packages/providers/MediaProvider/src/com/android/providers/media/MediaService.java">Media Service(mediaserver)</a>，<a href="https://source.android.com/docs/core/camera">CameraService(cameraserver)</a>，也可能会生成几个进程；当然 也有可能几个服务都在同一个进程里面，比如前面提到的与应用程序最为密切相关的三大服务AMS, WMS和PMS。当一个服务必须要有独立进程的时候，就会为它创建独立的进程，比如像CameraService，在Android O以前是没有独立进程的，它活在mediaserver里，后来才有独立的进程cameraserver。</p>

<p>服务是架构上的逻辑概念，而进程和线程是从硬件（CPU）角度看到的代码的执行。ANR是由于进程（准确的说是线程，进程由至少一个线程组成）卡顿或者被阻塞导致的。调试的手段也都是从代码执行的角度，把线程的栈帧转储出来(stack trace dump)，以查看是被哪 个函数阻塞了。</p></blockquote>

<h2>输入派发超时(Input dispatch timeout)</h2>

<p>输入派发无响应发生在应用的主线程无法及时地响应一个输入事件，如滑动手势或者物理按键。因为当输入派发超时发生时应用是在前台的，所以这类超时总是对用户可见的，所以想办法规避是很重要的。</p>

<p><strong>默认超时时间：5秒</strong></p>

<p>输入派发超时无响应通常是由于主线程的问题引起的。如果主线程因为等待获取某个锁而阻塞，锁的持有线程也包含在内。遵循以下最佳实践以防止输入派发未响应：</p>

<ul>
<li>主线程不要进行可能会阻塞或者耗时的操作。可以考虑使用<a href="https://developer.android.com/reference/android/os/StrictMode">严格模式StrictMode</a>来捕捉主线程的一些异常的行为。</li>
<li>尽可能的减少主线程和其他线程之间的锁竞争。</li>
<li>在主线程尽可能减少非UI相关的操作，比如当处理广播(Broadcasts)时或者处理服务时(Services)。</li>
</ul>


<h3>常见的根因</h3>

<p>这里列出一些输入派发无响应常见的根因以及修复建议。</p>

<table>
<thead>
<tr>
<th style="text-align:left;"> 根因 </th>
<th style="text-align:left;"> 表象 </th>
<th style="text-align:left;"> 修复建议 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> 耗时跨进程调用slow binder call </td>
<td style="text-align:left;"> 主线程执行了一个耗时同步binder call </td>
<td style="text-align:left;"> 把这个调用放到非主线程，或者优化一下这个调用，如果你负责这个API的话 </td>
</tr>
<tr>
<td style="text-align:left;"> 很多连续的binder calls </td>
<td style="text-align:left;"> 主线程执行了很多连续的跨进程调用 </td>
<td style="text-align:left;"> 不要在一个密集的循环中执行binder call </td>
</tr>
<tr>
<td style="text-align:left;"> 阻塞式的I/O </td>
<td style="text-align:left;"> 主线程执行了阻塞式的I/O，如数据库操作或者网络请求 </td>
<td style="text-align:left;"> 把所有阻塞式I/O调用放到非主线程里 </td>
</tr>
<tr>
<td style="text-align:left;"> 锁竞争 </td>
<td style="text-align:left;"> 主线程因为等待获取某个锁而阻塞 </td>
<td style="text-align:left;"> 减少主线程与其他线程之间的锁竞争，优化其他线程中的耗时代码 </td>
</tr>
<tr>
<td style="text-align:left;"> 耗时的帧 </td>
<td style="text-align:left;"> 在一帧里面做太多的渲染，导致严重的丢帧 </td>
<td style="text-align:left;"> 减少帧渲染的工作。不要用超过O(n<sup>2</sup>)的算法。用一些高效的组件来进行滑动和分页，比如<a href="https://developer.android.com/jetpack">Jetpack</a>中的<a href="https://developer.android.com/topic/libraries/architecture/paging/v3-overview">Paging library</a> </td>
</tr>
<tr>
<td style="text-align:left;"> 被其他组件阻塞 </td>
<td style="text-align:left;"> 其他的组件比如广播接收器(BroadcastReceiver)正在运行并阻塞着主线程 </td>
<td style="text-align:left;"> 主线程尽量不要做非UI操作，另起一个线程运行broadcast receivers </td>
</tr>
<tr>
<td style="text-align:left;"> GPU挂起 </td>
<td style="text-align:left;"> GPU挂起是一个系统问题或者硬件问题，会导致渲染被阻塞，因此也会引发输入派发ANR </td>
<td style="text-align:left;"> 很不幸的是在应用程序侧是无法搞定这个问题的。唯一的可能就是联系对应厂商。</td>
</tr>
</tbody>
</table>


<p><br /></p>

<h3>如何调试</h3>

<p>通过查看在Google Play Console和Firebase Crashlytics中的ANR簇标来开始调试。簇集会包含疑似引发ANR的最多的栈帧。</p>

<p><strong>注意：</strong>忽略簇集是&#8221;navivePollOnce&#8221;和&#8221;main thread idle&#8221;的输入派发ANR。这类标志通常是关联着栈帧转储太晚的ANRs，没有可操作的提示所以要忽略掉。一般来说，真正的ANR会在其他簇集里，所以问题并不会被掩盖。详细信息可参见<strong>nativePollOnce部分</strong>。</p>

<blockquote><p><strong>译注：</strong>这篇文档是谷歌官方的，所以它自然会使用谷歌官方的应用后台(Google Play Console)和统计分析(Firebase Crashlytics)工具，对于大部分国内的开发者来说这两个东西可能比较陌生。但没关系，原理是相通的，国内也有很多应用异常统计工具和后台，或者一些本地工具抓取的日志，形式是不限的，只要能收集到类似的栈帧(stack traces)就可以用于分析调试ANR。栈帧(stack frame或者stack trace)就是线程里面的函数调用栈，比如a()->b()->c()->d()这样的函数调用，所有的异常统计工具或者日志工具都能抓取出来某一时刻每个线程的栈帧，这也称之为栈帧转储(stack frame dump)。</p></blockquote>

<p>下面的流程图展示如何确定一个输入派发超时ANR的根因：</p>

<p><img src="https://developer.android.com/static/topic/performance/images/debug-input-dispatch-anr.png" alt="" />
图1. 如何调试一个输入派发无响应ANR</p>

<p>Play vitals能够探测并帮助调试这些常见ANRs原因中的一部分。比如说，如果vitals探测到一个ANR是因为锁竞争，它会总结这些问题并在ANR Insights部分给出建议的修复方法。</p>

<p><img src="https://developer.android.com/static/topic/performance/images/play-vitals-anr-detection.png" alt="" />
图2. Google Play vitals ANR探测</p>

<blockquote><p><strong>译注：</strong>输入派发超时ANR发生的时候应用一定是在前台的，并且用户正在交互。因此重点要看主线程里面的可能的耗时操作，对于系统侧的问题以及关键的生命周期方法则一般不太相干，因为这时生命周期一般都走完了，处理常规的交互阶段。</p></blockquote>

<h2>找不到有焦点的窗口(No focused window)</h2>

<p>像触摸等的事件通过命中测试后会直接发送到相关窗口，而像硬件按键事件则需要一个目标（窗口）。这个目标就是指有焦点的窗口。每一个显示器每一时刻只有一个有焦点的窗口，并且常常就是用户当前正在使用的那个。如果找不到有焦点的窗口，输入服务会触发一个&#8221;No focused window ANR&#8221;。找不到焦点窗口ANR是输入派发无响应中的一种。</p>

<p><strong>默认超时时间：5秒。</strong></p>

<h3>常见的原因</h3>

<p>无焦点窗口ANRs通常由以下原因导致：</p>

<ul>
<li>应用启动做了太多耗时操作，还没有渲染出来第一帧。</li>
<li>应用的主窗口无法获取焦点。如果一个窗口被使用了标志位<a href="https://developer.android.google.cn/reference/android/view/WindowManager.LayoutParams#FLAG_NOT_FOCUSABLE">FLAG_NOT_FOCUSABLE</a>，那么用户 就无法发送按键事件或者触摸事件到这个窗口上面。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">super</span><span class="p">.</span><span class="n">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
</span><span class='line'>    <span class="n">setContentView</span><span class="p">(</span><span class="n">R</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">activity_main</span><span class="p">)</span>
</span><span class='line'>    <span class="n">window</span><span class="p">.</span><span class="n">addFlags</span><span class="p">(</span><span class="n">WindowManager</span><span class="p">.</span><span class="n">LayoutParams</span><span class="p">.</span><span class="n">FLAG_FLAG_NOT_FOCUSABLE</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><strong>译注：</strong>No focused window说明应用应在前台而未在前台，或者不应该在前台而在前台，这类ANR最容易发生在生命周期方法执行太慢导致input与window焦点状态不同步导致的。所以重点要看应用的关键生命周期回调方法是否有耗时操作，比如onCreate()/onDestroy()，onStart()/onStop()，以及特别的onResume()/onPause()。可以与上面的输入派发超时进行对比，可以发现这两类ANR分析的侧重点并不一样。</p></blockquote>

<h2>广播接收器超时(Broadcast receiver timeout)</h2>

<p>广播接收器ANR发生在当一个广播接收器无法及时的响应一个广播。对于一个同步的接收器，或者没有调用<a href="https://developer.android.com/reference/android/content/BroadcastReceiver#goAsync(">goAsync</a>)的receivers，超时的意思是<a href="https://developer.android.com/reference/android/content/BroadcastReceiver#onReceive(android.content.Context,%20android.content.Intent">onReceive()</a>)方法未能及时的执行完。对于异步接收器，或者调用了goAsync的receivers，超时的意思是<a href="https://developer.android.com/reference/kotlin/android/content/BroadcastReceiver.PendingResult#finish">PendingResult.finish</a>未能及时的被调用。</p>

<p>广播接收器ANRs经常发生在这些线程中：</p>

<ul>
<li>主线程，问题会是应用启动太慢</li>
<li>运行broadcast receiver的线程，问题会是onReceive执行太慢</li>
<li>广播的后台线程，问题会是执行goAsync的代码太耗时了</li>
</ul>


<p>遵循这些最佳实践来避免广播接收器ANRs：</p>

<ul>
<li>保证快速应用启动，因为应用启动时间也会被计算在ANR的超时时间里，如果应用是被唤醒来处理广播。</li>
<li>如果使用了goAsync，要确保PengingResult.finish早点被调用。这跟同步receivers一样都受超时时间影响。</li>
<li>如果使用了goAsync，要确保工作线程没有开启耗时操作或者阻塞性的操作。</li>
<li>考虑在非主线程里面调用<a href="https://developer.android.google.cn/reference/android/content/Context#registerReceiver(android.content.BroadcastReceiver,%20android.content.IntentFilter">registerReceiver</a>)以免阻塞主线程中的代码执行。（这里的意思是要为广播提供一个非主线程的Handler，这是广播处理回调onReceiver运行的线程。如不提供Handler将会在主线程中运行 &mdash;译注）</li>
</ul>


<blockquote><p><strong>译注：</strong>广播接收器是一个独立的组件，用于任何时候接收广播事件并进行处理，包括应用还未运行时。因此，如果应用还未有运行，那么要响应广播，必须先把应用唤起(创建进程，并创建Application实例)，然后才能创建receiver实例来处理广播。所以应用冷启动时间是会被计算在超时时限内的，从而慢的冷启动肯定会影响广播处理。通常开发者都会只关注应用启动后的情况，比如渲染性能或者用户体验，会忽略其他组件如BroadcastReceiver，Service以及ContentProvider是与Activity一样的平台级别的组件，它们都能单独的运行，但它们毕竟都是在同一个应用里面，要运行在同一进程和同一个Application实例下面，所以在运行这些组件前AMS是需要先唤起应用，应用的启动会影响着所有的四大组件。另外要注意，尽管可以用&#8221;android:process&#8221;给组件(通常是给Service和ContentProvider)指定单独的进程，但冷启动的影响也是存在的，同样需要创建进程和Application实例，并且其实主进程也是被会唤起的。</p></blockquote>

<h3>超时时限(Broadcast receiver timeout)</h3>

<p>广播接收超时时限取决于前台Intent标志是否启用以及系统平台的版本：</p>

<table>
<thead>
<tr>
<th style="text-align:left;"> Intent类型 </th>
<th style="text-align:left;"> Android 13以及更低版本 </th>
<th style="text-align:left;"> Android 14及更高的版本 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> 优先级是前台的Intent(启用了FLAG_RECEIVER_FOREGROUND) </td>
<td style="text-align:left;"> 10秒 </td>
<td style="text-align:left;"> 10~20秒，取决于进程是否是CPU挨饿 </td>
</tr>
<tr>
<td style="text-align:left;"> 优先级是后台Intent(未启用FLAG_RECEIVER_FOREGROUND) </td>
<td style="text-align:left;"> 60秒 </td>
<td style="text-align:left;"> 60~120秒，取决于进程是否是CPU挨饿 </td>
</tr>
</tbody>
</table>


<p>想要知道是否启用了FLAG_RECEIVER_FOREGROUND，可以通过在ANR标题中寻找&#8221;flg=&ldquo;然后查看是否存在<strong>0x10000000</strong>。如果这他二进制位是1就说明前台标志被启用了。</p>

<p>受制于短时广播超时时间(10~20秒)的标题例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Broadcast of Intent <span class="o">{</span> <span class="nv">act</span><span class="o">=</span>android.inent.action.SCREEN_ON <span class="nv">flg</span><span class="o">=</span>0x50200010 <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>受制于长广播超时(60~120秒)的标题例子:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Broadcast of Intent <span class="o">{</span> <span class="nv">act</span><span class="o">=</span>android.intent.action.TIME_SET <span class="nv">flg</span><span class="o">=</span>0x25200010 <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>广播的超时时间是如何计算的</h3>

<p>广播耗时时长测量从system_server把广播派发给应用时开始，到当应用完成广播的处理时结束。如果应用程序的进程没在运行，还需要把应用冷启动时间计算在ANR的超时时间里面。因此，缓慢的应用启动也可能会导致广播接收超时ANR。</p>

<p>下面这张图展示了广播接收器的时间线与应用进程的对齐关系：</p>

<p><img src="https://developer.android.com/static/topic/performance/images/broadcast-receiver-anr-timeline.png" alt="" />
图3. 广播接收器时间线</p>

<p>ANR超时时间测量当接收器处理完广播时就结束，具体这个什么时候算结束取决于是同步接收器还是异步接收器：</p>

<ul>
<li>对于同步接收器，当onReceive方法返回时测量就结束了。</li>
<li>对于异步接收器，当PendingResult.finish被调用时就结束。</li>
</ul>


<p><img src="https://developer.android.com/static/topic/performance/images/sync-async-measurement-end.png" alt="" />
图4. 同步接收器和异步接收器的ANR超时测量结束时间点</p>

<h3>常见的根因</h3>

<p>这里列出广播接收超时ANR的一些常见根因以及修复建议。</p>

<table>
<thead>
<tr>
<th style="text-align:left;"> 根因 </th>
<th style="text-align:left;"> 适用于 </th>
<th style="text-align:left;"> 表象 </th>
<th style="text-align:left;"> 建议的修复方式 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> 缓慢的应用启动 </td>
<td style="text-align:left;"> 所有接收器 </td>
<td style="text-align:left;"> 应用在冷启动耗时太多 </td>
<td style="text-align:left;"> 优化应用的冷启动 </td>
</tr>
<tr>
<td style="text-align:left;"> onReceive未被调度 </td>
<td style="text-align:left;"> 所有接收器 </td>
<td style="text-align:left;"> 广播接收器线程正忙于其他操作无法执行onReceive </td>
<td style="text-align:left;"> 不要在接收器的线程里面做长时间的耗时操作(放到其他工作线程里去) </td>
</tr>
<tr>
<td style="text-align:left;"> 缓慢的onReceive </td>
<td style="text-align:left;"> 所有的接收器，主要是同步接收器 </td>
<td style="text-align:left;"> 开始执行onReceive了，但因为被阻塞了或者执行的太慢，无法及时的完成并返回 </td>
<td style="text-align:left;"> 优化缓慢的onReceive代码 </td>
</tr>
<tr>
<td style="text-align:left;"> 异步接收器未被调度 </td>
<td style="text-align:left;"> goAsync()接收器 </td>
<td style="text-align:left;"> onReceive要在一个被阻塞的工作线程池中执行，所以始终得不到执行 </td>
<td style="text-align:left;"> 优化阻塞的代码或者binder call，或者用不同的线程来当作广播的工作线程 </td>
</tr>
<tr>
<td style="text-align:left;"> 工作线程太慢或者被阻塞 </td>
<td style="text-align:left;"> goAsync()接收器 </td>
<td style="text-align:left;"> 当处理广播时，在工作线程池中有耗时操作或者阻塞代码。因此，PendingResult.finish()无法及时被调用 </td>
<td style="text-align:left;"> 优化缓慢的异步接收器代码 </td>
</tr>
<tr>
<td style="text-align:left;"> 忘记调用PendingResult.finish() </td>
<td style="text-align:left;"> goAsync()接收器 </td>
<td style="text-align:left;"> 代码的逻辑中没有调用finish() </td>
<td style="text-align:left;"> 保证finish()被调用到 </td>
</tr>
</tbody>
</table>


<p><br /></p>

<h3>如何调试</h3>

<p>基于簇集标签(cluster signature)和ANR报告，可以定位到广播接收器运行的线程，然后再定位到未执行的代码或者运行缓慢的代码。</p>

<blockquote><p><strong>注意：</strong>不要忽略&#8221;nativePollOnce&#8221;或者&#8221;main thread idle&#8221;的簇集标签。Google Play Console和Firebase Crashlytics的ANR标签里面的栈帧通常都是从主线程中获取生成的。但是，广播接收器可能运行在非主线程或者调用了goAsync()（也即转成了异步接收器&mdash;译注）。因此，这些簇集标签仍然有实际价值，可以查看一下栈帧里面的相关线程。</p></blockquote>

<p>下面的流程图展示了如何确定一个广播接收超时ANR的根因：</p>

<p><img src="https://developer.android.com/static/topic/performance/images/debug-broadcast-receiver-timeout-anr.png" alt="" />
图5. 如何调试一个广播超时ANR</p>

<h3>找到接收器的代码</h3>

<p>Google Play Console会在ANR簇集标签里面显示接收器的类名和广播Intent。寻找以下信息：</p>

<ul>
<li>cmp=&lt;receiver class&gt;</li>
<li>act=&lt;broadcast_intent&gt;</li>
</ul>


<p>这里是一个广播超时ANR标签的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>com.example.app.MyClass.myMethod
</span><span class='line'>Broadcast of Intent <span class="o">{</span> <span class="nv">act</span><span class="o">=</span>android.accounts.LOGIN_ACCOUNTS_CHANGED
</span><span class='line'><span class="nv">cmp</span><span class="o">=</span>com.example.app/com.example.app.MyAccountReceiver <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>寻找运行onReceive方法的线程</h3>

<p>如果使用Context.registerReceiver()时指定了自定义的handler，那就会运行在此handler所依附的线程里。此外，就是在主线程里。</p>

<h3>实例：异步接收器未被调度</h3>

<p>这部分将逐步的演示如何调试一个广播接收超时ANR。</p>

<p>比如说ANR标签是像酱紫的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>com.example.app.MyClass.myMethod
</span><span class='line'>Broadcast of Intent <span class="o">{</span>
</span><span class='line'><span class="nv">act</span><span class="o">=</span>android.accounts.LOG_ACCOUNTS_CHANGED <span class="nv">cmp</span><span class="o">=</span>com.example.app/com.example.app.MyReceiver <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>从标签中可以看出，广播intent是android.accounts.LOG_ACCOUNTS_CHANGED，接收器类型是com.example.app.MyReceiver。</p>

<p>从接收器的代码，可以发现线程池&#8221;BG Thread [0,1,2,3]&ldquo;在主要负责处理这个广播。查看栈帧，可以发现所有四个后台线程(background threads)的模式是一样的：它们都执行了一个阻塞式的调用getDataSync。因为所有的后台线程都被占用着，这个广播无法被及时处理，最后发生了ANR。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>BG Thread <span class="c">#0 (tid=26) Waiting</span>
</span><span class='line'>
</span><span class='line'>at jdk.internal.misc.Unsafe.park<span class="o">(</span>Native method:0<span class="o">)</span>
</span><span class='line'>at java.util.concurrent.locks.LockSupport.park<span class="o">(</span>LockSupport.java:211<span class="o">)</span>
</span><span class='line'>at com.google.common.util.concurrent.AbstractFuture.get<span class="o">(</span>AbstractFuture:563<span class="o">)</span>
</span><span class='line'>at com.google.common.util.concurrent.ForwardingFuture.get<span class="o">(</span>ForwardingFuture:68<span class="o">)</span>
</span><span class='line'>at com.example.app.getDataSync<span class="o">(</span>&lt;MyClass&gt;:152<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>at java.util.concurrent.ThreadPoolExecutor.runWorker<span class="o">(</span>ThreadPoolExecutor.java:1145<span class="o">)</span>at java.util.concurrent.ThreadPoolExecutor<span class="nv">$Worker</span>.run<span class="o">(</span>ThreadPoolExecutor.java:644<span class="o">)</span>
</span><span class='line'>at com.google.android.libraries.concurrent.AndroidExecutorsModule.lambda<span class="nv">$withStrictMode$5</span><span class="o">(</span>AndroidExecutorsModule:451<span class="o">)</span>
</span><span class='line'>at com.google.android.libraries.concurrent.AndroidExecutorsModule<span class="nv">$$</span>ExternalSyntheticLambda8.run<span class="o">(</span>AndroidExecutorsModule:1<span class="o">)</span>
</span><span class='line'>at java.lang.Thread.run<span class="o">(</span>Thread.java:1012<span class="o">)</span>
</span><span class='line'>at com.google.android.libraries.concurrent.ManagedPriorityThread.run<span class="o">(</span>ManagedPriorityThread:34<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>有几种方法可以修复这个问题：</p>

<ul>
<li>查出为何getDataSync会如此之慢，然后优化</li>
<li>不要在四后台线程中都执行getDataSync</li>
<li>更为通用的做法是，保证后台线程池中不要执行长时间的耗时操作</li>
<li>为goAsync任务设计一个专用线程池</li>
<li>使用一个无数量限制的线程池，而不是限量为4的后台线程池</li>
</ul>


<h3>实例：应用启动缓慢</h3>

<p>应用启动缓慢可能会导致几个不同类型的ANR，以广播接收超时ANR和执行服务超时ANR最为显著。如果你在主线程的帧中看到了ActivityThread.handleBindApplication，那么这个ANR的根因很有可能就是启动慢造成的。</p>

<blockquote><p><strong>译注：</strong>四大组件(Activity, Service, BroadcastReceiver和ContentProvidier)都是平台能直接识别的组件，均可由AMS直接启动运行，但它们都是应用的一部分，如果应用尚未运行，那么AMS必须先要创建进程，并创建Application实例，这都需要花费时间，会耗费更久，甚至引发ANR，如果冷启动过程中有耗时操作。所以优化应用启动是性能优化的基石。</p></blockquote>

<h2>执行服务超时(Exceute service timeout)</h2>

<p>当应用程序的主线程无法及时的启动一个Service时就会发生执行服务超时ANR。具体来说，就是一个服务无法在一定时限范围内完成onCreate()或者onStartCommand()或者onBind()的执行。</p>

<p><strong>默认超时时间：</strong>前台服务(Foreground Service)是20秒; 后台服务(Background Service)是200秒。ANR超时时间包括应用冷启动，以及onCreate()，onBind()和onStartCommand的调用。</p>

<p>遵循如下最佳实战来规避执行服务ANR：</p>

<ul>
<li>确保应用启动很快，因为如果一个应用被唤起来运行服务组件，启动时间也会被计算在超时时间内。</li>
<li>确保服务的onCreate()，onBind()和onStartCommand()执行的都很快。</li>
<li>不要在主线程里执行来自其他组件的耗时操作或者阻塞式操作，这些操作会阻碍服务的快速启动。</li>
</ul>


<h3>常见的根因</h3>

<p>下表列出执行服务超时ANR的常见根因和修复建议：。</p>

<table>
<thead>
<tr>
<th style="text-align:left;"> 根因 </th>
<th style="text-align:left;"> 表象 </th>
<th style="text-align:left;"> 建议的修复 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> 缓慢的应用启动 </td>
<td style="text-align:left;"> 应用冷启动时间过长 </td>
<td style="text-align:left;"> 优化应用启动速度 </td>
</tr>
<tr>
<td style="text-align:left;"> 缓慢的onCreate()，onStartCommand和onBind </td>
<td style="text-align:left;"> 服务组件的onCreate()，onStartCommand()和onBind()在主线程执行了耗时操作 </td>
<td style="text-align:left;"> 优化代码，或者把耗时操作从这些关键的方法中移出去 </td>
</tr>
<tr>
<td style="text-align:left;"> 未被调度(在执行onStart()之前主线程就被阻塞了) </td>
<td style="text-align:left;"> 在服务启动之前，主线程就被其他组件级阻塞了 </td>
<td style="text-align:left;"> 把其他组件的工作移出主线程。优化其他组件的阻塞代码 </td>
</tr>
</tbody>
</table>


<p><br /></p>

<h3>如何调试</h3>

<p>从Google Play Console和Firebase Crashlytics中的簇集标签和ANR报告，基于主线程当时的运行状态，通常就能确定ANR的根因。</p>

<p><strong>注意：</strong>忽略标签是&#8221;nativePollOnce&#8221;和&#8221;main thread idle&#8221;的执行服务ANR簇集。这些簇集通常是栈帧捕获的太晚，无实际参考意义。真实的ANR栈帧可能会在其他的簇集里，所以问题并不会被掩藏。详细参见nativePollOnce部分。</p>

<p>下面的流程图描述了如何调试一个执行服务超时ANR。</p>

<p><img src="https://developer.android.com/static/topic/performance/images/debug-execute-service-anr.png" alt="" />
图6. 如何调试一个执行服务ANR</p>

<p>如果发现某个执行报务ANR是有实际操作意义的，遵循以下步骤来解决问题：</p>

<ol>
<li>找到ANR簇集标签中的服务组件。在Google Play Console里，服务组件类型会显示在ANR标签里。在后面的这个例子里，类型就是com.example.app/MyService。</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>com.google.common.util.concurrent.Uninterruptibles.awaitUninterruptibly
</span><span class='line'>Executing service com.example.app/com.example.app.MyService
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>确定应用启动过程中，服务组件或者其他地方是否有耗时或者阻塞操作，通过检查主线程中的下面这些重要的方法调用</li>
</ol>


<table>
<thead>
<tr>
<th style="text-align:left;"> 主线程栈帧中的方法调用 </th>
<th style="text-align:left;"> 背后的含义 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> android.app.ActivityThread.handleBindApplication </td>
<td style="text-align:left;"> 应用正在启动，ANR由启动太慢引起 </td>
</tr>
<tr>
<td style="text-align:left;"> <ServiceClass>.onCreate()<br/>[&hellip;.]<br/>android.app.ActivityThread.handleCreateService </td>
<td style="text-align:left;"> 服务正在被创建中，所以ANR是由缓慢的onCreate()引起的 </td>
</tr>
<tr>
<td style="text-align:left;"> <ServiceClass>.onBind()<br/>[&hellip;.]<br/>android.app.ActivityThread.handleBindService </td>
<td style="text-align:left;"> 服务正在被绑定中，所以ANR是由缓慢的onBind()引起的 </td>
</tr>
<tr>
<td style="text-align:left;"> <ServiceClass>.onStartCommand()<br/>[&hellip;.]<br/>android.app.ActivityThread.handleServiceArgs </td>
<td style="text-align:left;"> 服务正在被启动中，所以ANR是由缓慢的onStartCommand()引起的 </td>
</tr>
</tbody>
</table>


<p><br />
举个粟子，如果在类MyService里的onStartCommand执行缓慢，主线程栈帧会像酱婶儿的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>at com.example.app.MyService.onStartCommand<span class="o">(</span>FooService.java:25<span class="o">)</span>
</span><span class='line'>at android.app.ActivityThread.handleServiceArgs<span class="o">(</span>ActivityThread.java:4820<span class="o">)</span>
</span><span class='line'>at android.app.ActivityThread.-<span class="nv">$$</span>Nest<span class="nv">$mhandleServiceArgs</span><span class="o">(</span>unavailable:0<span class="o">)</span>
</span><span class='line'>at android.app.ActivityThread<span class="nv">$H</span>.handleMessage<span class="o">(</span>ActivityThread.java:2289<span class="o">)</span>
</span><span class='line'>at android.os.Handler.dispatchMessage<span class="o">(</span>Handler.java:106<span class="o">)</span>
</span><span class='line'>at android.os.Looper.loopOnce<span class="o">(</span>Looper.java:205<span class="o">)</span>
</span><span class='line'>at android.os.Looper.loop<span class="o">(</span>Looper.java:294<span class="o">)</span>
</span><span class='line'>at android.app.ActivityThread.main<span class="o">(</span>ActivityThread.java:8176<span class="o">)</span>
</span><span class='line'>at java.lang.reflect.Method.invoke<span class="o">(</span>Native method:0<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果没有发现重要的方法调用，还有其他一些可能：</p>

<ul>
<li> 服务正在运行或者在关闭中，意思是说栈帧捕获的太晚了，可以忽略此类ANR或者视为假阳性。</li>
<li><p> 另外一个组件正在运行，比如广播接收器。这种情况下主线程可能被这个组件阻塞着，导致服务无法启动。</p></li>
<li><p>如果能看到关键的方法 调用并确定ANR发生的地点，检查主线程的栈帧以找到缓慢的操作并把它们从关键的方法中移出去。</p></li>
</ul>


<p>关于服务的更多信息，可以看下面这些链接：</p>

<ul>
<li><a href="https://developer.android.com/guide/components/services">服务概览</a></li>
<li><a href="https://developer.android.com/guide/components/foreground-services">前台服务</a></li>
<li><a href="https://developer.android.com/reference/android/app/Service">服务</a></li>
</ul>


<h2>内容提供程序无响应(Content Provider not responding)</h2>

<p>当一个远端内内容提供程序响应查询(query)时花费超过时限，内容提供程序ANR就会发生，且会被杀掉。</p>

<p><strong>默认超时时间：</strong>内容提供程序通过ContentProviderClient.setDetectNotResponding指定的。ANR超时时限包括远端内容提供程序执行查询的时间，以及如果远端应用还未启还包括它的冷启动时间，加在一起的总时间。</p>

<p>遵循下面这些最佳实践来规避内容提供程序ANR：</p>

<ul>
<li>确保应用启动很快，因为如果应用未运行时会被唤起，冷启动时间也会被计算在超时时间内。</li>
<li>确保内容提供程序的查询能很快执行完。</li>
<li>不要执行大量的并发阻塞式的binder call，因为这会阻塞应用的所有的binder线程。</li>
</ul>


<blockquote><p><strong>译注：</strong><a href="https://developer.android.com/reference/android/content/ContentProvider">内容提供程序Content provider</a>都是要经过跨进程调用(binder call)，尽管可能并没有真正的在另外一个进程里。因为我们使用<a href="https://developer.android.com/guide/topics/providers/content-provider-basics">ContentProvider</a>的时候都是通过另一个API ContentResolver来完成，而ContentResolver是通过binder call来与ContentProvider通信的，无论是否真的跨进程。所以，ContentProvider就像一个服务器一样是远端的一侧提供内容，而应用程序(使用者)是客户端一侧需要内容。内容提供程序可能同时服务着不同的客户请求，比如像系统通用的内容提供程序ContactsProvider或者MediaProvider可能同时会有大量的应用请求查询，每一个请求都需要执行binder call，因此内容提供程序可能会同时执行着大量的binder call(它需要查询结果，并把结果以binder call的形式返回给请求方)。所以对于内容提供程序来说，查看binder call的运行状态对于解决ANR问题以及排查性能问题都是非常有帮助的。</p></blockquote>

<h3>常见根因</h3>

<p>下表列出了内容提供程序ANR的常见根因和修复建议。</p>

<table>
<thead>
<tr>
<th style="text-align:left;"> 根因 </th>
<th style="text-align:left;"> 表象 </th>
<th style="text-align:left;"> 信号 </th>
<th style="text-align:left;"> 建议的修复方式 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> 缓慢的查询 </td>
<td style="text-align:left;"> 内容提供程序执行耗时太长或者被阻塞 </td>
<td style="text-align:left;"> binder线程里有android.content.ContentProvider\$Transport.query栈帧 </td>
<td style="text-align:left;"> 优化查询或者查出什么东西在阻塞着binder线程 </td>
</tr>
<tr>
<td style="text-align:left;"> 应用启动太慢 </td>
<td style="text-align:left;"> 内容提供程序启动耗时太久 </td>
<td style="text-align:left;"> 主线程里有ActivityThread.handleBindApplication栈帧 </td>
<td style="text-align:left;"> 优化应用启动 </td>
</tr>
<tr>
<td style="text-align:left;"> Binder线程耗尽了，所有的binder线程都被占用着 </td>
<td style="text-align:left;"> 所有的binder线程都被占用着服务着其他的同步请求，因此内容提供程序binder调用无法执行 </td>
<td style="text-align:left;"> 应用未启动起来，所有的binder线程都被占用，内容提供程序也未能启动起来 </td>
<td style="text-align:left;"> 减小binder线程的负载。也就是说执行更少一些的外发同步binder调用或者在处理到来的调用时少做一些操作。</td>
</tr>
</tbody>
</table>


<p><br /></p>

<h3>如何调试</h3>

<p>要想调试一个内容提供程序ANR，使用Google Play Console或者Firebase Crashlytics中的簇集标签和ANR报告，并用来查看主线程以及binder线程都在做什么。</p>

<p>下面的流程图描述如何调试一个内容提供程序ANR：</p>

<p><img src="https://developer.android.com/static/topic/performance/images/debug-content-provider-anr.png" alt="" />
图7.如何调试一个内容提供程序ANR</p>

<p>下面的代码块展示了当被一个缓慢的内容提供程序查询阻塞时，binder线程的状态。在这个例子里，内容提供程序的查询正在等待一个打开数据库的锁。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>binder:11300_2 <span class="o">(</span><span class="nv">tid</span><span class="o">=</span>13<span class="o">)</span> Blocked
</span><span class='line'>
</span><span class='line'>Waiting <span class="k">for</span> osm <span class="o">(</span>0x01ab5df9<span class="o">)</span> held by at com.google.common.base.Suppliers<span class="nv">$NonSerializableMemoizingSupplier</span>.get<span class="o">(</span>Suppliers:182<span class="o">)</span>
</span><span class='line'>at com.example.app.MyClass.blockingGetOpenDatabase<span class="o">(</span>FooClass:171<span class="o">)</span>
</span><span class='line'><span class="o">[</span>...<span class="o">]</span>
</span><span class='line'>at com.example.app.MyContentProvider.query<span class="o">(</span>MyContentProvider.java:915<span class="o">)</span>
</span><span class='line'>at android.content.ContentProvider<span class="nv">$Transport</span>.query<span class="o">(</span>ContentProvider.java:292<span class="o">)</span>
</span><span class='line'>at android.content.ContentProviderNative.onTransact<span class="o">(</span>ContentProviderNative.java:107<span class="o">)</span>
</span><span class='line'>at android.os.Binder.execTransactInternal<span class="o">(</span>Binder.java:1339<span class="o">)</span>
</span><span class='line'>at android.os.Binder.execTransact<span class="o">(</span>Binder.java:1275<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面的代码块展示了当被缓慢的应用启动阻塞时，binder线程的状态。在这个例子里，应用启动因为dagger初始化时的锁竞争而变得很慢。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>main <span class="o">(</span><span class="nv">tid</span><span class="o">=</span>1<span class="o">)</span> Blocked
</span><span class='line'>
</span><span class='line'><span class="o">[</span>...<span class="o">]</span>
</span><span class='line'>at dagger.internal.DoubleCheck.get<span class="o">(</span>DoubleCheck:51<span class="o">)</span>
</span><span class='line'>- locked 0x0e33cd2c <span class="o">(</span>a qsn<span class="o">)</span>at dagger.internal.SetFactory.get<span class="o">(</span>SetFactory:126<span class="o">)</span>
</span><span class='line'>at com.myapp.Bar_Factory.get<span class="o">(</span>Bar_Factory:38<span class="o">)</span>
</span><span class='line'><span class="o">[</span>...<span class="o">]</span>
</span><span class='line'>at com.example.app.MyApplication.onCreate<span class="o">(</span>DocsApplication:203<span class="o">)</span>
</span><span class='line'>at android.app.Instrumentation.callApplicationOnCreate<span class="o">(</span>Instrumentation.java:1316<span class="o">)</span>
</span><span class='line'>at android.app.ActivityThread.handleBindApplication<span class="o">(</span>ActivityThread.java:6991<span class="o">)</span>
</span><span class='line'>at android.app.ActivityThread.-<span class="nv">$$</span>Nest<span class="nv">$mhandleBindApplication</span><span class="o">(</span>unavailable:0<span class="o">)</span>
</span><span class='line'>at android.app.ActivityThread<span class="nv">$H</span>.handleMessage<span class="o">(</span>ActivityThread.java:2235<span class="o">)</span>
</span><span class='line'>at android.os.Handler.dispatchMessage<span class="o">(</span>Handler.java:106<span class="o">)</span>
</span><span class='line'>at android.os.Looper.loopOnce<span class="o">(</span>Looper.java:205<span class="o">)</span>
</span><span class='line'>at android.os.Looper.loop<span class="o">(</span>Looper.java:294<span class="o">)</span>
</span><span class='line'>at android.app.ActivityThread.main<span class="o">(</span>ActivityThread.java:8170<span class="o">)</span>
</span><span class='line'>at java.lang.reflect.Method.invoke<span class="o">(</span>Native method:0<span class="o">)</span>
</span><span class='line'>at com.android.internal.os.RuntimeInit<span class="nv">$MethodAndArgsCaller</span>.run<span class="o">(</span>RuntimeInit.java:552<span class="o">)</span>
</span><span class='line'>at com.android.internal.os.ZygoteInit.main<span class="o">(</span>ZygoteInit.java:971<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>缓慢的作业响应(Slow job response)</h2>

<p>当应用响应JobService.onStartJob()或者JobService.onStopJob耗时太久，或者用JobService.setNotification()提供通知时耗时太久，都会引发缓慢的作业响应ANR发生。这说明应用的主线程因为其他操作而被阻塞了。</p>

<p>如果问题是与JobService.onStartJob()或者JobService.onStopJob()有关系，就要检查下主线程的情况。如果问题与JobService.setNotification()有关系，要保证它尽可能的快速的被调用到。在提供通知之前 不要做很多其他事情。</p>

<blockquote><p><strong>译注：</strong><a href="https://developer.android.com/reference/android/app/job/JobService">JobService</a>是Android 5.0 API 21时增加的一个专门用于后台作业的一个Service的子类。上面提到的是都是它的一些回调，与一些其他的回调类似，这些回调必须快速执行完毕，因为<a href="https://developer.android.com/reference/android/app/job/JobScheduler">JobSchedule</a>内部需要做一些资源回收之类的工作，所以这些回调不允许被阻塞。</p></blockquote>

<h2>隐秘的ANRs</h2>

<p>有时候搞不清楚为啥ANR会发生，或者在簇集标签和ANR报告中找不到足够的信息去调试。遇到这些情况，还是可以采取一些步骤以确定这些ANR是否是值得处理的。</p>

<h3>消息队列是空闲(Message queue idle)的或者正处理轮询中(nativePollOnce)</h3>

<p>如果你在栈帧信息中发现android.os.MessageQueue.nativePollOnce，这通常说明疑似无响应的线程实际上是空闲的或者在等待队列中的消息。在Google Play Console里面，ANR的细节是酱紫的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Native method - android.os.MessageQueue.nativePollOnce
</span><span class='line'>Executing service com.example.app/com.example.app.MyService
</span></code></pre></td></tr></table></div></figure>


<p>举个粟子，如果主线程是空闲的，栈帧是酱紫的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="s2">&quot;main&quot;</span> <span class="nv">tid</span><span class="o">=</span><span class="m">1</span> NativeMain threadIdle
</span><span class='line'>
</span><span class='line'><span class="c">#00  pc 0x00000000000d8b38  /apex/com.android.runtime/lib64/bionic/libc.so (__epoll_pwait+8)</span>
</span><span class='line'><span class="c">#01  pc 0x0000000000019d88  /system/lib64/libutils.so (android::Looper::pollInner(int)+184)</span>
</span><span class='line'><span class="c">#02  pc 0x0000000000019c68  /system/lib64/libutils.so (android::Looper::pollOnce(int, int*, int*, void**)+112)</span>
</span><span class='line'><span class="c">#03  pc 0x000000000011409c  /system/lib64/libandroid_runtime.so (android::android_os_MessageQueue_nativePollOnce(_JNIEnv*, _jobject*, long, int)+44)</span>
</span><span class='line'>at android.os.MessageQueue.nativePollOnce <span class="o">(</span>Native method<span class="o">)</span>
</span><span class='line'>at android.os.MessageQueue.next <span class="o">(</span>MessageQueue.java:339<span class="o">)</span>  at android.os.Looper.loop <span class="o">(</span>Looper.java:208<span class="o">)</span>
</span><span class='line'>at android.app.ActivityThread.main <span class="o">(</span>ActivityThread.java:8192<span class="o">)</span>
</span><span class='line'>at java.lang.reflect.Method.invoke <span class="o">(</span>Native method<span class="o">)</span>
</span><span class='line'>at com.android.internal.os.RuntimeInit<span class="nv">$MethodAndArgsCaller</span>.run <span class="o">(</span>RuntimeInit.java:626<span class="o">)</span>
</span><span class='line'>at com.android.internal.os.ZygoteInit.main <span class="o">(</span>ZygoteInit.java:1015<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>疑似无响应线程可能是空闲的会有几个原因：</p>

<ul>
<li>延迟的栈转储：在ANR被 触发和栈帧转储之间的短时间内，线程状态恢复了。在Android 13版本的Pixels设备上这个延迟大约在100ms，但也可能超过1秒。Android 14版本的Pixels设备上这个延迟小于10ms。</li>
<li>线程归因错误：用于构建ANR标签的线程并不是实际上触发ANR的无响应线程。这种情况下，尝试确定一下这个ANR是否是如下的类型：

<ul>
<li>广播接收超时</li>
<li>内容提供程序无响应</li>
<li>找不到带焦点的窗口</li>
<li>系统侧问题：由于系统负载太重或者系统服务有问题而导致应用进程无法被调度。</li>
</ul>
</li>
</ul>


<h3>没有栈帧(No stack frames)</h3>

<p>有一些ANR报告里面没有包含与ANR相关的栈帧，这说明在生成ANR报告时栈帧转储失败了。有很多可能的原因会导致栈帧丢失：</p>

<ul>
<li>转储栈帧太耗时了，所以超时了</li>
<li>在栈帧转储完成之前进程就挂了或者被杀掉了</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>...<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>--- CriticalEventLog ---
</span><span class='line'>capacity: 20
</span><span class='line'>timestamp_ms: 1666030897753
</span><span class='line'>window_ms: 300000
</span><span class='line'>
</span><span class='line'>libdebuggerd_client: failed to <span class="nb">read </span>status response from tombstoned: timeout reached?
</span><span class='line'>
</span><span class='line'>----- Waiting Channels: pid <span class="m">7068</span> at 2022-10-18 02:21:37.&lt;US_SOCIAL_SECURITY_NUMBER&gt;+0800 -----
</span><span class='line'>
</span><span class='line'><span class="o">[</span>...<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>簇集标签或者ANR报告里面没有栈帧的ANR是没有实际分析意义的。如果要调试，可以去看其他的簇集信息，因为如果一个问题足够明显的话，那么它通常会有它自己的簇集标签存在。其他的可行方案就是查看<a href="https://perfetto.dev/docs/">Perfetto traces</a>.</p>

<h2>已知问题(Known issues)</h2>

<p>在应用的进程里用计时器来测量广播的处理时间或者ANR的触发是行不通的，因为系统是以异步的方式在监控着ANR。</p>

<blockquote><p><strong>译注：</strong>这里的意思是不要想着取巧，应用开发者的重点应该放在你的业务逻辑和性能优化上面，借助平台提供的工具和方法来优化应用的代码逻辑。而像尝试在应用侧自己统计超时这种事情是行不通的，因为系统以比较复杂的异步的方式在统计着超时，应用侧不可能做到与系统侧一样的测量方法，所以自己的统计就变得毫无意义（要么不可行，要么不准确）。还是老老实实的优化好自己的代码吧。</p></blockquote>

<h2>更多的官方资料</h2>

<ul>
<li><a href="https://developer.android.com/topic/performance/anrs/find-unresponsive-thread">Find the unresponsive thread</a></li>
<li><a href="https://developer.android.com/topic/performance/anrs/keep-your-app-responsive">Keep your app responsive</a></li>
<li><a href="https://developer.android.com/guide/topics/resources/layout-resource">Layout resource</a></li>
<li><a href="https://developer.android.com/topic/performance/vitals/anr">ANRs</a></li>
</ul>


<h2>其他优质博文</h2>

<ul>
<li><a href="https://juejin.cn/post/7181731795439157306">钉钉 ANR 治理最佳实践 | 定位 ANR 不再雾里看花</a></li>
<li><a href="https://juejin.cn/post/6940061649348853796">今日头条 ANR 优化实践系列 - 设计原理及影响因素</a></li>
<li><a href="https://juejin.cn/post/7053819042268151838">Android ANR全解析&amp;华为AGC性能管理解决ANR案例集</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[实战技巧：为Android应用设置独立的多语言]]></title>
    <link href="http://toughcoder.net/blog/2023/11/27/android-set-per-app-langauges/"/>
    <updated>2023-11-27T22:40:38+08:00</updated>
    <id>http://toughcoder.net/blog/2023/11/27/android-set-per-app-langauges</id>
    <content type="html"><![CDATA[<p>通常情况下多语言的设置都在系统设置中，应用需要做的就是提供本应用所使用的字串的多语言翻译，使用时使用R.string.app_name类似的引用，然后系统会根据用户在系统设置中的选项来选择合适的具体的语言。并且这是一个<strong>全局选项</strong>，也就是说选择一个多语言后整个手机都变了。但有些时候，应用想要自己能够设置一个独自的多语言，也就是说想要给自己的应用设置一个不同于全局的多语言。今天就来研究一下这个话题。</p>

<p><a href="http://toughcoder.net/blog/2023/11/27/android-set-per-app-langauges/"><img src="https://i2.wp.com/techvidvan.com/tutorials/wp-content/uploads/sites/2/2021/08/Android-Localization-1.jpg?fit=1200%2C628&ssl=1"></a></p>

<!--  more -->


<p>这样做的目的是为了提供更好的用户体验，因为一些仅支持某些特定语言的应用，可能会与系统全局选项冲突，或者只在某些固定地区发行的应用，单独的个性化的局部设置会更好一些。这个谷歌已经通过<a href="https://developer.android.com/jetpack">Jetpack</a>中的<a href="https://developer.android.com/jetpack/androidx/releases/appcompat">appcomat</a>库给与了比较好的支持，详细的可以<a href="https://developer.android.com/guide/topics/resources/app-languages">参考这个文档</a>，以及<a href="https://github.com/android/user-interface-samples/tree/main/PerAppLanguages">官方的Sample</a>。我们在官方文档基础之上再叠加试验和理解，做进一步的总结。</p>

<p>主要分为两种方法，一是系统支持单独给应用设置多语言；二是应用中独自设置，这个也是更为通用的解法。</p>

<p><strong>注意</strong>：这里的方法都是让某一个应用内部使用的多语言改变为相应的设置（一般情况下是与系统全局设置不一样的），但是需要注意仅仅局限于应用启动后的应用内部界面使用的语言。对于像桌面上应用的入口仍是系统全局设置为准，因为这个入口并不属于应用自己管辖范围内的。</p>

<h2>系统设置中支持为应用设置单独多语言</h2>

<p>谷歌官方的表述是从Android 13（Android T, SDK 33)开始，就支持了在系统中有一个入口，可以为每个应用单独设置多语言选项。这一部分里面描述的方法也都是支持这个系统入口的情况才能生效的。需要注意，虽然谷歌官方说从Android 13开始就支持了，但这个也要取决 于厂商的定制，目前看大部分国内厂商会把这个功能和入口给屏蔽掉，那么这里后面描述的方法也就都不会生效了。</p>

<h3>入口在哪里</h3>

<p>需要通过系统设置来进行，有两个入口：</p>

<p><img src="https://developer.android.com/static/images/about/versions/13/app-languages.png" height="480" width="320" alt="" /></p>

<ul>
<li>Settings（设置）> Additional Settings (更多设置) > Languages &amp; Input (语言和输入) > (App Languages) 应用语言 > select an app（选择一个应用）</li>
<li>Settings（设置）> Apps (应用)> select an app（选择一个应用） > Language（语言）</li>
</ul>


<p>具体的方法，又分为两种，一是自动式的，二是手动式的。</p>

<h3>自动添加</h3>

<p>说是自动，其实也是利用IDE（即Android Studio）和编译打包时自动根据res下面的多语言生成一份配置而已。在build.gradle或者build.gradle.kts中的android下面添加generateLocaleConfig = true：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">android</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">androidResources</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">generateLocaleConfig</span> <span class="p">=</span> <span class="k">true</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在resl中增加一个名为resources.properties的文件，加入默认值配置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">unqualifiedResLocale</span><span class="p">=</span><span class="n">en</span><span class="p">-</span><span class="n">US</span>
</span></code></pre></td></tr></table></div></figure>


<h3>手动添加</h3>

<p>在res/xml中增加文件locales_config.xml，加入需要支持的多语言选项，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;locale-config</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>   <span class="nt">&lt;locale</span> <span class="na">android:name=</span><span class="s">&quot;en-US&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>   <span class="nt">&lt;locale</span> <span class="na">android:name=</span><span class="s">&quot;en-GB&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>   <span class="nt">&lt;locale</span> <span class="na">android:name=</span><span class="s">&quot;fr&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>   <span class="nt">&lt;locale</span> <span class="na">android:name=</span><span class="s">&quot;ja&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>   <span class="nt">&lt;locale</span> <span class="na">android:name=</span><span class="s">&quot;zh-Hans-MO&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>   <span class="nt">&lt;locale</span> <span class="na">android:name=</span><span class="s">&quot;zh-Hant-MO&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/locale-config&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在AndroidManifest.xml中的appllication加上这一个属性：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;manifest&gt;</span>
</span><span class='line'>  ...
</span><span class='line'>  <span class="nt">&lt;application</span>
</span><span class='line'>      <span class="err">...</span>
</span><span class='line'>      <span class="na">android:localeConfig=</span><span class="s">&quot;@xml/locales_config&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/application&gt;</span>
</span><span class='line'><span class="nt">&lt;/manifest&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为还没有找到支持如此设置的手机，所以上述方法未经验证。</p>

<h2>在应用内部设置多语言</h2>

<p>这个是更为通用的做法，具体的UI就是可以随便弄了，弄个List或者DrowDownMenu都可以。重点是让设置生效的时候需要用到一个API，叫做<a href="https://developer.android.com/reference/androidx/appcompat/app/AppCompatDelegate#setApplicationLocales(androidx.core.os.LocaleListCompat">setApplicationLocales()</a>)和<a href="https://developer.android.com/reference/androidx/appcompat/app/AppCompatDelegate#getApplicationLocales(">getApplicationLocales()</a>)。并且在appcompat 1.6.0以后的版本，有比较方便的API可以直接使用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">appLocale</span><span class="p">:</span> <span class="n">LocaleListCompat</span> <span class="p">=</span> <span class="n">LocaleListCompat</span><span class="p">.</span><span class="n">forLanguageTags</span><span class="p">(</span><span class="s">&quot;xx-YY&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">// Call this on the main thread as it may require Activity.restart()</span>
</span><span class='line'><span class="n">AppCompatDelegate</span><span class="p">.</span><span class="n">setApplicationLocales</span><span class="p">(</span><span class="n">appLocale</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果要还原使用系统设置中的全局多语言配置，可以用LocaleListCompat.getEmptyLocaleList()当作参数。</p>

<p><strong>特别注意</strong>：此方法要想生效，宿主Activity必须是继承自appcompat中的AppCompatActivity，而不是其他 。</p>

<p>为了兼容以前的版本（Android 12，API level 32以前），还需要在AndroidManifest中添加一个额外的Service：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;application</span>
</span><span class='line'>  <span class="err">...</span>
</span><span class='line'>  <span class="err">&lt;service</span>
</span><span class='line'>    <span class="na">android:name=</span><span class="s">&quot;androidx.appcompat.app.AppLocalesMetadataHolderService&quot;</span>
</span><span class='line'>    <span class="na">android:enabled=</span><span class="s">&quot;false&quot;</span>
</span><span class='line'>    <span class="na">android:exported=</span><span class="s">&quot;false&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta-data</span>
</span><span class='line'>      <span class="na">android:name=</span><span class="s">&quot;autoStoreLocales&quot;</span>
</span><span class='line'>      <span class="na">android:value=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/service&gt;</span>
</span><span class='line'>  ...
</span><span class='line'><span class="nt">&lt;/application&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要注意，这个Service在appcomat库中已经定义好了，只需要在manfiest里添加一下就可以了。</p>

<p>另外需要注意的是，一般情况下，应用自己肯定 会保存一下当前用户所选择的语言。但如果系统也支持应用语言选择入口的话，那么通过系统入口也是可能会修改应用的多语文选项的，这时，就需要把系统的选项与应用内部的选项进行同步。可以通过<a href="https://developer.android.com/reference/androidx/appcompat/app/AppCompatDelegate#getApplicationLocales(">AppCompatDelegate.getApplicationLocales</a>)来获取当前生效的语言选项，它是由appcompat库来维护的，肯定是最新的，所以应用自己保存的选项如果与这个API的结果不一致，就要重置为这个API的结果。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://developer.android.com/guide/topics/resources/app-languages">Per-app language preferences</a></li>
<li><a href="https://github.com/android/user-interface-samples/tree/main/PerAppLanguages">user-interface-samples/PerAppLanguages</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[线性排序算法总结]]></title>
    <link href="http://toughcoder.net/blog/2023/10/26/understanding-linear-sorting-algorithm/"/>
    <updated>2023-10-26T23:04:18+08:00</updated>
    <id>http://toughcoder.net/blog/2023/10/26/understanding-linear-sorting-algorithm</id>
    <content type="html"><![CDATA[<p><strong>排序</strong>是程序设计中的最为基础也是最为重要的算法，从程序设计这一行业开始，便有了对排序的研究，至今到了人工智能大行其道的时代，算法科学家们对排序的探索仍未停止。这是因为计算机是处理信息的最为高效的工具，如何高效的处理信息则是计算机科学的重中之重，而要想高效的处理信息，就必须先对信息进行排序，因为各种高效率的信息检索必须要基于已排序的数据。</p>

<p><a href="http://toughcoder.net/blog/2023/10/26/understanding-linear-sorting-algorithm/"><img src="https://i0.wp.com/www.xamnation.com/wp-content/uploads/2020/07/sorting-algorithms.png?fit=2240%2C1260&ssl=1" title="auto auto" ></a></p>

<!-- more -->


<p>总的来说排序算法分为三大类：</p>

<ol>
<li>常规排序，也称为低效排序，如冒泡排序，插入排序，选择排序等，复杂度是O(n<sup>2</sup>)，空间复杂度都为O(1)</li>
<li>高效排序，如谢尔排序，快速排序，归并排序，堆排序等，复杂度是O(nlogn)，空间复杂度一般为O(logn)</li>
<li>线性排序，或者叫做非比较排序，仅针对特定数据集（有固定范围的整数集合）有效，如计数排序，基数排序，桶排序等，复杂度是O(n)，但至少需要O(n)的空间复杂度</li>
</ol>


<p>排序算法属于编程的基础，相关的文章一大把，集大成者有Yu神的<a href="https://leetcode.cn/circle/discuss/eBo9UB/">十大排序从入门到入赘</a>。今天重点整理一下线性排序算法。</p>

<h2><a href="https://en.wikipedia.org/wiki/Counting_sort">计数排序</a></h2>

<p><img src="https://www.cdn.geeksforgeeks.org/wp-content/uploads/scene02521.jpg" alt="" /></p>

<p>计数排序的核心思想是<strong>统计输入数组每个元素的频次</strong>，然后按照频次表的顺序把原始数据都输出出来。它的输入必须是一组有固定范围的整数，而且范围不应该太大，否则空间浪费严重。具体步骤如下：</p>

<ol>
<li>找出输入数据的范围，即其最大值max，创建一个长度为max + 1的整数数组，这是频次数组freq</li>
<li>遍历输入数组，对其元素进行频次统计，也就是把元素当作频次数组的下标，来统计freq[arr[i]]++</li>
<li>遍历频次数组，按频次输出元素，得到的就是一个有序数组</li>
</ol>


<p>伪码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python3'><span class='line'><span class="k">def</span> <span class="nf">countSort</span><span class="p">(</span><span class="n">arr</span><span class="p">):</span>
</span><span class='line'>  <span class="nb">len</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>  <span class="n">freq</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="nb">len</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">arr</span><span class="p">:</span>
</span><span class='line'>      <span class="n">freq</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">++</span>
</span><span class='line'>  <span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">):</span>
</span><span class='line'>      <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">freq</span><span class="p">[</span><span class="n">i</span><span class="p">]):</span>
</span><span class='line'>          <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">res</span>
</span></code></pre></td></tr></table></div></figure>


<h3>具有稳定特质的计数排序</h3>

<p>默认的方法（上面描述）的<strong>是不稳定的</strong>，所谓排序的稳定性是指对于比较起来相等的两个元素能否在结果数组中保留它们在原数组的先后顺序。一般情况下，不需要稳定时也不用管。但当在其他地方使用计数排序时，如在基数排序中使用计数排序，那么稳定性就相当重要了。</p>

<p>如果想要稳定，就需要额外做些事情：<strong>要保证先放入的数先输出（在前面），后放的后输出（在后面）</strong>，可以对频次数组求前缀和，然后遍历频次时是从后往前遍历，同时更新频次：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python3'><span class='line'><span class="k">def</span> <span class="nf">stableCoutingSort</span><span class="p">(</span><span class="n">arr</span><span class="p">):</span>
</span><span class='line'>  <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># find max to determine the range of input array</span>
</span><span class='line'>  <span class="nb">len</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>  <span class="n">freq</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="nb">len</span>
</span><span class='line'>  <span class="c"># count the frequency</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">arr</span><span class="p">:</span>
</span><span class='line'>      <span class="n">freq</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">++</span>
</span><span class='line'>  <span class="c"># presum the frequency</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">):</span>
</span><span class='line'>      <span class="n">freq</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span> <span class="n">frq</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>  <span class="c"># output by iterating backwardly</span>
</span><span class='line'>  <span class="n">out</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">n</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>      <span class="n">out</span><span class="p">[</span><span class="n">freq</span><span class="p">[</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>      <span class="n">freq</span><span class="p">[</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span><span class="o">--</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">out</span>
</span></code></pre></td></tr></table></div></figure>


<h3>应用条件</h3>

<p>需要十分注意，计数排序可应用的条件很严格，只有数据集是范围不大的正整数时才可以使用，要不然空间浪费严重。最适合应用计数排序的场景是数组数值范围很小，但元素数量很多，也就是说<strong>元素数量远大于数值范围</strong>，比如说基数排序中，针对每一数位排序时，就是典型应用计数排序的地方，这时数值范围只有0~9，元素数量可能很多，非常适合计数排序。</p>

<p>当然，有负数时也可以使用，这时需要把数据加上最小的负数，平移到0以后就可以了，比如最小值（负数）是min，那么转化为arr[i]-min即可。</p>

<h2><a href="https://en.wikipedia.org/wiki/Radix_sort">基数排序</a></h2>

<p><img src="https://image1.slideserve.com/2528167/radix-sort-in-action4-l.jpg" alt="" /></p>

<p>基数排序是以<strong>整数数制的数位为依据</strong>来排序，比如123，一共有3个数位分别是1，2和3。把数组中的每个元素都按照它们的每一个数位进行排序，之后即是结果，可以从低位到位的顺序（右到左），也可以从高位到低位的顺序（左到右）。针对每个数位排元素时可以应用计数排序。但要是<strong>稳定版本的计数排序</strong>，比如{11, 23, 25}三个数，先按最低位排序后是{11, 23, 25}，这时再按十分位排序时，如果不稳定就可能会排出{11, 25, 23}这样的结果，因此 需要稳定版本的排序。具体过程如下：</p>

<ol>
<li>求出最大数位，或者说<strong>最宽的数</strong>，对于整数来说也就是找出最大值，然后求出其数位宽度width</li>
<li>对每个数位进行循环，循环次数就是width，每一轮就是针对 一个数位排序，可以用稳定版本的计数排序</li>
<li>结束后就得到了结果</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python3'><span class='line'><span class="k">def</span> <span class="nf">radixSort</span><span class="p">(</span><span class="n">arr</span><span class="p">):</span>
</span><span class='line'>  <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
</span><span class='line'>  <span class="n">m</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
</span><span class='line'>  <span class="n">width</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">base</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">m</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>      <span class="n">width</span><span class="o">++</span>
</span><span class='line'>      <span class="n">m</span> <span class="o">/=</span> <span class="n">base</span>
</span><span class='line'>  <span class="n">out</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">n</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">width</span><span class="p">):</span>
</span><span class='line'>      <span class="n">freq</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="mi">10</span>
</span><span class='line'>      <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">arr</span><span class="p">:</span>
</span><span class='line'>          <span class="n">ridx</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span> <span class="o">%</span> <span class="n">base</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="n">base</span> <span class="o">/</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>          <span class="n">freq</span><span class="p">[</span><span class="n">ridx</span><span class="p">]</span><span class="o">++</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">):</span>
</span><span class='line'>          <span class="n">freq</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">+=</span> <span class="n">freq</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>      <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>          <span class="n">idx</span> <span class="o">=</span> <span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">%</span> <span class="n">base</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="n">base</span> <span class="o">/</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>          <span class="n">out</span><span class="p">[</span><span class="n">freq</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span><span class='line'>          <span class="n">freq</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span><span class="o">--</span>
</span><span class='line'>      <span class="n">arr</span> <span class="o">=</span> <span class="n">out</span>
</span><span class='line'>      <span class="n">base</span> <span class="o">*=</span> <span class="mi">10</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">return</span> <span class="n">arr</span>
</span></code></pre></td></tr></table></div></figure>


<h3>复杂度和应用范围</h3>

<p>跟三个变量有关，输入数组长度n，最大宽度width，以及数制数位的范围d，时间复杂度为O(width * (n + d))，对于常规整数来说d是10，而width顶多也就10左右（整数有范围的），都可忽略，因此时间复杂度是O(n)。空间复杂度也是O(n)。</p>

<p>基数排序可以应用于整数，对于有负数的情况，只需要把数平移到0以右就可以了。</p>

<p>另外，可以拓展到其他数制，比如16进制，8进制，甚至字符串也都可以。</p>

<h2><a href="https://en.wikipedia.org/wiki/Bucket_sort">桶排序</a></h2>

<p><img src="https://www.simplilearn.com/ice9/free_resources_article_thumb/Bucket-Sort-Algorithm-Soni/what-is-bucket-sort-algorithm.png" alt="" /></p>

<p>桶排序其实是<strong>分治</strong>，它的核心思想是把数据以一定的数据范围分成若干个桶，每个桶再应用其他的排序算法，然后再按照桶的顺序把桶里的数据接在一起就是结果了：</p>

<ol>
<li>确定数值范围min, max和桶数量k，然后得到一些区间</li>
<li>以这些区间来把数据进行分桶</li>
<li>每个桶单独排序</li>
<li>以桶的顺序 把结果连接在一起</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python3'><span class='line'><span class="k">def</span> <span class="nf">bucketSort</span><span class="p">(</span><span class="n">arr</span><span class="p">):</span>
</span><span class='line'>  <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
</span><span class='line'>  <span class="n">k</span> <span class="o">=</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">4</span>
</span><span class='line'>  <span class="nb">min</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">max</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
</span><span class='line'>  <span class="n">buckets</span> <span class="o">=</span> <span class="p">[[]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">k</span><span class="p">)]</span>
</span><span class='line'>  <span class="n">interval</span> <span class="o">=</span> <span class="p">(</span><span class="nb">max</span> <span class="o">-</span> <span class="nb">min</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="n">k</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">arr</span><span class="p">:</span>
</span><span class='line'>      <span class="n">bidx</span> <span class="o">=</span> <span class="nb">int</span><span class="p">((</span><span class="n">x</span> <span class="o">-</span> <span class="nb">min</span><span class="p">)</span> <span class="o">/</span> <span class="n">interval</span><span class="p">)</span>
</span><span class='line'>      <span class="n">buckets</span><span class="p">[</span><span class="n">bidx</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">buckets</span><span class="p">:</span>
</span><span class='line'>      <span class="n">sort</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>  <span class="n">out</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">buckets</span><span class="p">:</span>
</span><span class='line'>      <span class="n">out</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">out</span>
</span></code></pre></td></tr></table></div></figure>


<h3>复杂度与适用范围</h3>

<p>复杂度取决 于桶的个数k以及每个桶的排序方法，如果采用O(n<sup>2</sup>)，那么就会是O(n<sup>2</sup> / k)，如果采用O(nlogn)就会是O(nlog(n/k))，空间复杂度是O(n)。</p>

<p>需要注意，<strong>桶排序适用于浮点型</strong>，只要是数就可以。至于稳定性，则要看桶内排序算法的选择。</p>

<p>其实，如果是整数，无论范围是啥样的，都没有必要采用桶排序，因为桶排序 的复杂度不会估于O(nlogn)的。而如果桶内再采用计数或者基数排序的话（假如输入的是整数数组）就相当于脱了裤子放屁，因为本可以不用分桶的，直接采用计数排序或者基数排序。</p>

<p>桶排序适用于<strong>数据在桶中分布较均匀</strong>的场景，这样性能会达到最优。因为如果桶分配的不均匀，假如某一个桶中集中了绝大部分数据，其他桶几乎没有，这跟不分桶有啥区别（就像一个极不平衡的二叉树一样）。</p>

<h3>典型问题</h3>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/contains-duplicate-iii/description/">220. 存在重复元素 III</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/contains-duplicate-iii/solutions/2566509/xi-you-yuan-su-220-cun-zai-zhong-fu-yuan-7zh8/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h2>总结</h2>

<p>今天重点学习了三种非比较排序算法，都是线性复杂度的，但它们并不是普适的算法，都<strong>有着特定的应用场景</strong>。要深刻理解它的原理和适用范围，以在实际运用中能够根据实际的问题灵活选择。</p>

<p>对于整数集合而言，如果元数数量远大于其数值范围，那么就用计数排序；否则就用基数排序。</p>

<p>对于浮点数，可以考虑使用桶排序。</p>

<p>当然 不可以死学，这些算法背后的核心思想也是可以用来解其他的题目的，比如桶的分治思想，以及像基数的以数位来处理问题的思想，可以拓展到字符排序等等。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://leetcode.cn/circle/discuss/eBo9UB/">十大排序从入门到入赘</a></li>
<li><a href="https://www.geeksforgeeks.org/counting-sort/">Counting Sort – Data Structures and Algorithms Tutorials</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1684188">漫画：什么是计数排序？</a></li>
<li><a href="https://oi-wiki.org/basic/counting-sort/">计数排序</a></li>
<li><a href="https://www.geeksforgeeks.org/radix-sort/">Radix sort</a></li>
<li><a href="https://www.cnblogs.com/bigsai/p/13977411.html">八大排序算法—16张图搞懂基数排序</a></li>
<li><a href="https://oi-wiki.org/basic/radix-sort/">基数排序</a></li>
<li><a href="https://www.geeksforgeeks.org/bucket-sort-2/">Bucket sort</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/125737294">【算法】排序算法之桶排序</a></li>
<li><a href="https://oi-wiki.org/basic/bucket-sort/">桶排序</a></li>
<li><a href="http://data.biancheng.net/view/115.html">桶排序（箱排序）原理及其时间复杂度详解</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[理解摩尔投票算法]]></title>
    <link href="http://toughcoder.net/blog/2023/10/09/understanding-boyer-moore-voting-algorithm/"/>
    <updated>2023-10-09T20:40:58+08:00</updated>
    <id>http://toughcoder.net/blog/2023/10/09/understanding-boyer-moore-voting-algorithm</id>
    <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm">摩尔投票法(Boyer–Moore majority vote algorithm)</a>，也称为『多数投票法』，这个算法解决的问题是：如何在任意多的候选人中，选出获利票数最多的那个。从算法的角度来说就是在一个长度为n的数组中，找出出现次数大于n/2的那个数，称为<strong>多数元素</strong>或者<strong>主要元素</strong>(Majority Element)。</p>

<p><a href="http://toughcoder.net/blog/2023/10/09/understanding-boyer-moore-voting-algorithm/"><img src="https://tse2-mm.cn.bing.net/th/id/OIP-C.9kA_yyWm90PJSlwlt_XWMQHaEK?pid=ImgDet&rs=1" title="auto auto" ></a></p>

<!-- more -->


<h2>理解摩尔投票算法</h2>

<p>它的核心思想是让不同的数『相互抵消』，那么剩下的那个数就是Majority Element。要这样来理解，把数组想像成为很多不同颜色的气球，不同颜色的气球相撞就会两两爆破，那么我们让这些不同颜色 的气球两两爆破，最后剩下的那个颜色一定是数量最多的气球。</p>

<p><img src="https://i0.wp.com/strategicpeacock.com/wp-content/uploads/2015/09/colorful-balloons-hd-wallpapers-download-colorful-balloons-images-free1.jpeg" alt="" /></p>

<p>它分为两个步骤：</p>

<ol>
<li>相互抵消</li>
<li>验证结果</li>
</ol>


<p>伪码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">majorityElement</span><span class="p">(</span><span class="n">arr</span><span class="p">):</span>
</span><span class='line'>   <span class="c"># step 1: kill each other</span>
</span><span class='line'>   <span class="n">major</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>   <span class="n">vote</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>   <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">arr</span><span class="p">:</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">vote</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">x</span> <span class="o">!=</span> <span class="n">major</span><span class="p">:</span>
</span><span class='line'>          <span class="n">vote</span><span class="o">--</span>
</span><span class='line'>      <span class="k">else</span> <span class="k">if</span> <span class="n">vote</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>          <span class="n">major</span> <span class="o">=</span> <span class="n">x</span>
</span><span class='line'>          <span class="n">vote</span><span class="o">++</span>
</span><span class='line'>      <span class="k">else</span><span class="p">:</span>
</span><span class='line'>          <span class="n">vote</span><span class="o">++</span>
</span><span class='line'>
</span><span class='line'>   <span class="c"># verifty the major element</span>
</span><span class='line'>   <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>   <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">arr</span><span class="p">:</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="n">major</span><span class="p">:</span>
</span><span class='line'>          <span class="n">count</span><span class="o">++</span>
</span><span class='line'>   <span class="k">if</span> <span class="n">count</span> <span class="o">&gt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">major</span>
</span><span class='line'>   <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="bp">None</span>
</span></code></pre></td></tr></table></div></figure>


<p>它的优点在于效率高，能够以O(n)的效率找到数组中的多数元素，并且不占用额外空间。如果能够确定数组中存在多数元素，那么第2步验证过程可以省略。否则的话还要再遍历一次数组，对第1步低消过程中留存下来的多数元素进行计数，验证其频次是否达到要求（如超过n/2）。</p>

<h2>证明</h2>

<p>该算法其实有一些前提，那就是超过n/2的多数元素只会有一个，可以用反证法来证明，如果存在两个多数元素，x是多数元素数量为m，y是另一个多数元素数量为n，根据定义，m和n都大于n/2是不可能的，与假设矛盾，因此原命题成立。</p>

<p><img src="https://yyc-images.oss-cn-beijing.aliyuncs.com/leetcode_229_two_candidates.png" alt="" /></p>

<p>同理，还可以推广到超过n/3的多数最多有2个，超过n/m的多数元素最多有m-1个。</p>

<h2>典型题目</h2>

<h2>典型题目</h2>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/majority-element/">169. 多数元素</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/majority-element/solutions/1395882/by-alexhilton-upn7/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/majority-element-ii/description/">229. 多数元素 II</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/majority-element-ii/solutions/2473700/xi-you-yuan-su-229-duo-shu-yuan-su-iiha-80mpo/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h2>参考资料</h2>

<ul>
<li><a href="https://www.geeksforgeeks.org/boyer-moore-majority-voting-algorithm/">Boyer-Moore Majority Voting Algorithm</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1600607">图解算法 | 摩尔投票法求多数元素</a></li>
<li><a href="https://www.zhihu.com/question/49973163">如何理解摩尔投票算法？</a></li>
<li><a href="https://juejin.cn/post/6983311959588339743">使用摩尔投票法解决多数问题</a></li>
<li><a href="https://blog.csdn.net/qq_44443986/article/details/112366223">算法 摩尔投票算法(图解例题)</a></li>
<li><a href="https://blog.csdn.net/u014248127/article/details/79230221">摩尔投票算法( Boyer-Moore Voting Algorithm)</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/104609555">摩尔投票法(Boyer–Moore majority vote algorithm)</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Weather App With Jetpack Compose]]></title>
    <link href="http://toughcoder.net/blog/2023/09/19/weather-app-with-jetpack-compose/"/>
    <updated>2023-09-19T21:10:56+08:00</updated>
    <id>http://toughcoder.net/blog/2023/09/19/weather-app-with-jetpack-compose</id>
    <content type="html"><![CDATA[<p>现在满屏的Compose，近期也看了一些教程，似懂非懂，总感觉还缺点什么，于是有必要使用这些新技术来构造一个真实的Android App，以加深理解。第一个实例就是想做一个天气查询和展示的应用，使用<a href="https://developer.android.com/jetpack/compose">Jetpack Compose</a>以及Google推荐的<a href="https://developer.android.com/modern-android-development">MAD（Modern Android Development）</a>。</p>

<p><a href="http://toughcoder.net/blog/2023/09/19/weather-app-with-jetpack-compose/"><img src="http://images.shejidaren.com/wp-content/uploads/2013/09/weather-app.jpg" title="auto auto" ></a></p>

<!-- more -->


<h2>核心目的</h2>

<p>学习使用Jetpack Compose构建UI，和学习新的架构方式（MVVM）。其实我们不是只读式的学习，更重要的是要在一个真实的项目中去实践这些知识。</p>

<p>Follow官方的教程和建议，先由最简单的版本，一步步的使用这些轮子打造我们的天气应用。</p>

<p><strong>特别注意</strong>：此行不是为了做一个天气App，而是以MAD的方式来构建App，每一步都要<a href="https://m3.material.io/">符合设计规范</a>和<a href="https://developer.android.com/topic/architecture">架构原则</a>，不留破窗。</p>

<h2>技术栈</h2>

<p><img src="https://innovationm.co/wp-content/uploads/2021/05/Jetpack-compose.png" alt="" /></p>

<p>使用MAD，Jpetpack和Compose，以及<a href="https://developer.android.com/jetpack/androidx/releases/compose-material3">Material Design</a>。</p>

<h2>Weather API</h2>

<p>使用 <a href="https://dev.qweather.com/docs/start/">和风API</a>。</p>

<h2>第一个版本</h2>

<p>本着<a href="http://toughcoder.net/blog/2023/08/08/understanding-minimum-viable-product/">MVP的原则</a>，第一个版本尽量简单，实现核心需求即可，第一个版本的目标：查询预定列表中的城市天气，并展示其详细天气信息。</p>

<p>流程图：</p>

<script type="module">
  import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';
  mermaid.initialize({ startOnLoad: true });
</script>




<div class="mermaid">
flowchart TD
    A([Start]) &#45;&#45;> C{Has preferred city?}
    C &#45;&#45;> |No| E([Show City list])
    E &#45;&#45;> F([Pick a city])
    F &#45;&#45;> J([Save as prefered])
    J &#45;&#45;> D
    C &#45;&#45;> |Yes| D([Show detail page])
    D &#45;&#45;> G{data need refresh?}
    G &#45;&#45;> |Yes| H([Get weather data])
    H &#45;&#45;> D
    G &#45;&#45;> |No| I([End])
</div>


<h3>第一步：构建UI</h3>

<p>第一版本中的第一步，不用网络，全用fake data，把需要的两个页面构建出来，目的在于搭建基础设施，并把流程跑通。</p>

<h3>第二步：接入Weather API</h3>

<p>获取真实的天气数据，并完善天气详情页面。</p>

<h2>Reference</h2>

<ul>
<li><a href="https://juejin.cn/post/7176875120839884860">从 0 到 1 搞一个 Compose Desktop 版本的天气应用（附源码）</a></li>
<li><a href="https://juejin.cn/column/7127467629022806030">天气App系列文章</a></li>
<li><a href="https://github.com/harsh2907/JetWeather">A weather app built on MVVM architecture with jetpack compose and other jetpack libraries</a></li>
<li><a href="https://github.com/Felix-Kariuki/JetWeather">A weather app built using Jetpack compose</a></li>
<li><a href="https://github.com/Mercandj/android-dev-challenge-compose-4">Weather app done in Jetpack Compose for the #AndroidDevChallenge 2021 🌦 ☀️. Neumorphism UI.</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding Kotlin Delegation]]></title>
    <link href="http://toughcoder.net/blog/2023/09/14/understanding-kotlin-delegation/"/>
    <updated>2023-09-14T22:01:46+08:00</updated>
    <id>http://toughcoder.net/blog/2023/09/14/understanding-kotlin-delegation</id>
    <content type="html"><![CDATA[<p>委托或者说委派，是一种设计机制，实现者并不真正的实现某些方法（行为），而是让另外一个对象来当真正的实现者。委拖与依赖注入和延时加载技术结合在一起会产生非常巨大的威力，让代码不但灵活方便扩展，也非常的优雅，但确实会较难以理解。<a href="https://kotlinlang.org/docs/delegation.html">委托机制(Delegation)</a>在Kotlin中的支持是很友好的，并且非常完善，用关键字by和lazy一起就可以写出非常强大的委拖机制代码。</p>

<p><a href="http://toughcoder.net/blog/2023/09/14/understanding-kotlin-delegation/"><img src="https://hashnode.com/utility/r?url=https:%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1629222884259%2FI3f9YGK1M.png%3Fw%3D1200%26h%3D630%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp%26fm%3Dpng" title="auto auto" ></a></p>

<!-- more -->


<h2><a href="https://en.wikipedia.org/wiki/Delegation_pattern">Delegation Pattern</a></h2>

<p>要想理解Kotlin中的委托，要先理解一下设计模式中的委托模式。严格来说委拖并不是一种设计模式，因为它并没有固定的范式，在GoF以及很多关于设计模式的书中并没有这一模式，准确的来说它是一种行为的实现方式，并不自己直接实现，而是委派给另外一个对象的方法。委托是一种行为模式，它只注重于行为，一般情况下都是对对象的方法进行委托，或者行为产生的结果也就是一个变量或者对象的域也可以委托，但只能委托给一个函数，这个函数会产生结果，以得到域的值。</p>

<p><img src="https://assets.alexandria.raywenderlich.com/books/des/images/c57492352703ffd13faa67205936b3bcb113947305da80d0be80770d0ceea10e/original.png" alt="" /></p>

<h3>委托与代理的区别</h3>

<p>代理是一种正式的设计模式，它强调的是权限和隔离，client只能访问到proxy，而并不知道realObject。而委托是一种实现机制，不自己实现，委派给其他对象去实现，它更强调的是行为和结果。代理是一种委托机制，但委托并不是代理。</p>

<p><img src="https://i1.wp.com/www.robertlarsononline.com/wp-content/uploads/2017/05/ProxyPatternGeneric.png?resize=700%2C388&amp;ssl=1" alt="" /></p>

<p>在理解了委托的概念后，就可以进一步的来看一下Kotlin中的委托了。</p>

<h2><a href="https://kotlinlang.org/docs/delegation.html">实现委托</a></h2>

<p>就是某一个类的实现，完全委托给另外一个对象，为了保持行为的一致，它们都实现了某一个接口。用关键字by来实现这一委托机制：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">interface</span> <span class="n">Base</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">print</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">BaseImpl</span><span class="p">(</span><span class="k">val</span> <span class="py">x</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">:</span> <span class="n">Base</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">print</span><span class="p">()</span> <span class="p">{</span> <span class="n">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Derived</span><span class="p">(</span><span class="n">b</span><span class="p">:</span> <span class="n">Base</span><span class="p">)</span> <span class="p">:</span> <span class="n">Base</span> <span class="k">by</span> <span class="n">b</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">b</span> <span class="p">=</span> <span class="n">BaseImpl</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>
</span><span class='line'>    <span class="n">Derived</span><span class="p">(</span><span class="n">b</span><span class="p">).</span><span class="n">print</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>类Drived也实现了接口Base，但它并没有自己去实现方法，而是委派给了它的构造参数b，b也是一个实现了接口的对象。这样Drived的行为就都委托给了对象b。而b则可以是任何一个实现了Base接口的对象，并且是在创建Drived时才指定的。更进一步的，这里可以用工厂方法，因为只要能生成一个实现了Base接口的对象即可，甚至可以用依赖注入来动态生成对委托对象。</p>

<p>这里需要明确一下术语，委托给别人的对象称为受托对象或者受托类，真正的做事情的人称之为委托对象。</p>

<p>Kotlin仅用一个关键字by就可以完成委托，编译器会自动生成受托类的实现，它的每个方法就直接调用委托对象的方法，可以理解 为上面的代码会编译生成这要的字节码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Derived</span> <span class="kd">extends</span> <span class="n">Base</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Base</span> <span class="n">impl</span><span class="o">;</span>
</span><span class='line'>    <span class="n">override</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">impl</span><span class="o">.</span><span class="na">print</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2><a href="https://kotlinlang.org/docs/delegated-properties.html">属性委托</a></h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">Example</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">p</span><span class="p">:</span> <span class="n">String</span> <span class="k">by</span> <span class="n">Delegate</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>属性委托是把属性的getter/setter委托给某一个函数，或者某一个对象（这个对象要有setValue/getValue方法，本质上仍是委托给一个函数）。</p>

<h2><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/lazy.html">延时机制(lazy)</a></h2>

<p>延时机制的委托才能产生最大的威力，而在Kotlin中，借助by和lazy就能对对象的属性实现延时委托机制，让只有在必要的时候(即第一次访问这个属性的时候)才生产出属性的真实值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">lazyValue</span><span class="p">:</span> <span class="n">String</span> <span class="k">by</span> <span class="n">lazy</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;computed!&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="s">&quot;Hello&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="n">lazyValue</span><span class="p">)</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="n">lazyValue</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实，by lazy可以应用在任何地方，不光是属性，常规的变量也是可以的。另外，需要注意lazy不但是第一次用到此变量时才会此具体计算，而且也只计算一次，后续再访问时，会从cache中读取首次计算后的值：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">var</span> <span class="py">foo</span> <span class="k">by</span> <span class="n">lazy</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">someCondition</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>         <span class="n">generate</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>         <span class="n">defaultValue</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个例子，假如第一次访问变量foo时，执行lazy后时someCondition是false就会返回defaultValue，而且后续再访问foo也不会再执行这个尾部lambda了，会直接返回defaultValue，因为它被cache住了。所以一般用lazy都是要针对 只读变量，也即<code>val foo by lazy { ... }</code>，这才是最正统的用法。</p>

<p>需要注意，lazy并不是一个关键字，它是一个函数，它只有一个参数就是一个lambda，所以可以写成尾部lambda的方式。</p>

<h2>常规委托</h2>

<p>使用by关键字就可以实现委托，这除了可以用于类的实现，属性实现以外，其实任何一个变量也可以用by来委托给一个函数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">var</span> <span class="py">expand</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="k">true</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参考资料</h2>

<ul>
<li><a href="https://www.cnblogs.com/itzhoucong/p/14255117.html">设计模式（二）之委派模式（Delegate Pattern）深入浅出 </a></li>
<li><a href="https://learnku.com/docs/99-software-pattern/delegation-pattern/12018">委托模式 Delegation Pattern</a></li>
<li><a href="https://www.zhihu.com/question/23123039">编程设计模式中委托 和代理模式什么区别？</a></li>
<li><a href="https://stackoverflow.com/questions/38250022/what-does-by-keyword-do-in-kotlin">What does &lsquo;by&rsquo; keyword do in Kotlin?</a></li>
<li><a href="https://blog.csdn.net/wzgiceman/article/details/82689135">Kotlin -by 详解</a></li>
<li><a href="https://juejin.cn/post/7057675598671380493">Kotlin常用的by lazy你真的了解吗</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[More About Kotlin Functions]]></title>
    <link href="http://toughcoder.net/blog/2023/09/13/more-about-kotlin-functions/"/>
    <updated>2023-09-13T20:52:36+08:00</updated>
    <id>http://toughcoder.net/blog/2023/09/13/more-about-kotlin-functions</id>
    <content type="html"><![CDATA[<p>Kotlin中的函数是一级对象，除了常规的函数式编程以外，还支持一些非常灵活的特殊用法，可以大大增强代码的可读性和简洁性，让代码更加的优雅，在业界顶级的库如Compose中有大量的应用，今天就来学习一些，以扫清学习Compose的障碍。</p>

<p><a href="http://toughcoder.net/blog/2023/09/13/more-about-kotlin-functions/"><img src="https://www.callicoder.com/static/faf261ddf8d3f25d8c48da997d9a2dc1/kotlin-functions.png" title="auto auto" ></a></p>

<!-- more -->


<h2><a href="https://kotlinlang.org/docs/extensions.html">Extension Functions</a></h2>

<p>与传统的编程语言如C/C++，Java或者Python最大的不同就是，Kotlin对于类的扩展提供了相当灵活的方式。像Java和Python除了标准的继承方式以外，就只能用注解和Decorator。但对于Kotlin还可以用<a href="https://kotlinlang.org/docs/extensions.html">Extensions</a>这一方式。无论是注解还是Decorator，它的使用方式还是比较笨拙的，可以明显的看出来是额外定义的函数，与原Class是没啥关系的。</p>

<p><img src="https://thetechstack.net/assets/images/banners/kotlin-extension-function.png" alt="" /></p>

<p>比如说，对于整数来说，我们通常会有求绝对值，通常可以这样写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">abs</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="p">&lt;</span> <span class="m">0</span><span class="p">)</span> <span class="p">-</span><span class="n">a</span> <span class="k">else</span> <span class="n">a</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后，这样使用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">aa</span> <span class="p">=</span> <span class="n">abs</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>但在Kotlin中，有更优雅的方式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">Int</span><span class="p">.</span><span class="n">abs</span><span class="p">()</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="k">this</span> <span class="p">&lt;</span> <span class="m">0</span><span class="p">)</span> <span class="p">-</span><span class="k">this</span> <span class="k">else</span> <span class="k">this</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span><span class="p">((-</span><span class="m">4</span><span class="p">).</span><span class="n">abs</span><span class="p">())</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="m">100.</span><span class="n">abs</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<p>这就是Extension functions，这样定义了后，可以像整数类型本身定义的方法那样直接在其对象上面调用。</p>

<h3>如何定义Extension functions</h3>

<p>Extension functions是针对Class的，或者一个Type的，指定目标Class名字，和参数就可以了，在函数的内部this就是调用函数时的对象。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="err">&lt;</span><span class="nf">ClassName</span><span class="p">&gt;.&lt;</span><span class="n">function</span> <span class="n">name</span><span class="p">&gt;(</span><span class="n">params</span><span class="p">...):</span> <span class="k">return</span> <span class="k">type</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// this is the function&#39;s receiver, which is the object when function invoked.</span>
</span><span class='line'>  <span class="c1">// function implementation</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要注意，Extension functions必须是针对Class的。</p>

<h3>理解Extension functions</h3>

<p>Extension functions并没什么高深和神秘的东西，它只是相当于一个static函数，接收目标Class的对象而已，比如说：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">Shape</span><span class="p">.</span><span class="n">area</span><span class="p">():</span> <span class="n">Int</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">length</span> <span class="p">*</span> <span class="k">this</span><span class="p">.</span><span class="n">width</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">area</span><span class="p">(</span><span class="n">shape</span><span class="p">:</span> <span class="n">Shape</span><span class="p">):</span> <span class="n">Int</span> <span class="p">=</span> <span class="n">shape</span><span class="p">.</span><span class="n">length</span> <span class="p">*</span> <span class="n">shape</span><span class="p">.</span><span class="n">width</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实这两个函数是完全一样的，上面的那个Extension function其实就相当于后面的那个常规函数。只不过在函数的调用上面更加的方便，看起来更像是目标Class提供的方法一样，更优雅一些。</p>

<h3>Extension function的作用域</h3>

<p>Extension function并不会真的对目标Class做任何修改，它只是相当于你自己定义的一个函数。所以，它的作用域就是你定义的函数的作用域，如果你是在一个文件中定义的，那么它的作用域就是导入了这个文件的地方；如果是在一个类中的，那作用域就是这个类。</p>

<p>另外的问题就是，假如在多个地方定义了相同的Extension function，会发生什么呢，相同的意思就是目标Class一样，函数名字也一样，所做的事情也一样，仍是把它当成普通函数来理解就行，按照虚拟机懒惰加载的原则，应该是第一个被引用到的Extension function生效。</p>

<h3>参考资料</h3>

<ul>
<li><a href="https://www.baeldung.com/kotlin/extension-methods">Extension Functions in Kotlin</a></li>
<li><a href="https://marketsplash.com/tutorials/kotlin/kotlin-extension-function/">Kotlin Extension Function: How To Implement And Use It</a></li>
<li><a href="https://www.geekailab.com/doc/as/book/docs/Part1/Android%E5%BC%80%E5%8F%91%E5%BF%85%E5%A4%87Kotlin%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/KotlinExtensions.html">让人爱不释手的Kotlin扩展（Extensions）技术探Extensions秘与应用</a></li>
<li><a href="https://www.jianshu.com/p/314cdb1603fc">Kotlin 扩展函数及原理</a></li>
<li><a href="https://juejin.cn/post/6935027613542907941">Kotlin 编程 #3 扩展函数（终于知道为什么 with 用 this，let 用 it）</a></li>
</ul>


<h2><a href="https://kotlinlang.org/docs/functions.html#infix-notation">Infix Functions</a></h2>

<p>准确的来说是Infix notation，它是一种执行函数的特殊方式，并不是定义了特殊的函数。也就是说某个函数被infix修饰了后，就可以用更为简洁的方式来调用它。常规的函数执行（或者说调用）是用函数名字加上括号，括号里面是参数，比如foo()，bar(&ldquo;here&rdquo;)。而infix方式则可以是 <code>参数1 函数名 参数2</code> 这种方式，也即与常规的函数调用完全不一样。看起来像是语言本身的关键字一样。</p>

<p><img src="https://www.fusebes.com/wp-content/uploads/2021/03/Post-Banners-FuseBase-17-1.png" alt="" /></p>

<p>比如，移位并不是运算符，也不是关键字，而是一个被infix修饰的二元参数函数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">finfix</span> <span class="n">un</span> <span class="n">Int</span><span class="p">.</span><span class="n">shr</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">Int</span><span class="p">):</span> <span class="n">Int</span> <span class="p">{...}</span>
</span><span class='line'>
</span><span class='line'><span class="m">8.</span><span class="n">shr</span><span class="p">(</span><span class="m">2</span><span class="p">)</span> <span class="c1">// 这样正常调用也完全可以，把整数8右移2位</span>
</span><span class='line'><span class="m">8</span> <span class="n">shr</span> <span class="m">2</span> <span class="c1">// 这是infix式的用法，其实是等同于上面的函数调用</span>
</span></code></pre></td></tr></table></div></figure>


<p>infix必须是Extension function，并且只能有一个参数，算上Extension function的接收对象，其实一共是2个参数。标准库中也定义了大量的infix，如整数位移的shr和shl。以及像一些DSL中的函数，都会定义成infix，以让代码更简洁。</p>

<p>总之，下次再见到 <code>a xyz b</code> 这种写法时，不用害怕，并不是有了新的关键字，这里的xyz是infix notation，把它当成函数调用 <code>xyz(a, b)</code> 就好了。</p>

<h3>参考资料</h3>

<ul>
<li><a href="https://www.programiz.com/kotlin-programming/infix-notation">Kotlin Infix Function Call</a></li>
<li><a href="https://www.baeldung.com/kotlin/infix-functions">Infix Functions in Kotlin</a></li>
</ul>


<h2><a href="https://kotlinlang.org/docs/inline-functions.html">inline Functions</a></h2>

<p><img src="https://cdn.educba.com/academy/wp-content/uploads/2021/04/Kotlin-Inline-Function.jpg" alt="" /></p>

<p>常规的lambda会有closure（捕获上下文中的对象），在编译后会产生很多对象，这会导致一些性能问题，但这是标准的函数式编程。</p>

<p>但某些情况下，我提供的是一个单纯的行为（lambda），比如像Collections的forEach以及filter，传入的lambda也好，或者其他函数也好，这是一个单纯的行为，你在集合中遍历时执行它就好。这种情况好，我们希望高阶函数在其函数体内直接使用传入的函数参数就可以了，不需要进行常规的对象创建（closure对象以及函数接口对象）。就可以使用inline关键字来修饰这人高阶函数。</p>

<h3>参考资料</h3>

<ul>
<li><a href="https://www.baeldung.com/kotlin/inline-functions">Inline Functions in Kotlin</a></li>
<li><a href="https://amitshekhar.me/blog/inline-function-in-kotlin">inline function in Kotlin</a></li>
<li><a href="https://www.geeksforgeeks.org/kotlin-inline-functions/">Kotlin Inline Functions</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jetpack Compose Road Map]]></title>
    <link href="http://toughcoder.net/blog/2023/09/08/jetpack-compose-road-map/"/>
    <updated>2023-09-08T23:04:44+08:00</updated>
    <id>http://toughcoder.net/blog/2023/09/08/jetpack-compose-road-map</id>
    <content type="html"><![CDATA[<p>Jetpack Compose是由Google在2019年Google I/O大会提出的新一代声明式UI框架，它基于Kotlin编程语言与Android Studio可以无缝衔接，在Google的大力推动下，现在已经变成了Android App的标准UI构建方式。网络上更是更是满屏的相关内容，如果说没有用过Compose都不好意思说自己会Android开发。是时候恶补一下了。</p>

<p><a href="http://toughcoder.net/blog/2023/09/08/jetpack-compose-road-map/"><img src="https://www.somagnews.com/wp-content/uploads/2021/02/Jetpack-Compose.jpg" title="auto auto" ></a></p>

<!-- more -->


<h2>快速上手体验</h2>

<p>可以follow下Google官方的<a href="https://developer.android.com/jetpack/compose/tutorial">Quick start</a>教程来快速体验一下。</p>

<p>可以<a href="https://developer.android.com/jetpack/compose/documentation">参考官方文档</a>以进一步了解。</p>

<h2>理解Compose</h2>

<h3>全用代码撸UI</h3>

<p>体验过Compose可以发现，它与原生的Android app UI开发完全不同，最大的区别就是全是Kotlin代码，不用再去摆弄xml了。</p>

<h3>本质是DSL</h3>

<p>其实Compose与Kotlin最初搞的<a href="https://github.com/Kotlin/anko">anko</a>是类似的东西，它的核心是利用Kotlin的语言特性来实现了一套写UI的DSL。在Compose里面所有的花括号其实都是一个函数，而且Compose里面的DSL都是用的大写字母开头的驼峰式，如<strong>Text {}</strong>，让人误以为这是一个类，但其实它是一个函数，容易让人误解不说，还不符合Kotlin语言的开发规范。这一点上当初的anko就相当的好，它的DSL命令都与函数的命名是一致（小写开头的驼峰式）。</p>

<p><strong>注意</strong>，如果Compose用起来感觉相当的别扭，这说明缺少前置知识，要把Kotlin的一些高级特性熟悉一下，比如<a href="http://toughcoder.net/blog/2023/02/14/understanding-kotlin-based-dsl/">DSL</a>，委拖机制以及扩展函数，只有把这些概念熟悉了以后，再写Compose会顺手很多。记住，Compose里面的所有东西都是函数调用，当成函数来写就可以了。</p>

<p>Compose其实就是一坨DSL，一层层的嵌套，本质上是一坨函数调用。极容易写出『箭头式』的代码，如这种：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">Greetings</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="n">names</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">List</span><span class="p">(</span><span class="m">100</span><span class="p">)</span> <span class="p">{</span> <span class="s">&quot;Compose #${it + 1}&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// A surface container using the &#39;background&#39; color from the theme</span>
</span><span class='line'>    <span class="n">Surface</span><span class="p">(</span><span class="n">modifier</span><span class="p">,</span> <span class="n">color</span> <span class="p">=</span> <span class="n">MaterialTheme</span><span class="p">.</span><span class="n">colorScheme</span><span class="p">.</span><span class="n">background</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">LazyColumn</span><span class="p">(</span><span class="n">modifier</span><span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="n">vertical</span> <span class="p">=</span> <span class="m">4.</span><span class="n">dp</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">items</span><span class="p">(</span><span class="n">items</span> <span class="p">=</span> <span class="n">names</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                 <span class="n">Greeting</span><span class="p">(</span><span class="n">it</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当view的嵌套比较深的时候，更明显，这就需要我们要及时的抽出公共的Composable组件，其实就相当于抽出函数，以让嵌套不那么深。</p>

<p>其实Android的原生UI开发方式（也即View与xml）是相当强大的，特别是在复用，如animation，drawable，color，string和dimens的复用和适配已经相当完善了。这方面Compose还是略显笨拙，因为还必须代码，甚至还可能重复的代码。对于常规的页面，比如列表（横竖或者格子）和基础UI组件（图片，文字和按扭）组合而成的页，用Compose是完全不成问题的。但对于成百上千个各种小组件时，View的结构与交互都非常复杂的页面时，如某宝某东某团的页面，或者页面有重型的组件，如Webview，如video，graphics或者游戏，Compose肯定 力不从心。这也是为何国内，特别是一些大厂其实对Compose这玩意儿并不怎么感冒，真正在产品里使用的可能还是那些国外头部app。</p>

<h3>到处是函数</h3>

<p>Compose是用函数式编程方法，所有的Composable都是顶层的函数，也即是定义在类外面的函数，通常称为顶层函数。</p>

<p>标准库以及Material库中提供的所有轮子也都是函数，虽然它们的名字是大写的驼峰式，看起来像类一样，但其实它们都是函数。所有的Composable都接收尾部lambda，它其实是函数的最后一个参数，接收的是类型为Composable的函数，因此可以用尾部lambda的方式来实现这个参数。</p>

<p>还有一点就是，很多参数接收的也是一个函数，比如像接收Icon和Text的地方，其实是一个函数，而并不是直接把具体对象传过去，像这些地方的参数实际上需要的是一个能产生目标对象的Producer。这也是标准的函数式编程思想，也就是说尽可能的传递函数而非对象，目的在于这样更为灵活，可以让参数的使用尽可能的延时生成对象，也就是仅当真实需要的时候才会运行这个函数生成对象。而在中间过程中，或者说假如出错了，进入到错误显示的逻辑或者直接退出 了，那么其实就不需要生产对象了。</p>

<p>而传统的OO方式，是在构建流程的一开始就把对象创建好，并作为参数传过去，但其实可能完全没有必要。</p>

<h2>进阶之路</h2>

<p>最好的资源莫过于官方推出的教程。
<a href="https://developer.android.com/courses/jetpack-compose/course">jetpack compose course</a>是Google官方推出的一系列教程，有视频讲解，有实战codelab，还有测试quiz。相当的丰富，可以看得出Google对Compose还是相当上心的。</p>

<h2>项目实战</h2>

<p>有一些非常优秀的真实的用Compose构建 出来的App可以供学习和参考，<a href="https://developer.android.com/jetpack/compose/samples">有些是官方的</a>，有些则是民间的，不但开源，而且还有配套的博客来说明构建 的过程，是非常难得的参考 资料。</p>

<ul>
<li><a href="https://github.com/android/compose-samples/tree/main/Jetchat">Jetchat</a> 纯Compose构建UI，适合初学者上手</li>
<li><a href="https://github.com/android/compose-samples/tree/main/Jetsurvey">Jetsurvey</a>纯Compose构建UI，适合上手</li>
<li><a href="https://github.com/android/sunflower/tree/main">Sunflower</a> 除UI外，还有网络要用到Jetpack组件</li>
<li><a href="https://github.com/android/nowinandroid/tree/main">Now in Android</a> 集大成者，Compose，加上Jetpack再上架构思维，适合高级玩家</li>
<li><a href="https://github.com/ellisonchan/ComposeMovie">电影App</a> 一个电影的简单app，配套<a href="https://blog.csdn.net/allisonchen/article/details/115052707">博客在这里</a></li>
<li><a href="https://jetpackcompose.cn/docs/">Jetpack Compose博物馆</a> 不但有教程，还有数个实例</li>
<li><a href="https://github.com/wangchenyan/wanandroid-compose">WanAndroid</a> <a href="https://www.wanandroid.com/">WanAndroid</a>的一个客户端，<a href="https://www.jianshu.com/p/cc11f2c93778">配套博客</a></li>
<li><a href="https://github.com/Mercandj/android-dev-challenge-compose-4">Compose Weather App</a> <a href="https://www.jetpackcompose.net/compose-weather-app">配套博客</a></li>
<li><a href="https://github.com/microsoft/surface-duo-compose-samples/tree/main">Surface Dual Compose Samples</a> Compose是一个跨平台的UI构建工具，不光能为Android构建，为其他平台也能构建App，<a href="https://learn.microsoft.com/zh-cn/dual-screen/android/jetpack/compose/samples">如Surface</a></li>
</ul>


<h2>参考资料</h2>

<ul>
<li><a href="https://developer.android.google.cn/kotlin/first">Android’s Kotlin-first approach</a></li>
<li><a href="https://coolshell.cn/articles/17757.html">如何重构“箭头型”代码</a></li>
<li><a href="https://developer.android.com/jetpack/compose/mental-model">Thinking in Compose</a></li>
<li><a href="https://www.jetpackcompose.net/">Jetpack Compose Tutorial</a></li>
<li><a href="https://www.jetpackcompose.app/">The #1 destination for all things Jetpack Compose</a></li>
<li><a href="https://www.theinsaneapp.com/2021/08/jetpack-compose-sample-examples-projects-and-android-apps.html">70+ Jetpack Compose Projects For Beginners And Experts</a></li>
<li><a href="https://developersbreach.com/compose/">Collection of Android Compose UI samples</a></li>
<li><a href="https://c1ctech.com/android-jetpack-compose-example/">Android Jetpack Compose Example</a></li>
<li><a href="https://blog.mindorks.com/jetpack-compose-tutorial/">Jetpack Compose Tutorial - Step by Step Guide</a></li>
<li><a href="https://foso.github.io/Jetpack-Compose-Playground/compose_projects/">Compose Projects</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[回乡见闻：感知农村的新变化]]></title>
    <link href="http://toughcoder.net/blog/2023/08/09/hometown-travel-notes/"/>
    <updated>2023-08-09T22:28:53+08:00</updated>
    <id>http://toughcoder.net/blog/2023/08/09/hometown-travel-notes</id>
    <content type="html"><![CDATA[<p>前不久休了一个星期的假，回了趟老家，一路所见所闻不少令人惊叹的事情，有必要略作小结并记录下来，也没什么特别的目的，就是把一些看到的比较有意思的事情以及产生的想法分享一下。</p>

<p><a href="http://toughcoder.net/blog/2023/08/09/hometown-travel-notes/"><img src="https://ts1.cn.mm.bing.net/th/id/R-C.4c2c27ca5d13da44d3fced7c83764ff7?rik=Y4MYdJogaFhAsQ&riu=http%3a%2f%2fimg.siluclouds.com%2fa%2fthumb%2f10009%2f201902%2f8a895a81d2c2425a656bea42dade314f.jpg!w960_h540.jpg&ehk=KlsjVgYoPkPh4RVso0rQpCyZXeeNVBbmRFABESBYr%2bM%3d&risl=&pid=ImgRaw&r=0" title="auto auto" ></a></p>

<!-- more -->


<h2>一些背景</h2>

<p>我的老家是在东北的一个贫困县城的一个村子里，跟一些讲述东北地区影视剧里面的村子是一样的。虽然是贫困县，但其实并不是想像中的那种吃不上饭，住不上房子的那种，从小到大吃穿住以及上学的费用等等都不成问题的。贫困的原因并不是生活不温饱，而是这么多年来，一直富不起来，与同区域内的较富一点的县城比，以及南方的大多数县城比，还是落后很多的，生活在这里的人也相对较穷。</p>

<p>县城下面，就是镇和乡，一个县城下面会十几个乡镇，乡和镇下面是村，我老家就住在村上，村下面还有屯儿，一个乡或镇下面会十几个村，一个村通常有十个左右的屯儿。对于生活在村里面的人来说，乡镇就是活动半径，一年会去几次县城，县城的商品是最全的，生活所需要的所有东西都能在县城买到，乡镇上最常用的东西如米面菜，零食，日用百货和常用药品也都能买 得到，到了村儿里，就只有食杂店了，零食和最常用的日用品能买 得到，屯儿的话则是啥都没有，只有生活在这里的人。</p>

<p>以前路不好，柏油水泥这种下雨天也能走的路只通到乡镇一级，而且也破败不堪。现在情况大为改观，村屯之间都修了水泥路，村屯里面的主要几条街道也都给修了水泥路，对出行有极大的改善，以前那种雨后全是大泥巴，无法出行的场景，已看不到了。因为路好了，所以走村串屯的流动商贩也远比以前多了，通常是用一个小型货车，拉车各种生活物品，一个村一个村的流动，到了村上就走街串巷的叫卖。</p>

<h2>微信无处不在</h2>

<p>令人震惊的是微信真的无处不在，已经触达了所有人，村里的老人也都用微信相互沟通。此外，商业活动和行政工作也都用微信。比如，省城到县城的客运大巴的售票都是通过微信服务号实现的，并没有官方网站。村上的行政工作，也都是通过微信，发什么通知之类的都是通过微信群，甚至有些福利的发放等也都通过微信。</p>

<p><img src="https://logodix.com/logo/1812564.png" alt="" /></p>

<p>还有一个现象是，都用微信支付，几乎看不到支付宝的影子。比如县城的出租车，乡镇村店里的收款，以及一些流动商贩都是用微信来收款，没有用支付宝的。猜测原因可能是大家平时就用微信，所以顺便用微信支付来方便交易，支付宝只有支付功能，不能用来干别的，为啥要用它？</p>

<h2>镇上的蜜雪冰城极为受欢迎</h2>

<p><img src="https://tse4-mm.cn.bing.net/th/id/OIP-C.5y5uvhFtaTE__UmR4U6xEQHaFj?pid=ImgDet&amp;rs=1" alt="" /></p>

<p>稍好一点的乡镇上有蜜雪冰城的店，并且比较受欢迎，但没看到同类型的其他品牌的饮品店。店的空间不小，有空调冷气，有舒适的位子坐，年轻人会扫码微信点餐（微信真的无所不能，无所不在啊），年纪大一点的人就现场排队点餐，所有单品均在5~10块左右，却比袋装的冷饮和瓶装的饮料口味好上不少，老少皆宜。</p>

<h2>快递最后一公里极为蛋疼</h2>

<p>村里人网购其实前几年就开始了，但现在仍不是主流，最主要的原因仍旧是快递最后一公里问题。快递包裹只能送到乡镇一级的代收点，无法到村，连京东也只是送到乡镇的代收点，后面就只能自己想办法去取。</p>

<h2>美团社区团购已深入村里</h2>

<p><img src="https://n.sinaimg.cn/sinakd20111/320/w1200h720/20210413/acde-knqqqmv1811611.jpg" alt="" /></p>

<p>最令人震惊的是村里面的人已经有不少人使用美团的社区团购了，不过只能是次日达，也就是今天下单明天送达，并且品类越来越齐全了，不但有瓜果蔬菜，米面油和酒水，连日用百货也都有了。不但村里面的年轻人会大量的下单，连一些老年人也开始大量的下单了，因为有些单品确实很便宜。并且使用相当的方便，直接用微信里面的美团小程序就能下单，微信就能登录，支付就用微信支付，即使对于老年人也是没有难度的。</p>

<p>每天下午4点左右，会有配货的车把货物送到村里面的团长家里，然后大家都去团长家里取货。商品的丰富程度与县城的超市是一样的，远比乡镇村的各种店丰富，事实上货品也都是从县城的仓库中调配出来的。</p>

<h2>手机多是HOV的中低端机</h2>

<p>村里人用的手机都是荣耀，OPPO和Vivo的中低端手机，约在1000元~2000元档，年轻一点的人用2000元往上一点的，老年人一般都是一千出头的千出头的千元机。大部分人手机中应用不多但微信，快手和抖音这三个几乎每个手机上都有。</p>

<p>手机毕竟属于较贵重的单品，前面也说了快递无法直达村，所以人们买 手机肯定是去县城里面的店里面买，这说明在县城级别的线下市场，HOV仍占绝对优势，粮厂的优势仍是在一二线城市。</p>

<h2>农村垃圾处理问题很大</h2>

<p>现在村里面垃圾处理是一个很大的问题，其实一直都是一个问题，只是以前感觉没那么明显，但现在人们生活水平好了一些，衣食方面更新的速度比以前快很多，自然产生的垃圾也多了很多，网购和社区团购也导致人们买更多的有包装的食品，这也会产生比以前更多的垃圾。</p>

<p>垃圾也不会随处丢，一般都是集中到村子外面的某一处，但也只是简单的堆放在那里，没有进一步的处理方式（如填埋或者焚烧），有的管理稍好一点的乡镇，会调用资源进行进一步的集中，然后填埋，但也不够理想，毕竟成本很高，村屯又很分散，清运垃圾的成本很高，很多乡镇都搞过垃圾集中站，但最后都不了了之了。</p>

<h2>房地产大周期已到尽头</h2>

<p>现在村屯里面全是新房子了（砖墙和铁皮屋顶），小时侯那种土墙和茅草屋顶已经见不到了，稍年轻一点的人也会在县城里面买楼房住，农忙时会回到村里面住，忙完了就会回到县城住，大部分也都买 了小汽车。即使这样县城的楼房还空着一大半，前几年地产商在县城疯狂的建了好多新楼房，但愿去县城的人和有能力去县城的人毕竟有限。另一方面，县城的建材市场行情近一两年也大幅下滑，因为村里面的新房子建的差不多了，也饱和了。</p>

<h2>无人机喷农药</h2>

<p><img src="https://ts1.cn.mm.bing.net/th/id/R-C.f25f792f9e4ecacacaa6da55525f80d9?rik=QQjyA%2f1eY%2fgo2Q&amp;riu=http%3a%2f%2fwww.qfhkzb.com%2fUploads%2fimage%2f20190805%2f1564965385884174.jpg&amp;ehk=pRZuEOrAGmbG3prpdgy9x1BQiNgHBgGQb9aHUITD2fU%3d&amp;risl=&amp;pid=ImgRaw&amp;r=0&amp;sres=1&amp;sresct=1" alt="" /></p>

<p>村里面已经有人用上了无人机来喷农药了，是那种较大型的四翼无人机，与常见的航拍那种是一样的，只不过个头更大。运营模式是中介式的，也就是有人专门养护无人机，给农民的田地里喷农药，赚取佣金。毕竟这种大型的无人机成本较高，维护成本也很高，并且操作起来难度也不小，并不是人人都能驾驭得了的。</p>

<h2>明天会更好</h2>

<p><img src="https://tse4-mm.cn.bing.net/th/id/OIP-C.U0S--5yGkvRugBuww7MHkAHaEK?pid=ImgDet&amp;rs=1" alt="" /></p>

<p>现在国家的政策也更多的偏向广大农村地区，每年都会出台很多的惠农政策以及振兴新农村政策，因为各种不可抗力，到了基层执行效果会大打折扣，但仍相信一切都只会变得越来越好。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding Minimum Viable Product]]></title>
    <link href="http://toughcoder.net/blog/2023/08/08/understanding-minimum-viable-product/"/>
    <updated>2023-08-08T22:11:11+08:00</updated>
    <id>http://toughcoder.net/blog/2023/08/08/understanding-minimum-viable-product</id>
    <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Minimum_viable_product">Minimum Viable Product(MVP)</a>是创业公司中比较流行的一个产品开发方法，一个比较贴切的翻译是最低可行产品，但总感觉不如英文原文有感觉。它能够帮助创业团队以最小的成本，开发出一个刚好能满足用户核心需求的产品，来验证商业逻辑是否可行。</p>

<p><a href="http://toughcoder.net/blog/2023/08/08/understanding-minimum-viable-product/"><img src="https://www.agiratech.com/wp-content/uploads/2019/09/what-is-a-minimum-viable-product.jpg" title="auto auto" ></a></p>

<!-- more -->


<h2>理解MVP</h2>

<p>MVP最初由Eric Ries提出来的，它的意思是一个能够让一个团队以最少的成本（时间与金钱）来收集最多的用户的真实需求和想法。通过做出一个最基础功能的产品，并发布给用户使用，不断的接受用户的反馈，基于用户的反馈，再进行迭代。</p>

<p><img src="https://ts1.cn.mm.bing.net/th/id/R-C.537b2438249904649d41a4f5e5f952da?rik=AYTulqitQkA9CA&amp;riu=http%3a%2f%2fwww.azquotes.com%2fpicture-quotes%2fquote-the-minimum-viable-product-is-that-version-of-a-new-product-which-allows-a-team-to-collect-eric-ries-72-47-40.jpg&amp;ehk=HBGya%2bo4pC0WU1lX10ONl%2bMz4pne%2fsrzCEx3Zq4qAQM%3d&amp;risl=&amp;pid=ImgRaw&amp;r=0" alt="" /></p>

<p>这段原文并不难，直接多读几遍去理解其内在涵义，目前并末找到一个非常贴切的翻译。</p>

<p>一个最为贴切的表达MVP精髓的图片就是那张滑板车到跑车的图片了：</p>

<p><img src="https://tse2-mm.cn.bing.net/th/id/OIP-C.Sroo_DWfJfKCeSmQs5QdewHaE7?pid=ImgDet&amp;rs=1" alt="" /></p>

<h2>MVP不是什么</h2>

<p>需要特别注意的是，MVP不是产品原型，也不是软件的alpha版本。它是一个完整的产品，经过了足够的测试，足够安全，足够稳定，是符合上线发布标准的产品。从产品上来说它是『Viable』的，也即是完全可使用的，也能解决用户问题，满足用户需求的产品。精华在于『Minimum』也就是仅仅包含能满足用户核心需求的最少功能。</p>

<h2>如何做到MVP</h2>

<h3>弄清楚产品的市场定位</h3>

<p>也就是说你的产品到底是给谁使用的，必须 弄清楚。</p>

<h3>挖掘核心需求</h3>

<p>也就是你的产品到底解决了用户的什么问题。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://www.productplan.com/glossary/minimum-viable-product/">Minimum Viable Product (MVP)</a></li>
<li><a href="https://www.agilealliance.org/glossary/mvp/">What is a Minimum Viable Product (MVP)</a></li>
<li><a href="https://www.netsolutions.com/insights/how-to-build-an-mvp-minimum-viable-product-a-step-by-step-guide/">A Step-by-Step Guide to Build a Minimum Viable Product (MVP)</a></li>
<li><a href="https://www.woshipm.com/pd/879821.html">五个步骤，实现产品MVP</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/258565534">什么是MVP（最小可行性产品）？如何构建和验证MVP？</a></li>
<li><a href="https://www.minjiekaifa.com/agilearticles/mvp-prototype-proof-of-concept-80445.mhtml">MVP、原型、概念验证，傻傻分不清楚？</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1724045">5 分钟，带你了解MVP（最低可行性产品）</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Assimp安装折腾记]]></title>
    <link href="http://toughcoder.net/blog/2023/07/21/assimp-installing-troubleshooting/"/>
    <updated>2023-07-21T00:05:06+08:00</updated>
    <id>http://toughcoder.net/blog/2023/07/21/assimp-installing-troubleshooting</id>
    <content type="html"><![CDATA[<p>为了学习<a href="https://www.opengl.org/">OpenGL</a>，在学习大名鼎鼎的<a href="https://learnopengl.com/">LearnOpenGL</a>时，参考它的<a href="https://github.com/JoeyDeVries/LearnOpenGL">源码时</a>遇到了一点小小的困难，折腾了两天，感觉有必要总结一下。</p>

<p>LearnOpenGL是一个大神写的一整套关于OpenGL的资料，已出版成书，非常具有参考价值。不过它里面的示例都依赖于一些开源库，如<a href="https://github.com/assimp/assimp">assimp</a>和<a href="https://github.com/glfw/glfw">glfw</a>以及<a href="https://github.com/g-truc/glm">glm</a>等。在它的ReadMe中也都针对主流平台Windows, Linux/Unix以及Mac上面给出安装和编译教程。</p>

<p><a href="http://toughcoder.net/blog/2023/07/21/assimp-installing-troubleshooting/"><img src="https://ts1.cn.mm.bing.net/th/id/R-C.48d6ecd812532356af55ed7d662b4c3d?rik=TcRtYNyxFi9zYw&riu=http%3a%2f%2fioshacker.com%2fwp-content%2fuploads%2f2017%2f08%2fHomebrew-mac-logo.jpg&ehk=iZTgjyqdB7mHgQBwBprmXOcxPVvR%2bG9bdzmvDauON8A%3d&risl=&pid=ImgRaw&r=0" title="auto auto" ></a></p>

<!-- more -->


<p>先在Ubuntu 22.04 LTS上面搞，按照<a href="https://github.com/JoeyDeVries/LearnOpenGL">其官方教程</a>上面说的Linux/Unix编译方法，一下子就搞定了。</p>

<p>但在Mac上面就遇到了困难。这里得说一下，我的MBP是2019年买的，系统版本是Mojave 10.14.6，现在来看是过点过时了，因为最新的稳定版本Mac OSX已经到了Ventura 10.22了，很多软件，像XCode等都已经不再提供对Mojave的支持了，平时安装软件以及一些开发库的时候也都有遇到不支持的情况。但仍不想升级，因为旧硬件升级大版本的新操作系统，往往会遇到问题，即使能升级成功，性能也大打折扣。对于电子产品，永远相信出厂的配置是最优的。可以进行小的升级，但绝不升级大版本。</p>

<p>好了，这些是背景。</p>

<h2>brew初偿败果</h2>

<p>仍是按照<a href="https://github.com/JoeyDeVries/LearnOpenGL">教程</a>在Mac上面，先是安装依赖：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install cmake assimp glm glfw freetype
</span></code></pre></td></tr></table></div></figure>


<p>但安装依赖时出错了，以下是错误信息（很长，很长，只截取一部分）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Running <span class="sb">`</span>brew update --auto-update<span class="sb">`</span>...
</span><span class='line'><span class="o">==</span>&gt; Auto-updated Homebrew!
</span><span class='line'>Updated <span class="m">1</span> tap <span class="o">(</span>homebrew/core<span class="o">)</span>.
</span><span class='line'>
</span><span class='line'>You have <span class="m">3</span> outdated formulae installed.
</span><span class='line'>
</span><span class='line'>Warning: You are using macOS 10.14.
</span><span class='line'>We <span class="o">(</span>and Apple<span class="o">)</span> <span class="k">do</span> not provide support <span class="k">for</span> this old version.
</span><span class='line'>It is expected behaviour that some formulae will fail to build in this old version.
</span><span class='line'>It is expected behaviour that Homebrew will be buggy and slow.
</span><span class='line'>Do not create any issues about this on Homebrew<span class="s1">&#39;s GitHub repositories.</span>
</span><span class='line'><span class="s1">Do not create any issues even if you think this message is unrelated.</span>
</span><span class='line'><span class="s1">Any opened issues will be immediately closed without response.</span>
</span><span class='line'><span class="s1">Do not ask for help from Homebrew or its maintainers on social media.</span>
</span><span class='line'><span class="s1">You may ask for help in Homebrew&#39;</span>s discussions but are unlikely to receive a response.
</span><span class='line'>Try to figure out the problem yourself and submit a fix as a pull request.
</span><span class='line'>We will review it but may or may not accept it.
</span><span class='line'>
</span><span class='line'><span class="o">==</span>&gt; Fetching <span class="nv">assimp</span>
</span><span class='line'><span class="o">==</span>&gt; Downloading https://github.com/assimp/assimp/commit/5a89d6fee138f8bc979b508719163a74ddc9a384.patch?full_index<span class="o">=</span>1
</span><span class='line'>Already downloaded: /Users/alexhilton/Library/Caches/Homebrew/downloads/af0c0eeaaca4991d7485bfb46ac1cb6209ce97489e6e4a94cb0debcaa03215cc--5a89d6fee138f8bc979b508719163a74ddc9a384.patch
</span><span class='line'><span class="o">==</span>&gt; Downloading https://github.com/assimp/assimp/archive/v5.2.5.tar.gz
</span><span class='line'>Already downloaded: /Users/alexhilton/Library/Caches/Homebrew/downloads/17609a79a14f9163556e55125d6e9008276ba8e8bae256242c47e9dbbb4a34d2--assimp-5.2.5.tar.gz
</span><span class='line'>Warning: A newer Command Line Tools release is available.
</span><span class='line'>Update them from Software Update in System Preferences.
</span><span class='line'>
</span><span class='line'>If that doesn<span class="s1">&#39;t show you any updates, run:</span>
</span><span class='line'><span class="s1">  sudo rm -rf /Library/Developer/CommandLineTools</span>
</span><span class='line'><span class="s1">  sudo xcode-select --install</span>
</span><span class='line'>
</span><span class='line'><span class="s1">Alternatively, manually download them from:</span>
</span><span class='line'><span class="s1">  https://developer.apple.com/download/all/.</span>
</span><span class='line'><span class="s1">You should download the Command Line Tools for Xcode 11.3.1.</span>
</span><span class='line'>
</span><span class='line'><span class="s1">==&gt; Patching</span>
</span><span class='line'><span class="s1">==&gt; Applying 5a89d6fee138f8bc979b508719163a74ddc9a384.patch</span>
</span><span class='line'>
</span><span class='line'><span class="s1">==&gt; cmake  -S . -B build -G Ninja -DASSIMP_BUILD_TESTS=OFF -DASSIMP_BUILD_ASSIMP_TOOLS=ON -DCMAKE_INSTALL_RPATH=@loader_</span>
</span><span class='line'><span class="s1">==&gt; cmake --build build</span>
</span><span class='line'><span class="s1">Last 15 lines from /Users/alexhilton/Library/Logs/Homebrew/assimp/02.cmake:</span>
</span><span class='line'><span class="s1">^</span>
</span><span class='line'><span class="s1">/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:769:1: note: candidate function</span>
</span><span class='line'><span class="s1">abs(long double __lcpp_x) _NOEXCEPT {return ::fabsl(__lcpp_x);}</span>
</span><span class='line'><span class="s1">^</span>
</span><span class='line'><span class="s1">1 error generated.</span>
</span><span class='line'>
</span><span class='line'><span class="s1">Do not report this issue to Homebrew/brew or Homebrew/homebrew-core!</span>
</span><span class='line'>
</span><span class='line'><span class="s1">Error: You are using macOS 10.14.</span>
</span><span class='line'><span class="s1">We (and Apple) do not provide support for this old version.</span>
</span><span class='line'><span class="s1">It is expected behaviour that some formulae will fail to build in this old version.</span>
</span><span class='line'><span class="s1">It is expected behaviour that Homebrew will be buggy and slow.</span>
</span><span class='line'><span class="s1">Do not create any issues about this on Homebrew&#39;</span>s GitHub repositories.
</span><span class='line'>Do not create any issues even <span class="k">if</span> you think this message is unrelated.
</span><span class='line'>Any opened issues will be immediately closed without response.
</span><span class='line'>Do not ask <span class="k">for</span> <span class="nb">help </span>from Homebrew or its maintainers on social media.
</span><span class='line'>You may ask <span class="k">for</span> <span class="nb">help </span>in Homebrew<span class="s1">&#39;s discussions but are unlikely to receive a response.</span>
</span><span class='line'><span class="s1">Try to figure out the problem yourself and submit a fix as a pull request.</span>
</span><span class='line'><span class="s1">We will review it but may or may not accept it.</span>
</span><span class='line'>
</span><span class='line'><span class="s1">Error: A newer Command Line Tools release is available.</span>
</span><span class='line'><span class="s1">Update them from Software Update in System Preferences.</span>
</span><span class='line'>
</span><span class='line'><span class="s1">If that doesn&#39;</span>t show you any updates, run:
</span><span class='line'>  sudo rm -rf /Library/Developer/CommandLineTools
</span><span class='line'>  sudo xcode-select --install
</span><span class='line'>
</span><span class='line'>Alternatively, manually download them from:
</span><span class='line'>  https://developer.apple.com/download/all/.
</span><span class='line'>You should download the Command Line Tools <span class="k">for</span> Xcode 11.3.1.
</span></code></pre></td></tr></table></div></figure>


<p>总结起来就是一句话，你的操作系统太旧了，brew已经不支持了，自已解决吧，别向brew来报问题。。。</p>

<p>傻掉了，因为看到需要升级系统，有了放弃的想法，因为有Ubuntu上能跑就也差不多够用了，也很晚了，就休息了。</p>

<h2>尝试解决</h2>

<p>第二天，仍不想轻易放弃，想再折腾一下。因为不确定是哪个库安装失败了，所以就一个一个的单独安装。单独安装cmake, glfw, glm, freetype都成功了。就是assimp会出错，错误信息与昨晚一样。</p>

<p>它里面也有提示，说可以尝试升级一下<strong>Command Line Tools</strong>，这货是XCode带的命令行编译工具集。因为最新版本XCode已不支持Mojave了，并不会提示更新Command Line Tools，其实我的Command Line Tools已经是支持Mojave中最新的了。</p>

<p>按错误信息中的提示，强行把xcode-select重装一遍也还是出错。</p>

<p>折腾环境这条路就断了，只能找找其他方式。回到问题本身，仔细看了下错误信息，似乎是一个编译错误：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Last <span class="m">15</span> lines from /Users/alexhilton/Library/Logs/Homebrew/assimp/02.cmake:
</span><span class='line'>^
</span><span class='line'>/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:769:1: note: candidate <span class="k">function</span>
</span><span class='line'>abs<span class="o">(</span>long double __lcpp_x<span class="o">)</span> _NOEXCEPT <span class="o">{</span><span class="k">return</span> ::fabsl<span class="o">(</span>__lcpp_x<span class="o">)</span><span class="p">;</span><span class="o">}</span>
</span><span class='line'>^
</span><span class='line'><span class="m">1</span> error generated.
</span></code></pre></td></tr></table></div></figure>


<p>但是这个信息仍不够明确，没有指出是assimp的哪句编译出错的。</p>

<p>于是就想换条路吧，用brew不可以，那直接找assimp编译好的库，或者直接手动去编译它的源码，应该可行吧？找了一下，没找到可用的已编译好的库，于是就去手动编译assimp的源码。</p>

<h2>直接编译assimp源码</h2>

<p>把assimp源码直接下载下来，下载最新稳定版本5.2.5，这与brew的版本是一致的，然后按<a href="https://github.com/assimp/assimp/blob/master/Build.md">官程</a>编译，也出错了，但错误信息非常详细：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>➜  assimp-5.2.5 cmake --build .
</span><span class='line'><span class="o">[</span>  0%<span class="o">]</span> Building CXX object code/CMakeFiles/assimp.dir/Common/Assimp.cpp.o
</span><span class='line'><span class="o">[</span>  0%<span class="o">]</span> Building CXX object code/CMakeFiles/assimp.dir/CApi/CInterfaceIOWrapper.cpp.o
</span><span class='line'><span class="o">[</span>  0%<span class="o">]</span> Building CXX object code/CMakeFiles/assimp.dir/Common/Compression.cpp.o
</span><span class='line'><span class="o">[</span>  1%<span class="o">]</span> Building CXX object code/CMakeFiles/assimp.dir/Common/BaseImporter.cpp.o
</span><span class='line'><span class="o">[</span>  1%<span class="o">]</span> Building CXX object code/CMakeFiles/assimp.dir/Common/BaseProcess.cpp.o
</span><span class='line'>In file included from /Users/alexhilton/opensource/assimp-5.2.5/code/Common/BaseProcess.cpp:44:
</span><span class='line'>In file included from /Users/alexhilton/opensource/assimp-5.2.5/code/Common/BaseProcess.h:46:
</span><span class='line'>In file included from /Users/alexhilton/opensource/assimp-5.2.5/include/assimp/GenericProperty.h:50:
</span><span class='line'>/Users/alexhilton/opensource/assimp-5.2.5/include/assimp/Hash.h:99:25: error: call to <span class="s1">&#39;abs&#39;</span> is ambiguous
</span><span class='line'>                <span class="nb">hash</span> ^<span class="o">=</span> abs<span class="o">(</span>data<span class="o">[</span>sizeof<span class="o">(</span>uint16_t<span class="o">)])</span> <span class="s">&lt;&lt; 18;</span>
</span><span class='line'><span class="s">                        ^~~</span>
</span><span class='line'><span class="s">/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1</span>/math.h:761:1: note:
</span><span class='line'>      candidate <span class="k">function</span>
</span><span class='line'>abs<span class="o">(</span>float __lcpp_x<span class="o">)</span> _NOEXCEPT <span class="o">{</span><span class="k">return</span> ::fabsf<span class="o">(</span>__lcpp_x<span class="o">)</span><span class="p">;</span><span class="o">}</span>
</span><span class='line'>^
</span><span class='line'>/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:765:1: note:
</span><span class='line'>      candidate <span class="k">function</span>
</span><span class='line'>abs<span class="o">(</span>double __lcpp_x<span class="o">)</span> _NOEXCEPT <span class="o">{</span><span class="k">return</span> ::fabs<span class="o">(</span>__lcpp_x<span class="o">)</span><span class="p">;</span><span class="o">}</span>
</span><span class='line'>^
</span><span class='line'>/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:769:1: note:
</span><span class='line'>      candidate <span class="k">function</span>
</span><span class='line'>abs<span class="o">(</span>long double __lcpp_x<span class="o">)</span> _NOEXCEPT <span class="o">{</span><span class="k">return</span> ::fabsl<span class="o">(</span>__lcpp_x<span class="o">)</span><span class="p">;</span><span class="o">}</span>
</span><span class='line'>^
</span><span class='line'><span class="m">1</span> error generated.
</span><span class='line'>make<span class="o">[</span>2<span class="o">]</span>: *** <span class="o">[</span>code/CMakeFiles/assimp.dir/Common/BaseProcess.cpp.o<span class="o">]</span> Error 1
</span><span class='line'>make<span class="o">[</span>1<span class="o">]</span>: *** <span class="o">[</span>code/CMakeFiles/assimp.dir/all<span class="o">]</span> Error 2
</span><span class='line'>make: *** <span class="o">[</span>all<span class="o">]</span> Error 2
</span></code></pre></td></tr></table></div></figure>


<p>这个编译错误比较直接，不像brew给出的不直观，可以清楚的看到是头文件include/assimp/Hash.h出错了。打开include/assimp/Hash.h查看，这只是用了一个abs函数，但引用的头文件是#include <cmath>，通过搜索找到了原因，cmath中定义了三个重载abs(float) abs(double)等。而Hash.h用的是整数，整数的abs定义是在stdlib中，也就是头文件要引用<cstdlib>。但Hash.h只引用了<cmath>，所以导致找不到整数的abs。那就简单了，直接把include/assimp/Hash.h中的头文件从cmath改成cstdlib，就可以了，再次编译，成功了。</p>

<p>看起来是个版本兼容性的问题，估计新版本的C++兼容了cmath和cstdlib，所以只引用cmath也不会出错。Anyway，这说明只是一个小小的问题，到不了放弃或者重装系统的地步。这个可以作为Plan B，如果最后用brew仍不成功，就把手动把刚编译好的库放到项目能链接 到的地方就行了。</p>

<h2>brew install assimp的折腾过程</h2>

<p>既然小修改就能成功，那么如果找到brew使用的源码包，稍加修改，不就能安装成功了么，这是值得折腾的，可以加深了解一下brew的具体过程。</p>

<p>brew是一个软件包管理工具，它会找某一个软件的最新稳定版本，如果本地未安装的话，会把其源码下载下来，打重要的patches，然后再编译，最后执行安装。</p>

<p>找到了brew会把临时文件放在HOME/Library/Caches/Homebrew下面，并且如果已下载过了就不会重新再下载源码包，太好了。于是找到assimp的源码包，解压，修改Hash.h然后再压缩。然后再运行brew install assimp，发现它确实会直接用下载好的源码 包，不会重新下载，太好了，这离成功就相当近了。</p>

<p>但，还是会报错，它会对源码包做校验，为了防止源码包被篡改，当然需要做校验了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">==</span>&gt; Fetching <span class="nv">assimp</span>
</span><span class='line'><span class="o">==</span>&gt; Downloading https://github.com/assimp/assimp/commit/5a89d6fee138f8bc979b508719163a74ddc9a384.patch?full_index<span class="o">=</span>1
</span><span class='line'>Already downloaded: /Users/alexhilton/Library/Caches/Homebrew/downloads/af0c0eeaaca4991d7485bfb46ac1cb6209ce97489e6e4a94cb0debcaa03215cc--5a89d6fee138f8bc979b508719163a74ddc9a384.patch
</span><span class='line'><span class="o">==</span>&gt; Downloading https://github.com/assimp/assimp/archive/v5.2.5.tar.gz
</span><span class='line'>Already downloaded: /Users/alexhilton/Library/Caches/Homebrew/downloads/17609a79a14f9163556e55125d6e9008276ba8e8bae256242c47e9dbbb4a34d2--assimp-5.2.5.tar.gz
</span><span class='line'>Error: assimp: SHA256 mismatch
</span><span class='line'>Expected: b5219e63ae31d895d60d98001ee5bb809fb2c7b2de1e7f78ceeb600063641e1a
</span><span class='line'>  Actual: b99489f8d142769dda720f4d250da31214efad3460f92b3d3ec71919de196dd1
</span><span class='line'>    File: /Users/alexhilton/Library/Caches/Homebrew/downloads/17609a79a14f9163556e55125d6e9008276ba8e8bae256242c47e9dbbb4a34d2--assimp-5.2.5.tar.gz
</span><span class='line'>To retry an incomplete download, remove the file above.
</span></code></pre></td></tr></table></div></figure>


<p>这也好办，得到我们修改过的压缩包的sha256的值，然后想办法找到校验配置的文件，改一下就可以了。试了下，未成功，估计校验文件配置会被brew覆盖掉。</p>

<p>然后发现，brew有跳过校验的方法，运行brew edit assimp会出现关于assimp的一些meta信息，把sha256的值改一下，改成我们修改后的就可以了，然后就安装成功了。</p>

<h2>总结</h2>

<p>还是要找到问题的根因，多从源码出发进行hack，然后解决问题。像这个问题，一开始安装一坨依赖的时候失败了，这时就要一个一个的安装，然后看是哪个失败了。先把成功的装上，留下失败的这个慢慢解决。然后就要找到它编译失败的根本原因。如果brew安装的错误信息不够明确，那么就要直接去找它的源码，然后手动编译，看出错在哪里，这时一般能够发现问题，一般来说都是一些编译器版本兼容的小问题，这本身也能当作Plan B，因为可以手动安装。</p>

<p>之后就是要研究一下包管理工具的工作流程，看能否修改它使用的源码包，然后一一把流程跑通就可以了。</p>

<p>切忌不要一上来就轻易的去升级电脑，先尝试解决软件包本身，而不是去改运行环境，流行的开源库兼容性会很好，通常都只会是一些小的兼容问题，不要轻易的去改电脑本身的运行环境。</p>

<h2>参考</h2>

<ul>
<li><a href="https://github.com/assimp/assimp/blob/master/Build.md">Assimp Build</a></li>
<li><a href="https://github.com/JoeyDeVries/LearnOpenGL">LearnOpenGL</a></li>
<li><a href="https://stackoverflow.com/questions/19208607/homebrew-force-install-even-with-sha1-mismatch">homebrew - force install even with SHA1 mismatch</a></li>
<li><a href="https://stackoverflow.com/questions/4800588/modifying-the-source-code-of-a-home-brew-package">Modifying the source code of a home brew package</a></li>
<li><a href="https://stackoverflow.com/questions/56978365/how-to-fix-error-call-to-abs-is-ambiguous">How to fix &ldquo;error: call to &lsquo;abs&rsquo; is ambiguous&rdquo;</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Metaprogramming in Python]]></title>
    <link href="http://toughcoder.net/blog/2023/07/17/metaprogramming-in-python/"/>
    <updated>2023-07-17T23:34:14+08:00</updated>
    <id>http://toughcoder.net/blog/2023/07/17/metaprogramming-in-python</id>
    <content type="html"><![CDATA[<p>元编程是一种编写生成或者处理程序代码的技术，Python语言也支持元编程，今天就来好好的学习一下。我们先了解元编程的概念，然后再深入探讨在Python中如何实现元编程。</p>

<p><a href="http://toughcoder.net/blog/2023/07/17/metaprogramming-in-python/"><img src="https://tse4-mm.cn.bing.net/th/id/OIP-C.szFdgvrOnL6NNY3yIbVg7QHaHa?pid=ImgDet&rs=1"></a></p>

<!-- more -->


<h2>什么是元编程</h2>

<p><a href="https://en.wikipedia.org/wiki/Metaprogramming">元编程Metaprogramming</a>就是编写元程序(Metaprograms)的过程。而元程序则是用于生成程序，或者处理的程序的程序。通俗一点的理来理解，元编程就是编写生成代码的代码。程序的处理对象一般是数据，比如从用户处得到输出数据，经过业务逻辑处理，再把输出数据反馈给用户，这是绝大多数程序所做的事情。而元程序处理的对象则是程序，编写元程序的过程就叫做元编程。</p>

<p><img src="https://tse3-mm.cn.bing.net/th/id/OIP-C.hZeaNZPsVVpTioOzzb54oQHaEK?pid=ImgDet&amp;rs=1" alt="" /></p>

<p>元程序的优势，或者我们元编程的目的在于复用和减少代码量，而且是用一种非常优雅的方式。</p>

<p>这么说确实比较抽象，其实元编程没那么复杂，甚至平时都或多或少的已经用到元编程了。比如像C/C++中的宏和模板函数，Java中的泛型，注解，反向和动态代理，代码模板（模板容易混淆，这里指的是<a href="https://en.wikipedia.org/wiki/Boilerplate_code">boilerplate codes</a>）等等，这些本质上都是元编程。</p>

<h3>参考资料</h3>

<ul>
<li><a href="https://zhuanlan.zhihu.com/p/461190812">元编程 (meta-programming)</a></li>
<li><a href="https://codedocs.org/what-is/metaprogramming">What is Metaprogramming</a></li>
<li><a href="https://www.jianshu.com/p/d3b637ece518">一文读懂元编程</a></li>
<li><a href="https://draveness.me/metaprogramming/">谈元编程与表达能力</a></li>
<li><a href="https://stackoverflow.com/questions/514644/what-exactly-is-metaprogramming">What exactly is metaprogramming?</a></li>
<li><a href="https://cs.lmu.edu/~ray/notes/metaprogramming/">Metaprogramming</a></li>
<li><a href="https://devopedia.org/metaprogramming">Metaprogramming</a></li>
</ul>


<p>在大Python中，实现元编程的方式主要是通过装饰器Decorators和元类Metaclasses。</p>

<h2><a href="https://peps.python.org/pep-0318/">装饰器Decorators</a></h2>

<p><img src="https://ts1.cn.mm.bing.net/th/id/R-C.8e7531f7cc7cbb9427f0191423bc0739?rik=WGXrND77wsMxmA&amp;riu=http%3a%2f%2fwww.trytoprogram.com%2fimages%2fpython_decorators.jpg&amp;ehk=SlZpChA7lJNyuSSJnXJMUiyk%2floVKyi3jjsLAcJGHyo%3d&amp;risl=&amp;pid=ImgRaw&amp;r=0" alt="" /></p>

<h3>理解Decorator</h3>

<p>Decorator本质上是高阶函数，最常用的就是用来修饰一个函数，形式上是一个@my_decorator加在一个函数定义的上面，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@my_decorator</span>
</span><span class='line'><span class="k">def</span> <span class="nf">say_hello</span><span class="p">():</span>
</span><span class='line'>  <span class="k">print</span><span class="p">(</span><span class="s">&#39;Hello, world&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>它等同于：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">say_hello</span><span class="p">():</span>
</span><span class='line'>  <span class="k">print</span><span class="p">(</span><span class="s">&#39;Hello, world&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">my_decorator</span><span class="p">(</span><span class="n">say_hello</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Decorator是一个函数，它的输入参数是被修饰的函数，此例中即sya_hello。</p>

<p>Python的函数是一级对象，可以赋给变量，可以当作参数和返回值，而以函数为参数或者返回值的函数称为高阶函数。装饰器本质上就是一个高阶函数，只不过，以一种更为简洁的方式来书写@my_decorator。所以再次看到@时，不用害怕，把它看成高阶函数调用即可。</p>

<h3>自定义Decorator</h3>

<p>装饰器本质上就是高阶函数，它的输入是一个函数，所以定义一个高阶函数，即可当作decorator使用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">my_decorator</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">wrapper</span><span class="p">():</span>
</span><span class='line'>      <span class="k">print</span><span class="p">(</span><span class="s">&#39;Before func is called&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">func</span><span class="p">()</span>
</span><span class='line'>      <span class="k">print</span><span class="p">(</span><span class="s">&#39;After func is called&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">wrapper</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@my_decorator</span>
</span><span class='line'><span class="k">def</span> <span class="nf">say_hello</span><span class="p">():</span>
</span><span class='line'>  <span class="k">print</span><span class="p">(</span><span class="s">&#39;Hello, world&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">say_hello</span><span class="p">()</span>
</span><span class='line'><span class="c">#Output:</span>
</span><span class='line'><span class="c">#Before func is called</span>
</span><span class='line'><span class="c">#Hello, world</span>
</span><span class='line'><span class="c">#After func is called</span>
</span></code></pre></td></tr></table></div></figure>


<p>这就实现了一个非常简单的自定义decorator。</p>

<h3>装饰器的作用</h3>

<p>装饰器就是高阶函数，所以通常用于对函数产生一些副作用，比如打印日志，性能测试等等，其与<a href="https://refactoring.guru/design-patterns">设计模式中</a>的<a href="https://refactoring.guru/design-patterns/decorator">装饰模式</a>的思想是一致的，通俗来理解就是套娃。</p>

<p><a href="https://docs.python.org/3/library/functools.html">模块functools</a>定义了很多高阶函数，都可以直接当作decorator使用。用好Decorator可以写出很简洁和易于维护的代码。</p>

<h3>参考资料</h3>

<ul>
<li><a href="https://www.geeksforgeeks.org/decorators-in-python/">Decorators in Python</a></li>
<li><a href="https://realpython.com/primer-on-python-decorators/">Primer on Python Decorators</a></li>
<li><a href="https://www.programiz.com/python-programming/decorator">Python Decorators</a></li>
<li><a href="https://www.datacamp.com/tutorial/decorators-python">Python Decorators Tutorial</a></li>
<li><a href="https://machinelearningmastery.com/a-gentle-introduction-to-decorators-in-python/">A Gentle Introduction to Decorators in Python</a></li>
</ul>


<h2>元类Metaclasses</h2>

<p>Decorator可以非常方便的修饰一个函数，但如果我们有很多个方法（属于类的函数，称为方法），难道要一个一个的去添加@吗？或者想对类的属性也搞些操作，咋办？如果是一个类，倒也可以手动加一加，如果想给整个类的继承体系内的所有类都施加某种副作用影响呢？这时就会用到Metaclasses。</p>

<p><img src="https://tse3-mm.cn.bing.net/th/id/OIP-C.XRGcsVISQj6adHt8Ygq6cAHaGV?pid=ImgDet&amp;rs=1" alt="" /></p>

<p>Metaclasses可以理解为类的基类，也就是用于定义每个类(class）时使用的类，Metaclass中可以定义一些高阶函数用于在创建对象时，实始化对象时，调用属性时和调用方法时施加副作用影响。可以在定义类的时候通过metaclasses来指定使用的Metaclasses，并且会在继承体系中得到继承。</p>

<p>Metaclasses可以对类施加一些额外影响，比如说Python并非强OO的，像abstract没有直接的支持，这时就可以用Metaclasses来定义额外的限制，比如当基类是abstract时，如果子类没有实现一些abstract方法，就报错等等。</p>

<h3>参考资料</h3>

<ul>
<li><a href="https://realpython.com/python-metaclasses/">Python Metaclasses</a></li>
<li><a href="https://www.geeksforgeeks.org/metaprogramming-metaclasses-python/">Metaprogramming with Metaclasses in Python</a></li>
<li><a href="https://lotabout.me/2018/Understanding-Python-MetaClass/">Python 元类 (MetaClass) 小教程</a></li>
<li><a href="https://stackoverflow.com/questions/100003/what-are-metaclasses-in-python">What are metaclasses in Python?</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/149126959">Python进阶——详解元类，metaclass的原理和用法</a></li>
</ul>


<h2>参考资料</h2>

<ul>
<li><a href="https://developer.ibm.com/tutorials/ba-metaprogramming-python/">Metaprogramming in Python</a></li>
<li><a href="https://www.oreilly.com/library/view/metaprogramming-with-python/9781838554651/">Metaprogramming with Python</a></li>
<li><a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/chapters/p09_meta_programming.html">第九章：元编程</a></li>
<li><a href="https://github.com/PacktPublishing/Metaprogramming-with-Python">Metaprogramming with Python, published by Packt</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploying Python Applications]]></title>
    <link href="http://toughcoder.net/blog/2023/07/16/deploying-python-applications/"/>
    <updated>2023-07-16T14:53:07+08:00</updated>
    <id>http://toughcoder.net/blog/2023/07/16/deploying-python-applications</id>
    <content type="html"><![CDATA[<p>一个软件项目通常的开发流程包括创建，开发，打包和发布，不同为类型的项目具体过程可能不太一样，比如像Web项目，最后一般不叫发布而是叫做部署，并且像动态语言类的项目一般不会有打包过程。但总的来说，这几个流程确实是任何一个软件开发过程中必做的事情。今天就来学习一下如何部署Python应用程序，也就是除了项目开发写代码以外的一些必须做的事情。</p>

<p><a href="http://toughcoder.net/blog/2023/07/16/deploying-python-applications/"><img src="https://www.antagonist.nl/blog/wp-content/uploads/2020/11/py-deployment.png" title="auto auto" ></a></p>

<!-- more -->


<p><strong>注意</strong>：本文不去纠结项目和应用程序的具体定义与区别，就是泛指一个软件项目，一坨脚本工具集，一个module package，一个桌面应用程序，一个Web app都是一个项目。并且项目和应用程序也基本上指的是同一个东西，很多语境下可互换。</p>

<h2>以符合规范的方式来开发项目</h2>

<p>在讨论部署之前，我们先谈谈项目的创建与开发，视项目的不同用途，每个类型的项目都会有相应的开发规范，比如要创建哪些必备的配置类的文件，比如要采用什么样的目录结构。并没有一个大一统的统一规范，但是不同的类型的项目确实会有其规范，比如一个package要如何创建，一个Django app要如何创建。</p>

<p>我们还是要符合具体项目类型的要求，这样的做的原因是，当开发完成后，进行打包和部署的时候会容易得多。</p>

<p>可以参考 《Expert Python Programming 2nd Edition》中的第五章『Creating a package』。</p>

<h2>打包和部署</h2>

<p>Python是通用的编程语言，在打包和部署这块也是相当灵活的，没有固定和统一的规则，主要还是依据不同类型的项目来确实具体的部署策略。</p>

<h3>package</h3>

<p><img src="https://tse3-mm.cn.bing.net/th/id/OIP-C.tL670VQGeyalMhD23kSXPwHaEE?pid=ImgDet&amp;rs=1" alt="" /></p>

<p>package是指一坨Python代码的集合，是可以供其他人使用的库，应该被视为三方module。Python是有完整的生态的，它提供三方module的<a href="https://pypi.org/">聚合PyPI</a>，提供下载管理工具<a href="https://pypi.org/project/pip/">pip</a>， 以及module（package是更正式的称谓）的开发和发布机制。</p>

<ul>
<li><a href="https://www.geeksforgeeks.org/how-to-build-a-python-package/">How to Build a Python package?</a></li>
<li><a href="https://packaging.python.org/en/latest/tutorials/packaging-projects/">Packaging Python Projects</a></li>
<li><a href="https://www.freecodecamp.org/news/build-your-first-python-package/">How to Build Your Very First Python Package</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/126357143">创建Python Package</a></li>
<li><a href="https://www.pythoncentral.io/how-to-create-a-python-package/">How to Create a Python Package</a></li>
</ul>


<h3>Desktop app</h3>

<p>这里的Desktop app是指除了package（会发布到PyPI的）和Web app以外的，能独立运行的，没有与客户端或者其他服务器有太多交互的通用应用程序，比如一些脚本，或者一个桌面应用程序都算Desktop app。</p>

<p>其实，这里重点想强调的就是运行环境，可以是本机，也可以是服务器。</p>

<ul>
<li><a href="https://packaging.python.org/en/latest/discussions/deploying-python-applications/">Deploying Python applications</a></li>
<li><a href="https://pypi.org/project/desktop-app/">desktop-app 0.4.0</a></li>
<li><a href="https://pythonistaplanet.com/how-to-create-a-desktop-application-using-python/">How to Create a Desktop Application Using Python
Written by Ashwin Joyin Python</a></li>
<li><a href="https://www.freecodecamp.org/news/the-python-desktop-application-3a66b4a128d3/">How to Turn a Web App Into a Desktop App, Using Chromium and PyInstaller</a></li>
</ul>


<h3>Web app</h3>

<p><img src="https://tse3-mm.cn.bing.net/th/id/OIP-C.Bt6Ec7CvI4OGvQ9eD39-EQAAAA?pid=ImgDet&amp;rs=1" alt="" /></p>

<p>Web app一般部署规则都由其使用的框架决定，比如Django有其自己的规则和方法，而Flask又有一套。也跟服务器有关系，比如部署到私有服务器，跟部署到云服务上面是完全不一样的。</p>

<ul>
<li><a href="https://realpython.com/python-web-applications/">Python Web Applications: Deploy Your Script as a Flask App</a></li>
<li><a href="https://learn.microsoft.com/en-us/azure/app-service/quickstart-python?tabs=flask%2Cwindows%2Cazure-cli%2Cvscode-deploy%2Cdeploy-instructions-azportal%2Cterminal-bash%2Cdeploy-instructions-zip-azcli">Quickstart: Deploy a Python (Django or Flask) web app to Azure App Service</a></li>
<li><a href="https://python-adv-web-apps.readthedocs.io/en/latest/flask_deploy.html">Flask: Deploy an App</a></li>
<li><a href="https://realpython.com/lessons/build-basic-python-web-app/">Building a Basic Python Web App</a></li>
<li><a href="https://www.geeksforgeeks.org/how-to-deploy-django-project-on-pythonanywhere/#:~:text=How%20to%20Deploy%20Django%20project%20on%20PythonAnywhere%3F%201,Github%3F%203%20Step%203%3A%20Deploy%20Project%20on%20pythonanywhere">How to Deploy Django project on PythonAnywhere?</a></li>
<li><a href="https://docs.djangoproject.com/en/4.2/howto/deployment/">How to deploy Django</a></li>
<li><a href="https://docs.digitalocean.com/tutorials/app-deploy-django-app/">Deploy a Django App on App Platform </a></li>
</ul>


<h3>部署到服务器</h3>

<p><img src="https://www.aipython.in/wp-content/uploads/2021/09/Deploy-python-app-on-heroku-cloud-server-for-free.jpg" alt="" /></p>

<p>这个跟Web app不太一样，Web app当然要部署到服务器中。但需要往服务器部署的可不止Web app，一些工具性脚本，Desktop app也有可能需要往服务器部署，这只是有别于本机运行的不同的环境而已，与app的类型并没有太多关系。</p>

<ul>
<li><a href="https://zhuanlan.zhihu.com/p/595872062">手把手教你如何从零开始部署一个Python项目到服务器</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/323261131">Pycharm 实现远程部署和调试，原来这么简单</a></li>
</ul>


<h3>使用虚拟环境</h3>

<p>简单的项目还好，如果复杂一点的项目，最好使用虚拟环境进行隔离，我们在<a href="http://toughcoder.net/blog/2023/07/14/python-runtime-environment/">另外一个文章</a>里面有详细的讨论。</p>

<p>如果项目真的是比较复杂，并且用了超出Python的东西，或者说需要往服务器部署，那么最好的方式是使用Docker。</p>

<ul>
<li><a href="https://zhuanlan.zhihu.com/p/137895577">Docker极简实战之python项目安装部署</a></li>
<li><a href="https://docs.docker.com/language/python/build-images/">Build your Python image</a></li>
<li><a href="https://www.docker.com/blog/how-to-dockerize-your-python-applications/">How to “Dockerize” Your Python Applications</a></li>
<li><a href="https://realpython.com/offline-python-deployments-with-docker/">Simplifying Offline Python Deployments With Docker</a></li>
</ul>


<p>更多内容可以参考 《Expert Python Programming 2nd Edition》中的第六章『Chapter 6. Deploying Code』。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://packaging.python.org/en/latest/overview/">An Overview of Packaging for Python</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-package-and-distribute-python-applications">How To Package And Distribute Python Applications</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/161930778">Python 项目代码写完了，然后怎么打包和发布？</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python GUI Made Easy]]></title>
    <link href="http://toughcoder.net/blog/2023/07/15/python-gui-made-easy/"/>
    <updated>2023-07-15T22:11:49+08:00</updated>
    <id>http://toughcoder.net/blog/2023/07/15/python-gui-made-easy</id>
    <content type="html"><![CDATA[<p><a href="https://www.python.org/">大Python</a>是很好用的一门编程语言，默认情况下我们都当成脚本来使用，都是通过命令行方式来运行我们写的程序。但有些时候GUI还是很方便使用的，脚本和命令行最适合的场景是批量任务运行和自动化，但是如果交互性质的任务较多时，脚本就特别不方便，这个时候GUI就相当的方便。因此，学习一下GUI相关方面的框架，还是相当有必要的。</p>

<p><a href="http://toughcoder.net/blog/2023/07/15/python-gui-made-easy/"><img src="https://onaircode.com/wp-content/uploads/2018/09/Python-GUI-Frameworks.jpg" title="auto auto" ></a></p>

<!-- more -->


<p><a href="https://www.computerhope.com/jargon/g/gui.htm">GUI</a>也即是图形用户界面，是用一些窗口小部件(widgets或者叫做views）如按扭，标签，列表，文本输入框等视觉元素组成的直观的，方便用户操作的软件使用界面。大Python是一个跨平台的通用编程语言，它本身是没有GUI框架的，语言本身以及核心库都不涉及GUI，所以，要想实现GUI，一个最为容易的方式就是对现有的GUI平台进行封装，也即是套壳。</p>

<h2>流行的跨平台GUI平台</h2>

<p>说到GUI，主流的操作系统平台都有自己的GUI框架，比如Windows的.NET以及水果Mac上面的Cocoa，再如Java的Swing和JavaFX。这些都是平台本身提供的能开发GUI的框架。</p>

<p>此外，还有一些非常流行的三方GUI，并且这些GUI都是跨平台的，如wxWidget，Tcl/Tk，QT和GTK+，这几个是非常流行的跨平台的GUI框架，起初这些平台都是源于C/C++语言的，因为桌面软件大多是用C/C++的，并且这两个语言本身也没有GUI库。</p>

<p>GUI平台重点在于其GUI开发能力，至于其支持的编程语言并不是问题，因为把它们用其他编程语言封装一下就能提供对其他语言支持了，像这些平台现在已经支持很多种编程语言了。</p>

<h3>wxWidgets</h3>

<p><img src="https://images.sftcdn.net/images/t_app-cover-l,f_auto/p/bf323fac-9b26-11e6-af72-00163ec9f5fa/659332528/wxwidgets-screenshot.jpg" alt="" /></p>

<p><a href="https://www.wxwidgets.org/">wxWidgets</a>是用C++实现的，最初也是用于C++的一个跨平台的GUI框架，也就 说用一套代码就可以在不同的平台（Windows, Linux和Mac OS）上创建GUI应用程序。后来也发展出来了对其他编程语言的支持，如Python。它最大的优势是接近平台本身的原生风格，就是说并没有进行过度的包装。</p>

<h3>Tcl/Tk</h3>

<p><a href="https://www.linuxjournal.com/article/7225">Tcl/Tk</a>是起源于Linux的一个脚本式的GUI编程语言，不用安装基本上都带了，最大问在于特别丑，而且比较难用，它的思维跟很多通用的编程语言是不一致的。</p>

<h3>QT</h3>

<p><img src="https://ts1.cn.mm.bing.net/th/id/R-C.ccc4bcee36abe0e7c3a4b7df0e8ee87c?rik=HKrLeROHBCAOzA&amp;riu=http%3a%2f%2fpic.baike.soso.com%2fp%2f20131206%2f20131206105338-1481443581.jpg&amp;ehk=GiZS%2byK%2bwSMVOZUmst8BLdXKbummKkNaQMkjqYMLHnw%3d&amp;risl=&amp;pid=ImgRaw&amp;r=0" alt="" /></p>

<p><a href="https://www.qt.io/">QT</a>是很强大的平台，不仅仅是用于GUI，当然最初也为了C++设计的GUI库。是KDE桌面的核心库。</p>

<h3>GTK+</h3>

<p><img src="https://news-cdn.softpedia.com/images/news2/gtk-plus-4-gets-wayland-cpu-fixes-adwaita-to-use-standard-css-gradient-definitions-510213-2.jpg" alt="" /></p>

<p><a href="https://www.gtk.org/">GTK+</a>是起源于Linux的强大的GUI平台，最初是为了给C语言提供的GUI库。是Gnome桌面的核心库。</p>

<h2>Python的封装式GUI框架</h2>

<p>这些是GUI框架的核心实现，它们都支持多语言和跨平台。所以，很多Python的GUI框架都是基于上面这些的，有些是简单的封装，有些做了再次封装，但是核心实现仍是上述这些的库，在安装框架时都是需要先安装上述核心框架后才可以使用。
现在流行的Python的3方GUI框架也多是基于流行的3方的跨平台，跨语言的GUI框架，它们也是跨语言的，就是说针对 不同的编程语言都包了一层皮。</p>

<h3>基于wxWidgets的</h3>

<h4>WxPython</h4>

<p><a href="https://www.wxpython.org/">WxPython</a>可以说是wxWidgets提供给Python的官方库，它的优势是没有对wxWidgets进行过度的封装，使用起来就跟使用wxWidgets是一样的，如果有过wxWidgets的经验，那么上手wxPython会非常的快速。缺点是API相对low level，因为它就是把wxWidgets进行简单的封装和转化，并未进行层次更高的抽象和封装。</p>

<h4>Wax</h4>

<p><a href="https://pypi.org/project/wax/">Wax</a>是对wxPython的二次封装，是个二道贩子，优势是组件化更强，更好用，更方便搭建应用程序，会让wxPython更为好用一些。但是底层GUI实现仍是wxWidgets.</p>

<h3>基于Tcl/Tk</h3>

<p>就是<a href="https://docs.python.org/3/library/tkinter.html">Tkinker</a>了。它最大的优势就是它是随着Python一起发布的，它是官方的，默认的GUI框架，不用再折腾安装。但是相对来说不是很好用，而且很丑。</p>

<h3>基于QT</h3>

<h4>PyQT</h4>

<p><a href="https://wiki.python.org/moin/PyQt">PyQt</a>这是QT对Python的官方支持，如果已有QT经验的人，用起来会相当的顺手。不好的地方在于API生硬，基本就是QT的原生API。</p>

<h4>PySide</h4>

<p><a href="https://pypi.org/project/PySide/">PySide</a>是另外一个QT针对 Python的封装。
基于QT的最大的问题在于QT本身是收费的，虽然有免费的社区版本，但功能不如收费版本。</p>

<h4>pyforms</h4>

<p><a href="https://pyforms.readthedocs.io/en/v3.0/">pyforms</a>这个库也是基于QT，它最大的优势是在于form这个词，所以它更适合于网站样式的GUI。缺点是文档等资源比较少。官方网站也相当简陋。</p>

<h3>基于GTK+</h3>

<h4>PyGTK</h4>

<p><a href="https://wiki.python.org/moin/PyGtk">PyGTK</a>是GTK对Python的封装，如果有GTK经验会上手比较快，缺点跟PyQT或者wxPython是一样的，就是它只是GTK框架接口的一个简单封装，不够Pythonic，用起来可能也不是那么顺手，如果 没有GTK经验的话。</p>

<h4>PyGUI</h4>

<p><a href="https://www.cosc.canterbury.ac.nz/greg.ewing/python_gui/">PyGUI</a>这个库实现比较优雅，符合Pythonic精神。但它依赖于pyGtk，其实也是一个二道贩子。比较小众，文档教程之类的不够强大。</p>

<h3>高层次的抽象封装</h3>

<p>还有一些GUI框架，是更高层次的抽象封装，它底层的实现并没有指定哪个GUI框架，它们更注重于GUI组件本身，开发体验和GUI的使用体验，用起来更舒畅，而不用管底层的GUI框架实现。</p>

<h4>PySimpleGUI</h4>

<p><a href="https://pypi.org/project/PySimpleGUI/">PySimpleGUI</a>目的是高级的封装，让使用者完全不用理会具体的GUI框架。但是使用起来比较麻烦，虽然说它封装的更好，但是实装时要把各种GUI框架全装上。它最大的优势就是能与各种框架高度集成，比如能与给图框架matplotlib高度集成，或者与计算机视觉OpenCV高度集成，不需要做太多额外的事情。</p>

<h2>如何选择</h2>

<p>现在人都会有选择困难证，因为可供选择确实太多，对于开发领域更是如此，每一个功能需求都有大量的框架可供选择。</p>

<ul>
<li>把tkinker过滤掉，太丑太难用。</li>
<li>QT系列的也要过滤掉，因为非常讨厌QT。</li>
<li>太原始的封装也要过滤掉，如PyGTK和wxPython，因这些API过于生硬，仅是对核心GUI框架的简单映射封装。</li>
<li>wxWidgets的也要过滤掉，因为讨厌C++。</li>
<li>pyforms也过滤掉，这东西太接近网页了。</li>
</ul>


<p>剩下的只有PySimpleGUI和PyGUI再做一下PK吧。</p>

<p>PyGUI再pass掉，因为它的文档等看起来较简单，暂不考虑。</p>

<p>接下就只剩下PySimpleGUI</p>

<h4><a href="https://pypi.org/project/PySimpleGUI/#description">PySimpleGUI</a></h4>

<ul>
<li><a href="https://pysimplegui.readthedocs.io/en/latest/">官方文档</a></li>
<li><a href="https://realpython.com/pysimplegui-python/">一个教程</a></li>
<li><a href="https://pypi.org/project/PySimpleGUI/">pypi上的介绍</a></li>
</ul>


<p>通过进一步的看文档和资料，可以发现它的语句过于Python化，完全没有面向对象的概念（GUI框架是强OO的，有对象才更方便操作），可能易于上手，但跟大多的GUI框架明显差异过大，语法和语句过于奇怪。比如为何用widnow.read()，这个怪怪的，不应该封装一下嘛？</p>

<p>它看起来也很不错，不过，不想先尝试它，作为备选方案吧。</p>

<h2>集大成者</h2>

<p>除了针对三方GUI平台的封装外，还有一些GUI框架是基于更底层的graphics，从头搭建的GUI能力，比如Kivy和PyGame。</p>

<h3><a href="https://pypi.org/project/pygame/">PyGame</a></h3>

<p><img src="https://p1.ssl.qhimg.com/dr/270_500_/t01002dca6d3a0f83f5.jpg?size=268x161" alt="" /></p>

<p>主要面向游戏开发，并不适用于一般性的GUI开发，所以暂时忽略。</p>

<h3>Kivy</h3>

<p><img src="https://tse1-mm.cn.bing.net/th/id/OIP-C._Fe1WM6KaAnIHiT10uw4BAHaCe?pid=ImgDet&amp;rs=1" alt="" /></p>

<p>就只剩下Kivy了，决定先尝试一下Kivy，起码这个名字听起来更酷一些。重点介绍一下，Kivy一个非常与众不同的Python GUI框架，起码跟上面那一坨封装都不一样。</p>

<p><a href="https://kivy.org/#home">Kivy</a>是一个基于OpenGL的从零搭建GUI框架，GUI是一坨用户操作元素的组合，比如按扭文本框，输入框，文字标签，动态列表等等，它与graphics是无关的，是抽象层次更高的组件；而OpenGL是graphics库，它是专门用于画几何图形的，如点，线，面体等。通常情况下graphics是GUI的更底层能力，GUI是基于某个graphics库搭建而成的。所以Kivy是一个从零搭建的GUI框架，底层graphics是基于OpenGL，它的技术栈层位置与wxWidget/QT/GTK+是处于同一层的。所以，它跟那些封装层的库是完全不一样的东西。</p>

<p>Kivy是跨平台的，开发语言是Python，但是能为不同的平台构建应用程序，与所有的上面的相比，它的优势是不但可生成Desktop应用，也可以为移动平台（安卓和水果）和树莓派构建应用程序。另外一个巨大的优势是它是基于OpenGL实现的，因此可以用上GPU来加速渲染，渲染性能较高，而且会在图形方面和游戏方面有天生的优势，它本身是基于OpenGL的，所以可以直接用OpenGL API进行图形和游戏开发，不用再额外引入依赖。</p>

<ul>
<li><a href="https://kivy.org/#home">官方文档</a></li>
<li><a href="https://www.geeksforgeeks.org/kivy-tutorial/">一个不错的教程</a></li>
</ul>


<p>从文档来看，这东西较适合游戏开发，而且它又是基于OpenGL的，可以用GPU加速，擅长于此。不过不重要，它是目前看起来最好的，先用它吧。还有一个非常大的优点就是，它做的很彻底，代码逻辑是用Python的，但是布局是用一套自定义的规则语言Kv来实现的，这就实现了代码逻辑与布局的分享，与大多数GUI框架的思想是一致的。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://zhuanlan.zhihu.com/p/347290491">Python的GUI图形界面工具大全</a></li>
<li><a href="https://realpython.com/tutorials/gui/">Python GUI Programming Tutorials</a></li>
<li><a href="https://baijiahao.baidu.com/s?id=1751367833923725788">推荐10款Python图形界面（GUI）框架</a></li>
<li><a href="https://wiki.python.org/moin/GuiProgramming">GUI Programming in Python</a></li>
<li><a href="https://pythongui.org/">Python GUI</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Runtime Environment]]></title>
    <link href="http://toughcoder.net/blog/2023/07/14/python-runtime-environment/"/>
    <updated>2023-07-14T22:46:17+08:00</updated>
    <id>http://toughcoder.net/blog/2023/07/14/python-runtime-environment</id>
    <content type="html"><![CDATA[<p><a href="https://www.python.org/">Python</a>是非常流行的通用编程语言，因其简洁和易读而广受喜爱，近年来由于深度学习的崛起更是让Python登顶为<a href="https://www.tiobe.com/tiobe-index/">最受欢迎的编程语言</a>。虽然已使用Python写了一些程序，但总是缺少深度的理解，加之前段时间因为升级pip导致一些依赖的module无法正常工作，于是要停下来把Python到底是如何工作的了解清楚。</p>

<p><a href="http://toughcoder.net/blog/2023/07/14/python-runtime-environment/"><img src="https://ts1.cn.mm.bing.net/th/id/R-C.c953feda2b0afda299ccfbe1a9743f00?rik=zz1NU7tbEq3gJQ&riu=http%3a%2f%2fwww.pc9.com%2fuploads%2f20190916%2f805079fa18cbca1ac696dfc8e5efdece.jpg&ehk=tFZHTezwkONle9xLOfoCkQHlSjQvyAla02%2fvtEsdl9I%3d&risl=&pid=ImgRaw&r=0" title="auto auto" ></a></p>

<!-- more -->


<p><strong>注意</strong>：这不是一个基础的教程，也不是一个系统的教程，假定读者有一定的编程开发经验，并且已有Python基础。</p>

<h2><a href="https://docs.python.org/3/tutorial/interpreter.html">Python解释器</a></h2>

<p>这是Python语言中最重要的东西，它负责运行你写的代码，把我们的代码作为输入塞给Python解释器，就能得到我们期望的输出。</p>

<p><strong>注意</strong>：本文中不纠结编译与解释的区别，以及说Python到底会不会把源代码进行编译。</p>

<p>现代比较流行的操作系统如Ubuntu LTS或者Mac OX都会预装Python，原因在于一方面Python太过流行，另外就是操作系统本身也会用到Python。</p>

<p><img src="https://techvidvan.com/tutorials/wp-content/uploads/sites/2/2020/03/how-python-interpreter-works.jpg" alt="" /></p>

<p>但需要特别注意的是，大Python有两个版本Python2和Python3，且并不兼容，稍学习过Python的都应该知道，现在Python2已经停止维护了，Python社区现只管Python3了，并且以后再说Python其实都是指Python3。本文当中除非特别说明，否则也都是Python3。</p>

<p>虽然说Python2已经停止维护了，但是由于历史的原因很多三方的库未能及时升级到Python3，所以现在的操作系统中仍会把两个版本的Python都集成，Python2的版本一般会是2.7.x，而Python3的版本一般会是3.7.x或者3.8.x。反正不会是最新的3.11或者3.14。</p>

<p>操作系统默认的命令python一般都仍指向Python2，而命令python3才是指向Python3。所以在使用解释器或者指定解释器的时候要注意。</p>

<p><strong>注意</strong>：操作系统一般把程序安装某个位置，然后在系统路径中只添加指向其安装位置的<a href="https://www.geeksforgeeks.org/soft-hard-links-unixlinux/">二进制文件的链接</a>，对于有兼容性不同版本的命令更是如此，比如/usr/bin/python，这是默认的命令，它是一个指向Python 2.7.x安装位置的一个链接。同理/usr/bin/python3也是一个链接。</p>

<p>可以用which命令来查看这些命令的最终指向：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>➜  ~ which python3
</span><span class='line'>/Library/Frameworks/Python.framework/Versions/3.7/bin/python3
</span></code></pre></td></tr></table></div></figure>


<p>需要特别注意的是，操作系统自带的Python一般不是最新的，所以有时候可能有会升级的需要，一般用软件包管理工具如<a href="https://linux.die.net/man/8/apt-get">apt-get</a> 或者<a href="https://brew.sh/">brew</a>可以安装新版本的Python3，如3.11，但一般建议把它安装在一个不同的位置，也就是说不要直接覆盖操作系统预装的版本。并且，不要把默认链接python3指向新版本。这是因为，操作系统之所以选择特定的版本，是为了<strong>兼容性和稳定性</strong>，这个版本能保证操作系统的Python代码和库都能正常运行。如果我们用新版本覆盖了原装的，或者把默认的链接替换掉，有可能会对操作系统造成伤害，轻则发生奇怪的事情，重则可能要重装系统。</p>

<h3>交互式环境</h3>

<p><img src="https://www.circuitbasics.com/wp-content/uploads/2015/12/Python-and-python3-REPL.png" alt="" /></p>

<p>直接启动解释器会进入一个叫做<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">REPL（Read Evaluate Print Loop）</a>的环境，这是脚本语言都会有的一个环境，它的是意思读取指令（也即我们输入的Python语句），执行，打印输出，然后循环上述步骤。直到给一个退出命令(exit())才会终止。</p>

<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy82eFcyRDk0cUJqSEw1Q01lOUVHWEFKTmJmbXJIanNwbkVtOGlheDlKTE1kWU0zSUZHYmZzRHdpY25ZV1h1ZU9jamNIRjBpY1BpYmtFbWljZUo4QTRUOG5KNWljZy82NDA?x-oss-process=image/format,png" alt="" /></p>

<p>另外一个更为高级一些的<a href="https://ipython.org/">交互式Python运行环境</a>就是非常著名的<a href="https://jupyter.org/">Jupyter</a>。</p>

<h3>命令行</h3>

<p>在Python世界里<a href="https://docs.python.org/3/tutorial/modules.html">模块Modules</a>是一个代码管理的基本单元，内置的库和三方的库都包含一个或者多个Module。Python有一个特殊功能，就是可以用命令行直接执行一个Module:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>python3 -m http.server 8000
</span></code></pre></td></tr></table></div></figure>


<p>这就启动了一个非常简单的HTTP server。它的作用就是把一个叫做http.server的Module直接运行起来。</p>

<h3>源代码式</h3>

<p>更多的时候我们会把Python代码写入一个文件，然后再塞给解释器去执行。写一个简单的hello.py：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python3'><span class='line'><span class="c">#!/usr/bin/env python3</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="s">&#39;Hello, world&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后，运行它：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>python3 hello.py
</span><span class='line'>Hello, world
</span></code></pre></td></tr></table></div></figure>


<p>也可以直接执行hello.py</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./hello.py
</span><span class='line'>Hello, world
</span></code></pre></td></tr></table></div></figure>


<p>这里的区别就在于，前面加了解释器的，就会用命令行中的解释器去运行。而直接执行脚本文件，则会用第一行的叫做<a href="https://linuxhandbook.com/shebang/">shebang的东西</a>来找解释器，这里就是<strong>/usr/bin/env python3</strong>，这个意思是说用操作系统中的路径中的python3来作为解释器（作为执行这个脚本的命令）。</p>

<p>那么，利用shebang就可以指定特定的Python版本来运行脚本了。比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python3'><span class='line'><span class="c">#!/usr/local/opt/python@3.11</span>
</span></code></pre></td></tr></table></div></figure>


<h3>环境变量</h3>

<p>解释器在运行代码的时候用到一些库，核心module以及三方module，那么解释器是如何找到这些东西的呢？</p>

<ul>
<li>PYTHONHOME 这是解释器的安装目录，通常用作module搜索的前缀来使用</li>
<li>PYTHONPATH 这是模块module的搜索目录，默认的是sys.path，这个是由Python预定义好了的，通过PYTHONPATH指定的搜索目录会加在sys.path的前面。所以如果想指定额外的Module目录或者想替换掉默认的module时就可以使用此变量。</li>
</ul>


<p>除了一些解释器需要的底层的动态库之外，最重要的就是模块module目录了，默认的module搜索目录由sys.path定义，可以通过两种方式查看它有哪些路径：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>➜  ~ python3 -m site
</span><span class='line'>sys.path <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>    <span class="s1">&#39;/Users/alexhilton&#39;</span>,
</span><span class='line'>    <span class="s1">&#39;/Library/Frameworks/Python.framework/Versions/3.7/lib/python37.zip&#39;</span>,
</span><span class='line'>    <span class="s1">&#39;/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7&#39;</span>,
</span><span class='line'>    <span class="s1">&#39;/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/lib-dynload&#39;</span>,
</span><span class='line'>    <span class="s1">&#39;/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages&#39;</span>,
</span><span class='line'><span class="o">]</span>
</span><span class='line'>USER_BASE: <span class="s1">&#39;/Users/alexhilton/Library/Python/3.7&#39;</span> <span class="o">(</span>doesn<span class="s1">&#39;t exist)</span>
</span><span class='line'><span class="s1">USER_SITE: &#39;</span>/Users/alexhilton/Library/Python/3.7/lib/python/site-packages<span class="s1">&#39; (doesn&#39;</span>t exist<span class="o">)</span>
</span><span class='line'>ENABLE_USER_SITE: True
</span></code></pre></td></tr></table></div></figure>


<p>或者通过代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python3'><span class='line'><span class="err">➜</span>  <span class="o">~</span> <span class="n">python3</span>
</span><span class='line'><span class="n">Python</span> <span class="mf">3.7</span><span class="o">.</span><span class="mi">3</span> <span class="p">(</span><span class="n">v3</span><span class="o">.</span><span class="mf">7.3</span><span class="p">:</span><span class="n">ef4ec6ed12</span><span class="p">,</span> <span class="n">Mar</span> <span class="mi">25</span> <span class="mi">2019</span><span class="p">,</span> <span class="mi">16</span><span class="p">:</span><span class="mi">52</span><span class="p">:</span><span class="mi">21</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="n">Clang</span> <span class="mf">6.0</span> <span class="p">(</span><span class="n">clang</span><span class="o">-</span><span class="mf">600.0</span><span class="o">.</span><span class="mi">57</span><span class="p">)]</span> <span class="n">on</span> <span class="n">darwin</span>
</span><span class='line'><span class="n">Type</span> <span class="s">&quot;help&quot;</span><span class="p">,</span> <span class="s">&quot;copyright&quot;</span><span class="p">,</span> <span class="s">&quot;credits&quot;</span> <span class="ow">or</span> <span class="s">&quot;license&quot;</span> <span class="k">for</span> <span class="n">more</span> <span class="n">information</span><span class="o">.</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="s">&#39;/Library/Frameworks/Python.framework/Versions/3.7/lib/python37.zip&#39;</span><span class="p">,</span> <span class="s">&#39;/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7&#39;</span><span class="p">,</span> <span class="s">&#39;/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/lib-dynload&#39;</span><span class="p">,</span> <span class="s">&#39;/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">exit</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，它会包含当前路径，以及预定义的一些目录。重点看site-packages这个目录，这是所有第三方module安装的目录，Python的包管理工具pip也都是安装在些位置的。所以说，用pip安装完成后，不用特殊指定目录就能找到module。</p>

<h3>解决多版本的site-pakcages冲突</h3>

<p>每一个解释器都能找到它的site-packages，换句话说如果装了不同版本的Python，就会有多个site-packages路径。就比如，在我的电脑上面有三个版本的Python：</p>

<ul>
<li><p>Python2
系统中的默认python指向Python2
/usr/bin/python  2.7.16
site packages: &lsquo;/Library/Python/2.7/site-packages&rsquo;,</p></li>
<li><p>Python3.7
系统带有Python3，由命令/usr/local/bin/python3指向 /Library/Frameworks/Python.framework/Versions/3.7/bin/python3
site packages &lsquo;/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages&rsquo;,</p></li>
<li><p>Python3.11
由brew升级安装得到的。被安装在
二进制是在：/usr/local/opt/<a href="&#x6d;&#97;&#x69;&#x6c;&#116;&#111;&#58;&#x70;&#121;&#x74;&#x68;&#111;&#x6e;&#64;&#x33;&#46;&#x31;&#x31;">&#x70;&#121;&#x74;&#x68;&#x6f;&#110;&#x40;&#x33;&#x2e;&#x31;&#49;</a>
site-packages  /usr/local/lib/python3.11/site-packages</p></li>
</ul>


<p>那么，假如想要把三个site-packages里面的module都得到使用的话，就可以用<strong>PYTHONPATH</strong>来把三个路径都加进来。</p>

<h2><a href="https://www.jetbrains.com/pycharm/">IDE(PyCharm)</a></h2>

<p>对于集成开发环境（IDE）来说，也是可以配置的，几乎都可以配置从解释器，到环境变量都是<a href="https://intellipaat.com/blog/tutorial/pycharm-tutorial/how-to-configure-pycharm-interpreter/?US">可以配置的</a>。</p>

<p><img src="https://intellipaat.com/blog/wp-content/uploads/2020/01/i5-768x495.png" alt="" /></p>

<h2><a href="https://pypi.org/project/pip/">pip</a></h2>

<p>pip是Python的<a href="https://pypi.org/project/pip/">包管理工具</a>，可以用它来安装Python生态中的第三方module，可以理解为apt-get之于Ubutu，brew之于Mac，只不过pip能安装都是Python的module。基础的使用教程可以<a href="https://www.runoob.com/w3cnote/python-pip-install-usage.html">看这里</a>。</p>

<p><img src="https://tse1-mm.cn.bing.net/th/id/OIP-C.lnjh5MWQRVvUHrqx4TH1SwHaHa?pid=ImgDet&amp;rs=1" alt="" /></p>

<p><strong>注意</strong>：pip是与Python版本绑定的，比如pip对应于Python2，pip3对应Python3，因为它是包管理工具，它下载的module都会安装在对应的site-packages里面，而从前面的讨论知道每个解释器是有自己的site-packages，因此pip要对其解释器对应，这样才能安装到正确的位置上。</p>

<p>这样就会有问题，比如安装了多个版本，那么最后一个安装的Python版本的pip会把之前的都覆盖掉。比如我的电脑上最后用brew安装了Python 3.11，然后pip就被替换成了python3.11的，且pip与pip3是一样的了，它安装的module都是在Python 3.11的那个site-packages里面。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>➜  ~ pip3 --version
</span><span class='line'>pip 23.1.2 from /usr/local/lib/python3.11/site-packages/pip <span class="o">(</span>python 3.11<span class="o">)</span>
</span><span class='line'>➜  ~ pip --version
</span><span class='line'>pip 23.1.2 from /usr/local/lib/python3.11/site-packages/pip <span class="o">(</span>python 3.11<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意，因为/usr/local/bin/python3 仍链向了系统预装的python3.7，所以3.11并未有真正的安装成功，最后的系统链接并未有完全修改掉，比如python3仍指向预装的3.7。但比较神奇的是pip被替换为了3.11的。而且，它的site位置也与预装 的不一致了。因为我之前已经用pip3安装了很多三方Module，安装了Python3.11后突然报错找不到module了，原因就在于，现在pip认识的site 位置（3.11的），只有比较少的库，而原来的，仍在原来的位置。</p>

<h2><a href="https://docs.python.org/3/tutorial/venv.html">Virtual Environment</a></h2>

<p>由于可能有多个Python版本，会有不同的site-packages，可能会比较混乱，因此就有了虚拟运行环境这一个的技术，它可以为某一个项目，或者某一类项目设定一个虚拟运行环境，在这个环境里面可以安装任何module，它与宿主操作系统，和其他虚拟环境都是隔离的，互不影响。</p>

<p><img src="https://tse2-mm.cn.bing.net/th/id/OIP-C.xF4itTOl_0EWotnQsd7IJAHaEL?pid=ImgDet&amp;rs=1" alt="" /></p>

<p>虚拟环境还能解决<a href="https://www.techtarget.com/searchitoperations/definition/dependency-hell">依赖地狱问题</a>，比如A项目需要依赖一个1.0版本的module C，但B项目却需要依赖1.4版本的module C，这时如果都在操作系统本机环境去折腾就相当麻烦，也极容易打破项目的稳定性，甚至会影响操作系统的稳定性。这时虚拟环境就能很好的解决这个问题。</p>

<h3><a href="https://docs.python.org/zh-cn/3/library/venv.html">venv</a></h3>

<p>这是官方推荐的虚拟环境管理器，从Python 3.3版本就变成官方的标准module了，从Python3.6以后就是官方推荐的虚拟环境管理器。它的优点很明显，就是不需要额外安装了，且是官方支持的。缺点也很明显，就是不够强大，在软件国度里一般官方的东西都是方便易用，但不够强大。</p>

<h3><a href="https://pypi.org/project/virtualenv/">virtualenv</a></h3>

<p>这个是最为流行的虚拟环境管理器，它出现的非常早，功能也非常的强大，官方的venv其实相当于virutalenv的一个简化版本。甚至这个不单单能隔离Python，也能当成一个系统级别的虚拟环境来使用。</p>

<p>如果项目不是特别多特别复杂的话，其实用官方的venv就够了，毕竟不用折腾，直接拿过来就用了，并且大多数情况下也够用了。但如果项目很多，依赖特别复杂，那还是用virtualenv，毕竟它足够强大。</p>

<h3>How it works</h3>

<p>需要注意，所创建的虚拟环境里面用的Python版本，就是你运行venv时的Python版本，同时从上面的讨论来看，pip的版本也是与Python相关的，简单来理解，你命令行中默认的python3是3.7的，那么你创建的虚拟环境里面的Python就是3.7的，pip也是3.7的。venv的缺点是不够灵活，它只能使用操作系统中已有的Python版本，并且是在创建环境时就指定好了。</p>

<p>相比之下virtualenv就强大很多了，它能自由指定虚拟环境中的Python版本，甚至是操作系统中还未安装的版本，它的指定方式是在创建环境通过参数-p来指定，当然，如果你不指定，它也是用运行virtualenv所使用的那个Python版本。</p>

<p>此外，virtualenv还能继承操作系统中的site-packages，这就更为强大了，可以减少一些非常基础的module的重复安装。总之virtualenv相当强大，建议还是直接上virtualenv。</p>

<h3>实在不行就上<a href="https://www.docker.com/">Docker</a></h3>

<p>其实最为彻底，最为专业的应用级别虚拟化环境就是docker了，venv或者virtualenv仅是隔离Python的依赖环境，一般来说一个应用也会用到Python以外的东西或者影响到运行环境的，即使它是用Python编写的，所以如果 想彻底一些隔离，那就直接<a href="https://www.docker.com/get-started/">上Docker</a>。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://www.knowledgehut.com/blog/programming/run-python-scripts">How To Run Your Python Scripts</a></li>
<li><a href="https://indianpythonista.wordpress.com/2018/01/04/how-python-runs/">How Python runs?</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/341481537">python虚拟环境管理工具venv教程</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/338424040">Python虚拟环境Virtualenv详解</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/269805011">如何使用 virtualenv 创建 Python 虚拟环境？</a></li>
<li><a href="https://www.infoworld.com/article/3239675/virtualenv-and-venv-python-virtual-environments-explained.html">Virtualenv and venv: Python virtual environments explained</a></li>
<li><a href="https://www.cnblogs.com/doublexi/p/15783355.html">python多环境管理（venv与virtualenv）</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hashing Hash and HashMap]]></title>
    <link href="http://toughcoder.net/blog/2023/07/13/hashing-hash-and-hashmap/"/>
    <updated>2023-07-13T23:17:13+08:00</updated>
    <id>http://toughcoder.net/blog/2023/07/13/hashing-hash-and-hashmap</id>
    <content type="html"><![CDATA[<p>哈希表(HashMap)或者叫做散列表，是非常常用的一种二维的键值对式的数据结构，用以非常高效的解决查询问题的。
其核心是Hashing，这是把一个对象映射到一个索引的过程，实现hashing的函数通常称为hash函数或者叫散列函数，基于hashing实现的数据结构称作HashMap，或者叫做散列表。</p>

<p><a href="http://toughcoder.net/blog/2023/07/13/hashing-hash-and-hashmap/"><img src="https://techdose.co.in/wp-content/uploads/2021/02/City-of-TL-2-1024x576.png" title="auto auto" ></a></p>

<!-- more -->


<h2><a href="https://www.techtarget.com/searchdatamanagement/definition/hashing">Hashing</a></h2>

<p><a href="https://www.educative.io/answers/what-is-hashing">哈希或者散列</a>，是一个映射的过程，把一个对象，一些值，一些数据，一个文件等等通过某些方式映射成为一个键，用这个键可以<strong>非常快速</strong>的找到对应的值，也即原数据。通常键都是以索引形式存在的，因为用索引去查找数组的元素是绝对的O(1)时间的。但，这只是哈希过程的一个普通应用实例。</p>

<p><img src="https://tse1-mm.cn.bing.net/th/id/OIP-C.LEfONm4SRcDy3upe46WUMQHaE7?pid=ImgDet&amp;rs=1" alt="" /></p>

<p>在更广泛的加密领域，哈希过程并不是为了查找，而是为了生成一种代表着原数据的签名，也就是用一个更为小巧的方便的数据（通常是字符串）作为原数据的代表，看到了签名，就认为是看到的是其原数据，当然，其实这也是一种查找过程。</p>

<p>所以，不失一般性，满足这样的关系hash(data) = key，就是一个hashing。还要注意这个过程是不可逆的，也就是不存在反函数g(key) = data，没有办法能从key逆推出data。</p>

<h2><a href="https://en.wikipedia.org/wiki/Hash_function">Hash</a></h2>

<p>通常称作Hash，Hash function，Hash algorithm，哈希函数，哈希算法或者散列函数，散列算法。是能够实现hashing的一个函数或者算法。</p>

<p><img src="https://tse1-mm.cn.bing.net/th/id/OIP-C.RKHyLYrEjVpCdQfJFUQy2AHaDq?pid=ImgDet&amp;rs=1" alt="" /></p>

<p>哈希算法是把一个对象转化为int的过程，最为常用的一种哈希方法就是用多项式乘素法，比如一个长度为n的byte数组payload，它的hash = payload[0]*P<sup>n-1</sup> + payload[1]*P<sup>n-2</sup> + &hellip; + payload[n-1]。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Other possible primes are: 31, 131, 1313, 13131, 131313</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">P</span> <span class="o">=</span> <span class="mi">33</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">hash</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">hashBytes</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Polynomial multiplication of prime:</span>
</span><span class='line'><span class="cm"> * hash = c[0]*P^(n-1) + c[1]*P^(n-2) + ... + s[n-1]</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">hashBytes</span><span class="o">(</span><span class="kt">char</span><span class="o">[]</span> <span class="n">chars</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">hash</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">ch</span> <span class="o">:</span> <span class="n">chars</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">hash</span> <span class="o">=</span> <span class="n">P</span> <span class="o">*</span> <span class="n">hash</span> <span class="o">+</span> <span class="n">ch</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">hash</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>像Java中的String用的就是这个算法，Prime选择可能不一样，常用的有31, 131, 1313, 13131, 131313。其他对象都可以使用此方法，因为任何对象都可以序列化为byte。可以看到hash算法没有考虑溢出，这样计算P的乘方，很快就会溢出，但是没关系，溢出会变成负数，并不影响hashing。在有些算法中会对一个很大的素数如10<sup>9</sup>+7取余，以让哈希值变得的不那么大。</p>

<p>另外，可以看出哈希算法是O(L)的，这里L是输入数据的长度，比如对于字符串来说就是字符串的长度，假如是一个很长很长很长的字符串，那么计算其hash可能会很久很久，因此当使用HashMap时，可能就会变得很慢。</p>

<h3>参考资料</h3>

<ul>
<li><a href="https://www.zhihu.com/question/20820286">什么是哈希算法？</a></li>
<li><a href="https://wingsxdu.com/posts/algorithms/cryptographic-hashing-function/">加密哈希算法的实现原理</a></li>
<li><a href="https://segmentfault.com/a/1190000021199728">图解一致性哈希算法</a></li>
<li><a href="https://www.cnblogs.com/barrywxx/p/10739871.html">经典Hash函数的实现</a></li>
<li><a href="https://houbb.github.io/2018/05/30/hash-impl">Hash 算法实现</a></li>
<li><a href="https://developer.aliyun.com/article/1012265">Hash算法详细介绍与实现(一)</a></li>
<li><a href="https://developer.aliyun.com/article/1015830">Hash 算法详细介绍与实现 (二)</a></li>
</ul>


<h2><a href="https://docs.oracle.com/javase/8/docs/api/java/util/HashMap.html">HashMap</a>/<a href="https://docs.oracle.com/javase/8/docs/api/java/util/HashSet.html">HashSet</a></h2>

<p>基于Hashing和Hash构建出来的用于高效查询的数据结构。</p>

<p><img src="https://cdn.educba.com/academy/wp-content/uploads/2019/11/hashmap-in-java.png" alt="" /></p>

<h3>参考资料</h3>

<ul>
<li><a href="https://www.interviewcake.com/concept/java/hash-map">Data structure Hash Table</a></li>
<li><a href="https://www.geeksforgeeks.org/hashing-data-structure/">Hashing Data Structure</a></li>
<li><a href="https://tech.meituan.com/2016/06/24/java-hashmap.html">Java 8系列之重新认识HashMap</a></li>
<li><a href="https://pdai.tech/md/java/collection/java-map-HashMap&amp;HashSet.html">Map - HashSet &amp; HashMap 源码解析</a></li>
<li><a href="https://xie.infoq.cn/article/01538faefd4816128ede4212a">了解 HashMap 数据结构，超详细！</a></li>
</ul>


<h2><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html">ConcurrentHashMap</a></h2>

<p>线程安全的哈希表，采用分段式读加锁的方式来提高并发效率。</p>

<h3>参考资料</h3>

<ul>
<li><a href="https://www.cnblogs.com/zerotomax/p/8687425.html">ConcurrentHashMap源码分析(1.8)</a></li>
<li><a href="https://javaguide.cn/java/collection/concurrent-hash-map-source-code.html">ConcurrentHashMap 源码分析</a></li>
<li><a href="https://juejin.cn/post/7045955943296679949">ConcurrentHashMap源码分析</a></li>
</ul>


<h2><a href="https://en.wikipedia.org/wiki/Hash_collision">哈希碰撞Hash Collision</a></h2>

<p>哈希算法针对不同的原始数据却产生了相同的键，这就是哈希碰撞，因为最理想的hashing是一一对应，同样的原始数据（也就是相等的两个对象）肯定会产生相同的键，这时我们认为数据是同一份（相等的），但不同的数据（也即不相等）却产生了相同的键，就需要进行特殊处理，这会增加复杂度。哈希碰撞是不可避免的，同时也是一个衡量指标，即好的哈希函数会产生较少的合理碰撞（也就是因为数据边界和算法能力导致的碰撞）。</p>

<p><img src="https://ts1.cn.mm.bing.net/th/id/R-C.b7b51eed3f8027b11a32e091363c26f7?rik=scKHPWTjDjuM5Q&amp;riu=http%3a%2f%2fjustinparrtech.com%2fJustinParr-Tech%2fwp-content%2fuploads%2fHashing-Passwords_Hash-Collision.png&amp;ehk=Cs%2fOrEQS48SFm8KbaMfL0mOJxPm3AfjQlJvsMeddGP4%3d&amp;risl=&amp;pid=ImgRaw&amp;r=0" alt="" /></p>

<p>哈希碰撞会降低效率和安全性，比如说服务器通常会把客户端的request先暂存起来，去异步处理，当有了response后，再找到其对应的request然后给其回复response。这一过程，一般会有哈希表来存储request。假如哈希函数选择的不好，比如用request当中的某一个String字段来作为request的Key的话，就有可能被恶意攻击。哈希表常规的效率是很高的，一旦有哈希碰撞就会变成链表复杂度会上升为O(n<sup>2</sup>)。而String的hash是容易产生碰撞，假如恶意客户端发现了是用String作为Key的，那么就可以用能产生哈希碰撞的String来生成不同的request，这样就会让服务器短时间内负载特别高而且宕机。这是一种基于哈希碰撞的古老的攻击方式。</p>

<p>所以一般服务器使用的哈希函数都是要特别设计，不能采用太普通 的哈希算法。</p>

<h3>参考资料</h3>

<ul>
<li><a href="https://www.ruanyifeng.com/blog/2018/09/hash-collision-and-birthday-attack.html">哈希碰撞与生日攻击</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1776352">HASH碰撞问题一直没真正搞懂？这下不用慌了</a></li>
<li><a href="https://segmentfault.com/a/1190000041421664">哈希理解、哈希碰撞（hash冲突）及处理</a></li>
<li><a href="https://www.baeldung.com/cs/hash-collision-weak-vs-strong-resistance">Hash Collision: Weak and Strong Resistance</a></li>
</ul>


<h2><a href="https://en.wikipedia.org/wiki/Rolling_hash">滚动哈希Rolling Hash</a></h2>

<p>是一种哈希算法，使用一个固定长度的窗口（通常远小于数据本身的长度）在数据中滑动，能以更高的效率计算出数据的哈希值（键）。通常会被用于检查文章的相似性（是否存在抄袭），查找重复的子串等。因为滚动哈希是在一个长的序列中以一个固定的窗口在计算，所以特别擅长在接近无限的序列中探测重复子序列，比如网络流模式探测，视频重复帧识别等等。</p>

<p><img src="https://www.francofernando.com/assets/img/blog/algorithms/rolling-hash/rolling-hash-1.png" alt="" /></p>

<p>一个典型的Rolling hash实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="nf">rollingHash</span><span class="o">(</span><span class="n">String</span> <span class="n">payload</span><span class="o">,</span> <span class="kt">int</span> <span class="n">window</span><span class="o">,</span> <span class="kt">int</span> <span class="n">p</span><span class="o">,</span> <span class="kt">int</span> <span class="n">mod</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">payload</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
</span><span class='line'>        <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">hashValues</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">n</span> <span class="o">-</span> <span class="n">window</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">power</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">window</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">power</span> <span class="o">*=</span> <span class="n">p</span><span class="o">;</span>
</span><span class='line'>            <span class="n">power</span> <span class="o">%=</span> <span class="n">mod</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">hash</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">window</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">hash</span> <span class="o">=</span> <span class="o">(</span><span class="n">hash</span> <span class="o">*</span> <span class="n">p</span> <span class="o">+</span> <span class="n">payload</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">))</span> <span class="o">%</span> <span class="n">mod</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">hashValues</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">hash</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">-</span> <span class="n">window</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">hash</span> <span class="o">=</span> <span class="o">(</span><span class="n">hash</span> <span class="o">-</span> <span class="n">power</span> <span class="o">*</span> <span class="n">payload</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">))</span> <span class="o">%</span> <span class="n">mod</span><span class="o">;</span>
</span><span class='line'>            <span class="n">hash</span> <span class="o">=</span> <span class="o">(</span><span class="n">hash</span> <span class="o">*</span> <span class="n">p</span> <span class="o">+</span> <span class="n">payload</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="n">window</span> <span class="o">-</span> <span class="mi">1</span><span class="o">))</span> <span class="o">%</span> <span class="n">mod</span><span class="o">;</span>
</span><span class='line'>            <span class="n">hashValues</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">hash</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">hashValues</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;abcabcabc&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">window</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
</span><span class='line'>        <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">hashes</span> <span class="o">=</span> <span class="n">rollingHash</span><span class="o">(</span><span class="n">payload</span><span class="o">,</span> <span class="n">window</span><span class="o">,</span> <span class="mi">31</span><span class="o">,</span> <span class="n">MOD</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Rolling hash of &quot;</span> <span class="o">+</span> <span class="n">payload</span> <span class="o">+</span> <span class="s">&quot;, window size &quot;</span> <span class="o">+</span> <span class="n">window</span><span class="o">);</span>
</span><span class='line'>        <span class="n">IntStream</span><span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">hashes</span><span class="o">.</span><span class="na">size</span><span class="o">())</span>
</span><span class='line'>                <span class="o">.</span><span class="na">mapToObj</span><span class="o">(</span><span class="n">i</span> <span class="o">-&gt;</span> <span class="n">i</span> <span class="o">+</span> <span class="s">&quot;-&gt;&quot;</span> <span class="o">+</span> <span class="n">payload</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">i</span> <span class="o">+</span> <span class="n">window</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot; whose hash is &quot;</span> <span class="o">+</span> <span class="n">hashes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">))</span>
</span><span class='line'>                <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">// outputs</span>
</span><span class='line'>    <span class="c1">//Rolling hash of abcabcabc, window size 3</span>
</span><span class='line'>    <span class="c1">//0-&gt;abc whose hash is 96354</span>
</span><span class='line'>    <span class="c1">//1-&gt;bca whose hash is 97344</span>
</span><span class='line'>    <span class="c1">//2-&gt;cab whose hash is 98244</span>
</span><span class='line'>    <span class="c1">//3-&gt;abc whose hash is 96354</span>
</span><span class='line'>    <span class="c1">//4-&gt;bca whose hash is 97344</span>
</span><span class='line'>    <span class="c1">//5-&gt;cab whose hash is 98244</span>
</span><span class='line'>    <span class="c1">//6-&gt;abc whose hash is 96354</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看出，字符串是&#8221;abcabcabc&#8221;，有三个重复子串，Rolling hash能清查的找到，看Rolling hash输出中的0，3和6个元素（即子串&#8221;abc&#8221;），另外两个重复子串&#8221;bca&#8221;，是1和4，以及&#8221;cab&#8221;，是2和5。</p>

<p>Rolling hash是O(n)的，每个子串的比较都是O(1)，是相当高效的算法，是用于解决子串查找，重复子串查找的利器。</p>

<h3>参考资料</h3>

<ul>
<li><a href="https://www.geeksforgeeks.org/introduction-to-rolling-hash-data-structures-and-algorithms/">Introduction to Rolling Hash – Data Structures and Algorithms</a></li>
<li><a href="https://juejin.cn/post/7180323231918882874">(Rabin-Karp算法)匹配字符串（滚动哈希）</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/564537288">滚动哈希（Rolling Hash）</a></li>
<li><a href="https://www.cnblogs.com/sunchi/p/13632779.html">滚动hash实现字符串匹配</a></li>
</ul>


<h3>典型问题</h3>

<p>哈希表作为一种极基础的数据结构，提供以O(1)时间查询的能力，所以是刷题当中最为常用的辅助数据结构，没有之一。但其实HashMap/HashSet并不 真的O(1)，它只是摊还分析的时间复杂度能到O(1)，但真实的运行效率不可能达到O(1)，一旦发生哈希碰撞就会上升到O(n<sup>2</sup>)。并且还有扩容和自动装箱autobox等隐形开销，hash函数本身也有开销一般是O(L)的，所以HashMap真实的运行效率并不高。</p>

<p>但哈希表是一种hashing的实现，更为重要的是体现了hashing的映射思想。所以，在有些时候虽然用到了哈希表，但不一定要用HashMap。比如像英文字母到索引的映射，以及数据范围不大的自然数到索引的映射，这本质上也是hashing，但用数组就可以了，并且这是真正的O(1)。</p>

<p>哈希表一般当作基础设施来使用，所以没有专门的题，关于哈希的题目一般都是滚动哈希的，并且难度都不小。</p>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/repeated-dna-sequences/">187. 重复的DNA序列</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/repeated-dna-sequences/solution/187-zhong-fu-de-dnaxu-lie-by-alexhilton-5or9/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/shortest-palindrome/description/">214. 最短回文串</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/shortest-palindrome/solutions/2562115/xi-you-yuan-su-214-zui-duan-hui-wen-chua-0nac/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h2>参考资料</h2>

<ul>
<li><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1304227729113121">哈希算法</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TopK问题，堆和快速选择]]></title>
    <link href="http://toughcoder.net/blog/2023/07/11/topk/"/>
    <updated>2023-07-11T22:35:15+08:00</updated>
    <id>http://toughcoder.net/blog/2023/07/11/topk</id>
    <content type="html"><![CDATA[<p>TopK问题是很常见的一种问题，它的描述是从一个数据集或者序列中取出前k大（或者前k小），或者说找出第k大（第k小）。最为典型的就是 <a href="https://leetcode.cn/problems/kth-largest-element-in-an-array/solution/215-shu-zu-zhong-de-di-kge-zui-da-yuan-s-0lm6/">题215. 数组中的第K个最大元素</a>。解决TopK需要的是最基础的数据结构和算法，不但可以考查编码基本功，更能考查思维能力。</p>

<p><a href="http://toughcoder.net/blog/2023/07/11/topk/"><img src="https://tse1-mm.cn.bing.net/th/id/OIP-C.2aULRows_3CiTGr1IQamzgHaE-?pid=ImgDet&rs=1" title="auto auto" ></a></p>

<!-- more -->


<p>为了方便，后面就以找前k大为主要示例：输入长度为n的整数数组，找出前k大的数，1 &lt;= k &lt;= n。</p>

<h2>排序大法</h2>

<p>解决TopK问题，最简单也是最为暴力的做法就是排序，如果数据是有序的，无论你想找前k大或者第k大，都是非常容易的了。</p>

<p><img src="https://programs.wiki/images/wiki/01f03444af1b72507fd4d18f22f94d67.jpg" alt="" /></p>

<p>问题就转化为排序问题了，至于排序有O(n<sup>2</sup>)的冒泡，选择和插入， 以及高效一些的归并和快速排序。如果是特殊数据集还可以用计数排序（也叫桶排序）。关于排序算法的教程太多了，就不重复了，可以参考Yu神的 <a href="https://leetcode.cn/circle/discuss/eBo9UB/">十大排序从入门到入赘</a>。</p>

<p>用排序来解决TopK问题可行但并不高效，比如k特别小时，n特别大时效率就会特别差。甚至，对于序列（也就是输入数据接近无限）时，可能没有办法先排序再去选择前k大了。</p>

<h2>堆<a href="https://en.wikipedia.org/wiki/Heap_(data_structure)">Heap</a></h2>

<p>堆是一个逻辑上的二叉树式的数据结构，但实现上通常用数组来实现，它保证根节点是所有元素中最大的称作最大堆或者大根堆，或者最小的称作最小堆或者小根堆。有些地方也称之为优先队列，比如在大Java中的就叫做<a href="https://docs.oracle.com/javase/8/docs/api/java/util/PriorityQueue.html">PriorityQueue</a>。</p>

<p><img src="https://www.cdn.geeksforgeeks.org/wp-content/uploads/MinHeapAndMaxHeap.png" alt="" /></p>

<p>以最大堆为例，它保证根节点永远不小于两个子节点，假如堆的大小（也即元素总数）是k，那么根节点就是这k个元素中的最大值，维护一次堆（Heapify）的代价是log(k)，只需要不断的比较根节点和子节点即可，所以复杂度是二叉树的高度即log(k)。对于TopK问题，可以创建一个大小为k的最小堆，把n个数都填到堆里，当堆未满时，直接塞，如果满时了，堆顶是最小值，如果新元素小于最小值可直接跳过，它不可能成为TopK；否则先移除堆顶然后再塞，最后堆里面剩下的就是前k大元素，这样复杂度会降到nlog(k)，当n特别大，k远小于n时，或者说对n接近无穷的序列时，用最小堆的效率会明显的高于排序大法。</p>

<p><img src="https://programs.wiki/images/wiki/219e46ebbe75d147a8f2d508a9b1890a.jpg" alt="" /></p>

<p>堆（优先队列）是一种非常常见且基础的数据结构，标准库中都有，可以拿来就用，但是学习手撸一个堆更能加深理解。</p>

<h3>堆的实现</h3>

<p>来手撸一个最大堆。最常见的就是二叉堆，也就是说逻辑上是一个二叉树，但实际的存储一般是用数组，索引0就是根节点root（又叫堆顶），索引i它的左子节点是在索引2*i+1，右子节点是在2*i+2。</p>

<p>需要不断的<strong>维护堆的特性</strong>，也即是它的<strong>根节点总是大于两个子节点</strong>，要时刻保持这种性质。主要难点在于向堆中添加一个元素时，先把此元素放在数组最后，也即树中最右下的叶子节点，然后不断的向上更新：如果此元素大于其父节点，就互换直到它小于其父节点。</p>

<p>另外需要维护的地方就是移除堆顶，堆顶是堆中的最大元素，它大于其两个子节点。大哥没了，就要重新选大哥：因为逻辑上是一个二叉树，所以只需要解决一个最小的树即可，其余可以递归处理。从父节点，左子节点和右子节点中取最大的，与父节点互换，然后再递归处理刚刚转换过的子树，即可。</p>

<p>废话这么多，其实代码比较精简，也较容易理解，还是直接上代码吧：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * A bound Max Heap of int type elements.</span>
</span><span class='line'><span class="cm"> * This is a binary heap with array as the underlying container.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MaxHeap</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">INF</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">capacity</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * Put the elements into an array, but the logical relationship is a binary tree.</span>
</span><span class='line'><span class="cm">     * 0 is the root;</span>
</span><span class='line'><span class="cm">     * i&#39;s left child is 2*i + 1, right child is 2*i + 2;</span>
</span><span class='line'><span class="cm">     * i&#39;s parent is (i-1) / 2.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">elements</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">MaxHeap</span><span class="o">(</span><span class="kt">int</span> <span class="n">capacity</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">capacity</span> <span class="o">=</span> <span class="n">capacity</span><span class="o">;</span>
</span><span class='line'>        <span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="n">elements</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">capacity</span><span class="o">];</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Nothing happens if heap is full.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">offer</span><span class="o">(</span><span class="kt">int</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">isFull</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Overflowed.</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">         * Put the new element at the end of the heap.</span>
</span><span class='line'><span class="cm">         * Push it up until it is less than its parent.</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="n">size</span><span class="o">++;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">size</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="n">elements</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">e</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">elements</span><span class="o">[</span><span class="n">parent</span><span class="o">(</span><span class="n">i</span><span class="o">)]</span> <span class="o">&lt;</span> <span class="n">elements</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">swap</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">parent</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
</span><span class='line'>            <span class="n">i</span> <span class="o">=</span> <span class="n">parent</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">heapSize</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">peek</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">INF</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">elements</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">clear</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">poll</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">INF</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">size</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">size</span><span class="o">--;</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">elements</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">         * Root is the max value in the heap, will remove and return it to caller.</span>
</span><span class='line'><span class="cm">         * Push down the tree and select the max of left and right as the new parent.</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">root</span> <span class="o">=</span> <span class="n">elements</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>        <span class="n">elements</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">elements</span><span class="o">[</span><span class="n">size</span> <span class="o">-</span> <span class="mi">1</span><span class="o">];</span>
</span><span class='line'>        <span class="n">size</span><span class="o">--;</span>
</span><span class='line'>        <span class="n">heapify</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">root</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isEmpty</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">size</span> <span class="o">==</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isFull</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">size</span> <span class="o">==</span> <span class="n">capacity</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * Heapify the sub-tree rooted with index i.</span>
</span><span class='line'><span class="cm">     * Find the largest value of parent, left and right;</span>
</span><span class='line'><span class="cm">     * If the parent is the largest, we are done.</span>
</span><span class='line'><span class="cm">     * Swap parent with the largest node, now parent is the largest;</span>
</span><span class='line'><span class="cm">     * Keep heapifying the swapped sub-tree.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">heapify</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="n">left</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="n">right</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">largest</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">l</span> <span class="o">&lt;</span> <span class="n">size</span> <span class="o">&amp;&amp;</span> <span class="n">elements</span><span class="o">[</span><span class="n">l</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">elements</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">largest</span> <span class="o">=</span> <span class="n">l</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">r</span> <span class="o">&lt;</span> <span class="n">size</span> <span class="o">&amp;&amp;</span> <span class="n">elements</span><span class="o">[</span><span class="n">r</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">elements</span><span class="o">[</span><span class="n">largest</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">largest</span> <span class="o">=</span> <span class="n">r</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">largest</span> <span class="o">!=</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">swap</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">largest</span><span class="o">);</span>
</span><span class='line'>            <span class="n">heapify</span><span class="o">(</span><span class="n">largest</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">swap</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">j</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">j</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="n">elements</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>        <span class="n">elements</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">elements</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
</span><span class='line'>        <span class="n">elements</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">t</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="nf">parent</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="nf">left</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="nf">right</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>完整<a href="https://github.com/alexhilton/EffectiveAlgorithm/blob/main/datastructure/src/main/java/MaxHeap.java">代码在这里</a>。</p>

<p>这就是最基础的一种二叉堆(Binary Heap)的实现。注意基础堆是用于快速找最大值或者最小值，是O(1)的，其他的操作如查询非最大值或者最小值，或者移除某个特定的元素，效率差会变成O(n)的。</p>

<p>为此，还有其他的实现方式如<a href="https://brilliant.org/wiki/binomial-heap/">Binomial Heap</a>和<a href="https://brilliant.org/wiki/fibonacci-heap/">Fibonacci Heap</a>，这两种堆除了保证堆的基本特质外，还能把其他的操作也降低到log(n)的复杂度。</p>

<h3>堆的应用</h3>

<p>一是用来排序，通常称作堆排序，把n个元素都入堆，然后依次把堆顶取出来，这样就能得到一个有序数组了。复杂度是nlog(n)。</p>

<p>另外，就是用于解决topK问题了。更为实际一点的应用就是Job Scheduling，把一坨Job加入堆中，每次取堆顶（优先级最高的Job）来执行。</p>

<h2><a href="https://en.wikipedia.org/wiki/Quickselect">Quick select</a></h2>

<p>快速选择是快速排序衍生出来的一个算法，专门适用以线性复杂度O(n)来解决TopK问题。为此我们先复习快速排序算法，然后再解释快速选择原理。</p>

<p><img src="https://image3.slideserve.com/6106968/quick-select-visualization-l.jpg" alt="" /></p>

<h3>快速排序</h3>

<p>这是一个非常经典又基础的算法，是算法入门的必讲算法。快速排序的<strong>核心思想是分治</strong>(Divide and Conquer)，核心技巧是<strong>分区(partition)</strong>，选取一个<strong>轴元素作为分界点(pivot)</strong>，把<strong>小于轴的元素</strong>都放在它<strong>左边</strong>，把<strong>大于它的元素</strong>都放在其<strong>右边</strong>，然后再用同样的方法处理左边和右边。伪码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nf">quickSort</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">start</span><span class="o">,</span> <span class="kt">int</span> <span class="n">end</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">start</span> <span class="o">==</span> <span class="n">end</span><span class="o">)</span> <span class="k">return</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">p</span> <span class="o">=</span> <span class="n">partition</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="n">start</span><span class="o">,</span> <span class="n">end</span><span class="o">);</span>
</span><span class='line'>    <span class="n">quickSort</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="n">start</span><span class="o">,</span> <span class="n">p</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>    <span class="n">quickSort</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="n">p</span><span class="o">,</span> <span class="n">end</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>分区</h3>

<p>分区partition是快排的核心技巧，当然也是快速选择的核心，它是先选出一个轴元素pivot，然后以它为界把数组分成两段。比如说数组arr = [5,3,7,1,8,2,9,4]。如果选择索引位置0，元素5作为pivot，那么partition之后的数组会变为arr=[3,1,2,4,5,7,8,9]，partition的返回值，是pivot元素在分区之后的新索引p，即此例中的索引4。可以看出经过partition后，数组左区[0,p-1]都是小于pivot的，而右区[p,n-1]则是大于等于pivot的。这就是分区的作用。</p>

<p>分区算法轴元素的选择至关重要，为了达到最好的效果，在区间内随机选择一个索引位置的元素作为pivot是最理想的，摊还分析后可以达到O(n)。快排的复杂则是nlog(n)。</p>

<p>对于数组arr，做partition的具体做法是：</p>

<ol>
<li>随机选择一个元素为轴元素，记其索引为pivot</li>
<li>先把pivot与最后一个元素交换swap(arr, pivot, end)，注意交换后轴元素在end，即arr[end]</li>
<li>用双指针，左指针left总是指针向小于轴元素arr[end]的最后一个元素，也即分区好了时的左边界的最后一个位置。</li>
<li>右指针right则从start开始，遍历到end - 1，如果arr[right]小于轴，即arr[right]&lt;arr[end]，则交换并更新左指针</li>
<li>最后left索引即是轴应该在的索引，与轴交换swap(arr, left, end)</li>
<li>返回left。这是分区后的轴所在的位置。</li>
</ol>


<p>代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">int</span> <span class="nf">partition</span><span class="o">(</span><span class="n">Random</span> <span class="n">random</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">start</span><span class="o">,</span> <span class="kt">int</span> <span class="n">end</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">pivot</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="n">end</span> <span class="o">-</span> <span class="n">start</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">start</span><span class="o">;</span>
</span><span class='line'>        <span class="n">swap</span><span class="o">(</span><span class="n">nums</span><span class="o">,</span> <span class="n">pivot</span><span class="o">,</span> <span class="n">end</span><span class="o">);</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">start</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">start</span><span class="o">;</span> <span class="n">right</span> <span class="o">&lt;</span> <span class="n">end</span><span class="o">;</span> <span class="n">right</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">right</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">[</span><span class="n">end</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">left</span><span class="o">++;</span>
</span><span class='line'>                <span class="n">swap</span><span class="o">(</span><span class="n">nums</span><span class="o">,</span> <span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">left</span><span class="o">++;</span>
</span><span class='line'>        <span class="n">swap</span><span class="o">(</span><span class="n">nums</span><span class="o">,</span> <span class="n">left</span><span class="o">,</span> <span class="n">end</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">left</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>记住，<strong>分区返回一个轴的索引，轴左边的元素都小于轴，轴右边的元素都大于轴</strong>。这是快速排序和快速选择的核心奥妙精华所在。</p>

<h3>快速选择</h3>

<p>基于分区就能开发出快速选择算法。对于长度为n的数组arr，进行partition后，得到一个轴的位置pivot，[0,pivot-1]都小于arr[pivot]，而[pivot+1,n-1]都大于arr[pivot]。那么，对于想找出前k大的TopK问题而方，如果pivot=n-k，那么[pivot, n - 1]分区后的右边部分不就刚好前k大元素么？</p>

<p>有同学举手问了，咋可能那么巧嘛。这位同学请先坐下，不巧也没关系，如果pivot大于n-k，说明比pivot大的数不够k个，就得往左找，所以在左部分递归处理就可以了；同理，如果pivot小于n-k，说明右部分太多了，往右找即可。代码大概这样子的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">int</span> <span class="nf">findKthLargest</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Random</span> <span class="n">random</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Random</span><span class="o">();</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">target</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="n">k</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">end</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">partition</span><span class="o">(</span><span class="n">random</span><span class="o">,</span> <span class="n">nums</span><span class="o">,</span> <span class="n">start</span><span class="o">,</span> <span class="n">end</span><span class="o">);</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">index</span> <span class="o">!=</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">index</span> <span class="o">&gt;</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">end</span> <span class="o">=</span> <span class="n">index</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">start</span> <span class="o">=</span> <span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">index</span> <span class="o">=</span> <span class="n">partition</span><span class="o">(</span><span class="n">random</span><span class="o">,</span> <span class="n">nums</span><span class="o">,</span> <span class="n">start</span><span class="o">,</span> <span class="n">end</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">nums</span><span class="o">[</span><span class="n">index</span><span class="o">];</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是迭代式的，看起来可能不那么直观，我们用递归来写，就相当直观了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="nf">quickSelect</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="n">start</span><span class="o">,</span> <span class="n">end</span><span class="o">,</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">start</span> <span class="o">==</span> <span class="n">end</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="k">return</span> <span class="n">start</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">p</span> <span class="o">=</span> <span class="n">partition</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="n">start</span><span class="o">,</span> <span class="n">end</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">p</span> <span class="o">==</span> <span class="n">n</span> <span class="o">-</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">p</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">p</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">-</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">quickSelect</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="n">p</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">end</span><span class="o">,</span> <span class="n">k</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">quickSelect</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="n">start</span><span class="o">,</span> <span class="n">p</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">k</span> <span class="o">-</span> <span class="n">p</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>总结</h2>

<p>TopK问题是非常常见且基础的一个问题，通常是融合在了其他问题里面，不会以比较直观的方式求TopK。如果是问题中的一个子问题，那么通常用堆来当作辅助数据结构是最优的做法。如果TopK问题是最问题的最后一步的话，那么排序或者用快速选择也是可以的。</p>

<h2>典型问题</h2>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/kth-largest-element-in-an-array/">215. 数组中的第K个最大元素</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/kth-largest-element-in-an-array/solution/215-shu-zu-zhong-de-di-kge-zui-da-yuan-s-0lm6/">题解</a> </td>
<td style="text-align:left;"> 典型TopK问题 </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/merge-k-sorted-lists/">23. 合并 K 个升序链表</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/merge-k-sorted-lists/solution/by-alexhilton-zctb/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/sliding-window-maximum/">239. 滑动窗口最大值</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/sliding-window-maximum/solution/239-hua-dong-chuang-kou-zui-da-zhi-xian-fwypk/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/top-k-frequent-elements/">347. 前 K 个高频元素</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/top-k-frequent-elements/solution/by-alexhilton-xhxc/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/k-closest-points-to-origin/">973. 最接近原点的 K 个点</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/k-closest-points-to-origin/solution/xi-you-yuan-su-973-zui-jie-jin-yuan-dian-xtze/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/wiggle-sort-ii/">324. 摆动排序 II</a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h2>参考资料</h2>

<ul>
<li><a href="https://www.geeksforgeeks.org/heap-data-structure/">Heap Data Structure</a></li>
<li><a href="https://www.programiz.com/dsa/heap-data-structure">Heap Data Structure</a></li>
<li><a href="https://blog.csdn.net/guoweimelon/article/details/50904346">堆树（最大堆、最小堆）详解</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/362129090">数据结构之最大堆</a></li>
<li><a href="https://www.geeksforgeeks.org/quickselect-algorithm/">Quickselect Algorithm</a></li>
<li><a href="https://aticleworld.com/quickselect-algorithm/">Quickselect Algorithm: Quick Select Algorithm With Example Code</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/64627590">Top K 问题的最优解 - 快速选择算法（Quickselect）</a></li>
<li><a href="https://nicodechal.github.io/2020/01/12/quick-sort-and-quick-selection/">快速排序 ( QuickSort ) 和快速选择 ( QuickSelection )</a></li>
<li><a href="https://juejin.cn/post/6844903774004183047">算法必学：经典的 Top K 问题</a></li>
<li><a href="https://segmentfault.com/a/1190000041127350">面试被问TopK问题，可以这样优雅的解答</a></li>
<li><a href="https://blog.csdn.net/z50L2O08e2u4afToR9A/article/details/82837278">拜托，面试别再问我TopK了！！！</a></li>
<li><a href="https://leetcode.cn/circle/discuss/eBo9UB/">十大排序从入门到入赘</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
