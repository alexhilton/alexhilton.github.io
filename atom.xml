<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[稀有猿诉]]></title>
  <link href="https://alexhilton.github.io/atom.xml" rel="self"/>
  <link href="https://alexhilton.github.io/"/>
  <updated>2025-09-24T22:42:05+08:00</updated>
  <id>https://alexhilton.github.io/</id>
  <author>
    <name><![CDATA[Alex Hilton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[面向开发者的系统设计：像建筑师一样思考]]></title>
    <link href="https://alexhilton.github.io/blog/2025/09/24/system-design-for-developers/"/>
    <updated>2025-09-24T22:31:48+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/09/24/system-design-for-developers</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自「System Design for Developers: Think Like an Architect」，原文链接<a href="https://towardsdev.com/system-design-for-developers-think-like-an-architect-87f32882ca28">https://towardsdev.com/system-design-for-developers-think-like-an-architect-87f32882ca28</a>，由Saurabh Singh发布于2025年8月25日。</p></blockquote>

<p><a href="https://alexhilton.github.io/blog/2025/09/24/system-design-for-developers/"><img src="https://miro.medium.com/v2/resize:fit:1400/1*b1eSMQdryXSteTJredbMtA.png" title="auto auto" ></a></p>

<!-- more -->


<blockquote><p>“建筑是一种社会行为，也是人类活动的物质舞台。”—— Spiro Kostof</p></blockquote>

<p>正如建筑师不会在没有蓝图的情况下开始建造一样，开发者也不应该在没有系统设计的情况下开始编码。然而，许多开发者直接进入实现阶段，却发现自己陷入了技术债务、性能瓶颈和架构噩梦的迷宫之中，而这些本可以通过适当的规划来避免。</p>

<p>系统设计是一门艺术和科学，它定义系统的架构、组件、模块、接口和数据，以满足特定需求。它就像一座屹立百年的房屋和一座因自身重量而倒塌的房屋之间的区别。</p>

<h2>建筑师的思维方式：分解复杂问题</h2>

<h2>分层思考，而非直线思考</h2>

<p>想象一下，你正在设计一座摩天大楼。你不会先决定第 47 层的墙壁要刷什么颜色。你会先从地基开始，然后是结构框架，接着是电气和管道系统，最后是室内设计。</p>

<p>软件系统也遵循同样的原则。想象一下<strong>可视化页面构建器应用程序</strong>——想想 Webflow、Wix 或 Squarespace 等工具，它们允许用户通过拖放界面创建网页，而无需编写代码。这些系统非常复杂，用户可以：</p>

<ul>
<li>将组件（按钮、图片、文本块）从库拖放到画布上</li>
<li>通过可视化控件自定义属性（颜色、字体、大小）</li>
<li>在构建过程中实时预览页面</li>
<li>将网站直接发布到 Web 上</li>
<li>与团队成员实时协作</li>
</ul>


<p>架构师无需深入研究拖放功能的实现细节，而是首先思考：</p>

<p>基础层：核心实体有哪些？</p>

<p>页面、组件、模板、用户、项目</p>

<p>结构层：这些实体之间如何关联？</p>

<p>用户创建项目
项目包含页面
页面由组件组成
组件可以保存为模板</p>

<p>系统层：它们如何通信？</p>

<ul>
<li>用于 CRUD 操作的 RESTful API</li>
<li>用于实时协作的 WebSocket 连接</li>
<li>用于组件更新的事件驱动架构</li>
</ul>


<p><strong>界面层</strong>：用户如何交互？</p>

<ul>
<li>用于项目管理的仪表盘</li>
<li>用于页面编辑的画布</li>
<li>用于选择的组件库</li>
<li>用于测试的预览模式</li>
</ul>


<p>正如软件工程师 Grady Booch 曾经说过的：“优秀软件的功能在于化繁为简。” 这种分层方法将极其复杂的内容转化为易于管理的模块。</p>

<h2>📝 互动练习：分层架构</h2>

<p><strong>现在就拿起纸笔！</strong>在继续阅读之前，请尝试以下方法：</p>

<ol>
<li><strong>画四个水平矩形</strong>，并将它们叠放在一起</li>
<li><strong>从上到下分别标注</strong>：界面、系统、结构、基础</li>
<li><strong>选择你日常使用的任何应用</strong>（Netflix、Amazon、WhatsApp）</li>
<li><strong>在每一层</strong>中填入你认为应该填入的内容</li>
</ol>


<p>Netflix 示例：_</p>

<ul>
<li>界面：搜索栏、视频播放器、推荐</li>
<li>系统：流媒体服务、推荐引擎、用户身份验证</li>
<li>结构：用户观看电影，电影有评分</li>
<li>基础：用户、电影、评分、订阅</li>
</ul>


<p><strong>为什么要画这个？</strong>你的大脑对你手绘内容的记忆力比你刚刚阅读的内容强 6 倍。这张简单的草图会让你立刻理解文章的其余部分。</p>

<p><img src="https://miro.medium.com/v2/resize:fit:2000/1*k5g3kjh3ugcfUf5CWJjoFw.jpeg" alt="我在重新设计视频平台架构时画了这张草图。产品经理终于明白了为什么我们不能简单地“添加一个功能”——他能看到它会影响到哪个层级。这张图避免了3个月的技术债务！" /></p>

<h2>分解策略</h2>

<p>分解复杂问题就像解剖手表。你需要了解每个齿轮、弹簧和机械装置，然后才能构建或修复整个钟表。</p>

<p><strong>功能分解示例</strong>：可视化页面构建器</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">Page</span> <span class="n">Builder</span> <span class="n">System</span>
</span><span class='line'><span class="err">├──</span> <span class="n">Authentication</span> <span class="o">&amp;</span> <span class="n">Authorization</span>
</span><span class='line'><span class="err">│</span>   <span class="err">├──</span> <span class="n">User</span> <span class="n">registration</span><span class="o">/</span><span class="n">login</span>
</span><span class='line'><span class="err">│</span>   <span class="err">├──</span> <span class="n">Role</span><span class="o">-</span><span class="n">based</span> <span class="n">permissions</span>
</span><span class='line'><span class="err">│</span>   <span class="err">└──</span> <span class="n">Session</span> <span class="n">management</span>
</span><span class='line'><span class="err">├──</span> <span class="n">Project</span> <span class="n">Management</span>
</span><span class='line'><span class="err">│</span>   <span class="err">├──</span> <span class="n">Project</span> <span class="n">CRUD</span> <span class="n">operations</span>
</span><span class='line'><span class="err">│</span>   <span class="err">├──</span> <span class="n">Version</span> <span class="n">control</span>
</span><span class='line'><span class="err">│</span>   <span class="err">└──</span> <span class="n">Collaboration</span> <span class="n">features</span>
</span><span class='line'><span class="err">├──</span> <span class="n">Page</span> <span class="n">Editor</span>
</span><span class='line'><span class="err">│</span>   <span class="err">├──</span> <span class="n">Canvas</span> <span class="n">rendering</span> <span class="n">engine</span>
</span><span class='line'><span class="err">│</span>   <span class="err">├──</span> <span class="n">Component</span> <span class="n">management</span>
</span><span class='line'><span class="err">│</span>   <span class="err">├──</span> <span class="n">Drag</span><span class="o">-</span><span class="ow">and</span><span class="o">-</span><span class="n">drop</span> <span class="n">interface</span>
</span><span class='line'><span class="err">│</span>   <span class="err">└──</span> <span class="n">Real</span><span class="o">-</span><span class="n">time</span> <span class="n">preview</span>
</span><span class='line'><span class="err">├──</span> <span class="n">Component</span> <span class="n">Library</span>
</span><span class='line'><span class="err">│</span>   <span class="err">├──</span> <span class="n">Built</span><span class="o">-</span><span class="ow">in</span> <span class="n">components</span>
</span><span class='line'><span class="err">│</span>   <span class="err">├──</span> <span class="n">Custom</span> <span class="n">components</span>
</span><span class='line'><span class="err">│</span>   <span class="err">└──</span> <span class="n">Template</span> <span class="n">system</span>
</span><span class='line'><span class="err">└──</span> <span class="n">Export</span> <span class="o">&amp;</span> <span class="n">Publishing</span>
</span><span class='line'>    <span class="err">├──</span> <span class="n">Static</span> <span class="n">site</span> <span class="n">generation</span>
</span><span class='line'>    <span class="err">├──</span> <span class="n">Hosting</span> <span class="n">integration</span>
</span><span class='line'>    <span class="err">└──</span> <span class="n">SEO</span> <span class="n">optimization</span>
</span></code></pre></td></tr></table></div></figure>


<p>每个分支都可以独立开发、单独测试，并系统地集成。这种方法遵循 Unix 哲学：“专心做好一件事。”</p>

<h2>📝 互动练习：系统分解树</h2>

<p><strong>又该画草图了！</strong> 这个练习可以训练你的“架构师大脑”：</p>

<ol>
<li><strong>画一个树形结构</strong>，以“页面构建器”为根</li>
<li><strong>添加 5 个主要分支</strong>（思考：哪些是大块？）</li>
<li><strong>在每个分支下，添加 2-3 个叶子</strong>（较小的部分）</li>
<li><strong>使用简单的方框和线条</strong>——无需复杂的图表！</li>
</ol>


<p><em>你的绘图可能看起来像：</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='gherkin'><span class='line'><span class="nf">Page Builder</span>
</span><span class='line'><span class="nf">   /</span>
</span><span class='line'>
</span><span class='line'><span class="k">   |</span>
</span><span class='line'>
</span><span class='line'><span class="k">   |</span>
</span><span class='line'>
</span><span class='line'><span class="nf">   \</span>
</span><span class='line'><span class="nf"> Auth  Pages  Components  Export</span>
</span><span class='line'><span class="k">  |</span>
</span><span class='line'>
</span><span class='line'><span class="k">  |</span>
</span><span class='line'>
</span><span class='line'><span class="k">  |</span>
</span><span class='line'>
</span><span class='line'><span class="k">  |</span><span class="nf"></span>
</span><span class='line'><span class="nf">Login  Create   Library   HTML</span>
</span><span class='line'><span class="nf">Signup Edit</span>
</span><span class='line'>
</span><span class='line'><span class="nf">Custom</span>
</span><span class='line'>
</span><span class='line'><span class="nf">PDF</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>神奇时刻</strong>：当你无法进一步分解一个方框时，这可能就是一个开发人员一周的工作。如果觉得方框太大，就进一步分解它！</p>

<h2>可扩展性：今天构建，应对未来的问题</h2>

<h2>成长型思维</h2>

<blockquote><p>“种一棵树的最佳时机是20年前，其次是现在。”——中国谚语</p></blockquote>

<p>可扩展性规划就像为房子选择地基。你可能从一栋小屋开始，但如果你计划扩建成一座豪宅，你就需要一个能够支撑未来发展的地基。</p>

<p>考虑三个可扩展性维度：</p>

<p><strong>垂直扩展（向上扩展）</strong>：就像在建筑物中增加更多楼层</p>

<ul>
<li>增加现有服务器上的 CPU、RAM 或存储空间</li>
<li>简单但存在物理限制</li>
<li>单点故障</li>
</ul>


<p><strong>水平扩展（向外扩展）</strong>：就像在综合体中建造更多建筑物</p>

<ul>
<li>添加更多服务器以分散负载</li>
<li>更复杂但几乎不受限制</li>
<li>更好的容错能力</li>
</ul>


<p><strong>功能扩展</strong>：就像为不同用途建造专用建筑物</p>

<ul>
<li>微服务架构</li>
<li>每个服务处理特定功能</li>
<li>独立扩展和部署</li>
</ul>


<h2>可扩展性的红绿灯系统</h2>

<p><strong>🟢 绿灯决策（第一天）</strong>：</p>

<ul>
<li>简单的单体架构</li>
<li>单一数据库</li>
<li>使用 Redis 进行基本缓存</li>
<li>静态资源的 CDN</li>
</ul>


<p><strong>🟡 黄灯决策（流量增长）</strong>：</p>

<ul>
<li>数据库只读副本</li>
<li>应用服务器集群</li>
<li>API 速率限制</li>
<li>监控和报警系统</li>
</ul>


<p><strong>🔴 红灯决策（高流量）</strong>：</p>

<ul>
<li>微服务架构</li>
<li>数据库分片</li>
<li>用于异步处理的消息队列</li>
<li>自动扩展基础设施</li>
</ul>


<p>对于我们的页面构建器示例，你可以从一个简单的 Python FastAPI 服务器和 PostgreSQL 数据库开始。随着流量的增长，你将引入：</p>

<ol>
<li><strong>缓存层</strong>：用于会话存储和频繁访问的模板的 Redis</li>
<li><strong>CDN</strong>：用于服务组件资源和生成页面的 CloudFront</li>
<li><strong>数据库优化</strong>：用于分析的读取副本，为不同域提供独立的数据库</li>
<li><strong>服务分离</strong>：用于渲染、文件管理和用户管理的专用微服务</li>
</ol>


<p><img src="https://miro.medium.com/v2/resize:fit:1400/1*93OTsJ_L4-7WhICsL2EL4w.jpeg" alt="我绘制产品目标的草图" /></p>

<h2>📝 互动练习：扩展演进</h2>

<p><strong>这张图将成为你的扩展路线图！</strong></p>

<ol>
<li>在你的纸上<strong>画三列</strong>，分别标记为：“第 1 天”、“第 6 个月”、“第 2 年”</li>
<li><p><strong>在每一列中，画出你的架构图：</strong></p></li>
<li><p>第 1 天：画两个方框（前端、API），下方画一个圆柱体（数据库）</p></li>
<li>第 6 个月：添加更多方框（Redis 缓存、CDN 云、负载均衡器）</li>
<li>第 2 年：将 API 方框拆分成多个小方框（用户服务、项目服务等）</li>
</ol>


<p><strong>3. 在各列之间画箭头</strong>，展示演进过程</p>

<p><strong>4. 在每列上方画一些简笔画</strong>，展示用户数量：100 → 1 万 → 100 万</p>

<p><strong>从你的图中得出的关键洞察：</strong>注意复杂性是如何逐渐增长的，而不是一下子增长的。这就是真实系统演进的方式！</p>

<h2>职责三位一体：数据库、API 和前端</h2>

<h2>三层架构理念</h2>

<p>将 Web 应用程序想象成一家餐厅：</p>

<p><strong>前端（餐厅）</strong>：客户互动的地方</p>

<ul>
<li>用户界面和体验</li>
<li>输入验证和格式化</li>
<li>状态管理和路由</li>
</ul>


<p><strong>API（厨房）</strong>：魔法发生的地方</p>

<ul>
<li>业务逻辑处理</li>
<li>数据转换和验证</li>
<li>与外部服务集成</li>
</ul>


<p><strong>数据库（食品储藏室）</strong>：食材存储的地方</p>

<ul>
<li>数据持久化和检索</li>
<li>数据完整性和关系</li>
<li>性能优化</li>
</ul>


<blockquote><p>“好的架构不在于结构本身，而在于它所创造的空间。” — 安藤忠雄</p></blockquote>

<h2>📝 互动练习：餐厅架构</h2>

<p><strong>让我们通过一个绘画练习来具体化这一点：</strong></p>

<ol>
<li><p><strong>绘制一个简单的餐厅平面图</strong>，其中包含三个区域：</p></li>
<li><p>餐厅（顾客就座的地方）</p></li>
<li>厨房（准备食物的地方）</li>
<li>储藏室（存放食材的地方）</li>
</ol>


<p><strong>2. 现在绘制箭头表示数据流向：</strong></p>

<ul>
<li>顾客点餐 → 厨房</li>
<li>厨房索取食材 → 储藏室</li>
<li><p>厨房送出准备好的食物 → 餐厅</p></li>
<li><p><strong>为每个区域标注相应的 Web 对应项：</strong></p></li>
<li><p>餐厅 = 前端</p></li>
<li>厨房 = API</li>
<li>储藏室 = 数据库</li>
</ul>


<p><strong>为什么这样做有效：</strong>现在你的大脑已经对抽象的系统概念有了物理隐喻。每次设计系统时，想象一下这家餐厅的场景！</p>

<h2>职责边界</h2>

<p><strong>数据库职责</strong>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">--</span> <span class="err">✅</span> <span class="n">Good</span><span class="p">:</span> <span class="n">Database</span> <span class="n">handles</span> <span class="n">data</span> <span class="n">integrity</span>
</span><span class='line'><span class="n">CREATE</span> <span class="n">TABLE</span> <span class="n">users</span> <span class="p">(</span>
</span><span class='line'>    <span class="nb">id</span> <span class="n">SERIAL</span> <span class="n">PRIMARY</span> <span class="n">KEY</span><span class="p">,</span>
</span><span class='line'>    <span class="n">email</span> <span class="n">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="n">UNIQUE</span> <span class="n">NOT</span> <span class="n">NULL</span><span class="p">,</span>
</span><span class='line'>    <span class="n">created_at</span> <span class="n">TIMESTAMP</span> <span class="n">DEFAULT</span> <span class="n">NOW</span><span class="p">()</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">--</span> <span class="err">✅</span> <span class="n">Good</span><span class="p">:</span> <span class="n">Database</span> <span class="n">enforces</span> <span class="n">relationships</span>
</span><span class='line'><span class="n">CREATE</span> <span class="n">TABLE</span> <span class="n">pages</span> <span class="p">(</span>
</span><span class='line'>    <span class="nb">id</span> <span class="n">SERIAL</span> <span class="n">PRIMARY</span> <span class="n">KEY</span><span class="p">,</span>
</span><span class='line'>    <span class="n">project_id</span> <span class="n">INTEGER</span> <span class="n">REFERENCES</span> <span class="n">projects</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span> <span class="n">ON</span> <span class="n">DELETE</span> <span class="n">CASCADE</span><span class="p">,</span>
</span><span class='line'>    <span class="n">title</span> <span class="n">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="n">NOT</span> <span class="n">NULL</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>API 职责</strong>（Python 和 FastAPI）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># ✅ Good: API handles business logic</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">fastapi</span> <span class="kn">import</span> <span class="n">FastAPI</span><span class="p">,</span> <span class="n">HTTPException</span><span class="p">,</span> <span class="n">Depends</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">pydantic</span> <span class="kn">import</span> <span class="n">BaseModel</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">FastAPI</span><span class="p">()</span><span class="nd">@app.post</span><span class="p">(</span><span class="s">&quot;/api/pages&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">async</span> <span class="k">def</span> <span class="nf">create_page</span><span class="p">(</span>
</span><span class='line'>    <span class="n">page_data</span><span class="p">:</span> <span class="n">PageCreateModel</span><span class="p">,</span>
</span><span class='line'>    <span class="n">current_user</span><span class="p">:</span> <span class="n">User</span> <span class="o">=</span> <span class="n">Depends</span><span class="p">(</span><span class="n">get_current_user</span><span class="p">)</span>
</span><span class='line'><span class="p">):</span>
</span><span class='line'>    <span class="c"># Validate user permissions</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">can_user_edit_project</span><span class="p">(</span><span class="n">current_user</span><span class="p">,</span> <span class="n">page_data</span><span class="o">.</span><span class="n">project_id</span><span class="p">):</span>
</span><span class='line'>        <span class="k">raise</span> <span class="n">HTTPException</span><span class="p">(</span><span class="n">status_code</span><span class="o">=</span><span class="mi">403</span><span class="p">,</span> <span class="n">detail</span><span class="o">=</span><span class="s">&quot;Unauthorized&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># Apply business rules</span>
</span><span class='line'>    <span class="n">page</span> <span class="o">=</span> <span class="n">await</span> <span class="n">create_page_with_defaults</span><span class="p">(</span><span class="n">page_data</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Return appropriate response</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span><span class="s">&quot;page&quot;</span><span class="p">:</span> <span class="n">page</span><span class="p">,</span> <span class="s">&quot;message&quot;</span><span class="p">:</span> <span class="s">&quot;Page created successfully&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>前端职责</strong>（Angular）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// ✅ Good: Frontend handles user interaction</span>
</span><span class='line'><span class="err">@</span><span class="nx">Component</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">selector</span><span class="o">:</span> <span class="s1">&#39;app-page-editor&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;./page-editor.component.html&#39;</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="kr">export</span> <span class="kr">class</span> <span class="nx">PageEditorComponent</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">components</span><span class="o">:</span> <span class="nx">Component</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="nx">isLoading</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">constructor</span><span class="p">(</span><span class="kr">private</span> <span class="nx">apiService</span><span class="o">:</span> <span class="nx">ApiService</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Handle user interactions</span>
</span><span class='line'>  <span class="nx">onComponentDrop</span><span class="p">(</span><span class="nx">component</span><span class="o">:</span> <span class="nx">Component</span><span class="p">,</span> <span class="nx">position</span><span class="o">:</span> <span class="nx">Position</span><span class="p">)</span><span class="o">:</span> <span class="k">void</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">isLoading</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">apiService</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="nx">component</span><span class="p">,</span> <span class="nx">position</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">subscribe</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">next</span><span class="o">:</span> <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">updateComponents</span><span class="p">(</span><span class="nx">result</span><span class="p">),</span>
</span><span class='line'>        <span class="nx">error</span><span class="o">:</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">handleError</span><span class="p">(</span><span class="nx">error</span><span class="p">),</span>
</span><span class='line'>        <span class="nx">complete</span><span class="o">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">isLoading</span> <span class="o">=</span> <span class="kc">false</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>架构模式：伟大系统的基石</h2>

<h2>模型-视图-控制器 (MVC)：经典模式</h2>

<p>MVC 就像组织一场戏剧演出：</p>

<ul>
<li><strong>模型</strong>：剧本和故事（数据和业务逻辑）</li>
<li><strong>视图</strong>：舞台和演员（用户界面）</li>
<li><strong>控制器</strong>：导演（模型和（查看）</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># Model: Page data and operations</span>
</span><span class='line'><span class="nx">from</span> <span class="nx">sqlalchemy</span> <span class="nx">import</span> <span class="nx">Column</span><span class="p">,</span> <span class="nx">Integer</span><span class="p">,</span> <span class="nb">String</span><span class="p">,</span> <span class="nx">JSON</span>
</span><span class='line'><span class="nx">from</span> <span class="nx">sqlalchemy</span><span class="p">.</span><span class="nx">ext</span><span class="p">.</span><span class="nx">declarative</span> <span class="nx">import</span> <span class="nx">declarative_base</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">Base</span> <span class="o">=</span> <span class="n">declarative_base</span><span class="p">()</span><span class="k">class</span> <span class="nc">PageModel</span><span class="p">(</span><span class="n">Base</span><span class="p">):</span>
</span><span class='line'>    <span class="n">__tablename__</span> <span class="o">=</span> <span class="s">&quot;pages&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">id</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">title</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">String</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span> <span class="n">nullable</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'>    <span class="n">components</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">JSON</span><span class="p">)</span>
</span><span class='line'>    <span class="n">project_id</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Integer</span><span class="p">,</span> <span class="n">nullable</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">async</span> <span class="k">def</span> <span class="nf">save</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">db_session</span><span class="p">):</span>
</span><span class='line'>        <span class="n">db_session</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
</span><span class='line'>        <span class="n">await</span> <span class="n">db_session</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="o">//</span> <span class="nv">View: </span><span class="nx">Page</span> <span class="nx">rendering</span> <span class="p">(</span><span class="nx">Angular</span> <span class="nx">Component</span><span class="p">)</span>
</span><span class='line'><span class="nx">@Component</span><span class="p">({</span>
</span><span class='line'>  <span class="nv">selector: </span><span class="s">&#39;app-page-view&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nv">template: </span><span class="o">`</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">div</span> <span class="k">class</span><span class="o">=</span><span class="s">&quot;page&quot;</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="p"></span><span class="o">&lt;/</span><span class="nx">h1</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">app</span><span class="o">-</span><span class="nx">component</span>
</span><span class='line'>        <span class="o">*</span><span class="nx">ngFor</span><span class="o">=</span><span class="s">&quot;let component of pageModel.components&quot;</span>
</span><span class='line'>        <span class="p">[</span><span class="nx">componentData</span><span class="p">]</span><span class="o">=</span><span class="s">&quot;component&quot;</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;/</span><span class="nx">app</span><span class="o">-</span><span class="nx">component</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;/</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">`</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="nx">export</span> <span class="k">class</span> <span class="nx">PageViewComponent</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">@Input</span><span class="p">()</span> <span class="nv">pageModel: </span><span class="nx">PageModel</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Controller: Coordination logic (Angular Service)</span>
</span><span class='line'><span class="err">@</span><span class="nx">Injectable</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">providedIn</span><span class="o">:</span> <span class="s1">&#39;root&#39;</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="kr">export</span> <span class="kr">class</span> <span class="nx">PageController</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">constructor</span><span class="p">(</span><span class="kr">private</span> <span class="nx">apiService</span><span class="o">:</span> <span class="nx">ApiService</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">async</span> <span class="nx">updateTitle</span><span class="p">(</span><span class="nx">pageId</span><span class="o">:</span> <span class="nx">number</span><span class="p">,</span> <span class="nx">newTitle</span><span class="o">:</span> <span class="nx">string</span><span class="p">)</span><span class="o">:</span> <span class="nx">Promise</span><span class="o">&lt;</span><span class="k">void</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">updatedPage</span> <span class="o">=</span> <span class="nx">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">apiService</span><span class="p">.</span><span class="nx">updatePage</span><span class="p">(</span><span class="nx">pageId</span><span class="p">,</span> <span class="p">{</span> <span class="nx">title</span><span class="o">:</span> <span class="nx">newTitle</span> <span class="p">});</span>
</span><span class='line'>    <span class="c1">// Emit event to refresh view</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">pageUpdated</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="nx">updatedPage</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>事件驱动架构：神经系统</h2>

<p>事件驱动架构就像人类的神经系统——当某个部分发生事件时，其他部分会自动做出反应。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Event system for page builder</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Callable</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">asyncio</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">EventBus</span><span class="p">:</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">listeners</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">List</span><span class="p">[</span><span class="n">Callable</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">def</span> <span class="nf">on</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">event</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">callback</span><span class="p">:</span> <span class="n">Callable</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">event</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">listeners</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">listeners</span><span class="p">[</span><span class="n">event</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">listeners</span><span class="p">[</span><span class="n">event</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">callback</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">async</span> <span class="k">def</span> <span class="nf">emit</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">event</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="nb">dict</span><span class="p">):</span>
</span><span class='line'>        <span class="n">callbacks</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">listeners</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">event</span><span class="p">,</span> <span class="p">[])</span>
</span><span class='line'>        <span class="n">await</span> <span class="n">asyncio</span><span class="o">.</span><span class="n">gather</span><span class="p">(</span><span class="o">*</span><span class="p">[</span><span class="n">callback</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="k">for</span> <span class="n">callback</span> <span class="ow">in</span> <span class="n">callbacks</span><span class="p">])</span><span class="c"># Usage</span>
</span><span class='line'><span class="n">event_bus</span> <span class="o">=</span> <span class="n">EventBus</span><span class="p">()</span><span class="c"># Auto-save feature</span>
</span><span class='line'><span class="nd">@event_bus.on</span><span class="p">(</span><span class="s">&#39;component:added&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">async</span> <span class="k">def</span> <span class="nf">auto_save_handler</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
</span><span class='line'>    <span class="n">await</span> <span class="n">auto_save</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">&#39;page_id&#39;</span><span class="p">])</span>
</span><span class='line'>    <span class="n">await</span> <span class="n">show_save_indicator</span><span class="p">()</span><span class="c"># Analytics tracking</span>
</span><span class='line'><span class="nd">@event_bus.on</span><span class="p">(</span><span class="s">&#39;component:added&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">async</span> <span class="k">def</span> <span class="nf">analytics_handler</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
</span><span class='line'>    <span class="n">analytics</span><span class="o">.</span><span class="n">track</span><span class="p">(</span><span class="s">&#39;Component Added&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&#39;component_type&#39;</span><span class="p">:</span> <span class="n">data</span><span class="p">[</span><span class="s">&#39;component&#39;</span><span class="p">][</span><span class="s">&#39;type&#39;</span><span class="p">],</span>
</span><span class='line'>        <span class="s">&#39;page_id&#39;</span><span class="p">:</span> <span class="n">data</span><span class="p">[</span><span class="s">&#39;page_id&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<h2>微服务：专业团队</h2>

<p>微服务就像一个爵士乐团——每个音乐家（服务）都是各自乐器的专家，但他们共同努力，创造出美妙的音乐。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Docker Compose for Page Builder Microservices</span>
</span><span class='line'>version: <span class="s1">&#39;3.8&#39;</span>
</span><span class='line'>services:
</span><span class='line'>  user-service:
</span><span class='line'>    image: pagebuilder/user-service:python
</span><span class='line'>    environment:
</span><span class='line'>      - <span class="nv">DATABASE_URL</span><span class="o">=</span>postgresql://users_db
</span><span class='line'>      - <span class="nv">REDIS_URL</span><span class="o">=</span>redis://redis:6379
</span><span class='line'>    ports:
</span><span class='line'>      - <span class="s2">&quot;8001:8000&quot;</span>
</span><span class='line'>
</span><span class='line'>      project-service:
</span><span class='line'>    image: pagebuilder/project-service:python
</span><span class='line'>    environment:
</span><span class='line'>      - <span class="nv">DATABASE_URL</span><span class="o">=</span>postgresql://projects_db
</span><span class='line'>    ports:
</span><span class='line'>      - <span class="s2">&quot;8002:8000&quot;</span>
</span><span class='line'>
</span><span class='line'>      rendering-service:
</span><span class='line'>    image: pagebuilder/rendering-service:python
</span><span class='line'>    environment:
</span><span class='line'>      - <span class="nv">REDIS_URL</span><span class="o">=</span>redis://redis:6379
</span><span class='line'>      - <span class="nv">S3_BUCKET</span><span class="o">=</span>pagebuilder-assets
</span><span class='line'>    ports:
</span><span class='line'>      - <span class="s2">&quot;8003:8000&quot;</span>
</span><span class='line'>
</span><span class='line'>      frontend:
</span><span class='line'>    image: pagebuilder/angular-frontend
</span><span class='line'>    ports:
</span><span class='line'>      - <span class="s2">&quot;4200:80&quot;</span>
</span><span class='line'>    environment:
</span><span class='line'>      - <span class="nv">API_GATEWAY_URL</span><span class="o">=</span>http://api-gateway:8080
</span><span class='line'>
</span><span class='line'>      api-gateway:
</span><span class='line'>    image: pagebuilder/api-gateway:python
</span><span class='line'>    environment:
</span><span class='line'>      - <span class="nv">USER_SERVICE_URL</span><span class="o">=</span>http://user-service:8000
</span><span class='line'>      - <span class="nv">PROJECT_SERVICE_URL</span><span class="o">=</span>http://project-service:8000
</span><span class='line'>      - <span class="nv">RENDERING_SERVICE_URL</span><span class="o">=</span>http://rendering-service:8000
</span><span class='line'>    ports:
</span><span class='line'>      - <span class="s2">&quot;8080:8000&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>何时使用每种模式</h2>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/1*Kx0t7cKSgdtO0Q1PpRiLXg.jpeg" alt="这是我在一次架构评审会上画的草图，当时团队就各种模式争论了两个小时。这张图在5分钟内就结束了这场争论——每个人都清楚地看到了他们的项目与一个模式的对应关系。现在，我把这张照片保存在手机里，每次架构讨论时都会拿出来用。" /></p>

<p><strong>在以下情况下使用 MVC</strong>：</p>

<ul>
<li>构建传统 Web 应用程序</li>
<li>团队熟悉该模式</li>
<li>需要清晰的关注点分离</li>
</ul>


<p><strong>在以下情况下使用事件驱动</strong>：</p>

<ul>
<li>实时功能很重要</li>
<li>需要多个系统响应变化</li>
<li>需要松散耦合</li>
</ul>


<p><strong>在以下情况下使用微服务</strong>：</p>

<ul>
<li>团队规模 > 10 名开发人员</li>
<li>不同部分的扩展能力不同</li>
<li>独立部署至关重要</li>
</ul>


<p>正如 Martin Fowler 所言：“傻瓜也能写出计算机能理解的代码。优秀的程序员写出人类能理解的代码。”</p>

<h2>📝 互动练习：架构模式比较</h2>

<p><strong>创建你的个人架构模式速查表：</strong></p>

<ol>
<li>在你的纸上<strong>画出三个部分</strong>：“MVC”、“事件驱动”、“微服务”</li>
<li><p><strong>对于 MVC：</strong>画出三个相连的方框（模型 ↔ 控制器 ↔ 视图）</p></li>
<li><p>在下面写上：“适合：传统应用，清晰的分离”</p></li>
</ol>


<p><strong>3.对于事件驱动：</strong> 画一个中心圆圈，标记为“事件总线”，并用箭头向外辐射到多个方框。</p>

<ol>
<li>在下面写：“适用于：实时功能，松耦合”</li>
</ol>


<p><strong>5. 对于微服务：</strong> 画 6-8 个独立的小方框，并用虚线连接它们。</p>

<ul>
<li>在下面写：“适用于：大型团队，独立扩展”</li>
</ul>


<p><strong>6. 添加决策树：</strong> 从问题到模式画箭头：</p>

<ul>
<li>“团队少于 5 人？” → MVC</li>
<li>“需要实时功能吗？” → 事件驱动</li>
<li>“多个团队？” → 微服务</li>
</ul>


<p><strong> 将此图放在手边！</strong> 这是你未来任何项目的架构决策流程图。</p>

<h2>绘制真正有用的系统图</h2>

<h2>视觉传达的艺术</h2>

<blockquote><p>“一图胜千言，但一张好的图表胜过千次会议。” — 未知</p></blockquote>

<p>系统图是软件架构的蓝图。它们应该讲述一个故事，而不是制造混乱。</p>

<h2>📝 互动练习：图表层次结构</h2>

<p><strong>练习三层系统图绘制方法：</strong></p>

<p><strong>第一层 - 上下文（30 秒绘制）：</strong></p>

<ol>
<li><strong>绘制三个形状</strong>：圆形（用户）、矩形（你的系统）、云（外部服务）</li>
<li><strong>用带标签的箭头连接</strong>：“HTTP 请求”、“API 调用”、“数据同步”</li>
<li><strong>这回答了</strong>“我们的系统连接到什么？”</li>
</ol>


<p><strong>第二层 - 容器（2 分钟绘制）：</strong></p>

<ol>
<li><strong>将系统矩形分成四个部分</strong>：前端、API 网关、服务、数据库</li>
<li><strong>用箭头</strong>显示它们之间的数据流**</li>
<li><strong>这回答了</strong>“主要部分是什么？”</li>
</ol>


<p><strong>第三级——组件（5 分钟绘制）：</strong></p>

<ol>
<li><strong>选择一个容器（例如前端）并将其分解</strong>为模块</li>
<li><strong>展示模块如何在该容器内交互</strong></li>
<li><strong>这将回答</strong>“这个组件内部是如何工作的？”</li>
</ol>


<p><strong>本练习的强大之处：</strong>只需选择要绘制的图纸，即可在任何细节层面解释任何系统！</p>

<h2>图表的层次结构</h2>

<p><strong>上下文图</strong>：30,000 英尺的视角</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='inform7'><span class='line'><span class="cm">[Users]</span> --&gt; <span class="cm">[Page Builder System]</span> --&gt; <span class="cm">[CDN]</span>
</span><span class='line'>           |
</span><span class='line'>           v
</span><span class='line'>      <span class="cm">[Database]</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>容器图</strong>：构建模块</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='inform7'><span class='line'><span class="cm">[Web Browser]</span> --&gt; <span class="cm">[Load Balancer]</span> --&gt; <span class="cm">[Web Application]</span>
</span><span class='line'>                                         |
</span><span class='line'>                                         v
</span><span class='line'><span class="cm">[File Storage]</span> &lt;-- <span class="cm">[API Gateway]</span> &lt;-- <span class="cm">[Cache Layer]</span>
</span><span class='line'>                        |
</span><span class='line'>                        v
</span><span class='line'>                   <span class="cm">[Database Cluster]</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>组件图</strong>：内部结构</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='mathematica'><span class='line'><span class="n">Web</span><span class="w"> </span><span class="n">Application</span><span class="err">:</span><span class="w"></span>
</span><span class='line'><span class="err">├──</span><span class="w"> </span><span class="n">Authentication</span><span class="w"> </span><span class="n">Module</span><span class="w"></span>
</span><span class='line'><span class="err">├──</span><span class="w"> </span><span class="n">Project</span><span class="w"> </span><span class="n">Management</span><span class="w"> </span><span class="n">Module</span><span class="w"></span>
</span><span class='line'><span class="err">├──</span><span class="w"> </span><span class="n">Page</span><span class="w"> </span><span class="n">Editor</span><span class="w"> </span><span class="n">Module</span><span class="w"></span>
</span><span class='line'><span class="err">│</span><span class="w">   </span><span class="err">├──</span><span class="w"> </span><span class="n">Canvas</span><span class="w"> </span><span class="n">Component</span><span class="w"></span>
</span><span class='line'><span class="err">│</span><span class="w">   </span><span class="err">├──</span><span class="w"> </span><span class="n">Toolbar</span><span class="w"> </span><span class="n">Component</span><span class="w"></span>
</span><span class='line'><span class="err">│</span><span class="w">   </span><span class="err">└──</span><span class="w"> </span><span class="n">Properties</span><span class="w"> </span><span class="n">Panel</span><span class="w"></span>
</span><span class='line'><span class="err">├──</span><span class="w"> </span><span class="n">Component</span><span class="w"> </span><span class="n">Library</span><span class="w"> </span><span class="n">Module</span><span class="w"></span>
</span><span class='line'><span class="err">└──</span><span class="w"> </span><span class="n">Export</span><span class="w"> </span><span class="n">Module</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure>


<h2>有效的图表绘制原则</h2>

<ol>
<li><strong>从用户旅程开始</strong>：每个图表都应该回答“数据如何从用户操作流向结果？”</li>
<li><strong>使用一致的符号</strong>：矩形表示进程，圆柱体表示数据存储，圆形表示外部实体</li>
<li><strong>清晰地显示关系</strong>：箭头应指示数据流方向并进行标记</li>
<li><strong>分层图表</strong>：从高层开始，然后放大到特定区域</li>
<li><strong>包含不愉快的路径</strong>：显示错误处理和故障场景</li>
</ol>


<h2>整合：可视化页面构建器案例研究</h2>

<p>让我们为我们的可视化页面构建器设计一个完整的系统架构：</p>

<h2>高层架构</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coq'><span class='line'><span class="nc">Frontend</span> <span class="o">(</span><span class="nc">Angular</span><span class="o">)</span>
</span><span class='line'><span class="err">├──</span> <span class="nc">Editor</span> <span class="nc">Canvas</span> <span class="kn">Module</span>
</span><span class='line'><span class="err">├──</span> <span class="nc">Component</span> <span class="nc">Library</span> <span class="kn">Module</span>
</span><span class='line'><span class="err">├──</span> <span class="nc">Project</span> <span class="nc">Dashboard</span> <span class="kn">Module</span>
</span><span class='line'><span class="err">└──</span> <span class="nc">Shared</span> <span class="nc">Services</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="nt">API</span> <span class="nt">Gateway</span> <span class="o">(</span><span class="nt">Python</span><span class="o">/</span><span class="nt">FastAPI</span><span class="o">)</span>
</span><span class='line'><span class="err">├──</span> <span class="nt">Authentication</span> <span class="nt">Service</span>
</span><span class='line'><span class="err">├──</span> <span class="nt">Project</span> <span class="nt">Service</span>
</span><span class='line'><span class="err">├──</span> <span class="nt">Component</span> <span class="nt">Service</span>
</span><span class='line'><span class="err">└──</span> <span class="nt">Rendering</span> <span class="nt">ServiceData</span> <span class="nt">Layer</span>
</span><span class='line'><span class="err">├──</span> <span class="nt">PostgreSQL</span> <span class="o">(</span><span class="nt">structured</span> <span class="nt">data</span><span class="o">)</span>
</span><span class='line'><span class="err">├──</span> <span class="nt">Redis</span> <span class="o">(</span><span class="nt">caching</span><span class="o">)</span>
</span><span class='line'><span class="err">└──</span> <span class="nt">S3</span> <span class="o">(</span><span class="nt">file</span> <span class="nt">storage</span><span class="o">)</span><span class="nt">Infrastructure</span>
</span><span class='line'><span class="err">├──</span> <span class="nt">CDN</span> <span class="o">(</span><span class="nt">CloudFront</span><span class="o">)</span>
</span><span class='line'><span class="err">├──</span> <span class="nt">Load</span> <span class="nt">Balancer</span>
</span><span class='line'><span class="err">└──</span> <span class="nt">Auto-scaling</span> <span class="nt">Groups</span>
</span></code></pre></td></tr></table></div></figure>


<h2>组件添加的数据流</h2>

<ol>
<li><strong>用户操作</strong>：将组件从库拖到画布</li>
<li><strong>前端</strong>：验证位置，发送 API 请求</li>
<li><strong>API 网关</strong>：验证请求，路由到组件服务</li>
<li><strong>组件服务</strong>：验证业务规则，更新数据库</li>
<li><strong>事件总线</strong>：发出“component_added”事件</li>
<li><strong>渲染服务</strong>：生成更新后的页面预览</li>
<li><strong>WebSocket</strong>：通知其他协作者</li>
<li><strong>前端</strong>：使用新组件更新 UI</li>
</ol>


<h2>📝 互动练习：数据流映射</h2>

<p><strong>将这个抽象的流程转化为一个可视化的故事：</strong></p>

<ol>
<li><strong>在一个流程中画出 8 个方框</strong>（每个方框对应上面的每个步骤）</li>
<li><strong>用箭头连接它们</strong>以显示顺序</li>
<li><strong>在每个方框上方写出所需时间</strong>：“50 毫秒”、“200 毫秒”、“100 毫秒”等。</li>
<li><strong>在每个方框下方，注明可能出现的问题</strong>：“网络超时”、“身份验证失败”、“数据库宕机”</li>
<li><p><strong>现在画出第二个版本</strong>，展示步骤 4 失败时会发生什么：</p></li>
<li><p>用红色虚线画一条“悲伤的路径”箭头</p></li>
<li>显示返回给用户的错误消息</li>
<li>添加重试逻辑和回退选项</li>
</ol>


<p><strong>本练习将教会你：</strong>每个用户操作实际上都是一个复杂的系统编排。绘制箭头可以帮助你在生产环境中发生潜在故障之前发现它们！</p>

<p><strong>额外提示：</strong> 为箭头添加颜色代码——绿色代表正常路径，红色代表错误，蓝色代表重试。</p>

<h2>可扩展性考虑因素</h2>

<p><strong>流量模式</strong>：</p>

<ul>
<li>高读取操作（浏览页面）</li>
<li>突发写入操作（编辑会话）</li>
<li>大文件上传（图片、资源）</li>
</ul>


<p><strong>扩展策略</strong>：</p>

<ul>
<li>将渲染后的页面缓存在 CDN 中</li>
<li>使用只读副本进行页面浏览</li>
<li>将大文件处理排队</li>
<li>实现 WebSocket 连接池</li>
</ul>


<h2>要点：适用于任何 Web 应用程序的原则</h2>

<h2>系统设计的黄金法则</h2>

<ol>
<li><strong>从简单开始，规划复杂</strong>：从单体应用开始，但要针对微服务进行设计</li>
<li><strong>快速失败，快速学习</strong>：从第一天开始构建监控和报警功能</li>
<li><strong>数据为王</strong>：先设计数据模型，其他一切都水到渠成</li>
<li><strong>安全性不可或缺</strong>：在每一层都构建身份验证和授权机制</li>
<li><strong>性能是关键特性</strong>：用户更容易注意到应用程序运行缓慢，而不是功能缺失</li>
</ol>


<h2>架构清单</h2>

<p>在编写第一行代码之前编写代码时，请问自己：</p>

<ul>
<li>[ ] 核心实体及其关系是什么？</li>
<li>[ ] 该系统如何处理 10 倍于当前流量的情况？</li>
<li>[ ] 单点故障点在哪里？</li>
<li>[ ] 不同的团队将如何在该系统上协作？</li>
<li>[ ] 出现问题时会发生什么？</li>
<li>[ ] 我们将如何监控和调试问题？</li>
<li>[ ] 安全隐患是什么？</li>
</ul>


<h2>📝 互动练习：你的系统设计模板</h2>

<p><strong>创建你的个人系统设计模板，可用于任何项目：</strong></p>

<ol>
<li><strong>绘制一个包含以下部分的空白模板：</strong></li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>┌────── 实体与关系 ────────┐ ┌───── 流量与扩展 ─────┐  │ │ │ │ │ │ │
</span><span class='line'>└────────────────────────┘ └────────────────────┘ ┌─ 故障点 ──────
</span><span class='line'>─────┐ ┌──── 团队边界 ────┐ │ │ │ │ │ │
</span><span class='line'>└─────────────────────┘ └──────────────────────┘
</span></code></pre></td></tr></table></div></figure>


<ol>
<li><p><strong>填写我们的页面构建器示例：</strong></p></li>
<li><p>实体：用户、项目、页面、组件</p></li>
<li>流量：浏览时读取量大，编辑时写入量大</li>
<li>故障：数据库宕机、CDN 速度慢、WebSocket 断开连接</li>
<li>团队：前端团队、API 团队、基础设施团队</li>
</ol>


<p><strong>2. 复制此模板</strong> — 将其用于未来的每个项目</p>

<p><strong>为什么有效：</strong> 拥有一致的思维框架可以防止你忘记关键方面。你的绘图将成为你的系统设计清单！</p>

<h2>你的绘图之旅：从草图到系统</h2>

<p>如果你完成了本文的绘图练习，那么你现在拥有：</p>

<ol>
<li><strong>分层架构模板</strong>（用于分解任何复杂系统）</li>
<li><strong>分解树方法</strong>（用于组织开发工作）</li>
<li><strong>扩展演进路线图</strong>（用于规划发展阶段）</li>
<li><strong>餐厅隐喻图</strong>（用于解释三层架构）</li>
<li><strong>架构模式对比图</strong>（用于选择正确的方法）</li>
<li><strong>三层图表系统</strong>（用于在任何细节层面进行沟通）</li>
<li><strong>数据流映射技术</strong>（用于理解系统交互）</li>
<li><strong>可复用系统设计模板</strong>（用于一致的项目规划）</li>
</ol>


<p><strong>这些手绘图表比任何昂贵的工具都更有价值</strong>，因为：</p>

<ul>
<li>通过绘制它们，你的大脑建立了更深层次的联系</li>
<li>你可以随时随地重新创建它们</li>
<li>它们根据你对系统的理解进行个性化定制</li>
<li>它们弥合了抽象概念与实践之间的差距实施</li>
</ul>


<p><strong>保留你的图纸！</strong> 把它们贴在你的显示器上，用手机拍照，或者创建一个“系统设计速写本”，让它随着每个项目的进展而不断更新。</p>

<h2>总结</h2>

<blockquote><p>“架构师身处两个世界之间。你必须愿意打破基本的假设。”——安藤忠雄</p></blockquote>

<p>系统设计并非要创造完美的架构，而是要做出明智的权衡。每个决策都有其后果，每个模式都有其利弊，每个解决方案都会产生新的问题需要解决。</p>

<p>最好的架构师并非精通所有模式和技术，而是能够倾听需求、理解约束，并设计出能够与用户和组织和谐共存的系统。</p>

<p>记住：你不仅仅是在构建软件，你还在为团队未来的成功奠定基础。构建好它，清晰地记录它，并始终做好演进的准备。</p>

<p>俗话说，“几周的编码时间可以节省数小时的规划时间。” 投资于系统设计，未来的你（和团队）会感谢你。</p>

<p>千个应用程序的旅程始于一个精心设计的系统。今天就开始像架构师一样思考，见证你的应用程序从脆弱的原型转变为经得起时间考验的强大、可扩展的平台。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[runBlocking实践：哪里该使用，哪里不该用]]></title>
    <link href="https://alexhilton.github.io/blog/2025/09/23/runblocking-in-practice/"/>
    <updated>2025-09-23T22:34:01+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/09/23/runblocking-in-practice</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自「runBlocking in practice: Where it should be used and where not」，原文链接<a href="https://kt.academy/article/run_blocking">https://kt.academy/article/run_blocking</a>，由Marcin Moskała发布于2025年9月1日。</p></blockquote>

<p><a href="https://alexhilton.github.io/blog/2025/09/23/runblocking-in-practice/"><img src="https://kt.academy/_next/image?url=https%3A%2F%2Fmarcinmoskala.com%2Fkt-academy-articles%2Fpromotion%2Frun_blocking.png&w=3840&q=75" title="auto auto" ></a></p>

<!-- more -->


<p>传统意义上讲，Java 和 Kotlin 项目都基于阻塞调用(blocking)。我所说的阻塞调用是指函数在等待某些操作（例如，等待网络响应）时会阻塞调用者的线程。Kotlin 协程最重要的规则之一是，我们不应该在挂起函数(suspending function)上进行阻塞调用（除非我们使用允许阻塞调用的调度程序，例如 <code>Dispatchers.IO</code>）。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">// Incorrect: blocking call in a suspending function</span>
</span><span class='line'><span class="n">suspend</span> <span class="k">fun</span> <span class="nf">getUser</span><span class="p">():</span> <span class="n">User</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">response</span> <span class="p">=</span> <span class="n">api</span><span class="p">.</span><span class="n">getUser</span><span class="p">()</span> <span class="c1">// blocking call</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">response</span><span class="p">.</span><span class="n">toDomainUser</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Correct: Using withContext(Dispatchers.IO) to make a blocking call in a suspending function</span>
</span><span class='line'><span class="n">suspend</span> <span class="k">fun</span> <span class="nf">getUser</span><span class="p">():</span> <span class="n">User</span> <span class="p">=</span> <span class="n">withContext</span><span class="p">(</span><span class="n">Dispatchers</span><span class="p">.</span><span class="n">IO</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">response</span> <span class="p">=</span> <span class="n">api</span><span class="p">.</span><span class="n">getUser</span><span class="p">()</span> <span class="c1">// blocking call</span>
</span><span class='line'>    <span class="n">response</span><span class="p">.</span><span class="n">toDomainUser</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是如何反其道而行之呢？如何将挂起调用转换为阻塞调用？为此，我们使用 <code>runBlocking</code>！</p>

<h2><a href="#how-runblocking-works"><code>runBlocking</code> 的工作原理</a></h2>

<p><code>runBlocking</code> 在调用它的线程上启动一个协程，并阻塞该线程直到协程完成。因此，runBlocking 本质上是同步的，因为如果我们多次调用它，第二个调用要等到第一个调用完成后才会启动。作为一个同步协程构建器，<code>runBlocking</code> 返回它启动的协程的结果。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">log</span><span class="p">(</span><span class="s">&quot;Starting main&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">runBlocking</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">log</span><span class="p">(</span><span class="s">&quot;Starting first runBlocking&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">delay</span><span class="p">(</span><span class="m">1000</span><span class="p">)</span>
</span><span class='line'>        <span class="n">log</span><span class="p">(</span><span class="s">&quot;Finishing first runBlocking&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">result</span><span class="p">:</span> <span class="n">String</span> <span class="p">=</span> <span class="n">runBlocking</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">log</span><span class="p">(</span><span class="s">&quot;Starting second runBlocking&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">delay</span><span class="p">(</span><span class="m">1000</span><span class="p">)</span>
</span><span class='line'>        <span class="s">&quot;ABCD&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">log</span><span class="p">(</span><span class="s">&quot;Second runBlocking finished with result: $result&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">log</span><span class="p">(</span><span class="n">message</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;[${Thread.currentThread().name}] $message&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// [main] Starting main</span>
</span><span class='line'><span class="c1">// [main] Starting first runBlocking</span>
</span><span class='line'><span class="c1">// (1 sec)</span>
</span><span class='line'><span class="c1">// [main] Finishing first runBlocking</span>
</span><span class='line'><span class="c1">// [main] Starting second runBlocking</span>
</span><span class='line'><span class="c1">// (1 sec)</span>
</span><span class='line'><span class="c1">// [main] Second runBlocking finished with result: ABCD</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于 <code>runBlocking</code> 启动了一个作用域，它会等待其中启动的所有协程完成。这意味着它会等待所有子协程完成。这就是为什么下面的程序要等到所有三个异步协程都完成才会完成。为了展示如何使用 <code>runBlocking</code> 定义结果，我还让这个程序从 <code>main</code> 函数返回 <code>0</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">import</span> <span class="nn">kotlinx.coroutines.*</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">main</span><span class="p">():</span> <span class="n">Int</span> <span class="p">=</span> <span class="n">runBlocking</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">launch</span> <span class="p">{</span> <span class="n">delayAndPrintHello</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">launch</span> <span class="p">{</span> <span class="n">delayAndPrintHello</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">launch</span> <span class="p">{</span> <span class="n">delayAndPrintHello</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Hello&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="m">0</span> <span class="c1">// result from main</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">suspend</span> <span class="k">fun</span> <span class="nf">delayAndPrintHello</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">delay</span><span class="p">(</span><span class="m">1000L</span><span class="p">)</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;World!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// Hello</span>
</span><span class='line'><span class="c1">// (1 sec)</span>
</span><span class='line'><span class="c1">// World!</span>
</span><span class='line'><span class="c1">// World!</span>
</span><span class='line'><span class="c1">// World!</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>runBlocking</code> 的行为可能会让你想起 <code>coroutineScope</code>，这并非巧合，因为它们都启动同步协程，但 <code>runBlocking</code> 是阻塞的，而 <code>coroutineScope</code> 是暂停的。这意味着完全不同的用法，我们只在暂停函数中使用 <code>coroutineScope</code>，而我们永远不应该在暂停函数中使用 <code>runBlocking</code>。这也意味着 <code>coroutineScope</code> 与其调用者建立关系，并且始终处于协程层次结构的中间，而 <code>runBlocking</code> 则启动一个新的协程层次结构。</p>

<h2><a href="#the-practice-of-using-runblocking">使用 <code>runBlocking</code> 的实践</a></h2>

<p>在正确实现的基于协程的项目中，并使用设计良好的协程友好库，我们几乎不需要使用 <code>runBlocking</code>。如果我们在项目中经常使用它，那就被认为是代码异味。然而，在某些情况下，runBlocking 是有用的，甚至是必要的。也有一些情况下，runBlocking 不应该被使用。我们还会讨论那些曾经需要 runBlocking 但现在有了更好的替代方案的情况。现在，让我们来看看。</p>

<h2><a href="#where-to-use-runblocking">在哪里使用 <code>runBlocking</code></a></h2>

<p><code>runBlocking</code> 应该用于需要启动协程并阻塞当前线程直到其完成的情况。这意味着它可以在以下情况下使用：</p>

<ul>
<li>我们需要等待协程的结果。</li>
<li>我们可以阻塞当前线程。</li>
</ul>


<p>一个常见的 Android 示例是在 Retrofit 客户端中设置一个拦截器，将令牌附加到网络调用。获取令牌可能需要发起网络调用，因此我们需要启动一个协程来获取令牌。同时，拦截器需要结果才能继续执行。这个拦截器在 Retrofit 的池中启动，因此可以调用它的调用。这使得它成为使用 <code>runBlocking</code> 的理想场所。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">AddTokenInterceptor</span><span class="p">:</span> <span class="n">Interceptor</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">intercept</span><span class="p">(</span><span class="n">chain</span><span class="p">:</span> <span class="n">Interceptor</span><span class="p">.</span><span class="n">Chain</span><span class="p">):</span> <span class="n">Response</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">token</span> <span class="p">=</span> <span class="n">runBlocking</span> <span class="p">{</span> <span class="n">getToken</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">request</span> <span class="p">=</span> <span class="n">chain</span><span class="p">.</span><span class="n">request</span><span class="p">().</span><span class="n">newBuilder</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">addHeader</span><span class="p">(</span><span class="s">&quot;Authorization&quot;</span><span class="p">,</span> <span class="s">&quot;Bearer $token&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">build</span><span class="p">()</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">chain</span><span class="p">.</span><span class="n">proceed</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在后端系统上，有时我们需要阻塞当前线程以等待协程完成，例如为了让我们的工具正确测量此进程的执行时间，或者当我们需要调用某些阻塞脚本并获取其结果时。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">@MeasureExecutionTime</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">runDataMigrationScript</span><span class="p">()</span> <span class="p">=</span> <span class="n">runBlocking</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">sourceData</span> <span class="p">=</span> <span class="n">readDataFromSource</span><span class="p">()</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">transformedData</span> <span class="p">=</span> <span class="n">transformData</span><span class="p">(</span><span class="n">sourceData</span><span class="p">)</span>
</span><span class='line'>    <span class="n">writeDataToTarget</span><span class="p">(</span><span class="n">transformedData</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这些情况很少见，大多数后端项目不需要使用 <code>runBlocking</code>。除非它们有一些基于阻塞调用的遗留代码。考虑以下 <code>UserService</code>，它在我们的应用程序中用于管理用户。我们已经将其迁移到暂停调用，但我们仍然有一些基于阻塞调用的遗留控制器和服务。为了避免重写所有这些，我们可以为暂停函数提供阻塞替代方案。这些替代方案可以通过使用 <code>runBlocking</code> 包装暂停函数来实现（你也可以考虑使用一些调度器）。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">UserService</span><span class="p">(</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">userRepository</span><span class="p">:</span> <span class="n">UserRepository</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">findUserById</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="n">String</span><span class="p">):</span> <span class="n">User</span> <span class="p">=</span> <span class="n">userRepository</span><span class="p">.</span><span class="n">findUserById</span><span class="p">(</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Blocking alternative for legacy parts of our application</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">findUserByIdBlocking</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="n">String</span><span class="p">):</span> <span class="n">User</span> <span class="p">=</span> <span class="n">runBlocking</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">findUserById</span><span class="p">(</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这可能是 <code>runBlocking</code> 最重要的用途，它充当了从阻塞到暂停的桥梁。一些库为 Java 定义了阻塞替代方案。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">suspend</span> <span class="k">fun</span> <span class="nf">readDataFromSource</span><span class="p">():</span> <span class="n">Data</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">readDataFromSourceBlocking</span><span class="p">():</span> <span class="n">Data</span> <span class="p">=</span> <span class="n">runBlocking</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">readDataFromSource</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2><a href="#where-not-to-use-runblocking">哪些情况下不应使用 <code>runBlocking</code></a></h2>

<p>在某些情况下，不应使用 <code>runBlocking</code>。此外，切勿在挂起函数中直接使用 <code>runBlocking</code>。<code>runBlocking</code> 会阻塞当前线程，因此不应在挂起函数中进行阻塞调用（除非使用允许阻塞调用的调度程序，例如 <code>Dispatchers.IO</code>）。在这种情况下，很可能不需要 <code>runBlocking</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">// Incorrect: runBlocking in a suspending function</span>
</span><span class='line'><span class="n">suspend</span> <span class="k">fun</span> <span class="nf">getToken</span><span class="p">()</span> <span class="p">=</span> <span class="n">runBlocking</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// runBlocking is most likely not needed</span>
</span><span class='line'><span class="n">suspend</span> <span class="k">fun</span> <span class="nf">getToken</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>不应在不需要等待结果的函数中使用 <code>runBlocking</code>。如果你只需要启动协程，通常最好使用 <code>launch</code> 启动异步协程。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">// Incorrect: runBlocking used where we do not need to await result</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">startBackgroundProcess</span><span class="p">()</span> <span class="p">=</span> <span class="n">runBlocking</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">doSomething</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Correct: Using launch to start an asynchronous coroutine</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">startBackgroundProcess</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">backgroundScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">doSomething</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们还应注意，不要在不应被阻塞的线程上使用 <code>runBlocking</code>。这在 Android 上尤其成问题，因为阻塞主线程会导致应用程序卡死。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">// Incorrect: runBlocking on the main thread</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">onClick</span><span class="p">()</span> <span class="p">=</span> <span class="n">runBlocking</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">userNameView</span><span class="p">.</span><span class="n">test</span> <span class="p">=</span> <span class="n">getUserName</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Correct: Using launch to start an asynchronous coroutine</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">onClick</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">lifecycleScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">userNameView</span><span class="p">.</span><span class="n">test</span> <span class="p">=</span> <span class="n">getUserName</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在后端，如果我们在 <code>synchronized</code> 块中使用它，可能会出现问题。一个技巧是使用 <code>launch</code> 实现回调函数。但是，通常情况下，最好重新设计代码，使用暂停而不是阻塞调用，并使用协程友好的工具（我们将在<em>同步协程</em>课程中讨论）。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">// Possibly incorrect: runBlocking inside synchronized block</span>
</span><span class='line'><span class="n">synchronized</span><span class="p">(</span><span class="n">lock</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">user</span> <span class="p">=</span> <span class="n">runBlocking</span> <span class="p">{</span> <span class="n">getUser</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// One solution: use launch to implement a callback</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">getUser</span><span class="p">(</span><span class="n">callback</span><span class="p">:</span> <span class="p">(</span><span class="n">User</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">backgroundScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">user</span> <span class="p">=</span> <span class="n">getUser</span><span class="p">()</span> <span class="c1">// suspending call</span>
</span><span class='line'>        <span class="n">callback</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">synchronized</span><span class="p">(</span><span class="n">lock</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>    <span class="n">getUser</span> <span class="p">{</span> <span class="n">user</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="c1">// ...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2><a href="#outdated-runblocking-uses">过时的 <code>runBlocking</code> 用法</a></h2>

<p><code>runBlocking</code> 传统上用于包装 <code>main</code> 函数体。它的属性非常适合此目的：它启动一个协程，因此它可以调用挂起函数或启动其他协程，并且它会阻塞线程直到协程完成，因此我们可以确保程序不会在所有这些进程完成之前结束。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">main</span><span class="p">():</span> <span class="n">Unit</span> <span class="p">=</span> <span class="n">runBlocking</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">user</span> <span class="p">=</span> <span class="n">getUser</span><span class="p">()</span> <span class="c1">// suspending call</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;User: $user&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>runBlocking</code> 仍然可以以这种方式使用，但是在大多数现代情况下，我们更喜欢使用 Kotlin 1.3 中引入的挂起 <code>main</code> 函数。此类函数在底层被一个类似于 <code>runBlocking</code> 的阻塞构建器包装。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">suspend</span> <span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">user</span> <span class="p">=</span> <span class="n">getUser</span><span class="p">()</span> <span class="c1">// suspending call</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;User: $user&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>关键区别在于 <code>runBlocking</code> 设置了一个调度器，使其所有子协程在其正在使用的同一线程上运行。挂起 main 函数不会设置调度器，因此其子协程默认在不同的线程上运行。引入此更改是因为 <code>runBlocking</code> 使用的单线程调度器经常导致意外行为。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">main</span><span class="p">():</span> <span class="n">Unit</span> <span class="p">=</span> <span class="n">runBlocking</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="n">Thread</span><span class="p">.</span><span class="n">currentThread</span><span class="p">().</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>    <span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="n">Thread</span><span class="p">.</span><span class="n">currentThread</span><span class="p">().</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// main</span>
</span><span class='line'><span class="c1">// main</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">suspend</span> <span class="k">fun</span> <span class="nf">main</span><span class="p">():</span> <span class="n">Unit</span> <span class="p">=</span> <span class="n">coroutineScope</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="n">Thread</span><span class="p">.</span><span class="n">currentThread</span><span class="p">().</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>    <span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="n">Thread</span><span class="p">.</span><span class="n">currentThread</span><span class="p">().</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// main</span>
</span><span class='line'><span class="c1">// DefaultDispatcher-worker-1</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>runBlocking</code> 的第二个传统用途是在测试中。它被用来包装测试主体，以便我们可以调用挂起函数并在其中启动协程。现在，我们更倾向于使用 <code>kotlinx-coroutines-test</code> 库中的 <code>runTest</code>，它是 <code>runBlocking</code> 的一个更强大、更灵活的替代方案。它允许我们控制时间、生成后台作用域并跟踪子协程上的异常。<code>runTest</code> 将在<em>测试协程</em>课程中讨论。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">UserRepositoryTest</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">userRepository</span> <span class="p">=</span> <span class="n">InMemoryUserRepository</span><span class="p">()</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">userService</span> <span class="p">=</span> <span class="n">UserService</span><span class="p">(</span><span class="n">userRepository</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">@Test</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">testGetUser</span><span class="p">()</span> <span class="p">=</span> <span class="n">runTest</span> <span class="p">{</span> <span class="c1">// previously runBlocking</span>
</span><span class='line'>        <span class="c1">// given</span>
</span><span class='line'>        <span class="n">userRepository</span><span class="p">.</span><span class="n">hasUser</span><span class="p">(</span><span class="n">UserEntity</span><span class="p">(</span><span class="s">&quot;1234&quot;</span><span class="p">,</span> <span class="s">&quot;John Doe&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// when</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">user</span> <span class="p">=</span> <span class="n">userService</span><span class="p">.</span><span class="n">getUser</span><span class="p">(</span><span class="s">&quot;1234&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// then</span>
</span><span class='line'>        <span class="n">assertEquals</span><span class="p">(</span><span class="s">&quot;John Doe&quot;</span><span class="p">,</span> <span class="n">user</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2><a href="#%E6%80%BB%E7%BB%93">总结</a></h2>

<ul>
<li><code>runBlocking</code> 是一个阻塞协程构建器，它启动一个协程并阻塞当前线程直到它完成。</li>
<li><code>runBlocking</code> 是从阻塞世界(blocking)到挂起世界(suspending)的桥梁，它用于在需要阻塞当前线程直到协程完成的地方启动协程。</li>
<li>如果你需要在项目中频繁使用 <code>runBlocking</code>，那么它就是一种代码异味。在设计合理的基于协程的项目中，应该尽量少用，或者干脆不用。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android ViewModel数据加载：基于Flow架构的最佳实践]]></title>
    <link href="https://alexhilton.github.io/blog/2025/09/22/viewmodel-loading/"/>
    <updated>2025-09-22T22:50:00+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/09/22/viewmodel-loading</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自「Android ViewModel Data Loading: Best Practices and Flow-Based Architecture」，原文链接<a href="https://funkymuse.dev/posts/properly-load-data/">https://funkymuse.dev/posts/properly-load-data/</a>，由FunkyMuse于2025年8月29日。</p></blockquote>

<p>Android 开发中的架构讨论经常引发激烈的争论——有时褒贬不一。撰写这些主题的文章并不容易，但这正是它的价值所在。</p>

<p>本文阐述了我对数据加载模式的独到见解，这些见解源于我的经验以及近期手术后的恢复（其中一次手术仍在进行中）。</p>

<p>不妨将此视为我在 2025 年对数据加载模式的理解和技能的概述。</p>

<p>我可能比其他人更晚加入这场讨论，但迟做总比不做好。</p>

<h2>挑战：Android ViewModel 中常见的数据加载反模式</h2>

<p>“大多数”Android 开发者使用 ViewModel 来管理 UI 状态，这些状态由视图（Fragment、Activity 或可组合组件）收集。为了显示有意义的内容，你需要从真实数据源加载数据，将其转换为视图状态，然后公开以供使用。</p>

<p>以前是 LiveData，现在是 Flow，它充当视图和 ViewModel 之间的粘合剂（大多数情况下）。有一些解决方案使用 <a href="https://github.com/cashapp/molecule">molecule</a>，但这超出了我们的讨论范围。</p>

<p><a href="https://alexhilton.github.io/blog/2025/09/22/viewmodel-loading/"><img src="https://funkymuse.dev/assets/img/load_data/zhui.png" title="auto auto" ></a></p>

<!-- more -->


<p>正如这篇 <a href="https://x.com/github_skydoves/status/1829315087611707848">Twitter 讨论</a> 所示，大多数开发者在 <code>ViewModel</code> 的 init {} 块中加载数据。虽然这种方法看似合乎逻辑，但它带来了一些架构问题，Ian Lake 和其他人认为这是反模式——包括使用 <code>LaunchedEffect</code> 进行数据加载。</p>

<p><a href="https://funkymuse.dev/assets/img/load_data/jokes.png"><img src="https://funkymuse.dev/assets/img/load_data/jokes.png" alt="Irony" /></a></p>

<p>讽刺的是，即使是官方示例有时也会与这些最佳做法相矛盾：</p>

<p><a href="https://funkymuse.dev/assets/img/load_data/irony.png"><img src="https://funkymuse.dev/assets/img/load_data/irony.png" alt="Irony" /></a></p>

<h3>开发者为何选择 init {} 块（以及它为何存在问题）</h3>

<p>ViewModel 的 init {} 块的吸引力显而易见——它确保数据加载在配置更改后依然有效，从而避免了不必要的 API 调用或数据库读取。然而，这种方法也带来了四个关键问题：</p>

<h4>问题 1：导航返回栈复杂化</h4>

<p>使用 init {} 进行数据加载时，返回到包含现有 ViewModel 的屏幕不会触发重新初始化。这迫使开发者在 onStart 或 onResume 中添加变通逻辑来检查数据新鲜度，从而创建难以维护的意大利面条式代码。</p>

<h4>问题 2：调度程序竞争条件</h4>

<p>在 init {} 中加载数据通常使用 viewModelScope，它在 Dispatchers.Main.immediate 上运行。这种即时调度程序可能会导致竞争条件，即数据处理在 UI 组合之前就已完成，尤其是在 Jetpack Compose 应用中。</p>

<p><a href="https://funkymuse.dev/assets/img/load_data/darkness.png"><img src="https://funkymuse.dev/assets/img/load_data/darkness.png" alt="Darkness" /></a></p>

<h4>问题 #3：数据过期问题</h4>

<p>现代 CRUD 应用程序需要更新数据。用户可能会从其他屏幕返回，或者在相当长一段时间后从暂停状态恢复。<code>init {}</code> 方法没有提供内置的数据新鲜度验证机制。</p>

<h4>问题 #4：测试困难</h4>

<p>每次运行测试时，你都必须构建 ViewModel 才能成功运行该特定测试用例的 <code>init {}</code> 代码块。</p>

<h2>基于 Flow 的解决方案：将冷流转换为热流</h2>

<p>该解决方案利用 Kotlin Flows——具体来说，使用 StateFlow 和适当的共享策略将冷流转换为热流。可以将其视为 Katy Perry 的“Hot N Cold”方法，但所有边缘情况的行为都是可预测的。</p>

<h3>构建基础：用例和 ViewModel 结构</h3>

<p><strong>请注意，此代码仅用于演示目的，如何构建由你决定，除加载部分外，并非最佳实践</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">inline</span> <span class="k">fun</span> <span class="err">&lt;</span><span class="nf">reified</span> <span class="n">T</span> <span class="p">:</span> <span class="n">ViewModel</span><span class="p">&gt;</span> <span class="n">provideFactory</span><span class="p">(</span>
</span><span class='line'>    <span class="n">crossinline</span> <span class="n">creator</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">T</span>
</span><span class='line'><span class="p">)</span> <span class="p">=</span> <span class="n">viewModelFactory</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">initializer</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">creator</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>注意：此工厂模式仅用于演示目的</em></p>

<p>我们的用例处理数据检索、格式化和业务逻辑转换：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">GetUserDetailsUseCase</span> <span class="k">private</span> <span class="n">constructor</span><span class="p">(</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">authRepository</span><span class="p">:</span> <span class="n">AuthRepository</span> <span class="p">=</span> <span class="n">AuthRepository</span><span class="p">(),</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">dispatcher</span><span class="p">:</span> <span class="n">CoroutineDispatcher</span> <span class="p">=</span> <span class="n">Dispatchers</span><span class="p">.</span><span class="n">IO</span><span class="p">,</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">billingCache</span><span class="p">:</span> <span class="n">BillingCache</span> <span class="p">=</span> <span class="n">BillingCache</span><span class="p">.</span><span class="n">create</span><span class="p">(),</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">dateFormatter</span><span class="p">:</span> <span class="n">DateFormatter</span> <span class="p">=</span> <span class="n">DataFormatter</span><span class="p">()</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">execute</span><span class="p">():</span> <span class="n">Result</span><span class="p">&lt;</span><span class="n">UserDetails</span><span class="p">&gt;</span> <span class="p">=</span>
</span><span class='line'>        <span class="n">withContext</span><span class="p">(</span><span class="n">dispatcher</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">userDetails</span><span class="p">:</span> <span class="n">Result</span><span class="p">&lt;</span><span class="n">UserDetailsResponseModel</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">authRepository</span><span class="p">.</span><span class="n">getUserDetails</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">userDetails</span><span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">details</span> <span class="p">-&gt;</span>
</span><span class='line'>                <span class="n">UserDetails</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">creationDate</span> <span class="p">=</span> <span class="n">dateFormatter</span><span class="p">.</span><span class="n">format</span><span class="p">(</span>
</span><span class='line'>                        <span class="n">details</span><span class="p">.</span><span class="n">creationDate</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">DateFormatter</span><span class="p">.</span><span class="n">Format</span><span class="p">.</span><span class="n">UTC_SHORT</span>
</span><span class='line'>                    <span class="p">).</span><span class="n">getOrNull</span><span class="p">(),</span>
</span><span class='line'>                    <span class="n">avatarUrl</span> <span class="p">=</span> <span class="n">details</span><span class="p">.</span><span class="n">avatar</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">isPremium</span> <span class="p">=</span> <span class="n">billingCache</span><span class="p">.</span><span class="n">isPremium</span><span class="p">(),</span>
</span><span class='line'>                    <span class="n">email</span> <span class="p">=</span> <span class="n">details</span><span class="p">.</span><span class="n">email</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">companion</span> <span class="k">object</span> <span class="err">{</span>
</span><span class='line'>        <span class="k">fun</span> <span class="nf">create</span><span class="p">()</span> <span class="p">=</span> <span class="n">GetUserDetailsUseCase</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>此用例封装了从存储库检索数据、日期格式化、高级状态验证以及准备用户信息以供显示。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">internal</span> <span class="k">class</span> <span class="nc">UserAccountDetailsViewModel</span> <span class="k">private</span> <span class="n">constructor</span><span class="p">(</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">getUserDetailsUseCase</span><span class="p">:</span> <span class="n">GetUserDetailsUseCase</span> <span class="p">=</span> <span class="n">GetUserDetailsUseCase</span><span class="p">.</span><span class="n">create</span><span class="p">(),</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">ViewModel</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">ViewState</span><span class="p">(</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">isLoading</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">isError</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">userInfo</span><span class="p">:</span> <span class="n">UserInfo</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">data</span> <span class="k">class</span> <span class="nc">UserInfo</span><span class="p">(</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">displayEmail</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">avatarUrl</span><span class="p">:</span> <span class="n">String</span><span class="p">?,</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">showPremiumBadge</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">,</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">memberSince</span><span class="p">:</span> <span class="n">String</span><span class="p">?</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">userDetails</span><span class="p">:</span> <span class="n">Flow</span><span class="p">&lt;</span><span class="n">ViewState</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">flow</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">emit</span><span class="p">(</span>
</span><span class='line'>            <span class="n">getUserDetailsUseCase</span><span class="p">.</span><span class="n">execute</span><span class="p">()</span>
</span><span class='line'>                <span class="p">.</span><span class="n">fold</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">onSuccess</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">ViewState</span><span class="p">(</span>
</span><span class='line'>                            <span class="n">isLoading</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'>                            <span class="n">isError</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'>                            <span class="n">userInfo</span> <span class="p">=</span> <span class="n">ViewState</span><span class="p">.</span><span class="n">UserInfo</span><span class="p">(</span>
</span><span class='line'>                                <span class="n">displayEmail</span> <span class="p">=</span> <span class="n">it</span><span class="p">.</span><span class="n">email</span><span class="p">,</span>
</span><span class='line'>                                <span class="n">avatarUrl</span> <span class="p">=</span> <span class="n">it</span><span class="p">.</span><span class="n">avatarUrl</span><span class="p">,</span>
</span><span class='line'>                                <span class="n">showPremiumBadge</span> <span class="p">=</span> <span class="n">it</span><span class="p">.</span><span class="n">isPremium</span><span class="p">,</span>
</span><span class='line'>                                <span class="n">memberSince</span> <span class="p">=</span> <span class="n">it</span><span class="p">.</span><span class="n">creationDate</span><span class="o">?.</span><span class="n">toString</span><span class="p">()</span>
</span><span class='line'>                            <span class="p">)</span>
</span><span class='line'>                        <span class="p">)</span>
</span><span class='line'>                    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>                    <span class="n">onFailure</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">ViewState</span><span class="p">(</span><span class="n">isLoading</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span> <span class="n">isError</span> <span class="p">=</span> <span class="k">true</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}.</span><span class="n">stateIn</span><span class="p">(</span>
</span><span class='line'>        <span class="n">viewModelScope</span><span class="p">,</span>
</span><span class='line'>        <span class="n">SharingStarted</span><span class="p">.</span><span class="n">WhileSubscribed</span><span class="p">(</span><span class="m">5</span><span class="n">_000</span><span class="p">),</span>
</span><span class='line'>        <span class="n">ViewState</span><span class="p">(</span><span class="n">isLoading</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span> <span class="n">isError</span> <span class="p">=</span> <span class="k">false</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">companion</span> <span class="k">object</span> <span class="err">{</span>
</span><span class='line'>        <span class="k">fun</span> <span class="nf">factory</span><span class="p">()</span> <span class="p">=</span> <span class="n">provideFactory</span> <span class="p">{</span> <span class="n">UserAccountDetailsViewModel</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种方法有几个关键优势：</p>

<ul>
<li><strong>数据新鲜度</strong>：5 秒超时时间与 Android 的 ANR 阈值一致，确保在超时后收集器重新出现时数据能够刷新。</li>
<li><strong>配置变更处理</strong>：在超时窗口内，即使配置发生变化，数据也能持久保存。</li>
<li><strong>资源效率</strong>：避免不必要的网络调用，以实现快速导航模式。</li>
</ul>


<p><em>专业提示：对于需要实时数据新鲜度的应用程序，请将超时时间设置为 0</em></p>

<h3>添加用户交互：实现刷新功能</h3>

<p>实际应用程序需要用户主动发起的数据刷新功能。产品经理喜欢滑动刷新，但我们的基本流程无法适应这种模式。让我们来增强我们的架构：</p>

<p>我们使用在主流程收集器中触发的 <code>MutableSharedFlow</code> 来实现这一点：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">internal</span> <span class="k">class</span> <span class="nc">UserAccountDetailsViewModel</span> <span class="k">private</span> <span class="n">constructor</span><span class="p">(</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">getUserDetailsUseCase</span><span class="p">:</span> <span class="n">GetUserDetailsUseCase</span> <span class="p">=</span> <span class="n">GetUserDetailsUseCase</span><span class="p">.</span><span class="n">create</span><span class="p">(),</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">ViewModel</span><span class="p">(),</span> <span class="n">IntentAware</span><span class="p">&lt;</span><span class="n">UserAccountDetailsViewModel</span><span class="p">.</span><span class="n">ViewState</span><span class="p">.</span><span class="n">Intents</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">ViewState</span><span class="p">(</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">isLoading</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">isError</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">userInfo</span><span class="p">:</span> <span class="n">UserInfo</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">data</span> <span class="k">class</span> <span class="nc">UserInfo</span><span class="p">(</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">displayEmail</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">avatarUrl</span><span class="p">:</span> <span class="n">String</span><span class="p">?,</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">showPremiumBadge</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">,</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">memberSince</span><span class="p">:</span> <span class="n">String</span><span class="p">?</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">sealed</span> <span class="k">class</span> <span class="nc">Intents</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">data</span> <span class="k">object</span> <span class="nc">Refresh</span> <span class="p">:</span> <span class="n">Intents</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">refreshListener</span> <span class="p">=</span> <span class="n">MutableSharedFlow</span><span class="p">&lt;</span><span class="n">Unit</span><span class="p">&gt;()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">userDetails</span><span class="p">:</span> <span class="n">Flow</span><span class="p">&lt;</span><span class="n">ViewState</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">flow</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">emit</span><span class="p">(</span><span class="n">getUserDetailsState</span><span class="p">())</span>
</span><span class='line'>        <span class="n">refreshListener</span><span class="p">.</span><span class="n">collect</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">emit</span><span class="p">(</span><span class="n">ViewState</span><span class="p">(</span><span class="n">isLoading</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span> <span class="n">isError</span> <span class="p">=</span> <span class="k">false</span><span class="p">))</span>
</span><span class='line'>            <span class="n">emit</span><span class="p">(</span><span class="n">getUserDetailsState</span><span class="p">())</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}.</span><span class="n">stateIn</span><span class="p">(</span>
</span><span class='line'>        <span class="n">viewModelScope</span><span class="p">,</span>
</span><span class='line'>        <span class="n">SharingStarted</span><span class="p">.</span><span class="n">WhileSubscribed</span><span class="p">(</span><span class="m">5</span><span class="n">_000</span><span class="p">),</span>
</span><span class='line'>        <span class="n">ViewState</span><span class="p">(</span><span class="n">isLoading</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span> <span class="n">isError</span> <span class="p">=</span> <span class="k">false</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">getUserDetailsState</span><span class="p">():</span> <span class="n">ViewState</span> <span class="p">=</span> <span class="n">getUserDetailsUseCase</span><span class="p">.</span><span class="n">execute</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">fold</span><span class="p">(</span>
</span><span class='line'>            <span class="n">onSuccess</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">ViewState</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">isLoading</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">isError</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">userInfo</span> <span class="p">=</span> <span class="n">ViewState</span><span class="p">.</span><span class="n">UserInfo</span><span class="p">(</span>
</span><span class='line'>                        <span class="n">displayEmail</span> <span class="p">=</span> <span class="n">it</span><span class="p">.</span><span class="n">email</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">avatarUrl</span> <span class="p">=</span> <span class="n">it</span><span class="p">.</span><span class="n">avatarUrl</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">showPremiumBadge</span> <span class="p">=</span> <span class="n">it</span><span class="p">.</span><span class="n">isPremium</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">memberSince</span> <span class="p">=</span> <span class="n">it</span><span class="p">.</span><span class="n">creationDate</span><span class="o">?.</span><span class="n">toString</span><span class="p">()</span>
</span><span class='line'>                    <span class="p">)</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">onFailure</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">ViewState</span><span class="p">(</span><span class="n">isLoading</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span> <span class="n">isError</span> <span class="p">=</span> <span class="k">true</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onIntent</span><span class="p">(</span><span class="n">intent</span><span class="p">:</span> <span class="n">ViewState</span><span class="p">.</span><span class="n">Intents</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">when</span> <span class="p">(</span><span class="n">intent</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">ViewState</span><span class="p">.</span><span class="n">Intents</span><span class="p">.</span><span class="n">Refresh</span> <span class="p">-&gt;</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">viewModelScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">refreshListener</span><span class="p">.</span><span class="n">emit</span><span class="p">(</span><span class="n">Unit</span><span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">companion</span> <span class="k">object</span> <span class="err">{</span>
</span><span class='line'>        <span class="k">fun</span> <span class="nf">factory</span><span class="p">()</span> <span class="p">=</span> <span class="n">provideFactory</span> <span class="p">{</span> <span class="n">UserAccountDetailsViewModel</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>完美！我们成功重构了重复的数据加载逻辑，并实现了刷新功能。然而，这还不算完。</p>

<h3>优化状态管理：消除冗余状态输出</h3>

<p>为了避免不必要的 UI 更新，我们将添加 <code>distinctUntilChanged()</code> 来过滤重复的状态输出。</p>

<h3>处理复杂的状态更新</h3>

<p>对于意图修改 UI 状态而不需要重新加载数据的场景，我们需要在流程操作中访问当前状态。例如，切换电子邮件可见性——这需要修改状态而不是重新加载数据。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">data</span> <span class="k">class</span> <span class="nc">ViewState</span><span class="p">(</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">isLoading</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">isError</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">isEmailVisible</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">userInfo</span><span class="p">:</span> <span class="n">UserInfo</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">UserInfo</span><span class="p">(</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">displayEmail</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">avatarUrl</span><span class="p">:</span> <span class="n">String</span><span class="p">?,</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">showPremiumBadge</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">,</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">memberSince</span><span class="p">:</span> <span class="n">String</span><span class="p">?</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sealed</span> <span class="k">class</span> <span class="nc">Intents</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">data</span> <span class="k">object</span> <span class="nc">Refresh</span> <span class="p">:</span> <span class="n">Intents</span><span class="p">()</span>
</span><span class='line'>        <span class="n">data</span> <span class="k">class</span> <span class="nc">ToggleEmailVisibility</span><span class="p">(</span><span class="k">val</span> <span class="py">isEmailVisible</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">)</span> <span class="p">:</span> <span class="n">Intents</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sealed</span> <span class="k">class</span> <span class="nc">StateParameters</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">data</span> <span class="k">class</span> <span class="nc">EmailVisibilityChanged</span><span class="p">(</span><span class="k">val</span> <span class="py">isEmailVisible</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">)</span> <span class="p">:</span> <span class="n">StateParameters</span><span class="p">()</span>
</span><span class='line'>        <span class="n">data</span> <span class="k">object</span> <span class="nc">Refresh</span> <span class="p">:</span> <span class="n">StateParameters</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="py">refreshListener</span> <span class="p">=</span> <span class="n">MutableSharedFlow</span><span class="p">&lt;</span><span class="n">ViewState</span><span class="p">.</span><span class="n">StateParameters</span><span class="p">&gt;()</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="py">userDetails</span><span class="p">:</span> <span class="n">Flow</span><span class="p">&lt;</span><span class="n">ViewState</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">flow</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">emit</span><span class="p">(</span><span class="n">getUserDetailsState</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">refreshListener</span><span class="p">.</span><span class="n">collect</span> <span class="p">{</span> <span class="n">refreshParams</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="k">when</span> <span class="p">(</span><span class="n">refreshParams</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">is</span> <span class="n">ViewState</span><span class="p">.</span><span class="n">StateParameters</span><span class="p">.</span><span class="n">EmailVisibilityChanged</span> <span class="p">-&gt;</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">//do some changes here</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">ViewState</span><span class="p">.</span><span class="n">StateParameters</span><span class="p">.</span><span class="n">Refresh</span> <span class="p">-&gt;</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">emit</span><span class="p">(</span><span class="n">ViewState</span><span class="p">(</span><span class="n">isLoading</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span> <span class="n">isError</span> <span class="p">=</span> <span class="k">false</span><span class="p">))</span>
</span><span class='line'>                <span class="n">emit</span><span class="p">(</span><span class="n">getUserDetailsState</span><span class="p">())</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>    <span class="p">.</span><span class="n">distinctUntilChanged</span><span class="p">()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">stateIn</span><span class="p">(</span>
</span><span class='line'>        <span class="n">viewModelScope</span><span class="p">,</span>
</span><span class='line'>        <span class="n">SharingStarted</span><span class="p">.</span><span class="n">WhileSubscribed</span><span class="p">(</span><span class="m">5</span><span class="n">_000</span><span class="p">),</span>
</span><span class='line'>        <span class="n">ViewState</span><span class="p">(</span><span class="n">isLoading</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span> <span class="n">isError</span> <span class="p">=</span> <span class="k">false</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的挑战在于如何在流程中访问当前状态。让我们通过内部跟踪状态来解决这个问题：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">internal</span> <span class="k">class</span> <span class="nc">UserAccountDetailsViewModel</span> <span class="k">private</span> <span class="n">constructor</span><span class="p">(</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">getUserDetailsUseCase</span><span class="p">:</span> <span class="n">GetUserDetailsUseCase</span> <span class="p">=</span> <span class="n">GetUserDetailsUseCase</span><span class="p">.</span><span class="n">create</span><span class="p">(),</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">ViewModel</span><span class="p">(),</span> <span class="n">IntentAware</span><span class="p">&lt;</span><span class="n">UserAccountDetailsViewModel</span><span class="p">.</span><span class="n">ViewState</span><span class="p">.</span><span class="n">Intents</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">ViewState</span><span class="p">(</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">isLoading</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">isError</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">isEmailVisible</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">userInfo</span><span class="p">:</span> <span class="n">UserInfo</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">data</span> <span class="k">class</span> <span class="nc">UserInfo</span><span class="p">(</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">displayEmail</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">avatarUrl</span><span class="p">:</span> <span class="n">String</span><span class="p">?,</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">showPremiumBadge</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">,</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">memberSince</span><span class="p">:</span> <span class="n">String</span><span class="p">?</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">sealed</span> <span class="k">class</span> <span class="nc">Intents</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">data</span> <span class="k">object</span> <span class="nc">Refresh</span> <span class="p">:</span> <span class="n">Intents</span><span class="p">()</span>
</span><span class='line'>            <span class="n">data</span> <span class="k">class</span> <span class="nc">ToggleEmailVisibility</span><span class="p">(</span><span class="k">val</span> <span class="py">isEmailVisible</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">)</span> <span class="p">:</span> <span class="n">Intents</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">sealed</span> <span class="k">class</span> <span class="nc">StateTriggers</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">data</span> <span class="k">class</span> <span class="nc">EmailVisibilityChanged</span><span class="p">(</span><span class="k">val</span> <span class="py">isEmailVisible</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">)</span> <span class="p">:</span> <span class="n">StateTriggers</span><span class="p">()</span>
</span><span class='line'>            <span class="n">data</span> <span class="k">object</span> <span class="nc">Refresh</span> <span class="p">:</span> <span class="n">StateTriggers</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">var</span> <span class="py">currentState</span> <span class="p">=</span> <span class="n">ViewState</span><span class="p">(</span><span class="n">isLoading</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span> <span class="n">isError</span> <span class="p">=</span> <span class="k">false</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">refreshListener</span> <span class="p">=</span> <span class="n">MutableSharedFlow</span><span class="p">&lt;</span><span class="n">ViewState</span><span class="p">.</span><span class="n">StateTriggers</span><span class="p">&gt;()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">userDetails</span><span class="p">:</span> <span class="n">Flow</span><span class="p">&lt;</span><span class="n">ViewState</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">flow</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">emit</span><span class="p">(</span><span class="n">getUserDetailsState</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">refreshListener</span><span class="p">.</span><span class="n">collect</span> <span class="p">{</span> <span class="n">refreshParams</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="k">when</span> <span class="p">(</span><span class="n">refreshParams</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">is</span> <span class="n">ViewState</span><span class="p">.</span><span class="n">StateTriggers</span><span class="p">.</span><span class="n">EmailVisibilityChanged</span> <span class="p">-&gt;</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">emit</span><span class="p">(</span><span class="n">currentState</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="n">isEmailVisible</span> <span class="p">=</span> <span class="n">refreshParams</span><span class="p">.</span><span class="n">isEmailVisible</span><span class="p">))</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="n">ViewState</span><span class="p">.</span><span class="n">StateTriggers</span><span class="p">.</span><span class="n">Refresh</span> <span class="p">-&gt;</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">emit</span><span class="p">(</span><span class="n">ViewState</span><span class="p">(</span><span class="n">isLoading</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span> <span class="n">isError</span> <span class="p">=</span> <span class="k">false</span><span class="p">))</span>
</span><span class='line'>                    <span class="n">emit</span><span class="p">(</span><span class="n">getUserDetailsState</span><span class="p">())</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>        <span class="p">.</span><span class="n">distinctUntilChanged</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">onEach</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">currentState</span> <span class="p">=</span> <span class="n">it</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="p">.</span><span class="n">stateIn</span><span class="p">(</span>
</span><span class='line'>            <span class="n">viewModelScope</span><span class="p">,</span>
</span><span class='line'>            <span class="n">SharingStarted</span><span class="p">.</span><span class="n">WhileSubscribed</span><span class="p">(</span><span class="m">5</span><span class="n">_000</span><span class="p">),</span>
</span><span class='line'>            <span class="n">currentState</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">getUserDetailsState</span><span class="p">():</span> <span class="n">ViewState</span> <span class="p">=</span> <span class="n">getUserDetailsUseCase</span><span class="p">.</span><span class="n">execute</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">fold</span><span class="p">(</span>
</span><span class='line'>            <span class="n">onSuccess</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">ViewState</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">isLoading</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">isError</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">userInfo</span> <span class="p">=</span> <span class="n">ViewState</span><span class="p">.</span><span class="n">UserInfo</span><span class="p">(</span>
</span><span class='line'>                        <span class="n">displayEmail</span> <span class="p">=</span> <span class="n">it</span><span class="p">.</span><span class="n">email</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">avatarUrl</span> <span class="p">=</span> <span class="n">it</span><span class="p">.</span><span class="n">avatarUrl</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">showPremiumBadge</span> <span class="p">=</span> <span class="n">it</span><span class="p">.</span><span class="n">isPremium</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">memberSince</span> <span class="p">=</span> <span class="n">it</span><span class="p">.</span><span class="n">creationDate</span><span class="o">?.</span><span class="n">toString</span><span class="p">()</span>
</span><span class='line'>                    <span class="p">)</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">onFailure</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">ViewState</span><span class="p">(</span><span class="n">isLoading</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span> <span class="n">isError</span> <span class="p">=</span> <span class="k">true</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onIntent</span><span class="p">(</span><span class="n">intent</span><span class="p">:</span> <span class="n">ViewState</span><span class="p">.</span><span class="n">Intents</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">when</span> <span class="p">(</span><span class="n">intent</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">ViewState</span><span class="p">.</span><span class="n">Intents</span><span class="p">.</span><span class="n">Refresh</span> <span class="p">-&gt;</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">viewModelScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">refreshListener</span><span class="p">.</span><span class="n">emit</span><span class="p">(</span><span class="n">ViewState</span><span class="p">.</span><span class="n">StateTriggers</span><span class="p">.</span><span class="n">Refresh</span><span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">is</span> <span class="n">ViewState</span><span class="p">.</span><span class="n">Intents</span><span class="p">.</span><span class="n">ToggleEmailVisibility</span> <span class="p">-&gt;</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">viewModelScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">refreshListener</span><span class="p">.</span><span class="n">emit</span><span class="p">(</span><span class="n">ViewState</span><span class="p">.</span><span class="n">StateTriggers</span><span class="p">.</span><span class="n">EmailVisibilityChanged</span><span class="p">(</span><span class="n">intent</span><span class="p">.</span><span class="n">isEmailVisible</span><span class="p">))</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">companion</span> <span class="k">object</span> <span class="err">{</span>
</span><span class='line'>        <span class="k">fun</span> <span class="nf">factory</span><span class="p">()</span> <span class="p">=</span> <span class="n">provideFactory</span> <span class="p">{</span> <span class="n">UserAccountDetailsViewModel</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>智能数据缓存：条件加载策略</h3>

<p>现在我们可以实现复杂的缓存行为了。由于 <code>currentState</code> 在 ViewModel 生命周期内持续存在，我们可以立即发出缓存数据，并仅在必要时有条件地加载新数据：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">internal</span> <span class="k">class</span> <span class="nc">UserAccountDetailsViewModel</span> <span class="k">private</span> <span class="n">constructor</span><span class="p">(</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">getUserDetailsUseCase</span><span class="p">:</span> <span class="n">GetUserDetailsUseCase</span> <span class="p">=</span> <span class="n">GetUserDetailsUseCase</span><span class="p">.</span><span class="n">create</span><span class="p">(),</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">ViewModel</span><span class="p">(),</span> <span class="n">IntentAware</span><span class="p">&lt;</span><span class="n">UserAccountDetailsViewModel</span><span class="p">.</span><span class="n">ViewState</span><span class="p">.</span><span class="n">Intents</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">ViewState</span><span class="p">(</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">isLoading</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">isError</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">isEmailVisible</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">userInfo</span><span class="p">:</span> <span class="n">UserInfo</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">isDataLoaded</span> <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="n">userInfo</span> <span class="p">!=</span> <span class="k">null</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">data</span> <span class="k">class</span> <span class="nc">UserInfo</span><span class="p">(</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">displayEmail</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">avatarUrl</span><span class="p">:</span> <span class="n">String</span><span class="p">?,</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">showPremiumBadge</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">,</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">memberSince</span><span class="p">:</span> <span class="n">String</span><span class="p">?</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">sealed</span> <span class="k">class</span> <span class="nc">Intents</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">data</span> <span class="k">object</span> <span class="nc">Refresh</span> <span class="p">:</span> <span class="n">Intents</span><span class="p">()</span>
</span><span class='line'>            <span class="n">data</span> <span class="k">class</span> <span class="nc">ToggleEmailVisibility</span><span class="p">(</span><span class="k">val</span> <span class="py">isEmailVisible</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">)</span> <span class="p">:</span> <span class="n">Intents</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">sealed</span> <span class="k">class</span> <span class="nc">StateTriggers</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">data</span> <span class="k">class</span> <span class="nc">EmailVisibilityChanged</span><span class="p">(</span><span class="k">val</span> <span class="py">isEmailVisible</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">)</span> <span class="p">:</span> <span class="n">StateTriggers</span><span class="p">()</span>
</span><span class='line'>            <span class="n">data</span> <span class="k">object</span> <span class="nc">Refresh</span> <span class="p">:</span> <span class="n">StateTriggers</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">var</span> <span class="py">currentState</span> <span class="p">=</span> <span class="n">ViewState</span><span class="p">(</span><span class="n">isLoading</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span> <span class="n">isError</span> <span class="p">=</span> <span class="k">false</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">refreshListener</span> <span class="p">=</span> <span class="n">MutableSharedFlow</span><span class="p">&lt;</span><span class="n">ViewState</span><span class="p">.</span><span class="n">StateTriggers</span><span class="p">&gt;()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">userDetails</span><span class="p">:</span> <span class="n">Flow</span><span class="p">&lt;</span><span class="n">ViewState</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">flow</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">emit</span><span class="p">(</span><span class="n">currentState</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//i added error check just because this is for demonstration of this edge case</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">currentState</span><span class="p">.</span><span class="n">isDataLoaded</span><span class="p">.</span><span class="n">not</span><span class="p">()</span> <span class="p">||</span> <span class="n">currentState</span><span class="p">.</span><span class="n">isError</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">emit</span><span class="p">(</span><span class="n">getUserDetailsState</span><span class="p">())</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">refreshListener</span><span class="p">.</span><span class="n">collect</span> <span class="p">{</span> <span class="n">refreshParams</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="k">when</span> <span class="p">(</span><span class="n">refreshParams</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">is</span> <span class="n">ViewState</span><span class="p">.</span><span class="n">StateTriggers</span><span class="p">.</span><span class="n">EmailVisibilityChanged</span> <span class="p">-&gt;</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">emit</span><span class="p">(</span><span class="n">currentState</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="n">isEmailVisible</span> <span class="p">=</span> <span class="n">refreshParams</span><span class="p">.</span><span class="n">isEmailVisible</span><span class="p">))</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">ViewState</span><span class="p">.</span><span class="n">StateTriggers</span><span class="p">.</span><span class="n">Refresh</span> <span class="p">-&gt;</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">emit</span><span class="p">(</span><span class="n">ViewState</span><span class="p">(</span><span class="n">isLoading</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span> <span class="n">isError</span> <span class="p">=</span> <span class="k">false</span><span class="p">))</span>
</span><span class='line'>                    <span class="n">emit</span><span class="p">(</span><span class="n">getUserDetailsState</span><span class="p">())</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>        <span class="p">.</span><span class="n">distinctUntilChanged</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">onEach</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">currentState</span> <span class="p">=</span> <span class="n">it</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">.</span><span class="n">stateIn</span><span class="p">(</span>
</span><span class='line'>            <span class="n">viewModelScope</span><span class="p">,</span>
</span><span class='line'>            <span class="n">SharingStarted</span><span class="p">.</span><span class="n">WhileSubscribed</span><span class="p">(</span><span class="m">5</span><span class="n">_000</span><span class="p">),</span>
</span><span class='line'>            <span class="n">currentState</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">getUserDetailsState</span><span class="p">():</span> <span class="n">ViewState</span> <span class="p">=</span> <span class="n">getUserDetailsUseCase</span><span class="p">.</span><span class="n">execute</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">fold</span><span class="p">(</span>
</span><span class='line'>            <span class="n">onSuccess</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">ViewState</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">isLoading</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">isError</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">userInfo</span> <span class="p">=</span> <span class="n">ViewState</span><span class="p">.</span><span class="n">UserInfo</span><span class="p">(</span>
</span><span class='line'>                        <span class="n">displayEmail</span> <span class="p">=</span> <span class="n">it</span><span class="p">.</span><span class="n">email</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">avatarUrl</span> <span class="p">=</span> <span class="n">it</span><span class="p">.</span><span class="n">avatarUrl</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">showPremiumBadge</span> <span class="p">=</span> <span class="n">it</span><span class="p">.</span><span class="n">isPremium</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">memberSince</span> <span class="p">=</span> <span class="n">it</span><span class="p">.</span><span class="n">creationDate</span><span class="o">?.</span><span class="n">toString</span><span class="p">()</span>
</span><span class='line'>                    <span class="p">)</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">onFailure</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">ViewState</span><span class="p">(</span><span class="n">isLoading</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span> <span class="n">isError</span> <span class="p">=</span> <span class="k">true</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onIntent</span><span class="p">(</span><span class="n">intent</span><span class="p">:</span> <span class="n">ViewState</span><span class="p">.</span><span class="n">Intents</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">when</span> <span class="p">(</span><span class="n">intent</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">ViewState</span><span class="p">.</span><span class="n">Intents</span><span class="p">.</span><span class="n">Refresh</span> <span class="p">-&gt;</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">viewModelScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">refreshListener</span><span class="p">.</span><span class="n">emit</span><span class="p">(</span><span class="n">ViewState</span><span class="p">.</span><span class="n">StateTriggers</span><span class="p">.</span><span class="n">Refresh</span><span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">is</span> <span class="n">ViewState</span><span class="p">.</span><span class="n">Intents</span><span class="p">.</span><span class="n">ToggleEmailVisibility</span> <span class="p">-&gt;</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">viewModelScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">refreshListener</span><span class="p">.</span><span class="n">emit</span><span class="p">(</span><span class="n">ViewState</span><span class="p">.</span><span class="n">StateTriggers</span><span class="p">.</span><span class="n">EmailVisibilityChanged</span><span class="p">(</span><span class="n">intent</span><span class="p">.</span><span class="n">isEmailVisible</span><span class="p">))</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">companion</span> <span class="k">object</span> <span class="err">{</span>
</span><span class='line'>        <span class="k">fun</span> <span class="nf">factory</span><span class="p">()</span> <span class="p">=</span> <span class="n">provideFactory</span> <span class="p">{</span> <span class="n">UserAccountDetailsViewModel</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>此模式提供智能缓存——即使在 5 秒超时后，你也可以根据具体需求选择是否重新获取数据：</p>

<ul>
<li><strong>昂贵的 API 调用</strong>：在 ViewModel 中缓存数据以减少网络开销</li>
<li><strong>静态后端数据</strong>：避免对很少更改的信息进行不必要的请求</li>
<li><strong>实时需求</strong>：强制刷新需要更新数据的应用程序</li>
</ul>


<h3>创建可复用的抽象</h3>

<p>重复编写此模式会变得非常繁琐。让我们从 ViewModel 扩展函数开始，创建可复用的抽象：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="err">&lt;</span><span class="nf">T</span><span class="p">,</span> <span class="n">R</span><span class="p">&gt;</span> <span class="n">ViewModel</span><span class="p">.</span><span class="n">loadData</span><span class="p">(</span>
</span><span class='line'>    <span class="n">initialState</span><span class="p">:</span> <span class="n">T</span><span class="p">,</span>
</span><span class='line'>    <span class="n">loadData</span><span class="p">:</span> <span class="n">suspend</span> <span class="n">FlowCollector</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;.(</span><span class="n">currentState</span><span class="p">:</span> <span class="n">T</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span>
</span><span class='line'>    <span class="n">refreshMechanism</span><span class="p">:</span> <span class="n">SharedFlow</span><span class="p">&lt;</span><span class="n">R</span><span class="p">&gt;?</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>    <span class="n">timeout</span><span class="p">:</span> <span class="n">Long</span> <span class="p">=</span> <span class="m">5</span><span class="n">_000</span><span class="p">,</span>
</span><span class='line'>    <span class="n">refreshData</span><span class="p">:</span> <span class="p">(</span><span class="n">suspend</span> <span class="n">FlowCollector</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;.(</span><span class="n">currentState</span><span class="p">:</span> <span class="n">T</span><span class="p">,</span> <span class="n">refreshParams</span><span class="p">:</span> <span class="n">R</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">)?</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'><span class="p">):</span> <span class="n">StateFlow</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">refreshMechanism</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">requireNotNull</span><span class="p">(</span><span class="n">refreshData</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="s">&quot;You&#39;ve provided a refresh mechanism but no way to refresh the data&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">refreshData</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">requireNotNull</span><span class="p">(</span><span class="n">refreshMechanism</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="s">&quot;You&#39;ve provided a refresh data but no mechanism to refresh the data&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="py">latestValue</span> <span class="p">=</span> <span class="n">initialState</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">flow</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">emit</span><span class="p">(</span><span class="n">latestValue</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">loadData</span><span class="p">(</span><span class="n">latestValue</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">refreshMechanism</span><span class="o">?.</span><span class="n">collect</span> <span class="p">{</span> <span class="n">refreshParams</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">refreshData</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">refreshData</span><span class="p">(</span><span class="n">latestValue</span><span class="p">,</span> <span class="n">refreshParams</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>        <span class="p">.</span><span class="n">distinctUntilChanged</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">onEach</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">latestValue</span> <span class="p">=</span> <span class="n">it</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="p">.</span><span class="n">stateIn</span><span class="p">(</span>
</span><span class='line'>            <span class="n">scope</span> <span class="p">=</span> <span class="n">viewModelScope</span><span class="p">,</span>
</span><span class='line'>            <span class="n">started</span> <span class="p">=</span> <span class="n">SharingStarted</span><span class="p">.</span><span class="n">WhileSubscribed</span><span class="p">(</span><span class="n">timeout</span><span class="p">),</span>
</span><span class='line'>            <span class="n">initialValue</span> <span class="p">=</span> <span class="n">initialState</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="err">&lt;</span><span class="nf">T</span><span class="p">&gt;</span> <span class="n">ViewModel</span><span class="p">.</span><span class="n">loadData</span><span class="p">(</span>
</span><span class='line'>    <span class="n">initialState</span><span class="p">:</span> <span class="n">T</span><span class="p">,</span>
</span><span class='line'>    <span class="n">loadData</span><span class="p">:</span> <span class="n">suspend</span> <span class="n">FlowCollector</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;.(</span><span class="n">currentState</span><span class="p">:</span> <span class="n">T</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span>
</span><span class='line'>    <span class="n">timeout</span><span class="p">:</span> <span class="n">Long</span> <span class="p">=</span> <span class="m">5</span><span class="n">_000</span><span class="p">,</span>
</span><span class='line'><span class="p">):</span> <span class="n">StateFlow</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">latestValue</span> <span class="p">=</span> <span class="n">initialState</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">flow</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">emit</span><span class="p">(</span><span class="n">latestValue</span><span class="p">)</span>
</span><span class='line'>        <span class="n">loadData</span><span class="p">(</span><span class="n">latestValue</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>        <span class="p">.</span><span class="n">onEach</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">latestValue</span> <span class="p">=</span> <span class="n">it</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="p">.</span><span class="n">distinctUntilChanged</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">stateIn</span><span class="p">(</span>
</span><span class='line'>            <span class="n">scope</span> <span class="p">=</span> <span class="n">viewModelScope</span><span class="p">,</span>
</span><span class='line'>            <span class="n">started</span> <span class="p">=</span> <span class="n">SharingStarted</span><span class="p">.</span><span class="n">WhileSubscribed</span><span class="p">(</span><span class="n">timeout</span><span class="p">),</span>
</span><span class='line'>            <span class="n">initialValue</span> <span class="p">=</span> <span class="n">initialState</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>有了我们抽象的扩展函数，ViewModel 变得更加简洁：</p>

<p><em>注意：此抽象涵盖了 90% 的常见用例，但不支持复杂的流程链式操作</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">internal</span> <span class="k">class</span> <span class="nc">UserAccountDetailsViewModel</span> <span class="k">private</span> <span class="n">constructor</span><span class="p">(</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">getUserDetailsUseCase</span><span class="p">:</span> <span class="n">GetUserDetailsUseCase</span> <span class="p">=</span> <span class="n">GetUserDetailsUseCase</span><span class="p">.</span><span class="n">create</span><span class="p">(),</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">ViewModel</span><span class="p">(),</span> <span class="n">IntentAware</span><span class="p">&lt;</span><span class="n">UserAccountDetailsViewModel</span><span class="p">.</span><span class="n">ViewState</span><span class="p">.</span><span class="n">Intents</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">ViewState</span><span class="p">(</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">isLoading</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">isError</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">isEmailVisible</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">userInfo</span><span class="p">:</span> <span class="n">UserInfo</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">isDataLoaded</span> <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="n">userInfo</span> <span class="p">!=</span> <span class="k">null</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">data</span> <span class="k">class</span> <span class="nc">UserInfo</span><span class="p">(</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">displayEmail</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">avatarUrl</span><span class="p">:</span> <span class="n">String</span><span class="p">?,</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">showPremiumBadge</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">,</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">memberSince</span><span class="p">:</span> <span class="n">String</span><span class="p">?</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">sealed</span> <span class="k">class</span> <span class="nc">Intents</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">data</span> <span class="k">object</span> <span class="nc">Refresh</span> <span class="p">:</span> <span class="n">Intents</span><span class="p">()</span>
</span><span class='line'>            <span class="n">data</span> <span class="k">class</span> <span class="nc">ToggleEmailVisibility</span><span class="p">(</span><span class="k">val</span> <span class="py">isEmailVisible</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">)</span> <span class="p">:</span> <span class="n">Intents</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">sealed</span> <span class="k">class</span> <span class="nc">StateTriggers</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">data</span> <span class="k">class</span> <span class="nc">EmailVisibilityChanged</span><span class="p">(</span><span class="k">val</span> <span class="py">isEmailVisible</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">)</span> <span class="p">:</span> <span class="n">StateTriggers</span><span class="p">()</span>
</span><span class='line'>            <span class="n">data</span> <span class="k">object</span> <span class="nc">Refresh</span> <span class="p">:</span> <span class="n">StateTriggers</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">refreshListener</span> <span class="p">=</span> <span class="n">MutableSharedFlow</span><span class="p">&lt;</span><span class="n">ViewState</span><span class="p">.</span><span class="n">StateTriggers</span><span class="p">&gt;()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">userDetails</span> <span class="p">=</span> <span class="n">loadData</span><span class="p">(</span>
</span><span class='line'>        <span class="n">initialState</span> <span class="p">=</span> <span class="n">ViewState</span><span class="p">(</span><span class="n">isLoading</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span> <span class="n">isError</span> <span class="p">=</span> <span class="k">false</span><span class="p">),</span>
</span><span class='line'>        <span class="n">loadData</span> <span class="p">=</span> <span class="p">{</span> <span class="n">currentState</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">currentState</span><span class="p">.</span><span class="n">isDataLoaded</span><span class="p">.</span><span class="n">not</span><span class="p">()</span> <span class="p">||</span> <span class="n">currentState</span><span class="p">.</span><span class="n">isError</span><span class="p">.</span><span class="n">not</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">emit</span><span class="p">(</span><span class="n">getUserDetailsState</span><span class="p">())</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="n">refreshMechanism</span> <span class="p">=</span> <span class="n">refreshListener</span><span class="p">,</span>
</span><span class='line'>        <span class="n">refreshData</span> <span class="p">=</span> <span class="p">{</span> <span class="n">currentState</span><span class="p">,</span> <span class="n">refreshParams</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="k">when</span> <span class="p">(</span><span class="n">refreshParams</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">is</span> <span class="n">ViewState</span><span class="p">.</span><span class="n">StateTriggers</span><span class="p">.</span><span class="n">EmailVisibilityChanged</span> <span class="p">-&gt;</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">emit</span><span class="p">(</span><span class="n">currentState</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="n">isEmailVisible</span> <span class="p">=</span> <span class="n">refreshParams</span><span class="p">.</span><span class="n">isEmailVisible</span><span class="p">))</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">ViewState</span><span class="p">.</span><span class="n">StateTriggers</span><span class="p">.</span><span class="n">Refresh</span> <span class="p">-&gt;</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">emit</span><span class="p">(</span><span class="n">ViewState</span><span class="p">(</span><span class="n">isLoading</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span> <span class="n">isError</span> <span class="p">=</span> <span class="k">false</span><span class="p">))</span>
</span><span class='line'>                    <span class="n">emit</span><span class="p">(</span><span class="n">getUserDetailsState</span><span class="p">())</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">getUserDetailsState</span><span class="p">():</span> <span class="n">ViewState</span> <span class="p">=</span> <span class="n">getUserDetailsUseCase</span><span class="p">.</span><span class="n">execute</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">fold</span><span class="p">(</span>
</span><span class='line'>            <span class="n">onSuccess</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">ViewState</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">isLoading</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">isError</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">userInfo</span> <span class="p">=</span> <span class="n">ViewState</span><span class="p">.</span><span class="n">UserInfo</span><span class="p">(</span>
</span><span class='line'>                        <span class="n">displayEmail</span> <span class="p">=</span> <span class="n">it</span><span class="p">.</span><span class="n">email</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">avatarUrl</span> <span class="p">=</span> <span class="n">it</span><span class="p">.</span><span class="n">avatarUrl</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">showPremiumBadge</span> <span class="p">=</span> <span class="n">it</span><span class="p">.</span><span class="n">isPremium</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">memberSince</span> <span class="p">=</span> <span class="n">it</span><span class="p">.</span><span class="n">creationDate</span><span class="o">?.</span><span class="n">toString</span><span class="p">()</span>
</span><span class='line'>                    <span class="p">)</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">onFailure</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">ViewState</span><span class="p">(</span><span class="n">isLoading</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span> <span class="n">isError</span> <span class="p">=</span> <span class="k">true</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onIntent</span><span class="p">(</span><span class="n">intent</span><span class="p">:</span> <span class="n">ViewState</span><span class="p">.</span><span class="n">Intents</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">when</span> <span class="p">(</span><span class="n">intent</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">ViewState</span><span class="p">.</span><span class="n">Intents</span><span class="p">.</span><span class="n">Refresh</span> <span class="p">-&gt;</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">viewModelScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">refreshListener</span><span class="p">.</span><span class="n">emit</span><span class="p">(</span><span class="n">ViewState</span><span class="p">.</span><span class="n">StateTriggers</span><span class="p">.</span><span class="n">Refresh</span><span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">is</span> <span class="n">ViewState</span><span class="p">.</span><span class="n">Intents</span><span class="p">.</span><span class="n">ToggleEmailVisibility</span> <span class="p">-&gt;</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">viewModelScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">refreshListener</span><span class="p">.</span><span class="n">emit</span><span class="p">(</span><span class="n">ViewState</span><span class="p">.</span><span class="n">StateTriggers</span><span class="p">.</span><span class="n">EmailVisibilityChanged</span><span class="p">(</span><span class="n">intent</span><span class="p">.</span><span class="n">isEmailVisible</span><span class="p">))</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">companion</span> <span class="k">object</span> <span class="err">{</span>
</span><span class='line'>        <span class="k">fun</span> <span class="nf">factory</span><span class="p">()</span> <span class="p">=</span> <span class="n">provideFactory</span> <span class="p">{</span> <span class="n">UserAccountDetailsViewModel</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们可以通过创建更复杂的基类来消除重复的 <code>refreshListener</code> 声明：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">abstract</span> <span class="k">class</span> <span class="nc">ViewModelLoader</span><span class="p">&lt;</span><span class="n">State</span> <span class="p">:</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Intent</span> <span class="p">:</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Trigger</span> <span class="p">:</span> <span class="n">Any</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">ViewModel</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">_trigger</span> <span class="k">by</span> <span class="n">lazy</span> <span class="p">{</span> <span class="n">MutableSharedFlow</span><span class="p">&lt;</span><span class="n">Trigger</span><span class="p">&gt;()</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="err">&lt;</span><span class="nf">T</span><span class="p">&gt;</span> <span class="n">loadData</span><span class="p">(</span>
</span><span class='line'>        <span class="n">initialState</span><span class="p">:</span> <span class="n">T</span><span class="p">,</span>
</span><span class='line'>        <span class="n">loadData</span><span class="p">:</span> <span class="n">suspend</span> <span class="n">FlowCollector</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;.(</span><span class="n">currentState</span><span class="p">:</span> <span class="n">T</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span>
</span><span class='line'>        <span class="n">triggerData</span><span class="p">:</span> <span class="p">(</span><span class="n">suspend</span> <span class="n">FlowCollector</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;.(</span><span class="n">currentState</span><span class="p">:</span> <span class="n">T</span><span class="p">,</span> <span class="n">triggerParams</span><span class="p">:</span> <span class="n">Trigger</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">)?</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>        <span class="n">timeout</span><span class="p">:</span> <span class="n">Long</span> <span class="p">=</span> <span class="m">5000L</span><span class="p">,</span> <span class="c1">//matching ANR timeout in Android</span>
</span><span class='line'>    <span class="p">):</span> <span class="n">StateFlow</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">var</span> <span class="py">latestValue</span> <span class="p">=</span> <span class="n">initialState</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">flow</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">emit</span><span class="p">(</span><span class="n">latestValue</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">loadData</span><span class="p">(</span><span class="n">latestValue</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">triggerData</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">_trigger</span><span class="p">.</span><span class="n">collect</span> <span class="p">{</span> <span class="n">triggerParams</span> <span class="p">-&gt;</span>
</span><span class='line'>                    <span class="n">triggerData</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">latestValue</span><span class="p">,</span> <span class="n">triggerParams</span><span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>            <span class="p">.</span><span class="n">distinctUntilChanged</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">onEach</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">latestValue</span> <span class="p">=</span> <span class="n">it</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="p">.</span><span class="n">stateIn</span><span class="p">(</span>
</span><span class='line'>                <span class="n">scope</span> <span class="p">=</span> <span class="n">viewModelScope</span><span class="p">,</span>
</span><span class='line'>                <span class="n">started</span> <span class="p">=</span> <span class="n">SharingStarted</span><span class="p">.</span><span class="n">WhileSubscribed</span><span class="p">(</span><span class="n">timeout</span><span class="p">),</span>
</span><span class='line'>                <span class="n">initialValue</span> <span class="p">=</span> <span class="n">initialState</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">abstract</span> <span class="k">val</span> <span class="py">state</span><span class="p">:</span> <span class="n">StateFlow</span><span class="p">&lt;</span><span class="n">State</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">currentState</span> <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="n">state</span><span class="p">.</span><span class="n">value</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">open</span> <span class="k">fun</span> <span class="nf">onIntent</span><span class="p">(</span><span class="n">intent</span><span class="p">:</span> <span class="n">Intent</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="k">fun</span> <span class="nf">sendTrigger</span><span class="p">(</span><span class="n">trigger</span><span class="p">:</span> <span class="n">Trigger</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">viewModelScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">_trigger</span><span class="p">.</span><span class="n">emit</span><span class="p">(</span><span class="n">trigger</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们的最终实现将变得非常简洁且易于维护：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">internal</span> <span class="k">class</span> <span class="nc">UserAccountDetailsViewModel</span> <span class="k">private</span> <span class="n">constructor</span><span class="p">(</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">getUserDetailsUseCase</span><span class="p">:</span> <span class="n">GetUserDetailsUseCase</span> <span class="p">=</span> <span class="n">GetUserDetailsUseCase</span><span class="p">.</span><span class="n">create</span><span class="p">(),</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">ViewModelLoader</span><span class="p">&lt;</span><span class="n">UserAccountDetailsViewModel</span><span class="p">.</span><span class="n">ViewState</span><span class="p">,</span> <span class="n">UserAccountDetailsViewModel</span><span class="p">.</span><span class="n">ViewState</span><span class="p">.</span><span class="n">Intents</span><span class="p">,</span> <span class="n">UserAccountDetailsViewModel</span><span class="p">.</span><span class="n">ViewState</span><span class="p">.</span><span class="n">StateTriggers</span><span class="p">&gt;()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">ViewState</span><span class="p">(</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">isLoading</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">isError</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">isEmailVisible</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">userInfo</span><span class="p">:</span> <span class="n">UserInfo</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">isDataLoaded</span> <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="n">userInfo</span> <span class="p">!=</span> <span class="k">null</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">data</span> <span class="k">class</span> <span class="nc">UserInfo</span><span class="p">(</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">displayEmail</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">avatarUrl</span><span class="p">:</span> <span class="n">String</span><span class="p">?,</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">showPremiumBadge</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">,</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">memberSince</span><span class="p">:</span> <span class="n">String</span><span class="p">?</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">sealed</span> <span class="k">class</span> <span class="nc">Intents</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">data</span> <span class="k">object</span> <span class="nc">Refresh</span> <span class="p">:</span> <span class="n">Intents</span><span class="p">()</span>
</span><span class='line'>            <span class="n">data</span> <span class="k">class</span> <span class="nc">ToggleEmailVisibility</span><span class="p">(</span><span class="k">val</span> <span class="py">isEmailVisible</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">)</span> <span class="p">:</span> <span class="n">Intents</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">sealed</span> <span class="k">class</span> <span class="nc">StateTriggers</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">data</span> <span class="k">class</span> <span class="nc">EmailVisibilityChanged</span><span class="p">(</span><span class="k">val</span> <span class="py">isEmailVisible</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">)</span> <span class="p">:</span> <span class="n">StateTriggers</span><span class="p">()</span>
</span><span class='line'>            <span class="n">data</span> <span class="k">object</span> <span class="nc">Refresh</span> <span class="p">:</span> <span class="n">StateTriggers</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">val</span> <span class="py">state</span> <span class="p">=</span> <span class="n">loadData</span><span class="p">(</span>
</span><span class='line'>        <span class="n">initialState</span> <span class="p">=</span> <span class="n">ViewState</span><span class="p">(</span><span class="n">isLoading</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span> <span class="n">isError</span> <span class="p">=</span> <span class="k">false</span><span class="p">),</span>
</span><span class='line'>        <span class="n">loadData</span> <span class="p">=</span> <span class="p">{</span> <span class="n">currentState</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">currentState</span><span class="p">.</span><span class="n">isDataLoaded</span><span class="p">.</span><span class="n">not</span><span class="p">()</span> <span class="p">||</span> <span class="n">currentState</span><span class="p">.</span><span class="n">isError</span><span class="p">.</span><span class="n">not</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">emit</span><span class="p">(</span><span class="n">getUserDetailsState</span><span class="p">())</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">triggerData</span> <span class="p">=</span> <span class="p">{</span> <span class="n">currentState</span><span class="p">,</span> <span class="n">refreshParams</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="k">when</span> <span class="p">(</span><span class="n">refreshParams</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">is</span> <span class="n">ViewState</span><span class="p">.</span><span class="n">StateTriggers</span><span class="p">.</span><span class="n">EmailVisibilityChanged</span> <span class="p">-&gt;</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">emit</span><span class="p">(</span><span class="n">currentState</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="n">isEmailVisible</span> <span class="p">=</span> <span class="n">refreshParams</span><span class="p">.</span><span class="n">isEmailVisible</span><span class="p">))</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">ViewState</span><span class="p">.</span><span class="n">StateTriggers</span><span class="p">.</span><span class="n">Refresh</span> <span class="p">-&gt;</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">emit</span><span class="p">(</span><span class="n">ViewState</span><span class="p">(</span><span class="n">isLoading</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span> <span class="n">isError</span> <span class="p">=</span> <span class="k">false</span><span class="p">))</span>
</span><span class='line'>                    <span class="n">emit</span><span class="p">(</span><span class="n">getUserDetailsState</span><span class="p">())</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">getUserDetailsState</span><span class="p">():</span> <span class="n">ViewState</span> <span class="p">=</span> <span class="n">getUserDetailsUseCase</span><span class="p">.</span><span class="n">execute</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">.</span><span class="n">fold</span><span class="p">(</span>
</span><span class='line'>            <span class="n">onSuccess</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">ViewState</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">isLoading</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">isError</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">userInfo</span> <span class="p">=</span> <span class="n">ViewState</span><span class="p">.</span><span class="n">UserInfo</span><span class="p">(</span>
</span><span class='line'>                        <span class="n">displayEmail</span> <span class="p">=</span> <span class="n">it</span><span class="p">.</span><span class="n">email</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">avatarUrl</span> <span class="p">=</span> <span class="n">it</span><span class="p">.</span><span class="n">avatarUrl</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">showPremiumBadge</span> <span class="p">=</span> <span class="n">it</span><span class="p">.</span><span class="n">isPremium</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">memberSince</span> <span class="p">=</span> <span class="n">it</span><span class="p">.</span><span class="n">creationDate</span><span class="o">?.</span><span class="n">toString</span><span class="p">()</span>
</span><span class='line'>                    <span class="p">)</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">onFailure</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">ViewState</span><span class="p">(</span><span class="n">isLoading</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span> <span class="n">isError</span> <span class="p">=</span> <span class="k">true</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onIntent</span><span class="p">(</span><span class="n">intent</span><span class="p">:</span> <span class="n">ViewState</span><span class="p">.</span><span class="n">Intents</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">when</span> <span class="p">(</span><span class="n">intent</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">ViewState</span><span class="p">.</span><span class="n">Intents</span><span class="p">.</span><span class="n">Refresh</span> <span class="p">-&gt;</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">sendTrigger</span><span class="p">(</span><span class="n">ViewState</span><span class="p">.</span><span class="n">StateTriggers</span><span class="p">.</span><span class="n">Refresh</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">is</span> <span class="n">ViewState</span><span class="p">.</span><span class="n">Intents</span><span class="p">.</span><span class="n">ToggleEmailVisibility</span> <span class="p">-&gt;</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">sendTrigger</span><span class="p">(</span><span class="n">ViewState</span><span class="p">.</span><span class="n">StateTriggers</span><span class="p">.</span><span class="n">EmailVisibilityChanged</span><span class="p">(</span><span class="n">intent</span><span class="p">.</span><span class="n">isEmailVisible</span><span class="p">))</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">companion</span> <span class="k">object</span> <span class="err">{</span>
</span><span class='line'>        <span class="k">fun</span> <span class="nf">factory</span><span class="p">()</span> <span class="p">=</span> <span class="n">provideFactory</span> <span class="p">{</span> <span class="n">UserAccountDetailsViewModel</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>处理 UI 状态复杂性</h3>

<p>此抽象使用布尔标志（<code>isLoading</code>、<code>isError</code>），这些标志可能会创建模糊状态。为了更清晰地管理状态，可以考虑使用密封类：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">@Immutable</span>
</span><span class='line'><span class="n">sealed</span> <span class="n">interface</span> <span class="n">UIState</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">@Immutable</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">object</span> <span class="nc">Success</span> <span class="p">:</span> <span class="n">UIState</span>
</span><span class='line'>    <span class="n">@Immutable</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">object</span> <span class="nc">Error</span> <span class="p">:</span> <span class="n">UIState</span>
</span><span class='line'>    <span class="n">@Immutable</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">object</span> <span class="nc">Idle</span> <span class="p">:</span> <span class="n">UIState</span>
</span><span class='line'>    <span class="n">@Immutable</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">object</span> <span class="nc">Loading</span> <span class="p">:</span> <span class="n">UIState</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于需要同时显示错误信息（例如 Snackbars）和现有数据的场景，你可以创建更复杂的状态持有者：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">@Immutable</span>
</span><span class='line'><span class="n">data</span> <span class="k">class</span> <span class="nc">UIStateHolder</span><span class="p">&lt;</span><span class="k">out</span> <span class="n">T</span><span class="p">&gt;(</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">uiState</span><span class="p">:</span> <span class="n">UIState</span> <span class="p">=</span> <span class="n">UIState</span><span class="p">.</span><span class="n">Idle</span><span class="p">,</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">payload</span><span class="p">:</span> <span class="n">T</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种方法可以实现灵活的 UI 状态管理，同时保持 UI 状态和数据负载之间的明确分离，但可能会增加认知负荷，并引入更多的映射行为和解包逻辑。</p>

<h3>超越 ViewModel</h3>

<p>此模式不仅限于 ViewModel。通过提供自定义协程作用域，你可以在任何组件（可组合组件、存储库或业务逻辑层）中使用此数据加载方法。</p>

<h2>流组合模式</h2>

<p>这种方法的优点还在于可以组合多个数据源。以下是处理单流和双流的示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">inline</span> <span class="k">fun</span> <span class="err">&lt;</span><span class="nf">reified</span> <span class="n">T</span><span class="p">,</span> <span class="n">R</span><span class="p">&gt;</span> <span class="n">ViewModel</span><span class="p">.</span><span class="n">loadFlow</span><span class="p">(</span>
</span><span class='line'>    <span class="n">initialState</span><span class="p">:</span> <span class="n">R</span><span class="p">,</span>
</span><span class='line'>    <span class="n">flow</span><span class="p">:</span> <span class="n">Flow</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;,</span>
</span><span class='line'>    <span class="n">crossinline</span> <span class="n">transform</span><span class="p">:</span> <span class="n">suspend</span> <span class="n">CoroutineScope</span><span class="p">.(</span><span class="n">newValue</span><span class="p">:</span> <span class="n">T</span><span class="p">,</span> <span class="n">currentState</span><span class="p">:</span> <span class="n">R</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">R</span><span class="p">,</span>
</span><span class='line'>    <span class="n">timeout</span><span class="p">:</span> <span class="n">Long</span> <span class="p">=</span> <span class="m">0</span><span class="p">,</span>
</span><span class='line'><span class="p">):</span> <span class="n">StateFlow</span><span class="p">&lt;</span><span class="n">R</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="py">latestValue</span> <span class="p">=</span> <span class="n">initialState</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">flow</span>
</span><span class='line'>        <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">newValue</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="n">coroutineScope</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">transform</span><span class="p">(</span><span class="n">newValue</span><span class="p">,</span> <span class="n">latestValue</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">.</span><span class="n">onEach</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">latestValue</span> <span class="p">=</span> <span class="n">it</span>
</span><span class='line'>        <span class="p">}.</span><span class="n">stateIn</span><span class="p">(</span>
</span><span class='line'>            <span class="n">scope</span> <span class="p">=</span> <span class="n">viewModelScope</span><span class="p">,</span>
</span><span class='line'>            <span class="n">started</span> <span class="p">=</span> <span class="n">SharingStarted</span><span class="p">.</span><span class="n">WhileSubscribed</span><span class="p">(</span><span class="n">timeout</span><span class="p">),</span>
</span><span class='line'>            <span class="n">initialValue</span> <span class="p">=</span> <span class="n">latestValue</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>组合双流的示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">inline</span> <span class="k">fun</span> <span class="err">&lt;</span><span class="nf">reified</span> <span class="n">T1</span><span class="p">,</span> <span class="k">reified</span> <span class="n">T2</span><span class="p">,</span> <span class="n">R</span><span class="p">&gt;</span> <span class="n">ViewModel</span><span class="p">.</span><span class="n">loadFlow</span><span class="p">(</span>
</span><span class='line'>    <span class="n">initialState</span><span class="p">:</span> <span class="n">R</span><span class="p">,</span>
</span><span class='line'>    <span class="n">flow1</span><span class="p">:</span> <span class="n">Flow</span><span class="p">&lt;</span><span class="n">T1</span><span class="p">&gt;,</span>
</span><span class='line'>    <span class="n">flow2</span><span class="p">:</span> <span class="n">Flow</span><span class="p">&lt;</span><span class="n">T2</span><span class="p">&gt;,</span>
</span><span class='line'>    <span class="n">crossinline</span> <span class="n">transform</span><span class="p">:</span> <span class="n">suspend</span> <span class="n">CoroutineScope</span><span class="p">.(</span><span class="n">newValue1</span><span class="p">:</span> <span class="n">T1</span><span class="p">,</span> <span class="n">newValue2</span><span class="p">:</span> <span class="n">T2</span><span class="p">,</span> <span class="n">currentState</span><span class="p">:</span> <span class="n">R</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">R</span><span class="p">,</span>
</span><span class='line'>    <span class="n">timeout</span><span class="p">:</span> <span class="n">Long</span> <span class="p">=</span> <span class="m">0</span><span class="p">,</span>
</span><span class='line'><span class="p">):</span> <span class="n">StateFlow</span><span class="p">&lt;</span><span class="n">R</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="py">latestValue</span> <span class="p">=</span> <span class="n">initialState</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">combine</span><span class="p">(</span><span class="n">flow1</span><span class="p">,</span> <span class="n">flow2</span><span class="p">)</span> <span class="p">{</span> <span class="n">value1</span><span class="p">,</span> <span class="n">value2</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="n">coroutineScope</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">transform</span><span class="p">(</span><span class="n">value1</span><span class="p">,</span> <span class="n">value2</span><span class="p">,</span> <span class="n">latestValue</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>        <span class="p">.</span><span class="n">onEach</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">latestValue</span> <span class="p">=</span> <span class="n">it</span>
</span><span class='line'>        <span class="p">}.</span><span class="n">stateIn</span><span class="p">(</span>
</span><span class='line'>            <span class="n">scope</span> <span class="p">=</span> <span class="n">viewModelScope</span><span class="p">,</span>
</span><span class='line'>            <span class="n">started</span> <span class="p">=</span> <span class="n">SharingStarted</span><span class="p">.</span><span class="n">WhileSubscribed</span><span class="p">(</span><span class="n">timeout</span><span class="p">),</span>
</span><span class='line'>            <span class="n">initialValue</span> <span class="p">=</span> <span class="n">latestValue</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这些扩展允许你轻松组合多个数据源，同时保持相同的智能缓存和状态管理原则。</p>

<h3>测试基于流的 ViewModel</h3>

<p>在结束之前，让我们探索如何使用 fakes 和 Turbine 进行流测试，正确地测试我们的 <code>UserAccountDetailsViewModel</code> 实现。</p>

<h4>使用 Fakes 和 Turbine 设置测试依赖项</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">@OptIn</span><span class="p">(</span><span class="n">ExperimentalCoroutinesApi</span><span class="o">::</span><span class="k">class</span><span class="p">)</span>
</span><span class='line'><span class="k">class</span> <span class="nc">UserAccountDetailsViewModelTest</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">testDispatcher</span> <span class="p">=</span> <span class="n">StandardTestDispatcher</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">fakeGetUserDetailsUseCase</span> <span class="p">=</span> <span class="n">FakeGetUserDetailsUseCase</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="n">lateinit</span> <span class="k">var</span> <span class="py">viewModel</span><span class="p">:</span> <span class="n">UserAccountDetailsViewModel</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">@Before</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">setUp</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Dispatchers</span><span class="p">.</span><span class="n">setMain</span><span class="p">(</span><span class="n">testDispatcher</span><span class="p">)</span>
</span><span class='line'>        <span class="n">viewModel</span> <span class="p">=</span> <span class="n">UserAccountDetailsViewModel</span><span class="p">(</span><span class="n">fakeGetUserDetailsUseCase</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">@After</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">tearDown</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Dispatchers</span><span class="p">.</span><span class="n">resetMain</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Fake implementation for realistic testing, this sounds funny to write haha</span>
</span><span class='line'><span class="k">class</span> <span class="nc">FakeGetUserDetailsUseCase</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">var</span> <span class="py">shouldReturnError</span> <span class="p">=</span> <span class="k">false</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">var</span> <span class="py">userDetailsToReturn</span><span class="p">:</span> <span class="n">UserDetails</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">var</span> <span class="py">executionCount</span> <span class="p">=</span> <span class="m">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">setSuccessResponse</span><span class="p">(</span><span class="n">userDetails</span><span class="p">:</span> <span class="n">UserDetails</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">userDetailsToReturn</span> <span class="p">=</span> <span class="n">userDetails</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">shouldReturnError</span> <span class="p">=</span> <span class="k">false</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">setErrorResponse</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">shouldReturnError</span> <span class="p">=</span> <span class="k">true</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">userDetailsToReturn</span> <span class="p">=</span> <span class="k">null</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Expose execution count when testing caching/performance behavior</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">getExecutionCount</span><span class="p">()</span> <span class="p">=</span> <span class="n">executionCount</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">reset</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">executionCount</span> <span class="p">=</span> <span class="m">0</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">execute</span><span class="p">():</span> <span class="n">Result</span><span class="p">&lt;</span><span class="n">UserDetails</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">executionCount</span><span class="p">++</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">delay</span><span class="p">(</span><span class="m">50</span><span class="p">)</span> <span class="c1">// Simulate network delay</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="k">if</span> <span class="p">(</span><span class="n">shouldReturnError</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Result</span><span class="p">.</span><span class="n">failure</span><span class="p">(</span><span class="n">Exception</span><span class="p">(</span><span class="s">&quot;Network error&quot;</span><span class="p">))</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Result</span><span class="p">.</span><span class="n">success</span><span class="p">(</span><span class="n">userDetailsToReturn</span> <span class="o">?:</span> <span class="n">createDefaultUserDetails</span><span class="p">())</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">fun</span> <span class="nf">createDefaultUserDetails</span><span class="p">()</span> <span class="p">=</span> <span class="n">UserDetails</span><span class="p">(</span>
</span><span class='line'>        <span class="n">email</span> <span class="p">=</span> <span class="s">&quot;default@example.com&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">avatarUrl</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>        <span class="n">isPremium</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'>        <span class="n">creationDate</span> <span class="p">=</span> <span class="s">&quot;2023-01-01&quot;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>成功和失败场景的参数化测试</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">@ParameterizedTest</span>
</span><span class='line'><span class="n">@ValueSource</span><span class="p">(</span><span class="n">booleans</span> <span class="p">=</span> <span class="p">[</span><span class="k">true</span><span class="p">,</span> <span class="k">false</span><span class="p">])</span>
</span><span class='line'><span class="k">fun</span> <span class="err">`</span><span class="nf">should</span> <span class="n">handle</span> <span class="n">both</span> <span class="n">success</span> <span class="n">and</span> <span class="n">error</span> <span class="n">scenarios</span><span class="err">`</span><span class="p">(</span><span class="n">shouldSucceed</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">)</span> <span class="p">=</span> <span class="n">runTest</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Given</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">shouldSucceed</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">fakeGetUserDetailsUseCase</span><span class="p">.</span><span class="n">setSuccessResponse</span><span class="p">(</span>
</span><span class='line'>            <span class="n">UserDetails</span><span class="p">(</span>
</span><span class='line'>                <span class="n">email</span> <span class="p">=</span> <span class="s">&quot;success@example.com&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">avatarUrl</span> <span class="p">=</span> <span class="s">&quot;https://avatar.url&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">isPremium</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span>
</span><span class='line'>                <span class="n">creationDate</span> <span class="p">=</span> <span class="s">&quot;2023-01-01&quot;</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">fakeGetUserDetailsUseCase</span><span class="p">.</span><span class="n">setErrorResponse</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// When</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">viewModel</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">test</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">advanceUntilIdle</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Then Focus on behavior, not implementation details</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">shouldSucceed</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">awaitItem</span><span class="p">()</span> <span class="c1">// Loading state</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">val</span> <span class="py">successState</span> <span class="p">=</span> <span class="n">awaitItem</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">assertThat</span><span class="p">(</span><span class="n">successState</span><span class="p">.</span><span class="n">isLoading</span><span class="p">).</span><span class="n">isFalse</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">assertThat</span><span class="p">(</span><span class="n">successState</span><span class="p">.</span><span class="n">isError</span><span class="p">).</span><span class="n">isFalse</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">assertThat</span><span class="p">(</span><span class="n">successState</span><span class="p">.</span><span class="n">userInfo</span><span class="o">?.</span><span class="n">displayEmail</span><span class="p">).</span><span class="n">isEqualTo</span><span class="p">(</span><span class="s">&quot;success@example.com&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">assertThat</span><span class="p">(</span><span class="n">successState</span><span class="p">.</span><span class="n">userInfo</span><span class="o">?.</span><span class="n">showPremiumBadge</span><span class="p">).</span><span class="n">isTrue</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">awaitItem</span><span class="p">()</span> <span class="c1">// Loading state</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">val</span> <span class="py">errorState</span> <span class="p">=</span> <span class="n">awaitItem</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">assertThat</span><span class="p">(</span><span class="n">errorState</span><span class="p">.</span><span class="n">isLoading</span><span class="p">).</span><span class="n">isFalse</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">assertThat</span><span class="p">(</span><span class="n">errorState</span><span class="p">.</span><span class="n">isError</span><span class="p">).</span><span class="n">isTrue</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">assertThat</span><span class="p">(</span><span class="n">errorState</span><span class="p">.</span><span class="n">userInfo</span><span class="p">).</span><span class="n">isNull</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Test</span>
</span><span class='line'><span class="k">fun</span> <span class="err">`</span><span class="nf">should</span> <span class="n">refresh</span> <span class="n">data</span> <span class="k">when</span> <span class="n">refresh</span> <span class="n">intent</span> <span class="k">is</span> <span class="n">triggered</span><span class="err">`</span><span class="p">()</span> <span class="p">=</span> <span class="n">runTest</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Given Initial successful load</span>
</span><span class='line'>    <span class="n">fakeGetUserDetailsUseCase</span><span class="p">.</span><span class="n">setSuccessResponse</span><span class="p">(</span>
</span><span class='line'>        <span class="n">UserDetails</span><span class="p">(</span>
</span><span class='line'>            <span class="n">email</span> <span class="p">=</span> <span class="s">&quot;initial@example.com&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">avatarUrl</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>            <span class="n">isPremium</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'>            <span class="n">creationDate</span> <span class="p">=</span> <span class="s">&quot;2022-01-01&quot;</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">viewModel</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">test</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">advanceUntilIdle</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">awaitItem</span><span class="p">()</span> <span class="c1">// Loading</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="py">initialState</span> <span class="p">=</span> <span class="n">awaitItem</span><span class="p">()</span> <span class="c1">// Success</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">assertThat</span><span class="p">(</span><span class="n">initialState</span><span class="p">.</span><span class="n">userInfo</span><span class="o">?.</span><span class="n">displayEmail</span><span class="p">).</span><span class="n">isEqualTo</span><span class="p">(</span><span class="s">&quot;initial@example.com&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Change response and trigger refresh</span>
</span><span class='line'>        <span class="n">fakeGetUserDetailsUseCase</span><span class="p">.</span><span class="n">setSuccessResponse</span><span class="p">(</span>
</span><span class='line'>            <span class="n">UserDetails</span><span class="p">(</span>
</span><span class='line'>                <span class="n">email</span> <span class="p">=</span> <span class="s">&quot;refreshed@example.com&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">avatarUrl</span> <span class="p">=</span> <span class="s">&quot;https://new-avatar.url&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">isPremium</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span>
</span><span class='line'>                <span class="n">creationDate</span> <span class="p">=</span> <span class="s">&quot;2023-01-01&quot;</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">viewModel</span><span class="p">.</span><span class="n">onIntent</span><span class="p">(</span><span class="n">ViewState</span><span class="p">.</span><span class="n">Intents</span><span class="p">.</span><span class="n">Refresh</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">advanceUntilIdle</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Then</span>
</span><span class='line'>        <span class="n">awaitItem</span><span class="p">()</span> <span class="c1">// Loading during refresh</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="py">refreshedState</span> <span class="p">=</span> <span class="n">awaitItem</span><span class="p">()</span> <span class="c1">// New Success</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">assertThat</span><span class="p">(</span><span class="n">refreshedState</span><span class="p">.</span><span class="n">isLoading</span><span class="p">).</span><span class="n">isFalse</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">assertThat</span><span class="p">(</span><span class="n">refreshedState</span><span class="p">.</span><span class="n">userInfo</span><span class="o">?.</span><span class="n">displayEmail</span><span class="p">).</span><span class="n">isEqualTo</span><span class="p">(</span><span class="s">&quot;refreshed@example.com&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">assertThat</span><span class="p">(</span><span class="n">refreshedState</span><span class="p">.</span><span class="n">userInfo</span><span class="o">?.</span><span class="n">showPremiumBadge</span><span class="p">).</span><span class="n">isTrue</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Verify both initial load and refresh were called</span>
</span><span class='line'>        <span class="n">assertThat</span><span class="p">(</span><span class="n">fakeGetUserDetailsUseCase</span><span class="p">.</span><span class="n">getExecutionCount</span><span class="p">()).</span><span class="n">isEqualTo</span><span class="p">(</span><span class="m">2</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>测试仅 UI 状态变化</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">@Test</span>
</span><span class='line'><span class="k">fun</span> <span class="err">`</span><span class="nf">should</span> <span class="n">toggle</span> <span class="n">email</span> <span class="n">visibility</span> <span class="n">without</span> <span class="n">triggering</span> <span class="n">data</span> <span class="n">reload</span><span class="err">`</span><span class="p">()</span> <span class="p">=</span> <span class="n">runTest</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Given Successful initial load</span>
</span><span class='line'>    <span class="n">fakeGetUserDetailsUseCase</span><span class="p">.</span><span class="n">setSuccessResponse</span><span class="p">(</span>
</span><span class='line'>        <span class="n">UserDetails</span><span class="p">(</span>
</span><span class='line'>            <span class="n">email</span> <span class="p">=</span> <span class="s">&quot;test@example.com&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">avatarUrl</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>            <span class="n">isPremium</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'>            <span class="n">creationDate</span> <span class="p">=</span> <span class="s">&quot;2023-01-01&quot;</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">viewModel</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">test</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">advanceUntilIdle</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">awaitItem</span><span class="p">()</span> <span class="c1">// Loading</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="py">loadedState</span> <span class="p">=</span> <span class="n">awaitItem</span><span class="p">()</span> <span class="c1">// Success</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">assertThat</span><span class="p">(</span><span class="n">loadedState</span><span class="p">.</span><span class="n">userInfo</span><span class="o">?.</span><span class="n">displayEmail</span><span class="p">).</span><span class="n">isEqualTo</span><span class="p">(</span><span class="s">&quot;test@example.com&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">assertThat</span><span class="p">(</span><span class="n">loadedState</span><span class="p">.</span><span class="n">isEmailVisible</span><span class="p">).</span><span class="n">isFalse</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// When Toggle email visibility</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">viewModel</span><span class="p">.</span><span class="n">onIntent</span><span class="p">(</span><span class="n">ViewState</span><span class="p">.</span><span class="n">Intents</span><span class="p">.</span><span class="n">ToggleEmailVisibility</span><span class="p">(</span><span class="n">isEmailVisible</span> <span class="p">=</span> <span class="k">true</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">advanceUntilIdle</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Then</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">toggledState</span> <span class="p">=</span> <span class="n">awaitItem</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">assertThat</span><span class="p">(</span><span class="n">toggledState</span><span class="p">.</span><span class="n">isEmailVisible</span><span class="p">).</span><span class="n">isTrue</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">assertThat</span><span class="p">(</span><span class="n">toggledState</span><span class="p">.</span><span class="n">userInfo</span><span class="o">?.</span><span class="n">displayEmail</span><span class="p">).</span><span class="n">isEqualTo</span><span class="p">(</span><span class="s">&quot;test@example.com&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">assertThat</span><span class="p">(</span><span class="n">fakeGetUserDetailsUseCase</span><span class="p">.</span><span class="n">getExecutionCount</span><span class="p">()).</span><span class="n">isEqualTo</span><span class="p">(</span><span class="m">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>测试数据缓存行为</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">@Test</span>
</span><span class='line'><span class="k">fun</span> <span class="err">`</span><span class="nf">should</span> <span class="n">use</span> <span class="n">cached</span> <span class="n">data</span> <span class="k">when</span> <span class="n">returning</span> <span class="n">to</span> <span class="n">screen</span> <span class="n">quickly</span><span class="err">`</span><span class="p">()</span> <span class="p">=</span> <span class="n">runTest</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Given</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fakeGetUserDetailsUseCase</span><span class="p">.</span><span class="n">setSuccessResponse</span><span class="p">(</span>
</span><span class='line'>        <span class="n">UserDetails</span><span class="p">(</span>
</span><span class='line'>            <span class="n">email</span> <span class="p">=</span> <span class="s">&quot;cached@example.com&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">avatarUrl</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>            <span class="n">isPremium</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span>
</span><span class='line'>            <span class="n">creationDate</span> <span class="p">=</span> <span class="s">&quot;2023-01-01&quot;</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// When First collection</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">viewModel</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">test</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">advanceUntilIdle</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">awaitItem</span><span class="p">()</span> <span class="c1">// Loading</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="py">firstState</span> <span class="p">=</span> <span class="n">awaitItem</span><span class="p">()</span> <span class="c1">// Success</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">assertThat</span><span class="p">(</span><span class="n">firstState</span><span class="p">.</span><span class="n">userInfo</span><span class="o">?.</span><span class="n">displayEmail</span><span class="p">).</span><span class="n">isEqualTo</span><span class="p">(</span><span class="s">&quot;cached@example.com&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">cancel</span><span class="p">()</span> <span class="c1">// Simulate leaving screen</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// When Quick return (simulating navigation back within timeout)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">viewModel</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">test</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">advanceUntilIdle</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Then Should have cached data immediately (no Loadin)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="py">cachedState</span> <span class="p">=</span> <span class="n">awaitItem</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">assertThat</span><span class="p">(</span><span class="n">cachedState</span><span class="p">.</span><span class="n">isLoading</span><span class="p">).</span><span class="n">isFalse</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">assertThat</span><span class="p">(</span><span class="n">cachedState</span><span class="p">.</span><span class="n">userInfo</span><span class="o">?.</span><span class="n">displayEmail</span><span class="p">).</span><span class="n">isEqualTo</span><span class="p">(</span><span class="s">&quot;cached@example.com&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">expectNoEvents</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">assertThat</span><span class="p">(</span><span class="n">fakeGetUserDetailsUseCase</span><span class="p">.</span><span class="n">getExecutionCount</span><span class="p">()).</span><span class="n">isEqualTo</span><span class="p">(</span><span class="m">1</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>测试错误恢复</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">@Test</span>
</span><span class='line'><span class="k">fun</span> <span class="err">`</span><span class="nf">should</span> <span class="n">recover</span> <span class="n">from</span> <span class="n">Error</span> <span class="n">on</span> <span class="n">successful</span> <span class="n">refresh</span><span class="err">`</span><span class="p">()</span> <span class="p">=</span> <span class="n">runTest</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Given Initial error</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fakeGetUserDetailsUseCase</span><span class="p">.</span><span class="n">setErrorResponse</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">viewModel</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">test</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">advanceUntilIdle</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">awaitItem</span><span class="p">()</span> <span class="c1">// Loading</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="py">errorState</span> <span class="p">=</span> <span class="n">awaitItem</span><span class="p">()</span> <span class="c1">// Error</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">assertThat</span><span class="p">(</span><span class="n">errorState</span><span class="p">.</span><span class="n">isError</span><span class="p">).</span><span class="n">isTrue</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// When Fix the response and refresh</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">fakeGetUserDetailsUseCase</span><span class="p">.</span><span class="n">setSuccessResponse</span><span class="p">(</span>
</span><span class='line'>            <span class="n">UserDetails</span><span class="p">(</span>
</span><span class='line'>                <span class="n">email</span> <span class="p">=</span> <span class="s">&quot;recovered@example.com&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">avatarUrl</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>                <span class="n">isPremium</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'>                <span class="n">creationDate</span> <span class="p">=</span> <span class="s">&quot;2023-01-01&quot;</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">viewModel</span><span class="p">.</span><span class="n">onIntent</span><span class="p">(</span><span class="n">ViewState</span><span class="p">.</span><span class="n">Intents</span><span class="p">.</span><span class="n">Refresh</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">advanceUntilIdle</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Then Should recover successfully</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">awaitItem</span><span class="p">()</span> <span class="c1">// Loading during refresh</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="py">recoveredState</span> <span class="p">=</span> <span class="n">awaitItem</span><span class="p">()</span> <span class="c1">// Success</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">assertThat</span><span class="p">(</span><span class="n">recoveredState</span><span class="p">.</span><span class="n">isError</span><span class="p">).</span><span class="n">isFalse</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">assertThat</span><span class="p">(</span><span class="n">recoveredState</span><span class="p">.</span><span class="n">userInfo</span><span class="o">?.</span><span class="n">displayEmail</span><span class="p">).</span><span class="n">isEqualTo</span><span class="p">(</span><span class="s">&quot;recovered@example.com&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">assertThat</span><span class="p">(</span><span class="n">fakeGetUserDetailsUseCase</span><span class="p">.</span><span class="n">getExecutionCount</span><span class="p">()).</span><span class="n">isEqualTo</span><span class="p">(</span><span class="m">2</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>为什么要测试基于流的 ViewModel 的原则</h3>

<p>哦……这可能会引发一些争论，但这里有一篇很棒的文章，它提供了更好的描述，并且不会影响本文关于我为什么使用 Fakes 的目的。这里有一个简短的总结，可以补充文章顶部</p>

<ol>
<li><strong>使用 Fakes 而非 Mocks</strong>：Fake 提供逼真的行为，并且更易于维护，尤其是在如今 LLM 的帮助下……</li>
<li><strong>参数化测试</strong>：用一个测试用例同时测试成功和失败路径</li>
<li><strong>使用 Turbine 进行流程测试</strong>：简洁、富有表现力的流程测试，并进行适当的状态验证</li>
<li><strong>测试状态转换</strong>：验证完整的状态流程，而不仅仅是最终状态</li>
<li><strong>谨慎执行计数</strong>：仅在测试缓存、性能或重试行为时验证调用计数</li>
<li><strong>关注行为</strong>：测试用户体验，而不是实现细节（我想这一点显而易见）</li>
</ol>


<h3>结论</h3>

<p>本文对 Android ViewModel 中基于流程的数据加载的探索，解决了传统 <code>init {}</code> 块方法的根本挑战。虽然涵盖所有架构变体会很繁琐，但该模式成功处理了大约 90% 的常见用例。</p>

<p>抽象基类方法（<code>ViewModelLoader</code>）提供了最可预测和可维护的解决方案，它提供：</p>

<ul>
<li><strong>可预测的状态管理</strong>：清晰的状态触发器和意图处理</li>
<li><strong>内置测试支持</strong>：具有适当协程处理的可测试架构</li>
<li><strong>灵活性</strong>：易于扩展效果和混合 MVI 模式</li>
<li><strong>缓存和刷新</strong>：缓存和刷新机制（本文将尽可能详细地介绍）</li>
</ul>


<h3>关键要点</h3>

<ol>
<li><strong>基于流的加载</strong>消除了竞争条件，提高了测试的简易性，并解决了 <code>init {}</code> 块中固有的回栈问题</li>
<li><strong>具有适当共享策略的 StateFlow</strong> 提供了最佳的生命周期感知数据管理</li>
<li><strong>抽象层</strong>减少了样板代码，同时保持了灵活性</li>
<li><strong>全面的测试</strong>确保所有用例的可靠性</li>
</ol>


<p>请记住，这只是众多架构方法中的一种，它解决了我的问题，但可能无法解决你的问题。我们的目标是了解潜在问题并评估此解决方案是否符合你的特定需求。随着时间的推移，这个解决方案将经历许多变化，甚至可能被淘汰。最近，我更多地投入到使用 Ktor 进行后端开发，这本身就是一次很棒的体验。</p>

<p>该架构成功地为 iOS 和 Android 平台上的 <a href="https://wallhub.app/">WallHub</a> 提供了支持，证明了其在现实世界中的“可行性”以及跨平台适应性（如果可以这么说的话）。</p>

<p>继续潜水，直到下一篇文章……</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android应用的架构演进]]></title>
    <link href="https://alexhilton.github.io/blog/2025/09/13/architectual-evolution-of-an-android-app/"/>
    <updated>2025-09-13T20:34:01+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/09/13/architectual-evolution-of-an-android-app</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自「Architectural Evolution of and Android app」，原文链接<a href="https://herrbert74.github.io/posts/architectural-evolution-of-an-app/">https://herrbert74.github.io/posts/architectural-evolution-of-an-app/</a>，由Zsolt Bertalan发布于20258月19日。</p></blockquote>

<p><a href="https://alexhilton.github.io/blog/2025/09/13/architectual-evolution-of-an-android-app/"><img src="https://herrbert74.github.io/assets/img/posts/20250818_arch_evolution.jpg" title="auto auto" ></a></p>

<!-- more -->


<p>本文将解释 Android 应用在发展过程中可能经历的各个阶段。不同的架构可能看起来截然不同（更不用说对细节的不同看法），但其背后的理念是相同的。我将通过整洁架构 (Clean Architecture) 和我的 <a href="https://github.com/herrbert74/FlickSlate">FlickSlate</a> 代码库（链接：<a href="https://github.com/herrbert74/FlickSlate%EF%BC%89%E6%9D%A5%E8%A7%A3%E9%87%8A%E8%BF%99%E4%B8%80%E7%82%B9%E3%80%82">https://github.com/herrbert74/FlickSlate%EF%BC%89%E6%9D%A5%E8%A7%A3%E9%87%8A%E8%BF%99%E4%B8%80%E7%82%B9%E3%80%82</a></p>

<p>我还想介绍一下大型应用中的常见模式：<strong>超级层</strong> 和 <strong>功能组</strong>。每当我开发的应用达到一定规模时，都会用到这些模式，但我从未制定过相关的基本规则。我希望把它们写下来，能让我和其他人更容易理解。</p>

<h3>超级层</h3>

<p>你可能还记得我之前的文章，我的应用有一个独立的<strong>领域层</strong>，<strong>数据层和展现层（从现在开始是UI层）</strong>都依赖于它。这些是基本的水平层。包含它们的垂直层也称为功能层。</p>

<p>我创造了 <strong>“超级层”</strong> 这个术语，是为了在基本水平层之上引入一个更广泛的层次结构。我们需要它们，因为水平层的范围可能有所不同，这意味着它们不仅可以涵盖功能层，还可以涵盖更广泛的范围。我将定义<strong>功能层</strong>、<strong>功能组</strong>、<strong>应用级（共享）</strong>和<strong>多应用级（基础）</strong> 超级层。</p>

<p>请参阅下图。</p>

<p><img src="file:///Users/alexhilton/Downloads/arch-envolve-1.png" alt="" /></p>

<p>在我上面解释的基本情况下，我们有<strong>功能层</strong>，其中整洁架构层仅在功能层内部可见。</p>

<p>接下来，<strong>功能组</strong>层是介于应用范围层和功能范围层之间的中间层。由于它是对超级层的最后且最不明显的补充，我将在稍后详细讨论。</p>

<p><strong>共享、通用或应用范围层</strong>通常包含与业务相关或整个应用独有的类。这是可以添加领域、数据和 UI 模块的最低层。</p>

<p><strong>基础层、基础设施层或基础结构层</strong>可以跨多个应用使用。它不包含领域、数据或 UI 层，但包含这些层之间通用的类。我通常有一个<strong>Kotlin 模块和一个 Android 基础模块</strong>。我创建了 <a href="https://bitbucket.org/babestudios/babestudiosbase/src/master/">BaBeStudios-Base</a> 库项目（<a href="https://bitbucket.org/babestudios/babestudiosbase/src/master/%EF%BC%89%EF%BC%8C%E4%BB%A5%E4%BE%BF%E5%9C%A8%E5%A4%9A%E4%B8%AA%E5%BA%94%E7%94%A8%E4%B8%AD%E5%A4%8D%E7%94%A8%E8%BF%99%E4%BA%9B%E6%A8%A1%E5%9D%97%EF%BC%8C%E4%BD%86%E6%88%91%E7%9A%84%E5%BA%94%E7%94%A8%E4%B8%AD%E4%B9%9F%E6%9C%89%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80%E6%A8%A1%E5%9D%97%EF%BC%8C%E7%94%A8%E4%BA%8E%E5%B0%9A%E6%9C%AA%E5%8C%85%E5%90%AB%E5%9C%A8%E8%AF%A5%E5%BA%93%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E4%BB%A3%E7%A0%81%E3%80%82">https://bitbucket.org/babestudios/babestudiosbase/src/master/%EF%BC%89%EF%BC%8C%E4%BB%A5%E4%BE%BF%E5%9C%A8%E5%A4%9A%E4%B8%AA%E5%BA%94%E7%94%A8%E4%B8%AD%E5%A4%8D%E7%94%A8%E8%BF%99%E4%BA%9B%E6%A8%A1%E5%9D%97%EF%BC%8C%E4%BD%86%E6%88%91%E7%9A%84%E5%BA%94%E7%94%A8%E4%B8%AD%E4%B9%9F%E6%9C%89%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80%E6%A8%A1%E5%9D%97%EF%BC%8C%E7%94%A8%E4%BA%8E%E5%B0%9A%E6%9C%AA%E5%8C%85%E5%90%AB%E5%9C%A8%E8%AF%A5%E5%BA%93%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E4%BB%A3%E7%A0%81%E3%80%82</a> BaBeStudios-Base 也可从 <a href="https://mvnrepository.com/artifact/io.bitbucket.babestudios">MavenCentral</a> 获取，但目前尚无相关文档。</p>

<p>随着应用程序规模的扩大和模块的引入，你需要引入上述各层。</p>

<p>接下来，让我们看看随着应用程序规模的扩大，我通常采取的模块化步骤。</p>

<h3>步骤 1：单模块</h3>

<p>当你确定应用程序规模不会超过<strong>最大规模</strong>，或者时间紧迫时，你可以选择单模块应用程序或单体应用。我不确定单模块应用程序的最大规模是多少。这可能因人而异。</p>

<p>此最大规模也不同于<strong>阈值规模，你应该从该阈值开始模块化应用程序</strong>，或者更通俗地说，你应该从该阈值切换到流程的下一步。我认为阈值大小远小于单模块应用程序的最大大小，这意味着你应该在达到该限制之前就开始模块化。</p>

<p>对于大多数应用程序，我甚至建议<strong>从模块化开始</strong>，而不是从单个模块开始，因为与接近限制（比如 10 或 20 kLOC）时才开始模块化相比，这样做的开销和干扰程度要小得多。</p>

<p>这是一个单模块应用程序的包树示例。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>├── data
</span><span class='line'>│   ├── database
</span><span class='line'>│   ├── <span class="nb">local</span>
</span><span class='line'>│   ├── repository
</span><span class='line'>│   └── remote
</span><span class='line'>├── domain
</span><span class='line'>│   ├── api
</span><span class='line'>│   ├── model
</span><span class='line'>│   └── usecase
</span><span class='line'>├── presentation
</span><span class='line'>│   ├── master
</span><span class='line'>│   └── detail
</span><span class='line'>└── shared
</span></code></pre></td></tr></table></div></figure>


<p>上面图中的叶子节点代表包，它们可以包含此处未显示的其他包。下面我将展示一个类似的模块结构，其中以冒号开头的名称代表模块，双冒号代表根模块。</p>

<h3>步骤 2：简单模块化</h3>

<p>对于<strong>小型应用程序</strong>，我使用简单模块化，而不是下一章的完全模块化。这里我们只介绍<strong>每个功能的模块</strong>。每个功能将包含一个领域模块，以及依赖于领域模块的数据和呈现模块（在我的例子中）。</p>

<p>我们还引入了一个<strong>共享模块</strong>，其中包含所有功能模块的通用代码。</p>

<p>应用程序的超层由一条<strong>水平线</strong>分隔。每个层都依赖于其下方的所有层。数据和呈现依赖于领域模块，但这并未在图中显示。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>::feature:Feature A
</span><span class='line'>
</span><span class='line'>├── :feature/:featurea/:data
</span><span class='line'>├── :feature/:featurea/:domain
</span><span class='line'>└── :feature/:featurea/:presentation
</span><span class='line'>
</span><span class='line'>::feature:Feature B
</span><span class='line'>
</span><span class='line'>├── :feature/:featureb/:data
</span><span class='line'>├── :feature/:featureb/:domain
</span><span class='line'>└── :feature/:featureb/:presentation
</span><span class='line'>
</span><span class='line'> ::feature:Feature C
</span><span class='line'>
</span><span class='line'>├── :feature/:featurec/:data
</span><span class='line'>├── :feature/:featurec/:domain
</span><span class='line'>└── :feature/:featurec/:presentation
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>::shared:data
</span><span class='line'>
</span><span class='line'>├── database
</span><span class='line'>├── <span class="nb">local</span>
</span><span class='line'>├── repository
</span><span class='line'>└── remote
</span><span class='line'>
</span><span class='line'>::shared:domain
</span><span class='line'>
</span><span class='line'>├── api
</span><span class='line'>├── model
</span><span class='line'>└── usecase
</span><span class='line'>
</span><span class='line'>::shared:presentation
</span><span class='line'>
</span><span class='line'>├── compose
</span><span class='line'>├── design
</span><span class='line'>└── util
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>::base:kotlin
</span></code></pre></td></tr></table></div></figure>


<h3>步骤 4：功能组</h3>

<p>当你的应用完全模块化后，共享层会逐渐成为单体应用，并成为构建过程中的<strong>瓶颈</strong>。</p>

<p>我经常在超过一定规模的应用（大约 50 到 80 kLOC）时遇到这种情况。你需要共享太多内容，因此你的<strong>共享领域模块和展示模块</strong>变得过大。你开始注意到，在所有垂直模块之间共享代码也是一种浪费，因为你只想在两个或最多三个或四个模块之间共享代码。你会发现越来越多的新代码被添加到这些模块中，而<strong>增量缓存</strong>的效率越来越低，因为你频繁地修改代码，导致它们失效。</p>

<p>你可能会说，可以通过适当地重构和构建应用程序，或者复制一些代码来避免这种情况，但这可能比你想象的要难。我发现这些建议并没有起到什么帮助作用。或者你可能手头有一个遗留应用，没有时间完美地重构所有内容。</p>

<p>我目前解决这个问题的方法是识别<strong>功能组</strong>，即一组具有大量公共依赖项的功能。这样，你就可以通过创建<strong>更具凝聚力</strong>的模块，水平拆分共享层中的部分代码。</p>

<p>我最近开发的所有大型应用中都有两个不同的功能组。</p>

<p>第一个功能组与<strong>核心业务</strong>功能相关：例如，一个模块围绕产品列表，另一个模块围绕产品详情，第三个模块围绕收藏产品。因此，我们可以将这个功能组命名为<strong>产品</strong>。另一个功能组围绕<strong>支付、广告或订阅</strong>，或者有时是这些功能的组合。这关系到应用的盈利方式。因此，我们可以将功能组命名为<strong>“支付”</strong>。</p>

<p>大型应用中可能会有五个或更多功能组。每个功能组将包含领域模块、数据模块和演示模块（如果需要）。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>feature/Feature A
</span><span class='line'>
</span><span class='line'>feature/Feature B
</span><span class='line'>
</span><span class='line'>feature/Feature C
</span><span class='line'>
</span><span class='line'>feature/Feature D
</span><span class='line'>
</span><span class='line'>feature/Feature E
</span><span class='line'>
</span><span class='line'>feature/Feature F
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>:data
</span><span class='line'>
</span><span class='line'>:domain
</span><span class='line'>
</span><span class='line'>:presentation
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>:kotlin-base
</span></code></pre></td></tr></table></div></figure>


<h3>何时使用哪一步？</h3>

<p>你肯定希望将单体应用用于永远不会投入生产或一次性使用的应用程序。这些应用程序可以是<strong>概念验证</strong> (PoC, Proof of Concept) 应用程序、用于第三方错误的<strong>最小可复现示例</strong> (MRE, Minimum Reproducible Example) 应用程序，或用于求职申请的<strong>测试挑战</strong>应用程序。</p>

<p>对于所有其他情况，我建议先从部分或完全模块化开始，然后根据需要升级到下一步，或者尽可能提前升级，以减少以后的麻烦。</p>

<p>你可以在我的 <a href="https://github.com/herrbert74/FlickSlate">FlickSlate</a> 代码库（链接：<a href="https://github.com/herrbert74/FlickSlate%EF%BC%89%E4%B8%AD%E6%89%BE%E5%88%B0%E4%B8%8A%E8%BF%B0%EF%BC%88%E5%A4%A7%E9%83%A8%E5%88%86%EF%BC%89%E5%86%85%E5%AE%B9%E7%9A%84%E6%9C%89%E6%95%88%E7%A4%BA%E4%BE%8B%EF%BC%8C%E6%88%91%E6%9C%80%E8%BF%91%E5%B0%86%E5%85%B6%E6%9B%B4%E6%96%B0%E5%88%B0%E4%BA%86%E5%AE%8C%E5%85%A8%E6%A8%A1%E5%9D%97%E5%8C%96%E9%98%B6%E6%AE%B5%E3%80%82%E8%99%BD%E7%84%B6%E4%B8%BA%E6%97%B6%E8%BF%87%E6%97%A9%EF%BC%8C%E4%BD%86%E6%9C%89%E5%8A%A9%E4%BA%8E%E6%BC%94%E7%A4%BA%E8%BF%99%E4%BA%9B%E5%8E%9F%E5%88%99%E3%80%82%E5%BD%93%E7%84%B6%EF%BC%8C%E4%B9%9F%E5%8F%AF%E4%BB%A5%E9%81%BF%E5%85%8D%E4%BB%A5%E5%90%8E%E7%9A%84%E9%BA%BB%E7%83%A6%E3%80%82">https://github.com/herrbert74/FlickSlate%EF%BC%89%E4%B8%AD%E6%89%BE%E5%88%B0%E4%B8%8A%E8%BF%B0%EF%BC%88%E5%A4%A7%E9%83%A8%E5%88%86%EF%BC%89%E5%86%85%E5%AE%B9%E7%9A%84%E6%9C%89%E6%95%88%E7%A4%BA%E4%BE%8B%EF%BC%8C%E6%88%91%E6%9C%80%E8%BF%91%E5%B0%86%E5%85%B6%E6%9B%B4%E6%96%B0%E5%88%B0%E4%BA%86%E5%AE%8C%E5%85%A8%E6%A8%A1%E5%9D%97%E5%8C%96%E9%98%B6%E6%AE%B5%E3%80%82%E8%99%BD%E7%84%B6%E4%B8%BA%E6%97%B6%E8%BF%87%E6%97%A9%EF%BC%8C%E4%BD%86%E6%9C%89%E5%8A%A9%E4%BA%8E%E6%BC%94%E7%A4%BA%E8%BF%99%E4%BA%9B%E5%8E%9F%E5%88%99%E3%80%82%E5%BD%93%E7%84%B6%EF%BC%8C%E4%B9%9F%E5%8F%AF%E4%BB%A5%E9%81%BF%E5%85%8D%E4%BB%A5%E5%90%8E%E7%9A%84%E9%BA%BB%E7%83%A6%E3%80%82</a></p>

<p>FlickSlate 尚未升级到功能组。这毫无意义，因为共享层还无法拆分为功能组。该应用没有盈利功能，所以只能对节目进行分组，不过目前共享层已经完美地实现了这一点。</p>

<p>这篇文章主要源于我对互联网上关于何时以及如何模块化的建议一概而论的不满：要么建议不加区分地进行模块化，要么有人对任何进行模块化的人大喊“过度工程”。我希望这篇文章能帮助你在何时以及如何进行模块化方面做出更明智的决定。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compose Unstyled：Compose UI中失传​​的设计系统层]]></title>
    <link href="https://alexhilton.github.io/blog/2025/09/11/compose-unstyled/"/>
    <updated>2025-09-11T00:17:33+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/09/11/compose-unstyled</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自「Compose Unstyled: The missing Design System layer for Compose UI」，原文链接<a href="https://composables.com/blog/introducing-compose-unstyled">https://composables.com/blog/introducing-compose-unstyled</a>，由Alex Styl发布于2025年8月7日。</p></blockquote>

<p><a href="https://alexhilton.github.io/blog/2025/09/11/compose-unstyled/"><img src="https://composables.com/og_unstyled.jpg" title="auto auto" ></a></p>

<!-- more -->


<p>使用 Compose UI 构建应用的最大问题是 Material Compose 的灵活性不足。Material Compose 的可定制性不足以让你在其上构建自己的设计系统，因此你最终只能对其组件进行修改。另一方面，Compose Foundation 又过于“原始”——它有行和列，但没有按钮或底部表单。而且，由于主题设置与 Material 绑定，如果不完全遵循 Material 的设计决策，你甚至无法为你的应用设置主题。</p>

<p>你可以从头开始构建所有内容，但谁有时间这样做呢？考虑到不同的状态、可访问性和边缘情况，像底部表单这样的单个组件可能需要 3-4 周才能完成。这个问题在 Compose Multiplatform 中变得更加严重——Material 在 iOS 上看起来笨拙，在桌面上显得不成比例。</p>

<p>我需要一个灵活的解决方案，可以在任何平台上使用，而不受 Material 的限制。于是我撸起袖子，自己动手构建了一个：</p>

<p><strong><a href="https://composables.com/docs/com.composables/core">Compose Unstyled</a> 是基于 Compose Foundation 的 API，可轻松构建任何设计系统</strong> （链接：<a href="https://composables.com/docs/com.composables/core%EF%BC%89%E3%80%82%E5%AE%83%E6%8F%90%E4%BE%9B%E6%97%A0%E6%A0%B7%E5%BC%8F%E3%80%81%E5%8F%AF%E8%AE%BF%E9%97%AE%E7%9A%84%E7%BB%84%E4%BB%B6%EF%BC%8C%E5%B9%B6%E9%85%8D%E6%9C%89%E7%81%B5%E6%B4%BB%E7%9A%84%E4%B8%BB%E9%A2%98">https://composables.com/docs/com.composables/core%EF%BC%89%E3%80%82%E5%AE%83%E6%8F%90%E4%BE%9B%E6%97%A0%E6%A0%B7%E5%BC%8F%E3%80%81%E5%8F%AF%E8%AE%BF%E9%97%AE%E7%9A%84%E7%BB%84%E4%BB%B6%EF%BC%8C%E5%B9%B6%E9%85%8D%E6%9C%89%E7%81%B5%E6%B4%BB%E7%9A%84%E4%B8%BB%E9%A2%98</a> API——所有关于用户体验和可访问性的繁琐工作都已为你处理。</p>

<p>Unstyled 中的组件完全无需渲染，默认情况下不会在屏幕上显示任何内容。你可以将它们视为“组件模式”，它们将“底部表单”或“进度条”的概念引入你的应用，而无需你担心用户体验、键盘导航或可访问性实现。只需添加样式即可。</p>

<h2>简洁的 API，提供你所需的样式</h2>

<p>Compose Unstyled 不提供任何特殊的样式 API。所有操作都通过 <code>Modifier</code> 完成。如果你知道如何设置 <code>Box()</code> 的样式，那么你就知道如何设置 Compose Unstyled 中每个组件的样式。</p>

<p>下面是一个使用 Compose Unstyled 构建模态底部表单的简单示例，其中包含自定义定位点（表单在屏幕上“停留”的位置）以及你选择的样式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">Peek</span> <span class="p">=</span> <span class="n">SheetDetent</span><span class="p">(</span><span class="s">&quot;peek&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="n">containerHeight</span><span class="p">,</span> <span class="n">sheetHeight</span> <span class="p">-&gt;</span>
</span><span class='line'>    <span class="n">containerHeight</span> <span class="p">*</span> <span class="m">0.6f</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">BoxWithConstraints</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">().</span><span class="n">background</span><span class="p">(</span><span class="n">Brush</span><span class="p">.</span><span class="n">linearGradient</span><span class="p">(</span><span class="n">listOf</span><span class="p">(</span><span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">xFF800080</span><span class="p">),</span> <span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">xFFDA70D6</span><span class="p">)))))</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">modalSheetState</span> <span class="p">=</span> <span class="n">rememberModalBottomSheetState</span><span class="p">(</span>
</span><span class='line'>        <span class="n">initialDetent</span> <span class="p">=</span> <span class="n">Hidden</span><span class="p">,</span>
</span><span class='line'>        <span class="n">detents</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span><span class="n">Hidden</span><span class="p">,</span> <span class="n">Peek</span><span class="p">,</span> <span class="n">FullyExpanded</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">delay</span><span class="p">(</span><span class="m">50</span><span class="p">)</span>
</span><span class='line'>        <span class="n">modalSheetState</span><span class="p">.</span><span class="n">targetDetent</span> <span class="p">=</span> <span class="n">Peek</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">Button</span><span class="p">(</span><span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span> <span class="n">modalSheetState</span><span class="p">.</span><span class="n">targetDetent</span> <span class="p">=</span> <span class="n">Peek</span> <span class="p">},</span> <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">align</span><span class="p">(</span><span class="n">Alignment</span><span class="p">.</span><span class="n">Center</span><span class="p">).</span><span class="n">padding</span><span class="p">(</span><span class="n">WindowInsets</span><span class="p">.</span><span class="n">navigationBars</span><span class="p">.</span><span class="n">only</span><span class="p">(</span><span class="n">WindowInsetsSides</span><span class="p">.</span><span class="n">Horizontal</span><span class="p">).</span><span class="n">asPaddingValues</span><span class="p">()),</span> <span class="n">shape</span> <span class="p">=</span> <span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">6.</span><span class="n">dp</span><span class="p">),</span> <span class="n">contentPadding</span> <span class="p">=</span> <span class="n">PaddingValues</span><span class="p">(</span><span class="n">horizontal</span> <span class="p">=</span> <span class="m">14.</span><span class="n">dp</span><span class="p">,</span> <span class="n">vertical</span> <span class="p">=</span> <span class="m">10.</span><span class="n">dp</span><span class="p">),</span> <span class="n">backgroundColor</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">White</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Show Sheet&quot;</span><span class="p">,</span> <span class="n">fontWeight</span> <span class="p">=</span> <span class="n">FontWeight</span><span class="p">(</span><span class="m">500</span><span class="p">))</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">isCompact</span> <span class="p">=</span> <span class="n">maxWidth</span> <span class="p">&lt;</span> <span class="m">600.</span><span class="n">dp</span>
</span><span class='line'>    <span class="n">ModalBottomSheet</span><span class="p">(</span><span class="n">state</span> <span class="p">=</span> <span class="n">modalSheetState</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Scrim</span><span class="p">(</span>
</span><span class='line'>            <span class="n">scrimColor</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Black</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="m">0.3f</span><span class="p">),</span>
</span><span class='line'>            <span class="n">enter</span> <span class="p">=</span> <span class="n">fadeIn</span><span class="p">(),</span>
</span><span class='line'>            <span class="n">exit</span> <span class="p">=</span> <span class="n">fadeOut</span><span class="p">()</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>        <span class="n">Box</span><span class="p">(</span><span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">().</span><span class="n">padding</span><span class="p">(</span><span class="n">top</span> <span class="p">=</span> <span class="m">12.</span><span class="n">dp</span><span class="p">).</span><span class="n">let</span> <span class="p">{</span> <span class="k">if</span> <span class="p">(</span><span class="n">isCompact</span><span class="p">)</span> <span class="n">it</span> <span class="k">else</span> <span class="n">it</span><span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="n">horizontal</span> <span class="p">=</span> <span class="m">56.</span><span class="n">dp</span><span class="p">)</span> <span class="p">}.</span><span class="n">displayCutoutPadding</span><span class="p">().</span><span class="n">statusBarsPadding</span><span class="p">().</span><span class="n">padding</span><span class="p">(</span><span class="n">WindowInsets</span><span class="p">.</span><span class="n">navigationBars</span><span class="p">.</span><span class="n">only</span><span class="p">(</span><span class="n">WindowInsetsSides</span><span class="p">.</span><span class="n">Horizontal</span><span class="p">).</span><span class="n">asPaddingValues</span><span class="p">()))</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Sheet</span><span class="p">(</span>
</span><span class='line'>                <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">shadow</span><span class="p">(</span><span class="m">4.</span><span class="n">dp</span><span class="p">,</span> <span class="n">RoundedCornerShape</span><span class="p">(</span><span class="n">topStart</span> <span class="p">=</span> <span class="m">28.</span><span class="n">dp</span><span class="p">,</span> <span class="n">topEnd</span> <span class="p">=</span> <span class="m">28.</span><span class="n">dp</span><span class="p">))</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">widthIn</span><span class="p">(</span><span class="n">max</span> <span class="p">=</span> <span class="m">640.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">fillMaxWidth</span><span class="p">(),</span>
</span><span class='line'>                <span class="n">shape</span> <span class="p">=</span> <span class="n">RoundedCornerShape</span><span class="p">(</span><span class="n">topStart</span> <span class="p">=</span> <span class="m">28.</span><span class="n">dp</span><span class="p">,</span> <span class="n">topEnd</span> <span class="p">=</span> <span class="m">28.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>                <span class="n">backgroundColor</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">White</span><span class="p">,</span>
</span><span class='line'>                <span class="n">contentColor</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Black</span>
</span><span class='line'>            <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">Box</span><span class="p">(</span><span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxWidth</span><span class="p">().</span><span class="n">height</span><span class="p">(</span><span class="m">600.</span><span class="n">dp</span><span class="p">),</span> <span class="n">contentAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">TopCenter</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">DragIndication</span><span class="p">(</span>
</span><span class='line'>                        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="n">top</span> <span class="p">=</span> <span class="m">22.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>                            <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">Black</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="m">0.4f</span><span class="p">),</span> <span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">100</span><span class="p">)).</span><span class="n">width</span><span class="p">(</span><span class="m">32.</span><span class="n">dp</span><span class="p">).</span><span class="n">height</span><span class="p">(</span><span class="m">4.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在，我知道你可能会想。“Alex！这 API 真奇怪。为什么我需要一个 <code>ModalBottomSheet</code> 和一个 <code>Sheet</code>？为什么不直接用 Slots 呢？”</p>

<p>这个设计选择是经过深思熟虑的：</p>

<h2>设计理念</h2>

<p>Compose Unstyled 不会替你做出任何设计决策，而是让你完全掌控布局。事实上，如果你被迫使用无法根据需求更改的样式，则会被视为错误（请提交 GitHub 问题，以便我进行调查）。</p>

<p>例如，你可能希望将底部表单放置在屏幕的左侧或右侧。当你想要求开发者提供一个在布局上具有严格位置的组件时，基于插槽的 API 非常实用。</p>

<p>在这种情况下，你可以将 <code>ModalBottomSheet</code> 组件视为表单可以移动的区域。<code>Sheet</code> 是用户可以与之交互的实际表单。通过提供这样的组件，它为开发者提供了清晰的 API，并清楚地说明了组件的功能。例如，<code>Scrim()</code> 组件具有 <em>enter</em> 和 <em>exit</em> 过渡参数。 Compose Unstyled 会在恰当的时机为纱幕添加和隐藏动画，以实现最佳用户体验。你只需指定“如何”实现即可。</p>

<p>由于 Compose Unstyled 在外观方面非常开放，因此与原始的 Compose Foundation 组件相比，它没有任何平台限制。Foundation 中的“对话框”具有固定的最大尺寸，这使得它们在诸如全屏对话框等情况下难以工作。</p>

<p>Compose Unstyled 中的所有组件在所有平台上的工作方式完全相同。这是有意为之，因为此类决策应该属于设计系统层的一部分。尽管这会给开发者带来更多负担，但由于没有“陷阱”，它大大缩短了开发时间。组件的样式与你描述的完全一致。</p>

<p>这不会使 Compose Unstyled 与底层平台脱节。在使用对话框和模态底部菜单等模态窗口时，设置系统窗口的样式是 Android 样式设置的重要组成部分。在这种情况下，Compose Unstyled 提供了一个 <code>LocalModalWindow</code> 组合本地接口，允许你访问渲染模态窗口的 <code>Window</code>。请注意，此类 API 仅适用于 Android 目标平台，不属于通用目标平台 API。</p>

<p>最后，每个组件的代码都包含在其自己的文件中，即使你不是 Compose 专家，也能轻松理解。你无需担心任何限制。如果你现在需要更改某些内容，并且迫不及待地想要提交错误并在库级别修复它，你只需将组件的单个文件复制粘贴到你的代码库中即可。这为你节省了通常需要你自己完成的 4 周工作时间。</p>

<h2>滑块</h2>

<p>以下是如何构建一个具有你所选样式的滑块。</p>

<p>它与 Compose 的“InteractionState”集成，以便你可以按照自己想要的方式完善组件。键盘交互功能开箱即用，用户可以通过按下键盘上的“向上”或“向下”键来增加或减少值：</p>

<p><img src="file:///Users/alexhilton/Downloads/compose-style-1.png" alt="" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">Box</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">().</span><span class="n">background</span><span class="p">(</span><span class="n">Brush</span><span class="p">.</span><span class="n">linearGradient</span><span class="p">(</span><span class="n">listOf</span><span class="p">(</span><span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">xFFED213A</span><span class="p">),</span> <span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">xFF93291E</span><span class="p">)))),</span>   <span class="n">contentAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">Center</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">interactionSource</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">MutableInteractionSource</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">isFocused</span> <span class="k">by</span> <span class="n">interactionSource</span><span class="p">.</span><span class="n">collectIsFocusedAsState</span><span class="p">()</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">isPressed</span> <span class="k">by</span> <span class="n">interactionSource</span><span class="p">.</span><span class="n">collectIsPressedAsState</span><span class="p">()</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">state</span> <span class="p">=</span> <span class="n">rememberSliderState</span><span class="p">(</span><span class="n">initialValue</span> <span class="p">=</span> <span class="m">0.7f</span><span class="p">)</span>
</span><span class='line'>    <span class="n">Row</span><span class="p">(</span><span class="n">verticalAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">CenterVertically</span><span class="p">,</span> <span class="n">horizontalArrangement</span> <span class="p">=</span> <span class="n">Arrangement</span><span class="p">.</span><span class="n">spacedBy</span><span class="p">(</span><span class="m">12.</span><span class="n">dp</span><span class="p">),</span> <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="n">horizontal</span> <span class="p">=</span> <span class="m">16.</span><span class="n">dp</span><span class="p">).</span><span class="n">widthIn</span><span class="p">(</span><span class="n">max</span> <span class="p">=</span> <span class="m">480.</span><span class="n">dp</span><span class="p">).</span><span class="n">fillMaxWidth</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Button</span><span class="p">(</span><span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span> <span class="n">state</span><span class="p">.</span><span class="n">value</span> <span class="p">-=</span> <span class="m">0.1f</span> <span class="p">},</span> <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">shadow</span><span class="p">(</span><span class="m">4.</span><span class="n">dp</span><span class="p">,</span> <span class="n">CircleShape</span><span class="p">),</span> <span class="n">shape</span> <span class="p">=</span> <span class="n">CircleShape</span><span class="p">,</span> <span class="n">backgroundColor</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">White</span><span class="p">,</span> <span class="n">contentPadding</span> <span class="p">=</span> <span class="n">PaddingValues</span><span class="p">(</span><span class="m">8.</span><span class="n">dp</span><span class="p">),)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Icon</span><span class="p">(</span><span class="n">VolumeDown</span><span class="p">,</span> <span class="s">&quot;Decrease&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">Slider</span><span class="p">(</span>
</span><span class='line'>            <span class="n">interactionSource</span> <span class="p">=</span> <span class="n">interactionSource</span><span class="p">,</span>
</span><span class='line'>            <span class="n">state</span> <span class="p">=</span> <span class="n">state</span><span class="p">,</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">weight</span><span class="p">(</span><span class="m">1f</span><span class="p">),</span>
</span><span class='line'>            <span class="n">track</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">Box</span><span class="p">(</span><span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxWidth</span><span class="p">().</span><span class="n">height</span><span class="p">(</span><span class="m">8.</span><span class="n">dp</span><span class="p">).</span><span class="n">padding</span><span class="p">(</span><span class="n">horizontal</span> <span class="p">=</span> <span class="m">16.</span><span class="n">dp</span><span class="p">).</span><span class="n">clip</span><span class="p">(</span><span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">100.</span><span class="n">dp</span><span class="p">)))</span> <span class="p">{</span>
</span><span class='line'>                    <span class="c1">// the &#39;not yet completed&#39; part of the track</span>
</span><span class='line'>                    <span class="n">Box</span><span class="p">(</span><span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxHeight</span><span class="p">().</span><span class="n">fillMaxWidth</span><span class="p">().</span><span class="n">background</span><span class="p">(</span><span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">xFF93291E</span><span class="p">)))</span>
</span><span class='line'>                    <span class="c1">// the &#39;completed&#39; part of the track</span>
</span><span class='line'>                    <span class="n">Box</span><span class="p">(</span><span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxHeight</span><span class="p">().</span><span class="n">fillMaxWidth</span><span class="p">(</span><span class="n">state</span><span class="p">.</span><span class="n">value</span><span class="p">).</span><span class="n">background</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">White</span><span class="p">))</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="n">thumb</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">val</span> <span class="py">thumbSize</span> <span class="k">by</span> <span class="n">animateDpAsState</span><span class="p">(</span><span class="n">targetValue</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">isPressed</span><span class="p">)</span> <span class="m">22.</span><span class="n">dp</span> <span class="k">else</span> <span class="m">18.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>                <span class="k">val</span> <span class="py">thumbInteractionSource</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">MutableInteractionSource</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>                <span class="k">val</span> <span class="py">isHovered</span> <span class="k">by</span> <span class="n">thumbInteractionSource</span><span class="p">.</span><span class="n">collectIsHoveredAsState</span><span class="p">()</span>
</span><span class='line'>                <span class="k">val</span> <span class="py">glowColor</span> <span class="k">by</span> <span class="n">animateColorAsState</span><span class="p">(</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="n">isFocused</span> <span class="p">||</span> <span class="n">isHovered</span><span class="p">)</span> <span class="n">Color</span><span class="p">.</span><span class="n">White</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="m">0.33f</span><span class="p">)</span> <span class="k">else</span> <span class="n">Color</span><span class="p">.</span><span class="n">Transparent</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>                <span class="c1">// keep the size fixed to ensure that the resizing animation is always centered</span>
</span><span class='line'>                <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">36.</span><span class="n">dp</span><span class="p">).</span><span class="n">clip</span><span class="p">(</span><span class="n">CircleShape</span><span class="p">).</span><span class="n">background</span><span class="p">(</span><span class="n">glowColor</span><span class="p">),</span>
</span><span class='line'>                    <span class="n">contentAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">Center</span>
</span><span class='line'>                <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">Thumb</span><span class="p">(</span>
</span><span class='line'>                        <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">White</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="n">thumbSize</span><span class="p">).</span><span class="n">shadow</span><span class="p">(</span><span class="m">4.</span><span class="n">dp</span><span class="p">,</span> <span class="n">CircleShape</span><span class="p">).</span><span class="n">hoverable</span><span class="p">(</span><span class="n">thumbInteractionSource</span><span class="p">),</span>
</span><span class='line'>                        <span class="n">shape</span> <span class="p">=</span> <span class="n">CircleShape</span><span class="p">,</span>
</span><span class='line'>                    <span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>        <span class="n">Button</span><span class="p">(</span><span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span> <span class="n">state</span><span class="p">.</span><span class="n">value</span> <span class="p">+=</span> <span class="m">0.1f</span> <span class="p">},</span> <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">shadow</span><span class="p">(</span><span class="m">4.</span><span class="n">dp</span><span class="p">,</span> <span class="n">CircleShape</span><span class="p">),</span> <span class="n">shape</span> <span class="p">=</span> <span class="n">CircleShape</span><span class="p">,</span> <span class="n">backgroundColor</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">White</span><span class="p">,</span> <span class="n">contentPadding</span> <span class="p">=</span> <span class="n">PaddingValues</span><span class="p">(</span><span class="m">8.</span><span class="n">dp</span><span class="p">),)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Icon</span><span class="p">(</span><span class="n">VolumeUp</span><span class="p">,</span> <span class="s">&quot;Increase&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>下拉菜单</h2>

<p>下拉菜单的正确实现非常复杂，尤其是在键盘导航和焦点管理方面。</p>

<p>要充分体验此组件，请在桌面上试用：点击“Options”按钮以聚焦演示，然后使用键盘的上下箭头键进行导航：</p>

<p><img src="file:///Users/alexhilton/Downloads/compose-style-2.png" alt="" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">DropdownOption</span><span class="p">(</span><span class="k">val</span> <span class="py">text</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="k">val</span> <span class="py">icon</span><span class="p">:</span> <span class="n">ImageVector</span><span class="p">,</span> <span class="k">val</span> <span class="py">enabled</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span> <span class="k">val</span> <span class="py">dangerous</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">)</span>
</span><span class='line'><span class="k">val</span> <span class="py">options</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span>
</span><span class='line'>    <span class="n">DropdownOption</span><span class="p">(</span><span class="s">&quot;Select All&quot;</span><span class="p">,</span> <span class="n">Maximize</span><span class="p">),</span>
</span><span class='line'>    <span class="n">DropdownOption</span><span class="p">(</span><span class="s">&quot;Copy&quot;</span><span class="p">,</span> <span class="n">Copy</span><span class="p">),</span>
</span><span class='line'>    <span class="n">DropdownOption</span><span class="p">(</span><span class="s">&quot;Cut&quot;</span><span class="p">,</span> <span class="n">Scissors</span><span class="p">,</span> <span class="n">enabled</span> <span class="p">=</span> <span class="k">false</span><span class="p">),</span>
</span><span class='line'>    <span class="n">DropdownOption</span><span class="p">(</span><span class="s">&quot;Paste&quot;</span><span class="p">,</span> <span class="n">Clipboard</span><span class="p">),</span>
</span><span class='line'>    <span class="n">DropdownOption</span><span class="p">(</span><span class="s">&quot;Delete&quot;</span><span class="p">,</span> <span class="n">Trash2</span><span class="p">,</span> <span class="n">dangerous</span> <span class="p">=</span> <span class="k">true</span><span class="p">),</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="k">var</span> <span class="py">expanded</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="k">true</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="n">DropdownMenu</span><span class="p">(</span><span class="n">onExpandRequest</span> <span class="p">=</span> <span class="p">{</span> <span class="n">expanded</span> <span class="p">=</span> <span class="k">true</span> <span class="p">})</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Button</span><span class="p">(</span><span class="n">shape</span> <span class="p">=</span> <span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">6.</span><span class="n">dp</span><span class="p">),</span> <span class="n">backgroundColor</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">White</span><span class="p">,</span> <span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span> <span class="n">expanded</span> <span class="p">=</span> <span class="k">true</span> <span class="p">},</span> <span class="n">contentPadding</span> <span class="p">=</span> <span class="n">PaddingValues</span><span class="p">(</span><span class="n">horizontal</span> <span class="p">=</span> <span class="m">14.</span><span class="n">dp</span><span class="p">,</span> <span class="n">vertical</span> <span class="p">=</span> <span class="m">10.</span><span class="n">dp</span><span class="p">),)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Options&quot;</span><span class="p">,</span> <span class="n">fontWeight</span> <span class="p">=</span> <span class="n">FontWeight</span><span class="p">(</span><span class="m">500</span><span class="p">))</span>
</span><span class='line'>        <span class="n">Spacer</span><span class="p">(</span><span class="n">Modifier</span><span class="p">.</span><span class="n">width</span><span class="p">(</span><span class="m">8.</span><span class="n">dp</span><span class="p">))</span>
</span><span class='line'>        <span class="n">Icon</span><span class="p">(</span><span class="n">ChevronDown</span><span class="p">,</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">DropdownMenuPanel</span><span class="p">(</span>
</span><span class='line'>        <span class="n">expanded</span> <span class="p">=</span> <span class="n">expanded</span><span class="p">,</span>
</span><span class='line'>        <span class="n">onDismissRequest</span> <span class="p">=</span> <span class="p">{</span> <span class="n">expanded</span> <span class="p">=</span> <span class="k">false</span> <span class="p">},</span>
</span><span class='line'>        <span class="n">backgroundColor</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">White</span><span class="p">,</span>
</span><span class='line'>        <span class="n">shape</span> <span class="p">=</span> <span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">8.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="n">vertical</span> <span class="p">=</span> <span class="m">4.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">width</span><span class="p">(</span><span class="m">240.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">shadow</span><span class="p">(</span><span class="m">4.</span><span class="n">dp</span><span class="p">,</span> <span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">8.</span><span class="n">dp</span><span class="p">)),</span>
</span><span class='line'>        <span class="n">enter</span> <span class="p">=</span> <span class="n">scaleIn</span><span class="p">(</span>
</span><span class='line'>            <span class="n">animationSpec</span> <span class="p">=</span> <span class="n">tween</span><span class="p">(</span><span class="n">durationMillis</span> <span class="p">=</span> <span class="m">120</span><span class="p">,</span> <span class="n">easing</span> <span class="p">=</span> <span class="n">LinearOutSlowInEasing</span><span class="p">),</span>
</span><span class='line'>            <span class="n">initialScale</span> <span class="p">=</span> <span class="m">0.8f</span><span class="p">,</span>
</span><span class='line'>            <span class="n">transformOrigin</span> <span class="p">=</span> <span class="n">TransformOrigin</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="m">0f</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span> <span class="p">+</span> <span class="n">fadeIn</span><span class="p">(</span><span class="n">tween</span><span class="p">(</span><span class="n">durationMillis</span> <span class="p">=</span> <span class="m">30</span><span class="p">)),</span>
</span><span class='line'>        <span class="n">exit</span> <span class="p">=</span> <span class="n">scaleOut</span><span class="p">(</span><span class="n">animationSpec</span> <span class="p">=</span> <span class="n">tween</span><span class="p">(</span><span class="n">durationMillis</span> <span class="p">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">delayMillis</span> <span class="p">=</span> <span class="m">75</span><span class="p">),</span> <span class="n">targetScale</span> <span class="p">=</span> <span class="m">1f</span><span class="p">)</span> <span class="p">+</span> <span class="n">fadeOut</span><span class="p">(</span><span class="n">tween</span><span class="p">(</span><span class="n">durationMillis</span> <span class="p">=</span> <span class="m">75</span><span class="p">))</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">options</span><span class="p">.</span><span class="n">forEachIndexed</span> <span class="p">{</span> <span class="n">index</span><span class="p">,</span> <span class="n">option</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">index</span> <span class="p">==</span> <span class="m">1</span> <span class="p">||</span> <span class="n">index</span> <span class="p">==</span> <span class="n">options</span><span class="p">.</span><span class="n">lastIndex</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">Separator</span><span class="p">(</span><span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">xFFBDBDBD</span><span class="p">))</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">Button</span><span class="p">(</span><span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span> <span class="n">expanded</span> <span class="p">=</span> <span class="k">false</span> <span class="p">},</span> <span class="n">enabled</span> <span class="p">=</span> <span class="n">option</span><span class="p">.</span><span class="n">enabled</span><span class="p">,</span> <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">4.</span><span class="n">dp</span><span class="p">),</span> <span class="n">contentPadding</span> <span class="p">=</span> <span class="n">PaddingValues</span><span class="p">(</span><span class="n">horizontal</span> <span class="p">=</span> <span class="m">8.</span><span class="n">dp</span><span class="p">,</span> <span class="n">vertical</span> <span class="p">=</span> <span class="m">2.</span><span class="n">dp</span><span class="p">),</span> <span class="n">contentColor</span> <span class="p">=</span> <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="n">option</span><span class="p">.</span><span class="n">dangerous</span><span class="p">)</span> <span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">xFFC62828</span><span class="p">)</span> <span class="k">else</span> <span class="n">LocalContentColor</span><span class="p">.</span><span class="n">current</span><span class="p">).</span><span class="n">copy</span><span class="p">(</span><span class="n">alpha</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">option</span><span class="p">.</span><span class="n">enabled</span><span class="p">)</span> <span class="m">1f</span> <span class="k">else</span> <span class="m">0.5f</span><span class="p">),</span> <span class="n">shape</span> <span class="p">=</span> <span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">8.</span><span class="n">dp</span><span class="p">),)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">Icon</span><span class="p">(</span><span class="n">option</span><span class="p">.</span><span class="n">icon</span><span class="p">,</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>                <span class="n">Spacer</span><span class="p">(</span><span class="n">Modifier</span><span class="p">.</span><span class="n">width</span><span class="p">(</span><span class="m">4.</span><span class="n">dp</span><span class="p">))</span>
</span><span class='line'>                <span class="n">Text</span><span class="p">(</span><span class="n">text</span> <span class="p">=</span> <span class="n">option</span><span class="p">.</span><span class="n">text</span><span class="p">,</span> <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxWidth</span><span class="p">().</span><span class="n">padding</span><span class="p">(</span><span class="n">vertical</span> <span class="p">=</span> <span class="m">8.</span><span class="n">dp</span><span class="p">,</span> <span class="n">horizontal</span> <span class="p">=</span> <span class="m">4.</span><span class="n">dp</span><span class="p">))</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以及更多未样式化的组件，例如：</p>

<ul>
<li><a href="https://composables.com/docs/com.composables/core/textfield">TextField</a>，全面支持屏幕阅读器的无障碍功能</li>
<li><a href="https://composables.com/docs/com.composables/core/button">Button</a></li>
<li><a href="https://composables.com/docs/com.composables/core/dialog">Dialog</a></li>
<li><a href="https://composables.com/docs/com.composables/core/radiogroup">Radio Group</a></li>
<li><a href="https://composables.com/docs/com.composables/core/tabgroup">TabGroup</a>，用于构建标签式导航，例如底部应用栏或顶部标签桌面</li>
<li><a href="https://composables.com/docs/com.composables/core/checkbox">复选框</a></li>
<li><a href="https://composables.com/docs/com.composables/core/tristatecheckbox">三态复选框</a></li>
<li><a href="https://composables.com/docs/com.composables/core/toggleswitch">切换开关</a></li>
<li><a href="https://composables.com/docs/com.composables/core/scrollarea">滚动条</a>（没错，就是滚动条。）</li>
</ul>


<p>每个组件在构建时都充分考虑了可访问性，包括合理的语义和完整的键盘导航支持。</p>

<p>你可以<a href="https://composables.com/docs/com.composables/core">在文档中找到完整的组件列表 -></a>（链接：<a href="https://composables.com/docs/com.composables/core%EF%BC%89%E3%80%82">https://composables.com/docs/com.composables/core%EF%BC%89%E3%80%82</a></p>

<h2>使用你的设计令牌自定义 Compose 主题</h2>

<p>Compose Unstyled 包含一个灵活的主题系统，可与任何设计系统令牌兼容。</p>

<p>以下是如何使用你选择的设计令牌创建完全自定义的主题：</p>

<p>以下是创建 Compose Theme 函数的示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">// define your theme properties</span>
</span><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="py">colors</span> <span class="p">=</span> <span class="n">ThemeProperty</span><span class="p">&lt;</span><span class="n">Color</span><span class="p">&gt;(</span><span class="s">&quot;colors&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="py">typography</span> <span class="p">=</span> <span class="n">ThemeProperty</span><span class="p">&lt;</span><span class="n">TextStyle</span><span class="p">&gt;(</span><span class="s">&quot;typography&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="py">shapes</span> <span class="p">=</span> <span class="n">ThemeProperty</span><span class="p">&lt;</span><span class="n">Shape</span><span class="p">&gt;(</span><span class="s">&quot;shapes&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="py">elevation</span> <span class="p">=</span> <span class="n">ThemeProperty</span><span class="p">&lt;</span><span class="n">Dp</span><span class="p">&gt;(</span><span class="s">&quot;elevation&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">// define your theme tokens.</span>
</span><span class='line'><span class="c1">// those are the potential values of your theme properties</span>
</span><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="py">background</span> <span class="p">=</span> <span class="n">ThemeToken</span><span class="p">&lt;</span><span class="n">Color</span><span class="p">&gt;(</span><span class="s">&quot;background&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="py">card</span> <span class="p">=</span> <span class="n">ThemeToken</span><span class="p">&lt;</span><span class="n">Color</span><span class="p">&gt;(</span><span class="s">&quot;surface&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="py">onCard</span> <span class="p">=</span> <span class="n">ThemeToken</span><span class="p">&lt;</span><span class="n">Color</span><span class="p">&gt;(</span><span class="s">&quot;onCard&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="py">outline</span> <span class="p">=</span> <span class="n">ThemeToken</span><span class="p">&lt;</span><span class="n">Color</span><span class="p">&gt;(</span><span class="s">&quot;outline&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="py">accent</span> <span class="p">=</span> <span class="n">ThemeToken</span><span class="p">&lt;</span><span class="n">Color</span><span class="p">&gt;(</span><span class="s">&quot;accent&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="py">primary</span> <span class="p">=</span> <span class="n">ThemeToken</span><span class="p">&lt;</span><span class="n">Color</span><span class="p">&gt;(</span><span class="s">&quot;primary&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="py">onPrimary</span> <span class="p">=</span> <span class="n">ThemeToken</span><span class="p">&lt;</span><span class="n">Color</span><span class="p">&gt;(</span><span class="s">&quot;onPrimary&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="py">onSecondary</span> <span class="p">=</span> <span class="n">ThemeToken</span><span class="p">&lt;</span><span class="n">Color</span><span class="p">&gt;(</span><span class="s">&quot;onSecondary&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="py">secondary</span> <span class="p">=</span> <span class="n">ThemeToken</span><span class="p">&lt;</span><span class="n">Color</span><span class="p">&gt;(</span><span class="s">&quot;secondary&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="py">subtle</span> <span class="p">=</span> <span class="n">ThemeToken</span><span class="p">&lt;</span><span class="n">Dp</span><span class="p">&gt;(</span><span class="s">&quot;subtle&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="py">titleMedium</span> <span class="p">=</span> <span class="n">ThemeToken</span><span class="p">&lt;</span><span class="n">TextStyle</span><span class="p">&gt;(</span><span class="s">&quot;titleMedium&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="py">bodyMedium</span> <span class="p">=</span> <span class="n">ThemeToken</span><span class="p">&lt;</span><span class="n">TextStyle</span><span class="p">&gt;(</span><span class="s">&quot;bodyMedium&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="py">cardShape</span> <span class="p">=</span> <span class="n">ThemeToken</span><span class="p">&lt;</span><span class="n">Shape</span><span class="p">&gt;(</span><span class="s">&quot;cardShape&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="py">albumCoverShape</span> <span class="p">=</span> <span class="n">ThemeToken</span><span class="p">&lt;</span><span class="n">Shape</span><span class="p">&gt;(</span><span class="s">&quot;albumCoverShape&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="py">buttonShape</span> <span class="p">=</span> <span class="n">ThemeToken</span><span class="p">&lt;</span><span class="n">Shape</span><span class="p">&gt;(</span><span class="s">&quot;buttonShape&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">// create your Compose Theme and assign values to each token</span>
</span><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="py">LightTheme</span> <span class="p">=</span> <span class="n">buildTheme</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">name</span> <span class="p">=</span> <span class="s">&quot;LightTheme&quot;</span>
</span><span class='line'>    <span class="n">properties</span><span class="p">[</span><span class="n">colors</span><span class="p">]</span> <span class="p">=</span> <span class="n">mapOf</span><span class="p">(</span>
</span><span class='line'>        <span class="n">accent</span> <span class="n">to</span> <span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">xFF3B82F6</span><span class="p">),</span>
</span><span class='line'>        <span class="n">card</span> <span class="n">to</span> <span class="n">Color</span><span class="p">.</span><span class="n">White</span><span class="p">,</span>
</span><span class='line'>        <span class="n">onCard</span> <span class="n">to</span> <span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">xFF1E293B</span><span class="p">),</span>
</span><span class='line'>        <span class="n">outline</span> <span class="n">to</span> <span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">xFFE2E8F0</span><span class="p">),</span>
</span><span class='line'>        <span class="n">primary</span> <span class="n">to</span> <span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">xFF2563EB</span><span class="p">),</span>
</span><span class='line'>        <span class="n">onPrimary</span> <span class="n">to</span> <span class="n">Color</span><span class="p">.</span><span class="n">White</span><span class="p">,</span>
</span><span class='line'>        <span class="n">secondary</span> <span class="n">to</span> <span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">xFFE2E8F0</span><span class="p">),</span>
</span><span class='line'>        <span class="n">onSecondary</span> <span class="n">to</span> <span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">xFF64748B</span><span class="p">),</span>
</span><span class='line'>        <span class="n">background</span> <span class="n">to</span> <span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">xFFF8F9FA</span><span class="p">),</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="n">properties</span><span class="p">[</span><span class="n">typography</span><span class="p">]</span> <span class="p">=</span> <span class="n">mapOf</span><span class="p">(</span>
</span><span class='line'>        <span class="n">titleMedium</span> <span class="n">to</span> <span class="n">TextStyle</span><span class="p">(</span>
</span><span class='line'>            <span class="n">fontSize</span> <span class="p">=</span> <span class="m">18.</span><span class="n">sp</span><span class="p">,</span>
</span><span class='line'>            <span class="n">fontWeight</span> <span class="p">=</span> <span class="n">FontWeight</span><span class="p">.</span><span class="n">SemiBold</span><span class="p">,</span>
</span><span class='line'>            <span class="n">fontFamily</span> <span class="p">=</span> <span class="n">loadInterFont</span><span class="p">(),</span>
</span><span class='line'>        <span class="p">),</span>
</span><span class='line'>        <span class="n">bodyMedium</span> <span class="n">to</span> <span class="n">TextStyle</span><span class="p">(</span>
</span><span class='line'>            <span class="n">fontSize</span> <span class="p">=</span> <span class="m">14.</span><span class="n">sp</span><span class="p">,</span>
</span><span class='line'>            <span class="n">fontWeight</span> <span class="p">=</span> <span class="n">FontWeight</span><span class="p">.</span><span class="n">Normal</span><span class="p">,</span>
</span><span class='line'>            <span class="n">fontFamily</span> <span class="p">=</span> <span class="n">loadInterFont</span><span class="p">(),</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="n">properties</span><span class="p">[</span><span class="n">shapes</span><span class="p">]</span> <span class="p">=</span> <span class="n">mapOf</span><span class="p">(</span>
</span><span class='line'>        <span class="n">cardShape</span> <span class="n">to</span> <span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">16.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>        <span class="n">albumCoverShape</span> <span class="n">to</span> <span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">12.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>        <span class="n">buttonShape</span> <span class="n">to</span> <span class="n">CircleShape</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="n">properties</span><span class="p">[</span><span class="n">elevation</span><span class="p">]</span> <span class="p">=</span> <span class="n">mapOf</span><span class="p">(</span>
</span><span class='line'>        <span class="n">subtle</span> <span class="n">to</span> <span class="m">8.</span><span class="n">dp</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后，你可以使用新的主题函数包装你的应用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">MusicPlayerApp</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">LightTheme</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">MusicPlayerCard</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后，它会使用 <code>Theme</code> 对象授予其子组件对主题的访问权限：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">MusicPlayerCard</span><span class="p">(</span><span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">sliderState</span> <span class="p">=</span> <span class="n">rememberSliderState</span><span class="p">(</span><span class="n">initialValue</span> <span class="p">=</span> <span class="m">0.3f</span><span class="p">)</span>
</span><span class='line'>    <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">outline</span><span class="p">(</span><span class="m">1.</span><span class="n">dp</span><span class="p">,</span> <span class="n">Theme</span><span class="p">[</span><span class="n">colors</span><span class="p">][</span><span class="n">outline</span><span class="p">],</span> <span class="n">Theme</span><span class="p">[</span><span class="n">shapes</span><span class="p">][</span><span class="n">cardShape</span><span class="p">])</span>
</span><span class='line'>            <span class="p">.</span><span class="n">shadow</span><span class="p">(</span><span class="n">Theme</span><span class="p">[</span><span class="n">elevation</span><span class="p">][</span><span class="n">subtle</span><span class="p">],</span> <span class="n">Theme</span><span class="p">[</span><span class="n">shapes</span><span class="p">][</span><span class="n">cardShape</span><span class="p">])</span>
</span><span class='line'>            <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">Theme</span><span class="p">[</span><span class="n">colors</span><span class="p">][</span><span class="n">card</span><span class="p">],</span> <span class="n">Theme</span><span class="p">[</span><span class="n">shapes</span><span class="p">][</span><span class="n">cardShape</span><span class="p">])</span>
</span><span class='line'>            <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">24.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">ProvideContentColor</span><span class="p">(</span><span class="n">Theme</span><span class="p">[</span><span class="n">colors</span><span class="p">][</span><span class="n">onCard</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Column</span><span class="p">(</span><span class="n">verticalArrangement</span> <span class="p">=</span> <span class="n">Arrangement</span><span class="p">.</span><span class="n">spacedBy</span><span class="p">(</span><span class="m">20.</span><span class="n">dp</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">Row</span><span class="p">(</span><span class="n">verticalAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">CenterVertically</span><span class="p">,</span> <span class="n">horizontalArrangement</span> <span class="p">=</span> <span class="n">Arrangement</span><span class="p">.</span><span class="n">spacedBy</span><span class="p">(</span><span class="m">16.</span><span class="n">dp</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">Image</span><span class="p">(</span>
</span><span class='line'>                        <span class="n">painter</span> <span class="p">=</span> <span class="n">painterResource</span><span class="p">(</span><span class="n">Res</span><span class="p">.</span><span class="n">drawable</span><span class="p">.</span><span class="n">just_hoist_it_cover</span><span class="p">),</span>
</span><span class='line'>                        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                            <span class="p">.</span><span class="n">clip</span><span class="p">(</span><span class="n">Theme</span><span class="p">[</span><span class="n">shapes</span><span class="p">][</span><span class="n">albumCoverShape</span><span class="p">])</span>
</span><span class='line'>                            <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">Theme</span><span class="p">[</span><span class="n">colors</span><span class="p">][</span><span class="n">primary</span><span class="p">])</span>
</span><span class='line'>                            <span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">80.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>                        <span class="n">contentDescription</span> <span class="p">=</span> <span class="s">&quot;Album Cover&quot;</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">contentScale</span> <span class="p">=</span> <span class="n">ContentScale</span><span class="p">.</span><span class="n">Crop</span>
</span><span class='line'>                    <span class="p">)</span>
</span><span class='line'>                    <span class="n">Column</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">weight</span><span class="p">(</span><span class="m">1f</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Just hoist it!&quot;</span><span class="p">,</span> <span class="n">style</span> <span class="p">=</span> <span class="n">Theme</span><span class="p">[</span><span class="n">typography</span><span class="p">][</span><span class="n">titleMedium</span><span class="p">])</span>
</span><span class='line'>                        <span class="n">Spacer</span><span class="p">(</span><span class="n">Modifier</span><span class="p">.</span><span class="n">height</span><span class="p">(</span><span class="m">4.</span><span class="n">dp</span><span class="p">))</span>
</span><span class='line'>                        <span class="n">Text</span><span class="p">(</span>
</span><span class='line'>                            <span class="s">&quot;The Deprecated&quot;</span><span class="p">,</span>
</span><span class='line'>                            <span class="n">style</span> <span class="p">=</span> <span class="n">Theme</span><span class="p">[</span><span class="n">typography</span><span class="p">][</span><span class="n">bodyMedium</span><span class="p">],</span>
</span><span class='line'>                            <span class="n">color</span> <span class="p">=</span> <span class="n">Theme</span><span class="p">[</span><span class="n">colors</span><span class="p">][</span><span class="n">onSecondary</span><span class="p">]</span>
</span><span class='line'>                        <span class="p">)</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="n">Slider</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">state</span> <span class="p">=</span> <span class="n">sliderState</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxWidth</span><span class="p">(),</span>
</span><span class='line'>                    <span class="n">track</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">Box</span><span class="p">(</span><span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxWidth</span><span class="p">().</span><span class="n">height</span><span class="p">(</span><span class="m">4.</span><span class="n">dp</span><span class="p">).</span><span class="n">clip</span><span class="p">(</span><span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">2.</span><span class="n">dp</span><span class="p">)))</span> <span class="p">{</span>
</span><span class='line'>                            <span class="c1">// the empty part of the track</span>
</span><span class='line'>                            <span class="n">Box</span><span class="p">(</span><span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">().</span><span class="n">background</span><span class="p">(</span><span class="n">Theme</span><span class="p">[</span><span class="n">colors</span><span class="p">][</span><span class="n">secondary</span><span class="p">]))</span>
</span><span class='line'>                            <span class="c1">// the filled part of the track</span>
</span><span class='line'>                            <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>                                <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxWidth</span><span class="p">(</span><span class="n">sliderState</span><span class="p">.</span><span class="n">value</span><span class="p">).</span><span class="n">fillMaxSize</span><span class="p">().</span><span class="n">background</span><span class="p">(</span><span class="n">Theme</span><span class="p">[</span><span class="n">colors</span><span class="p">][</span><span class="n">accent</span><span class="p">])</span>
</span><span class='line'>                            <span class="p">)</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                    <span class="p">},</span>
</span><span class='line'>                    <span class="n">thumb</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">Thumb</span><span class="p">(</span>
</span><span class='line'>                            <span class="n">color</span> <span class="p">=</span> <span class="n">Theme</span><span class="p">[</span><span class="n">colors</span><span class="p">][</span><span class="n">accent</span><span class="p">],</span>
</span><span class='line'>                            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">16.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>                            <span class="n">shape</span> <span class="p">=</span> <span class="n">Theme</span><span class="p">[</span><span class="n">shapes</span><span class="p">][</span><span class="n">buttonShape</span><span class="p">]</span>
</span><span class='line'>                        <span class="p">)</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>                <span class="n">Row</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxWidth</span><span class="p">(),</span> <span class="n">horizontalArrangement</span> <span class="p">=</span> <span class="n">Arrangement</span><span class="p">.</span><span class="n">SpaceEvenly</span><span class="p">,</span> <span class="n">verticalAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">CenterVertically</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">Button</span><span class="p">(</span><span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span> <span class="p">},</span> <span class="n">contentPadding</span> <span class="p">=</span> <span class="n">PaddingValues</span><span class="p">(</span><span class="m">12.</span><span class="n">dp</span><span class="p">),</span> <span class="n">shape</span> <span class="p">=</span> <span class="n">Theme</span><span class="p">[</span><span class="n">shapes</span><span class="p">][</span><span class="n">buttonShape</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">Icon</span><span class="p">(</span><span class="n">imageVector</span> <span class="p">=</span> <span class="n">Lucide</span><span class="p">.</span><span class="n">SkipBack</span><span class="p">,</span> <span class="n">contentDescription</span> <span class="p">=</span> <span class="s">&quot;Previous&quot;</span><span class="p">,</span> <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">20.</span><span class="n">dp</span><span class="p">))</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="n">Button</span><span class="p">(</span><span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span> <span class="p">},</span> <span class="n">backgroundColor</span> <span class="p">=</span> <span class="n">Theme</span><span class="p">[</span><span class="n">colors</span><span class="p">][</span><span class="n">primary</span><span class="p">],</span> <span class="n">contentColor</span> <span class="p">=</span> <span class="n">Theme</span><span class="p">[</span><span class="n">colors</span><span class="p">][</span><span class="n">onPrimary</span><span class="p">],</span> <span class="n">contentPadding</span> <span class="p">=</span> <span class="n">PaddingValues</span><span class="p">(</span><span class="m">16.</span><span class="n">dp</span><span class="p">),</span> <span class="n">shape</span> <span class="p">=</span> <span class="n">Theme</span><span class="p">[</span><span class="n">shapes</span><span class="p">][</span><span class="n">buttonShape</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">Icon</span><span class="p">(</span><span class="n">imageVector</span> <span class="p">=</span> <span class="n">Lucide</span><span class="p">.</span><span class="n">Pause</span><span class="p">,</span> <span class="n">contentDescription</span> <span class="p">=</span> <span class="s">&quot;Pause&quot;</span><span class="p">,</span> <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">24.</span><span class="n">dp</span><span class="p">))</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="n">Button</span><span class="p">(</span><span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span> <span class="p">},</span> <span class="n">contentPadding</span> <span class="p">=</span> <span class="n">PaddingValues</span><span class="p">(</span><span class="m">12.</span><span class="n">dp</span><span class="p">),</span> <span class="n">shape</span> <span class="p">=</span> <span class="n">Theme</span><span class="p">[</span><span class="n">shapes</span><span class="p">][</span><span class="n">buttonShape</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">Icon</span><span class="p">(</span><span class="n">imageVector</span> <span class="p">=</span> <span class="n">Lucide</span><span class="p">.</span><span class="n">SkipForward</span><span class="p">,</span> <span class="n">contentDescription</span> <span class="p">=</span> <span class="s">&quot;Next&quot;</span><span class="p">,</span> <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">20.</span><span class="n">dp</span><span class="p">))</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>轮廓修饰符</h2>

<p>最后但同样重要的是，Compose Unstyled 引入了一些 Compose Foundation 中缺少的样式 <code>Modifier</code>，但这些修饰符对于构建视觉丰富的界面必不可少：</p>

<h3>轮廓</h3>

<p>与 Compose Foundation 的 <code>border()</code> 修饰符不同，此修饰符不会影响布局。它还会在组件周围而不是内部进行绘制。当你需要一个与阴影完美融合的半透明轮廓时，这个功能非常方便：</p>

<p><img src="file:///Users/alexhilton/Downloads/compose-style-3.png" alt="" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">SimpleButton</span><span class="p">(</span>
</span><span class='line'>  <span class="n">shape</span> <span class="p">=</span> <span class="n">RectangleShape</span><span class="p">,</span>
</span><span class='line'>  <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">outline</span><span class="p">(</span><span class="m">2.</span><span class="n">dp</span><span class="p">,</span> <span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">xFF3B82F6</span><span class="p">),</span> <span class="n">shape</span> <span class="p">=</span> <span class="n">RectangleShape</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="n">SimpleButton</span><span class="p">(</span>
</span><span class='line'>  <span class="n">shape</span> <span class="p">=</span> <span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">8.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>  <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">outline</span><span class="p">(</span><span class="m">2.</span><span class="n">dp</span><span class="p">,</span> <span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">xFF3B82F6</span><span class="p">),</span> <span class="n">shape</span> <span class="p">=</span> <span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">8.</span><span class="n">dp</span><span class="p">))</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="n">SimpleButton</span><span class="p">(</span>
</span><span class='line'>  <span class="n">shape</span> <span class="p">=</span> <span class="n">CircleShape</span><span class="p">,</span>
</span><span class='line'>  <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">outline</span><span class="p">(</span><span class="m">2.</span><span class="n">dp</span><span class="p">,</span> <span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">xFF3B82F6</span><span class="p">),</span> <span class="n">shape</span> <span class="p">=</span> <span class="n">CircleShape</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>焦点环</h3>

<p>焦点环在处理键盘导航和焦点时非常重要。它们只有在获得焦点时才会渲染轮廓。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">interactionSource</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">MutableInteractionSource</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'><span class="n">SimpleButton</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">focusRing</span><span class="p">(</span>
</span><span class='line'>        <span class="n">interactionSource</span> <span class="p">=</span> <span class="n">interactionSource</span><span class="p">,</span>
</span><span class='line'>        <span class="n">width</span> <span class="p">=</span> <span class="m">2.</span><span class="n">dp</span><span class="p">,</span>
</span><span class='line'>        <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">xFF3B82F6</span><span class="p">),</span>
</span><span class='line'>        <span class="n">shape</span> <span class="p">=</span> <span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">8.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>        <span class="n">offset</span> <span class="p">=</span> <span class="m">2.</span><span class="n">dp</span>
</span><span class='line'>    <span class="p">),</span>
</span><span class='line'>    <span class="n">interactionSource</span> <span class="p">=</span> <span class="n">interactionSource</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>然后呢？</h2>

<p>即将推出的组件包括：</p>

<ul>
<li>侧边栏</li>
<li>工具提示</li>
<li>上下文菜单</li>
</ul>


<p>以及更多。</p>

<p>如果你愿意为该项目提供资金支持，我们还提供<a href="https://composables.com/ui-kit">正在制作中的 UI Kit</a>（链接：<a href="https://composables.com/ui-kit%EF%BC%89%E3%80%82%E8%AF%A5">https://composables.com/ui-kit%EF%BC%89%E3%80%82%E8%AF%A5</a> UI Kit 是一套完整的设计系统，适用于触控和指针应用。</p>

<p>为了使这些 API 完美无缺，我们投入了大量的工作和专业知识。通过资金支持该项目，你将在未来几年获得更多资源，而我则可以继续从事开源工作，同时支付房租。</p>

<p>想要随时了解最新动态？请务必<a href="https://github.com/composablehorizo%E2%80%8B%E2%80%8Bns/compose-unstyled/">在 Github 上关注 Unstyled</a>（链接:<a href="https://github.com/composablehorizo%E2%80%8B%E2%80%8Bns/compose-unstyled/%EF%BC%89%E3%80%82">https://github.com/composablehorizo%E2%80%8B%E2%80%8Bns/compose-unstyled/%EF%BC%89%E3%80%82</a></p>

<p>想要评论这篇文章吗？<a href="https://github.com/composablehorizo%E2%80%8B%E2%80%8Bns/compose-unstyled/discussions/106">在 GitHub 上讨论 →</a>（链接：<a href="https://github.com/composablehorizo%E2%80%8B%E2%80%8Bns/compose-unstyled/discussions/106%EF%BC%89">https://github.com/composablehorizo%E2%80%8B%E2%80%8Bns/compose-unstyled/discussions/106%EF%BC%89</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[运行时着色器实战：实现元球（Metaballs）动效]]></title>
    <link href="https://alexhilton.github.io/blog/2025/09/06/metaballs-with-runtimeshaders/"/>
    <updated>2025-09-06T23:19:16+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/09/06/metaballs-with-runtimeshaders</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自「Metaballs with Runtimeshaders」，原文链接<a href="https://medium.com/@off.mind.by/metaballs-with-runtimeshaders-bb7e5f6b27c2">https://medium.com/@off.mind.by/metaballs-with-runtimeshaders-bb7e5f6b27c2</a>，由Alex Volkov发布于2025810。</p></blockquote>

<p><a href="https://alexhilton.github.io/blog/2025/09/06/metaballs-with-runtimeshaders/"><img src="https://miro.medium.com/v2/resize:fit:2000/1*fQOua40zD_PlbsejLeHBeg.png" title="auto auto" ></a></p>

<!-- more -->


<p>大家好！今天我想向大家介绍一种最简单却又出人意料地令人印象深刻的效果：元球。</p>

<p>元球是一种看起来像有机体的形状，其特点是它们能够在近距离内融合在一起，形成单个连续的物体。</p>

<p>使用 GLSL 着色器创建这种效果非常简单，只需几行代码即可。当然，你也可以在网上找到关于如何将其移植到 AGSL 并在 Compose 中使用的教程。然而，主要的问题是这种效果需要两个（或更多）物体。我找到的所有教程都只是在单个着色器中模拟两个组件。这种方法在视觉上很有效，但在实际项目中使用时会带来很多限制。因此，我开始以一种每个元素只扭曲自身的方式来构建这种效果——尽可能地让一切看起来公平、干净。</p>

<p>好了，既然我们已经明白了为什么这不仅仅是一个metaball教程，而是一个全新的教程——那就开始吧！和往常一样，我把所有内容分解成几个部分：</p>

<ul>
<li>首先，我会快速解释一下这种效果在经典实现中的工作原理，然后我们会进行哪些不同的调整。</li>
<li>然后，我会介绍一下Compose的简单设置，让它运行起来。</li>
<li>最后，我们会更详细地介绍着色器本身。</li>
</ul>


<p>最终，我们应该得到如下所示的效果：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1192/1*2oZU3pJdUVUq1eR56tVTNw.gif" alt="这只是其中一个选项；这种效果是高度可定制的。" /></p>

<blockquote><p>开始之前，先简单说明一下——我不会为我制作的每个效果都制作教程，但你可以在我的 <a href="https://github.com/AleksiejVolkov/runtimeshaders">GitHub</a> （链接：<a href="https://github.com/AleksiejVolkov/runtimeshaders%EF%BC%89%E4%B8%8A%E6%89%BE%E5%88%B0%E6%89%80%E6%9C%89%E6%95%99%E7%A8%8B%E3%80%82%E4%BD%A0%E8%BF%98%E5%8F%AF%E4%BB%A5%E5%9C%A8%E6%88%91%E7%9A%84">https://github.com/AleksiejVolkov/runtimeshaders%EF%BC%89%E4%B8%8A%E6%89%BE%E5%88%B0%E6%89%80%E6%9C%89%E6%95%99%E7%A8%8B%E3%80%82%E4%BD%A0%E8%BF%98%E5%8F%AF%E4%BB%A5%E5%9C%A8%E6%88%91%E7%9A%84</a> <a href="https://t.me/droidshaderworks">Telegram 频道</a> 上找到视频、新效果公告以及问题的解答。期待在那里见到你！</p></blockquote>

<p>要创建元球效果，我们先来回顾一下基础知识。如何在着色器中绘制一个简单的圆圈？最简单的方法是定义一个中心和一个半径，然后使用 step 函数。如果像素比半径更靠近中心，则返回 1；如果像素比半径更远离中心，则返回 0。实际代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="k">float</span> <span class="n">ball</span><span class="p">(</span> <span class="k">vec2</span> <span class="n">p</span><span class="p">,</span> <span class="k">vec2</span> <span class="n">center</span><span class="p">,</span> <span class="k">float</span> <span class="n">radius</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">step</span><span class="p">(</span><span class="n">length</span><span class="p">(</span><span class="n">p</span><span class="o">-</span><span class="n">center</span><span class="p">),</span> <span class="n">radius</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">void</span> <span class="n">mainImage</span><span class="p">(</span> <span class="k">out</span> <span class="k">vec4</span> <span class="n">fragColor</span><span class="p">,</span> <span class="k">in</span> <span class="k">vec2</span> <span class="n">fragCoord</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Normalized pixel coordinates (from -0.5 to 0.5)</span>
</span><span class='line'>    <span class="k">vec2</span> <span class="n">uv</span> <span class="o">=</span> <span class="n">fragCoord</span><span class="o">/</span><span class="n">iResolution</span><span class="p">.</span><span class="n">xy</span> <span class="o">-</span> <span class="mf">0.5</span><span class="p">;</span>
</span><span class='line'>    <span class="n">uv</span><span class="p">.</span><span class="n">x</span> <span class="o">*=</span> <span class="n">iResolution</span><span class="p">.</span><span class="n">x</span> <span class="o">/</span> <span class="n">iResolution</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">float</span> <span class="n">b1</span> <span class="o">=</span> <span class="n">ball</span><span class="p">(</span><span class="n">uv</span><span class="p">,</span> <span class="k">vec2</span><span class="p">(</span><span class="mf">0.</span><span class="p">),</span> <span class="mf">0.2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">vec3</span> <span class="n">color</span> <span class="o">=</span> <span class="n">b1</span><span class="o">*</span><span class="k">vec3</span><span class="p">(</span><span class="mf">1.</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fragColor</span> <span class="o">=</span> <span class="k">vec4</span><span class="p">(</span><span class="n">color</span><span class="p">,</span><span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>这段代码是用 GLSL 编写的，而不是 AGSL，你可以直接复制粘贴到 shadertoy.com 中。在本节中，所有代码都将采用相同的方法，让你无需运行 Android Studio 即可更轻松地测试和查看结果。</p></blockquote>

<p><em>结果是一个最简单的圆圈。如果你对着色器稍有了解，这部分应该很容易理解。</em></p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/1*PTHu_h9ayCxqi-EgVN2nVQ.png" alt="最简单的圆圈" /></p>

<p>现在，让我们添加第二个圆圈，并将它们水平放置，使它们略微分开，而不是同时位于中心。这次，我们不再使用步长函数来定义边缘，而是使用反距离。我们仍然会得到两个圆圈，但边缘不再是锐利的，而是平滑的渐变，使圆圈看起来更像发光的点。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="k">float</span> <span class="n">ball</span><span class="p">(</span><span class="k">vec2</span> <span class="n">p</span><span class="p">,</span> <span class="k">vec2</span> <span class="n">center</span><span class="p">,</span> <span class="k">float</span> <span class="n">radius</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">dist</span> <span class="o">=</span> <span class="n">length</span><span class="p">(</span><span class="n">p</span> <span class="o">-</span> <span class="n">center</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">radius</span> <span class="o">/</span> <span class="n">dist</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">void</span> <span class="n">mainImage</span><span class="p">(</span> <span class="k">out</span> <span class="k">vec4</span> <span class="n">fragColor</span><span class="p">,</span> <span class="k">in</span> <span class="k">vec2</span> <span class="n">fragCoord</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="c1">// Normalized pixel coordinates (from -0.5 to 0.5)</span>
</span><span class='line'>    <span class="k">vec2</span> <span class="n">uv</span> <span class="o">=</span> <span class="n">fragCoord</span><span class="o">/</span><span class="n">iResolution</span><span class="p">.</span><span class="n">xy</span> <span class="o">-</span> <span class="mf">0.5</span><span class="p">;</span>
</span><span class='line'>    <span class="n">uv</span><span class="p">.</span><span class="n">x</span> <span class="o">*=</span> <span class="n">iResolution</span><span class="p">.</span><span class="n">x</span> <span class="o">/</span> <span class="n">iResolution</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">float</span> <span class="n">b1</span> <span class="o">=</span> <span class="n">ball</span><span class="p">(</span><span class="n">uv</span><span class="p">,</span> <span class="k">vec2</span><span class="p">(</span><span class="o">-</span><span class="mf">0.4</span><span class="p">,</span><span class="mf">0.</span><span class="p">),</span> <span class="mf">0.1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">b2</span> <span class="o">=</span> <span class="n">ball</span><span class="p">(</span><span class="n">uv</span><span class="p">,</span> <span class="k">vec2</span><span class="p">(</span><span class="mf">0.4</span><span class="p">,</span><span class="mf">0.</span><span class="p">),</span> <span class="mf">0.1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">float</span> <span class="n">circles</span> <span class="o">=</span> <span class="n">b1</span> <span class="o">+</span> <span class="n">b2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">vec3</span> <span class="n">color</span> <span class="o">=</span> <span class="n">circles</span><span class="o">*</span><span class="k">vec3</span><span class="p">(</span><span class="mf">1.</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fragColor</span> <span class="o">=</span> <span class="k">vec4</span><span class="p">(</span><span class="n">color</span><span class="p">,</span><span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最终效果如下：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/1*rXfBtvZOlpnK98XEy7HyUA.png" alt="" /></p>

<p>如你所见，在最终图像中，我们将两个圆的值相加。即使现在，如果你将它们移近，你也会看到它们开始合并。基本上，效果已经存在——剩下的就是对最终值应用一些函数，或者再次使用 step 函数截断低于特定阈值的所有内容，保留其内部内容。就这样——元球效果完成了！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="k">float</span> <span class="n">ball</span><span class="p">(</span><span class="k">vec2</span> <span class="n">p</span><span class="p">,</span> <span class="k">vec2</span> <span class="n">center</span><span class="p">,</span> <span class="k">float</span> <span class="n">radius</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">dist</span> <span class="o">=</span> <span class="n">length</span><span class="p">(</span><span class="n">p</span> <span class="o">-</span> <span class="n">center</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">radius</span> <span class="o">/</span> <span class="n">dist</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">void</span> <span class="n">mainImage</span><span class="p">(</span> <span class="k">out</span> <span class="k">vec4</span> <span class="n">fragColor</span><span class="p">,</span> <span class="k">in</span> <span class="k">vec2</span> <span class="n">fragCoord</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Normalized pixel coordinates (from -0.5 to 0.5)   </span>
</span><span class='line'>    <span class="k">vec2</span> <span class="n">uv</span> <span class="o">=</span> <span class="n">fragCoord</span><span class="o">/</span><span class="n">iResolution</span><span class="p">.</span><span class="n">xy</span> <span class="o">-</span> <span class="mf">0.5</span><span class="p">;</span>
</span><span class='line'>    <span class="n">uv</span><span class="p">.</span><span class="n">x</span> <span class="o">*=</span> <span class="n">iResolution</span><span class="p">.</span><span class="n">x</span> <span class="o">/</span> <span class="n">iResolution</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// make circles moving slightly along horizontal direction</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">horiz</span> <span class="o">=</span> <span class="p">(</span><span class="mf">0.5</span><span class="o">*</span><span class="n">sin</span><span class="p">(</span><span class="n">iTime</span><span class="p">)</span><span class="o">+</span><span class="mf">0.5</span><span class="p">)</span><span class="o">*</span><span class="mf">0.2</span><span class="p">;</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">b1</span> <span class="o">=</span> <span class="n">ball</span><span class="p">(</span><span class="n">uv</span><span class="p">,</span> <span class="k">vec2</span><span class="p">(</span><span class="o">-</span><span class="mf">0.3</span><span class="o">+</span><span class="n">horiz</span><span class="p">,</span><span class="mf">0.</span><span class="p">),</span> <span class="mf">0.1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">b2</span> <span class="o">=</span> <span class="n">ball</span><span class="p">(</span><span class="n">uv</span><span class="p">,</span> <span class="k">vec2</span><span class="p">(</span><span class="mf">0.3</span><span class="o">-</span><span class="n">horiz</span><span class="p">,</span><span class="mf">0.</span><span class="p">),</span> <span class="mf">0.1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">float</span> <span class="n">circles</span> <span class="o">=</span> <span class="n">b1</span> <span class="o">+</span> <span class="n">b2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">float</span> <span class="n">threshold</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">alpha</span> <span class="o">=</span> <span class="n">step</span><span class="p">(</span><span class="n">threshold</span><span class="p">,</span> <span class="n">circles</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">vec3</span> <span class="n">color</span> <span class="o">=</span> <span class="n">alpha</span><span class="o">*</span><span class="k">vec3</span><span class="p">(</span><span class="mf">1.</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fragColor</span> <span class="o">=</span> <span class="k">vec4</span><span class="p">(</span><span class="n">color</span><span class="p">,</span><span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://miro.medium.com/v2/resize:fit:1400/1*rIVQla9lc5qbYGaCMVmI4g.gif" alt="最简单的元球效果" /></p>

<p>当然，除了阶跃函数，你还可以使用 SmoothStep，添加距离的平方反比，或者尝试不同的公式，调整系数等等。所有这些都是可能的，并且都会改变最终的外观，但核心思想保持不变：我们用平滑衰减公式定义圆，将结果相加，并在某个阈值处进行截断。这样，当形状接近时，它们的场之和会超过阈值，从而合并成一个形状——而当它们相距较远时，则不会合并。</p>

<p>现在我们已经了解了如何创建元球效果，看起来我们只需打开 Android Studio 就可以开始构建了！然而，我们很快就会遇到两个问题：</p>

<ul>
<li>目前，所有按钮都像圆形一样工作——这是意料之中的。但如果我们希望合并按钮具有其他形状，则需要使用例如 SDF 方法。即便如此，形状仍然在着色器内部定义，这意味着我们不能简单地在 Compose 视图中应用 RoundedCornerShape 并期望它能够正常工作。</li>
<li>两个按钮必须在同一个着色器中定义。如果有三个按钮，则三个按钮都必须位于同一个着色器中。最重要的是——我们如何处理这些按钮的点击？</li>
</ul>


<p>如果你查找有关此效果的文章，你会发现这两个问题通常被忽略。然而，对我来说，它们至关重要——这正是我决定撰写本教程的原因。我建议采用一种不同的方法来解决这两个问题。</p>

<p>首先，我们不会在着色器内部定义形状。相反，我们将变形坐标系本身，从而解决不同形状的问题。</p>

<p>其次，效果中的每个元素都会获得自己的着色器实例，但我们也会将相邻元素的坐标传递给它。这解决了点击处理问题，因为现在每个元素都是一个独立的可组合元素，拥有自己的属性和 lambda 表达式。下图所示：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/1*7yVd3iok98-pQNLWIhP1mQ.png" alt="绿色表示可组合元素。粉色表示着色器" /></p>

<p>因此，我们的任务可以分为两个主要的子任务。一旦解决了这两个子任务，我们就能得到最终的效果。首先，我们需要学习如何变形画布以获得与元球相同的视觉效果。然后，我们将收集容器中每个子元素的位置数据，并将其传递给其他着色器。让我们先从第一部分开始。</p>

<p>让我们从使用着色器所需的最简单的设置开始。下面是可组合部分——你可以直接复制粘贴到你的项目中，它应该可以立即运行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">MetaballShaderScreen</span><span class="p">(</span><span class="n">paddingValues</span><span class="p">:</span> <span class="n">PaddingValues</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">shader</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">RuntimeShader</span><span class="p">(</span><span class="n">metaballShader</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Box</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="n">paddingValues</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">fillMaxSize</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">xFF171717</span><span class="p">)),</span>
</span><span class='line'>        <span class="n">contentAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">Center</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">ShadedButton</span><span class="p">(</span><span class="n">shader</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">ShadedButton</span><span class="p">(</span>
</span><span class='line'>
</span><span class='line'><span class="n">shader</span><span class="p">:</span> <span class="n">RuntimeShader</span><span class="p">,)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">boxSize</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="n">IntSize</span><span class="p">.</span><span class="n">Zero</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>        <span class="n">contentAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">Center</span><span class="p">,</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">50.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                <span class="p">.</span><span class="n">fillMaxSize</span><span class="p">()</span>
</span><span class='line'>                <span class="p">.</span><span class="n">onSizeChanged</span> <span class="p">{</span> <span class="n">boxSize</span> <span class="p">=</span> <span class="n">it</span> <span class="p">}</span>
</span><span class='line'>                <span class="p">.</span><span class="n">graphicsLayer</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">shader</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span>
</span><span class='line'>                        <span class="s">&quot;resolution&quot;</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">boxSize</span><span class="p">.</span><span class="n">width</span><span class="p">.</span><span class="n">toFloat</span><span class="p">(),</span>
</span><span class='line'>                        <span class="n">boxSize</span><span class="p">.</span><span class="n">width</span><span class="p">.</span><span class="n">toFloat</span><span class="p">())</span>
</span><span class='line'>                    <span class="k">this</span><span class="p">.</span><span class="n">renderEffect</span> <span class="p">=</span> <span class="n">RenderEffect</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">createRuntimeShaderEffect</span><span class="p">(</span><span class="n">shader</span><span class="p">,</span> <span class="s">&quot;image&quot;</span><span class="p">)</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">asComposeRenderEffect</span><span class="p">()</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>        <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>                <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">fillMaxSize</span><span class="p">()</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">clip</span><span class="p">(</span><span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">10.</span><span class="n">dp</span><span class="p">))</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">xFFF6F6F6</span><span class="p">))</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">Icon</span><span class="p">(</span>
</span><span class='line'>            <span class="n">imageVector</span> <span class="p">=</span> <span class="n">Icons</span><span class="p">.</span><span class="n">Default</span><span class="p">.</span><span class="n">MoreVert</span><span class="p">,</span>
</span><span class='line'>            <span class="n">contentDescription</span> <span class="p">=</span> <span class="s">&quot;Expand Menu&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">tint</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Black</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以下是着色器代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">@Language</span><span class="p">(</span><span class="s">&quot;AGSL&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="py">metaballShader</span> <span class="p">=</span> <span class="s">&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">uniform</span> <span class="n">vec2</span> <span class="n">resolution</span><span class="p">;</span>
</span><span class='line'>    <span class="n">uniform</span> <span class="n">shader</span> <span class="n">image</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">vec2</span> <span class="n">NormalizeCoordinates</span><span class="p">(</span><span class="n">vec2</span> <span class="n">o</span><span class="p">,</span> <span class="n">vec2</span> <span class="n">r</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">float2</span> <span class="n">uv</span> <span class="p">=</span> <span class="n">o</span> <span class="p">/</span> <span class="n">r</span> <span class="p">-</span> <span class="m">0.5</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">x</span> <span class="p">&gt;=</span> <span class="n">r</span><span class="p">.</span><span class="n">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">uv</span><span class="p">.</span><span class="n">x</span> <span class="p">*=</span> <span class="n">r</span><span class="p">.</span><span class="n">x</span> <span class="p">/</span> <span class="n">r</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">uv</span><span class="p">.</span><span class="n">y</span> <span class="p">*=</span> <span class="n">r</span><span class="p">.</span><span class="n">y</span> <span class="p">/</span> <span class="n">r</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">uv</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">vec4</span> <span class="n">GetImageTexture</span><span class="p">(</span><span class="n">vec2</span> <span class="n">p</span><span class="p">,</span> <span class="n">vec2</span> <span class="n">pivot</span><span class="p">,</span> <span class="n">vec2</span> <span class="n">r</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">x</span> <span class="p">&gt;</span> <span class="n">r</span><span class="p">.</span><span class="n">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">p</span><span class="p">.</span><span class="n">x</span> <span class="p">/=</span> <span class="n">r</span><span class="p">.</span><span class="n">x</span> <span class="p">/</span> <span class="n">r</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">p</span><span class="p">.</span><span class="n">y</span> <span class="p">/=</span> <span class="n">r</span><span class="p">.</span><span class="n">y</span> <span class="p">/</span> <span class="n">r</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">p</span> <span class="p">+=</span> <span class="n">pivot</span><span class="p">;</span>
</span><span class='line'>        <span class="n">p</span> <span class="p">*=</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">image</span><span class="p">.</span><span class="n">eval</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">vec4</span> <span class="n">main</span><span class="p">(</span><span class="n">float2</span> <span class="n">fragCoord</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">float2</span> <span class="n">uv</span> <span class="p">=</span> <span class="n">NormalizeCoordinates</span><span class="p">(</span><span class="n">fragCoord</span><span class="p">,</span> <span class="n">resolution</span><span class="p">);</span>
</span><span class='line'>        <span class="n">vec4</span> <span class="k">final</span> <span class="p">=</span> <span class="n">GetImageTexture</span><span class="p">(</span><span class="n">uv</span><span class="p">,</span> <span class="n">vec2</span><span class="p">(</span><span class="m">0.5</span><span class="p">),</span> <span class="n">resolution</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">vec4</span><span class="p">(</span><span class="k">final</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span><span class="s">&quot;&quot;&quot;.trimIndent()</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>在着色器中，我已经包含了两个必要的方法：一个用于规范化，一个用于从输入纹理中获取颜色。我在之前的课程中介绍过这些方法，因此你可以简单地将它们视为必需的样板代码——它们不会影响效果的核心逻辑——或者查看我之前的教程，我在那里详细解释了它们。本课程已经相当丰富，甚至可能信息量过大，所以我在这里就不赘述了。</p></blockquote>

<p>太好了！如果一切设置正确，我们将得到一个尚未添加任何内容的着色器——它只是绘制所有内容，就像着色器根本不存在一样。结果应该只是一个普通的按钮，没什么特别的：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/1*V_yEnqGelKeDKYaPwUklTg.png" alt="没什么特别的，只是一个按钮 :)" /></p>

<p>在最终的代码中，变形将基于其他元素，但由于我们目前还没有这些元素，我只需添加一个虚拟点并将其绘制在画布上即可。这只是测试代码，我们稍后会将其移除。我还会将时间传递给着色器，并使该点水平移动。这将是我们的虚拟点，我们将使用它作为画布变形的参考：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="c1">//...</span>
</span><span class='line'> <span class="k">var</span> <span class="py">time</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="m">0f</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="c1">//...</span>
</span><span class='line'>  <span class="p">.</span><span class="n">graphicsLayer</span> <span class="p">{</span>
</span><span class='line'>       <span class="c1">//...</span>
</span><span class='line'>        <span class="n">shader</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span><span class="s">&quot;time&quot;</span><span class="p">,</span> <span class="n">time</span><span class="p">)</span>
</span><span class='line'><span class="c1">//...</span>
</span></code></pre></td></tr></table></div></figure>


<p>在着色器代码中，我们必须添加时间统一函数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="k">uniform</span> <span class="k">float</span> <span class="n">time</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>并添加虚拟圆：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'> <span class="k">float</span> <span class="n">getCircle</span><span class="p">(</span><span class="k">vec2</span> <span class="n">p</span><span class="p">,</span> <span class="k">vec2</span> <span class="n">pivot</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">step</span><span class="p">(</span><span class="n">length</span><span class="p">(</span><span class="n">pivot</span> <span class="o">-</span> <span class="n">p</span><span class="p">),</span> <span class="mf">0.1</span><span class="p">);</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>同时将虚拟圆添加到最终输出中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'> <span class="k">vec4</span> <span class="n">main</span><span class="p">(</span><span class="n">float2</span> <span class="n">fragCoord</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//...</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">float</span> <span class="n">circleHorizontalPosition</span> <span class="o">=</span> <span class="n">sin</span><span class="p">(</span><span class="mf">0.5</span><span class="o">*</span><span class="n">time</span><span class="p">)</span><span class="o">*</span><span class="mf">2.</span><span class="p">;</span>
</span><span class='line'>        <span class="k">float</span> <span class="n">helperCicrle</span> <span class="o">=</span> <span class="n">getCircle</span><span class="p">(</span><span class="n">uv</span><span class="p">,</span> <span class="k">vec2</span><span class="p">(</span><span class="n">circleHorizontalPosition</span><span class="p">,</span> <span class="mf">0.</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">final</span> <span class="o">=</span> <span class="n">mix</span><span class="p">(</span><span class="n">final</span><span class="p">,</span> <span class="n">helperCicrle</span><span class="o">*</span><span class="k">vec4</span><span class="p">(</span><span class="mf">1.</span><span class="p">,</span><span class="mf">0.</span><span class="p">,</span><span class="mf">0.</span><span class="p">,</span><span class="mf">1.</span><span class="p">),</span> <span class="n">helperCicrle</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">vec4</span><span class="p">(</span><span class="n">final</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样，我们应该看到一个红色的参考点，我们将以此为基础来扭曲按钮。</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/1*rikNEHT918EmDeWLzQsWbA.gif" alt="" /></p>

<p>现在，让我们尝试计算控制点对按钮的影响，使用与计算元球完全相同的方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'> <span class="k">float</span> <span class="n">getInfluence</span><span class="p">(</span><span class="k">vec2</span> <span class="n">uv</span><span class="p">,</span> <span class="k">vec2</span> <span class="n">controlPoint</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">float</span> <span class="n">dist</span> <span class="o">=</span> <span class="n">length</span><span class="p">(</span><span class="n">controlPoint</span><span class="o">-</span><span class="n">uv</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="mf">1.</span><span class="o">/</span><span class="n">dist</span><span class="p">;</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'> <span class="k">vec4</span> <span class="n">main</span><span class="p">(</span><span class="n">float2</span> <span class="n">fragCoord</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">float2</span> <span class="n">uv</span> <span class="o">=</span> <span class="n">NormalizeCoordinates</span><span class="p">(</span><span class="n">fragCoord</span><span class="p">,</span> <span class="n">resolution</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">float</span> <span class="n">circleHorizontalPosition</span> <span class="o">=</span> <span class="n">sin</span><span class="p">(</span><span class="mf">0.2</span><span class="o">*</span><span class="n">time</span><span class="p">)</span><span class="o">*</span><span class="mf">2.</span><span class="p">;</span>
</span><span class='line'>        <span class="k">vec2</span> <span class="n">controlPointPos</span> <span class="o">=</span> <span class="k">vec2</span><span class="p">(</span><span class="n">circleHorizontalPosition</span><span class="p">,</span> <span class="mf">0.</span><span class="p">);</span>
</span><span class='line'>        <span class="k">float</span> <span class="n">helperCicrle</span> <span class="o">=</span> <span class="n">getCircle</span><span class="p">(</span><span class="n">uv</span><span class="p">,</span> <span class="n">controlPointPos</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">float</span> <span class="n">influence</span> <span class="o">=</span> <span class="n">getInfluence</span><span class="p">(</span><span class="n">uv</span><span class="p">,</span> <span class="n">controlPointPos</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">uv</span> <span class="o">*=</span> <span class="mf">1.</span><span class="o">-</span><span class="n">influence</span><span class="p">;</span> <span class="c1">// why here is 1 - influence was explained in Deform the Canvas tutorial</span>
</span><span class='line'>        <span class="k">vec4</span> <span class="n">final</span> <span class="o">=</span> <span class="n">GetImageTexture</span><span class="p">(</span><span class="n">uv</span><span class="p">,</span> <span class="k">vec2</span><span class="p">(</span><span class="mf">0.5</span><span class="p">),</span> <span class="n">resolution</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">final</span> <span class="o">=</span> <span class="n">mix</span><span class="p">(</span><span class="n">final</span><span class="p">,</span><span class="n">helperCicrle</span><span class="o">*</span><span class="k">vec4</span><span class="p">(</span><span class="mf">1.</span><span class="p">,</span><span class="mf">0.</span><span class="p">,</span><span class="mf">0.</span><span class="p">,</span><span class="mf">1.</span><span class="p">),</span><span class="n">helperCicrle</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">vec4</span><span class="p">(</span><span class="n">final</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://miro.medium.com/v2/resize:fit:1400/0*ivjxpAXa4_O6hDtt.gif" alt="够搞笑的，但这不是我们想要的" /></p>

<p>结果很搞笑，但不是我们的预期。内部的瑕疵（“洞”效果）可以通过将影响值限制在 0 到 1 之间轻松修复。然而，这仍然不是我们想要的结果——我们得到的是控制点周围的区域膨胀了，而我们需要的效果几乎是相反的。那么，我们该如何实现呢？</p>

<p>答案很简单，也有点意思——虽然我花了一些时间才明白。这个想法是将坐标中心到控制点的距离与两个距离之和进行比较：从中心到当前点 (uv) 的距离，以及从当前点到控制点的距离。下图是按钮内部一个随机点的示意图。这个距离总是大于直接到中心的距离，而这个技巧就是让我们实现元球效果的关键！</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/1*n7kIFbwMCFNmhinMLfBP6g.png" alt="如果我们将绿色到红色的距离加上到中心的距离，那么绿色到红色的距离总是大于中心到红色的距离。" /></p>

<p>所以，为了将我们现在的效果变成几乎完整的效果（除了强度设置和其他一些小的调整），我们实际上只需要将中心添加到距离计算中——就这样！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'>  <span class="k">float</span> <span class="n">getInfluence</span><span class="p">(</span><span class="k">vec2</span> <span class="n">uv</span><span class="p">,</span> <span class="k">vec2</span> <span class="n">controlPoint</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// float dist = length(controlPoint-uv); - was like that</span>
</span><span class='line'>        <span class="k">float</span> <span class="n">dist</span> <span class="o">=</span> <span class="n">length</span><span class="p">(</span><span class="n">controlPoint</span><span class="o">-</span><span class="n">uv</span><span class="p">)</span> <span class="o">+</span> <span class="n">length</span><span class="p">(</span><span class="n">uv</span><span class="p">);</span> <span class="c1">//added length(uv);</span>
</span><span class='line'>        <span class="k">return</span> <span class="mf">1.</span><span class="o">/</span><span class="n">dist</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://miro.medium.com/v2/resize:fit:1400/0*ArDCdZxeCKBBmsfQ.gif" alt="我们已经得到了想要的结果" /></p>

<blockquote><p><em>现在可以添加“mass”或除以距离的平方来加快淡出速度。但这些都是完善的细节，并非核心效果逻辑的一部分。我强烈建议你自己尝试一下 getInfluence 方法。</em></p></blockquote>

<p>最后一步是传递另一个组件的坐标，而不是使用着色器内的控制点。听起来很简单，但这里有一些需要讨论的地方。对我来说，最难的部分是获取与着色器本身位于同一“系统”中的坐标。虽然控制点位于着色器内部，但我们使用 uv 创建了它，而 uv 已经根据视图的大小进行了归一化。但是，现在我们要获取相对于父容器的位置。那么，我们如何将所有这些结合起来呢？</p>

<p>首先，让我们在容器中添加第二个按钮，并将所有必要的参数传递给着色器。之后，我们将深入着色器逻辑的核心——在我看来，这是最有趣的部分。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">TestShaderScreen</span><span class="p">(</span><span class="n">paddingValues</span><span class="p">:</span> <span class="n">PaddingValues</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">shader</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">RuntimeShader</span><span class="p">(</span><span class="n">metaballShader</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">parentBoxSize</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="n">IntSize</span><span class="p">.</span><span class="n">Zero</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">firstButtonPosition</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="n">Offset</span><span class="p">.</span><span class="n">Zero</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">secondButtonPosition</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="n">Offset</span><span class="p">.</span><span class="n">Zero</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="n">paddingValues</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">fillMaxSize</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">xFF171717</span><span class="p">))</span>
</span><span class='line'>            <span class="p">.</span><span class="n">onSizeChanged</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">parentBoxSize</span><span class="p">.</span><span class="n">value</span> <span class="p">=</span> <span class="n">it</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>        <span class="n">contentAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">Center</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">ShadedButton</span><span class="p">(</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="n">start</span> <span class="p">=</span> <span class="m">70.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">50.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">onGloballyPositioned</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">firstButtonPosition</span><span class="p">.</span><span class="n">value</span> <span class="p">=</span> <span class="n">it</span><span class="p">.</span><span class="n">positionInParent</span><span class="p">()</span> <span class="p">+</span>
</span><span class='line'>                            <span class="n">Offset</span><span class="p">(</span>
</span><span class='line'>                                <span class="n">x</span> <span class="p">=</span> <span class="n">it</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="p">*</span> <span class="m">0.5f</span><span class="p">,</span>
</span><span class='line'>                                <span class="n">y</span> <span class="p">=</span> <span class="n">it</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="p">*</span> <span class="m">0.5f</span>
</span><span class='line'>                            <span class="p">)</span>
</span><span class='line'>                <span class="p">},</span>
</span><span class='line'>            <span class="n">icon</span> <span class="p">=</span> <span class="n">Icons</span><span class="p">.</span><span class="n">Filled</span><span class="p">.</span><span class="n">Favorite</span><span class="p">,</span>
</span><span class='line'>            <span class="n">shader</span> <span class="p">=</span> <span class="n">shader</span><span class="p">,</span>
</span><span class='line'>            <span class="n">parentBoxSize</span> <span class="p">=</span> <span class="n">parentBoxSize</span><span class="p">.</span><span class="n">value</span><span class="p">,</span>
</span><span class='line'>            <span class="n">otherViewPosition</span> <span class="p">=</span> <span class="n">secondButtonPosition</span><span class="p">.</span><span class="n">value</span><span class="p">,</span>
</span><span class='line'>            <span class="n">myPosition</span> <span class="p">=</span> <span class="n">firstButtonPosition</span><span class="p">.</span><span class="n">value</span><span class="p">,</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>        <span class="n">ShadedButton</span><span class="p">(</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="n">end</span> <span class="p">=</span> <span class="m">70.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">50.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">onGloballyPositioned</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">secondButtonPosition</span><span class="p">.</span><span class="n">value</span> <span class="p">=</span> <span class="n">it</span><span class="p">.</span><span class="n">positionInParent</span><span class="p">()</span> <span class="p">+</span>
</span><span class='line'>                            <span class="n">Offset</span><span class="p">(</span>
</span><span class='line'>                                <span class="n">x</span> <span class="p">=</span> <span class="n">it</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="p">*</span> <span class="m">0.5f</span><span class="p">,</span>
</span><span class='line'>                                <span class="n">y</span> <span class="p">=</span> <span class="n">it</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="p">*</span> <span class="m">0.5f</span>
</span><span class='line'>                            <span class="p">)</span>
</span><span class='line'>                <span class="p">},</span>
</span><span class='line'>            <span class="n">icon</span> <span class="p">=</span> <span class="n">Icons</span><span class="p">.</span><span class="n">Filled</span><span class="p">.</span><span class="n">Star</span><span class="p">,</span>
</span><span class='line'>            <span class="n">shader</span> <span class="p">=</span> <span class="n">shader</span><span class="p">,</span>
</span><span class='line'>            <span class="n">parentBoxSize</span> <span class="p">=</span> <span class="n">parentBoxSize</span><span class="p">.</span><span class="n">value</span><span class="p">,</span>
</span><span class='line'>            <span class="n">otherViewPosition</span> <span class="p">=</span> <span class="n">firstButtonPosition</span><span class="p">.</span><span class="n">value</span><span class="p">,</span>
</span><span class='line'>            <span class="n">myPosition</span> <span class="p">=</span> <span class="n">secondButtonPosition</span><span class="p">.</span><span class="n">value</span><span class="p">,</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">ShadedButton</span><span class="p">(</span>
</span><span class='line'>
</span><span class='line'><span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'><span class="n">icon</span><span class="p">:</span> <span class="n">ImageVector</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'><span class="n">shader</span><span class="p">:</span> <span class="n">RuntimeShader</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'><span class="n">parentBoxSize</span><span class="p">:</span> <span class="n">IntSize</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'><span class="n">myPosition</span><span class="p">:</span> <span class="n">Offset</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'><span class="n">otherViewPosition</span><span class="p">:</span> <span class="n">Offset</span><span class="p">,)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">boxSize</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="n">IntSize</span><span class="p">.</span><span class="n">Zero</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>        <span class="n">contentAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">Center</span><span class="p">,</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                <span class="p">.</span><span class="n">fillMaxSize</span><span class="p">()</span>
</span><span class='line'>                <span class="p">.</span><span class="n">onSizeChanged</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">boxSize</span> <span class="p">=</span> <span class="n">it</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="p">.</span><span class="n">graphicsLayer</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">shader</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span>
</span><span class='line'>                        <span class="s">&quot;resolution&quot;</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">boxSize</span><span class="p">.</span><span class="n">width</span><span class="p">.</span><span class="n">toFloat</span><span class="p">(),</span>
</span><span class='line'>                        <span class="n">boxSize</span><span class="p">.</span><span class="n">width</span><span class="p">.</span><span class="n">toFloat</span><span class="p">()</span>
</span><span class='line'>                    <span class="p">)</span>
</span><span class='line'>                    <span class="n">shader</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span>
</span><span class='line'>                        <span class="s">&quot;parentBoxSize&quot;</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">parentBoxSize</span><span class="p">.</span><span class="n">width</span><span class="p">.</span><span class="n">toFloat</span><span class="p">(),</span>
</span><span class='line'>                        <span class="n">parentBoxSize</span><span class="p">.</span><span class="n">height</span><span class="p">.</span><span class="n">toFloat</span><span class="p">()</span>
</span><span class='line'>                    <span class="p">)</span>
</span><span class='line'>                    <span class="n">shader</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span>
</span><span class='line'>                        <span class="s">&quot;otherViewPosition&quot;</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">otherViewPosition</span><span class="p">.</span><span class="n">x</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">otherViewPosition</span><span class="p">.</span><span class="n">y</span>
</span><span class='line'>                    <span class="p">)</span>
</span><span class='line'>                    <span class="n">shader</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span>
</span><span class='line'>                        <span class="s">&quot;positionInParent&quot;</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">myPosition</span><span class="p">.</span><span class="n">x</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">myPosition</span><span class="p">.</span><span class="n">y</span>
</span><span class='line'>                    <span class="p">)</span>
</span><span class='line'>                    <span class="k">this</span><span class="p">.</span><span class="n">renderEffect</span> <span class="p">=</span> <span class="n">RenderEffect</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">createRuntimeShaderEffect</span><span class="p">(</span><span class="n">shader</span><span class="p">,</span> <span class="s">&quot;image&quot;</span><span class="p">)</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">asComposeRenderEffect</span><span class="p">()</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>        <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>                <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">fillMaxSize</span><span class="p">()</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">clip</span><span class="p">(</span><span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">10.</span><span class="n">dp</span><span class="p">))</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">xFFF6F6F6</span><span class="p">))</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">Icon</span><span class="p">(</span>
</span><span class='line'>            <span class="n">imageVector</span> <span class="p">=</span> <span class="n">icon</span><span class="p">,</span>
</span><span class='line'>            <span class="n">contentDescription</span> <span class="p">=</span> <span class="s">&quot;Expand Menu&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">tint</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Black</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>基本上，我们添加的只是传递父容器的大小和相邻视图的中心坐标。请记住，由于 Compose 回调返回的位置是左上角，因此我们需要在传递之前对其进行一些调整。另外，请记住，第一个组件应该在 otherViewPosition 参数中接收第二个组件，第二个组件也应该接收第一个组件。最重要的是不要混淆它们 :)</p>

<p>让我们继续讨论着色器。我们将从添加必要的 uniform 开始。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'> <span class="k">uniform</span> <span class="n">float2</span> <span class="n">otherViewPosition</span><span class="p">;</span>
</span><span class='line'> <span class="k">uniform</span> <span class="n">float2</span> <span class="n">parentBoxSize</span><span class="p">;</span>
</span><span class='line'> <span class="k">uniform</span> <span class="n">float2</span> <span class="n">positionInParent</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在到了有趣的部分：之前的控制点现在需要根据两个参数来计算——父级的大小以及第二个视图相对于父级的坐标。</p>

<p>首先，我们来获取容器大小与按钮大小的比率。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'>  <span class="k">float</span> <span class="n">parentRatio</span> <span class="o">=</span> <span class="n">parentBoxSize</span><span class="p">.</span><span class="n">x</span> <span class="o">/</span> <span class="n">resolution</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在我们只需要稍微修改一下 getInfluence 方法，就能将所有内容整合到一个坐标系中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="k">float</span> <span class="n">getInfluence</span><span class="p">(</span><span class="k">vec2</span> <span class="n">uv</span><span class="p">,</span> <span class="k">float</span> <span class="n">ratio</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">float2</span> <span class="n">posInParentNormalized</span> <span class="o">=</span> <span class="p">(</span><span class="n">positionInParent</span><span class="o">/</span><span class="n">parentBoxSize</span><span class="p">)</span> <span class="o">-</span> <span class="mf">0.5</span><span class="p">;</span>
</span><span class='line'>        <span class="n">float2</span> <span class="n">controlPoint</span> <span class="o">=</span> <span class="n">otherViewPosition</span> <span class="o">/</span> <span class="n">parentBoxSize</span> <span class="o">-</span> <span class="mf">0.5</span><span class="p">;</span>
</span><span class='line'>        <span class="n">controlPoint</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">controlPoint</span><span class="p">.</span><span class="n">x</span><span class="o">-</span><span class="n">posInParentNormalized</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">*</span> <span class="n">ratio</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">float</span> <span class="n">dist</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="mf">1.</span><span class="p">,</span> <span class="n">length</span><span class="p">(</span><span class="n">controlPoint</span><span class="o">-</span><span class="n">uv</span><span class="p">)</span> <span class="o">+</span> <span class="n">length</span><span class="p">(</span><span class="n">uv</span><span class="p">));</span>
</span><span class='line'>        <span class="k">float</span> <span class="n">influence</span> <span class="o">=</span> <span class="n">smoothstep</span><span class="p">(</span><span class="mf">0.</span><span class="p">,</span><span class="mf">1.</span><span class="p">,</span> <span class="mf">1.</span><span class="o">/</span><span class="n">pow</span><span class="p">(</span><span class="n">dist</span><span class="p">,</span><span class="mf">2.</span><span class="p">));</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">influence</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>听起来很简单，但实际上，过程中出现了一些不太明显的计算。而且这些计算并非一眼就能轻易掌握。所以我尽量把它解释得清晰易懂。所以，从整体上看，我们得到的是这样的：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/1*ttaLU6zCxuP0vuHWmtkgGA.png" alt="左边是我们的“活动”视图。想象一下，我们始终处于视图着色器的“内部”。" /></p>

<p>好的，我们有父容器、它的大小、我们视图相对于父容器的位置，以及相邻视图（我们之前示例中的控制点）的位置。我们的任务是将这个控制点放到我们的UV坐标系中。</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/1*S6fLIECuZWm-UYymAuwPbg.png" alt="从上到下的整个过程" /></p>

<p>我尝试自上而下地解释了整个过程。现在让我们再看一下代码，并逐步讲解一下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'>  <span class="n">float2</span> <span class="n">posInParentNormalized</span> <span class="o">=</span> <span class="p">(</span><span class="n">positionInParent</span><span class="o">/</span><span class="n">parentBoxSize</span><span class="p">)</span> <span class="o">-</span> <span class="mf">0.5</span><span class="p">;</span>
</span><span class='line'>  <span class="n">float2</span> <span class="n">controlPoint</span> <span class="o">=</span> <span class="n">otherViewPosition</span> <span class="o">/</span> <span class="n">parentBoxSize</span> <span class="o">-</span> <span class="mf">0.5</span><span class="p">;</span>
</span><span class='line'>  <span class="k">float</span> <span class="n">parentRatio</span> <span class="o">=</span> <span class="n">parentBoxSize</span><span class="p">.</span><span class="n">x</span> <span class="o">/</span> <span class="n">resolution</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>  <span class="n">controlPoint</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">controlPoint</span><span class="p">.</span><span class="n">x</span><span class="o">-</span><span class="n">posInParentNormalized</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">*</span> <span class="n">parentRatio</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>假设父容器的宽度为 500。我们在其中的位置为 100，相邻视图的位置为 400。首先，我们获取两个视图相对于父容器的标准化坐标（偏移 -0.5）。在本例中，我们的位置为 -0.3，相邻视图的位置为 0.2。因此，它们之间的距离为 0.5——即父容器宽度的一半。但请记住，我们位于附加到自身视图的着色器内部，因此必须将这个值乘以父容器大小与我们视图大小的比值。这是关键的一步：我们现在得到的不是 0.5，而是另一个值，但它位于我们视图的坐标系中。由此，我们可以计算距离，并执行之前对虚拟控制点执行的所有操作！</p>

<blockquote><p>_这里我将所有内容简化为水平坐标，但同样的逻辑也适用于垂直坐标。我只是不想让本来就很复杂的解释更加难以理解。</p></blockquote>

<p>最终，我们得到了：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/1*OWQ-vSnQ3yAiPloRXBRXQw.png" alt="静态看起来有点奇怪，但很明显两个视图是相互影响的。" /></p>

<p>最后一步是用数组替换这两个视图，这样我们就可以添加第三个、第四个甚至第五个按钮。</p>

<p>在着色器中，不能使用动态数组，所以我们需要设置一个上限——我选择了 10 个元素。我们还需要一个单独的计数器来记录实际有多少个元素。由于数组不能留空，在 Compose 中，我们会自动用零位置填充未使用的槽位，但计数器会确保这不会影响最终结果。</p>

<p>因此，在着色器中，uniform 变量看起来如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'> <span class="k">uniform</span> <span class="k">int</span> <span class="n">count</span><span class="p">;</span>
</span><span class='line'> <span class="k">uniform</span> <span class="n">float2</span> <span class="n">positions</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
</span><span class='line'> <span class="k">uniform</span> <span class="n">float2</span> <span class="n">parentResolution</span><span class="p">;</span>
</span><span class='line'> <span class="k">uniform</span> <span class="n">float2</span> <span class="n">positionInParent</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果多个相邻元素同时影响视图，getInfluence 方法将循环遍历所有元素并累积影响。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="k">float</span> <span class="n">getInfluence</span><span class="p">(</span><span class="n">float2</span> <span class="n">uv</span><span class="p">,</span> <span class="k">float</span> <span class="n">ratio</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">influence</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="k">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mo">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">float</span> <span class="n">posInParentNormalized</span> <span class="o">=</span> <span class="p">(</span><span class="n">positionInParent</span><span class="o">/</span><span class="n">parentBoxSize</span><span class="p">)</span> <span class="o">-</span> <span class="mf">0.5</span><span class="p">;</span>
</span><span class='line'>        <span class="n">float2</span> <span class="n">controlPoint</span> <span class="o">=</span> <span class="n">positions</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">/</span> <span class="n">parentBoxSize</span> <span class="o">-</span> <span class="mf">0.5</span><span class="p">;</span>
</span><span class='line'>        <span class="n">controlPoint</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">controlPoint</span><span class="p">.</span><span class="n">x</span><span class="o">-</span><span class="n">posInParentNormalized</span><span class="p">)</span> <span class="o">*</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'>        <span class="k">float</span> <span class="n">dist</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="mf">1.</span><span class="p">,</span><span class="n">length</span><span class="p">(</span><span class="n">controlPoint</span><span class="o">-</span><span class="n">uv</span><span class="p">)</span> <span class="o">+</span> <span class="n">length</span><span class="p">(</span><span class="n">uv</span><span class="p">));</span>
</span><span class='line'>        <span class="k">float</span> <span class="n">rawScale</span> <span class="o">=</span> <span class="mf">1.</span><span class="o">/</span><span class="n">pow</span><span class="p">(</span><span class="n">dist</span><span class="p">,</span><span class="mf">2.</span><span class="p">);</span>
</span><span class='line'>        <span class="n">influence</span> <span class="o">+=</span> <span class="n">smoothstep</span><span class="p">(</span><span class="mf">0.</span><span class="p">,</span> <span class="mf">1.</span><span class="p">,</span> <span class="n">rawScale</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">==</span><span class="n">count</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">clamp</span><span class="p">(</span><span class="n">influence</span><span class="p">,</span><span class="mf">0.</span><span class="p">,</span><span class="mf">1.</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在 Compose 中，我们需要添加一个列表并仔细传递所有值。你也可以添加动画和其他效果，但这会使 Compose 代码过载，在本课中更难理解。本教程已经相当丰富，所以我只演示如何将值传递到数组中——其余的实验留给你自己 :) 记住，你可以随时查看我的代码库以获取完整版本。</p>

<p>下面是我编写的一个扩展方法，用于方便地向着色器添加列表。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">RuntimeShader</span><span class="p">.</span><span class="n">setVec2ArrayUniform</span><span class="p">(</span>
</span><span class='line'>
</span><span class='line'><span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'><span class="n">values</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Pair</span><span class="p">&lt;</span><span class="n">Float</span><span class="p">,</span> <span class="n">Float</span><span class="p">&gt;&gt;,</span>
</span><span class='line'>
</span><span class='line'><span class="n">maxSize</span><span class="p">:</span> <span class="n">Int</span> <span class="p">=</span> <span class="m">10</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">require</span><span class="p">(</span><span class="n">values</span><span class="p">.</span><span class="n">size</span> <span class="p">&lt;=</span> <span class="n">maxSize</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&quot;Too many elements for uniform &#39;$name&#39;. Maximum allowed is $maxSize, but got ${values.size}&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">padded</span> <span class="p">=</span> <span class="n">values</span> <span class="p">+</span> <span class="n">List</span><span class="p">(</span><span class="n">maxSize</span> <span class="p">-</span> <span class="n">values</span><span class="p">.</span><span class="n">size</span><span class="p">)</span> <span class="p">{</span> <span class="m">0f</span> <span class="n">to</span> <span class="m">0f</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">floatArray</span> <span class="p">=</span> <span class="n">padded</span><span class="p">.</span><span class="n">flatMap</span> <span class="p">{</span> <span class="n">listOf</span><span class="p">(</span><span class="n">it</span><span class="p">.</span><span class="n">first</span><span class="p">,</span> <span class="n">it</span><span class="p">.</span><span class="n">second</span><span class="p">)</span> <span class="p">}.</span><span class="n">toFloatArray</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">floatArray</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>用法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'>  <span class="n">shader</span><span class="p">.</span><span class="n">setVec2ArrayUniform</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">values</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在你可以添加不同的元素，并观察它们在动画过程中平滑地合并或分离：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/0*s01C-TPOXIfOwZDg.gif" alt="以下是三个不同形状的视图" /></p>

<p>感谢你的阅读！如果你觉得我的实验有趣且我的解释对你有帮助，欢迎加入我的<a href="https://t.me/droidshaderworks">Telegram频道</a>或在<a href="https://x.com/KrowaNaMostku">Twitter (X)</a>上关注我。这个项目只是我的一个爱好，说实话，我的动力很大程度上取决于收到的反馈——所以我非常高兴在频道里见到你。如果你愿意，请在你的社交媒体上分享这篇文章，我将不胜感激。祝你撸码愉快！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[玩转Shader之学会如何变形画布]]></title>
    <link href="https://alexhilton.github.io/blog/2025/09/05/deform-the-canvas/"/>
    <updated>2025-09-05T22:24:46+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/09/05/deform-the-canvas</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自「Deform the canvas」，原文链接<a href="https://medium.com/@off.mind.by/deform-the-canvas-57dc59bec42a">https://medium.com/@off.mind.by/deform-the-canvas-57dc59bec42a</a>，由Alex Volkov发布于2025年8月2日。</p></blockquote>

<p><a href="https://alexhilton.github.io/blog/2025/09/05/deform-the-canvas/"><img src="https://miro.medium.com/v2/resize:fit:2000/1*DTU5ja0MLebUmXQMg9qi9w.png" title="auto auto" ></a></p>

<!-- more -->


<p>大家好！使用着色器时，我总是着迷于如何轻松创建看起来精致而昂贵的效果。今天的文章就是另一个很好的例子。最近，我的 Telegram 频道的一位订阅者问我，如何在用手指拖动视图时创建拉伸效果。自然而然地，我立刻想到了用着色器来实现。现在结果已经出来了，我很高兴分享我的构建过程。和往常一样，这篇文章分为几个部分：第一部分展示了 Compose 的简单设置，第二部分逐步讲解着色器，最后，我们将在 Compose 中添加一些小细节，这些细节实际上构成了 90% 的视觉效果——尽管这可能感觉有点不公平。</p>

<p>最终效果如下：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1196/1*M42RvZvThTrI7UMjelqb5w.gif" alt="最终结果" /></p>

<blockquote><p>在深入探讨之前，我想提醒你，我并没有为所有效果创建教程。不过，所有效果都可以在我的 <a href="https://github.com/AleksiejVolkov/runtimeshaders">GitHub</a> (链接：<a href="https://github.com/AleksiejVolkov/runtimeshaders">https://github.com/AleksiejVolkov/runtimeshaders</a>)上找到。你还可以在我的 <a href="https://t.me/droidshaderworks">Telegram 频道</a> 中找到视频、新效果的公告以及问题的解答。期待在那里见到你！</p></blockquote>

<p>让我们从最基本的 Compose 设置开始。在本教程中，我不会包含任何背景图片或额外的样式。我们会尽可能地保持简洁。我们只需要一个应用着色器的容器、一些着色器本身的参数，以及一个放置在着色器盒内的菜单或列表的基本模拟。以下是我们开始所需的基本设置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">shader</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">RuntimeShader</span><span class="p">(</span><span class="n">runtimeShader</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">var</span> <span class="py">targetPercentage</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableFloatStateOf</span><span class="p">(</span><span class="m">0f</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">val</span> <span class="py">percentage</span> <span class="p">=</span> <span class="n">animateFloatAsState</span><span class="p">(</span>
</span><span class='line'>    <span class="n">targetValue</span> <span class="p">=</span> <span class="n">targetPercentage</span><span class="p">,</span>
</span><span class='line'>    <span class="n">animationSpec</span> <span class="p">=</span> <span class="n">tween</span><span class="p">(</span>
</span><span class='line'>          <span class="n">durationMillis</span> <span class="p">=</span> <span class="m">1000</span><span class="p">,</span>
</span><span class='line'>          <span class="n">easing</span> <span class="p">=</span> <span class="n">ElasticOutEasing</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="k">val</span> <span class="py">pressed</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="k">false</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">var</span> <span class="py">fingerPosition</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="n">Offset</span><span class="p">.</span><span class="n">Zero</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">var</span> <span class="py">fingerStartPosition</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="n">Offset</span><span class="p">.</span><span class="n">Zero</span><span class="p">)</span> <span class="p">}</span><span class="n">Box</span><span class="p">(</span>
</span><span class='line'>  <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">onSizeChanged</span> <span class="p">{</span> <span class="n">size</span> <span class="p">-&gt;</span>
</span><span class='line'>                <span class="n">shader</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span>
</span><span class='line'>                    <span class="s">&quot;resolution&quot;</span><span class="p">,</span> <span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">.</span><span class="n">toFloat</span><span class="p">(),</span> <span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">.</span><span class="n">toFloat</span><span class="p">()</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="p">.</span><span class="n">pointerInput</span><span class="p">(</span><span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">awaitPointerEventScope</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">while</span> <span class="p">(</span><span class="k">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="k">val</span> <span class="py">event</span> <span class="p">=</span> <span class="n">awaitPointerEvent</span><span class="p">()</span>
</span><span class='line'>                        <span class="k">val</span> <span class="py">change</span> <span class="p">=</span> <span class="n">event</span><span class="p">.</span><span class="n">changes</span><span class="p">.</span><span class="n">firstOrNull</span><span class="p">()</span> <span class="o">?:</span> <span class="k">continue</span>
</span><span class='line'>                        <span class="n">pressed</span><span class="p">.</span><span class="n">value</span> <span class="p">=</span> <span class="n">change</span><span class="p">.</span><span class="n">pressed</span>
</span><span class='line'>
</span><span class='line'>                        <span class="k">if</span> <span class="p">(</span><span class="n">change</span><span class="p">.</span><span class="n">pressed</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                            <span class="k">if</span> <span class="p">(</span><span class="n">change</span><span class="p">.</span><span class="n">previousPressed</span><span class="p">.</span><span class="n">not</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>                               <span class="n">fingerStartPosition</span> <span class="p">=</span> <span class="n">change</span><span class="p">.</span><span class="n">position</span>
</span><span class='line'>                            <span class="p">}</span>
</span><span class='line'>                            <span class="n">targetPercentage</span> <span class="p">=</span> <span class="m">1f</span>
</span><span class='line'>                            <span class="n">fingerPosition</span> <span class="p">=</span> <span class="n">change</span><span class="p">.</span><span class="n">position</span> <span class="p">-</span> <span class="n">fingerStartPosition</span>
</span><span class='line'>                        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                            <span class="n">targetPercentage</span> <span class="p">=</span> <span class="m">0f</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                        <span class="n">event</span><span class="p">.</span><span class="n">changes</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">consume</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="p">.</span><span class="n">graphicsLayer</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">pressed</span><span class="p">.</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">shader</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span><span class="s">&quot;percentage&quot;</span><span class="p">,</span> <span class="m">1f</span><span class="p">)</span>
</span><span class='line'>                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">shader</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span><span class="s">&quot;percentage&quot;</span><span class="p">,</span> <span class="n">percentage</span><span class="p">.</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="n">shader</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span><span class="s">&quot;touch&quot;</span><span class="p">,</span> <span class="n">fingerPosition</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">fingerPosition</span><span class="p">.</span><span class="n">y</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="n">renderEffect</span> <span class="p">=</span> <span class="n">RenderEffect</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">createRuntimeShaderEffect</span><span class="p">(</span><span class="n">shader</span><span class="p">,</span> <span class="s">&quot;image&quot;</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">asComposeRenderEffect</span><span class="p">()</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="p">.</span><span class="n">clickable</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">targetPercentage</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">targetPercentage</span> <span class="p">==</span> <span class="m">0f</span><span class="p">)</span> <span class="m">1f</span> <span class="k">else</span> <span class="m">0f</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">//... 这里是下拉列表本身或任何其他可以通过拖动拉伸的可组合项</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>shader -</strong> 这是着色器本身，我们将在第二部分中编写它。</p>

<p><strong>targetPercentage</strong>、<strong>percentage</strong> 和 <strong>pressed -</strong> 这些控制传递给着色器的效果强度。我们需要它们来为用户抬起手指后的“反弹”效果添加动画效果。思路很简单：当有活动触摸时，强度为 1（最大值），当用户抬起手指时，我们将其动画化为 0。我们将使用自定义的 <strong><em>ElasticOutEasing</em></strong> 来代替常规的线性动画，我将在最后一节中对其进行描述。</p>

<p><strong>fingerPosition</strong> 和 <strong>fingerStartPosition -</strong> 我们只将增量向量传递给着色器，这意味着我们关心方向和强度（向量长度）。拉伸始终从中心开始（我发现这比从精确的触摸点开始更美观）。因此，我们存储两个值，并将它们的差值传递给着色器。</p>

<p>接下来，在 <strong>onSizeChanged</strong> 中，我们将视图大小传递给着色器。在 pointerInput 中，我们跟踪拖动并计算增量向量。最后，在 <strong>graphicsLayer</strong> 中，我们将增量和效果强度传递给着色器。</p>

<p>接下来是包含将要拉伸的视图示例的代码块。它实际上只是一段基本的占位符代码，所以我认为不值得详细分析。我将其包含在这里只是为了方便——这样你就可以复制它，而不必担心自己编写它：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">actions</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span><span class="s">&quot;Cut&quot;</span><span class="p">,</span> <span class="s">&quot;Copy&quot;</span><span class="p">,</span> <span class="s">&quot;Paste&quot;</span><span class="p">,</span> <span class="s">&quot;Edit&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">Column</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>        <span class="p">.</span><span class="n">width</span><span class="p">(</span><span class="m">250.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">Color</span><span class="p">(</span><span class="m">0</span><span class="n">x8843484C</span><span class="p">),</span> <span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">8.</span><span class="n">dp</span><span class="p">))</span>
</span><span class='line'>        <span class="p">.</span><span class="n">border</span><span class="p">(</span><span class="m">1.</span><span class="n">dp</span><span class="p">,</span> <span class="n">Color</span><span class="p">.</span><span class="n">Gray</span><span class="p">,</span> <span class="n">RoundedCornerShape</span><span class="p">(</span><span class="m">8.</span><span class="n">dp</span><span class="p">))</span>
</span><span class='line'>        <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">8.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">actions</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span> <span class="n">action</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="n">Text</span><span class="p">(</span>
</span><span class='line'>            <span class="n">text</span> <span class="p">=</span> <span class="n">action</span><span class="p">,</span>
</span><span class='line'>            <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">White</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="n">alpha</span> <span class="p">=</span> <span class="m">0.8f</span><span class="p">),</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                <span class="p">.</span><span class="n">fillMaxWidth</span><span class="p">()</span>
</span><span class='line'>                <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="n">vertical</span> <span class="p">=</span> <span class="m">8.</span><span class="n">dp</span><span class="p">,</span> <span class="n">horizontal</span> <span class="p">=</span> <span class="m">16.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">action</span> <span class="p">!=</span> <span class="s">&quot;Edit&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">HorizontalDivider</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Compose 的设置就到这里！让我们开始编写着色器吧！</p>

<p>我们从最简单的着色器开始。下面是输出输入的极简代码，无需进行任何重大更改。我唯一添加的是一个辅助方法，方便以后修改。它叫做 <strong>GetImageTexture</strong>。从技术上讲，你可以使用 <strong>image.eval(fragCoord)</strong> 返回所有未更改的图像，但是一旦在重新映射图像之前开始修改坐标，就需要处理宽高比和图像平移——这基本上就是使用以画布中心为中心的坐标系。这个方法可以处理这些问题。你只需向它传递标准化的 UV 坐标、自定义中心点和分辨率，它就会返回正确的结果。如果你现在使用这些设置运行着色器，你应该会看到与不使用着色器时完全相同的图像。这是一个好兆头！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="py">runtimeShader</span> <span class="p">=</span> <span class="s">&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">uniform</span> <span class="n">shader</span> <span class="n">image</span><span class="p">;</span>
</span><span class='line'>    <span class="n">uniform</span> <span class="n">float2</span> <span class="n">resolution</span><span class="p">;</span>
</span><span class='line'>    <span class="n">uniform</span> <span class="n">float</span> <span class="n">percentage</span><span class="p">;</span>
</span><span class='line'>    <span class="n">uniform</span> <span class="n">float2</span> <span class="n">touch</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">vec4</span> <span class="n">GetImageTexture</span><span class="p">(</span><span class="n">vec2</span> <span class="n">p</span><span class="p">,</span> <span class="n">vec2</span> <span class="n">pivot</span><span class="p">,</span> <span class="n">vec2</span> <span class="n">r</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">p</span><span class="p">.</span><span class="n">x</span> <span class="p">/=</span> <span class="n">r</span><span class="p">.</span><span class="n">x</span> <span class="p">/</span> <span class="n">r</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">p</span> <span class="p">+=</span> <span class="n">pivot</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">p</span> <span class="p">*=</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">image</span><span class="p">.</span><span class="n">eval</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">half4</span> <span class="n">main</span><span class="p">(</span><span class="n">float2</span> <span class="n">fragCoord</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">float</span> <span class="n">ratio</span> <span class="p">=</span> <span class="n">resolution</span><span class="p">.</span><span class="n">x</span> <span class="p">/</span> <span class="n">resolution</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">float2</span> <span class="n">uv</span> <span class="p">=</span> <span class="n">fragCoord</span> <span class="p">/</span> <span class="n">resolution</span> <span class="p">-</span> <span class="m">0.5</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">uv</span><span class="p">.</span><span class="n">x</span> <span class="p">*=</span> <span class="n">ratio</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">vec4</span> <span class="n">img</span> <span class="p">=</span> <span class="n">GetImageTexture</span><span class="p">(</span><span class="n">uv</span><span class="p">,</span> <span class="n">vec2</span><span class="p">(</span><span class="m">0.5</span><span class="p">),</span> <span class="n">resolution</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">half4</span><span class="p">(</span><span class="n">img</span><span class="p">.</span><span class="n">rgb</span><span class="p">,</span> <span class="n">img</span><span class="p">.</span><span class="n">a</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span><span class="s">&quot;&quot;&quot;.trimIndent()</span>
</span></code></pre></td></tr></table></div></figure>


<p>你在这里看到的应该非常熟悉——几乎所有我的着色器都是这样启动的，说实话，大多数其他着色器也是如此。我再重复一遍：我们获取 fragCoord，它是每个像素相对于视图画布的位置。在此基础上，我们创建一个标准化的 UV 坐标系，根据宽高比进行调整，并偏移 0.5——这将原点置于视图的正中央。并非每个人都这样做，但我觉得这样更方便。它可以“免费”地实现很多效果，比如镜像行为，因为我们只围绕中心计算一次所有内容，而不是分别处理每条边。下面是我们画布的示意图。</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/1*1aPwjWpXJgxlQ8-mCJ2JBA.png" alt="方形画布的简单 UV 图示" /></p>

<p>好了，现在该了解一下我们想要实现的效果了。我们需要从中心（在当前实现中）沿着特定向量拉伸画布，同时保持其余部分不变。那么，如何拉伸画布呢？其实，最简单的方法就是乘以一个数字！让我们测试一下——添加一个比例变量并尝试一下。最后，我们将 UV 乘以这个比例向量。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="k">vec2</span> <span class="n">scale</span> <span class="o">=</span> <span class="k">vec2</span><span class="p">(</span><span class="mf">0.8</span><span class="p">,</span> <span class="mf">1.2</span><span class="p">);</span>
</span><span class='line'><span class="n">uv</span> <span class="o">*=</span> <span class="k">vec2</span><span class="p">(</span><span class="n">scale</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">scale</span><span class="p">.</span><span class="n">y</span><span class="p">);</span><span class="k">vec4</span> <span class="n">img</span> <span class="o">=</span> <span class="n">GetImageTexture</span><span class="p">(</span><span class="n">uv</span><span class="p">,</span> <span class="k">vec2</span><span class="p">(</span><span class="mf">0.5</span><span class="p">),</span> <span class="n">resolution</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://miro.medium.com/v2/resize:fit:1400/1*_C7fYI8VQn5WKMOFUSnbdA.png" alt="左边是原始图像，右边是我们应用了缩放效果的图像。" /></p>

<p>尝试使用不同的<strong>scale</strong>值来更好地感受效果。正如你所注意到的——使用1不会改变任何值，因为乘以1后值保持不变。小于1的值会拉伸图像，而大于1的值会压缩图像。记住这一点——我们稍后会计算缩放强度并将其从1中减去，这样当缩放为零时，效果也为零，这意味着我们乘以了一个单位向量。</p>

<p>太好了，现在让我们将触摸位置添加到计算中。简单回顾一下——我们从触摸中接收了一个位移向量。因此，当手指触摸屏幕时，向量为 (0, 0)。如果我们将手指向右移动 20 像素，则得到 (20, 0)。我们首先需要对这个向量进行归一化，并将其乘以宽高比。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="k">vec2</span> <span class="n">nMouse</span> <span class="o">=</span> <span class="n">touch</span> <span class="o">/</span> <span class="n">resolution</span><span class="p">;</span>
</span><span class='line'><span class="n">nMouse</span><span class="p">.</span><span class="n">x</span> <span class="o">*=</span> <span class="n">ratio</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果我们将手指向左移动 20 像素，则会得到一个 (-20, 0) 的向量。因此，我们不会直接使用这个向量作为比例，而是取其长度。它看起来会像这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="k">vec2</span> <span class="n">scale</span> <span class="o">=</span> <span class="k">vec2</span><span class="p">(</span><span class="n">length</span><span class="p">(</span><span class="n">nMouse</span><span class="p">.</span><span class="n">x</span><span class="p">),</span> <span class="n">length</span><span class="p">(</span><span class="n">nMouse</span><span class="p">.</span><span class="n">y</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>记住，没有效果意味着乘以 1，而不是乘以 0？这就是为什么在使用比例向量时，我们在应用之前先将其从 1 中减去：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="n">uv</span> <span class="o">*=</span> <span class="k">vec2</span><span class="p">(</span><span class="mf">1.0</span><span class="p">)</span> <span class="o">-</span> <span class="n">scale</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果一切设置正确，我们现在应该能够控制沿两个轴的拉伸。大致如下所示：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:800/1*ix2Fe4IcYGkQ_iHmSHJ3jA.gif" alt="" /></p>

<p>一切看起来都很好——现在我们只需要在一个方向上应用拉伸。为此，我们可以使用向量的点积。原理很简单：如果向量指向同一方向，则此运算返回正值；如果向量指向相反方向，则返回负值。我强烈建议你在专用资源上阅读更多关于此运算（以及其他向量运算）的内容，因为线性代数是着色器中一切的基础。在这里，我将向你展示它在实践中的工作原理！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="k">float</span> <span class="n">influence</span> <span class="o">=</span> <span class="n">dot</span><span class="p">(</span><span class="n">normalize</span><span class="p">(</span><span class="n">nMouse</span><span class="p">),</span> <span class="n">uv</span><span class="p">);</span>
</span><span class='line'><span class="n">scale</span> <span class="o">*=</span> <span class="n">influence</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://miro.medium.com/v2/resize:fit:1400/1*aKRAalWcQzf2Jugs18aEoQ.png" alt="应用点积后" /></p>

<p>如你所见，效果已经近乎完美！但我不太喜欢另一侧在另一个方向上变形（即被压缩）。这是点积的副作用——当它返回负值时，缩放比例也会变为负值，画布的这一部分会被挤压。我希望保持视图的这一部分不变，所以我添加了一个从零到定义最大值的线性插值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="n">influence</span> <span class="o">=</span> <span class="n">smoothstep</span><span class="p">(</span><span class="mf">0.</span><span class="p">,</span> <span class="mf">1.5</span><span class="p">,</span> <span class="n">influence</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后一步是乘以“效果强度”，我们通过百分比参数传递该强度（也许这不是最好的命名，但我习惯这样称呼它）。这不会改变拖动过程中的行为，但它可以让我们在拖动结束后平滑地将视图恢复到原始状态。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="n">scale</span> <span class="o">*=</span> <span class="n">percentage</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>就是这样！着色器已准备就绪。以下是完整代码——尽管最终的视觉效果看起来丰富而复杂，但它简洁明了。在最终版本中，我还限制了 x 轴和 y 轴上的最大缩放值。你可以根据需要随意调整这些值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="k">uniform</span> <span class="n">shader</span> <span class="n">image</span><span class="p">;</span>
</span><span class='line'><span class="k">uniform</span> <span class="n">float2</span> <span class="n">resolution</span><span class="p">;</span>
</span><span class='line'><span class="k">uniform</span> <span class="k">float</span> <span class="n">percentage</span><span class="p">;</span>
</span><span class='line'><span class="k">uniform</span> <span class="n">float2</span> <span class="n">touch</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">vec4</span> <span class="n">GetImageTexture</span><span class="p">(</span><span class="k">vec2</span> <span class="n">p</span><span class="p">,</span> <span class="k">vec2</span> <span class="n">pivot</span><span class="p">,</span> <span class="k">vec2</span> <span class="n">r</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">p</span><span class="p">.</span><span class="n">x</span> <span class="o">/=</span> <span class="n">r</span><span class="p">.</span><span class="n">x</span> <span class="o">/</span> <span class="n">r</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>    <span class="n">p</span> <span class="o">+=</span> <span class="n">pivot</span><span class="p">;</span>
</span><span class='line'>    <span class="n">p</span> <span class="o">*=</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">image</span><span class="p">.</span><span class="n">eval</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="n">half4</span> <span class="n">main</span><span class="p">(</span><span class="n">float2</span> <span class="n">fragCoord</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">ratio</span> <span class="o">=</span> <span class="n">resolution</span><span class="p">.</span><span class="n">x</span> <span class="o">/</span> <span class="n">resolution</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>    <span class="n">float2</span> <span class="n">uv</span> <span class="o">=</span> <span class="n">fragCoord</span> <span class="o">/</span> <span class="n">resolution</span> <span class="o">-</span> <span class="mf">0.5</span><span class="p">;</span>
</span><span class='line'>    <span class="n">uv</span><span class="p">.</span><span class="n">x</span> <span class="o">*=</span> <span class="n">ratio</span><span class="p">;</span>
</span><span class='line'>    <span class="k">vec2</span> <span class="n">nMouse</span> <span class="o">=</span> <span class="n">touch</span> <span class="o">/</span> <span class="n">resolution</span><span class="p">;</span>
</span><span class='line'>    <span class="n">nMouse</span><span class="p">.</span><span class="n">x</span> <span class="o">*=</span> <span class="n">ratio</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">vec2</span> <span class="n">scale</span> <span class="o">=</span> <span class="k">vec2</span><span class="p">(</span><span class="n">min</span><span class="p">(</span><span class="n">length</span><span class="p">(</span><span class="n">nMouse</span><span class="p">.</span><span class="n">x</span><span class="p">),</span> <span class="mf">0.3</span><span class="p">),</span> <span class="n">min</span><span class="p">(</span><span class="n">length</span><span class="p">(</span><span class="n">nMouse</span><span class="p">.</span><span class="n">y</span><span class="p">),</span> <span class="mf">0.4</span><span class="p">));</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">influence</span> <span class="o">=</span> <span class="n">dot</span><span class="p">(</span><span class="n">normalize</span><span class="p">(</span><span class="n">nMouse</span><span class="p">),</span> <span class="n">uv</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">influence</span> <span class="o">=</span> <span class="n">smoothstep</span><span class="p">(</span><span class="mf">0.</span><span class="p">,</span> <span class="mf">1.5</span><span class="p">,</span> <span class="n">influence</span><span class="p">);</span>
</span><span class='line'>    <span class="n">scale</span> <span class="o">*=</span> <span class="n">influence</span><span class="p">;</span>
</span><span class='line'>    <span class="n">scale</span> <span class="o">*=</span> <span class="n">percentage</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">uv</span> <span class="o">*=</span> <span class="k">vec2</span><span class="p">(</span><span class="mf">1.0</span><span class="p">)</span> <span class="o">-</span> <span class="n">scale</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">vec4</span> <span class="n">img</span> <span class="o">=</span> <span class="n">GetImageTexture</span><span class="p">(</span><span class="n">uv</span><span class="p">,</span> <span class="k">vec2</span><span class="p">(</span><span class="mf">0.5</span><span class="p">),</span> <span class="n">resolution</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">half4</span><span class="p">(</span><span class="n">img</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在来看看我从 Compose 中留下的部分——ElasticOutEasing。在 Compose 中创建动画时，你可以使用内置的缓动函数，也可以定义自己的缓动函数。我使用了一个简单的弹性缓动函数示例，如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">ElasticOutEasing</span> <span class="p">=</span> <span class="n">Easing</span> <span class="p">{</span> <span class="n">t</span> <span class="p">-&gt;</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">p</span> <span class="p">=</span> <span class="m">0.3f</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">t</span> <span class="p">==</span> <span class="m">0f</span> <span class="p">||</span> <span class="n">t</span> <span class="p">==</span> <span class="m">1f</span><span class="p">)</span> <span class="n">t</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">s</span> <span class="p">=</span> <span class="n">p</span> <span class="p">/</span> <span class="m">4</span>
</span><span class='line'>        <span class="m">2f</span><span class="p">.</span><span class="n">pow</span><span class="p">(-</span><span class="m">10f</span> <span class="p">*</span> <span class="n">t</span><span class="p">)</span> <span class="p">*</span> <span class="n">sin</span><span class="p">((</span><span class="n">t</span> <span class="p">-</span> <span class="n">s</span><span class="p">)</span> <span class="p">*</span> <span class="p">(</span><span class="m">2f</span> <span class="p">*</span> <span class="n">PI</span><span class="p">.</span><span class="n">toFloat</span><span class="p">())</span> <span class="p">/</span> <span class="n">p</span><span class="p">)</span> <span class="p">+</span> <span class="m">1f</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>此缓动函数在动画结束时创建类似弹跳的效果。它一开始很快，然后略微超过目标并稳定下来，模仿弹簧的行为。其核心思想是将指数衰减 (2^-10t) 与正弦波相结合，以模拟弹性运动。它在起始 (0) 和结束 (1) 处返回精确值，但在两者之间添加了一个抖动。</p>

<p>你也可以使用常规的线性缓动，但结果看起来会更加平淡。这正是我在开头提到的——这个小细节为整体效果的流畅度和令人满意的体验贡献了 90%！</p>

<p>感谢你的阅读！如果你觉得我的实验有趣且我的解释对你有帮助，欢迎加入我的 <a href="https://t.me/droidshaderworks">Telegram 频道</a> 或在 <a href="https://x.com/KrowaNaMostku">Twitter (X)</a> 上关注我。这个项目只是我的一个爱好，说实话，我的动力很大程度上取决于收到的反馈——所以我非常高兴在频道里见到你。如果你愿意的话，请将这篇文章分享到你的社交媒体上，我将不胜感激。祝你撸码愉快！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入浅出着色器：极坐标系与炫酷环形进度条]]></title>
    <link href="https://alexhilton.github.io/blog/2025/08/18/circle-bar-with-shader/"/>
    <updated>2025-08-18T22:20:10+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/08/18/circle-bar-with-shader</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自「Circle bars with AGSL」，原文链接<a href="https://medium.com/@off.mind.by/circle-bars-with-agsl-37d0612c34a2">https://medium.com/@off.mind.by/circle-bars-with-agsl-37d0612c34a2</a>，由Alex Volkov发布于2025年1月6日。</p></blockquote>

<p><a href="https://alexhilton.github.io/blog/2025/08/18/circle-bar-with-shader/"><img src="https://miro.medium.com/v2/resize:fit:2000/1*eA4A8yhl-BSTW4EoFMDRJw.jpeg" title="auto auto" ></a></p>

<!-- more -->


<p>大家好！今天，我将向大家讲解如何使用极坐标系。这是一个重要但又相当简单的主题，因此我选择了一个直截了当的效果，以避免过多地深入讲解其他细节。与往常一样，本教程分为几个部分。首先，我将概述设置着色器所需的最简 Compose 代码。在第二部分中，我将详细解释着色器本身以及使用极坐标的原理。最后，我们将进行一些收尾工作，使效果更加惊艳。</p>

<p>最终，我们将实现如下效果：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1000/1*RA4vKEMtnGVL78RVxe9Avg.gif" alt="" /></p>

<blockquote><p>在深入探讨之前，我想提醒你，我并没有为每个效果创建教程。不过，所有效果都可以在我的 <a href="https://github.com/AleksiejVolkov/runtimeshaders">GitHub</a> （链接：<a href="https://github.com/AleksiejVolkov/runtimeshaders%EF%BC%89%E4%B8%8A%E6%89%BE%E5%88%B0%E3%80%82%E4%BD%A0%E8%BF%98%E5%8F%AF%E4%BB%A5%E5%9C%A8%E6%88%91%E7%9A%84">https://github.com/AleksiejVolkov/runtimeshaders%EF%BC%89%E4%B8%8A%E6%89%BE%E5%88%B0%E3%80%82%E4%BD%A0%E8%BF%98%E5%8F%AF%E4%BB%A5%E5%9C%A8%E6%88%91%E7%9A%84</a> <a href="https://t.me/droidshaderworks">Telegram 频道</a> 中找到视频、新效果的公告以及问题的解答。期待在那里见到你！</p></blockquote>

<p>和往常一样，让我们从布局开始。我将基础 Compose 组件命名为“TimerShaderScreen”。在组件内部，我们将从一个“Column”容器开始，该容器顶部包含一个输入字段，后面跟着一个“Box”。这个“Box”在同一层级上包含一个将应用着色器的“Box”和一个显示当前计时器值的“Text”元素（这一点很重要）。从技术上讲，我们可以只使用一个“Box”，但这会使着色器稍微复杂一些。为了简化本教程，我选择了稍微复杂的构图，以使着色器保持简洁。在这个“Box”之后，有一个用于启动计时器的按钮。我提供了一个布局图，以便更清晰地展示，但总的来说，布局本身已经非常简单了。</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/1*oIa0bosA1IbHuMZVKw9tFw.png" alt="" /></p>

<p>接下来，让我们添加必要的变量并定义整个布局。由于我们尚未准备好着色器，因此你可以暂时跳过“RuntimeShader”变量，只需运行项目并确保一切正常即可。我想强调一个重要的细节：如果你将着色器应用于一个不包含任何内容的“Box”，则需要为其设置背景颜色。这确保它参与合成，从而使我们的效果可见。但是，务必在应用“graphicsLayer”之后设置背景颜色。否则，只会渲染颜色，着色器将不可见。目前，布局应该如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">TimerShaderScreen</span><span class="p">(</span><span class="n">paddingValues</span><span class="p">:</span> <span class="n">PaddingValues</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">startValue</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="m">20</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">percentage</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableFloatStateOf</span><span class="p">(</span><span class="m">0.0f</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">isRunning</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="k">false</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">seconds</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="n">startValue</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// circularTimeShader是一个包含着色器代码的字符串对象，我们将在下面的部分中编写</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">shader</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">RuntimeShader</span><span class="p">(</span><span class="n">circularTimerShader</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Column</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">fillMaxSize</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="n">paddingValues</span><span class="p">),</span>
</span><span class='line'>        <span class="n">verticalArrangement</span> <span class="p">=</span> <span class="n">Arrangement</span><span class="p">.</span><span class="n">Center</span><span class="p">,</span>
</span><span class='line'>        <span class="n">horizontalAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">CenterHorizontally</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">OutlinedTextField</span><span class="p">(</span>
</span><span class='line'>            <span class="n">value</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">startValue</span> <span class="p">!=</span> <span class="m">0</span><span class="p">)</span> <span class="n">startValue</span><span class="p">.</span><span class="n">toString</span><span class="p">()</span> <span class="k">else</span> <span class="s">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">onValueChange</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">startValue</span> <span class="p">=</span> <span class="n">it</span><span class="p">.</span><span class="n">toIntOrNull</span><span class="p">()</span> <span class="o">?:</span> <span class="m">0</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="n">label</span> <span class="p">=</span> <span class="p">{</span> <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Start value&quot;</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">width</span><span class="p">(</span><span class="m">200.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>        <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">250.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>            <span class="n">contentAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">Center</span>
</span><span class='line'>        <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>                <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">250.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">onSizeChanged</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">shader</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span><span class="s">&quot;resolution&quot;</span><span class="p">,</span> <span class="n">it</span><span class="p">.</span><span class="n">width</span><span class="p">.</span><span class="n">toFloat</span><span class="p">(),</span> <span class="n">it</span><span class="p">.</span><span class="n">height</span><span class="p">.</span><span class="n">toFloat</span><span class="p">())</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">graphicsLayer</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">shader</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span><span class="s">&quot;percentage&quot;</span><span class="p">,</span> <span class="n">percentage</span><span class="p">)</span>
</span><span class='line'>                        <span class="n">renderEffect</span> <span class="p">=</span> <span class="n">RenderEffect</span><span class="p">.</span><span class="n">createRuntimeShaderEffect</span><span class="p">(</span><span class="n">shader</span><span class="p">,</span> <span class="s">&quot;image&quot;</span><span class="p">).</span><span class="n">asComposeRenderEffect</span><span class="p">()</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Black</span><span class="p">),</span> <span class="c1">// &lt;-- 我们必须添加一些颜色，否则空框就会从构图中移除，就看不出效果了</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">Text</span><span class="p">(</span>
</span><span class='line'>                <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">fillMaxWidth</span><span class="p">(),</span>
</span><span class='line'>                <span class="n">textAlign</span> <span class="p">=</span> <span class="n">TextAlign</span><span class="p">.</span><span class="n">Center</span><span class="p">,</span>
</span><span class='line'>                <span class="n">text</span> <span class="p">=</span> <span class="n">seconds</span><span class="p">.</span><span class="n">toString</span><span class="p">(),</span>
</span><span class='line'>                <span class="n">fontSize</span> <span class="p">=</span> <span class="m">50.</span><span class="n">sp</span><span class="p">,</span>
</span><span class='line'>                <span class="n">fontWeight</span> <span class="p">=</span> <span class="n">FontWeight</span><span class="p">.</span><span class="n">Thin</span><span class="p">,</span>
</span><span class='line'>                <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">White</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">OutlinedButton</span><span class="p">(</span>
</span><span class='line'>            <span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span> <span class="n">isRunning</span> <span class="p">=</span> <span class="p">!</span><span class="n">isRunning</span> <span class="p">},</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="n">top</span> <span class="p">=</span> <span class="m">16.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Text</span><span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="n">isRunning</span><span class="p">)</span> <span class="s">&quot;Stop&quot;</span> <span class="k">else</span> <span class="s">&quot;Start&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是它在手机上的实际显示效果：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:924/1*HPGAGRtgTmxrihj91xiRXw.png" alt="" /></p>

<p>剩下的就是添加计时器本身的逻辑，然后我们就可以开始进入正文了。首先，让我们创建一个 <code>LaunchedEffect</code> 来在计时器运行时更新其值。同时，我们将在此代码块中计算着色器的 <code>percentage</code>。由于我们的着色器会从计时器的起始值向下过渡到零，因此我们需要对 <code>percentage</code> 变量进行归一化，使其相应地从 0 变为 1。代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">isRunning</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">startTime</span> <span class="p">=</span> <span class="n">System</span><span class="p">.</span><span class="n">currentTimeMillis</span><span class="p">()</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">isRunning</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">seconds</span><span class="p">.</span><span class="n">value</span> <span class="p">&lt;</span> <span class="m">0</span><span class="p">)</span> <span class="p">{</span> <span class="n">isRunning</span> <span class="p">=</span> <span class="k">false</span> <span class="p">}</span> <span class="c1">// 时间到时停止倒计时</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="py">elapsedTime</span> <span class="p">=</span> <span class="n">System</span><span class="p">.</span><span class="n">currentTimeMillis</span><span class="p">()</span> <span class="p">-</span> <span class="n">startTime</span> <span class="c1">// 已用时间（单位是毫秒）</span>
</span><span class='line'>        <span class="n">percentage</span> <span class="p">=</span> <span class="p">(</span><span class="n">elapsedTime</span> <span class="p">/</span> <span class="m">1000f</span><span class="p">)</span> <span class="p">/</span> <span class="n">startValue</span> <span class="c1">// 将经过的时间归一化为[0,1]</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 将百分比限制在 [0, 1] 之间以避免过冲</span>
</span><span class='line'>        <span class="n">percentage</span> <span class="p">=</span> <span class="n">percentage</span><span class="p">.</span><span class="n">coerceIn</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="m">1f</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 计算剩余秒数</span>
</span><span class='line'>        <span class="n">seconds</span><span class="p">.</span><span class="n">value</span> <span class="p">=</span> <span class="p">((</span><span class="n">startValue</span> <span class="p">-</span> <span class="p">(</span><span class="n">elapsedTime</span> <span class="p">/</span> <span class="m">1000f</span><span class="p">))).</span><span class="n">toInt</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">delay</span><span class="p">(</span><span class="m">10</span><span class="p">)</span> <span class="c1">// 延迟以控制更新频率</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Compose 部分就到此为止；让我们继续编写着色器吧！</p>

<p>首先，让我们定义来自 UI 的变量，以及着色器的最低设置。现在，我们将返回像素与归一化坐标中心的距离，作为颜色：<code>length(uv)</code>。如果这部分内容不太清楚，强烈建议你查看我的<a href="https://juejin.cn/post/7535292253813981247">教程</a>，了解如何在 Android 中使用着色器。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="py">circularTimerShader</span> <span class="p">=</span> <span class="s">&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">uniform</span> <span class="n">float</span> <span class="n">time</span><span class="p">;</span>
</span><span class='line'>    <span class="n">uniform</span> <span class="n">float</span> <span class="n">percentage</span><span class="p">;</span>
</span><span class='line'>    <span class="n">uniform</span> <span class="n">vec2</span> <span class="n">resolution</span><span class="p">;</span>
</span><span class='line'>    <span class="n">uniform</span> <span class="n">shader</span> <span class="n">image</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">vec4</span> <span class="n">main</span><span class="p">(</span><span class="n">float2</span> <span class="n">fragCoord</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">float2</span> <span class="n">uv</span> <span class="p">=</span> <span class="n">fragCoord</span> <span class="p">/</span> <span class="n">resolution</span> <span class="p">-</span> <span class="m">0.5</span><span class="p">;</span> <span class="c1">// 归一化坐标</span>
</span><span class='line'>        <span class="n">uv</span><span class="p">.</span><span class="n">x</span> <span class="p">*=</span> <span class="n">resolution</span><span class="p">.</span><span class="n">x</span> <span class="p">/</span> <span class="n">resolution</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">vec4</span><span class="p">(</span><span class="n">length</span><span class="p">(</span><span class="n">uv</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;.trimIndent()</span>
</span></code></pre></td></tr></table></div></figure>


<p>因此，目前我们得到的大致如下：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1000/1*e2GHAO-1N7K0KBjN4wAYww.png" alt="" /></p>

<p>现在，让我们尝试在标准笛卡尔平面上绘制一个“栅栏”，即一系列垂直的条形。如何实现这个效果？首先，我们将 y 轴上的所有值限制在零以下。着色器现在如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="k">vec4</span> <span class="n">main</span><span class="p">(</span><span class="n">float2</span> <span class="n">fragCoord</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">float2</span> <span class="n">uv</span> <span class="o">=</span> <span class="n">fragCoord</span> <span class="o">/</span> <span class="n">resolution</span> <span class="o">-</span> <span class="mf">0.5</span><span class="p">;</span> <span class="c1">// 归一化坐标</span>
</span><span class='line'>    <span class="n">uv</span><span class="p">.</span><span class="n">x</span> <span class="o">*=</span> <span class="n">resolution</span><span class="p">.</span><span class="n">x</span> <span class="o">/</span> <span class="n">resolution</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">vec3</span> <span class="n">color</span> <span class="o">=</span> <span class="k">vec3</span><span class="p">(</span><span class="mf">1.</span><span class="p">)</span> <span class="o">*</span> <span class="n">step</span><span class="p">(</span><span class="n">uv</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="k">vec4</span><span class="p">(</span><span class="n">color</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来，我们还将沿 x 轴裁剪掉一半的区域。记住，我们的 <code>uv</code> 坐标偏移了 0.5，使零点位于中心。这样，我们也可以沿 x 轴在零点处裁剪，只留下右上象限。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="k">float</span> <span class="n">fence</span> <span class="o">=</span> <span class="n">step</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="n">uv</span><span class="p">.</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'><span class="k">vec3</span> <span class="n">color</span> <span class="o">=</span> <span class="k">vec3</span><span class="p">(</span><span class="mf">1.</span><span class="p">)</span> <span class="o">*</span> <span class="n">step</span><span class="p">(</span><span class="n">uv</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">)</span> <span class="o">*</span> <span class="n">fence</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在，如果我们将 x 轴上的坐标乘以 10，并只取小数部分，我们将得到如下所示的 x 轴值：<code>[0...1, 0...1, 0...1, ...]</code>。再将它们平移 0.5，我们就得到了“栅栏”。下面，我演示了构建垂直条的三个步骤。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="k">vec4</span> <span class="n">main</span><span class="p">(</span><span class="n">float2</span> <span class="n">fragCoord</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">float2</span> <span class="n">uv</span> <span class="o">=</span> <span class="n">fragCoord</span> <span class="o">/</span> <span class="n">resolution</span> <span class="o">-</span> <span class="mf">0.5</span><span class="p">;</span> <span class="c1">// 归一化坐标</span>
</span><span class='line'>    <span class="n">uv</span><span class="p">.</span><span class="n">x</span> <span class="o">*=</span> <span class="n">resolution</span><span class="p">.</span><span class="n">x</span> <span class="o">/</span> <span class="n">resolution</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">float</span> <span class="n">fence</span> <span class="o">=</span> <span class="n">step</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="n">fract</span><span class="p">(</span><span class="n">uv</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="mf">10.</span><span class="p">)</span> <span class="o">-</span> <span class="mf">0.5</span><span class="p">);</span>
</span><span class='line'>    <span class="k">vec3</span> <span class="n">color</span> <span class="o">=</span> <span class="k">vec3</span><span class="p">(</span><span class="mf">1.0</span><span class="p">)</span> <span class="o">*</span> <span class="n">step</span><span class="p">(</span><span class="n">uv</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">)</span> <span class="o">*</span> <span class="n">fence</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="k">vec4</span><span class="p">(</span><span class="n">color</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://miro.medium.com/v2/resize:fit:1400/1*l7X_24sRzAI7iYZLqeWKFQ.png" alt="" /></p>

<p>现在到了最激动人心的部分：如何从笛卡尔坐标系过渡到极坐标系？换句话说，如何创建相同的“栅栏”，但使其看起来像圆形？让我们来弄清楚。</p>

<p>我们习惯用两个值来描述函数：<code>x</code> 和 <code>y</code>。这使我们能够确定像素在平面上的精确位置并为其分配颜色。在我们的例子中，坐标系是 <code>uv</code>。为了垂直裁剪，我们使用 <code>y</code>；为了水平裁剪“栅栏”的各个部分，我们使用 <code>x</code>。</p>

<p>极坐标系与此非常相似，但我们使用的不是水平轴和垂直轴，而是半径（与原点的距离）和角度。</p>

<p>换句话说，由于这两个坐标系都包含两个分量，理解它们的含义使我们能够相对轻松地将笛卡尔坐标系中使用的公式和技术应用于极坐标系。然而，最终的图像看起来会“弯曲”成一个圆形。让我们尝试将“栅栏”转换为极坐标：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="k">vec2</span> <span class="n">cartesianToPolar</span><span class="p">(</span><span class="k">vec2</span> <span class="n">uv</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">r</span> <span class="o">=</span> <span class="n">length</span><span class="p">(</span><span class="n">uv</span><span class="p">);</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">theta</span> <span class="o">=</span> <span class="n">atan</span><span class="p">(</span><span class="n">uv</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="n">uv</span><span class="p">.</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">vec2</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">theta</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span><span class="k">vec4</span> <span class="n">main</span><span class="p">(</span><span class="n">float2</span> <span class="n">fragCoord</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">float2</span> <span class="n">uv</span> <span class="o">=</span> <span class="n">fragCoord</span> <span class="o">/</span> <span class="n">resolution</span> <span class="o">-</span> <span class="mf">0.5</span><span class="p">;</span> <span class="c1">// 归一化坐标</span>
</span><span class='line'>    <span class="n">uv</span><span class="p">.</span><span class="n">x</span> <span class="o">*=</span> <span class="n">resolution</span><span class="p">.</span><span class="n">x</span> <span class="o">/</span> <span class="n">resolution</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 转换为极坐标</span>
</span><span class='line'>    <span class="k">vec2</span> <span class="n">polar</span> <span class="o">=</span> <span class="n">cartesianToPolar</span><span class="p">(</span><span class="n">uv</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">float</span> <span class="n">r</span> <span class="o">=</span> <span class="n">polar</span><span class="p">.</span><span class="n">x</span><span class="p">;</span> <span class="c1">// 半径</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">float</span> <span class="n">theta</span> <span class="o">=</span> <span class="n">polar</span><span class="p">.</span><span class="n">y</span><span class="p">;</span> <span class="c1">// 角度</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">float</span> <span class="n">fence</span> <span class="o">=</span> <span class="n">step</span><span class="p">(</span> <span class="mf">0.5</span><span class="p">,</span> <span class="n">fract</span><span class="p">(</span><span class="n">theta</span> <span class="o">*</span> <span class="mf">10.0</span><span class="p">));</span>
</span><span class='line'>    <span class="k">vec3</span> <span class="n">color</span> <span class="o">=</span> <span class="k">vec3</span><span class="p">(</span><span class="mf">1.</span><span class="p">)</span> <span class="o">*</span> <span class="n">step</span><span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">r</span><span class="p">)</span> <span class="o">*</span> <span class="n">fence</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="k">vec4</span><span class="p">(</span><span class="n">color</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://miro.medium.com/v2/resize:fit:1000/1*UR389J0im6ziWvc_d9ERzA.png" alt="极坐标系中的“栅栏”" /></p>

<p>但是，你可能会注意到，光线的宽度随着远离中心而增加。我们可以添加补偿来消除这种影响。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="c1">// 宽度已调整的进度条</span>
</span><span class='line'><span class="k">float</span> <span class="n">width</span> <span class="o">=</span> <span class="mf">0.02</span><span class="p">;</span> <span class="c1">// Bar width</span>
</span><span class='line'><span class="k">float</span> <span class="n">adjustedWidth</span> <span class="o">=</span> <span class="n">width</span> <span class="o">/</span> <span class="n">max</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="mf">0.001</span><span class="p">);</span> <span class="c1">// 补偿径向缩放</span>
</span><span class='line'><span class="k">float</span> <span class="n">fence</span> <span class="o">=</span> <span class="n">step</span><span class="p">(</span> <span class="mf">0.5</span> <span class="o">-</span> <span class="n">adjustedWidth</span><span class="p">,</span> <span class="n">fract</span><span class="p">(</span><span class="n">theta</span> <span class="o">*</span> <span class="mf">10.0</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来，我们不仅需要限制内半径，还需要限制外半径，以创建一个环，而不是无限延伸的光线。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="c1">// 将波浪蒙版均匀地涂抹在进度条上</span>
</span><span class='line'><span class="k">float</span> <span class="n">barRadius</span> <span class="o">=</span> <span class="mf">0.3</span><span class="p">;</span>
</span><span class='line'><span class="k">float</span> <span class="n">barMask</span> <span class="o">=</span> <span class="n">smoothstep</span><span class="p">(</span><span class="n">barRadius</span><span class="o">+</span><span class="mf">0.01</span><span class="p">,</span> <span class="n">barRadius</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>总的来说，此时它看起来应该像这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="k">vec4</span> <span class="n">main</span><span class="p">(</span><span class="n">float2</span> <span class="n">fragCoord</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">float2</span> <span class="n">uv</span> <span class="o">=</span> <span class="n">fragCoord</span> <span class="o">/</span> <span class="n">resolution</span> <span class="o">-</span> <span class="mf">0.5</span><span class="p">;</span> <span class="c1">// 归一化坐标</span>
</span><span class='line'>    <span class="n">uv</span><span class="p">.</span><span class="n">x</span> <span class="o">*=</span> <span class="n">resolution</span><span class="p">.</span><span class="n">x</span> <span class="o">/</span> <span class="n">resolution</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">float</span> <span class="n">width</span> <span class="o">=</span> <span class="mf">0.02</span><span class="p">;</span> <span class="c1">// 进度条宽度</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 转化为极坐标</span>
</span><span class='line'>    <span class="k">vec2</span> <span class="n">polar</span> <span class="o">=</span> <span class="n">cartesianToPolar</span><span class="p">(</span><span class="n">uv</span><span class="p">);</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">r</span> <span class="o">=</span> <span class="n">polar</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 半径</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">theta</span> <span class="o">=</span> <span class="n">polar</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 角度</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">innerMask</span> <span class="o">=</span> <span class="n">step</span><span class="p">(</span><span class="mf">0.3</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 宽度已调整的进度条</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">adjustedWidth</span> <span class="o">=</span> <span class="n">width</span> <span class="o">/</span> <span class="n">max</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="mf">0.001</span><span class="p">);</span> <span class="c1">// 补偿径向缩放</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">fence</span> <span class="o">=</span> <span class="n">step</span><span class="p">(</span> <span class="mf">0.5</span> <span class="o">-</span> <span class="n">adjustedWidth</span><span class="p">,</span> <span class="n">fract</span><span class="p">(</span><span class="n">theta</span> <span class="o">*</span> <span class="mf">10.0</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 将波浪蒙版均匀地涂抹在进度条上</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">barRadius</span> <span class="o">=</span> <span class="mf">0.3</span><span class="p">;</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">barMask</span> <span class="o">=</span> <span class="n">smoothstep</span><span class="p">(</span><span class="n">barRadius</span><span class="o">+</span><span class="mf">0.01</span><span class="p">,</span> <span class="n">barRadius</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 结合进度条和内层蒙版</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">combinedMask</span> <span class="o">=</span> <span class="n">barMask</span> <span class="o">*</span> <span class="n">fence</span> <span class="o">*</span> <span class="n">innerMask</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">vec3</span> <span class="n">col</span> <span class="o">=</span> <span class="k">vec3</span><span class="p">(</span><span class="mf">1.0</span><span class="p">)</span> <span class="o">*</span> <span class="n">combinedMask</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="k">vec4</span><span class="p">(</span><span class="n">col</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://miro.medium.com/v2/resize:fit:1288/1*B_VJQme_vnEdXq0pEmfLZg.png" alt="" /></p>

<p>最后一步是根据 <code>percentage</code> 的值增加列的大小。这里需要注意的是，角度 <code>theta</code> 的当前范围是从 <code>-Pi</code> 到 <code>Pi</code>，因此需要对其进行归一化，即将其转换为从 <code>0</code> 到 <code>1</code> 的范围。这样可以更容易地将其与 <code>percentage</code> 的值对齐，因为 <code>percentage</code> 的值也是从 <code>0</code> 到 <code>1</code> 变化的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="c1">// 还将其移动，使零位于顶部而不是左侧</span>
</span><span class='line'><span class="k">float</span> <span class="n">normalizedAngle</span> <span class="o">=</span> <span class="n">mod</span><span class="p">((</span><span class="n">theta</span> <span class="o">+</span> <span class="mf">1.57079632679</span><span class="p">)</span> <span class="o">/</span> <span class="mf">6.28318530718</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在我们可以为“wave”应用另一个蒙版，它将取决于 <code>percentage</code> 变量的当前值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="c1">// 计算条形中心的波浪蒙版</span>
</span><span class='line'><span class="k">float</span> <span class="n">wave</span> <span class="o">=</span> <span class="n">smoothstep</span><span class="p">(</span><span class="n">fixPercentage</span><span class="p">,</span> <span class="n">fixPercentage</span> <span class="o">-</span> <span class="mf">0.1</span><span class="p">,</span> <span class="n">centerNormalizedAngle</span><span class="p">);</span>
</span><span class='line'><span class="k">float</span> <span class="n">waveMask</span> <span class="o">=</span> <span class="n">smoothstep</span><span class="p">(</span><span class="mf">0.32</span> <span class="o">+</span> <span class="mf">0.1</span> <span class="o">*</span> <span class="n">wave</span><span class="p">,</span> <span class="mf">0.31</span> <span class="o">+</span> <span class="mf">0.1</span> <span class="o">*</span> <span class="n">wave</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们还需要将这个波浪的值添加到 <code>barRadius</code> 中，并在最后将整体遮罩乘以 <code>waveMask</code>。此外，我将最终 Alpha 值的常量值替换为组合遮罩的值。这样，我们现在得到了一个几乎完整的效果。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="c1">// 其余代码 ...</span>
</span><span class='line'>
</span><span class='line'><span class="k">float</span> <span class="n">barRadius</span> <span class="o">=</span> <span class="mf">0.3</span> <span class="o">+</span> <span class="mf">0.1</span> <span class="o">*</span> <span class="n">wave</span><span class="p">;</span> <span class="c1">// 使用波形蒙版设置条形半径</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'><span class="k">float</span> <span class="n">combinedMask</span> <span class="o">=</span> <span class="n">barMask</span> <span class="o">*</span> <span class="n">fence</span> <span class="o">*</span> <span class="n">innerMask</span> <span class="o">*</span> <span class="n">waveMask</span><span class="p">;</span>
</span><span class='line'><span class="k">vec3</span> <span class="n">col</span> <span class="o">=</span> <span class="k">vec3</span><span class="p">(</span><span class="mf">1.0</span><span class="p">)</span> <span class="o">*</span> <span class="n">combinedMask</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="k">vec4</span><span class="p">(</span><span class="n">col</span><span class="p">,</span> <span class="n">combinedMask</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://miro.medium.com/v2/resize:fit:1000/1*ZduMs_yVlmd5r7CxADMpRQ.gif" alt="" /></p>

<p>我想在本节中添加的最后一点是稍微优化一下蒙版。你可能已经注意到，每个列的左右边缘半径不同，但我希望它们的高度一致。这样可以使效果看起来更简洁一些。以下是实现方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="c1">// 在每个条形的中心采样波形蒙版</span>
</span><span class='line'><span class="k">float</span> <span class="n">barIndex</span> <span class="o">=</span> <span class="n">floor</span><span class="p">(</span><span class="n">theta</span> <span class="o">*</span> <span class="mf">10.0</span><span class="p">);</span> <span class="c1">// 确定条的索引</span>
</span><span class='line'><span class="k">float</span> <span class="n">centerTheta</span> <span class="o">=</span> <span class="p">(</span><span class="n">barIndex</span> <span class="o">+</span> <span class="mf">0.5</span><span class="p">)</span> <span class="o">/</span> <span class="mf">10.0</span><span class="p">;</span> <span class="c1">// 条的中心角</span>
</span><span class='line'><span class="k">float</span> <span class="n">centerNormalizedAngle</span> <span class="o">=</span> <span class="n">mod</span><span class="p">((</span><span class="n">centerTheta</span> <span class="o">+</span> <span class="mf">1.57079632679</span><span class="p">)</span> <span class="o">/</span> <span class="mf">6.28318530718</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 计算条形中心的波浪蒙版</span>
</span><span class='line'><span class="k">float</span> <span class="n">wave</span> <span class="o">=</span> <span class="n">smoothstep</span><span class="p">(</span><span class="n">fixPercentage</span><span class="p">,</span> <span class="n">fixPercentage</span> <span class="o">-</span> <span class="mf">0.1</span><span class="p">,</span> <span class="n">centerNormalizedAngle</span><span class="p">);</span>
</span><span class='line'><span class="k">float</span> <span class="n">waveMask</span> <span class="o">=</span> <span class="n">smoothstep</span><span class="p">(</span><span class="mf">0.32</span> <span class="o">+</span> <span class="mf">0.1</span> <span class="o">*</span> <span class="n">wave</span><span class="p">,</span> <span class="mf">0.31</span> <span class="o">+</span> <span class="mf">0.1</span> <span class="o">*</span> <span class="n">wave</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>总的来说，核心效果现在已经完成。然而，在着色器中，通常情况下，99% 复杂而有趣的工作构成了效果的基础，但单独来看，效果可能看起来简单平淡。正是这最后的 1% 的润色，才能彻底改变一切！</p>

<p>让我们为着色器添加一个渐变。我使用了最简单的一个，它在 <a href="http://shadertoy.com/">ShaderToy</a> （链接：<a href="http://shadertoy.com/%EF%BC%89%E4%B8%AD%E5%90%AF%E5%8A%A8%E6%96%B0%E9%A1%B9%E7%9B%AE%E6%97%B6%E9%BB%98%E8%AE%A4%E5%88%9B%E5%BB%BA%EF%BC%88%E4%BD%A0%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE%E7%BD%91%E7%AB%99%E5%B9%B6%E7%82%B9%E5%87%BB%E5%8F%B3%E4%B8%8A%E8%A7%92%E7%9A%84%E2%80%9C%E6%96%B0%E5%BB%BA%E2%80%9D%E6%8C%89%E9%92%AE%E6%9F%A5%E7%9C%8B%EF%BC%89%E3%80%82%E6%88%91%E6%8A%8A%E5%AE%83%E7%A7%BB%E5%88%B0%E4%BA%86%E4%B8%80%E4%B8%AA%E5%8D%95%E7%8B%AC%E7%9A%84%E6%96%B9%E6%B3%95%E4%B8%AD%EF%BC%8C%E5%B9%B6%E5%B0%86%E5%85%B6%E5%91%BD%E5%90%8D%E4%B8%BA">http://shadertoy.com/%EF%BC%89%E4%B8%AD%E5%90%AF%E5%8A%A8%E6%96%B0%E9%A1%B9%E7%9B%AE%E6%97%B6%E9%BB%98%E8%AE%A4%E5%88%9B%E5%BB%BA%EF%BC%88%E4%BD%A0%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE%E7%BD%91%E7%AB%99%E5%B9%B6%E7%82%B9%E5%87%BB%E5%8F%B3%E4%B8%8A%E8%A7%92%E7%9A%84%E2%80%9C%E6%96%B0%E5%BB%BA%E2%80%9D%E6%8C%89%E9%92%AE%E6%9F%A5%E7%9C%8B%EF%BC%89%E3%80%82%E6%88%91%E6%8A%8A%E5%AE%83%E7%A7%BB%E5%88%B0%E4%BA%86%E4%B8%80%E4%B8%AA%E5%8D%95%E7%8B%AC%E7%9A%84%E6%96%B9%E6%B3%95%E4%B8%AD%EF%BC%8C%E5%B9%B6%E5%B0%86%E5%85%B6%E5%91%BD%E5%90%8D%E4%B8%BA</a> <code>gradient</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'> <span class="k">vec3</span> <span class="n">gradient</span><span class="p">(</span><span class="k">vec2</span> <span class="n">uv</span><span class="p">,</span> <span class="k">float</span> <span class="n">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mf">0.5</span> <span class="o">+</span> <span class="mf">0.5</span> <span class="o">*</span> <span class="n">cos</span><span class="p">(</span><span class="n">t</span> <span class="o">+</span> <span class="n">uv</span><span class="p">.</span><span class="n">xyx</span> <span class="o">+</span> <span class="k">vec3</span><span class="p">(</span><span class="mo">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">));</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在，我不再将最终颜色乘以 <code>vec3(1.)</code>（即白色），而是将其乘以我们刚刚创建的渐变。此外，我还对其余区域应用了相同的渐变，但 Alpha 值非常低，这为整个屏幕增添了微妙的辉光。</p>

<blockquote><p>请注意，要看到这个效果，我们还必须从 Compose 代码中传递 <code>time</code>。</p></blockquote>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/1*DXGRdfXQ67eQG7UMnMy8lw.png" alt="" /></p>

<p>现在，让我们转到项目的可组合部分，并在文本变化时添加动画和模糊效果。我不会详细介绍这一点，因为这超出了本课的范围。但是，如果本教程完全不包含代码，感觉不太对劲。所以，以下是可组合部分（包含时间更新和文本动画）的最终版本：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">TimerShaderScreen</span><span class="p">(</span><span class="n">paddingValues</span><span class="p">:</span> <span class="n">PaddingValues</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">startValue</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="m">20</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">percentage</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableFloatStateOf</span><span class="p">(</span><span class="m">0.0f</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">isRunning</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="k">false</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">shader</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">RuntimeShader</span><span class="p">(</span><span class="n">circularTimerShader</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="py">time</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="m">0f</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">LaunchedEffect</span><span class="p">(</span><span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="k">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">time</span> <span class="p">+=</span> <span class="m">0.01f</span>
</span><span class='line'>            <span class="n">delay</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">seconds</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="n">startValue</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">isRunning</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">startTime</span> <span class="p">=</span> <span class="n">System</span><span class="p">.</span><span class="n">currentTimeMillis</span><span class="p">()</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">isRunning</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">seconds</span><span class="p">.</span><span class="n">value</span> <span class="p">&lt;</span> <span class="m">0</span><span class="p">)</span> <span class="p">{</span> <span class="n">isRunning</span> <span class="p">=</span> <span class="k">false</span> <span class="p">}</span> <span class="c1">// 时间到时停止倒计时</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">val</span> <span class="py">elapsedTime</span> <span class="p">=</span> <span class="n">System</span><span class="p">.</span><span class="n">currentTimeMillis</span><span class="p">()</span> <span class="p">-</span> <span class="n">startTime</span> <span class="c1">// 已用时间（单位是毫秒）</span>
</span><span class='line'>            <span class="n">percentage</span> <span class="p">=</span> <span class="p">(</span><span class="n">elapsedTime</span> <span class="p">/</span> <span class="m">1000f</span><span class="p">)</span> <span class="p">/</span> <span class="n">startValue</span> <span class="c1">// 将经过的时间归一化为[0,1]</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// 将百分比限制在 [0, 1] 之间以避免过冲</span>
</span><span class='line'>            <span class="n">percentage</span> <span class="p">=</span> <span class="n">percentage</span><span class="p">.</span><span class="n">coerceIn</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="m">1f</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// 计算剩余秒数</span>
</span><span class='line'>            <span class="n">seconds</span><span class="p">.</span><span class="n">value</span> <span class="p">=</span> <span class="p">((</span><span class="n">startValue</span> <span class="p">-</span> <span class="p">(</span><span class="n">elapsedTime</span> <span class="p">/</span> <span class="m">1000f</span><span class="p">))).</span><span class="n">toInt</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">delay</span><span class="p">(</span><span class="m">10</span><span class="p">)</span> <span class="c1">// 延迟以控制更新频率</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Column</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">fillMaxSize</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="n">paddingValues</span><span class="p">),</span>
</span><span class='line'>        <span class="n">verticalArrangement</span> <span class="p">=</span> <span class="n">Arrangement</span><span class="p">.</span><span class="n">Center</span><span class="p">,</span>
</span><span class='line'>        <span class="n">horizontalAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">CenterHorizontally</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">OutlinedTextField</span><span class="p">(</span>
</span><span class='line'>            <span class="n">value</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">startValue</span> <span class="p">!=</span> <span class="m">0</span><span class="p">)</span> <span class="n">startValue</span><span class="p">.</span><span class="n">toString</span><span class="p">()</span> <span class="k">else</span> <span class="s">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">onValueChange</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">startValue</span> <span class="p">=</span> <span class="n">it</span><span class="p">.</span><span class="n">toIntOrNull</span><span class="p">()</span> <span class="o">?:</span> <span class="m">0</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="n">label</span> <span class="p">=</span> <span class="p">{</span> <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Start value&quot;</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">width</span><span class="p">(</span><span class="m">200.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>        <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">250.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>            <span class="n">contentAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">Center</span>
</span><span class='line'>        <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>                <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">250.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">onSizeChanged</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">shader</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span><span class="s">&quot;resolution&quot;</span><span class="p">,</span> <span class="n">it</span><span class="p">.</span><span class="n">width</span><span class="p">.</span><span class="n">toFloat</span><span class="p">(),</span> <span class="n">it</span><span class="p">.</span><span class="n">height</span><span class="p">.</span><span class="n">toFloat</span><span class="p">())</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">graphicsLayer</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">shader</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span><span class="s">&quot;percentage&quot;</span><span class="p">,</span> <span class="n">percentage</span><span class="p">)</span>
</span><span class='line'>                        <span class="n">shader</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span><span class="s">&quot;time&quot;</span><span class="p">,</span> <span class="n">time</span><span class="p">)</span>
</span><span class='line'>                        <span class="n">renderEffect</span> <span class="p">=</span> <span class="n">RenderEffect</span><span class="p">.</span><span class="n">createRuntimeShaderEffect</span><span class="p">(</span><span class="n">shader</span><span class="p">,</span> <span class="s">&quot;image&quot;</span><span class="p">).</span><span class="n">asComposeRenderEffect</span><span class="p">()</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Black</span><span class="p">),</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>            <span class="k">var</span> <span class="py">previousSeconds</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="n">seconds</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">coerceAtLeast</span><span class="p">(</span><span class="m">0</span><span class="p">))</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">AnimatedContent</span><span class="p">(</span>
</span><span class='line'>                <span class="n">targetState</span> <span class="p">=</span> <span class="n">seconds</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">coerceAtLeast</span><span class="p">(</span><span class="m">0</span><span class="p">),</span>
</span><span class='line'>                <span class="n">transitionSpec</span> <span class="p">=</span> <span class="p">{</span>
</span><span class='line'>                    <span class="p">(</span><span class="n">slideInVertically</span><span class="p">(</span><span class="n">animationSpec</span> <span class="p">=</span> <span class="n">tween</span><span class="p">(</span><span class="m">500</span><span class="p">))</span> <span class="p">{</span> <span class="n">height</span> <span class="p">-&gt;</span> <span class="p">-</span><span class="n">height</span> <span class="p">}</span> <span class="p">+</span> <span class="n">fadeIn</span><span class="p">(</span>
</span><span class='line'>                        <span class="n">animationSpec</span> <span class="p">=</span> <span class="n">tween</span><span class="p">(</span>
</span><span class='line'>                            <span class="m">500</span>
</span><span class='line'>                        <span class="p">)</span>
</span><span class='line'>                    <span class="p">))</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">togetherWith</span><span class="p">(</span><span class="n">slideOutVertically</span><span class="p">(</span><span class="n">animationSpec</span> <span class="p">=</span> <span class="n">tween</span><span class="p">(</span><span class="m">500</span><span class="p">))</span> <span class="p">{</span> <span class="n">height</span> <span class="p">-&gt;</span> <span class="n">height</span> <span class="p">}</span> <span class="p">+</span> <span class="n">fadeOut</span><span class="p">(</span>
</span><span class='line'>                            <span class="n">tween</span><span class="p">(</span><span class="m">500</span><span class="p">)</span>
</span><span class='line'>                        <span class="p">))</span>
</span><span class='line'>                <span class="p">},</span>
</span><span class='line'>                <span class="n">label</span> <span class="p">=</span> <span class="s">&quot;CountdownAnimation&quot;</span>
</span><span class='line'>            <span class="p">)</span> <span class="p">{</span> <span class="n">targetSeconds</span> <span class="p">-&gt;</span>
</span><span class='line'>                <span class="c1">// 检测是否正在转换</span>
</span><span class='line'>                <span class="k">val</span> <span class="py">isTransitioning</span> <span class="p">=</span> <span class="n">targetSeconds</span> <span class="p">!=</span> <span class="n">previousSeconds</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// 过渡期间模糊动画</span>
</span><span class='line'>                <span class="k">val</span> <span class="py">blurRadius</span> <span class="k">by</span> <span class="n">animateFloatAsState</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">targetValue</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">isTransitioning</span><span class="p">)</span> <span class="m">30f</span> <span class="k">else</span> <span class="m">0f</span><span class="p">,</span> <span class="c1">// 过渡时模糊</span>
</span><span class='line'>                    <span class="n">animationSpec</span> <span class="p">=</span> <span class="n">tween</span><span class="p">(</span><span class="n">durationMillis</span> <span class="p">=</span> <span class="m">500</span><span class="p">)</span> <span class="c1">// 匹配过渡持续时间</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// 转换完成后更新 previousSeconds</span>
</span><span class='line'>                <span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">targetSeconds</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">previousSeconds</span> <span class="p">=</span> <span class="n">targetSeconds</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">Text</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">fillMaxWidth</span><span class="p">()</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">graphicsLayer</span> <span class="p">{</span>
</span><span class='line'>                            <span class="c1">// 应用动画模糊效果</span>
</span><span class='line'>                            <span class="n">renderEffect</span> <span class="p">=</span> <span class="n">RenderEffect</span><span class="p">.</span><span class="n">createBlurEffect</span><span class="p">(</span>
</span><span class='line'>                                <span class="n">blurRadius</span><span class="p">,</span> <span class="n">blurRadius</span><span class="p">,</span> <span class="n">android</span><span class="p">.</span><span class="n">graphics</span><span class="p">.</span><span class="n">Shader</span><span class="p">.</span><span class="n">TileMode</span><span class="p">.</span><span class="n">CLAMP</span>
</span><span class='line'>                            <span class="p">).</span><span class="n">asComposeRenderEffect</span><span class="p">()</span>
</span><span class='line'>                        <span class="p">},</span>
</span><span class='line'>                    <span class="n">textAlign</span> <span class="p">=</span> <span class="n">androidx</span><span class="p">.</span><span class="n">compose</span><span class="p">.</span><span class="n">ui</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="n">style</span><span class="p">.</span><span class="n">TextAlign</span><span class="p">.</span><span class="n">Center</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">text</span> <span class="p">=</span> <span class="n">targetSeconds</span><span class="p">.</span><span class="n">toString</span><span class="p">(),</span>
</span><span class='line'>                    <span class="n">fontSize</span> <span class="p">=</span> <span class="m">50.</span><span class="n">sp</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">fontWeight</span> <span class="p">=</span> <span class="n">androidx</span><span class="p">.</span><span class="n">compose</span><span class="p">.</span><span class="n">ui</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="n">font</span><span class="p">.</span><span class="n">FontWeight</span><span class="p">.</span><span class="n">Thin</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">White</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">OutlinedButton</span><span class="p">(</span>
</span><span class='line'>            <span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span> <span class="n">isRunning</span> <span class="p">=</span> <span class="p">!</span><span class="n">isRunning</span> <span class="p">},</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="n">top</span> <span class="p">=</span> <span class="m">16.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Text</span><span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="n">isRunning</span><span class="p">)</span> <span class="s">&quot;Stop&quot;</span> <span class="k">else</span> <span class="s">&quot;Start&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以及最终的着色器代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="k">uniform</span> <span class="k">float</span> <span class="n">time</span><span class="p">;</span>
</span><span class='line'><span class="k">uniform</span> <span class="k">float</span> <span class="n">percentage</span><span class="p">;</span>
</span><span class='line'><span class="k">uniform</span> <span class="k">vec2</span> <span class="n">resolution</span><span class="p">;</span>
</span><span class='line'><span class="k">uniform</span> <span class="n">shader</span> <span class="n">image</span><span class="p">;</span><span class="k">vec2</span> <span class="n">cartesianToPolar</span><span class="p">(</span><span class="k">vec2</span> <span class="n">uv</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">r</span> <span class="o">=</span> <span class="n">length</span><span class="p">(</span><span class="n">uv</span><span class="p">);</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">theta</span> <span class="o">=</span> <span class="n">atan</span><span class="p">(</span><span class="n">uv</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="n">uv</span><span class="p">.</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">vec2</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">theta</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span><span class="k">vec3</span> <span class="n">gradient</span><span class="p">(</span><span class="k">vec2</span> <span class="n">uv</span><span class="p">,</span> <span class="k">float</span> <span class="n">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="mf">0.5</span> <span class="o">+</span> <span class="mf">0.5</span> <span class="o">*</span> <span class="n">cos</span><span class="p">(</span><span class="n">t</span> <span class="o">+</span> <span class="n">uv</span><span class="p">.</span><span class="n">xyx</span> <span class="o">+</span> <span class="k">vec3</span><span class="p">(</span><span class="mo">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span><span class="k">vec4</span> <span class="n">main</span><span class="p">(</span><span class="n">float2</span> <span class="n">fragCoord</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">float2</span> <span class="n">uv</span> <span class="o">=</span> <span class="n">fragCoord</span> <span class="o">/</span> <span class="n">resolution</span> <span class="o">-</span> <span class="mf">0.5</span><span class="p">;</span> <span class="c1">// 归一化坐标</span>
</span><span class='line'>    <span class="n">uv</span><span class="p">.</span><span class="n">x</span> <span class="o">*=</span> <span class="n">resolution</span><span class="p">.</span><span class="n">x</span> <span class="o">/</span> <span class="n">resolution</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">float</span> <span class="n">width</span> <span class="o">=</span> <span class="mf">0.02</span><span class="p">;</span> <span class="c1">// 条形宽度</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 转换为极坐标</span>
</span><span class='line'>    <span class="k">vec2</span> <span class="n">polar</span> <span class="o">=</span> <span class="n">cartesianToPolar</span><span class="p">(</span><span class="n">uv</span><span class="p">);</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">r</span> <span class="o">=</span> <span class="n">polar</span><span class="p">.</span><span class="n">x</span><span class="p">;</span> <span class="c1">// 半径</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">float</span> <span class="n">theta</span> <span class="o">=</span> <span class="n">polar</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>    <span class="c1">// 角度</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">float</span> <span class="n">innerMask</span> <span class="o">=</span> <span class="n">step</span><span class="p">(</span><span class="mf">0.3</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 将顶部设为零，使角度标准化</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">normalizedAngle</span> <span class="o">=</span> <span class="n">mod</span><span class="p">((</span><span class="n">theta</span> <span class="o">+</span> <span class="mf">1.57079632679</span><span class="p">)</span> <span class="o">/</span> <span class="mf">6.28318530718</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 固定百分比补偿</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">fixPercentage</span> <span class="o">=</span> <span class="n">percentage</span> <span class="o">+</span> <span class="n">percentage</span> <span class="o">*</span> <span class="mf">0.1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 在每个条形的中心采样波形蒙板</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">barIndex</span> <span class="o">=</span> <span class="n">floor</span><span class="p">(</span><span class="n">theta</span> <span class="o">*</span> <span class="mf">10.0</span><span class="p">);</span> <span class="c1">// 确定条的索引</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">centerTheta</span> <span class="o">=</span> <span class="p">(</span><span class="n">barIndex</span> <span class="o">+</span> <span class="mf">0.5</span><span class="p">)</span> <span class="o">/</span> <span class="mf">10.0</span><span class="p">;</span> <span class="c1">// 条的中心角</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">centerNormalizedAngle</span> <span class="o">=</span> <span class="n">mod</span><span class="p">((</span><span class="n">centerTheta</span> <span class="o">+</span> <span class="mf">1.57079632679</span><span class="p">)</span> <span class="o">/</span> <span class="mf">6.28318530718</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 计算条形中心的波浪蒙板</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">wave</span> <span class="o">=</span> <span class="n">smoothstep</span><span class="p">(</span><span class="n">fixPercentage</span><span class="p">,</span> <span class="n">fixPercentage</span> <span class="o">-</span> <span class="mf">0.1</span><span class="p">,</span> <span class="n">centerNormalizedAngle</span><span class="p">);</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">waveMask</span> <span class="o">=</span> <span class="n">smoothstep</span><span class="p">(</span><span class="mf">0.32</span> <span class="o">+</span> <span class="mf">0.1</span> <span class="o">*</span> <span class="n">wave</span><span class="p">,</span> <span class="mf">0.31</span> <span class="o">+</span> <span class="mf">0.1</span> <span class="o">*</span> <span class="n">wave</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 宽度已调整的条形图案</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">adjustedWidth</span> <span class="o">=</span> <span class="n">width</span> <span class="o">/</span> <span class="n">max</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="mf">0.001</span><span class="p">);</span> <span class="c1">// 补偿径向缩放</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">fence</span> <span class="o">=</span> <span class="n">step</span><span class="p">(</span> <span class="mf">0.5</span> <span class="o">-</span> <span class="n">adjustedWidth</span><span class="p">,</span> <span class="n">fract</span><span class="p">(</span><span class="n">theta</span> <span class="o">*</span> <span class="mf">10.0</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 将波浪蒙版均匀地涂抹在吧台上</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">barRadius</span> <span class="o">=</span> <span class="mf">0.3</span> <span class="o">+</span> <span class="mf">0.1</span> <span class="o">*</span> <span class="n">wave</span><span class="p">;</span> <span class="c1">// 使用波形蒙版设置条形半径</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">barMask</span> <span class="o">=</span> <span class="n">smoothstep</span><span class="p">(</span><span class="n">barRadius</span><span class="o">+</span><span class="mf">0.01</span><span class="p">,</span> <span class="n">barRadius</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 结合条形和内层蒙版</span>
</span><span class='line'>    <span class="k">float</span> <span class="n">combinedMask</span> <span class="o">=</span> <span class="n">barMask</span> <span class="o">*</span> <span class="n">fence</span> <span class="o">*</span> <span class="n">innerMask</span> <span class="o">*</span> <span class="n">waveMask</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">vec3</span> <span class="n">grad</span> <span class="o">=</span> <span class="n">gradient</span><span class="p">(</span><span class="n">uv</span><span class="p">,</span> <span class="n">time</span><span class="p">);</span>
</span><span class='line'>    <span class="k">vec3</span> <span class="n">col</span> <span class="o">=</span> <span class="n">grad</span> <span class="o">*</span> <span class="n">combinedMask</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="k">vec4</span><span class="p">(</span><span class="n">col</span> <span class="o">+</span> <span class="n">grad</span> <span class="o">*</span> <span class="mf">0.1</span><span class="p">,</span> <span class="n">combinedMask</span> <span class="o">+</span> <span class="n">length</span><span class="p">(</span><span class="n">uv</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>感谢阅读！如果你觉得我的实验有趣且讲解有帮助，欢迎加入我的<a href="https://t.me/droidshaderworks">Telegram频道</a>或在<a href="https://x.com/KrowaNaMostku">Twitter (X)</a>上关注我。你的支持意义重大，并激励着我。祝你撸码愉快！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Compose中的Shader实现一个雪花飘飘弹窗效果]]></title>
    <link href="https://alexhilton.github.io/blog/2025/08/17/snow-dialog-shader/"/>
    <updated>2025-08-17T22:02:24+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/08/17/snow-dialog-shader</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自「Snow Dialog Shader Tutorial」，原文链接<a href="https://medium.com/@off.mind.by/snow-dialog-shader-tutorial-dde1b4a61e20">https://medium.com/@off.mind.by/snow-dialog-shader-tutorial-dde1b4a61e20</a>，由Alex Volkov发布于2024年12月27日。</p></blockquote>

<p><a href="https://alexhilton.github.io/blog/2025/08/17/snow-dialog-shader/"><img src="https://miro.medium.com/v2/resize:fit:2000/1*oNN6ZtalbQEvYCpTx8gLWg.png" title="auto auto" ></a></p>

<!-- more -->


<p>大家好！在本教程中，我将向大家展示如何创建雪花覆盖的对话框效果。总的来说，该效果可以分为三个部分。</p>

<ol>
<li><strong>设置 Compose 代码</strong>：这确保了基础效果的实现。</li>
<li><strong>创建对话框底部积雪的着色器</strong>：这是我在今天教程中重点讲解的核心效果。</li>
<li><strong>添加飘落的雪花</strong>：为此，我在 ShaderToy 上找到了一个现成的着色器，并对其进行了一些优化，使其不会对手机性能造成太大负担。第三部分将包含原始着色器的链接以及一些优化说明。</li>
</ol>


<p>本教程主要讲解如何为对话框创建不断增长的雪盖效果。</p>

<p>最终效果如下：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:804/1*SRa57BglcDzpLzAAw1UAPw.gif" alt="最终效果" /></p>

<blockquote><p>在深入探讨之前，我想提醒你，我并没有为所有效果创建教程。不过，所有效果都可以在我的 <a href="https://github.com/AleksiejVolkov/runtimeshaders">GitHub</a> （链接：<a href="https://github.com/AleksiejVolkov/runtimeshaders%EF%BC%89%E4%B8%8A%E6%89%BE%E5%88%B0%E3%80%82%E4%BD%A0%E8%BF%98%E5%8F%AF%E4%BB%A5%E5%9C%A8%E6%88%91%E7%9A%84">https://github.com/AleksiejVolkov/runtimeshaders%EF%BC%89%E4%B8%8A%E6%89%BE%E5%88%B0%E3%80%82%E4%BD%A0%E8%BF%98%E5%8F%AF%E4%BB%A5%E5%9C%A8%E6%88%91%E7%9A%84</a> <a href="https://t.me/droidshaderworks">Telegram 频道</a> （链接：<a href="https://t.me/droidshaderworks%EF%BC%89%E4%B8%AD%E6%89%BE%E5%88%B0%E8%A7%86%E9%A2%91%E3%80%81%E6%96%B0%E6%95%88%E6%9E%9C%E5%85%AC%E5%91%8A%E4%BB%A5%E5%8F%8A%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E7%AD%94%E3%80%82%E6%9C%9F%E5%BE%85%E5%9C%A8%E9%82%A3%E9%87%8C%E8%A7%81%E5%88%B0%E4%BD%A0%EF%BC%81">https://t.me/droidshaderworks%EF%BC%89%E4%B8%AD%E6%89%BE%E5%88%B0%E8%A7%86%E9%A2%91%E3%80%81%E6%96%B0%E6%95%88%E6%9E%9C%E5%85%AC%E5%91%8A%E4%BB%A5%E5%8F%8A%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E7%AD%94%E3%80%82%E6%9C%9F%E5%BE%85%E5%9C%A8%E9%82%A3%E9%87%8C%E8%A7%81%E5%88%B0%E4%BD%A0%EF%BC%81</a></p></blockquote>

<p>让我们从 Compose 中为效果设置一个最小页面开始。它包含一张背景图片和一个位于中心的按钮，用于触发对话框。</p>

<p>需要注意的是，对话框不应来自 Material 库，而应使用 Compose 中最基本的“AlertDialog”。</p>

<p>以下是最低配置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">SnowDialogScreen</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">showDialog</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="k">false</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">(),</span>
</span><span class='line'>        <span class="n">contentAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">Center</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Image</span><span class="p">(</span>
</span><span class='line'>            <span class="n">painter</span> <span class="p">=</span> <span class="n">painterResource</span><span class="p">(</span><span class="n">id</span> <span class="p">=</span> <span class="n">R</span><span class="p">.</span><span class="n">drawable</span><span class="p">.</span><span class="n">christmas_night</span><span class="p">),</span>
</span><span class='line'>            <span class="n">contentDescription</span> <span class="p">=</span> <span class="s">&quot;Sample Image&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">contentScale</span> <span class="p">=</span> <span class="n">ContentScale</span><span class="p">.</span><span class="n">Crop</span><span class="p">,</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">()</span>
</span><span class='line'>        <span class="p">)</span>        <span class="k">if</span> <span class="p">(!</span><span class="n">showDialog</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Button</span><span class="p">(</span><span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span> <span class="n">showDialog</span> <span class="p">=</span> <span class="k">true</span> <span class="p">})</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Ho-ho-ho!&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">SnowedDialog</span> <span class="p">{</span> <span class="n">showDialog</span> <span class="p">=</span> <span class="k">false</span> <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">SnowedDialog</span><span class="p">(</span><span class="n">onDismiss</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">BasicAlertDialog</span><span class="p">(</span>
</span><span class='line'>        <span class="n">onDismissRequest</span> <span class="p">=</span> <span class="p">{</span> <span class="n">onDismiss</span><span class="p">()</span> <span class="p">},</span>
</span><span class='line'>        <span class="n">properties</span> <span class="p">=</span> <span class="n">DialogProperties</span><span class="p">(</span><span class="n">usePlatformDefaultWidth</span> <span class="p">=</span> <span class="k">false</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Column</span><span class="p">(</span>
</span><span class='line'>            <span class="n">Modifier</span>
</span><span class='line'>                <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="n">horizontal</span> <span class="p">=</span> <span class="m">16.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">shape</span> <span class="p">=</span> <span class="n">MaterialTheme</span><span class="p">.</span><span class="n">shapes</span><span class="p">.</span><span class="n">large</span><span class="p">,</span>
</span><span class='line'>                            <span class="n">color</span> <span class="p">=</span> <span class="n">MaterialTheme</span><span class="p">.</span><span class="n">colorScheme</span><span class="p">.</span><span class="n">surface</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">16.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>        <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Merry Christmas!&quot;</span><span class="p">,</span> <span class="n">style</span> <span class="p">=</span> <span class="n">MaterialTheme</span><span class="p">.</span><span class="n">typography</span><span class="p">.</span><span class="n">titleLarge</span><span class="p">)</span>
</span><span class='line'>            <span class="n">Spacer</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">height</span><span class="p">(</span><span class="m">10.</span><span class="n">dp</span><span class="p">))</span>
</span><span class='line'>            <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Happy New Year!&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">Spacer</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">height</span><span class="p">(</span><span class="m">26.</span><span class="n">dp</span><span class="p">))</span>
</span><span class='line'>            <span class="n">Row</span><span class="p">(</span>
</span><span class='line'>                <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">fillMaxWidth</span><span class="p">(),</span>
</span><span class='line'>                <span class="n">horizontalArrangement</span> <span class="p">=</span> <span class="n">Arrangement</span><span class="p">.</span><span class="n">End</span>
</span><span class='line'>            <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">Text</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">clickable</span> <span class="p">{</span> <span class="n">onDismiss</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">5.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>                    <span class="n">text</span> <span class="p">=</span> <span class="s">&quot;Close&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">style</span> <span class="p">=</span> <span class="n">MaterialTheme</span><span class="p">.</span><span class="n">typography</span><span class="p">.</span><span class="n">bodyMedium</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="n">color</span> <span class="p">=</span> <span class="n">MaterialTheme</span><span class="p">.</span><span class="n">colorScheme</span><span class="p">.</span><span class="n">primary</span><span class="p">)</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最终，你应该得到类似这样的效果：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/1*fnlF56ZxRxMwa7vHkCOudA.png" alt="颜色可能会有所不同，此外观已针对暗黑模式进行了调整" /></p>

<p>现在我们可以开始编写着色器了！我将简要介绍如何设置着色器并将其附加到对话框中。有关运行时着色器的更详细介绍和初学者指南，你可以查看我的另一个<a href="https://juejin.cn/post/7535292253813981247">教程</a>。</p>

<p>开始使用着色器所需的最低要求如下所示。在对话框中，我们添加一个 <code>runtimeShader</code>，并使用 <code>graphicsLayer</code> 将其分配给 <code>Column</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">SnowedDialog</span><span class="p">(</span><span class="n">onDismiss</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 从字符串编译我们的着色器</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">snowCapShader</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">RuntimeShader</span><span class="p">(</span><span class="n">snowCapShader</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">BasicAlertDialog</span><span class="p">(</span>
</span><span class='line'>        <span class="n">onDismissRequest</span> <span class="p">=</span> <span class="p">{</span> <span class="n">onDismiss</span><span class="p">()</span> <span class="p">},</span>
</span><span class='line'>        <span class="n">properties</span> <span class="p">=</span> <span class="n">DialogProperties</span><span class="p">(</span><span class="n">usePlatformDefaultWidth</span> <span class="p">=</span> <span class="k">false</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Column</span><span class="p">(</span>
</span><span class='line'>            <span class="n">Modifier</span>
</span><span class='line'>                <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="n">horizontal</span> <span class="p">=</span> <span class="m">16.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">shape</span> <span class="p">=</span> <span class="n">MaterialTheme</span><span class="p">.</span><span class="n">shapes</span><span class="p">.</span><span class="n">large</span><span class="p">,</span> <span class="n">color</span> <span class="p">=</span> <span class="n">MaterialTheme</span><span class="p">.</span><span class="n">colorScheme</span><span class="p">.</span><span class="n">surface</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">onSizeChanged</span> <span class="p">{</span> <span class="n">size</span> <span class="p">-&gt;</span>
</span><span class='line'>                    <span class="c1">// pass resolution</span>
</span><span class='line'>                    <span class="n">snowCapShader</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span>
</span><span class='line'>                        <span class="s">&quot;resolution&quot;</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">.</span><span class="n">toFloat</span><span class="p">(),</span>
</span><span class='line'>                        <span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">.</span><span class="n">toFloat</span><span class="p">()</span>
</span><span class='line'>                    <span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="p">.</span><span class="n">graphicsLayer</span> <span class="p">{</span>
</span><span class='line'>                    <span class="c1">// apply shader </span>
</span><span class='line'>                    <span class="k">this</span><span class="p">.</span><span class="n">renderEffect</span> <span class="p">=</span> <span class="n">RenderEffect</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">createRuntimeShaderEffect</span><span class="p">(</span><span class="n">snowCapShader</span><span class="p">,</span> <span class="s">&quot;image&quot;</span><span class="p">)</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">asComposeRenderEffect</span><span class="p">()</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">16.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>        <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// 其余代码保持不变</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//...</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Language</span><span class="p">(</span><span class="s">&quot;agsl&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="py">snowCapShader</span> <span class="p">=</span> <span class="s">&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">uniform</span> <span class="n">shader</span> <span class="n">image</span><span class="p">;</span>
</span><span class='line'>    <span class="n">uniform</span> <span class="n">vec2</span> <span class="n">resolution</span><span class="p">;</span>
</span><span class='line'>    <span class="n">vec4</span> <span class="n">main</span><span class="p">(</span><span class="n">float2</span> <span class="n">fragCoord</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>         <span class="n">float2</span> <span class="n">uv</span> <span class="p">=</span> <span class="n">fragCoord</span> <span class="p">/</span> <span class="n">resolution</span> <span class="p">-</span> <span class="m">0.5</span><span class="p">;</span>
</span><span class='line'>         <span class="k">if</span><span class="p">(</span><span class="n">abs</span><span class="p">(</span><span class="n">uv</span><span class="p">.</span><span class="n">x</span><span class="p">)&gt;</span><span class="m">0.5</span> <span class="p">||</span> <span class="n">abs</span><span class="p">(</span><span class="n">uv</span><span class="p">.</span><span class="n">y</span><span class="p">)&gt;</span><span class="m">0.5</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>             <span class="k">return</span> <span class="n">vec4</span><span class="p">(</span><span class="m">0.0</span><span class="p">);</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>         <span class="n">float</span> <span class="n">ratio</span> <span class="p">=</span> <span class="n">resolution</span><span class="p">.</span><span class="n">x</span> <span class="p">/</span> <span class="n">resolution</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>         <span class="n">uv</span><span class="p">.</span><span class="n">x</span> <span class="p">*=</span> <span class="n">ratio</span><span class="p">;</span>
</span><span class='line'>         <span class="n">vec4</span> <span class="n">imageColor</span> <span class="p">=</span> <span class="n">image</span><span class="p">.</span><span class="n">eval</span><span class="p">(</span><span class="n">fragCoord</span><span class="p">);</span>
</span><span class='line'>         <span class="k">return</span> <span class="n">vec4</span><span class="p">(</span><span class="n">vec3</span><span class="p">(</span><span class="m">1.0</span><span class="p">),</span> <span class="n">imageColor</span><span class="p">.</span><span class="n">a</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;.trimIndent()</span>
</span></code></pre></td></tr></table></div></figure>


<p>目前，它将显示为一个空白矩形，就像我们的对话框一样：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/1*C5O1IMHS7MvK0lFnIqHFYA.png" alt="" /></p>

<p>在继续之前，让我先尽可能简单地解释一下实现此效果背后的逻辑。我将算法分为四个概念步骤：</p>

<ol>
<li><strong>找到一个函数</strong>来定义雪边缘的轮廓。</li>
<li><strong>在 y 轴上</strong>绘制此函数上方的所有内容**，并将其垂直移向底部边缘。</li>
<li><strong>定义一个遮罩区域</strong>，这意味着在此区域之外，函数将被完全忽略，我们只需绘制着色器从系统接收的内容即可。</li>
<li><strong>修改侧面和顶部的遮罩</strong>，使雪的形状更自然，而底部边缘的轮廓则由我们的函数处理。</li>
</ol>


<p><img src="https://miro.medium.com/v2/resize:fit:1400/1*Vbq5YEL42g1tQsLjWKAokQ.png" alt="" /></p>

<p>现在，让我们在着色器中按顺序实现这些步骤。为简单起见，我选择了一个基本的正弦波作为雪边缘的函数。我添加了一些系数来压缩它并降低其振幅：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="k">float</span> <span class="n">snowEdge</span> <span class="o">=</span> <span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="mf">10.</span><span class="o">*</span><span class="n">uv</span><span class="p">.</span><span class="n">x</span><span class="p">)</span><span class="o">*</span><span class="mf">0.5</span><span class="o">+</span><span class="mf">0.5</span><span class="p">)</span><span class="o">*</span><span class="mf">0.2</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来，我们需要用白色填充此线上方的所有内容，同时忽略其下方的所有内容。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="k">vec4</span> <span class="n">snow</span> <span class="o">=</span> <span class="n">step</span><span class="p">(</span><span class="n">uv</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="n">snowEdge</span><span class="p">)</span><span class="o">*</span><span class="k">vec4</span><span class="p">(</span><span class="mf">1.0</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>通过向 <code>uv.y</code> 添加一个常量，我们可以垂直移动整个函数。</p></blockquote>

<p>最后，我们需要将该方法移近对话框的底部边缘并添加一个遮罩。现在，我们使用一个简单的矩形区域作为遮罩。我们可以通过分别指定每个边缘来定义它。这种方法可能看起来有点冗长，但它使代码更容易理解：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'> <span class="k">vec4</span> <span class="n">main</span><span class="p">(</span><span class="n">float2</span> <span class="n">fragCoord</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>         <span class="n">float2</span> <span class="n">uv</span> <span class="o">=</span> <span class="n">fragCoord</span> <span class="o">/</span> <span class="n">resolution</span> <span class="o">-</span> <span class="mf">0.5</span><span class="p">;</span>
</span><span class='line'>         <span class="k">float</span> <span class="n">ratio</span> <span class="o">=</span> <span class="n">resolution</span><span class="p">.</span><span class="n">x</span> <span class="o">/</span> <span class="n">resolution</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>         <span class="n">uv</span><span class="p">.</span><span class="n">x</span> <span class="o">*=</span> <span class="n">ratio</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>         <span class="k">float</span> <span class="n">snowEdge</span> <span class="o">=</span> <span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="mf">10.</span><span class="o">*</span><span class="n">uv</span><span class="p">.</span><span class="n">x</span><span class="p">)</span><span class="o">*</span><span class="mf">0.5</span><span class="o">+</span><span class="mf">0.5</span><span class="p">)</span><span class="o">*</span><span class="mf">0.2</span><span class="p">;</span>
</span><span class='line'>         <span class="n">snowEdge</span> <span class="o">=</span> <span class="n">step</span><span class="p">(</span><span class="n">uv</span><span class="p">.</span><span class="n">y</span><span class="o">-</span><span class="mf">0.4</span><span class="p">,</span> <span class="n">snowEdge</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>         <span class="k">float</span> <span class="n">topBound</span> <span class="o">=</span> <span class="mf">0.3</span><span class="p">;</span>
</span><span class='line'>         <span class="k">float</span> <span class="n">leftBound</span> <span class="o">=</span> <span class="o">-</span><span class="mf">.5</span><span class="o">*</span><span class="n">ratio</span><span class="p">;</span>
</span><span class='line'>         <span class="k">float</span> <span class="n">rightBound</span> <span class="o">=</span> <span class="mf">.5</span><span class="o">*</span><span class="n">ratio</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>         <span class="k">float</span> <span class="n">snowMask</span> <span class="o">=</span> <span class="mf">0.</span><span class="p">;</span>
</span><span class='line'>         <span class="k">if</span><span class="p">(</span><span class="n">uv</span><span class="p">.</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">leftBound</span> <span class="o">&amp;&amp;</span> <span class="n">uv</span><span class="p">.</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">rightBound</span> <span class="o">&amp;&amp;</span> <span class="n">uv</span><span class="p">.</span><span class="n">y</span> <span class="o">&gt;</span> <span class="n">topBound</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">snowMask</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">;</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>         <span class="n">snowMask</span> <span class="o">*=</span> <span class="n">snowEdge</span><span class="p">;</span>
</span><span class='line'>         <span class="k">vec4</span> <span class="n">imageColor</span> <span class="o">=</span> <span class="n">image</span><span class="p">.</span><span class="n">eval</span><span class="p">(</span><span class="n">fragCoord</span><span class="p">);</span>
</span><span class='line'>         <span class="k">vec3</span> <span class="n">snowColor</span> <span class="o">=</span> <span class="k">vec3</span><span class="p">(</span><span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'>         <span class="k">vec3</span> <span class="n">finalColor</span> <span class="o">=</span> <span class="n">mix</span><span class="p">(</span><span class="n">imageColor</span><span class="p">.</span><span class="n">rgb</span><span class="p">,</span> <span class="n">snowColor</span><span class="p">,</span> <span class="n">snowMask</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>         <span class="k">return</span> <span class="k">vec4</span><span class="p">(</span><span class="n">finalColor</span><span class="p">,</span> <span class="n">snowMask</span><span class="o">+</span><span class="n">imageColor</span><span class="p">.</span><span class="n">a</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>调整后，我们应该得到类似这样的结果。</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/1*GM2d-tsCUOAHnloMiDYAAA.png" alt="" /></p>

<p>现在可能不是提及这一点的最佳时机，也许应该早点提及，但在这里强调这一点至关重要。请记住，我们对坐标进行了归一化，并对其进行了平移，使零点恰好位于画布（即对话框）的中心。具体操作如下：<code>_float2 uv = fragCoord/resolution — 0.5;_</code></p>

<p>理解这一点很重要，因为现在我想减小中心正弦波的振幅，并随着我们向左右两侧远离中心而增大振幅。理解坐标系的设置方式后，我们可以通过将函数乘以沿 x 轴距离中心的距离来实现这一点。这样，函数将在中心处恰好返回零点，并随着向外移动而增大。最终，我们将实现以下效果：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/1*oW8OP3R2VFo0SkJmDhgVSw.png" alt="" /></p>

<p>现在，让我们使用函数而不是常量来定义遮罩的顶部边界。现在，让我们使用另一个正弦波，但间隔等于对话框的宽度。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="k">float</span> <span class="n">topBound</span> <span class="o">=</span> <span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="n">ratio</span><span class="o">*</span><span class="n">uv</span><span class="p">.</span><span class="n">x</span><span class="o">*</span><span class="mf">0.8</span><span class="o">+</span><span class="mf">2.</span><span class="p">)</span><span class="o">*</span><span class="mf">0.5</span><span class="o">+</span><span class="mf">0.5</span><span class="p">)</span><span class="o">*</span><span class="mf">.2</span><span class="o">+</span><span class="mf">0.3</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们将为左右边界添加类似的代码：我希望它们也使用正弦波，但这次是垂直运行的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="k">float</span> <span class="n">leftBound</span> <span class="o">=</span> <span class="o">-</span><span class="mf">.5</span><span class="o">*</span><span class="n">ratio</span><span class="o">+</span><span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="mf">10.</span><span class="o">*</span><span class="n">uv</span><span class="p">.</span><span class="n">y</span><span class="p">)</span><span class="o">*</span><span class="mf">0.5</span><span class="o">+</span><span class="mf">0.5</span><span class="p">)</span><span class="o">*</span><span class="mf">0.5</span><span class="o">*</span><span class="n">length</span><span class="p">(</span><span class="n">uv</span><span class="p">.</span><span class="n">y</span><span class="o">-</span><span class="n">topBound</span><span class="p">);</span>
</span><span class='line'><span class="k">float</span> <span class="n">rightBound</span> <span class="o">=</span> <span class="mf">.5</span><span class="o">*</span><span class="n">ratio</span><span class="o">-</span><span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="mf">10.</span><span class="o">*</span><span class="n">uv</span><span class="p">.</span><span class="n">y</span><span class="p">)</span><span class="o">*</span><span class="mf">0.5</span><span class="o">+</span><span class="mf">0.5</span><span class="p">)</span><span class="o">*</span><span class="mf">0.4</span><span class="o">*</span><span class="n">length</span><span class="p">(</span><span class="n">uv</span><span class="p">.</span><span class="n">y</span><span class="o">-</span><span class="n">topBound</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后，我们需要为底部边缘添加一个常量：这是一个时间变量，我们会将它从 Compose 传递给着色器。在着色器中，我们只需添加相应的 <code>uniform</code> 变量，并将底部边缘函数乘以它即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="k">uniform</span> <span class="n">shader</span> <span class="n">image</span><span class="p">;</span>
</span><span class='line'>    <span class="k">uniform</span> <span class="k">vec2</span> <span class="n">resolution</span><span class="p">;</span>
</span><span class='line'>    <span class="k">uniform</span> <span class="k">float</span> <span class="n">time</span><span class="p">;</span>        <span class="k">vec4</span> <span class="n">main</span><span class="p">(</span><span class="n">float2</span> <span class="n">fragCoord</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>         <span class="n">float2</span> <span class="n">uv</span> <span class="o">=</span> <span class="n">fragCoord</span> <span class="o">/</span> <span class="n">resolution</span> <span class="o">-</span> <span class="mf">0.5</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>         <span class="k">float</span> <span class="n">ratio</span> <span class="o">=</span> <span class="n">resolution</span><span class="p">.</span><span class="n">x</span> <span class="o">/</span> <span class="n">resolution</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>         <span class="n">uv</span><span class="p">.</span><span class="n">x</span> <span class="o">*=</span> <span class="n">ratio</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>         <span class="k">float</span> <span class="n">adjustedTime</span> <span class="o">=</span> <span class="n">clamp</span><span class="p">(</span><span class="n">time</span> <span class="o">*</span> <span class="mf">0.3</span><span class="p">,</span><span class="mf">0.0</span><span class="p">,</span><span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'>         <span class="k">float</span> <span class="n">snowEdge</span> <span class="o">=</span> <span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="mf">10.</span><span class="o">*</span><span class="n">uv</span><span class="p">.</span><span class="n">x</span><span class="p">)</span><span class="o">*</span><span class="mf">0.5</span><span class="o">+</span><span class="mf">0.5</span><span class="p">)</span><span class="o">*</span><span class="mf">0.2</span> <span class="o">*</span> <span class="n">length</span><span class="p">(</span><span class="n">uv</span><span class="p">.</span><span class="n">x</span><span class="p">)</span><span class="o">*</span><span class="n">adjustedTime</span><span class="p">;</span>
</span><span class='line'>         <span class="n">snowEdge</span> <span class="o">=</span> <span class="n">step</span><span class="p">(</span><span class="n">uv</span><span class="p">.</span><span class="n">y</span><span class="o">-</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">snowEdge</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>         <span class="k">float</span> <span class="n">topBound</span> <span class="o">=</span> <span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="n">ratio</span><span class="o">*</span><span class="n">uv</span><span class="p">.</span><span class="n">x</span><span class="o">*</span><span class="mf">0.8</span><span class="o">+</span><span class="mf">2.</span><span class="p">)</span><span class="o">*</span><span class="mf">0.5</span><span class="o">+</span><span class="mf">0.5</span><span class="p">)</span><span class="o">*</span><span class="mf">.2</span><span class="o">+</span><span class="mf">0.3</span><span class="p">;</span>
</span><span class='line'>         <span class="k">float</span> <span class="n">leftBound</span> <span class="o">=</span> <span class="o">-</span><span class="mf">.5</span><span class="o">*</span><span class="n">ratio</span><span class="o">+</span><span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="mf">10.</span><span class="o">*</span><span class="n">uv</span><span class="p">.</span><span class="n">y</span><span class="p">)</span><span class="o">*</span><span class="mf">0.5</span><span class="o">+</span><span class="mf">0.5</span><span class="p">)</span><span class="o">*</span><span class="mf">0.5</span><span class="o">*</span><span class="n">length</span><span class="p">(</span><span class="n">uv</span><span class="p">.</span><span class="n">y</span><span class="o">-</span><span class="n">topBound</span><span class="p">);</span>
</span><span class='line'>         <span class="k">float</span> <span class="n">rightBound</span> <span class="o">=</span> <span class="mf">.5</span><span class="o">*</span><span class="n">ratio</span><span class="o">-</span><span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="mf">10.</span><span class="o">*</span><span class="n">uv</span><span class="p">.</span><span class="n">y</span><span class="p">)</span><span class="o">*</span><span class="mf">0.5</span><span class="o">+</span><span class="mf">0.5</span><span class="p">)</span><span class="o">*</span><span class="mf">0.4</span><span class="o">*</span><span class="n">length</span><span class="p">(</span><span class="n">uv</span><span class="p">.</span><span class="n">y</span><span class="o">-</span><span class="n">topBound</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>         <span class="k">float</span> <span class="n">snowMask</span> <span class="o">=</span> <span class="mf">0.</span><span class="p">;</span>
</span><span class='line'>         <span class="k">if</span><span class="p">(</span><span class="n">uv</span><span class="p">.</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">leftBound</span> <span class="o">&amp;&amp;</span> <span class="n">uv</span><span class="p">.</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">rightBound</span> <span class="o">&amp;&amp;</span> <span class="n">uv</span><span class="p">.</span><span class="n">y</span> <span class="o">&gt;</span> <span class="n">topBound</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">snowMask</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">;</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>         <span class="n">snowMask</span> <span class="o">*=</span> <span class="n">snowEdge</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>         <span class="k">vec4</span> <span class="n">imageColor</span> <span class="o">=</span> <span class="n">image</span><span class="p">.</span><span class="n">eval</span><span class="p">(</span><span class="n">fragCoord</span><span class="p">);</span>
</span><span class='line'>         <span class="k">vec3</span> <span class="n">snowColor</span> <span class="o">=</span> <span class="k">vec3</span><span class="p">(</span><span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'>         <span class="k">vec3</span> <span class="n">finalColor</span> <span class="o">=</span> <span class="n">mix</span><span class="p">(</span><span class="n">imageColor</span><span class="p">.</span><span class="n">rgb</span><span class="p">,</span> <span class="n">snowColor</span><span class="p">,</span> <span class="n">snowMask</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>         <span class="k">return</span> <span class="k">vec4</span><span class="p">(</span><span class="n">finalColor</span><span class="p">,</span> <span class="n">snowMask</span><span class="o">+</span><span class="n">imageColor</span><span class="p">.</span><span class="n">a</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>别忘了从composable中提供时间：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">SnowedDialog</span><span class="p">(</span><span class="n">onDismiss</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">snowCapShader</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">RuntimeShader</span><span class="p">(</span><span class="n">snowCapShader</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">time</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="m">0f</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">LaunchedEffect</span><span class="p">(</span><span class="k">null</span><span class="p">)</span>  <span class="p">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="k">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">delay</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>
</span><span class='line'>            <span class="n">time</span> <span class="p">+=</span> <span class="m">0.01f</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">BasicAlertDialog</span><span class="p">(</span>
</span><span class='line'>        <span class="n">onDismissRequest</span> <span class="p">=</span> <span class="p">{</span> <span class="n">onDismiss</span><span class="p">()</span> <span class="p">},</span>
</span><span class='line'>        <span class="n">properties</span> <span class="p">=</span> <span class="n">DialogProperties</span><span class="p">(</span><span class="n">usePlatformDefaultWidth</span> <span class="p">=</span> <span class="k">false</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Column</span><span class="p">(</span>
</span><span class='line'>            <span class="n">Modifier</span>
</span><span class='line'>                <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="n">horizontal</span> <span class="p">=</span> <span class="m">16.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">shape</span> <span class="p">=</span> <span class="n">MaterialTheme</span><span class="p">.</span><span class="n">shapes</span><span class="p">.</span><span class="n">large</span><span class="p">,</span> <span class="n">color</span> <span class="p">=</span> <span class="n">MaterialTheme</span><span class="p">.</span><span class="n">colorScheme</span><span class="p">.</span><span class="n">surface</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">onSizeChanged</span> <span class="p">{</span> <span class="n">size</span> <span class="p">-&gt;</span>
</span><span class='line'>                    <span class="n">snowCapShader</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span>
</span><span class='line'>                        <span class="s">&quot;resolution&quot;</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">.</span><span class="n">toFloat</span><span class="p">(),</span>
</span><span class='line'>                        <span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">.</span><span class="n">toFloat</span><span class="p">()</span>
</span><span class='line'>                    <span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="p">.</span><span class="n">graphicsLayer</span> <span class="p">{</span>
</span><span class='line'>                    <span class="c1">// 这里提供时间：</span>
</span><span class='line'>                    <span class="n">snowCapShader</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span><span class="s">&quot;time&quot;</span><span class="p">,</span> <span class="n">time</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">this</span><span class="p">.</span><span class="n">renderEffect</span> <span class="p">=</span> <span class="n">RenderEffect</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">createRuntimeShaderEffect</span><span class="p">(</span><span class="n">snowCapShader</span><span class="p">,</span> <span class="s">&quot;image&quot;</span><span class="p">)</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">asComposeRenderEffect</span><span class="p">()</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">16.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>        <span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="c1">// 其余代码保持不变</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们得到如下效果：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/1*5YYiM3lZYp42O8Fa9iS-4A.gif" alt="" /></p>

<p>关于这个效果，我想分享的差不多就是这些了！这是核心思想，从这里开始，你可以尝试不同的设置。例如，我用一个基于 Perlin 噪声的更混乱的版本替换了基本的正弦波。</p>

<p>但这些只是细节，在实现上可以有无限的变化。创建着色器的关键在于掌握其背后的核心思想。</p>

<p>你可以在我的代码库中找到我的实现，其中还包含各种用于不同增强功能的辅助方法。例如，这里有一系列过渡效果（线性、三次、指数等）。</p>

<p>添加雪花是最后一步，但创建雪、雨、星星等效果的方法值得另开一个教程。下次我一定会讲解。今天，我只想提一下，为了实现这个特定的效果，我使用了 <strong>Andrew Baldwin</strong> 于 2013 年在 ShaderToy 上创建的着色器。链接如下：<a href="https://www.shadertoy.com/view/ldsGDn">https://www.shadertoy.com/view/ldsGDn</a></p>

<p>由于原始着色器对于手机来说过于庞大，我做了一些简化。此外，它还需要一些适配 AGSL 的功能。这是我的版本：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'>  <span class="k">uniform</span> <span class="n">shader</span> <span class="n">image</span><span class="p">;</span>
</span><span class='line'>   <span class="k">uniform</span> <span class="k">vec2</span> <span class="n">resolution</span><span class="p">;</span>
</span><span class='line'>   <span class="k">uniform</span> <span class="k">float</span> <span class="n">time</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">uniform</span> <span class="k">int</span> <span class="n">uLayers</span><span class="p">;</span>
</span><span class='line'>   <span class="k">uniform</span> <span class="k">float</span> <span class="n">uDepth</span><span class="p">;</span>
</span><span class='line'>   <span class="k">uniform</span> <span class="k">float</span> <span class="n">uSpeed</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">const</span> <span class="k">int</span> <span class="n">MAX_LAYERS</span> <span class="o">=</span> <span class="mi">50</span><span class="p">;</span>
</span><span class='line'>   <span class="k">const</span> <span class="k">float</span> <span class="n">WIDTH</span> <span class="o">=</span> <span class="mf">0.4</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">vec2</span> <span class="n">NormalizeCoordinates</span><span class="p">(</span><span class="k">vec2</span> <span class="n">o</span><span class="p">,</span> <span class="k">vec2</span> <span class="n">r</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">float2</span> <span class="n">uv</span> <span class="o">=</span> <span class="n">o</span> <span class="o">/</span> <span class="n">r</span> <span class="o">-</span> <span class="mf">0.5</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">r</span><span class="p">.</span><span class="n">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">uv</span><span class="p">.</span><span class="n">x</span> <span class="o">*=</span> <span class="n">r</span><span class="p">.</span><span class="n">x</span> <span class="o">/</span> <span class="n">r</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">uv</span><span class="p">.</span><span class="n">y</span> <span class="o">*=</span> <span class="n">r</span><span class="p">.</span><span class="n">y</span> <span class="o">/</span> <span class="n">r</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">uv</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">vec4</span> <span class="n">GetImageTexture</span><span class="p">(</span><span class="k">vec2</span> <span class="n">p</span><span class="p">,</span> <span class="k">vec2</span> <span class="n">pivot</span><span class="p">,</span> <span class="k">vec2</span> <span class="n">r</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">r</span><span class="p">.</span><span class="n">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">p</span><span class="p">.</span><span class="n">x</span> <span class="o">/=</span> <span class="n">r</span><span class="p">.</span><span class="n">x</span> <span class="o">/</span> <span class="n">r</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">p</span><span class="p">.</span><span class="n">y</span> <span class="o">/=</span> <span class="n">r</span><span class="p">.</span><span class="n">y</span> <span class="o">/</span> <span class="n">r</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">p</span> <span class="o">+=</span> <span class="n">pivot</span><span class="p">;</span>
</span><span class='line'>        <span class="n">p</span> <span class="o">*=</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">image</span><span class="p">.</span><span class="n">eval</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">vec4</span> <span class="n">main</span><span class="p">(</span><span class="n">float2</span> <span class="n">fragCoord</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>       <span class="n">float2</span> <span class="n">uv</span> <span class="o">=</span> <span class="n">NormalizeCoordinates</span><span class="p">(</span><span class="n">fragCoord</span><span class="p">,</span> <span class="n">resolution</span><span class="p">);</span>
</span><span class='line'>       <span class="k">vec4</span> <span class="n">image</span> <span class="o">=</span> <span class="n">GetImageTexture</span><span class="p">(</span><span class="n">uv</span><span class="p">,</span> <span class="k">vec2</span><span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">),</span> <span class="n">resolution</span><span class="p">);</span>
</span><span class='line'>       <span class="k">const</span> <span class="k">mat3</span> <span class="n">p</span> <span class="o">=</span> <span class="k">mat3</span><span class="p">(</span><span class="mf">13.323122</span><span class="p">,</span> <span class="mf">23.5112</span><span class="p">,</span> <span class="mf">21.71123</span><span class="p">,</span> <span class="mf">21.1212</span><span class="p">,</span> <span class="mf">28.7312</span><span class="p">,</span> <span class="mf">11.9312</span><span class="p">,</span> <span class="mf">21.8112</span><span class="p">,</span> <span class="mf">14.7212</span><span class="p">,</span> <span class="mf">61.3934</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>       <span class="k">float</span> <span class="n">ratio</span> <span class="o">=</span> <span class="n">resolution</span><span class="p">.</span><span class="n">y</span> <span class="o">/</span> <span class="n">resolution</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>       <span class="k">vec3</span> <span class="n">acc</span> <span class="o">=</span> <span class="k">vec3</span><span class="p">(</span><span class="mf">0.0</span><span class="p">);</span>
</span><span class='line'>       <span class="k">float</span> <span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span> <span class="c1">// 初始化 alpha</span>
</span><span class='line'>       <span class="k">float</span> <span class="n">dof</span> <span class="o">=</span> <span class="mf">5.0</span> <span class="o">*</span> <span class="n">sin</span><span class="p">(</span><span class="n">time</span> <span class="o">*</span> <span class="mf">0.1</span><span class="p">);</span>
</span><span class='line'>       <span class="k">for</span> <span class="p">(</span><span class="k">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mo">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">MAX_LAYERS</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>           <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&gt;=</span> <span class="n">uLayers</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span> <span class="c1">// 如果 i 超出 uLayers，则跳出循环</span>
</span><span class='line'>
</span><span class='line'>           <span class="k">float</span> <span class="n">fi</span> <span class="o">=</span> <span class="k">float</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>           <span class="k">vec2</span> <span class="n">q</span> <span class="o">=</span> <span class="n">uv</span> <span class="o">*</span> <span class="p">(</span><span class="mf">1.0</span> <span class="o">+</span> <span class="n">fi</span> <span class="o">*</span> <span class="n">uDepth</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>           <span class="c1">// 通过调制和时间调整雪花位置</span>
</span><span class='line'>           <span class="n">q</span> <span class="o">-=</span> <span class="k">vec2</span><span class="p">(</span><span class="n">q</span><span class="p">.</span><span class="n">y</span> <span class="o">*</span> <span class="p">(</span><span class="n">WIDTH</span> <span class="o">*</span> <span class="n">mod</span><span class="p">(</span><span class="n">fi</span> <span class="o">*</span> <span class="mf">7.238917</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">)</span> <span class="o">-</span> <span class="n">WIDTH</span> <span class="o">*</span> <span class="mf">0.5</span><span class="p">),</span> <span class="n">uSpeed</span> <span class="o">*</span> <span class="n">time</span> <span class="o">/</span> <span class="p">(</span><span class="mf">1.0</span> <span class="o">+</span> <span class="n">fi</span> <span class="o">*</span> <span class="n">uDepth</span> <span class="o">*</span> <span class="mf">0.03</span><span class="p">));</span>                      <span class="k">vec3</span> <span class="n">n</span> <span class="o">=</span> <span class="k">vec3</span><span class="p">(</span><span class="n">floor</span><span class="p">(</span><span class="n">q</span><span class="p">),</span> <span class="mf">31.189</span> <span class="o">+</span> <span class="n">fi</span><span class="p">);</span>
</span><span class='line'>           <span class="k">vec3</span> <span class="n">m</span> <span class="o">=</span> <span class="n">floor</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="o">*</span> <span class="mf">0.00001</span> <span class="o">+</span> <span class="n">fract</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>           <span class="k">vec3</span> <span class="n">mp</span> <span class="o">=</span> <span class="p">(</span><span class="mf">31415.9</span> <span class="o">+</span> <span class="n">m</span><span class="p">)</span> <span class="o">/</span> <span class="n">fract</span><span class="p">(</span><span class="n">p</span> <span class="o">*</span> <span class="n">m</span><span class="p">);</span>
</span><span class='line'>           <span class="k">vec3</span> <span class="n">r</span> <span class="o">=</span> <span class="n">fract</span><span class="p">(</span><span class="n">mp</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>           <span class="c1">// 使用圆形mask的圆形雪花形状</span>
</span><span class='line'>           <span class="n">float2</span> <span class="n">center</span> <span class="o">=</span> <span class="n">mod</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">)</span> <span class="o">-</span> <span class="mf">0.5</span> <span class="o">+</span> <span class="mf">0.5</span> <span class="o">*</span> <span class="n">r</span><span class="p">.</span><span class="n">xy</span><span class="p">;</span>
</span><span class='line'>           <span class="k">float</span> <span class="n">distanceToCenter</span> <span class="o">=</span> <span class="n">length</span><span class="p">(</span><span class="n">center</span><span class="p">);</span> <span class="c1">// 圆周距离</span>
</span><span class='line'>           <span class="k">float</span> <span class="n">flakeRadius</span> <span class="o">=</span> <span class="mf">0.015</span> <span class="o">+</span> <span class="mf">0.01</span> <span class="o">*</span> <span class="n">r</span><span class="p">.</span><span class="n">z</span><span class="p">;</span> <span class="c1">// 每个薄片的半径略有不同</span>
</span><span class='line'>
</span><span class='line'>           <span class="c1">// 通过扩展的平滑步进实现更平滑的边缘</span>
</span><span class='line'>           <span class="k">float</span> <span class="n">intensity</span> <span class="o">=</span> <span class="n">smoothstep</span><span class="p">(</span><span class="n">flakeRadius</span> <span class="o">+</span> <span class="mf">0.015</span><span class="p">,</span> <span class="n">flakeRadius</span><span class="p">,</span> <span class="n">distanceToCenter</span><span class="p">)</span> <span class="o">*</span>
</span><span class='line'>                               <span class="n">smoothstep</span><span class="p">(</span><span class="n">flakeRadius</span><span class="p">,</span> <span class="n">flakeRadius</span> <span class="o">-</span> <span class="mf">0.015</span><span class="p">,</span> <span class="n">distanceToCenter</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>           <span class="c1">// Ensure flakes are white or transparent (prevent black color)</span>
</span><span class='line'>           <span class="k">vec3</span> <span class="n">flakeColor</span> <span class="o">=</span> <span class="k">vec3</span><span class="p">(</span><span class="mf">1.0</span><span class="p">);</span> <span class="c1">// 雪花要是白色</span>
</span><span class='line'>           <span class="n">acc</span> <span class="o">+=</span> <span class="n">flakeColor</span> <span class="o">*</span> <span class="n">intensity</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>           <span class="c1">// 通过平滑过渡积累 alpha</span>
</span><span class='line'>           <span class="n">alpha</span> <span class="o">+=</span> <span class="n">intensity</span><span class="p">;</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>       <span class="c1">// 归一化 alpha 以确保其不超过 1.0</span>
</span><span class='line'>       <span class="n">alpha</span> <span class="o">=</span> <span class="n">clamp</span><span class="p">(</span><span class="n">alpha</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'>       <span class="k">vec3</span> <span class="n">finalColor</span> <span class="o">=</span> <span class="n">mix</span><span class="p">(</span><span class="n">image</span><span class="p">.</span><span class="n">rgb</span><span class="p">,</span> <span class="n">acc</span><span class="p">,</span> <span class="n">alpha</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">uv</span><span class="p">.</span><span class="n">y</span> <span class="o">&lt;</span> <span class="o">-</span><span class="mf">0.5</span><span class="o">*</span><span class="n">ratio</span> <span class="o">||</span> <span class="n">uv</span><span class="p">.</span><span class="n">y</span> <span class="o">&gt;</span> <span class="mf">.5</span><span class="o">*</span><span class="n">ratio</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>           <span class="n">finalColor</span> <span class="o">=</span> <span class="k">vec3</span><span class="p">(</span><span class="mf">0.0</span><span class="p">);</span>
</span><span class='line'>           <span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>       <span class="k">return</span> <span class="k">vec4</span><span class="p">(</span><span class="n">finalColor</span><span class="p">,</span> <span class="n">alpha</span><span class="o">+</span><span class="n">image</span><span class="p">.</span><span class="n">a</span><span class="p">);</span>
</span><span class='line'>   <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然，为了让一些雪花出现在屏幕前方，而另一些雪花飘到屏幕后方，我必须在这个着色器中使用两层。这是对话框可组合函数的最终效果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">SnowedDialog</span><span class="p">(</span><span class="n">onDismiss</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">snowCapShader</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">RuntimeShader</span><span class="p">(</span><span class="n">snowCapShader</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">flakesShaderForeground</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">RuntimeShader</span><span class="p">(</span><span class="n">snowShader</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">flakesShaderBackground</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">RuntimeShader</span><span class="p">(</span><span class="n">snowShader</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="py">time</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="m">0f</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">LaunchedEffect</span><span class="p">(</span><span class="k">null</span><span class="p">)</span>  <span class="p">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="k">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">delay</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>
</span><span class='line'>            <span class="n">time</span> <span class="p">+=</span> <span class="m">0.01f</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">flakesShaderForeground</span><span class="p">.</span><span class="n">setIntUniform</span><span class="p">(</span><span class="s">&quot;uLayers&quot;</span><span class="p">,</span> <span class="m">5</span><span class="p">)</span>
</span><span class='line'>    <span class="n">flakesShaderForeground</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span><span class="s">&quot;uDepth&quot;</span><span class="p">,</span> <span class="m">0.15f</span><span class="p">)</span>
</span><span class='line'>    <span class="n">flakesShaderForeground</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span><span class="s">&quot;uSpeed&quot;</span><span class="p">,</span> <span class="m">1.0f</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">flakesShaderBackground</span><span class="p">.</span><span class="n">setIntUniform</span><span class="p">(</span><span class="s">&quot;uLayers&quot;</span><span class="p">,</span> <span class="m">10</span><span class="p">)</span>
</span><span class='line'>    <span class="n">flakesShaderBackground</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span><span class="s">&quot;uDepth&quot;</span><span class="p">,</span> <span class="m">1.5f</span><span class="p">)</span>
</span><span class='line'>    <span class="n">flakesShaderBackground</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span><span class="s">&quot;uSpeed&quot;</span><span class="p">,</span> <span class="m">0.8f</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">BasicAlertDialog</span><span class="p">(</span>
</span><span class='line'>        <span class="n">onDismissRequest</span> <span class="p">=</span> <span class="p">{</span> <span class="n">onDismiss</span><span class="p">()</span> <span class="p">},</span>
</span><span class='line'>        <span class="n">properties</span> <span class="p">=</span> <span class="n">DialogProperties</span><span class="p">(</span><span class="n">usePlatformDefaultWidth</span> <span class="p">=</span> <span class="k">false</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                <span class="p">.</span><span class="n">fillMaxSize</span><span class="p">()</span>
</span><span class='line'>                <span class="p">.</span><span class="n">onSizeChanged</span> <span class="p">{</span> <span class="n">size</span> <span class="p">-&gt;</span>
</span><span class='line'>                    <span class="n">flakesShaderForeground</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span>
</span><span class='line'>                        <span class="s">&quot;resolution&quot;</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">.</span><span class="n">toFloat</span><span class="p">(),</span>
</span><span class='line'>                        <span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">.</span><span class="n">toFloat</span><span class="p">()</span>
</span><span class='line'>                    <span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="p">.</span><span class="n">graphicsLayer</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">flakesShaderForeground</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span><span class="s">&quot;time&quot;</span><span class="p">,</span> <span class="n">time</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">this</span><span class="p">.</span><span class="n">renderEffect</span> <span class="p">=</span> <span class="n">RenderEffect</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">createRuntimeShaderEffect</span><span class="p">(</span><span class="n">flakesShaderForeground</span><span class="p">,</span> <span class="s">&quot;image&quot;</span><span class="p">)</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">asComposeRenderEffect</span><span class="p">()</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">16.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>            <span class="n">contentAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">Center</span>
</span><span class='line'>        <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>                <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">fillMaxSize</span><span class="p">()</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">onSizeChanged</span> <span class="p">{</span> <span class="n">size</span> <span class="p">-&gt;</span>
</span><span class='line'>                        <span class="n">flakesShaderBackground</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span>
</span><span class='line'>                            <span class="s">&quot;resolution&quot;</span><span class="p">,</span>
</span><span class='line'>                            <span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">.</span><span class="n">toFloat</span><span class="p">(),</span>
</span><span class='line'>                            <span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">.</span><span class="n">toFloat</span><span class="p">()</span>
</span><span class='line'>                        <span class="p">)</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">graphicsLayer</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">flakesShaderBackground</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span><span class="s">&quot;time&quot;</span><span class="p">,</span> <span class="n">time</span><span class="p">)</span>
</span><span class='line'>                        <span class="k">this</span><span class="p">.</span><span class="n">renderEffect</span> <span class="p">=</span> <span class="n">RenderEffect</span>
</span><span class='line'>                            <span class="p">.</span><span class="n">createRuntimeShaderEffect</span><span class="p">(</span><span class="n">flakesShaderBackground</span><span class="p">,</span> <span class="s">&quot;image&quot;</span><span class="p">)</span>
</span><span class='line'>                            <span class="p">.</span><span class="n">asComposeRenderEffect</span><span class="p">()</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>            <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">fillMaxSize</span><span class="p">()</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Black</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="m">0.1f</span><span class="p">))</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">Column</span><span class="p">(</span>
</span><span class='line'>                <span class="n">Modifier</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="n">horizontal</span> <span class="p">=</span> <span class="m">16.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">shape</span> <span class="p">=</span> <span class="n">MaterialTheme</span><span class="p">.</span><span class="n">shapes</span><span class="p">.</span><span class="n">large</span><span class="p">,</span> <span class="n">color</span> <span class="p">=</span> <span class="n">MaterialTheme</span><span class="p">.</span><span class="n">colorScheme</span><span class="p">.</span><span class="n">surface</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">onSizeChanged</span> <span class="p">{</span> <span class="n">size</span> <span class="p">-&gt;</span>
</span><span class='line'>                        <span class="n">snowCapShader</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span>
</span><span class='line'>                            <span class="s">&quot;resolution&quot;</span><span class="p">,</span>
</span><span class='line'>                            <span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">.</span><span class="n">toFloat</span><span class="p">(),</span>
</span><span class='line'>                            <span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">.</span><span class="n">toFloat</span><span class="p">()</span>
</span><span class='line'>                        <span class="p">)</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">graphicsLayer</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">snowCapShader</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span><span class="s">&quot;time&quot;</span><span class="p">,</span> <span class="n">time</span><span class="p">)</span>
</span><span class='line'>                        <span class="k">this</span><span class="p">.</span><span class="n">renderEffect</span> <span class="p">=</span> <span class="n">RenderEffect</span>
</span><span class='line'>                            <span class="p">.</span><span class="n">createRuntimeShaderEffect</span><span class="p">(</span><span class="n">snowCapShader</span><span class="p">,</span> <span class="s">&quot;image&quot;</span><span class="p">)</span>
</span><span class='line'>                            <span class="p">.</span><span class="n">asComposeRenderEffect</span><span class="p">()</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">16.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>            <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Merry Christmas!&quot;</span><span class="p">,</span> <span class="n">style</span> <span class="p">=</span> <span class="n">MaterialTheme</span><span class="p">.</span><span class="n">typography</span><span class="p">.</span><span class="n">titleLarge</span><span class="p">)</span>
</span><span class='line'>                <span class="n">Spacer</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">height</span><span class="p">(</span><span class="m">10.</span><span class="n">dp</span><span class="p">))</span>
</span><span class='line'>                <span class="n">Text</span><span class="p">(</span><span class="s">&quot;Happy New Year!&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="n">Spacer</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">height</span><span class="p">(</span><span class="m">26.</span><span class="n">dp</span><span class="p">))</span>
</span><span class='line'>                <span class="n">Row</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">fillMaxWidth</span><span class="p">(),</span>
</span><span class='line'>                    <span class="n">horizontalArrangement</span> <span class="p">=</span> <span class="n">Arrangement</span><span class="p">.</span><span class="n">End</span>
</span><span class='line'>                <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">Text</span><span class="p">(</span>
</span><span class='line'>                        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                            <span class="p">.</span><span class="n">clickable</span> <span class="p">{</span> <span class="n">onDismiss</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>                            <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">5.</span><span class="n">dp</span><span class="p">),</span>
</span><span class='line'>                        <span class="n">text</span> <span class="p">=</span> <span class="s">&quot;Close&quot;</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">style</span> <span class="p">=</span> <span class="n">MaterialTheme</span><span class="p">.</span><span class="n">typography</span><span class="p">.</span><span class="n">bodyMedium</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="n">color</span> <span class="p">=</span> <span class="n">MaterialTheme</span><span class="p">.</span><span class="n">colorScheme</span><span class="p">.</span><span class="n">primary</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最终结果：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1000/1*UG3e4b_9AqY1J1kKCNFqAw.png" alt="" /></p>

<p>感谢你的阅读！如果你觉得我的实验有趣且我的解释对你有帮助，欢迎加入我的<a href="https://t.me/droidshaderworks">Telegram频道</a>或在<a href="https://x.com/KrowaNaMostku">Twitter (X)</a>上关注我。你的支持意义重大，并激励着我。祝你撸码愉快！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初探Compose中的着色器RuntimeShader]]></title>
    <link href="https://alexhilton.github.io/blog/2025/08/15/first-look-at-runtimeshader/"/>
    <updated>2025-08-15T22:21:24+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/08/15/first-look-at-runtimeshader</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自「First look at RuntimeShaders in Compose」，原文链接<a href="https://medium.com/@off.mind.by/first-look-at-runtimeshaders-in-compose-b0b431083644">https://medium.com/@off.mind.by/first-look-at-runtimeshaders-in-compose-b0b431083644</a>，由Alex Volkov发布于2024年4月12日。</p></blockquote>

<p><a href="https://alexhilton.github.io/blog/2025/08/15/first-look-at-runtimeshader/"><img src="https://miro.medium.com/v2/resize:fit:1302/1*QXaDvaYryDIZ1GItjM1uqQ.png" title="auto auto" ></a></p>

<!-- more -->


<p>自从我们有机会在 Compose 中使用 RuntimeShaders 自定义Shader（着色器）以来，已经过去了一年多的时间。说实话，我原本以为会有大量关于这个主题的文章。我以为现在 Android 上应该已经充斥着无数令人惊叹的示例、意想不到的效果，以及听到“着色器”这个词时脑海中浮现的其他令人着迷的东西。但事实并非如此。在 RuntimeShaders 可用之后，几乎立刻就出现了几篇文章，之后就再也没有了。一片寂静。</p>

<p>我想答案很简单：Android 开发者并不熟悉着色器，而着色器程序员通常不会直接为 Android 编写代码；他们通常会使用某种游戏引擎。事实上，如果我的假设正确，我希望用这篇文章来弥合这两个世界之间的差距。我真心希望着色器编写能够渗透到 Android 开发领域。因此，在本文的剩余部分，我将介绍一些必要的基础知识，以便你可以坐下来编写着色器并享受其成果。</p>

<p>因此，我假设你已经对 Compose 有了一定的了解。本文不会过多讨论着色器。我的主要重点是连接这两个世界。我们将在未来讨论具体的技术。假设我们有两个项目：一个带有背景图像，顶部有一个框，我们暂时将其设置为黑色。以下是代码的简化版本：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">VerySimpleShaderTheme</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Box</span><span class="p">(</span><span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">(),</span>
</span><span class='line'>        <span class="n">contentAlignment</span> <span class="p">=</span> <span class="n">Alignment</span><span class="p">.</span><span class="n">Center</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Image</span><span class="p">(</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">fillMaxSize</span><span class="p">(),</span>
</span><span class='line'>            <span class="n">contentScale</span> <span class="p">=</span> <span class="n">androidx</span><span class="p">.</span><span class="n">compose</span><span class="p">.</span><span class="n">ui</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">ContentScale</span><span class="p">.</span><span class="n">Crop</span><span class="p">,</span>
</span><span class='line'>            <span class="n">painter</span> <span class="p">=</span> <span class="n">painterResource</span><span class="p">(</span><span class="n">id</span> <span class="p">=</span> <span class="n">R</span><span class="p">.</span><span class="n">drawable</span><span class="p">.</span><span class="n">background_pattern</span><span class="p">),</span>
</span><span class='line'>            <span class="n">contentDescription</span> <span class="p">=</span> <span class="k">null</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>        <span class="n">Box</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>            <span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">200.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">clipToBounds</span><span class="p">()</span>
</span><span class='line'>          <span class="p">){</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在，要将着色器添加到框中，你需要获取着色器文本本身，该文本以常规字符串形式传递。使用此文本创建一个 <code>RuntimeShader</code> 对象。然后，将其传递给 <code>graphicsLayer</code> 方法。这是一个简单的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">runtimeShader</span> <span class="p">=</span> <span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="n">uniform</span> <span class="n">shader</span> <span class="n">image</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">half4</span> <span class="n">main</span><span class="p">(</span><span class="n">float2</span> <span class="n">fragCoord</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">half4</span><span class="p">(</span><span class="m">0.</span><span class="p">,</span> <span class="m">0.0</span><span class="p">,</span> <span class="m">0.0</span><span class="p">,</span> <span class="p">.</span><span class="m">5</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;.trimIndent()</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="py">shader</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">RuntimeShader</span><span class="p">(</span><span class="n">runtimeShader</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="n">Box</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">200.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">clipToBounds</span><span class="p">()</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">graphicsLayer</span> <span class="p">{</span>
</span><span class='line'>                            <span class="k">this</span><span class="p">.</span><span class="n">renderEffect</span> <span class="p">=</span> <span class="n">RenderEffect</span>
</span><span class='line'>                                <span class="p">.</span><span class="n">createRuntimeShaderEffect</span><span class="p">(</span>
</span><span class='line'>                                    <span class="n">shader</span><span class="p">,</span> <span class="s">&quot;image&quot;</span>
</span><span class='line'>                                <span class="p">)</span>
</span><span class='line'>                                <span class="p">.</span><span class="n">asComposeRenderEffect</span><span class="p">()</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">White</span><span class="p">)</span>
</span><span class='line'>                       <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是一个非常基础的着色器示例，它输出黑色，透明度为 50%。它看起来像下面的屏幕截图所示（背景只是来自资源库的图片）。它可能还不够令人印象深刻，但我想在这里强调两个重要的细节。首先，我们如何将着色器应用到盒子上。在我们的着色器代码中，我们需要一个着色器对象，以便在创建 renderEffect 时传递它。第二个重要的细节是，我们需要为盒子添加一个背景，并且背景不能完全透明；只有这样，我们的着色器才能应用到盒子上，否则它将不可见。</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/1*DWbBFHchSRHzeVv_9FuxvQ.png" alt="" /></p>

<p>在使用着色器时，通常需要对坐标进行归一化，使其从 0 变为 1。理想情况下，从 -0.5 到 0.5，这样坐标中心就位于画布的正中央。这有助于使用各种数学公式。然而，要做到这一点，不仅需要知道当前像素坐标，还需要知道画布的总尺寸。为了演示如何做到这一点，我将向你展示下一个重点：将参数从代码传递给着色器。我们将传递盒子的尺寸并修改着色器，使其绘制一个圆圈：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">runtimeShader</span> <span class="p">=</span> <span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="n">uniform</span> <span class="n">shader</span> <span class="n">image</span><span class="p">;</span>
</span><span class='line'><span class="n">uniform</span> <span class="n">float2</span> <span class="n">resolution</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">half4</span> <span class="n">main</span><span class="p">(</span><span class="n">float2</span> <span class="n">fragCoord</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">vec2</span> <span class="n">uv</span> <span class="p">=</span> <span class="n">fragCoord</span><span class="p">/</span><span class="n">resolution</span><span class="p">.</span><span class="n">xy</span> <span class="p">-</span> <span class="p">.</span><span class="m">5</span><span class="p">;</span>
</span><span class='line'>    <span class="n">uv</span><span class="p">.</span><span class="n">x</span> <span class="p">*=</span> <span class="n">resolution</span><span class="p">.</span><span class="n">x</span><span class="p">/</span><span class="n">resolution</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">half4</span><span class="p">(</span><span class="n">step</span><span class="p">(</span><span class="n">length</span><span class="p">(</span><span class="n">uv</span><span class="p">),</span><span class="m">0.5</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;.trimIndent()</span>
</span><span class='line'>
</span><span class='line'><span class="n">Box</span><span class="p">(</span><span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="m">200.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">clipToBounds</span><span class="p">()</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">onSizeChanged</span> <span class="p">{</span> <span class="n">size</span> <span class="p">-&gt;</span>
</span><span class='line'>                            <span class="n">shader</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span>
</span><span class='line'>                                <span class="s">&quot;resolution&quot;</span><span class="p">,</span> <span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">.</span><span class="n">toFloat</span><span class="p">(),</span> <span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">.</span><span class="n">toFloat</span><span class="p">()</span>
</span><span class='line'>                            <span class="p">)</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">graphicsLayer</span> <span class="p">{</span>
</span><span class='line'>                            <span class="k">this</span><span class="p">.</span><span class="n">renderEffect</span> <span class="p">=</span> <span class="n">RenderEffect</span>
</span><span class='line'>                                <span class="p">.</span><span class="n">createRuntimeShaderEffect</span><span class="p">(</span>
</span><span class='line'>                                    <span class="n">shader</span><span class="p">,</span> <span class="s">&quot;image&quot;</span>
</span><span class='line'>                                <span class="p">)</span>
</span><span class='line'>                                <span class="p">.</span><span class="n">asComposeRenderEffect</span><span class="p">()</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                        <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">White</span><span class="p">)</span>
</span><span class='line'>                       <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://miro.medium.com/v2/resize:fit:1400/1*nBzr_W24ekFtGgf3xdz8QA.png" alt="" /></p>

<p>现在我们已经学习了如何创建自己的着色器并为其传递参数，重要的是要理解你可以传递任何你需要的参数，无论是时间、颜色还是着色器所需的其他参数。为了巩固这些知识，我将向你展示一个我为 Android 制作的第一个着色器的示例——一个用于加载的发光圆圈。我们将传递当前时间来为其添加动画效果；下面是一个此类效果的简单示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">runtimeShader</span> <span class="p">=</span> <span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="n">uniform</span> <span class="n">shader</span> <span class="n">image</span><span class="p">;</span>
</span><span class='line'><span class="n">uniform</span> <span class="n">float2</span> <span class="n">resolution</span><span class="p">;</span>
</span><span class='line'><span class="n">uniform</span> <span class="n">float</span> <span class="n">radius</span><span class="p">;</span>
</span><span class='line'><span class="n">uniform</span> <span class="n">float</span> <span class="n">time</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">half4</span> <span class="n">main</span><span class="p">(</span><span class="n">float2</span> <span class="n">fragCoord</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">vec2</span> <span class="n">uv</span> <span class="p">=</span> <span class="n">fragCoord</span><span class="p">/</span><span class="n">resolution</span><span class="p">.</span><span class="n">xy</span> <span class="p">-</span> <span class="p">.</span><span class="m">5</span><span class="p">;</span>
</span><span class='line'>    <span class="n">uv</span><span class="p">.</span><span class="n">x</span> <span class="p">*=</span> <span class="n">resolution</span><span class="p">.</span><span class="n">x</span><span class="p">/</span><span class="n">resolution</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>    <span class="n">float</span> <span class="n">radiusWithTime</span> <span class="p">=</span> <span class="p">(</span><span class="m">1</span><span class="p">+</span><span class="n">sin</span><span class="p">(</span><span class="n">time</span><span class="p">))*</span><span class="m">0.1</span> <span class="p">+</span> <span class="n">radius</span><span class="p">;</span>
</span><span class='line'>    <span class="n">float</span> <span class="n">glowingCircle</span> <span class="p">=</span> <span class="n">smoothstep</span><span class="p">(</span><span class="n">radiusWithTime</span><span class="p">,</span> <span class="n">radiusWithTime</span><span class="p">-</span><span class="n">radiusWithTime</span><span class="p">*</span><span class="m">0.3</span><span class="p">,</span> <span class="n">length</span><span class="p">(</span><span class="n">uv</span><span class="p">));</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">half4</span><span class="p">(</span><span class="n">glowingCircle</span><span class="p">-</span><span class="n">step</span><span class="p">(</span><span class="n">length</span><span class="p">(</span><span class="n">uv</span><span class="p">),</span><span class="n">radius</span><span class="p">*</span><span class="m">0.7</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;.trimIndent()</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="py">shader</span> <span class="p">=</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">RuntimeShader</span><span class="p">(</span><span class="n">runtimeShader</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">var</span> <span class="py">time</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="m">0f</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="n">shader</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span><span class="s">&quot;radius&quot;</span><span class="p">,</span> <span class="m">0.6f</span><span class="p">)</span>
</span><span class='line'><span class="n">LaunchedEffect</span><span class="p">(</span><span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="k">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">delay</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>
</span><span class='line'>        <span class="n">time</span><span class="p">+=</span><span class="m">0.01f</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">shader</span><span class="p">.</span><span class="n">setFloatUniform</span><span class="p">(</span><span class="s">&quot;time&quot;</span><span class="p">,</span> <span class="n">time</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://miro.medium.com/v2/resize:fit:1400/1*Lr85zuDhk8o0-TUgw993_A.png" alt="它实际上有一个光晕动画" /></p>

<p>我已经演示了最基础的部分。我的目标是提供一个切入点，并展示它是多么的简单。关于着色器，我还有很多想讨论的，但我们留到下次再说。</p>

<p>感谢你的关注，祝你使用 Android、Compose 和Shader（着色器）顺利进入非凡的 UI 世界。期待与你相见！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[学会说不！让你彻底学会Kotlin Flow的取消机制]]></title>
    <link href="https://alexhilton.github.io/blog/2025/08/08/flow-cancellation/"/>
    <updated>2025-08-08T20:25:21+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/08/08/flow-cancellation</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自「Cancellable Flows in Kotlin Coroutines: The Complete Guide to Flow Cancellation Techniques」，原文链接<a href="https://proandroiddev.com/cancellable-flows-in-kotlin-coroutines-the-complete-guide-to-flow-cancellation-techniques-8988a85fc158">https://proandroiddev.com/cancellable-flows-in-kotlin-coroutines-the-complete-guide-to-flow-cancellation-techniques-8988a85fc158</a>，由Sahil Thakar发布于2025年7月21日。</p></blockquote>

<p><strong>译者按：</strong> 本文并不是Flow的基础教程，而是专门讲解如何取消flow的，适合对Flow有一定基础的同学。如果对Flow还不够熟悉，可以先行阅读一下之前的文章：</p>

<ul>
<li><a href="https://juejin.cn/post/7336751931375648820">包教包会的Kotlin Flow教程</a></li>
<li><a href="https://juejin.cn/post/7337517508151590947">专家之路上的Flow高级秘籍</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[学会用最优雅的姿式在Compose中显示富文本]]></title>
    <link href="https://alexhilton.github.io/blog/2025/07/30/styledstring-in-jetpack-compose/"/>
    <updated>2025-07-30T22:50:40+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/07/30/styledstring-in-jetpack-compose</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自「StyledString: A Better Pattern for Rich Text in Jetpack Compose」，原文链接<a href="https://proandroiddev.com/styledstring-a-better-pattern-for-rich-text-in-jetpack-compose-5930bde981b1">https://proandroiddev.com/styledstring-a-better-pattern-for-rich-text-in-jetpack-compose-5930bde981b1</a>，由Eury Pérez Beltré发布于2025年7月14日。</p></blockquote>

<p><a href="https://alexhilton.github.io/blog/2025/07/30/styledstring-in-jetpack-compose/"><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*NS_T-i72tS5eOs5F0f_Tnw.png" title="auto auto" ></a></p>

<!-- more -->


<p>在 Jetpack Compose 中设置文本样式看似简单……但其实不然。在本文中，我们将探讨 AnnotatedString 的局限性，以及 StyledString 如何让富文本更易于管理。让我们来详细分析一下。👇</p>

<h2>📚 目录</h2>

<ol>
<li>引言：一个粗体字、一个链接，以及一大堆麻烦</li>
<li>AnnotatedString：样式过多，简洁性不足</li>
<li>StyledString 简介：一个 API 即可设置所有样式</li>
<li>StyledString 底层原理：API 背后的引擎</li>
<li>结语</li>
</ol>


<h2>引言：一个加粗的单词、一个链接，以及一大堆麻烦</h2>

<p>一开始，你拥有了 AnnotatedString 和一个 SpanStyle ，一切看起来都很顺畅。你想加粗一个单词？很简单✅。给某个东西加下划线？没问题。这甚至感觉有点有趣，尤其是在你像<a href="https://developer.android.com/develop/ui/compose/text/style-text#multiple-styles">官方文档</a>中那样手动构建整个字符串的时候。</p>

<p>但问题是：🧠</p>

<p>当你完全控制字符串时，这种方法非常有效。但当你处理实际内容：动态副本、本地化文本、从其他地方传入的段落，而你只需要设置其中一部分的样式时？</p>

<p>事情很快就变得很糟糕。</p>

<p>突然间，你需要跟踪子字符串、计算索引、应用样式，并连接点击监听器。只需对文本进行一次更改，你的逻辑就会像纸牌屋一样崩溃。🃏</p>

<p>你原本想要的只是加粗一个单词并让链接可点击。现在你深陷于样板代码中，祈祷一切都不会改变。</p>

<p>在这篇文章中，我将解释为什么 AnnotatedString 在实际 UI 中无法很好地扩展，并介绍一个我为了解决这个问题而构建的微型抽象。它叫做 StyledString，它的功能非常强大：💡 它确实做到了：</p>

<p><strong>让Compose 中的文本样式再次变得简单。</strong></p>

<h2>AnnotatedString：样式太多，简洁性不足</h2>

<p>首先，让我们称赞一下 AnnotatedString。它是一款强大的工具💪.</p>

<p>你可以使用一个 Text 可组合项来创建带样式、可点击、可交互的文本。想要让一个单词加粗，另一个单词像链接一样显示？完全可以。该 API 灵活、底层，并且由 Compose 本身的富文本引擎支持。</p>

<p>问题是，它只有<strong>在手动</strong>构建整个字符串时才能发挥最佳效果。</p>

<p>文档中的大多数示例如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">buildAnnotatedString</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">append</span><span class="p">(</span><span class="s">&quot;Hello &quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">withStyle</span><span class="p">(</span><span class="n">style</span> <span class="p">=</span> <span class="n">SpanStyle</span><span class="p">(</span><span class="n">fontWeight</span> <span class="p">=</span> <span class="n">FontWeight</span><span class="p">.</span><span class="n">Bold</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">append</span><span class="p">(</span><span class="s">&quot;world&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>看起来不错，对吧？但棘手的地方就在这里。👀</p>

<p>如果你有一整段动态文本，比如一段本地化的字符串或一个从其他地方拉取的句子，而你只想为其中的部分内容添加样式，该怎么办？</p>

<p>现在你需要处理：</p>

<ul>
<li>查找要添加样式的子字符串</li>
<li>计算起始和结束索引</li>
<li>手动添加样式或注释</li>
<li>希望文本永远不变，否则一切都会崩溃。</li>
</ul>


<p>如果你需要多种样式，比如粗体单词、可点击的电子邮件和带下划线的 URL，动态地，事情很快就会变得混乱。🔥
这时，buildAnnotatedString 就会变成一堆脆弱的索引数学运算、重复的逻辑和样板代码，难以阅读，更难以维护。</p>

<p>当然，AnnotatedString 功能强大。但当你的文本是动态的，而你只想为其中的部分内容添加样式时？它很快就会变得索然无味。</p>

<h2>StyledString 隆重出场：一个 API 即可实现所有样式</h2>

<p>在与 AnnotatedString 纠结了无数次之后，我决定构建一个更好的东西。它并非一个庞大的库，也不是一个完整的样式框架。而是一个简单、兼容 Compose 的抽象，用于解决一个非常具体的问题。</p>

<p><strong>StyledString 来啦！👋</strong></p>

<p>它的目标很简单：让你定义字符串的哪些部分应该被设置样式或可点击，而无需担心 indexOf 、 addStyle 或 AnnotatedString.Builder 。你只需编写文本，告诉它需要设置哪些单词的样式，以及点击后该执行的操作。</p>

<p>它的实际效果如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// This list can be built in the ViewModel</span>
</span><span class='line'><span class="k">val</span> <span class="py">styledStrings</span> <span class="p">=</span> <span class="n">persistentListOf</span><span class="p">(</span>
</span><span class='line'>    <span class="n">StyledString</span><span class="p">.</span><span class="n">ClickableEmail</span><span class="p">(</span>
</span><span class='line'>        <span class="n">highlightedText</span> <span class="p">=</span> <span class="s">&quot;support@example.com&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">email</span> <span class="p">=</span> <span class="s">&quot;support@example.com&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">style</span> <span class="p">=</span> <span class="n">SpanStyle</span><span class="p">(</span>
</span><span class='line'>            <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Blue</span><span class="p">,</span>
</span><span class='line'>            <span class="n">textDecoration</span> <span class="p">=</span> <span class="n">TextDecoration</span><span class="p">.</span><span class="n">Underline</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">),</span>
</span><span class='line'>    <span class="n">StyledString</span><span class="p">.</span><span class="n">ClickableUrl</span><span class="p">(</span>
</span><span class='line'>        <span class="n">highlightedText</span> <span class="p">=</span> <span class="s">&quot;website&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">url</span> <span class="p">=</span> <span class="s">&quot;https://euryperez.dev&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">style</span> <span class="p">=</span> <span class="n">SpanStyle</span><span class="p">(</span>
</span><span class='line'>            <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Blue</span><span class="p">,</span>
</span><span class='line'>            <span class="n">textDecoration</span> <span class="p">=</span> <span class="n">TextDecoration</span><span class="p">.</span><span class="n">Underline</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// In your Compose Screen</span>
</span><span class='line'><span class="n">StyledText</span><span class="p">(</span>
</span><span class='line'>    <span class="n">fullText</span> <span class="p">=</span> <span class="s">&quot;Contact us at support@example.com or visit our website&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">styledStrings</span> <span class="p">=</span> <span class="n">styledStrings</span><span class="p">,</span>
</span><span class='line'>    <span class="n">style</span> <span class="p">=</span> <span class="n">MaterialTheme</span><span class="p">.</span><span class="n">typography</span><span class="p">.</span><span class="n">label</span><span class="p">,</span>
</span><span class='line'>    <span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span> <span class="n">styled</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="k">when</span> <span class="p">(</span><span class="n">styled</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">is</span> <span class="n">ClickableEmail</span> <span class="p">-&gt;</span> <span class="n">openEmailClient</span><span class="p">(</span><span class="n">styled</span><span class="p">.</span><span class="n">email</span><span class="p">)</span>
</span><span class='line'>            <span class="k">is</span> <span class="n">ClickableUrl</span> <span class="p">-&gt;</span> <span class="n">openUrl</span><span class="p">(</span><span class="n">styled</span><span class="p">.</span><span class="n">url</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>就是这样。无需手动构建文本，无需索引计算，无需样板代码。只需简洁、易读、声明式的样式，即可与真实文本兼容。</p>

<p>由于 StyledString 支持 Simple 、 ClickableEmail 和 ClickableUrl 等类型，因此它易于在你的应用中扩展和复用。你可以获得可点击的、带样式的文本，而无需牺牲其合理性和可维护性。🙏</p>

<h2>StyledString 的底层：API 背后的引擎</h2>

<p>让我们揭开它的面纱，逐步了解 StyledString 的工作原理。🪄</p>

<p>当你在 UI 中使用 StyledText 时，🧠它可能感觉像魔法一样神奇，但在幕后，它只是一个简洁、易于组合的架构，旨在减少样式设计的痛苦，而不会增加不必要的复杂性。</p>

<p>本节涵盖了 StyledString 系统的每个部分，从样式的描述方式，到样式的查找、应用和在屏幕上渲染。</p>

<h3>🧱 1. 数据模型：StyledString 和 ClickableStyleString</h3>

<p>整个实用程序的核心是一个名为 StyledString 的密封接口。我们通过它来对需要以某种方式设置样式的文本片段进行建模。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Immutable</span>
</span><span class='line'><span class="n">sealed</span> <span class="n">interface</span> <span class="n">StyledString</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">highlightedText</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">style</span><span class="p">:</span> <span class="n">SpanStyle</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Add `Simple` type</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Add `ClickableEmail` type</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Add `ClickableUrl` type</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>每个 StyledString 都需要两条信息：</p>

<ul>
<li>highlightedText：需要设置样式的文本的确切部分</li>
<li>style：定义其外观的 SpanStyle（颜色、下划线、字体粗细等）。</li>
</ul>


<p>然后，我们定义一些实现此接口的特定类型：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Immutable</span>
</span><span class='line'><span class="n">data</span> <span class="k">class</span> <span class="nc">Simple</span><span class="p">(</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">val</span> <span class="py">highlightedText</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">val</span> <span class="py">style</span><span class="p">:</span> <span class="n">SpanStyle</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">StyledString</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个是纯视觉效果的，它会改变文本的外观，但不响应点击。</p>

<p>然后我们介绍交互类型：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Immutable</span>
</span><span class='line'><span class="n">data</span> <span class="k">class</span> <span class="nc">ClickableEmail</span><span class="p">(</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">val</span> <span class="py">highlightedText</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">email</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">val</span> <span class="py">style</span><span class="p">:</span> <span class="n">SpanStyle</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">StyledString</span><span class="p">,</span> <span class="n">ClickableStyleString</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Immutable</span>
</span><span class='line'><span class="n">data</span> <span class="k">class</span> <span class="nc">ClickableUrl</span><span class="p">(</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">val</span> <span class="py">highlightedText</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">url</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">val</span> <span class="py">style</span><span class="p">:</span> <span class="n">SpanStyle</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">StyledString</span><span class="p">,</span> <span class="n">ClickableStyleString</span>
</span></code></pre></td></tr></table></div></figure>


<p>它们执行相同的样式设置工作，但还携带额外的数据（例如点击时应打开的 URL 或电子邮件）。更重要的是，它们实现了第二个接口：ClickableStyleString。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">sealed</span> <span class="n">interface</span> <span class="n">ClickableStyleString</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个小接口意义重大，它让我们能够区分纯视觉样式和应该响应点击的样式。这使得我们的点击处理逻辑简洁且类型安全。💡</p>

<p>你可以轻松添加更多变体，例如 @mentions、#hashtags 或电话号码，只需创建另一个数据类并选择性地实现ClickableStyleString 即可。</p>

<h3>🎯 2. 样式和链接：applyStyle</h3>

<p>一旦我们知道了哪些文本需要样式，我们就需要一种将这些样式应用于实际的 AnnotatedString 的方法。这就是 applyStyle() 的作用，它是一个简单的扩展函数，它根据 StyledString 的类型应用样式（和点击监听器）。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">AnnotatedString</span><span class="p">.</span><span class="n">Builder</span><span class="p">.</span><span class="n">applyStyle</span><span class="p">(</span>
</span><span class='line'>    <span class="n">styledString</span><span class="p">:</span> <span class="n">StyledString</span><span class="p">,</span>
</span><span class='line'>    <span class="n">startIndex</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span>
</span><span class='line'>    <span class="n">endIndex</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span>
</span><span class='line'>    <span class="n">onClick</span><span class="p">:</span> <span class="p">(</span><span class="n">ClickableStyleString</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">when</span> <span class="p">(</span><span class="n">styledString</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">StyledString</span><span class="p">.</span><span class="n">ClickableUrl</span> <span class="p">-&gt;</span> <span class="n">TODO</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">is</span> <span class="n">StyledString</span><span class="p">.</span><span class="n">ClickableEmail</span> <span class="p">-&gt;</span> <span class="n">TODO</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">is</span> <span class="n">StyledString</span><span class="p">.</span><span class="n">Simple</span> <span class="p">-&gt;</span> <span class="n">TODO</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>每次匹配每个 StyledString 时，都会调用一次此函数。现在让我们看看它做了什么：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">is</span> <span class="n">StyledString</span><span class="p">.</span><span class="n">ClickableUrl</span> <span class="p">-&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">linkAnnotation</span> <span class="p">=</span> <span class="n">LinkAnnotation</span><span class="p">.</span><span class="n">Url</span><span class="p">(</span>
</span><span class='line'>        <span class="n">url</span> <span class="p">=</span> <span class="n">styledString</span><span class="p">.</span><span class="n">url</span><span class="p">,</span>
</span><span class='line'>        <span class="n">styles</span> <span class="p">=</span> <span class="n">TextLinkStyles</span><span class="p">(</span><span class="n">style</span> <span class="p">=</span> <span class="n">styledString</span><span class="p">.</span><span class="n">style</span><span class="p">),</span>
</span><span class='line'>        <span class="n">linkInteractionListener</span> <span class="p">=</span> <span class="p">{</span> <span class="n">onClick</span><span class="p">(</span><span class="n">styledString</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="n">addLink</span><span class="p">(</span><span class="n">linkAnnotation</span><span class="p">,</span> <span class="n">startIndex</span><span class="p">,</span> <span class="n">endIndex</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果是 URL，我们会创建一个 LinkAnnotation.Url 对象，附加样式，并为其添加一个点击监听器。addLink 负责将其附加到正确的文本范围。</p>

<p>我们执行的操作类似，但针对电子邮件使用的是 LinkAnnotation.Clickable ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">is</span> <span class="n">StyledString</span><span class="p">.</span><span class="n">ClickableEmail</span> <span class="p">-&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">linkAnnotation</span> <span class="p">=</span> <span class="n">LinkAnnotation</span><span class="p">.</span><span class="n">Clickable</span><span class="p">(</span>
</span><span class='line'>        <span class="n">tag</span> <span class="p">=</span> <span class="n">styledString</span><span class="p">.</span><span class="n">highlightedText</span><span class="p">,</span>
</span><span class='line'>        <span class="n">styles</span> <span class="p">=</span> <span class="n">TextLinkStyles</span><span class="p">(</span><span class="n">style</span> <span class="p">=</span> <span class="n">styledString</span><span class="p">.</span><span class="n">style</span><span class="p">),</span>
</span><span class='line'>        <span class="n">linkInteractionListener</span> <span class="p">=</span> <span class="p">{</span> <span class="n">onClick</span><span class="p">(</span><span class="n">styledString</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="n">addLink</span><span class="p">(</span><span class="n">linkAnnotation</span><span class="p">,</span> <span class="n">startIndex</span><span class="p">,</span> <span class="n">endIndex</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果样式只是视觉上的（不可点击），我们会应用常规跨度：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">is</span> <span class="n">StyledString</span><span class="p">.</span><span class="n">Simple</span> <span class="p">-&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">addStyle</span><span class="p">(</span>
</span><span class='line'>        <span class="n">style</span> <span class="p">=</span> <span class="n">styledString</span><span class="p">.</span><span class="n">style</span><span class="p">,</span>
</span><span class='line'>        <span class="n">start</span> <span class="p">=</span> <span class="n">startIndex</span><span class="p">,</span>
</span><span class='line'>        <span class="n">end</span> <span class="p">=</span> <span class="n">endIndex</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种分离将所有样式应用逻辑集中在一处。如果你想要支持新的链接类型或行为，只需更新此函数即可。</p>

<h3>🔍 3. 匹配文本：findAllOccurrences</h3>

<p>在应用样式之前，我们需要找到文本中所有出现指定highlightedText 的位置。这就是此函数的用途。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Find all occurrences of a substring in a string, optionally ignoring case.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @param substring The substring to search for.</span>
</span><span class='line'><span class="cm"> * @param ignoreCase Whether to perform a case-insensitive search.</span>
</span><span class='line'><span class="cm"> * @return A list of indices where the substring was found.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">String</span><span class="p">.</span><span class="n">findAllOccurrences</span><span class="p">(</span>
</span><span class='line'>    <span class="n">substring</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'>    <span class="n">ignoreCase</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">false</span>
</span><span class='line'><span class="p">):</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Int</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这将获取全文，并返回给定子字符串的每个匹配项的起始索引列表。</p>

<p>工作原理如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">substring</span><span class="p">.</span><span class="n">isEmpty</span><span class="p">())</span> <span class="k">return</span> <span class="n">emptyList</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于空子字符串，快速提前退出。避免奇怪的边缘情况。然后，我们准备进行不区分大小写的搜索（如果需要）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">indices</span> <span class="p">=</span> <span class="n">mutableListOf</span><span class="p">&lt;</span><span class="n">Int</span><span class="p">&gt;()</span>
</span><span class='line'><span class="k">val</span> <span class="py">searchString</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">ignoreCase</span><span class="p">)</span> <span class="k">this</span><span class="p">.</span><span class="n">lowercase</span><span class="p">()</span> <span class="k">else</span> <span class="k">this</span>
</span><span class='line'><span class="k">val</span> <span class="py">searchSubstring</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">ignoreCase</span><span class="p">)</span> <span class="n">substring</span><span class="p">.</span><span class="n">lowercase</span><span class="p">()</span> <span class="k">else</span> <span class="n">substring</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在我们遍历字符串，找到所有匹配项：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">var</span> <span class="py">startIndex</span> <span class="p">=</span> <span class="m">0</span>
</span><span class='line'><span class="k">val</span> <span class="py">maxStartIndex</span> <span class="p">=</span> <span class="n">length</span> <span class="p">-</span> <span class="n">substring</span><span class="p">.</span><span class="n">length</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="n">startIndex</span> <span class="p">&lt;=</span> <span class="n">maxStartIndex</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">index</span> <span class="p">=</span> <span class="n">searchString</span><span class="p">.</span><span class="n">indexOf</span><span class="p">(</span><span class="n">searchSubstring</span><span class="p">,</span> <span class="n">startIndex</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">index</span> <span class="p">==</span> <span class="p">-</span><span class="m">1</span><span class="p">)</span> <span class="k">break</span>
</span><span class='line'>    <span class="n">indices</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">index</span><span class="p">)</span>
</span><span class='line'>    <span class="n">startIndex</span> <span class="p">=</span> <span class="n">index</span> <span class="p">+</span> <span class="m">1</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们最终返回结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">return</span> <span class="n">indices</span><span class="p">.</span><span class="n">toList</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>这使得我们的样式逻辑保持灵活性和弹性，无论我们设计的单词出现一次还是十几次。</p>

<h3>🧠 4. 构建 AnnotatedString：rememberStyledAnnotationString</h3>

<p>以下函数将所有内容整合在一起。它接收完整文本和你的StyledString 列表，并返回一个应用了所有样式的 AnnotatedString。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">rememberStyledAnnotationString</span><span class="p">(</span>
</span><span class='line'>    <span class="n">fullText</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'>    <span class="n">styledStrings</span><span class="p">:</span> <span class="n">ImmutableList</span><span class="p">&lt;</span><span class="n">StyledString</span><span class="p">&gt;,</span>
</span><span class='line'>    <span class="n">ignoreCase</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'>    <span class="n">onClick</span><span class="p">:</span> <span class="p">(</span><span class="n">ClickableStyleString</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span>
</span><span class='line'><span class="p">):</span> <span class="n">AnnotatedString</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们确保使用 rememberUpdatedState() 来保持点击监听器的最新状态：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">currentOnClick</span> <span class="k">by</span> <span class="n">rememberUpdatedState</span><span class="p">(</span><span class="n">onClick</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后我们使用记住来缓存工作，除非输入发生变化：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">return</span> <span class="n">remember</span><span class="p">(</span><span class="n">fullText</span><span class="p">,</span> <span class="n">styledStrings</span><span class="p">,</span> <span class="n">ignoreCase</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// TODO: build annotated string</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们首先附加完整的未样式化的文本。然后，对于每个 StyledString ，我们找到所有匹配的位置并应用样式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">buildAnnotatedString</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">append</span><span class="p">(</span><span class="n">fullText</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">styledStrings</span><span class="p">.</span><span class="n">fastForEach</span> <span class="p">{</span> <span class="n">styledStringInfo</span> <span class="p">-&gt;</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">indices</span> <span class="p">=</span>
</span><span class='line'>            <span class="n">fullText</span><span class="p">.</span><span class="n">findAllOccurrences</span><span class="p">(</span><span class="n">styledStringInfo</span><span class="p">.</span><span class="n">highlightedText</span><span class="p">,</span> <span class="n">ignoreCase</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">indices</span><span class="p">.</span><span class="n">fastForEach</span> <span class="p">{</span> <span class="n">startIndex</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">endIndex</span> <span class="p">=</span> <span class="n">startIndex</span> <span class="p">+</span> <span class="n">styledStringInfo</span><span class="p">.</span><span class="n">highlightedText</span><span class="p">.</span><span class="n">length</span>
</span><span class='line'>            <span class="n">applyStyle</span><span class="p">(</span><span class="n">styledStringInfo</span><span class="p">,</span> <span class="n">startIndex</span><span class="p">,</span> <span class="n">endIndex</span><span class="p">,</span> <span class="n">currentOnClick</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个循环使得样式设置能够动态且多目标化。你可以将任何本地化或运行时生成的字符串作为 fullText 传递，它仍然能够正确应用样式。</p>

<h3>🧩 5. 可组合项：StyledText</h3>

<p>最后，StyledText 可组合项将所有内容连接在一起。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">StyledText</span><span class="p">(</span>
</span><span class='line'>    <span class="n">fullText</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'>    <span class="n">styledStrings</span><span class="p">:</span> <span class="n">ImmutableList</span><span class="p">&lt;</span><span class="n">StyledString</span><span class="p">&gt;,</span>
</span><span class='line'>    <span class="n">style</span><span class="p">:</span> <span class="n">TextStyle</span><span class="p">,</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="n">onClick</span><span class="p">:</span> <span class="p">(</span><span class="n">ClickableStyleString</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span> <span class="p">=</span> <span class="p">{},</span>
</span><span class='line'>    <span class="n">ignoreCase</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// TODO: Implementation</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>你传入全文、样式以及可选的点击处理程序。它的内部功能如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">annotatedString</span> <span class="p">=</span> <span class="n">rememberStyledAnnotationString</span><span class="p">(</span>
</span><span class='line'>    <span class="n">fullText</span> <span class="p">=</span> <span class="n">fullText</span><span class="p">,</span>
</span><span class='line'>    <span class="n">styledStrings</span> <span class="p">=</span> <span class="n">styledStrings</span><span class="p">,</span>
</span><span class='line'>    <span class="n">ignoreCase</span> <span class="p">=</span> <span class="n">ignoreCase</span><span class="p">,</span>
</span><span class='line'>    <span class="n">onClick</span> <span class="p">=</span> <span class="n">onClick</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这调用了我们刚刚讲过的逻辑。它返回一个带样式的 AnnotatedString 。然后我们渲染它：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">Text</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="n">text</span> <span class="p">=</span> <span class="n">annotatedString</span><span class="p">,</span>
</span><span class='line'>    <span class="n">style</span> <span class="p">=</span> <span class="n">style</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>它只是一个普通的 Compose Text 。但所有样式逻辑都已预先烘焙。现在，你的 UI 代码保持简洁且声明式。🌚</p>

<h3>⚡️ 6. StyledText 实践</h3>

<p>现在，让我们来看看 StyledText 的实践，为此，我整理了一个预览，你可以自己测试一下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@PreviewLightDark</span>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">StyledTextPreview</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">MyTheme</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Box</span><span class="p">(</span>
</span><span class='line'>            <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span>
</span><span class='line'>                <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">color</span> <span class="p">=</span> <span class="n">MaterialTheme</span><span class="p">.</span><span class="n">colors</span><span class="p">.</span><span class="n">background</span><span class="p">)</span>
</span><span class='line'>                <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="m">16.</span><span class="n">dp</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// This list can be built in the ViewModel</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">styledStrings</span> <span class="p">=</span> <span class="n">persistentListOf</span><span class="p">(</span>
</span><span class='line'>                <span class="n">StyledString</span><span class="p">.</span><span class="n">ClickableEmail</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">highlightedText</span> <span class="p">=</span> <span class="s">&quot;support@example.com&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">email</span> <span class="p">=</span> <span class="s">&quot;support@example.com&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">style</span> <span class="p">=</span> <span class="n">SpanStyle</span><span class="p">(</span>
</span><span class='line'>                        <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Gray</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">textDecoration</span> <span class="p">=</span> <span class="n">TextDecoration</span><span class="p">.</span><span class="n">Underline</span>
</span><span class='line'>                    <span class="p">)</span>
</span><span class='line'>                <span class="p">),</span>
</span><span class='line'>                <span class="n">StyledString</span><span class="p">.</span><span class="n">ClickableUrl</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">highlightedText</span> <span class="p">=</span> <span class="s">&quot;website&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">url</span> <span class="p">=</span> <span class="s">&quot;https://euryperez.dev&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">style</span> <span class="p">=</span> <span class="n">SpanStyle</span><span class="p">(</span>
</span><span class='line'>                        <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">Gray</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">textDecoration</span> <span class="p">=</span> <span class="n">TextDecoration</span><span class="p">.</span><span class="n">Underline</span>
</span><span class='line'>                    <span class="p">)</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// In your Compose Screen</span>
</span><span class='line'>            <span class="n">StyledText</span><span class="p">(</span>
</span><span class='line'>                <span class="n">fullText</span> <span class="p">=</span> <span class="s">&quot;Contact us at support@example.com or visit our website&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">styledStrings</span> <span class="p">=</span> <span class="n">styledStrings</span><span class="p">,</span>
</span><span class='line'>                <span class="n">style</span> <span class="p">=</span> <span class="n">MaterialTheme</span><span class="p">.</span><span class="n">typography</span><span class="p">.</span><span class="n">body2</span><span class="p">,</span>
</span><span class='line'>                <span class="n">color</span> <span class="p">=</span> <span class="n">MaterialTheme</span><span class="p">.</span><span class="n">colors</span><span class="p">.</span><span class="n">onBackground</span><span class="p">,</span>
</span><span class='line'>                <span class="n">onClick</span> <span class="p">=</span> <span class="p">{</span> <span class="n">styled</span> <span class="p">-&gt;</span>
</span><span class='line'>                    <span class="k">when</span> <span class="p">(</span><span class="n">styled</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="k">is</span> <span class="n">StyledString</span><span class="p">.</span><span class="n">ClickableEmail</span> <span class="p">-&gt;</span> <span class="n">TODO</span><span class="p">()</span>
</span><span class='line'>                        <span class="k">is</span> <span class="n">StyledString</span><span class="p">.</span><span class="n">ClickableUrl</span> <span class="p">-&gt;</span> <span class="n">TODO</span><span class="p">()</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>你将在预览中看到以下内容：
<img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*9Tc22BNoUfij54fBGQ7YCg.png" alt="StyledTextPreview" /></p>

<h3>✅ 总结：一个输出简洁的简单引擎</h3>

<p>总而言之，我们构建了一个完全可复用的 Compose 实用程序，它：</p>

<ul>
<li>使用 StyledString 以声明式方式描述样式</li>
<li>安全地区分可视样式和可点击样式</li>
<li>使用 applyStyle 应用 span 和 link</li>
<li>使用 findAllOccurrences 查找多个匹配项</li>
<li>以 Compose 稳定的方式组装所有内容</li>
<li>封装在一个简洁的 API 中：StyledText</li>
</ul>


<p>无需 indexOf ，无需复杂的范围逻辑，也无需复制粘贴 buildAnnotatedString样板代码。</p>

<p><a href="https://gist.github.com/euri16/614a460fe6a690ce57cd23cc41164b5a">点击此处</a>（链接：<a href="https://gist.github.com/euri16/614a460fe6a690ce57cd23cc41164b5a%EF%BC%89%E8%8E%B7%E5%8F%96%E5%AE%8C%E6%95%B4%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E3%80%82">https://gist.github.com/euri16/614a460fe6a690ce57cd23cc41164b5a%EF%BC%89%E8%8E%B7%E5%8F%96%E5%AE%8C%E6%95%B4%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E3%80%82</a></p>

<h2>结语🎯</h2>

<p>Jetpack Compose 赋予我们强大的功能，但并非总是最符合人体工程学的开箱即用工具。AnnotatedString 对于一次性需求来说非常棒，但一旦你的 UI 需要多种样式、复用模式或动态点击处理，它就会很快变得冗长。</p>

<p>这就是 StyledString 的用武之地。</p>

<p>它并非取代 AnnotatedString，而是对其进行包装，为你提供一种更安全、更清晰的方式来描述意图：</p>

<ul>
<li>→ “将此单词加粗”</li>
<li>→ “将此短语设为链接”</li>
<li>→ “为该字符串的每个实例设置样式”</li>
</ul>


<p>你无需再考虑文本偏移量和跨度范围，而是开始思考含义。结果：代码更简洁、样板更少，开发者体验更佳💆</p>

<h3>🧩 易于采用</h3>

<p>你无需重构整个应用即可使用 StyledString 。</p>

<p>只需将一两个 Text() 元素替换为 StyledText() 即可。将内联的 buildAnnotatedString { &hellip; } 块替换为 StyledString.Simple 或 ClickableUrl 的简单列表即可。</p>

<p>就这样，你就成功了。✨</p>

<h3>🛠️ 易于扩展</h3>

<p>还有其他用例吗？</p>

<ul>
<li>为 #hashtags 设置样式？</li>
<li>处理 @mentions？</li>
<li>自动检测电话号码？</li>
<li>添加图标或背景高亮？</li>
</ul>


<p>只需创建一个实现 StyledString 的新数据类，并在 applyStyle() 中处理它即可。系统的其余部分保持不变。</p>

<p>这种分离使你的文本逻辑模块化、可测试，并能够适应未来的设计或业务需求。</p>

<p>如果你有什么有趣的想法，别忘了在评论区分享。😉</p>

<h3>🫱 轮到你了</h3>

<p>现在你已经了解了它的工作原理（以及它实际需要的代码量有多小），那就在下一个 Compose 屏幕中尝试一下吧。不再需要繁琐的 AnnotatedString.Builder 代码。不再需要重复的 span 逻辑。只需描述你想要的内容，剩下的交给 StyledText 处理。</p>

<p><strong>让 Compose 中的文本样式再次变得简单。😎</strong></p>

<h3>🤝 感谢阅读</h3>

<p>如果你最终在项目中使用了 StyledString，请告诉我！看到这些微型模式在现实世界中落地总是很酷。👀</p>

<p>感谢阅读！如果你觉得这篇文章有用，请考虑分享给其他开发者，点赞或留言。这很有帮助。✌️</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[揭密Jetpack Compose中的PausableComposition]]></title>
    <link href="https://alexhilton.github.io/blog/2025/07/24/exploring-pausablecomposition/"/>
    <updated>2025-07-24T19:55:51+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/07/24/exploring-pausablecomposition</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自「Exploring PausableComposition internals in Jetpack Compose」，原文链接<a href="https://blog.shreyaspatil.dev/exploring-pausablecomposition-internals-in-jetpack-compose">https://blog.shreyaspatil.dev/exploring-pausablecomposition-internals-in-jetpack-compose</a>，由Shreyas Patil发布于2025年7月14日。</p></blockquote>

<p><a href="https://alexhilton.github.io/blog/2025/07/24/exploring-pausablecomposition/"><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1751791091096/4e5b36e3-485c-4079-88be-987082e7d67e.png?w=1600&h=840&fit=crop&crop=entropy&auto=compress,format&format=webp" title="auto auto" ></a></p>

<!-- more -->


<p>嗨，Composers 们👋，在最近的 Compose 1.9.X 版本中，Compose-runtime 引入了一个名为 PausableComposition 的新内部 API，据称它可以解决性能问题。它听起来像魔法，但在底层，这一切都归功于一些非常巧妙的工程设计。在深入研究 Compose 运行时以更好地理解这一点时，我偶然发现了一个强大的内部工具，它使这一切成为可能。</p>

<p>这篇文章将深入分析这一机制：PausableComposition。这是 Compose 的内部 API，开发者无需了解它。但了解它的底层工作原理总是有益的。对于想要深入了解 Compose 如何实现其惊人性能的 Jetpack Compose 开发者来说，这篇探索文章将为你提供更清晰的视角。我们将深入运行时源代码，了解它的工作原理、它对性能如此重要的原因，以及如何协调所有组件以使我们的 UI 感觉如此流畅。让我们开始吧！</p>

<h2>缘起</h2>

<p>为了实现流畅的 60 帧/秒 (fps)，我们的应用需要在 16.7 毫秒内绘制每一帧。当用户滚动浏览 LazyColumn 时，必须在这个微小的窗口内创建、测量和绘制新的项目。</p>

<p>如果一个项目很复杂，包含嵌套布局、图片和大量逻辑，那么组合它所需的工作很容易超过 16 毫秒。当这种情况发生时，主线程会被阻塞，帧会丢失，用户会在滚动过程中看到“卡顿”或卡顿。😩</p>

<p>这正是 PausableComposition 的初衷。</p>

<h2>“做什么”：更智能的 Compose 方式</h2>

<p>想象一下，你是一位厨师，正在为一场活动准备一顿大餐。👨‍🍳 与其在第一位客人到来时慌乱地从头开始烹饪所有食材，不如提前几个小时做好准备工作。切菜、调酱、烤甜点。等到上桌时，最后的烹饪和组装速度会快得令人难以置信。</p>

<p>PausableComposition 将这种“准备工作”的理念带到了 Compose 中。它允许运行时：</p>

<ol>
<li>增量式 Compose：将大型 UI 元素的合成分解成更小、更易于管理的部分。</li>
<li>异步准备：在 UI 真正需要显示在屏幕上之前进行合成工作，通常利用帧间的空闲时间。</li>
</ol>


<p>这种可组合项的预热意味着，当某个项目最终滚动到视图中时，大部分繁重的工作已经完成，使其几乎可以立即显示。</p>

<p>为了直观地理解这一概念，请观看以下动画：</p>

<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1751997214840/f9f7308a-7b83-4a3d-9d38-e3ce6aa8d9a9.gif?auto=format,compress&amp;gif-q=60&amp;format=webm" alt="滚动帧时间线" /></p>

<p>滚动发生时，假设项目 A、B、C、D 和 E 已在屏幕上可见，下一个项目是 F。如果项目 F 的布局或结构复杂，需要更多时间进行布局计算或其他预处理才能在 UI 上渲染，则此预处理将在帧时间轴内分块进行（例如 16 毫秒）。因此，如果它需要 2 帧，则 F 所需的预处理会在 2 帧的空闲时间内完成，不会造成任何帧卡顿。最后，当需要显示时，它会被绘制到 UI 上。项目 G 和 H 也采用相同的流程。</p>

<h2>工作原理：核心组件</h2>

<p>通过查看运行时源代码，我们可以看到它是如何通过一些关键接口和类来处理的。虽然你不会直接使用这些 API，但理解它们可以揭示 LazyColumn 的性能提升。🕵️‍♂️</p>

<h3>生命周期：PausableComposition 及其控制器</h3>

<p>旅程从 PausableComposition 接口开始，该接口扩展了 ReusableComposition 并添加了暂停功能。</p>

<blockquote><p>关于 ReusableComposition 的简要说明：</p>

<p>在讨论暂停之前，我们先来了解一下什么是 ReusableComposition？它是一种特殊的组合，专为需要高效回收 UI 内容的高性能场景而设计。想象一下 LazyColumn 中的项目。ReusableComposition 不会销毁滚动到屏幕外的项目的整个组合，而是允许运行时停用它。这会保留底层 UI 节点，但会清除已记住的状态。然后，这个停用的组合可以快速地用新内容“重新填充”，从而节省了从头创建节点的成本。PausableComposition 直接构建于这个强大的回收基础之上。</p></blockquote>

<p>PausableComposition 的外观如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// https://cs.android.com/androidx/platform/frameworks/support/+/8d08d42d60f7cc7ec0034d0b7ff6fd953516d96a:compose/runtime/runtime/src/commonMain/kotlin/androidx/compose/runtime/PausableComposition.kt;l=66</span>
</span><span class='line'><span class="n">sealed</span> <span class="n">interface</span> <span class="n">PausableComposition</span> <span class="p">:</span> <span class="n">ReusableComposition</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">setPausableContent</span><span class="p">(</span><span class="n">content</span><span class="p">:</span> <span class="n">@Composable</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">):</span> <span class="n">PausedComposition</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">setPausableContentWithReuse</span><span class="p">(</span><span class="n">content</span><span class="p">:</span> <span class="n">@Composable</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">):</span> <span class="n">PausedComposition</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>（注意：该接口是密封的，因为它仅在 Compose 运行时内部具有一组封闭且有限的实现。这为编译器提供了更多信息来进行优化。）</p>

<p>调用 setPausableContent 不会立即组合界面。相反，它会返回一个 PausedComposition 对象，该对象充当逐步过程的控制器。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// https://cs.android.com/androidx/platform/frameworks/support/+/8d08d42d60f7cc7ec0034d0b7ff6fd953516d96a:compose/runtime/runtime/src/commonMain/kotlin/androidx/compose/runtime/PausableComposition.kt;l=112</span>
</span><span class='line'><span class="n">sealed</span> <span class="n">interface</span> <span class="n">PausedComposition</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">isComplete</span><span class="p">:</span> <span class="n">Boolean</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">resume</span><span class="p">(</span><span class="n">shouldPause</span><span class="p">:</span> <span class="n">ShouldPauseCallback</span><span class="p">):</span> <span class="n">Boolean</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">apply</span><span class="p">()</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">cancel</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个生命周期最好以状态机的形式来表示：</p>

<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1751864148018/27512893-f186-47e7-9bdc-26036460aed7.png?auto=compress,format&amp;format=webp" alt="PausableComposition生命周期流程图" /></p>

<ul>
<li>resume(shouldPause: ShouldPauseCallback)：这是引擎。预取系统（此处指 LazyColumn 上下文）会反复调用 resume() 来执行大量的组合工作。神奇之处在于 shouldPause 回调。Compose 运行时会在组合过程中频繁调用此 lambda。如果它返回 true（例如，由于帧截止时间已近），则组合过程将停止，并将主线程交还给更重要的工作，例如绘制当前帧。</li>
<li>apply()：一旦 resume() 返回 true，即表示操作完成，就会调用 apply()。这会获取所有计算出的界面更改，并将其提交到实际的界面树中。</li>
<li>cancel()：如果用户滚动离开，并且不再需要预先组合的项目，则会调用 cancellation() 来丢弃工作并释放资源。</li>
</ul>


<h3>内部结构概览：PausedCompositionImpl</h3>

<p>上述状态机由内部的 PausedCompositionImpl 类管理。该类保存状态并连接所有部分。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// https://cs.android.com/androidx/platform/frameworks/support/+/8d08d42d60f7cc7ec0034d0b7ff6fd953516d96a:compose/runtime/runtime/src/commonMain/kotlin/androidx/compose/runtime/PausableComposition.kt;l=202</span>
</span><span class='line'><span class="k">internal</span> <span class="k">class</span> <span class="nc">PausedCompositionImpl</span><span class="p">(...)</span> <span class="p">:</span> <span class="n">PausedComposition</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">var</span> <span class="py">state</span> <span class="p">=</span> <span class="n">PausedCompositionState</span><span class="p">.</span><span class="n">InitialPending</span>
</span><span class='line'>    <span class="k">internal</span> <span class="k">val</span> <span class="py">pausableApplier</span> <span class="p">=</span> <span class="n">RecordingApplier</span><span class="p">(</span><span class="n">applier</span><span class="p">.</span><span class="n">current</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">resume</span><span class="p">(</span><span class="n">shouldPause</span><span class="p">:</span> <span class="n">ShouldPauseCallback</span><span class="p">):</span> <span class="n">Boolean</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">when</span> <span class="p">(</span><span class="n">state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">PausedCompositionState</span><span class="p">.</span><span class="n">InitialPending</span> <span class="p">-&gt;</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// This is the first time resume() is called.</span>
</span><span class='line'>                <span class="c1">// It starts the initial composition of the content.</span>
</span><span class='line'>                <span class="n">invalidScopes</span> <span class="p">=</span>
</span><span class='line'>                    <span class="n">context</span><span class="p">.</span><span class="n">composeInitialPaused</span><span class="p">(</span><span class="n">composition</span><span class="p">,</span> <span class="n">shouldPause</span><span class="p">,</span> <span class="n">content</span><span class="p">)</span>
</span><span class='line'>                <span class="n">state</span> <span class="p">=</span> <span class="n">PausedCompositionState</span><span class="p">.</span><span class="n">RecomposePending</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">invalidScopes</span><span class="p">.</span><span class="n">isEmpty</span><span class="p">())</span> <span class="n">markComplete</span><span class="p">()</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">PausedCompositionState</span><span class="p">.</span><span class="n">RecomposePending</span> <span class="p">-&gt;</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// This is for subsequent calls to resume().</span>
</span><span class='line'>                <span class="n">state</span> <span class="p">=</span> <span class="n">PausedCompositionState</span><span class="p">.</span><span class="n">Recomposing</span>
</span><span class='line'>                <span class="c1">// It tells the Composer to continue where it left off,</span>
</span><span class='line'>                <span class="c1">// processing any pending invalidations.</span>
</span><span class='line'>                <span class="n">invalidScopes</span> <span class="p">=</span>
</span><span class='line'>                    <span class="n">context</span><span class="p">.</span><span class="n">recomposePaused</span><span class="p">(</span><span class="n">composition</span><span class="p">,</span> <span class="n">shouldPause</span><span class="p">,</span> <span class="n">invalidScopes</span><span class="p">)</span>
</span><span class='line'>                <span class="n">state</span> <span class="p">=</span> <span class="n">PausedCompositionState</span><span class="p">.</span><span class="n">RecomposePending</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">invalidScopes</span><span class="p">.</span><span class="n">isEmpty</span><span class="p">())</span> <span class="n">markComplete</span><span class="p">()</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="c1">// ... other states like Recomposing, Applied, Cancelled are handled here ...</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">isComplete</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">apply</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// ... other state checks ...</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">state</span> <span class="p">==</span> <span class="n">PausedCompositionState</span><span class="p">.</span><span class="n">ApplyPending</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">applyChanges</span><span class="p">()</span> <span class="c1">// The call site</span>
</span><span class='line'>            <span class="n">state</span> <span class="p">=</span> <span class="n">PausedCompositionState</span><span class="p">.</span><span class="n">Applied</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">// ...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">fun</span> <span class="nf">applyChanges</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// ...</span>
</span><span class='line'>        <span class="n">pausableApplier</span><span class="p">.</span><span class="n">playTo</span><span class="p">(</span><span class="n">applier</span><span class="p">,</span> <span class="n">rememberManager</span><span class="p">)</span>
</span><span class='line'>        <span class="n">rememberManager</span><span class="p">.</span><span class="n">dispatchRememberObservers</span><span class="p">()</span>
</span><span class='line'>        <span class="n">rememberManager</span><span class="p">.</span><span class="n">dispatchSideEffects</span><span class="p">()</span>
</span><span class='line'>        <span class="c1">// ...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>调用 resume() 时，它会检查其内部状态并采取相应的措施：</p>

<ul>
<li>InitialPending：首次调用时，它会通过调用 context.composeInitialPaused 启动合成过程。这会告知核心 ComposerImpl 开始执行 @Composable 内容，并执行 shouldPause 回调。</li>
<li>RecomposePending：后续调用时，它会通过调用 context.recomposePaused 继续工作。此方法用于处理合成中任何因状态变化而失效的部分，或继续之前暂停的工作。</li>
<li>Applier：在此过程中，ComposerImpl 将所有 UI 更改操作转发给 pausableApplier（即 RecordingApplier），该操作会进行缓冲，而不是立即应用。</li>
<li>此过程持续进行，直到工作完成或 shouldPause 回调返回 true。</li>
</ul>


<h3>RecordingApplier：推迟最后的润色</h3>

<p>一个关键的性能技巧是 RecordingApplier。调用 resume() 时，Composer 不会直接更改实时 UI 树。如果分小步执行，可能会很慢，并导致 UI 更新不完整，显得怪异。</p>

<p>PausableComposition 使用的是 RecordingApplier。这个特殊的 Applier 会将其应该执行的所有 UI 操作（例如“创建 Text 节点”、“设置其文本属性”或“添加子图像”）记录到一个内部列表中。</p>

<p>只有调用 PausedComposition.apply() 时，RecordingApplier 才会将其记录的操作列表“回放”到实际的 Applier 上，从而高效地单步更新 UI 树。PausedComposition 的公共 apply() 方法是一个简单的状态机守卫。真正的工作发生在内部的 applyChanges() 方法中（如上面的代码片段所示）。</p>

<p>当调用 applyChanges 时，它会按顺序执行三项关键操作：</p>

<ul>
<li>它会告诉 RecordingApplier 将其所有缓冲的命令播放到实际的 applier 上。这才是 UI 真正出现在屏幕上的关键。</li>
<li>它会为所有已创建的 RememberObservers（例如 DisposableEffect）调度所有 onRemembered 生命周期回调。</li>
<li>最后，它会运行在合成过程中排队的所有 SideEffect。</li>
</ul>


<p>这种有序的批处理过程确保 UI 高效更新，并且所有生命周期事件都在正确的时间发生。</p>

<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1751794209046/49f5c1c7-b424-4c7d-a017-8ba65bb7b2d3.png?auto=compress,format&amp;format=webp" alt="PausableComposition时序图" /></p>

<h2>使用了 PausableComposition 的 LazyList</h2>

<p>LazyList 已经开始使用 PausableComposition API了。在 LazyList 中，PausableComposition 并非独立工作，而是协同工作的系统的一部分。</p>

<ul>
<li>指挥器 (Recomposer)：主 Recomposer 负责控制节奏，驱动可见 UI 的逐帧更新。</li>
<li>规划器 (LazyLayoutPrefetchState)：当用户滚动时，此组件会预测哪些项目即将显示。</li>
<li>舞台管理器 (SubcomposeLayout)：这个强大的 SubcomposeLayout 是 LazyList 的基础。它的 SubcomposeLayoutState 可以在需要时为各个项目创建和管理合成。最重要的是，它提供了 createPausedPrecomposition() API。</li>
<li>舞台调度器 (PrefetchScheduler)：此调度器会在帧之间寻找空闲时间来执行规划器请求的预合成工作。</li>
</ul>


<p>了解此功能的开发过程也很有趣。在 LazyLayoutPrefetchState 文件中，你可以找到控制它的功能标志：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// A simplified look inside LazyLayoutPrefetchState.kt: https://cs.android.com/androidx/platform/frameworks/support/+/8d08d42d60f7cc7ec0034d0b7ff6fd953516d96a:compose/foundation/foundation/src/commonMain/kotlin/androidx/compose/foundation/lazy/layout/LazyLayoutPrefetchState.kt;l=647</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">ComposeFoundationFlags</span><span class="p">.</span><span class="n">isPausableCompositionInPrefetchEnabled</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// This is the future, modern path.</span>
</span><span class='line'>    <span class="n">performPausableComposition</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">contentType</span><span class="p">,</span> <span class="n">average</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// This is the older, non-pausable fallback.</span>
</span><span class='line'>    <span class="n">performFullComposition</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">contentType</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>isPausableCompositionInPrefetchEnabled 这个标志充当了终止开关的作用。虽然它在源代码中的默认值为 false。如果你想在惰性布局（LazyColumn、LazyRow 等）中启用可暂停组合行为，我们可以简单地按如下方式启用它：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">class</span> <span class="nc">MyApplication</span> <span class="p">:</span> <span class="n">Application</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">ComposeFoundationFlags</span><span class="p">.</span><span class="n">isPausableCompositionInPrefetchEnabled</span> <span class="p">=</span> <span class="k">true</span>
</span><span class='line'>        <span class="k">super</span><span class="p">.</span><span class="n">onCreate</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>规划器：LazyLayoutPrefetchState 详解</h3>

<p>LazyLayoutPrefetchState 是预取操作的核心。它的作用是获取来自 LazyLayout 的预测（例如，“第 25 项即将上线”），并将其转换为实际的预组合任务。</p>

<p>它通过 PrefetchHandleProvider 实现此操作，该提供者会创建一个 PrefetchRequest。此请求是 PrefetchScheduler 可以执行的工作单元。在这个请求中，我们找到了暂停逻辑的核心。</p>

<p>当 PrefetchScheduler 执行请求时，它会进入一个循环，在 PausableComposition 上调用 resume()。传递给 resume 的 lambda 表达式决定是否暂停。</p>

<p>因此，如果启用了上述功能标记，它将通过 Pausable Composition API 执行请求，如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// https://cs.android.com/androidx/platform/frameworks/support/+/8d08d42d60f7cc7ec0034d0b7ff6fd953516d96a:compose/foundation/foundation/src/commonMain/kotlin/androidx/compose/foundation/lazy/layout/LazyLayoutPrefetchState.kt;l=754</span>
</span><span class='line'><span class="c1">// Simplified from HandleAndRequestImpl inside LazyLayoutPrefetchState</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">PrefetchRequestScope</span><span class="p">.</span><span class="n">performPausableComposition</span><span class="p">(...)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">composition</span> <span class="p">=</span> <span class="c1">// get the composition for the item of the LazyLayout </span>
</span><span class='line'>    <span class="n">pauseRequested</span> <span class="p">=</span> <span class="k">false</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(!</span><span class="n">composition</span><span class="p">.</span><span class="n">isComplete</span> <span class="p">&amp;&amp;</span> <span class="p">!</span><span class="n">pauseRequested</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">composition</span><span class="p">.</span><span class="n">resume</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(!</span><span class="n">pauseRequested</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// 1. Update how much time is left in this frame&#39;s idle window.</span>
</span><span class='line'>                <span class="n">updateElapsedAndAvailableTime</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// 2. Save how long this work chunk took, to improve future estimates.</span>
</span><span class='line'>                <span class="n">averages</span><span class="p">.</span><span class="n">saveResumeTimeNanos</span><span class="p">(</span><span class="n">elapsedTimeNanos</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// 3. The Core Decision: Is there enough time left to do another</span>
</span><span class='line'>                <span class="c1">//    chunk of work without risking a frame drop?</span>
</span><span class='line'>                <span class="n">pauseRequested</span> <span class="p">=</span> <span class="p">!</span><span class="n">shouldExecute</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">availableTimeNanos</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">averages</span><span class="p">.</span><span class="n">resumeTimeNanos</span> <span class="p">+</span> <span class="n">averages</span><span class="p">.</span><span class="n">pauseTimeNanos</span><span class="p">,</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="c1">// 4. Return the decision to the composition engine.</span>
</span><span class='line'>            <span class="n">pauseRequested</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">updateElapsedAndAvailableTime</span><span class="p">()</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">pauseRequested</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// If we decided to pause, record how long the final pause check took.</span>
</span><span class='line'>        <span class="n">averages</span><span class="p">.</span><span class="n">savePauseTimeNanos</span><span class="p">(</span><span class="n">elapsedTimeNanos</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// If we finished without pausing, record the time for the final resume chunk.</span>
</span><span class='line'>        <span class="n">averages</span><span class="p">.</span><span class="n">saveResumeTimeNanos</span><span class="p">(</span><span class="n">elapsedTimeNanos</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>让我们分解一下这个逻辑：</p>

<ol>
<li>updateElapsedAndAvailableTime()：在恢复 lambda 函数内部，系统会不断检查距离下一帧需要绘制还剩多少时间。</li>
<li>averages.saveResumeTimeNanos(&hellip;)：它会记录每个小块合成工作所需的时间。这有助于它构建一个平均值 (averages) 来预测未来工作的成本。</li>
<li>!shouldExecute(&hellip;)：这是核心决策。它会将 availableTimeNanos 与预算进行比较。这个预算是一个智能估算：完成另一块工作所需的平均时间加上暂停所需的平均时间。如果时间不足，pauseRequested 会变为 true。</li>
<li>最终计时：在本次循环退出后（因为工作完成或请求暂停），会调用最后一次 updateElapsedAndAvailableTime()。这会捕获最后一个操作的时间。</li>
<li>保存平均值：然后系统会保存这个最终计时。如果请求了暂停，则它会影响 pauseTimeNanos。如果循环自然完成，则它会影响 resumeTimeNanos。这确保了用于未来预测的历史数据始终准确。</li>
</ol>


<p>这种自我调节的反馈循环允许预取器在系统空闲时保持积极主动，但在需要渲染 UI 时又能保持礼貌，尊重主线程。</p>

<h3>最后一步：应用预组合 UI</h3>

<p>那么，当屏幕上真正需要预组合的项目时会发生什么呢？这时 SubcomposeLayout 就占据了中心位置。在正常的测量过程中，它会为现在可见的项目调用其 subcompose 函数。在内部，这会触发最后一步。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// https://cs.android.com/androidx/platform/frameworks/support/+/8d08d42d60f7cc7ec0034d0b7ff6fd953516d96a:compose/ui/ui/src/commonMain/kotlin/androidx/compose/ui/layout/SubcomposeLayout.kt;l=1186</span>
</span><span class='line'><span class="c1">// Simplified from LayoutNodeSubcompositionsState inside SubcomposeLayout.kt</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">NodeState</span><span class="p">.</span><span class="n">applyPausedPrecomposition</span><span class="p">(</span><span class="n">shouldComplete</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">pausedComposition</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">pausedComposition</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">pausedComposition</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 1. If the work must be completed now...</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">shouldComplete</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// ...force the composition to finish by looping `resume`</span>
</span><span class='line'>            <span class="c1">// and always passing `false` to the `shouldPause` callback.</span>
</span><span class='line'>            <span class="k">while</span> <span class="p">(!</span><span class="n">pausedComposition</span><span class="p">.</span><span class="n">isComplete</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">pausedComposition</span><span class="p">.</span><span class="n">resume</span> <span class="p">{</span> <span class="k">false</span> <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">// 2. Apply the changes to the real UI tree.</span>
</span><span class='line'>        <span class="n">pausedComposition</span><span class="p">.</span><span class="n">apply</span><span class="p">()</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">pausedComposition</span> <span class="p">=</span> <span class="k">null</span> <span class="c1">// Clear the handle.</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当某个项目可见时，其组合不再是低优先级的后台任务，而是高优先级的同步任务。shouldComplete = true 参数确保所有剩余的组合工作立即完成，无需暂停。然后，apply() 被调用，完整的 UI 会立即显示在屏幕上。</p>

<p>它们如何协同工作：</p>

<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1751799217100/82837ef0-e97e-49c7-bee6-cd68ab1804ba.png?auto=compress,format&amp;format=webp" alt="LazyList滚动时序图" /></p>

<h2>结论</h2>

<p>深入研究 Compose 运行时后，PausableComposition 的设计堪称性能工程的杰作。</p>

<ul>
<li>它并非魔法，而是延迟：其核心理念是在紧急任务之前完成。通过在空闲时间合成项目，快速滚动时主线程所需的工作量会大大减少。</li>
<li>协作式和非阻塞式：shouldPause 回调是处理多任务的绝佳方式。它可以让长时间运行的合成任务优雅地让位于更紧急的当前帧渲染任务，从而直接防止卡顿。</li>
<li>通过批处理提高效率：RecordingApplier 通过将 UI 树中的许多小的独立更改分组为单个高效的更新，避免了这些更改带来的开销。</li>
</ul>


<p>虽然 PausableComposition 是一个你可能永远不会直接使用的内部功能，但了解它的存在和运作方式，可以让你真正体会到 Jetpack Compose 如此高性能的明智决策。下次你轻松流畅地滚动浏览复杂的 LazyColumn 时，你就会体会到这巧妙且精心编排的“舞蹈”是如何在表面之下进行的。✅ 这种架构不仅解决了当前的性能挑战，还为 Compose 未来更先进的渲染策略铺平了道路。</p>

<p>希望你已经了解了这个新 API 在 Jetpack Compose 中的工作原理。</p>

<p>太棒了！希望你从中获得了一些宝贵的见解。如果你喜欢这篇文章，请分享 😉，因为……</p>

<p>“分享即关爱”</p>

<p>谢谢！😄</p>

<p>让我们一起回顾 X （链接：<a href="https://twitter.com/imShreyasPatil%EF%BC%89%E7%9A%84%E6%9C%80%E6%96%B0%E5%8A%A8%E6%80%81%EF%BC%8C%E6%88%96%E8%80%85%E8%AE%BF%E9%97%AE%E6%88%91%E7%9A%84%E7%BD%91%E7%AB%99%EF%BC%88%E9%93%BE%E6%8E%A5%EF%BC%9Ahttps://shreyaspatil.dev/%EF%BC%89%E4%BA%86%E8%A7%A3%E6%9B%B4%E5%A4%9A%E5%85%B3%E4%BA%8E%E6%88%91%E7%9A%84%E4%BF%A1%E6%81%AF">https://twitter.com/imShreyasPatil%EF%BC%89%E7%9A%84%E6%9C%80%E6%96%B0%E5%8A%A8%E6%80%81%EF%BC%8C%E6%88%96%E8%80%85%E8%AE%BF%E9%97%AE%E6%88%91%E7%9A%84%E7%BD%91%E7%AB%99%EF%BC%88%E9%93%BE%E6%8E%A5%EF%BC%9Ahttps://shreyaspatil.dev/%EF%BC%89%E4%BA%86%E8%A7%A3%E6%9B%B4%E5%A4%9A%E5%85%B3%E4%BA%8E%E6%88%91%E7%9A%84%E4%BF%A1%E6%81%AF</a> 😎。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SnapshotFlow还是collectAsState？对于Jetpack Compose来说哪个更香？]]></title>
    <link href="https://alexhilton.github.io/blog/2025/07/16/snapshotflow-or-collectasstate/"/>
    <updated>2025-07-16T22:31:22+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/07/16/snapshotflow-or-collectasstate</id>
    <content type="html"><![CDATA[<p>本文译自「SnapshotFlow or collectAsState? How to pick the right tool for Jetpack Compose」，原文链接<a href="https://proandroiddev.com/snapshotflow-or-collectasstate-how-to-pick-the-right-tool-for-jetpack-compose-d6f1cc9d2123">https://proandroiddev.com/snapshotflow-or-collectasstate-how-to-pick-the-right-tool-for-jetpack-compose-d6f1cc9d2123</a>，由Dmitry Glazunov发布于2025年7月7日。</p>

<p><a href="https://alexhilton.github.io/blog/2025/07/16/snapshotflow-or-collectasstate/"><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/0*P0darOG2IeBIDWdY" title="auto auto" ></a></p>

<!-- more -->


<p>构建 UI 可能感觉很简单，直到需要订阅状态变化并有效处理副作用时之前。许多开发者过度使用 collectAsState，导致延迟和意外的重组（reComposition）。还有一些人听说过 snapshotFlow，但却不太明白既然 StateFlow 和 collectAsState 已经存在，为什么还需要它？</p>

<p>在这篇文章中，我将通过探索实际项目中简短且实用的示例，分享我对何时使用 snapshotFlow 以及何时更适合使用 collectAsState 的看法，帮助你避免项目中隐藏的 bug 和性能问题。</p>

<p>让我们来详细分析一下。</p>

<h2>collectAsState 的作用</h2>

<p>collectAsState 在 Compose 中订阅 Flow，并自动将其公开为State，以便在 UI 中轻松显示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">uiState</span> <span class="k">by</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">uiStateFlow</span><span class="p">.</span><span class="n">collectAsState</span><span class="p">()</span>
</span><span class='line'><span class="n">Text</span><span class="p">(</span><span class="n">uiState</span><span class="p">.</span><span class="n">text</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>要点：</p>

<ul>
<li>非常易于使用。</li>
<li>重组时自动取消并重新开始收集。</li>
<li>非常适合 ViewModel → UI 数据绑定。</li>
</ul>


<p>但是：</p>

<ul>
<li>每次发出新数据时都会触发重组，哪怕只是发生了微小的变化。</li>
<li>可组合项进入重组状态后立即开始收集。</li>
<li>不适用于观察 Compose 特有的状态，例如滚动或手势。</li>
</ul>


<h2>快照流 (snapshotFlow) 的作用</h2>

<p>快照流 (snapshotFlow) 将 Compose 状态（例如 LazyListState 、 derivedStateOf ）转换为冷流 (cold Flow)，让你无需进行不必要的重组即可对状态变化做出反应：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">listState</span> <span class="p">=</span> <span class="n">rememberLazyListState</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">snapshotFlow</span> <span class="p">{</span> <span class="n">listState</span><span class="p">.</span><span class="n">firstVisibleItemIndex</span> <span class="p">}</span>
</span><span class='line'>        <span class="p">.</span><span class="n">distinctUntilChanged</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">collect</span> <span class="p">{</span> <span class="n">index</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="n">analytics</span><span class="p">.</span><span class="n">logScrollPosition</span><span class="p">(</span><span class="n">index</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>要点：</p>

<ul>
<li>非常适合 Compose 状态变化的副作用。</li>
<li>不会触发重组。</li>
<li>可在 LaunchedEffect 或协程中使用。</li>
</ul>


<p>但是：</p>

<ul>
<li>不会公开状态以进行直接 UI 渲染。</li>
<li>不会替代 CollectAsState 来实现 ViewModel → UI 更新。</li>
</ul>


<h2>何时使用 collectAsState</h2>

<ul>
<li>从 ViewModel 订阅 UI 的 Flow 或 StateFlow。</li>
<li>在 UI 中显示数据（文本、加载状态、获取的数据）。</li>
<li>用户需要看到的低频更新。</li>
</ul>


<p>避免使用：</p>

<ul>
<li>高频更新（滚动偏移、传感器数据）。</li>
<li>触发不需要 UI 更新的副作用。</li>
</ul>


<h2>何时使用 snaphotFlow</h2>

<ul>
<li>响应 Compose 状态（滚动、手势、动画）。</li>
<li>触发副作用但不会导致重组。</li>
<li>从 Compose 状态构建 Flow 管道（分析、延迟加载触发器）。</li>
</ul>


<p>避免使用：</p>

<ul>
<li>直接 UI 数据渲染。</li>
<li>用 viewModel → UI 流替换 collectAsState。</li>
</ul>


<h2>snapshotFlow 的实用示例</h2>

<p>错误体位：使用 snaphotFlow.collectAsState 进行动画进度</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">progress</span> <span class="k">by</span> <span class="n">snapshotFlow</span> <span class="p">{</span> <span class="n">animationState</span><span class="p">.</span><span class="n">progress</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">.</span><span class="n">collectAsState</span><span class="p">(</span><span class="n">initial</span> <span class="p">=</span> <span class="m">0f</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">Text</span><span class="p">(</span><span class="s">&quot;Progress: ${(progress * 100).toInt()}%&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用 snaphotFlow 和 collectAsState 来驱动动画进度的 UI 更新会导致每一帧都重新合成，从而导致卡顿，违背了 snaphotFlow 的初衷。</p>

<p>正确姿式：使用 snaphotFlow 在动画过程中进行分析</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">LaunchedEffect</span><span class="p">(</span><span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">snapshotFlow</span> <span class="p">{</span> <span class="n">animationState</span><span class="p">.</span><span class="n">progress</span> <span class="p">}</span>
</span><span class='line'>        <span class="p">.</span><span class="n">distinctUntilChanged</span> <span class="p">{</span> <span class="n">old</span><span class="p">,</span> <span class="n">new</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="p">(</span><span class="n">old</span> <span class="p">*</span> <span class="m">100</span><span class="p">).</span><span class="n">toInt</span><span class="p">()</span> <span class="p">==</span> <span class="p">(</span><span class="n">new</span> <span class="p">*</span> <span class="m">100</span><span class="p">).</span><span class="n">toInt</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="p">.</span><span class="n">collect</span> <span class="p">{</span> <span class="n">progress</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="n">analytics</span><span class="p">.</span><span class="n">logAnimationProgress</span><span class="p">(</span><span class="n">progress</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这会跟踪动画进度，以便进行分析或记录，而不会触发 UI 重构。</p>

<h2>collectAsState 的实用示例</h2>

<p>错误体位：将 collectAsState 用于高频滚动数据</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">scrollOffset</span> <span class="k">by</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">scrollOffsetFlow</span><span class="p">.</span><span class="n">collectAsState</span><span class="p">()</span>
</span><span class='line'><span class="n">Text</span><span class="p">(</span><span class="s">&quot;Offset: $scrollOffset&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这会在滚动的每个像素上触发重新合成，导致 CPU 过载。</p>

<p>正确姿式：使用 collectAsState 获取有意义的 UI 数据</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">userName</span> <span class="k">by</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">userNameFlow</span><span class="p">.</span><span class="n">collectAsState</span><span class="p">()</span>
</span><span class='line'><span class="n">Text</span><span class="p">(</span><span class="s">&quot;Hello, $userName!&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这适用于显示用户需要查看且不经常更改的数据。</p>

<h2>结论</h2>

<p>collectAsState 和 snapshotFlow 相辅相成：</p>

<ul>
<li>使用 collectAsState 在 UI 中显示 ViewModel 数据。</li>
<li>使用 snapshotFlow 响应 Compose 状态变化的副作用，而无需触发重组。</li>
</ul>


<p>正确使用它们将帮助你避免不必要的重组，提升应用的响应速度，并保持 Compose 代码简洁、可扩展且可预测。</p>

<p>如果你觉得本文分析有用，请随时关注我以获取更多见解。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为什么你的App总是忘记所有事情]]></title>
    <link href="https://alexhilton.github.io/blog/2025/07/11/app-keep-forgetting/"/>
    <updated>2025-07-11T23:20:20+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/07/11/app-keep-forgetting</id>
    <content type="html"><![CDATA[<p>本文译自「Why Your App Keeps Forgetting Everything」，原文链接<a href="https://medium.com/mobile-app-development-publication/why-your-app-keeps-forgetting-everything-aa9ad8dd8f6b">https://medium.com/mobile-app-development-publication/why-your-app-keeps-forgetting-everything-aa9ad8dd8f6b</a>，由Android Dev Nexus发布于2025年6月13日。</p>

<p><a href="https://alexhilton.github.io/blog/2025/07/11/app-keep-forgetting/"><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*OqqSvUytY9D0D4EIX_Cn0A.png" title="auto auto" ></a></p>

<!-- more -->


<p>不知你有没有发现了一个让许多 Android 开发者困惑的关键问题：ViewModel 和 savedInstanceState 解决的是不同的问题，并且拥有不同的生命周期。</p>

<p>让我来解释一下你的测试中究竟发生了什么，以及为什么这两种机制都存在。</p>

<h2>Android 中的两种“死亡”类型</h2>

<p>Android 应用可以通过两种截然不同的方式“死亡”：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*1-DtrKgBiEVyWj0RgbaNoQ.png" alt="" /></p>

<h3>1. 配置变更（屏幕旋转等）</h3>

<ul>
<li>Activity/Fragment：死亡并重建</li>
<li>ViewModel：幸存！🎉</li>
<li>savedInstanceState：也幸存，但此时你并不需要它</li>
</ul>


<h3>2. 进程死亡（应用最小化、内存不足等）</h3>

<ul>
<li>Activity/Fragment：死亡</li>
<li>ViewModel：也死亡！💀</li>
<li>savedInstanceState：幸存并成为你的生命线</li>
</ul>


<h2>测试结果不撒谎</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// 进程死亡时会发生什么:</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 最小化应用程序之前:</span>
</span><span class='line'><span class="k">class</span> <span class="nc">MyViewModel</span> <span class="p">:</span> <span class="n">ViewModel</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">userData</span> <span class="p">=</span> <span class="s">&quot;Important data&quot;</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">counter</span> <span class="p">=</span> <span class="m">42</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 重新打开应用程序后:</span>
</span><span class='line'><span class="c1">// - 新的 ViewModel 实例已创建（旧数据已消失）</span>
</span><span class='line'><span class="c1">// - 但是 onCreate() 接收了已保存数据的 savedInstanceState 包</span>
</span><span class='line'><span class="c1">// - 你需要手动从 savedInstanceState 恢复 ViewModel</span>
</span></code></pre></td></tr></table></div></figure>


<p>你猜测的完全正确：ViewModel 需要额外的步骤来存储/恢复数据，即使进程终止。</p>

<h2>完整的解决方案：两者结合</h2>

<p>以下是现代 Android 开发处理这个双层系统的方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">class</span> <span class="nc">MainActivity</span> <span class="p">:</span> <span class="n">AppCompatActivity</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="n">lateinit</span> <span class="k">var</span> <span class="py">viewModel</span><span class="p">:</span> <span class="n">MyViewModel</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">super</span><span class="p">.</span><span class="n">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">viewModel</span> <span class="p">=</span> <span class="n">ViewModelProvider</span><span class="p">(</span><span class="k">this</span><span class="p">)[</span><span class="n">MyViewModel</span><span class="o">::</span><span class="k">class</span><span class="p">.</span><span class="n">java</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 检查我们是否正在从进程死亡中恢复</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">savedInstanceState</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">isEmpty</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 从 savedInstanceState 恢复 ViewModel</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">userData</span> <span class="p">=</span> <span class="n">savedInstanceState</span><span class="p">.</span><span class="n">getString</span><span class="p">(</span><span class="s">&quot;user_data&quot;</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">counter</span> <span class="p">=</span> <span class="n">savedInstanceState</span><span class="p">.</span><span class="n">getInt</span><span class="p">(</span><span class="s">&quot;counter&quot;</span><span class="p">,</span> <span class="m">0</span><span class="p">)</span>
</span><span class='line'>            <span class="n">viewModel</span><span class="p">.</span><span class="n">restoreFromSavedState</span><span class="p">(</span><span class="n">userData</span><span class="p">,</span> <span class="n">counter</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onSaveInstanceState</span><span class="p">(</span><span class="n">outState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">super</span><span class="p">.</span><span class="n">onSaveInstanceState</span><span class="p">(</span><span class="n">outState</span><span class="p">)</span>
</span><span class='line'>        <span class="c1">// 保存关键的 ViewModel 数据以避免进程死亡</span>
</span><span class='line'>        <span class="n">outState</span><span class="p">.</span><span class="n">putString</span><span class="p">(</span><span class="s">&quot;user_data&quot;</span><span class="p">,</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">userData</span><span class="p">)</span>
</span><span class='line'>        <span class="n">outState</span><span class="p">.</span><span class="n">putInt</span><span class="p">(</span><span class="s">&quot;counter&quot;</span><span class="p">,</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">counter</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MyViewModel</span> <span class="p">:</span> <span class="n">ViewModel</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">userData</span><span class="p">:</span> <span class="n">String</span> <span class="p">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">counter</span><span class="p">:</span> <span class="n">Int</span> <span class="p">=</span> <span class="m">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">isEmpty</span><span class="p">():</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="n">userData</span><span class="p">.</span><span class="n">isEmpty</span><span class="p">()</span> <span class="p">&amp;&amp;</span> <span class="n">counter</span> <span class="p">==</span> <span class="m">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">restoreFromSavedState</span><span class="p">(</span><span class="n">userData</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">counter</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">userData</span> <span class="p">=</span> <span class="n">userData</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">counter</span> <span class="p">=</span> <span class="n">counter</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>当每个机制生效时</h2>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*dmQnYfNrJik_bbpuNT7bzQ.png" alt="" /></p>

<p>让我来向你展示一下不同场景下的具体情况：</p>

<h3>场景 1：屏幕旋转</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'>Before rotation:
</span><span class='line'>- ViewModel: Alive with data ✅
</span><span class='line'>- savedInstanceState: Gets saved but not really needed
</span><span class='line'>
</span><span class='line'>After rotation:
</span><span class='line'>- ViewModel: Same instance, data intact ✅
</span><span class='line'>- savedInstanceState: Available but redundant
</span><span class='line'>- Result: ViewModel data is immediately available
</span></code></pre></td></tr></table></div></figure>


<h3>场景2：应用程序最小化→重新打开（进程死亡）</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'>Before minimizing:
</span><span class='line'>- ViewModel: Alive with data ✅
</span><span class='line'>- onSaveInstanceState<span class="o">()</span>: Saves critical data to Bundle
</span><span class='line'>After reopening:
</span><span class='line'>- ViewModel: NEW instance, no data ❌
</span><span class='line'>- savedInstanceState: Contains saved data ✅
</span><span class='line'>- Result: Must restore ViewModel from savedInstanceState
</span></code></pre></td></tr></table></div></figure>


<h3>场景 3：应用程序最小化 → 重新打开（进程存活）</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'>Before minimizing:
</span><span class='line'>- ViewModel: Alive with data ✅
</span><span class='line'>After reopening:
</span><span class='line'>- ViewModel: Same instance, data intact ✅
</span><span class='line'>- savedInstanceState: null <span class="o">(</span>no recreation happened<span class="o">)</span>
</span><span class='line'>- Result: ViewModel data is immediately available
</span></code></pre></td></tr></table></div></figure>


<h2>那么，为什么存在这个双层系统？</h2>

<p>ViewModel 处理常见情况：</p>

<ul>
<li>复杂的 UI 状态，你不希望在频繁旋转屏幕时丢失。</li>
<li>任何需要耗费大量资源重新创建的内容。</li>
</ul>


<p>savedInstanceState 处理特殊情况：</p>

<ul>
<li>进程死亡难以预测。但当它发生时，用户希望其状态能够持久保存。</li>
<li>小而关键的数据片段（例如用户输入、滚动位置）。</li>
<li>简单的 UI 状态，对用户体验至关重要。</li>
</ul>


<h2>Bundle 大小的现实检验</h2>

<p>以下是一些可以帮你免去调试麻烦的事情：Bundle 并非无限大的存储空间。你大约有 1MB 的空间可用，超过这个限制会导致
崩溃，让你质疑自己的人生选择。</p>

<p>保持 onSavedInstanceState 数据精简。保存用户写到一半的电子邮件草稿，而不是整个联系人列表。</p>

<h2>现代方法：SavedStateHandle</h2>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*ThuE7YpnrtfFQe2fwDlbDg.png" alt="" /></p>

<p>Google 意识到这种手动操作非常繁琐，因此他们创建了 SavedStateHandle ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">class</span> <span class="nc">MyViewModel</span><span class="p">(</span><span class="k">private</span> <span class="k">val</span> <span class="py">savedStateHandle</span><span class="p">:</span> <span class="n">SavedStateHandle</span><span class="p">)</span> <span class="p">:</span> <span class="n">ViewModel</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 这将自动保留配置更改和进程终止！</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">userData</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>        <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="n">savedStateHandle</span><span class="p">.</span><span class="k">get</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;(</span><span class="s">&quot;user_data&quot;</span><span class="p">)</span> <span class="o">?:</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>        <span class="k">set</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="p">=</span> <span class="n">savedStateHandle</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="s">&quot;user_data&quot;</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="py">counter</span><span class="p">:</span> <span class="n">Int</span>
</span><span class='line'>        <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="n">savedStateHandle</span><span class="p">.</span><span class="k">get</span><span class="p">&lt;</span><span class="n">Int</span><span class="p">&gt;(</span><span class="s">&quot;counter&quot;</span><span class="p">)</span> <span class="o">?:</span> <span class="m">0</span>
</span><span class='line'>        <span class="k">set</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="p">=</span> <span class="n">savedStateHandle</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="s">&quot;counter&quot;</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 无需手动恢复！</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>对于以下情况，为什么仍然需要手动 onSaveInstanceState？</h2>

<h3>1. 不属于 ViewModel 的 UI 特定状态</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">override</span> <span class="k">fun</span> <span class="nf">onSaveInstanceState</span><span class="p">(</span><span class="n">outState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">super</span><span class="p">.</span><span class="n">onSaveInstanceState</span><span class="p">(</span><span class="n">outState</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">// 这些不属于你的业务逻辑层</span>
</span><span class='line'>    <span class="n">outState</span><span class="p">.</span><span class="n">putInt</span><span class="p">(</span><span class="s">&quot;scroll_position&quot;</span><span class="p">,</span> <span class="n">recyclerView</span><span class="p">.</span><span class="n">computeVerticalScrollOffset</span><span class="p">())</span>
</span><span class='line'>    <span class="n">outState</span><span class="p">.</span><span class="n">putBoolean</span><span class="p">(</span><span class="s">&quot;is_toolbar_expanded&quot;</span><span class="p">,</span> <span class="n">collapsingToolbar</span><span class="p">.</span><span class="n">isExpanded</span><span class="p">)</span>
</span><span class='line'>    <span class="n">outState</span><span class="p">.</span><span class="n">putParcelable</span><span class="p">(</span><span class="s">&quot;dialog_state&quot;</span><span class="p">,</span> <span class="n">currentDialog</span><span class="o">?.</span><span class="n">onSaveInstanceState</span><span class="p">())</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2. Fragment 参数和 Activity Extras</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// 这些需要在进程终止后继续存在，但不是 ViewModel 状态</span>
</span><span class='line'><span class="k">class</span> <span class="nc">DetailFragment</span> <span class="p">:</span> <span class="n">Fragment</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">companion</span> <span class="k">object</span> <span class="err">{</span>
</span><span class='line'>        <span class="k">fun</span> <span class="nf">newInstance</span><span class="p">(</span><span class="n">itemId</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">=</span> <span class="n">DetailFragment</span><span class="p">().</span><span class="n">apply</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">arguments</span> <span class="p">=</span> <span class="n">Bundle</span><span class="p">().</span><span class="n">apply</span> <span class="p">{</span>  <span class="c1">// 这在内部使用 savedInstanceState</span>
</span><span class='line'>                <span class="n">putString</span><span class="p">(</span><span class="s">&quot;item_id&quot;</span><span class="p">,</span> <span class="n">itemId</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3. 视图状态过于特定于 UI</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// 诸如 EditText 光标位置、焦点状态等。</span>
</span><span class='line'><span class="k">override</span> <span class="k">fun</span> <span class="nf">onSaveInstanceState</span><span class="p">(</span><span class="n">outState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">super</span><span class="p">.</span><span class="n">onSaveInstanceState</span><span class="p">(</span><span class="n">outState</span><span class="p">)</span>
</span><span class='line'>    <span class="n">outState</span><span class="p">.</span><span class="n">putInt</span><span class="p">(</span><span class="s">&quot;edit_text_selection_start&quot;</span><span class="p">,</span> <span class="n">editText</span><span class="p">.</span><span class="n">selectionStart</span><span class="p">)</span>
</span><span class='line'>    <span class="n">outState</span><span class="p">.</span><span class="n">putInt</span><span class="p">(</span><span class="s">&quot;edit_text_selection_end&quot;</span><span class="p">,</span> <span class="n">editText</span><span class="p">.</span><span class="n">selectionEnd</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>把手弄脏（动手试一试）</h2>

<p>你可以强制终止进程进行测试：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Kill your app process </span>
</span><span class='line'>adb shell am <span class="nb">kill </span>com.yourpackage.name
</span><span class='line'><span class="c"># Or use &quot;Don&#39;t keep activities&quot; in Developer Options</span>
</span></code></pre></td></tr></table></div></figure>


<p>这将帮助你验证状态恢复是否正确进行。</p>

<h2>关键洞察</h2>

<p>ViewModel 非常适合配置更改，但需要帮助应对进程死亡。</p>

<p>现代方法是在 ViewModel 中使用 SavedStateHandle，它可以自动处理这两种情况。如果你尚未使用它，则需要手动执行 savedInstanceState → ViewModel 的恢复过程。</p>

<p>这个双层系统看似复杂，但实际上非常优雅：常见情况（配置更改）的快速恢复，以及罕见情况（进程死亡）的可靠恢复。</p>

<p>祝你编码愉快，愿你的状态始终持久！🚀</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用优雅的姿式应对Kotlin Flow的回压]]></title>
    <link href="https://alexhilton.github.io/blog/2025/07/03/handling-flow-backpress/"/>
    <updated>2025-07-03T22:09:26+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/07/03/handling-flow-backpress</id>
    <content type="html"><![CDATA[<p>本文译自「How to Manage Backpressure in Kotlin Flow: collect • buffer • conflate • collectLatest」，原文链接<a href="https://proandroiddev.com/how-to-manage-backpressure-in-kotlin-flow-collect-buffer-conflate-collectlatest-b8102284d968">https://proandroiddev.com/how-to-manage-backpressure-in-kotlin-flow-collect-buffer-conflate-collectlatest-b8102284d968</a>，由Shbazhenov发布于2025年6月13日。</p>

<p><a href="https://alexhilton.github.io/blog/2025/07/03/handling-flow-backpress/"><img src="https://blog.mindorks.com/images/kotlin-flow-banner-image.png" title="auto auto" ></a></p>

<!-- more -->


<p>你是否曾遇到过快速数据源发送的数据量超出应用处理能力的情况，导致应用速度变慢甚至崩溃？Kotlin Flow 内置了一些方法，可让你的生产者和消费者保持同步。本文将介绍：</p>

<ol>
<li>回压的含义</li>
<li>Flow 默认的“互相等待”模式如何工作</li>
<li>何时使用 buffer() 添加小型队列</li>
<li>conflate() 如何跳过旧数据项</li>
<li>为什么 collectLatest { } 会停止旧数据处理</li>
<li>如何根据你的情况选择合适的选项</li>
</ol>


<h2>回压的含义</h2>

<p>回压的作用是确保快速的数据发送方不会压垮较慢的接收方。如果没有回压，你可能会在内存中存储过多的数据，或者浪费时间处理过时的信息。</p>

<p>回压可以帮助你：</p>

<ul>
<li>控制内存使用量</li>
<li>避免不必要的工作</li>
<li>使应用性能更可预测</li>
</ul>


<h2>1. 默认“互相等待”模式</h2>

<p>默认情况下，当你执行以下操作时：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">flow</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">repeat</span><span class="p">(</span><span class="m">3</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">emit</span><span class="p">(</span><span class="n">it</span><span class="p">)</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Sent $it&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">delay</span><span class="p">(</span><span class="m">100</span><span class="p">)</span>            <span class="c1">// 快速的发送者</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">.</span><span class="n">collect</span> <span class="p">{</span> <span class="n">value</span> <span class="p">-&gt;</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot;Handling $value&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">delay</span><span class="p">(</span><span class="m">300</span><span class="p">)</span>             <span class="c1">// 慢速的处理者</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>发送方 ( emit ) 将暂停，直到处理方 ( collect ) 处理完最后一个值。没有队列，每个值都是一次发送和处理一个。</p>

<h2>2. 使用 buffer() 添加一个小队列</h2>

<p>如果你希望发送方提前一点，请使用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">flow</span> <span class="p">{</span> <span class="err">…</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">.</span><span class="n">buffer</span><span class="p">(</span><span class="n">capacity</span> <span class="p">=</span> <span class="m">2</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="n">collect</span> <span class="p">{</span> <span class="n">value</span> <span class="p">-&gt;</span>
</span><span class='line'>    <span class="c1">// slow work here</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>现在，发送者最多可以将 2 个项目放入一个小队列中。</li>
<li>一旦队列满了，它就会再次暂停。</li>
</ul>


<p>这给了你一个有限的队列：你仍然可以处理每个项目，但可以平滑速度峰值。</p>

<h2>3. 使用 conflate() 跳过旧项目</h2>

<p>当你只关心最新数据（例如更新进度条）时，你可以这样写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">flow</span> <span class="p">{</span> <span class="err">…</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">.</span><span class="n">conflate</span><span class="p">()</span>
</span><span class='line'>  <span class="p">.</span><span class="n">collect</span> <span class="p">{</span> <span class="n">value</span> <span class="p">-&gt;</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Update to $value&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">delay</span><span class="p">(</span><span class="m">300</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>如果处理程序繁忙，则仅保留最新未处理的项目。</li>
<li>较旧的项目将被丢弃，因此你无需处理过时的更新。</li>
</ul>


<p>注意：conflate() 不会停止当前工作；它只是在下次读取时跳过旧值。</p>

<h2>4. 使用 collectLatest { } 停止旧工作</h2>

<p>要进一步操作并在新数据进入时取消任何正在进行的工作，请使用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">flow</span> <span class="p">{</span> <span class="err">…</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">.</span><span class="n">collectLatest</span> <span class="p">{</span> <span class="n">value</span> <span class="p">-&gt;</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Start $value&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">delay</span><span class="p">(</span><span class="m">300</span><span class="p">)</span>    <span class="c1">// 可能会被切断</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Done $value&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>每次发出（emit）新的数据时，处理前一个值的块都会立即被丢弃。</li>
<li>只有当发送方的发送速度持续超出你的处理能力时，你才需要完成最后一个值的工作。</li>
</ul>


<p>这非常适合边输入边搜索的情况，在这种情况下，你希望在用户再次输入时立即丢弃旧请求。</p>

<h2>5. 选择合适的工具</h2>

<h3>普通 collect</h3>

<ul>
<li>功能：发送方和处理方互相等待，一个接一个</li>
<li>何时选择它：你必须按顺序处理每个项目

<h3>.buffer(n)</h3></li>
<li>功能：大小为 n 的小队列；不丢弃任何项目</li>
<li>何时选择它：你需要少量缓冲，但仍要处理所有项目

<h3>.conflate()</h3></li>
<li>功能：如果处理方繁忙，则仅保留最新项目</li>
<li>何时选择它：你需要最新数据，但仍要完成当前工作

<h3>collectLatest { }</h3></li>
<li>功能：新数据到达后立即取消所有正在进行的工作</li>
<li>何时选择它：只考虑最新的结果；立即放下其他一切

<h2>6. 总结</h2></li>
<li>回压机制可防止快速数据流过载慢速处理器。</li>
<li>默认模式没有队列：安全但速度可能较慢。</li>
<li>buffer() 函数添加了一个小队列：更灵活，不会丢包。</li>
<li>conflate() 函数跳过旧值：始终保持最新，但让当前工作完成。</li>
<li>collectLatest { } 函数停止旧工作：仅完成最新项。</li>
</ul>


<p>下次你的 Flow 感觉太快或太慢时，请问自己：</p>

<ol>
<li>我需要处理每个值吗？</li>
<li>小型队列有帮助吗？</li>
<li>只有最新数据才重要吗？</li>
<li>当新数据到达时，我应该取消旧工作吗？</li>
</ol>


<p>选择最合适的简单选项，Kotlin Flow 会处理余下的事情。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Kotlin ViewModel中正确处理相同的UI组件交互]]></title>
    <link href="https://alexhilton.github.io/blog/2025/07/01/handling-ui-action/"/>
    <updated>2025-07-01T22:34:20+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/07/01/handling-ui-action</id>
    <content type="html"><![CDATA[<p>本文译自「Handling UI Actions the Right Way in Kotlin ViewModels」，原文链接<a href="https://proandroiddev.com/handling-ui-actions-the-right-way-in-kotlin-viewmodels-119a06bb43ef">https://proandroiddev.com/handling-ui-actions-the-right-way-in-kotlin-viewmodels-119a06bb43ef</a>，由Vaibhav Jaiswal发布于2025年4月16日。</p>

<p><a href="https://alexhilton.github.io/blog/2025/07/01/handling-ui-action/"><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*MLROq8NAKOSnutBMj3WivQ.png" title="auto auto" ></a></p>

<!-- more -->


<h2>缘起</h2>

<p>作为Android开发者，我们经常会遇到需要在多个ViewModel中实现相同或者非常类似UI功能的情况。</p>

<p>例如，我们有多个页面，它们具有类似的功能，例如显示帖子、撰写评论或处理用户交互。</p>

<p>在每个ViewModel中分别处理这些UI交互很快就会变得混乱，导致大量的代码重复。随着应用规模的扩大和页面数量的增加，这个问题会变得更加棘手，导致代码库难以维护，并带来可扩展性问题。</p>

<p>对于这种代码重复问题，我们Android开发者常用的几种常见解决方案包括：</p>

<ul>
<li>额外的辅助类方法</li>
<li>“继承”或“使用委托的组合”方法</li>
</ul>


<p>在以下章节中，我们将详细探讨这些解决方案，了解每种方法如何解决代码重复问题，并重点介绍每种方法的局限性。然后，我们将深入探讨我的解决方案，它基于这些想法，并解决了它们的局限性，从而实现了更高效的UI交互管理。</p>

<blockquote><p>这个解决方案我已经在<a href="https://medial.app/"> Medial 的应用</a>（链接 <a href="https://medial.app/%EF%BC%89%E4%BB%A3%E7%A0%81%E5%BA%93%E4%B8%AD%E4%BD%BF%E7%94%A8%E8%BF%87%E4%BA%86%E2%80%94%E2%80%94%E5%B0%86">https://medial.app/%EF%BC%89%E4%BB%A3%E7%A0%81%E5%BA%93%E4%B8%AD%E4%BD%BF%E7%94%A8%E8%BF%87%E4%BA%86%E2%80%94%E2%80%94%E5%B0%86</a> UI交互处理代码变成了近乎即插即用的体验。</p></blockquote>

<p>我的解决方案根本不建议使用 BaseViewModel，也不基于 BaseViewModel。BaseViewModel 只是一个例子，用来说明我们可以使用从任何其他类/接口继承的功能，这些类/接口可以是 BaseViewModel、ViewModel、Decompose 的 ComponentContext 或其他任何东西。</p>

<h2>⚡️ TL;DR: 处理ViewModel中的共享UI交互</h2>

<p>当在多个页面上显示相同的UI组件时，在每个ViewModel中处理它们的交互会导致重复和逻辑混乱。我们探索了三种方法来解决这个问题：</p>

<ol>
<li>辅助类方法</li>
<li>➖ 简单，但无法覆写任何行为</li>
<li>➖ 并非ViewModel的直接功能</li>
<li>通过 Kotlin 委托进行组合</li>
<li>✅ 更好的设计，支持覆写行为。</li>
<li>➖ 无法访问viewModelScope或其他ViewModel功能。</li>
<li>➖ 无法从任何其他继承类访问任何内容。</li>
<li>💡 我的解决方案 — 使用带有默认函数的接口</li>
<li>✅ 简洁、可复用，支持覆写（Override）行为。</li>
<li>✅ 完全访问ViewModel功能或任何其他继承类的功能。</li>
<li>✅ 只需从接口实现即可轻松插入任何 ViewModel</li>
</ol>


<p>本博客中的所有解决方案均在<a href="https://github.com/Vaibhav2002/Ui-Intreraction-Handler-Sample">此示例项目</a>（链接 <a href="https://github.com/Vaibhav2002/Ui-Intreraction-Handler-Sample%EF%BC%89%E4%B8%AD%E5%AE%9E%E7%8E%B0%EF%BC%9A">https://github.com/Vaibhav2002/Ui-Intreraction-Handler-Sample%EF%BC%89%E4%B8%AD%E5%AE%9E%E7%8E%B0%EF%BC%9A</a></p>

<h2>🏗️ 设置</h2>

<p>假设我们有一个后置UI 元素，它有一些UI 交互，并像 MVI 建议的那样，在一个密封的界面中呈现。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">sealed</span> <span class="n">interface</span> <span class="n">PostAction</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">Clicked</span><span class="p">(</span><span class="k">val</span> <span class="py">id</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">:</span> <span class="n">PostAction</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">LikeClicked</span><span class="p">(</span><span class="k">val</span> <span class="py">id</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">:</span> <span class="n">PostAction</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">ShareClicked</span><span class="p">(</span><span class="k">val</span> <span class="py">id</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">:</span> <span class="n">PostAction</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们还有一个 BaseViewModel 类，用于保存每个ViewModel所需的通用功能</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">abstract</span> <span class="k">class</span> <span class="nc">BaseViewModel</span> <span class="p">:</span> <span class="n">ViewModel</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="py">showShackBar</span> <span class="k">by</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">showBottomSheet</span> <span class="k">by</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">navigate</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 实现</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">showSnackbar</span><span class="p">(</span><span class="n">message</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">showSnackBar</span> <span class="p">=</span> <span class="n">message</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>额外的辅助类方法</h3>

<p>在这种方法中，我们创建一个单独的辅助类来封装UI交互的处理。我们将这个类作为ViewModel的一个属性。</p>

<p>首先，我们定义一个辅助类 PostActionHandler 来处理交互。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">class</span> <span class="nc">PostActionHandler</span><span class="p">(</span><span class="k">private</span> <span class="k">val</span> <span class="py">viewModel</span><span class="p">:</span> <span class="n">BaseViewModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">handleAction</span><span class="p">(</span><span class="n">action</span><span class="p">:</span> <span class="n">PostAction</span><span class="p">)</span> <span class="p">=</span> <span class="k">when</span> <span class="p">(</span><span class="n">action</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">PostAction</span><span class="p">.</span><span class="n">Clicked</span> <span class="p">-&gt;</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">navigate</span><span class="p">()</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">PostAction</span><span class="p">.</span><span class="n">LikeClicked</span> <span class="p">-&gt;</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">showSnackBar</span><span class="p">(</span><span class="s">&quot;Liked&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">PostAction</span><span class="p">.</span><span class="n">ShareClicked</span> <span class="p">-&gt;</span> <span class="p">{</span> <span class="cm">/* 实现 */</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在，在 PostScreenViewModel 中我们创建一个 PostActionHandler 实例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">class</span> <span class="nc">PostScreenViewModel</span> <span class="p">:</span> <span class="n">BaseViewModel</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">actionHandler</span> <span class="p">=</span> <span class="n">PostActionHandler</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">PostScreen</span><span class="p">(</span><span class="n">viewModel</span><span class="p">:</span> <span class="n">PostScreenViewModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">PostItem</span><span class="p">(</span><span class="n">onAction</span> <span class="p">=</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">actionHandler</span><span class="o">::</span><span class="n">handleAction</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">PostItem</span><span class="p">(</span><span class="n">onAction</span><span class="p">:</span> <span class="p">(</span><span class="n">PostAction</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>虽然这种方法确实解决了跨多个ViewModel重复代码的问题，但它也存在一些主要缺点，这些缺点包括：</p>

<ul>
<li>🚫 自定义功能有限：由于 PostActionHandler 是一个封装类，我们无法覆写任何行为。</li>
<li>🚫 通过属性访问：我们不是将功能添加到ViewModel本身，而是将其作为ViewModel的一个属性添加。</li>
</ul>


<p><strong>无法覆写（Override）行为是这种方法不建议用于UI交互处理的主要原因。</strong></p>

<h2>🧬 使用 Kotlin 委托进行组合（优雅但受限的解决方案）</h2>

<p>这是互联网上解决这个问题的标准方法，也是最受推荐的方法。该解决方案基于继承，但不是继承自某个类，这样就无法再扩展任何类。我们利用 Kotlin 委托将实现委托给另一个类，这样就无需扩展某个类，也无需再终止继承。</p>

<p>以下是我们实现该解决方案的方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">interface</span> <span class="n">PostActionHandler</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">handleAction</span><span class="p">(</span><span class="n">action</span><span class="p">:</span> <span class="n">PostAction</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">PostActionHandlerImpl</span> <span class="p">:</span> <span class="n">PostActionHandler</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">handleAction</span><span class="p">(</span><span class="n">action</span><span class="p">:</span> <span class="n">PostAction</span><span class="p">)</span> <span class="p">=</span> <span class="k">when</span> <span class="p">(</span><span class="n">action</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">PostAction</span><span class="p">.</span><span class="n">Clicked</span> <span class="p">-&gt;</span> <span class="n">handlePostClick</span><span class="p">(</span><span class="n">action</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">PostAction</span><span class="p">.</span><span class="n">LikeClicked</span> <span class="p">-&gt;</span> <span class="n">handleLikeClick</span><span class="p">(</span><span class="n">action</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">PostAction</span><span class="p">.</span><span class="n">ShareClicked</span> <span class="p">-&gt;</span> <span class="n">handleShareClick</span><span class="p">(</span><span class="n">action</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">fun</span> <span class="nf">handlePostClick</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">fun</span> <span class="nf">handleLikeClick</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">fun</span> <span class="nf">handleShareClick</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这就是我们的使用方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">class</span> <span class="nc">PostViewModel</span> <span class="p">:</span> <span class="n">BaseViewModel</span><span class="p">(),</span> <span class="n">PostActionHandler</span> <span class="k">by</span> <span class="n">PostActionHandlerImpl</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">PostScreen</span><span class="p">(</span><span class="n">viewModel</span><span class="p">:</span> <span class="n">PostViewModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">PostItem</span><span class="p">(</span><span class="n">onAction</span> <span class="p">=</span> <span class="n">viewModel</span><span class="o">::</span><span class="n">handleAction</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">PostItem</span><span class="p">(</span><span class="n">onAction</span><span class="p">:</span> <span class="p">(</span><span class="n">PostAction</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种方法解决了额外辅助类方法中存在的所有问题。</p>

<ul>
<li>✅ 覆写行为：通过使用接口和委托，我们可以轻松地覆写任何行为。</li>
<li>✅ 更简洁的设计：功能直接成为ViewModel的一部分，允许我们像调用原生ViewModel方法一样调用这些函数。</li>
</ul>


<p>然而，这种方法有一个主要缺点，使其在处理UI交互和UI逻辑方面不够完善。</p>

<h3>访问从其他类继承的功能</h3>

<p>此模式的一个主要挑战是我们无法访问从其他类继承的功能，因为我们无法传递引用。</p>

<p>让我们看看这个限制带来了哪些挑战：</p>

<ul>
<li>无法访问ViewModel功能：我们无法从实现类访问任何ViewModel功能。这是因为我们无法在实现类中传递当前类的引用。</li>
<li>无法使用 viewModelScope：此限制带来的一个主要警告是，我们无法使用 viewModelScope，因此无法直接启动协程。我们必须在 viewModel 中创建包装函数，这会破坏可重用性，因为现在可组合函数会调用我们的ViewModel函数。</li>
</ul>


<p>当我们尝试将其作为构造函数参数传递时，Android Studio 会抛出一个错误：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*xcJAyapM8023-hqu06vwUw.png" alt="Kotlin Compiler showing error when passing “this”" /></p>

<h2>🧩 我的解决方案：使用接口默认函数进行组合</h2>

<p>在我自己实现使用委托的 Composition 方案时，我遇到了一个难题：如何传递当前ViewModel的引用来访问viewModelScope 和我的 BaseViewModel 功能。后来我想起了 Kotlin 接口中的默认函数，于是尝试了这个方案，完美地解决了这个问题。</p>

<p>通过这个方案，我可以：</p>

<ul>
<li>💡 支持功能重写</li>
<li>🔗 完全访问我的BaseViewModel和ViewModel 的功能，例如viewModelScope 等，或任何其他类的功能。</li>
<li>❌ 无需单独的实现类</li>
</ul>


<blockquote><p>在我们<a href="https://medial.app/"> Medial 的应用</a>（链接 <a href="https://medial.app/%EF%BC%89%E7%94%9F%E4%BA%A7%E4%BB%A3%E7%A0%81%E4%B8%AD%EF%BC%8C%E6%88%91%E9%9B%86%E6%88%90%E4%BA%86%E8%BF%99%E4%B8%AA%E6%96%B9%E6%A1%88%EF%BC%8C%E4%BB%A5%E7%AE%80%E5%8C%96ViewModel%E5%A4%84%E7%90%86UI%E4%BA%A4%E4%BA%92%E7%9A%84%E6%96%B9%E5%BC%8F%E3%80%82%E7%BB%93%E6%9E%9C%E5%A6%82%E4%BD%95%EF%BC%9F%E6%AF%8F%E4%B8%AA%E6%96%B0%E9%A1%B5%E9%9D%A2%E5%8F%AA%E9%9C%80%E5%AE%9E%E7%8E%B0%E8%BF%99%E4%B8%AA%E6%8E%A5%E5%8F%A3%EF%BC%8C%E7%84%B6%E5%90%8E%EF%BC%8C%E5%AE%83%E5%B0%B1%E5%B9%B2%E5%87%80%E5%88%A9%E8%90%BD%E5%9C%B0%E8%8E%B7%E5%BE%97%E4%BA%86%E5%8A%9F%E8%83%BD%E3%80%82">https://medial.app/%EF%BC%89%E7%94%9F%E4%BA%A7%E4%BB%A3%E7%A0%81%E4%B8%AD%EF%BC%8C%E6%88%91%E9%9B%86%E6%88%90%E4%BA%86%E8%BF%99%E4%B8%AA%E6%96%B9%E6%A1%88%EF%BC%8C%E4%BB%A5%E7%AE%80%E5%8C%96ViewModel%E5%A4%84%E7%90%86UI%E4%BA%A4%E4%BA%92%E7%9A%84%E6%96%B9%E5%BC%8F%E3%80%82%E7%BB%93%E6%9E%9C%E5%A6%82%E4%BD%95%EF%BC%9F%E6%AF%8F%E4%B8%AA%E6%96%B0%E9%A1%B5%E9%9D%A2%E5%8F%AA%E9%9C%80%E5%AE%9E%E7%8E%B0%E8%BF%99%E4%B8%AA%E6%8E%A5%E5%8F%A3%EF%BC%8C%E7%84%B6%E5%90%8E%EF%BC%8C%E5%AE%83%E5%B0%B1%E5%B9%B2%E5%87%80%E5%88%A9%E8%90%BD%E5%9C%B0%E8%8E%B7%E5%BE%97%E4%BA%86%E5%8A%9F%E8%83%BD%E3%80%82</a></p></blockquote>

<p>让我们来探索一下这个方案是如何解决我们的问题的。</p>

<h3>设计 ActionHandler 接口</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">interface</span> <span class="n">PostActionHandler</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">viewModel</span><span class="p">:</span> <span class="n">BaseViewModel</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">handleAction</span><span class="p">(</span><span class="n">action</span><span class="p">:</span> <span class="n">PostAction</span><span class="p">)</span> <span class="p">=</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">viewModelScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">when</span> <span class="p">(</span><span class="n">action</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">is</span> <span class="n">PostAction</span><span class="p">.</span><span class="n">Clicked</span> <span class="p">-&gt;</span> <span class="n">handlePostClick</span><span class="p">(</span><span class="n">action</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>            <span class="k">is</span> <span class="n">PostAction</span><span class="p">.</span><span class="n">LikeClicked</span> <span class="p">-&gt;</span> <span class="n">handleLikeClick</span><span class="p">(</span><span class="n">action</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>            <span class="k">is</span> <span class="n">PostAction</span><span class="p">.</span><span class="n">ShareClicked</span> <span class="p">-&gt;</span> <span class="n">handleShareClick</span><span class="p">(</span><span class="n">action</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">handlePostClick</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">viewModel</span><span class="p">.</span><span class="n">navigate</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">handleLikeClick</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">viewModel</span><span class="p">.</span><span class="n">showToast</span><span class="p">(</span><span class="s">&quot;Liked&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">handleShareClick</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 实现</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>让我们的ViewModel实现这个接口</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">class</span> <span class="nc">PostViewModel</span> <span class="p">:</span> <span class="n">BaseViewModel</span><span class="p">(),</span> <span class="n">PostActionHandler</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 传入当前的baseViewModel</span>
</span><span class='line'>    <span class="k">override</span> <span class="n">valViewModel</span><span class="p">=</span> <span class="k">this</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">handleShareClick</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 添加 override实现</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>这是它在 Composable 中的使用方式</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">PostScreen</span><span class="p">(</span><span class="n">viewModel</span><span class="p">:</span> <span class="n">PostViewModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">PostItem</span><span class="p">(</span><span class="n">onAction</span> <span class="p">=</span> <span class="n">viewModel</span><span class="o">::</span><span class="n">handleAction</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">PostItem</span><span class="p">(</span>
</span><span class='line'>    <span class="n">onAction</span><span class="p">:</span> <span class="p">(</span><span class="n">PostAction</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以，正如你所见，我们只需要定义 viewModel 变量，就大功告成了，现在我们可以使用ViewModel和 BaseViewModel 提供的所有功能了。</p>

<p>请注意，我们是如何解决使用委托进行组合的主要缺点的：</p>

<ul>
<li>通过将 viewModel 引用保留为接口属性，我们可以轻松地在ViewModel中定义它。这使我们能够直接访问 BaseViewModel 或任何其他ViewModel提供的所有功能。</li>
<li>我们简化了 viewModelScope 的使用。现在，启动协程、收集流程以及执行其他任务都变得非常简单，无需任何复杂的变通方法或 hack。这就是此解决方案带来的优雅和简洁之处。</li>
</ul>


<p>这种方法只有一个小缺点，那就是</p>

<ul>
<li>我们必须在ViewModel中定义所有接口属性，这在大多数情况下是可以接受的，因为我们主要会引用 Repository 或 Domain Layer 类，以及一些可变状态（如果有的话）。</li>
</ul>


<p>这个问题比我们在这个解决方案中克服的缺点要小得多，这使得它成为处理任何共享UI交互或任何共享UI业务逻辑的最佳解决方案。</p>

<blockquote><p>嗯，这一部分比前面几部分简单得多。这里没有复杂的问题需要深入研究——只是一个简单的解决方案，它确实做到了它应该做的事情，并解决了我们所有的问题。</p></blockquote>

<h2>🥷🏻 让我们在实际用例中看看这个解决方案的实际应用。</h2>

<p>假设我们有一个主页面，它以列表形式显示各种UI元素，例如包含帖子和新闻等项目的动态。每个元素都包含一组用户交互，例如点赞帖子、分享新闻文章或导航到详情视图。我们的解决方案可以帮助我们高效地处理跨不同ViewModel的这些交互，确保以可扩展的方式处理通用功能。</p>

<h3>为每个UI组件设计UI交互</h3>

<p>然后，我们使用 Kotlin 的 Sealed 接口，像在典型的 MVI 架构中一样设计UI交互：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">sealed</span> <span class="n">interface</span> <span class="n">PostAction</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">Clicked</span><span class="p">(</span><span class="k">val</span> <span class="py">post</span><span class="p">:</span> <span class="n">Post</span><span class="p">)</span> <span class="p">:</span> <span class="n">PostAction</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">LikeClicked</span><span class="p">(</span><span class="k">val</span> <span class="py">post</span><span class="p">:</span> <span class="n">Post</span><span class="p">)</span> <span class="p">:</span> <span class="n">PostAction</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">ShareClicked</span><span class="p">(</span><span class="k">val</span> <span class="py">post</span><span class="p">:</span> <span class="n">Post</span><span class="p">)</span> <span class="p">:</span> <span class="n">PostAction</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">sealed</span> <span class="n">interface</span> <span class="n">NewsAction</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">Clicked</span><span class="p">(</span><span class="k">val</span> <span class="py">news</span><span class="p">:</span> <span class="n">News</span><span class="p">)</span> <span class="p">:</span> <span class="n">NewsAction</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">LikeClicked</span><span class="p">(</span><span class="k">val</span> <span class="py">news</span><span class="p">:</span> <span class="n">News</span><span class="p">)</span> <span class="p">:</span> <span class="n">NewsAction</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">BookmarkClicked</span><span class="p">(</span><span class="k">val</span> <span class="py">news</span><span class="p">:</span> <span class="n">News</span><span class="p">)</span> <span class="p">:</span> <span class="n">NewsAction</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>创建我们的动作处理程序接口</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">interface</span> <span class="n">PostActionHandler</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">viewModel</span><span class="p">:</span> <span class="n">BaseViewModel</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">postRepo</span><span class="p">:</span> <span class="n">PostRepository</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">handleAction</span><span class="p">(</span><span class="n">action</span><span class="p">:</span> <span class="n">PostAction</span><span class="p">)</span> <span class="p">=</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">viewModelScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">when</span> <span class="p">(</span><span class="n">action</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">is</span> <span class="n">PostAction</span><span class="p">.</span><span class="n">Clicked</span> <span class="p">-&gt;</span> <span class="n">handlePostClick</span><span class="p">(</span><span class="n">action</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>          <span class="k">is</span> <span class="n">PostAction</span><span class="p">.</span><span class="n">LikeClicked</span> <span class="p">-&gt;</span> <span class="n">handleLikeClick</span><span class="p">(</span><span class="n">action</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">handlePostClick</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">viewModel</span><span class="p">.</span><span class="n">navigate</span><span class="p">(......)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">handleLikeClick</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">postRepo</span><span class="p">.</span><span class="n">like</span><span class="p">(</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>      <span class="n">viewModel</span><span class="p">.</span><span class="n">showSnackbar</span><span class="p">(</span><span class="s">&quot;Post Liked&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">interface</span> <span class="n">NewsActionHandler</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">viewModel</span><span class="p">:</span> <span class="n">BaseViewModel</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">newsRepo</span><span class="p">:</span> <span class="n">NewsRepository</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">handleAction</span><span class="p">(</span><span class="n">action</span><span class="p">:</span> <span class="n">NewsAction</span><span class="p">)</span> <span class="p">=</span> <span class="k">when</span> <span class="p">(</span><span class="n">action</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">NewsAction</span><span class="p">.</span><span class="n">Clicked</span> <span class="p">-&gt;</span> <span class="n">handleNewsClick</span><span class="p">(</span><span class="n">action</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">NewsAction</span><span class="p">.</span><span class="n">Bookmark</span> <span class="p">-&gt;</span> <span class="n">handleNewsBookmark</span><span class="p">(</span><span class="n">action</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">handleNewsClick</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">viewModel</span><span class="p">.</span><span class="n">navigate</span><span class="p">(.....)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">handleNewsBookmark</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">newsRepo</span><span class="p">.</span><span class="n">bookmark</span><span class="p">(</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>      <span class="n">viewModel</span><span class="p">.</span><span class="n">showSnackBar</span><span class="p">(</span><span class="s">&quot;News Bookmarked&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如上所示，我们为每个数据模型创建了一个 Action Handler 接口。</p>

<p>我们在这里所做的就是遵循上一节所示的接口设计。</p>

<ul>
<li>我们有两个属性，分别是ViewModel和Repository 类。</li>
<li>我们分别创建了处理每个 Action 的函数。当然，这是可选的。我保留这种方式是为了方便覆写任何特定的行为，并且我们为每个 Action 类型分别调用相应的 Action 处理函数。</li>
</ul>


<h3>创建 ViewModel</h3>

<p>让我们构建一个实现这两个接口的 ViewModel，以继承它们的功能。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">class</span> <span class="nc">HomeViewModel</span> <span class="p">:</span> <span class="n">BaseViewModel</span><span class="p">(),</span> <span class="n">PostActionHandler</span><span class="p">,</span> <span class="n">NewsActionHandler</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">val</span> <span class="py">viewModel</span> <span class="p">=</span> <span class="k">this</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">val</span> <span class="py">postRepo</span> <span class="p">=</span> <span class="n">PostRepository</span><span class="p">()</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">val</span> <span class="py">newsRepo</span> <span class="p">=</span> <span class="n">NewsRepository</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">      ViewModel其余代码</span>
</span><span class='line'><span class="cm">    **/</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后，我们在ViewModel中定义必要的属性（ viewModel 、 postRepo 和 newsRepo ），这些属性会被两个接口使用。</p>

<p>这种设计消除了冗余，并保持了代码的简洁性，因为我们只需设置一次属性，只要属性名称相同，两个接口就可以无缝地与其交互。
这种方法保持了ViewModel的中心地位，同时又可以轻松处理不同组件的UI交互和业务逻辑。</p>

<h2>🪝连接一切：将操作连接到 UI</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">HomeScreen</span><span class="p">(</span><span class="n">viewModel</span><span class="p">:</span> <span class="n">HomeViewModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">LazyColumn</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">items</span><span class="p">(</span><span class="n">viewModel</span><span class="p">.</span><span class="n">items</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">when</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">is</span> <span class="n">News</span> <span class="p">-&gt;</span> <span class="n">NewsCard</span><span class="p">(</span><span class="n">it</span><span class="p">,</span> <span class="n">onAction</span> <span class="p">=</span> <span class="n">viewModel</span><span class="o">::</span><span class="n">handleAction</span><span class="p">)</span>
</span><span class='line'>                <span class="k">is</span> <span class="n">Post</span> <span class="p">-&gt;</span> <span class="n">PostCard</span><span class="p">(</span><span class="n">it</span><span class="p">,</span> <span class="n">onAction</span> <span class="p">=</span> <span class="n">viewModel</span><span class="o">::</span><span class="n">handleAction</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">NewsCard</span><span class="p">(</span>
</span><span class='line'>  <span class="n">news</span><span class="p">:</span> <span class="n">News</span><span class="p">,</span>
</span><span class='line'>  <span class="n">onAction</span><span class="p">:</span> <span class="p">(</span><span class="n">NewsAction</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">PostCard</span><span class="p">(</span>
</span><span class='line'>  <span class="n">post</span><span class="p">:</span> <span class="n">Post</span><span class="p">,</span>
</span><span class='line'>  <span class="n">onAction</span><span class="p">:</span> <span class="p">(</span><span class="n">PostAction</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在我们的UI组件中，我们可以直接将这些函数用作ViewModel本身的函数，这样就完成了在 Screen 中添加交互处理的功能。</p>

<ul>
<li>现在，假设我们有另一个只显示新闻的页面（Screen）。我们需要做的就是在ViewModel中实现 NewsActionHandler 接口——就这样，一切就绪。</li>
<li>我们可以无缝地从 BaseViewModel 或ViewModel调用任何函数，从而能够在一个单一的、集中的位置实现完整的端到端功能。如果我们在多个位置显示相同的数据模型，这将非常有利。</li>
</ul>


<h2>📦 整合所有功能</h2>

<p>在这篇博文中，我们探讨了在扩展Android UI（基本上是任何 UI）时最容易被忽视的问题之一，即跨ViewModel的重复UI交互逻辑。我们探索了三种不同的方法来解决这个问题：</p>

<ol>
<li>辅助类 - 一种快速解决方案，但存在严格的限制。</li>
<li>使用委托进行组合——一种更现代的继承驱动解决方案，
但它难以从外部访问功能。</li>
<li>使用默认函数的接口（我的解决方案）——一种实用、优雅且灵活的方法，克服了前两种方法的所有限制。</li>
</ol>


<p>通过利用 Kotlin 的接口默认方法并将ViewModel作为接口内部的属性，我们解锁了完整的可扩展性，并能够从其他继承的类/接口访问扩展功能。</p>

<p>现在，让我们以表格的形式比较一下每个解决方案：</p>

<table>
<thead>
<tr>
<th> 好处                           </th>
<th> 通过辅助类                                       </th>
<th> 使用委托进行组合                             </th>
<th> 带有默认函数的接口 (✅ 最好)         </th>
</tr>
</thead>
<tbody>
<tr>
<td> 🔁 可重用性                                 </td>
<td>  ✅ Yes        </td>
<td>  ✅ Yes         </td>
<td>  ✅ Yes </td>
</tr>
<tr>
<td> 🧠 覆写行为                        </td>
<td> ❌ 不可能          </td>
<td> ✅ 可以，由于继承        </td>
<td> ✅  可以，由于继承           </td>
</tr>
<tr>
<td> 🔗 访问从其他来源继承的功能                 </td>
<td> ❌ 不可以，因为它是一个封装类      </td>
<td> ❌  不可以，因为我们无法传递当前引用       </td>
<td> ✅  可以，因为我们可以将继承类保留为接口属性    </td>
</tr>
<tr>
<td> 🏗️ 跨页面可扩展性                  </td>
<td> ⚠️ 差——当逻辑还涉及视图模型特定功能时会变得困难               </td>
<td> ✅ 更好——可重复使用的逻辑                    </td>
<td> ✅ 最佳——跨页面即插即用            </td>
</tr>
<tr>
<td> ✅ 最佳用例                               </td>
<td> 对于非UI交互封装功能                   </td>
<td> 业务逻辑重用，非UI上下文            </td>
<td> 多个ViewModel中需要的UI交互 </td>
</tr>
</tbody>
</table>


<p>你可以在<a href="https://github.com/Vaibhav2002/Ui-Intreraction-Handler-Sample">专用的 GitHub 代码库</a>（链接：<a href="https://github.com/Vaibhav2002/Ui-Intreraction-Handler-Sample%EF%BC%89%E4%B8%AD%E6%8E%A2%E7%B4%A2%E6%9C%AC%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%90%E5%88%B0%E7%9A%84%E6%89%80%E6%9C%89%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E3%80%82%E6%AC%A2%E8%BF%8E%E9%9A%8F%E6%84%8Fclone%E3%80%81fork%E6%88%96%E8%AF%95%E7%94%A8%E3%80%82">https://github.com/Vaibhav2002/Ui-Intreraction-Handler-Sample%EF%BC%89%E4%B8%AD%E6%8E%A2%E7%B4%A2%E6%9C%AC%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%90%E5%88%B0%E7%9A%84%E6%89%80%E6%9C%89%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E3%80%82%E6%AC%A2%E8%BF%8E%E9%9A%8F%E6%84%8Fclone%E3%80%81fork%E6%88%96%E8%AF%95%E7%94%A8%E3%80%82</a></p>

<h2>✌️ 告别</h2>

<p>总而言之，希望这篇博客能帮助你解锁一些强大的技巧，提升你的Kotlin 和UI处理知识。有了Kotlin 的界面默认函数，你的构建将更加简洁、快速，并兼顾长期可扩展性。</p>

<p>如果你喜欢这篇文章并想随时了解最新动态：</p>

<ul>
<li>查看我的 LinkedIn、GitHub 和 X 个人资料，了解我正在做的事情。</li>
<li>想要更多 Kotlin 的魔法？阅读我之前的博客，了解另一种可以让你的代码库更精简、更智能的技术。</li>
</ul>


<p>感谢你的阅读，希望你喜欢！🚀</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MVI架构：Compose中的响应式状态管理]]></title>
    <link href="https://alexhilton.github.io/blog/2025/06/25/reactive-state-in-compose/"/>
    <updated>2025-06-25T22:32:21+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/06/25/reactive-state-in-compose</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自「Reactive State Management in Compose — MVI Architecture」，原文链接<a href="https://proandroiddev.com/reactive-state-management-in-compose-mvi-architecture-71546c9f1b52">https://proandroiddev.com/reactive-state-management-in-compose-mvi-architecture-71546c9f1b52</a>，由Davies Adedayo AbdulGafar发布于2025年4月22日。</p></blockquote>

<p>译注：原文作者虽然是基于Jetpack Compose来写的，但重点讨论的是应用的MVI架构方式，涉及的都是纯Kotlin语言层面的，以及Compose层面的，并不涉及平台特性，因此完全适用于跨平台的Compose Multiplatform。</p>

<p><a href="https://alexhilton.github.io/blog/2025/06/25/reactive-state-in-compose/"><img src="https://alexhilton.github.io/Users/alexhilton/Downloads/banner_reactive.png" title="auto auto" ></a></p>

<!-- more -->


<h2>MVI是什么鬼</h2>

<h3>MVI架构的基本概念</h3>

<p>MVI（模型-视图-意图）架构为 Android 应用程序中可扩展、稳健且可测试的 UI 状态管理提供了一种结构良好的方法。它强调代码简洁和关注点分离（Separation of Concerns），将应用程序划分为三个主要组件——模型(Model)、视图(View)和意图(Intent)——它们共同构成一个循环：意图 -> 视图模型 -> 模型 -> 视图，从而定义单向数据流（<strong>译注：</strong>这里的意图Intent是架构中的一个逻辑概念，与Android系统中的Intent没有关系）。此架构模式提供的不同角色有助于更轻松地理解和维护 UI 状态。从本质上讲，MVI 不仅仅是一种架构模式，而是一个旨在流畅响应变化的响应式系统。这种响应性是其定义特征之一，也是其最大的优势。</p>

<ul>
<li>单向数据流：指数据以单向流动——从模型流向视图，并以意图的形式返回。这确保了架构的清晰度、可预测性和易维护性。</li>
<li>关注点分离：指模型、视图和意图组件具有不同的角色。模型管理状态，视图处理 UI 渲染，意图捕获并传达用户操作。</li>
<li>不可变性（Immutability）：确保模型的状态一旦设置便保持不变。这保证了可预测性，消除了意外的副作用，并促进了稳定可靠的应用状态。</li>
<li>响应式：当状态发生变化时，UI 会自动更新。</li>
</ul>


<p>该架构分解为三个和谐的组件，它们以响应式流程协同工作：</p>

<ul>
<li>模型 (Model) 是单一事实来源，它是应用程序在任何特定时刻的状态快照。当此状态发生变化时，它会触发整个系统的级联响应式更新。UI 会在状态变化时自动更新，这凸显了这一核心的响应式原则。</li>
<li>视图 (View) 根据当前模型状态以响应式方式渲染用户所见内容。它订阅状态变化并自动进行转换以反映这些变化，而无需任何命令式更新调用。这种响应式渲染正是 MVI 如此强大的原因——视图始终与状态同步。</li>
<li>意图 (Intent) 完善了响应式电路，捕获用户交互并将其反馈回系统以创建新状态。这形成了一个持续的反馈循环：用户操作触发意图，意图产生新状态，新状态触发 UI 更新。</li>
</ul>


<p>当我们说 MVI 具有响应式特性时，我们指的是整个系统都是围绕自动响应变化而构建的。数据发生变化时，UI 无需手动更新，而是会自动反映当前状态。这种响应式特性能够创建一个动态、响应迅速的应用程序，让用户感觉生动活泼。</p>

<h3>MVI架构的典型实现方式</h3>

<p>在原生 Android 开发中，MVI 的大部分实现都放在 ViewModel 类中。以下是实现 MVI 模式的一种简单方法：</p>

<ol>
<li>我们打算建模的 UI 状态将实现为一个不可变的 Kotlin 数据类（data class），其字段保存着我们想要在视图中显示的状态。</li>
<li>StateFlow 是将整个架构绑定在一起的响应式粘合剂。这个观察者对象包装了模型，并将变化通知给视图，以便它反映新的状态。这个响应式管道确保任何状态变化都会自动传播到 UI。</li>
<li>目前，我们的意图可以实现为 ViewModel 中的公共函数。这些函数应该没有返回值，以确保视图只接收来自观察者的状态更新。类似于对象作为编程语言中的一等公民，可以通过引用传递，同样，函数也依赖于方法引用。我们利用这一点将意图传递给使用它的 UI 节点。我们无需编写复杂的类来建模意图，因为那样需要额外实现意图处理程序。</li>
</ol>


<p>以下是在 ViewModel 中实现 MVI 模式的模板。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">class</span> <span class="nc">ScreenViewModel</span><span class="p">()</span> <span class="p">:</span> <span class="n">ViewModel</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">val</span> <span class="py">_uiState</span><span class="p">:</span> <span class="n">MutableStateFlow</span><span class="p">&lt;</span><span class="n">MyModel</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">MutableStateFlow</span><span class="p">(</span><span class="n">MyModel</span><span class="p">(...))</span> <span class="c1">// private observer object</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="py">uiState</span><span class="p">:</span> <span class="n">StateFlow</span><span class="p">&lt;</span><span class="n">MyModel</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">_uiState</span> <span class="c1">// observer object exposed as an immutable instance</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">fun</span> <span class="nf">doUpdateOnState</span><span class="p">(...)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span> <span class="c1">// public function serves as an intent</span>
</span><span class='line'>  <span class="k">fun</span> <span class="nf">doAnotherUpdate</span><span class="p">(...)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">data</span> <span class="k">class</span> <span class="nc">MyModel</span><span class="p">(...)</span>
</span></code></pre></td></tr></table></div></figure>


<p>新状态在 ViewModel 中生成，然后由观察 uiState 的视图使用。请注意，Intent 是如何作为触发状态更改的回调传递到可组合项页面的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'> <span class="k">fun</span> <span class="nf">MyScreen</span><span class="p">(</span><span class="n">viewModel</span><span class="p">:</span> <span class="n">ScreenViewModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">val</span> <span class="py">uiState</span><span class="p">:</span> <span class="n">MyModel</span> <span class="p">=</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">uiState</span><span class="p">.</span><span class="n">collectAsStateWithLifeCycle</span><span class="p">()</span> <span class="c1">// consumes the state produced in the viewModel</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">MyScreenContent</span><span class="p">(</span>
</span><span class='line'>     <span class="n">uiState</span> <span class="p">=</span> <span class="n">uiState</span><span class="p">,</span>
</span><span class='line'>     <span class="n">doUpdate</span> <span class="p">=</span> <span class="n">viewModel</span><span class="o">::</span><span class="n">doUpdateOnState</span><span class="p">,</span> <span class="c1">// intent to do update</span>
</span><span class='line'>     <span class="n">doAnotherUpdate</span> <span class="p">=</span> <span class="n">viewModel</span><span class="o">::</span><span class="n">doAnotherUpdate</span> <span class="c1">// intent to do another update</span>
</span><span class='line'>   <span class="p">)</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种反应模式通过 Kotlin 的 StateFlow 实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">private</span> <span class="k">val</span> <span class="py">_uiState</span><span class="p">:</span> <span class="n">MutableStateFlow</span><span class="p">&lt;</span><span class="n">MyModel</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">MutableStateFlow</span><span class="p">(</span><span class="n">MyModel</span><span class="p">(...))</span>
</span><span class='line'><span class="k">val</span> <span class="py">uiState</span><span class="p">:</span> <span class="n">StateFlow</span><span class="p">&lt;</span><span class="n">MyModel</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">_uiState</span>
</span></code></pre></td></tr></table></div></figure>


<p>在 UI 方面，这种反应性通过收集操作来表达，该操作消耗从 viewModel 生成的新状态。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">uiState</span> <span class="p">=</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">uiState</span><span class="p">.</span><span class="n">collectAsStateWithLifeCycle</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>这行代码建立了一个响应式连接，每当状态发生变化时都会自动刷新 UI。无需手动刷新调用或复杂的更新逻辑——系统本身就是响应式的。</p>

<h2>案例研究</h2>

<p>让我们采用更实用的方法，实现 MVI 模式来管理页面 状态。下图是一个页面，用户可以从给定的选项中选择所显示问题的答案。</p>

<p><img src="https://miro.medium.com/v2/resize:fit:838/format:webp/0*uwa_-6EYNOhyNuNJ" alt="Case study" /></p>

<p>图片来源 — <a href="https://github.com/android/compose-samples/tree/v2024.01.00/Jetsurvey">Compose 示例 Jetsurvey</a>（译注：链接是<a href="https://github.com/android/compose-samples/tree/v2024.01.00/Jetsurvey%EF%BC%89%E3%80%82%E7%82%B9">https://github.com/android/compose-samples/tree/v2024.01.00/Jetsurvey%EF%BC%89%E3%80%82%E7%82%B9</a><a href="https://github.com/SahDavies/mvi-architecture-sample/">击此</a>（译注：链接是<a href="https://github.com/SahDavies/mvi-architecture-sample/%EF%BC%89%E5%A4%84%E6%9F%A5%E7%9C%8B%E5%AE%8C%E6%95%B4%E5%AE%9E%E7%8E%B0%E3%80%82">https://github.com/SahDavies/mvi-architecture-sample/%EF%BC%89%E5%A4%84%E6%9F%A5%E7%9C%8B%E5%AE%8C%E6%95%B4%E5%AE%9E%E7%8E%B0%E3%80%82</a></p>

<p>页面包含以下状态：</p>

<ol>
<li>问题</li>
<li>选项列表</li>
<li>问题计数</li>
<li>选择指示器</li>
<li>启用/禁用按钮</li>
</ol>


<p>此外，页面还提供以下用户操作的输入：</p>

<ol>
<li>获取下一个问题</li>
<li>获取上一个问题</li>
<li>选择一个选项</li>
<li>关闭/结束操作。这些操作用于将用户的意图传达给应用程序。</li>
</ol>


<p>保存页面状态的模型可以这样实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">data</span> <span class="k">class</span> <span class="nc">UiState</span><span class="p">(</span>
</span><span class='line'>  <span class="k">val</span> <span class="py">questionCount</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span>
</span><span class='line'>  <span class="k">val</span> <span class="py">totalQuestion</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span>
</span><span class='line'>  <span class="k">val</span> <span class="py">question</span><span class="p">:</span> <span class="n">Question</span><span class="p">,</span>
</span><span class='line'>  <span class="k">val</span> <span class="py">userSelection</span><span class="p">:</span> <span class="n">Option</span><span class="p">?</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="py">hasNext</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="n">questionCount</span> <span class="p">&lt;</span> <span class="n">totalQuestion</span>
</span><span class='line'>  <span class="k">val</span> <span class="py">hasPrevious</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="n">questionCount</span> <span class="p">&gt;</span> <span class="m">1</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如前所述，为了简单起见，我们使用公共函数来描述意图，这些函数没有返回值。我们在下面列举了将在 ViewModel 中实现的函数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">fun</span> <span class="nf">next</span><span class="p">()</span> <span class="c1">// 加载下一个问题</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">previous</span><span class="p">()</span> <span class="c1">// 加载上一个问题</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">onOptionSelected</span><span class="p">(</span><span class="n">selection</span><span class="p">:</span> <span class="n">Option</span><span class="p">)</span> <span class="c1">// 激活选中选项的标识</span>
</span></code></pre></td></tr></table></div></figure>


<p>在视图中调用的每个函数都会触发一个新的状态以供视图使用，这样我们的页面就是可预测和可测试的，因为每个用户交互都会产生一个新的不可变状态，可以在测试期间进行比较。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">QuestionScreen</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="n">onDone</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Unit</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">BackHandler</span> <span class="p">{</span> <span class="cm">/* Do nothing */</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">viewModel</span> <span class="p">=</span> <span class="n">QuestionViewModel</span><span class="p">(</span><span class="n">getQuestions</span><span class="p">())</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">uiState</span> <span class="k">by</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">uiState</span><span class="p">.</span><span class="n">collectAsStateWithLifecycle</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">QuestionScreenContent</span><span class="p">(</span>
</span><span class='line'>        <span class="n">uiState</span> <span class="p">=</span> <span class="n">uiState</span><span class="p">,</span>
</span><span class='line'>        <span class="n">onClickNext</span> <span class="p">=</span> <span class="n">viewModel</span><span class="o">::</span><span class="n">next</span><span class="p">,</span>
</span><span class='line'>        <span class="n">onClickPrevious</span> <span class="p">=</span> <span class="n">viewModel</span><span class="o">::</span><span class="n">previous</span><span class="p">,</span>
</span><span class='line'>        <span class="n">onOptionSelected</span> <span class="p">=</span> <span class="n">viewModel</span><span class="o">::</span><span class="n">onOptionSelected</span><span class="p">,</span>
</span><span class='line'>        <span class="n">onDone</span> <span class="p">=</span> <span class="n">onDone</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意：并非所有带有状态的页面组件都能用 MVI 管理。有些组件由单独的状态持有类管理，有些则由可组合组件本身的内部状态管理——例如上图中的进度指示器。不真正处理业务逻辑的状态不应该使用 MVI 管理。</p>

<h2>超越基本响应式</h2>

<p>上述案例研究基于我们的页面需求，使用了一个模型的简单实现。编写 MVI 模式的模型实现有很多方法——根据页面需求进行实现——例如，一个包含加载和错误状态的页面。通常，最简单的方法是使用密封的类层次结构来实现——尽管如此，你也可以选择以不同的方式实现你自己的模型。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// 考虑加载和错误状态的模型</span>
</span><span class='line'><span class="k">internal</span> <span class="n">sealed</span> <span class="k">class</span> <span class="nc">UiState</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">object</span> <span class="nc">Loading</span> <span class="p">:</span> <span class="n">UiState</span><span class="p">()</span>
</span><span class='line'>    <span class="n">@Immutable</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Content</span><span class="p">(</span><span class="k">val</span> <span class="py">myModel</span><span class="p">:</span> <span class="n">UiModel</span><span class="p">)</span> <span class="p">:</span> <span class="n">UiState</span><span class="p">()</span>
</span><span class='line'>    <span class="n">@Immutable</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Error</span><span class="p">(</span><span class="k">val</span> <span class="py">error</span><span class="p">:</span> <span class="n">ErrorUiModel</span><span class="p">):</span> <span class="n">UiState</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>视图使用这种新类型的方式略有不同，如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'> <span class="n">@Composable</span>
</span><span class='line'> <span class="k">fun</span> <span class="nf">MyScreenContent</span><span class="p">(</span><span class="n">uiState</span><span class="p">:</span> <span class="n">UiState</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">when</span><span class="p">(</span><span class="n">uiState</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">is</span> <span class="n">Loading</span> <span class="p">-&gt;</span> <span class="n">LoadingScreen</span><span class="p">()</span>
</span><span class='line'>      <span class="k">is</span> <span class="n">Error</span> <span class="p">-&gt;</span> <span class="n">ErrorScreen</span><span class="p">(</span><span class="n">uiState</span><span class="p">.</span><span class="n">error</span><span class="p">)</span>
</span><span class='line'>      <span class="k">is</span> <span class="n">Content</span> <span class="p">-&gt;</span> <span class="n">ContentScreen</span><span class="p">(</span><span class="n">uiState</span><span class="p">.</span><span class="n">myModel</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">LoadingScreen</span><span class="p">()</span> <span class="p">{</span> <span class="cm">/* implementation block */</span> <span class="p">}</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">ErrorScreen</span><span class="p">(</span><span class="n">error</span><span class="p">:</span> <span class="n">ErrorUiModel</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* implementation block */</span> <span class="p">}</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">ContentScreen</span><span class="p">(</span><span class="n">content</span><span class="p">:</span> <span class="n">UiModel</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* implementation block */</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要注意的是，这种模型是互斥的——它保证三个状态不会同时发生，而是一次发生一个，这有助于防止 UI 状态渲染中常见的错误。</p>

<h3>重写 Intent 实现</h3>

<p>Intent 实现也可以通过添加 Reducer/Handler 来修改，Reducer/Handler 是 ViewModel 中的一个公共函数，它会调用私有实现（辅助函数）来执行操作，并使用 when 表达式分支到相应的操作。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">Class</span> <span class="n">HomeScreenViewModel</span><span class="p">()</span> <span class="p">:</span> <span class="n">ViewModel</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Some class properties</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// our reducer/handler</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">onHomeAction</span><span class="p">(</span><span class="n">action</span><span class="p">:</span> <span class="n">HomeAction</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">when</span> <span class="p">(</span><span class="n">action</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">is</span> <span class="n">HomeAction</span><span class="p">.</span><span class="n">CategorySelected</span> <span class="p">-&gt;</span> <span class="n">onCategorySelected</span><span class="p">(</span><span class="n">action</span><span class="p">.</span><span class="n">category</span><span class="p">)</span>
</span><span class='line'>            <span class="k">is</span> <span class="n">HomeAction</span><span class="p">.</span><span class="n">TopicFollowed</span> <span class="p">-&gt;</span> <span class="n">onTopicFollowed</span><span class="p">(</span><span class="n">action</span><span class="p">.</span><span class="n">topic</span><span class="p">)</span>
</span><span class='line'>            <span class="k">is</span> <span class="n">HomeAction</span><span class="p">.</span><span class="n">HomeCategorySelected</span> <span class="p">-&gt;</span> <span class="n">onHomeCategorySelected</span><span class="p">(</span><span class="n">action</span><span class="p">.</span><span class="n">category</span><span class="p">)</span>
</span><span class='line'>            <span class="k">is</span> <span class="n">HomeAction</span><span class="p">.</span><span class="n">ToggleTopicFollowed</span> <span class="p">-&gt;</span> <span class="n">onToggleTopicFollowed</span><span class="p">(</span><span class="n">action</span><span class="p">.</span><span class="n">topic</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>    <span class="k">private</span> <span class="k">fun</span> <span class="nf">onCategorySelected</span><span class="p">(</span><span class="n">category</span><span class="p">:</span> <span class="n">CategoryInfo</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">fun</span> <span class="nf">onTopicFollowed</span><span class="p">(</span><span class="n">topic</span><span class="p">:</span> <span class="n">TopicInfo</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">fun</span> <span class="nf">onToggleTopicFollowed</span><span class="p">(</span><span class="n">topic</span><span class="p">:</span> <span class="n">TopicInfo</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">fun</span> <span class="nf">onHomeCategorySelected</span><span class="p">(</span><span class="n">category</span><span class="p">:</span> <span class="n">HomeCategory</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>为了使此设置正常工作，我们定义了一个密封的接口层次结构，对应于每个操作，其子类属性用于保存参数，然后这些参数将通过视图中的 reducer/handler 传递给这些操作。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Immutable</span>
</span><span class='line'><span class="n">sealed</span> <span class="n">interface</span> <span class="n">HomeAction</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">CategorySelected</span><span class="p">(</span><span class="k">val</span> <span class="py">category</span><span class="p">:</span> <span class="n">CategoryInfo</span><span class="p">)</span> <span class="p">:</span> <span class="n">HomeAction</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">HomeCategorySelected</span><span class="p">(</span><span class="k">val</span> <span class="py">category</span><span class="p">:</span> <span class="n">HomeCategory</span><span class="p">)</span> <span class="p">:</span> <span class="n">HomeAction</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">TopicFollowed</span><span class="p">(</span><span class="k">val</span> <span class="py">topic</span><span class="p">:</span> <span class="n">TopicInfo</span><span class="p">)</span> <span class="p">:</span> <span class="n">HomeAction</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">ToggleTopicFollowed</span><span class="p">(</span><span class="k">val</span> <span class="py">topic</span><span class="p">:</span> <span class="n">TopicInfo</span><span class="p">)</span> <span class="p">:</span> <span class="n">HomeAction</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>与我们第一次实现 Intent 时需要在视图中使用方法引用传递所有操作不同，这里我们只需要传递 Reducer/Handler。然后，决定需要调用哪个操作的责任就落在了调用者身上。</p>

<p>这是视图中的样子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">HomeScreen</span><span class="p">(</span><span class="n">viewModel</span><span class="p">:</span> <span class="n">HomeScreenViewModel</span><span class="p">,</span> <span class="n">onNavigate</span><span class="p">:</span> <span class="p">(</span><span class="n">String</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">HomeContent</span><span class="p">(</span>
</span><span class='line'>        <span class="n">modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="n">contentPadding</span><span class="p">),</span>
</span><span class='line'>        <span class="n">onHomeAction</span> <span class="p">=</span> <span class="n">viewModel</span><span class="o">::</span><span class="n">onHomeAction</span><span class="p">,</span>
</span><span class='line'>        <span class="n">onNavigate</span> <span class="p">=</span> <span class="n">onNavigate</span><span class="p">,</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>HomeContent 可组合函数现在负责决定调用哪个操作，方法是实例化以下任意对象，然后使用实例化的对象调用 onHomeAction</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">HomeAction</span><span class="p">.</span><span class="n">CategorySelected</span><span class="p">(</span><span class="n">category</span> <span class="p">=</span> <span class="n">CategoryInfo</span><span class="p">())</span>
</span><span class='line'><span class="n">HomeAction</span><span class="p">.</span><span class="n">HomeCategorySelected</span><span class="p">(</span><span class="n">category</span> <span class="p">=</span> <span class="n">HomeCategory</span><span class="p">())</span>
</span><span class='line'><span class="n">HomeAction</span><span class="p">.</span><span class="n">TopicFollowed</span><span class="p">(</span><span class="n">topic</span> <span class="p">=</span> <span class="n">TopicInfo</span><span class="p">())</span>
</span><span class='line'><span class="n">HomeAction</span><span class="p">.</span><span class="n">ToggleTopicFollowed</span><span class="p">(</span><span class="n">topic</span> <span class="p">=</span> <span class="n">TopicInfo</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<p>请参阅下面的实际操作！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">HomeContent</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="n">onHomeAction</span><span class="p">:</span> <span class="p">(</span><span class="n">HomeAction</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span> <span class="c1">// HomeAction是一个密封类型层次</span>
</span><span class='line'>    <span class="n">onNavigate</span><span class="p">:</span> <span class="p">(</span><span class="n">String</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="py">homeCategory</span> <span class="p">=</span> <span class="n">HomeAction</span><span class="p">.</span><span class="n">HomeCategorySelected</span><span class="p">(</span><span class="n">CategoryInfo</span><span class="p">())</span>
</span><span class='line'>  <span class="n">onHomeAction</span><span class="p">(</span><span class="n">homeCategory</span><span class="p">)</span> <span class="c1">// triggers a state change</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>即使增加了复杂度，核心的响应式原则依然保持不变。Reducer 只是提供了一种更有条理的方式来处理意图并生成新的状态，而从状态到 UI 的响应式流程保持不变。</p>

<p>这种实现方式使得迭代构建变得简单——无论我们需要对意图进行什么更改（无论是添加新的意图还是删除现有的意图），都不需要像我们最初的实现那样在很多地方进行重写；我们只需在处理程序中注册新的操作，然后在调用处理程序时根据具体情况实例化不同的对象即可。</p>

<p>总结一下这篇文章，MVI 最优雅的方面在于它如何创建一个完整的响应式链路：</p>

<ol>
<li>模型发出状态</li>
<li>视图使用状态并渲染 UI</li>
<li>用户与视图的交互生成意图</li>
<li>意图被处理以创建新的模型</li>
<li>这个循环以响应式的方式持续进行</li>
</ol>


<p>这种不间断的响应式循环确保你的应用程序始终与用户操作和后端数据保持同步。这不仅仅是响应变化——而是创建一个系统，让变化自然地通过预定义的响应式路径进行。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用用例（Use Case）以让Android代码更简洁]]></title>
    <link href="https://alexhilton.github.io/blog/2025/06/16/making-android-code-cleaner-with-use-cases/"/>
    <updated>2025-06-16T22:20:33+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/06/16/making-android-code-cleaner-with-use-cases</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自「Making Android Code Cleaner with Use Cases: A Practical Approach Using Kotlin Coroutines」，原文链接<a href="https://proandroiddev.com/making-android-code-cleaner-with-use-cases-a-practical-approach-using-kotlin-coroutines-2700e724c4fd">https://proandroiddev.com/making-android-code-cleaner-with-use-cases-a-practical-approach-using-kotlin-coroutines-2700e724c4fd</a>，由Siarhei Krupenich发布于2025年4月11日。</p></blockquote>

<p><a href="https://alexhilton.github.io/blog/2025/06/16/making-android-code-cleaner-with-use-cases/"><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/0*eVj9Vuqq31RUWd2y" title="auto auto" ></a></p>

<!-- more -->


<h2>介绍</h2>

<p>之前，我们开发了一个 Android 应用，重点关注了整洁架构 (Clean Architecture)、输入/输出 MVVM 拆分和 Repository 模式。这种方法遵循了 Google Android 团队推荐的最佳实践，使代码库具有可扩展性、可维护性和可测试性。</p>

<p>在本文中，我们将深入探讨另一个重要概念——用例 (Use Case)，并向你介绍它的用法及其背后的背景。采用这种模式将使你的代码更具可读性和可测试性——这是一个巨大的优势。</p>

<h3>使用Interactors带来的问题</h3>

<p>过去，我们经常使用 Interactors 作为层与层之间的中间件组件——例如，Presenter 可以使用 Interactors 与领域层（Domain layer）进行通信。这使我们能够将一些逻辑从 Presenter 中移出，并放入单独的可复用组件中。在当时，这是一种可靠的逻辑拆分解决方案，能够保持代码简洁。</p>

<p>我们来看一个简单的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// Interactor</span>
</span><span class='line'><span class="k">class</span> <span class="nc">UserInteractor</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">var</span> <span class="py">username</span><span class="p">:</span> <span class="n">String</span> <span class="p">=</span> <span class="s">&quot;Guest&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">getUsername</span><span class="p">():</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">username</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">saveUsername</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">username</span> <span class="p">=</span> <span class="n">name</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Presenter</span>
</span><span class='line'><span class="k">class</span> <span class="nc">UserPresenter</span><span class="p">(</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">view</span><span class="p">:</span> <span class="n">UserView</span><span class="p">,</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">interactor</span><span class="p">:</span> <span class="n">UserInteractor</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">loadUsername</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">name</span> <span class="p">=</span> <span class="n">interactor</span><span class="p">.</span><span class="n">getUsername</span><span class="p">()</span>
</span><span class='line'>        <span class="n">view</span><span class="p">.</span><span class="n">showUsername</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">updateUsername</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">interactor</span><span class="p">.</span><span class="n">saveUsername</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>        <span class="n">view</span><span class="p">.</span><span class="n">showSavedMessage</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>随着 Presenter 的增长，逻辑的复杂性也会随之增加——这通常会导致 Interactor 中方法数量的增加。Presenter 越大，Interactor 也就越庞大。最终，我们会得到一坨塞满状态、方法和变量的屎堆，它们都堆挤在一个地方。</p>

<p>显然，这样的代码库维护起来很困难，测试起来也很困难，甚至更难用合适的单元测试来覆盖。最重要的是，这种架构会陷入反模式的境地，违反 <strong>SOLID（尤其是单一职责原则）</strong> 和 <strong>KISS</strong> 等核心原则。</p>

<p>这就是为什么我要强调使用 Interactor 方法时容易遇到的以下坑：</p>

<ul>
<li>一处塞太多东西</li>
</ul>


<p>当一个类处理所有操作——读取、写入、删除——它最终会做太多事情。这会导致测试更加困难，并且很难在不破坏其他功能的情况下进行更改。</p>

<ul>
<li>功能不明确</li>
</ul>


<p>像 LoginUser() 这样的用例会清楚地告诉你发生了什么。但是，如果交互器（interactor）很大，就很难区分它的作用——它是关于用户的、设置的还是其他什么的？</p>

<ul>
<li>无法复用</li>
</ul>


<p>只完成一项工作的用例很容易插入到任何需要的地方。交互器会随着时间的推移而增长，变得过于混乱，无法复用。</p>

<ul>
<li>扩展性差</li>
</ul>


<p>想象一下，有 10 个功能，每个功能都有自己的交互器，并且包含 5 个以上的方法。这需要记住很多东西，也需要管理很多代码。</p>

<ul>
<li>逻辑混乱</li>
</ul>


<p>当所有内容都放在一个文件中时，很容易意外地将不该放在一起的内容放在一起——例如，登录逻辑与个人资料更新逻辑就会混杂在一起。</p>

<h2>用例（Use Case）：从 UML 到 Android</h2>

<p>我们刚才讨论的所有问题都可以通过使用用例（Use Case）方法完全解决或至少部分解决。但在深入探讨在Android上的实现之前，让我们先快速了解一下用例在 UML 术语中的含义。在 UML 中，用例是关于一个明确的意图——它代表一个特定的业务逻辑或功能。</p>

<p>查看下面的示例，了解它通常是如何可视化的：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/0*CK9zG_B9spS8JQ8-" alt="Use Case" /></p>

<p>基本上，我们即将实现的用例遵循与 UML 相同的理念：一个意图，一个用例（One Intent, one Use Case）。这个简单的规则帮助我们解决了之前的所有问题——测试变得更简单，代码更具可扩展性，整体也更易于维护。</p>

<p>现在，让我们使用用例方法改进上面的代码片段：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// Use-Case 1</span>
</span><span class='line'><span class="k">class</span> <span class="nc">GetUserNameUseCase</span><span class="p">(</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">repository</span><span class="p">:</span> <span class="n">UserRepository</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">operator</span> <span class="k">fun</span> <span class="nf">invoke</span><span class="p">():</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">repository</span><span class="p">.</span><span class="n">getUserName</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Use-Case 2</span>
</span><span class='line'><span class="k">class</span> <span class="nc">SaveUsernameUseCase</span><span class="p">(</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">repository</span><span class="p">:</span> <span class="n">UserRepository</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">operator</span> <span class="k">fun</span> <span class="nf">invoke</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">repository</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>因此，我们刚刚将 Interactor 拆分成了两个用例。我建议使用 Invoke 操作函数，这样我们就可以将它们的用例名称视为函数。此外，这种方式测试起来也更加容易。</p>

<p>以下 ViewModel 演示了用例的用法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// ViewModel</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ViewModel</span><span class="p">(</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">getUsername</span><span class="p">:</span> <span class="n">GetUserNameUseCase</span><span class="p">,</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">saveUsername</span><span class="p">:</span> <span class="n">SaveUsernameUseCase</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">userName</span><span class="p">:</span> <span class="n">StateFlow</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">loadUsername</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">userName</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">getUsername</span><span class="p">())</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">updateUsername</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">saveUsername</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>简单的测试可以写如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">@Before</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">useCase</span> <span class="p">=</span> <span class="n">GetUserNameUseCase</span><span class="p">(</span><span class="n">repository</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Test</span>
</span><span class='line'><span class="k">fun</span> <span class="err">`</span><span class="nf">should</span> <span class="k">return</span> <span class="n">username</span> <span class="n">from</span> <span class="n">repository</span><span class="err">`</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>     <span class="n">`when`</span><span class="p">(</span><span class="n">repository</span><span class="p">.</span><span class="n">getUserName</span><span class="p">()).</span><span class="n">thenReturn</span><span class="p">(</span><span class="s">&quot;JohnDoe&quot;</span><span class="p">)</span>
</span><span class='line'>     <span class="k">val</span> <span class="py">result</span> <span class="p">=</span> <span class="n">useCase</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>     <span class="n">assertEquals</span><span class="p">(</span><span class="s">&quot;JohnDoe&quot;</span><span class="p">,</span> <span class="n">result</span><span class="p">)</span>
</span><span class='line'>     <span class="n">verify</span><span class="p">(</span><span class="n">repository</span><span class="p">).</span><span class="n">getUserName</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">@Test</span>
</span><span class='line'><span class="k">fun</span> <span class="err">`</span><span class="nf">should</span> <span class="n">save</span> <span class="n">username</span> <span class="n">to</span> <span class="n">repository</span><span class="err">`</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">testName</span> <span class="p">=</span> <span class="s">&quot;JaneDoe&quot;</span>
</span><span class='line'>    <span class="n">useCase</span><span class="p">(</span><span class="n">testName</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">verify</span><span class="p">(</span><span class="n">repository</span><span class="p">).</span><span class="n">save</span><span class="p">(</span><span class="n">testName</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>如何将其纳入真正的 Repos 应用程序</h2>

<p>我的建议是始终从抽象开始。鉴于用例的性质（通常只有一个公共方法），我建议使用运算符函数（例如，invoke 在这里就很有效）。可以实现以下抽象：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// 模板接口作为所有用例的抽象</span>
</span><span class='line'><span class="n">interface</span> <span class="n">SuspendUseCase</span><span class="p">&lt;</span><span class="k">in</span> <span class="n">T</span><span class="p">,</span> <span class="k">out</span> <span class="n">O</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">suspend</span> <span class="n">operator</span> <span class="k">fun</span> <span class="nf">invoke</span><span class="p">(</span><span class="n">param</span><span class="p">:</span> <span class="n">T</span><span class="p">):</span> <span class="n">O</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>它的名称带有前缀Suspend（译注：这里应该是前缀，原文有错误），表示它处理暂停的结果。这种通用方法允许我们为参数和返回类型定义特定的类型。例如，以下特定的用例接口可以进一步使用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// 特定的用例接口</span>
</span><span class='line'><span class="n">interface</span> <span class="n">GetReposUseCase</span><span class="p">:</span> <span class="n">SuspendUseCase</span><span class="p">&lt;</span><span class="n">Boolean</span><span class="p">,</span> <span class="n">ResultWithFallback</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">DomainRepoEntity</span><span class="p">&gt;&gt;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>根据其名称，它可以用于获取 Repos，并抛出其 Result 包装器。客户端可以以函数式的方式使用它（例如，val repos = getRepos(&hellip;)）。它的实现如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// GetReposUseCase 的简单实现</span>
</span><span class='line'><span class="k">internal</span> <span class="k">class</span> <span class="nc">GetReposUseCaseImpl</span><span class="p">(</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">mapper</span><span class="p">:</span> <span class="n">Mapper</span><span class="p">,</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">repository</span><span class="p">:</span> <span class="n">ReposRepository</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">GetReposUseCase</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="n">suspend</span> <span class="n">operator</span> <span class="k">fun</span> <span class="nf">invoke</span><span class="p">(</span><span class="n">param</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">):</span>
</span><span class='line'>      <span class="n">ResultWithFallback</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">DomainRepoEntity</span><span class="p">&gt;&gt;</span> <span class="p">=</span>
</span><span class='line'>          <span class="n">repository</span><span class="p">.</span><span class="n">getRepos</span><span class="p">(</span><span class="n">param</span><span class="p">).</span><span class="n">map</span><span class="p">(</span><span class="n">mapper</span><span class="o">::</span><span class="n">map</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在，让我们让任务更具挑战性，并在用例结构中添加一个额外的抽象层。我想要实现仅与存储库交互的用例。这些用例将包含存储库的实例作为泛型中的附加参数类型。让我们看一下以下代码片段：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// 模板接口作为所有用例的抽象</span>
</span><span class='line'><span class="n">interface</span> <span class="n">SuspendUseCase</span><span class="p">&lt;</span><span class="k">in</span> <span class="n">T</span><span class="p">,</span> <span class="k">out</span> <span class="n">O</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">execute</span><span class="p">(</span><span class="n">param</span><span class="p">:</span> <span class="n">T</span><span class="p">):</span> <span class="n">O</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我修改了execute方法，使其能够从另一个抽象子类中调用。以下是更新后的代码片段：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// 扩展 SuspendUseCase 接口</span>
</span><span class='line'><span class="n">interface</span> <span class="n">RepositoryUseCase</span><span class="p">&lt;</span><span class="k">in</span> <span class="n">I</span><span class="p">,</span> <span class="k">out</span> <span class="n">O</span><span class="p">,</span> <span class="n">R</span> <span class="p">:</span> <span class="n">Repository</span><span class="p">&gt;</span> <span class="p">:</span>
</span><span class='line'>    <span class="n">SuspendUseCase</span><span class="p">&lt;</span><span class="n">I</span><span class="p">,</span> <span class="n">O</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="py">repository</span><span class="p">:</span> <span class="n">R</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>每个实现类型R的存储库的子类都将遵守该接口（Contract）。最合适的方法是使用抽象类。让我们实现一个抽象类来实现这一点：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// 确保遵守接口的抽象类</span>
</span><span class='line'><span class="k">abstract</span> <span class="k">class</span> <span class="nc">BaseRepositoryUseCase</span><span class="p">&lt;</span><span class="k">in</span> <span class="n">I</span><span class="p">,</span> <span class="k">out</span> <span class="n">O</span><span class="p">,</span> <span class="n">R</span> <span class="p">:</span> <span class="n">Repository</span><span class="p">&gt;(</span><span class="k">override</span> <span class="k">var</span> <span class="py">repository</span><span class="p">:</span> <span class="n">R</span><span class="p">)</span> <span class="p">:</span>
</span><span class='line'>    <span class="n">RepositoryUseCase</span><span class="p">&lt;</span><span class="n">I</span><span class="p">,</span> <span class="n">O</span><span class="p">,</span> <span class="n">R</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">suspend</span> <span class="n">operator</span> <span class="k">fun</span> <span class="nf">invoke</span><span class="p">(</span><span class="n">params</span><span class="p">:</span> <span class="n">I</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span><span class="p">):</span> <span class="n">O</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 这是对 SuspendUseCase 接口的调用</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">execute</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们需要做的就是扩展 BaseRepositoryUseCase ，遵循其泛型接口，提供一个输入类、一个输出类以及一个被覆写的Repo实例。以下实现已经足够：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// 用例的实现</span>
</span><span class='line'><span class="k">class</span> <span class="nc">GetReposUseCase</span><span class="p">(</span><span class="n">repository</span><span class="p">:</span> <span class="n">RepoRepository</span><span class="p">):</span>
</span><span class='line'>    <span class="n">BaseRepositoryUseCase</span><span class="p">&lt;</span><span class="n">Boolean</span><span class="p">,</span><span class="n">ResultWithFallback</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">DomainRepoEntity</span><span class="p">&gt;&gt;,</span> <span class="n">RepoRepository</span><span class="p">&gt;(</span><span class="n">repository</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">execute</span><span class="p">(</span><span class="n">param</span><span class="p">:</span> <span class="n">Boolean</span><span class="p">):</span> <span class="n">ResultWithFallback</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">DomainRepoEntity</span><span class="p">&gt;&gt;</span> <span class="p">=</span>
</span><span class='line'>        <span class="c1">// 使用存储库获取并返回结果，如 repository.getData()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>结论</h2>

<p>因此，我们探索了从零开始使用用例（Use Case）、捕捉客户意图（Client Intent）的最佳方法。我演示了如何以功能性的方式实现和使用它们，使其易于测试和集成。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Android应用中实战Repository模式]]></title>
    <link href="https://alexhilton.github.io/blog/2025/06/13/incoporating-the-repository/"/>
    <updated>2025-06-13T22:57:11+08:00</updated>
    <id>https://alexhilton.github.io/blog/2025/06/13/incoporating-the-repository</id>
    <content type="html"><![CDATA[<blockquote><p>本文译自「Incorporating the Repository Pattern into a Real-World Android」，原文链接<a href="https://medium.com/@siarhei.krupenich/incorporating-the-repository-pattern-into-a-real-world-android-app-739f2fee1460">https://medium.com/@siarhei.krupenich/incorporating-the-repository-pattern-into-a-real-world-android-app-739f2fee1460</a>，由Siarhei Krupenich发布于2025年4月4日。</p></blockquote>

<p><a href="https://alexhilton.github.io/blog/2025/06/13/incoporating-the-repository/"><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*qkmRcr1xl7uFYPUfNyk2rw.png" title="auto auto" ></a></p>

<!-- more -->


<h2>引言</h2>

<p>之前，我们探讨了整洁架构 (Clean Architecture) 中可能存在的问题，这些问题可能会损害 SOLID 原则、增加紧密耦合或使可测试性复杂化。我介绍了一种解决这些问题的解决方案，帮助我们维护更可扩展的代码库并更高效地添加新功能。在上一篇文章中，我还演示了如何将 ViewModel 拆分为两个主要部分——输入流和输出流——以减少紧密耦合并提高 ViewModel 的灵活性。</p>

<p>本文延续了这一思路，通过构建一个示例应用来展示 Android 开发的最佳实践，该应用通过 API 请求获取并显示 Git 仓库列表。我们的目标是将离线模式融入到项目中。实现这一目标最合适的方法是实现 Repository 模式。Repository 模式充当 Facade（如 GoF 设计模式中所述），在网络 API 和本地存储之间进行协调，确保高效的数据访问。</p>

<p>为了充分理解本文中的概念，建议你熟悉协程或 RxJava，尽管这些主题超出了本文的讨论范围。</p>

<h2>存储库方法：离线模式的最佳解决方案</h2>

<p>我们的目标是在应用中实现离线模式，确保即使在没有互联网连接的情况下也能访问数据。应用首次运行时，它会从网络获取数据，将其存储在缓存中，然后使用缓存的数据来最大限度地减少网络使用量并降低流量。</p>

<p>另一个关键方面是提供在需要时手动刷新网络数据的功能。最后，为了帮助用户在连接问题后识别应用何时恢复互联网连接，我们会在缓存数据旁边显示一条错误消息，直到连接恢复。</p>

<p>现在任务已经明确，让我们深入探讨即用型解决方案背后的理论。其核心是，我们需要解决经典的数据同步问题——从网络获取数据，将其存储在本地，并确保访问最新信息。</p>

<p>这意味着我们的应用至少需要两个数据源：一个用于网络 API 通信，另一个用于本地存储访问。根据应用的需求，可能会用到其他数据源，例如 Firebase（内置同步功能）、BLE 数据等等。</p>

<p>为了协调这些数据源（在我们的例子中是网络 API 和本地存储），最直观的设计模式是四人帮 (GoF) 的 Facade 模式。</p>

<p>Facade 模式是一种通过提供统一接口来简化与复杂系统交互的设计模式。在我们的例子中，这意味着我们可以将网络 API 和本地存储封装在一个抽象层之后。</p>

<p>我们新创建的 Facade 将同时保存 API 网络接口和本地存储接口的实例。另一方面，它将公开单一的访问方法，处理诸如强制从网络更新数据、本地存储数据以及管理错误等任务，同时隐藏内部复杂性。</p>

<p>我们来看看下面的图表：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1070/format:webp/0*FF1TQeYdw1F60rOZ" alt="图 1：外观模式" /></p>

<p>该图呈现了一种简单的逻辑：客户端仅与Facade 实例交互以访问数据，而所有底层复杂性都隐藏在其背后。这种方法完全符合我们的需求。</p>

<p>现在，让我们看一下代表该图的以下伪代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// API Network</span>
</span><span class='line'><span class="n">interface</span> <span class="n">Network</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">obtainData</span><span class="p">():</span> <span class="n">Data</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Local Storage</span>
</span><span class='line'><span class="n">interface</span> <span class="n">Storage</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">save</span><span class="p">(</span><span class="n">data</span><span class="p">:</span> <span class="n">Data</span><span class="p">)</span>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">getData</span><span class="p">():</span> <span class="n">Data</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Facade</span>
</span><span class='line'><span class="k">class</span> <span class="nc">DataFacade</span><span class="p">(</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">network</span><span class="p">:</span> <span class="n">Network</span><span class="p">,</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">storage</span><span class="p">:</span> <span class="n">Storage</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">obtainData</span><span class="p">():</span> <span class="n">Data</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">data</span> <span class="p">=</span> <span class="n">network</span><span class="p">.</span><span class="n">obtainData</span><span class="p">()</span>
</span><span class='line'>        <span class="n">storage</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">storage</span><span class="p">.</span><span class="n">getData</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Client</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Client</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>        <span class="n">testScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">data</span> <span class="p">=</span> <span class="n">facade</span><span class="p">.</span><span class="n">obtainData</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个简单的例子演示了这种方法：客户端持有一个 DataFacade 实例，并调用其obtainData() 方法。当然，在实际场景中，obtainData() 方法会包含更复杂的逻辑——处理错误、映射数据、将结果包装到 Result 类中，以及决定是获取新数据还是使用缓存版本。</p>

<p>现在，让我们更进一步，将这个 Facade 转换为 Repository 类。
Repository 模式旨在通过清晰的接口管理数据访问，同时隐藏底层的复杂性。从客户端的角度来看，
没有任何变化——用法保持不变——但在内部，逻辑结构良好且封装完整。</p>

<p>现在，让我们通过下图来查看 Repository 模式的结构：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1070/format:webp/0*_A5f_Tv_9UhUuFqz" alt="图 2：存储库模式" /></p>

<p>上图表明，Repository 模式有效地捕捉了 Facade 模式；然而，“Repository”一词更能体现访问数据的逻辑，
因此我们将使用“Repository”版本。</p>

<p>现在，让我们实现该模式的增强版本：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// Repository Interface</span>
</span><span class='line'><span class="n">interface</span> <span class="n">DataRepository</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">obtainData</span><span class="p">():</span> <span class="n">Data</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Repository</span>
</span><span class='line'><span class="k">class</span> <span class="nc">DataRepositoryImpl</span><span class="p">(</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">network</span><span class="p">:</span> <span class="n">Network</span><span class="p">,</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">storage</span><span class="p">:</span> <span class="n">Storage</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">DataRepository</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">obtainData</span><span class="p">():</span> <span class="n">Data</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">data</span> <span class="p">=</span> <span class="n">network</span><span class="p">.</span><span class="n">obtainData</span><span class="p">()</span>
</span><span class='line'>        <span class="n">storage</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">storage</span><span class="p">.</span><span class="n">getData</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Client</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Client</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">testScope</span><span class="p">.</span><span class="n">launch</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">data</span> <span class="p">=</span> <span class="n">repository</span><span class="p">.</span><span class="n">obtainData</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>存储库模式：优势与劣势</h2>

<h3>存储库的优势</h3>

<ol>
<li>保持井然有序——你的业务逻辑无需处理数据库查询。</li>
<li>易于测试——你可以将真实数据库与模拟数据库交换以进行测试。</li>
<li>面向未来——如果你从 SQLite 切换到 Firebase，只需更新存储库即可。</li>
<li>可重用——应用程序的不同部分可以使用相同的存储库，而无需编写重复的代码。</li>
<li>代码更简洁——它隐藏了复杂的查询，因此其余代码保持简洁。</li>
</ol>


<h3>为什么它可能很繁琐</h3>

<ol>
<li>增加额外代码——如果你的应用程序很小，使用存储库可能会有些过度。</li>
<li>可能会降低速度——更多的层级意味着更多的对象和方法调用。</li>
<li>缓存不是自动的——如果你想避免不必要的数据库调用，则需要付出额外的努力。</li>
<li>可能过于依赖数据模型——如果设计不当，更改数据库结构可能会很麻烦。</li>
<li>并非总是必要——有时，仅使用 DAO 就足够了。</li>
</ol>


<p>Repository 模式非常适合保持简洁性和可扩展性，但它并非总是最简单的选择。如果你的应用规模较小，跳过它可能会更轻松。然而，我们的重点是为快速增长且可扩展的应用提供解决方案，因此我们选择了它。</p>

<p>现在，是时候编写代码并增强 Repo 应用了。</p>

<p>首先，让我们改进 Repository 结构并使其适应应用。由于没有太多细节需要整合，因此最终的图表与之前的版本非常相似：</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1144/format:webp/0*aH3Jd9RK9EI0AA9I" alt="图3：获取Repos的Repository实现" /></p>

<h2>开撸</h2>

<p>接下来，让我们实现 Repository 并将其集成到应用程序中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="c1">// The Repository pattern implementation</span>
</span><span class='line'><span class="k">internal</span> <span class="k">class</span> <span class="nc">ReposRepositoryImpl</span> <span class="n">@Inject</span> <span class="n">constructor</span><span class="p">(</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">reposNetworkApi</span><span class="p">:</span> <span class="n">ReposNetworkApi</span><span class="p">,</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">reposDao</span><span class="p">:</span> <span class="n">ReposDao</span><span class="p">,</span>
</span><span class='line'>    <span class="c1">// mappers may be placed here</span>
</span><span class='line'><span class="p">)</span> <span class="p">:</span> <span class="n">ReposRepository</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">getRepos</span><span class="p">(</span><span class="n">i</span>
</span><span class='line'>        <span class="n">sRefreshing</span><span class="p">:</span> <span class="n">Boolean</span>
</span><span class='line'>    <span class="p">):</span> <span class="n">ResultWithFallback</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Repo</span><span class="p">&gt;&gt;</span> <span class="p">{</span>
</span><span class='line'>         <span class="k">return</span> <span class="n">runCatching</span> <span class="p">{</span>
</span><span class='line'>             <span class="k">val</span> <span class="py">dbRepos</span> <span class="p">=</span> <span class="n">reposDao</span><span class="p">.</span><span class="n">getReposWithRelations</span><span class="p">()</span>
</span><span class='line'>             <span class="k">if</span> <span class="p">(</span><span class="n">isRefreshing</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                 <span class="n">reposNetworkApi</span><span class="p">.</span><span class="n">getRepos</span><span class="p">().</span><span class="n">fold</span><span class="p">({</span> <span class="n">result</span> <span class="p">-&gt;</span>
</span><span class='line'>                     <span class="n">reposDao</span><span class="p">.</span><span class="n">insertReposWithRelations</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</span><span class='line'>                     <span class="n">ResultWithFallback</span><span class="p">.</span><span class="n">Success</span><span class="p">(</span>
</span><span class='line'>                         <span class="n">reposDao</span><span class="p">.</span><span class="n">getReposWithRelations</span><span class="p">()</span>
</span><span class='line'>                     <span class="p">)</span>
</span><span class='line'>                  <span class="p">},</span> <span class="p">{</span> <span class="n">error</span> <span class="p">-&gt;</span>
</span><span class='line'>                     <span class="n">error</span><span class="p">.</span><span class="n">errorToResultWithFallback</span><span class="p">(</span><span class="n">dbRepos</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">})</span>
</span><span class='line'>              <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                  <span class="n">ResultWithFallback</span><span class="p">.</span><span class="n">Success</span><span class="p">(</span><span class="n">dbRepos</span><span class="p">)</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}.</span><span class="n">getOrElse</span> <span class="p">{</span> <span class="n">error</span> <span class="p">-&gt;</span>
</span><span class='line'>              <span class="n">error</span><span class="p">.</span><span class="n">exceptionToResultWithFallback</span><span class="p">(</span>
</span><span class='line'>                  <span class="n">reposDao</span><span class="p">.</span><span class="n">getReposWithRelations</span><span class="p">()</span>
</span><span class='line'>              <span class="p">)</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="n">suspend</span> <span class="k">fun</span> <span class="nf">clearRepos</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">reposDao</span><span class="p">.</span><span class="n">clearRepos</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>该代码片段演示了如何将 Repository 模式集成到应用中。它包含两个方法：一个用于清除数据，另一个用于获取数据。getRepos(isRefreshing: Boolean) 方法包含一个标志，用于强制从网络刷新数据。同时，它也可能从缓存中返回数据（例如，Room DB 用作缓存）。如果发生错误，即使数据已缓存，该方法也会返回一个包含失败信息的响应。</p>

<p>由于我们主要关注的是协程，因此让我们使用 RxJava 重写 getRepos(isRefreshing: Boolean) 方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">override</span> <span class="k">fun</span> <span class="nf">getRepos</span><span class="p">(</span>
</span><span class='line'>    <span class="n">isRefreshing</span><span class="p">:</span> <span class="n">Boolean</span>
</span><span class='line'><span class="p">):</span> <span class="n">Single</span><span class="p">&lt;</span><span class="n">ResultWithFallback</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Repo</span><span class="p">&gt;&gt;&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">if</span> <span class="p">(</span><span class="n">isRefreshing</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">reposNetworkApi</span><span class="p">.</span><span class="n">getRepos</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">flatMap</span> <span class="p">{</span> <span class="n">result</span> <span class="p">-&gt;</span>
</span><span class='line'>                <span class="n">reposDao</span><span class="p">.</span><span class="n">insertReposWithRelations</span><span class="p">(</span><span class="n">networkReposToDbReposMapper</span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="n">result</span><span class="p">))</span>
</span><span class='line'>                <span class="n">reposDao</span><span class="p">.</span><span class="n">getReposWithRelations</span><span class="p">()</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">dbReposToReposMapper</span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">ResultWithFallback</span><span class="p">.</span><span class="n">Success</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="p">.</span><span class="n">onErrorResumeNext</span> <span class="p">{</span> <span class="n">error</span> <span class="p">-&gt;</span>
</span><span class='line'>                <span class="n">reposDao</span><span class="p">.</span><span class="n">getReposWithRelations</span><span class="p">()</span>
</span><span class='line'>                    <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">error</span><span class="p">.</span><span class="n">errorToResultWithFallback</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">reposDao</span><span class="p">.</span><span class="n">getReposWithRelations</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">dbReposToReposMapper</span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>            <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">ResultWithFallback</span><span class="p">.</span><span class="n">Success</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>            <span class="p">.</span><span class="n">onErrorReturn</span> <span class="p">{</span> <span class="n">error</span> <span class="p">-&gt;</span>
</span><span class='line'>                <span class="n">error</span><span class="p">.</span><span class="n">exceptionToResultWithFallback</span><span class="p">(</span><span class="n">emptyList</span><span class="p">())</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>异常处理的扩展可能如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">fun</span> <span class="nf">Throwable</span><span class="p">.</span><span class="n">exceptionToResultWithFallback</span><span class="p">(</span>
</span><span class='line'>        <span class="n">data</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">RepoWithRelations</span><span class="p">&gt;,</span>
</span><span class='line'>    <span class="p">):</span> <span class="n">ResultWithFallback</span><span class="p">.</span><span class="n">Failure</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Repo</span><span class="p">&gt;&gt;</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">isNotEmpty</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">ResultWithFallback</span><span class="p">.</span><span class="n">Failure</span><span class="p">(</span>
</span><span class='line'>            <span class="n">dbReposToReposMapper</span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="n">data</span><span class="p">),</span> <span class="n">RepoError</span><span class="p">.</span><span class="n">Unknown</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">ResultWithFallback</span><span class="p">.</span><span class="n">Failure</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Repo</span><span class="p">&gt;&gt;(</span>
</span><span class='line'>            <span class="n">data</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>            <span class="n">RepoError</span><span class="p">.</span><span class="n">Unknown</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>结果错误处理扩展可以写成如下形式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">fun</span> <span class="nf">Throwable</span><span class="p">.</span><span class="n">errorToResultWithFallback</span><span class="p">(</span>
</span><span class='line'>        <span class="n">localData</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">RepoWithRelations</span><span class="p">&gt;</span>
</span><span class='line'>    <span class="p">):</span> <span class="n">ResultWithFallback</span><span class="p">.</span><span class="n">Failure</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Repo</span><span class="p">&gt;&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">repoError</span> <span class="p">=</span> <span class="k">when</span> <span class="p">(</span><span class="k">this</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">is</span> <span class="n">IOException</span> <span class="p">-&gt;</span> <span class="n">RepoError</span><span class="p">.</span><span class="n">NetworkLost</span>
</span><span class='line'>            <span class="k">is</span> <span class="n">HttpException</span> <span class="p">-&gt;</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">code</span><span class="p">()</span> <span class="p">==</span> <span class="m">401</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">RepoError</span><span class="p">.</span><span class="n">Unauthorized</span>
</span><span class='line'>                <span class="k">else</span> <span class="n">RepoError</span><span class="p">.</span><span class="n">Unknown</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span><span class='line'>            <span class="k">else</span> <span class="p">-&gt;</span> <span class="n">RepoError</span><span class="p">.</span><span class="n">Unknown</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">ResultWithFallback</span><span class="p">.</span><span class="n">Failure</span><span class="p">(</span>
</span><span class='line'>            <span class="n">dbReposToReposMapper</span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="n">localData</span><span class="p">),</span>
</span><span class='line'>            <span class="n">repoError</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>包装的故障数据类：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">sealed</span> <span class="k">class</span> <span class="nc">ResultWithFallback</span><span class="p">&lt;</span><span class="k">out</span> <span class="n">T</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">Success</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">val</span> <span class="py">data</span><span class="p">:</span> <span class="n">T</span><span class="p">)</span> <span class="p">:</span> <span class="n">ResultWithFallback</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="n">data</span> <span class="k">class</span> <span class="nc">Failure</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">val</span> <span class="py">data</span><span class="p">:</span> <span class="n">T</span><span class="p">?,</span> <span class="k">val</span> <span class="py">error</span><span class="p">:</span> <span class="n">RepoError</span><span class="p">)</span> <span class="p">:</span> <span class="n">ResultWithFallback</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>并且转换映射扩展如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="n">inline</span> <span class="k">fun</span> <span class="err">&lt;</span><span class="nf">T</span><span class="p">,</span> <span class="n">R</span><span class="p">&gt;</span> <span class="n">ResultWithFallback</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;.</span><span class="n">map</span><span class="p">(</span><span class="n">transform</span><span class="p">:</span> <span class="p">(</span><span class="n">T</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">R</span><span class="p">):</span> <span class="n">ResultWithFallback</span><span class="p">&lt;</span><span class="n">R</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">when</span> <span class="p">(</span><span class="k">this</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">ResultWithFallback</span><span class="p">.</span><span class="n">Success</span> <span class="p">-&gt;</span> <span class="n">ResultWithFallback</span><span class="p">.</span><span class="n">Success</span><span class="p">(</span><span class="n">transform</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
</span><span class='line'>        <span class="k">is</span> <span class="n">ResultWithFallback</span><span class="p">.</span><span class="n">Failure</span> <span class="p">-&gt;</span> <span class="n">ResultWithFallback</span><span class="p">.</span><span class="n">Failure</span><span class="p">(</span>
</span><span class='line'>            <span class="n">data</span><span class="o">?.</span><span class="n">let</span> <span class="p">{</span> <span class="n">transform</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'>            <span class="n">error</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>结论</h2>

<p>我们已成功将存储库模式(Repository pattern)集成到应用中，事实证明，这是一种维护离线模式的绝佳方法。此模式不仅简化了数据管理，还确保了可扩展性。它是实现数据检索和存储功能的最有效方法之一，随着项目规模的增长，你可以更轻松地管理本地和远程数据源。</p>

<p>你可以通过以下链接探索与本文主题相关的 GitHub 代码库：<a href="https://github.com/sergeykrupenich/TestRepo/tree/repository">https://github.com/sergeykrupenich/TestRepo/tree/repository</a></p>
]]></content>
  </entry>
  
</feed>
