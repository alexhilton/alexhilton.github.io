<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[稀有猿诉]]></title>
  <link href="http://toughcoder.net/atom.xml" rel="self"/>
  <link href="http://toughcoder.net/"/>
  <updated>2022-02-15T23:46:23+08:00</updated>
  <id>http://toughcoder.net/</id>
  <author>
    <name><![CDATA[Alex Hilton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android Camera App开发学习路线]]></title>
    <link href="http://toughcoder.net/blog/2022/02/11/android-camera-app-ramp-up/"/>
    <updated>2022-02-11T20:59:14+08:00</updated>
    <id>http://toughcoder.net/blog/2022/02/11/android-camera-app-ramp-up</id>
    <content type="html"><![CDATA[<p>对于智能手机来说相机是非常重要的一个功能，它是影像的生产者，是新时代社交（图片，视频）内容的基础。后面我们将重点学习 一下安卓平台的Camera app开发。</p>

<p><a href="http://toughcoder.net/blog/2022/02/11/android-camera-app-ramp-up/"><img src="https://www.xda-developers.com/files/2018/09/best-android-camera.png" title="auto auto" ></a></p>

<!-- more -->


<h2><a href="https://developer.android.com/reference/android/hardware/camera2/package-summary">Camera 2 API</a></h2>

<p>学习如何使用新的API，以实例的方式来学习新一套API如何使用，最终成果将会是一个简单的，具有基础功能的Camera App。</p>

<p>有以下文档可供参考：</p>

<ul>
<li><a href="https://developer.android.com/training/camera2">Official training docs</a></li>
<li><a href="https://developer.android.com/training/camera">Camera</a></li>
</ul>


<p>同时谷歌也有一些官方的样例可供参考：</p>

<ul>
<li><a href="https://github.com/googlearchive/android-Camera2Basic">android-Camera2Basic</a></li>
<li><a href="https://github.com/googlearchive/android-Camera2Video">android-Camera2Video</a></li>
<li><a href="https://github.com/googlearchive/android-Camera2Raw">android-Camera2Raw</a></li>
<li><a href="https://github.com/android/camera-samples">Camera Samples Repository</a></li>
</ul>


<p>AOSP源码中的<a href="https://cs.android.com/android/platform/superproject/+/master:packages/apps/Camera2/">Camera2</a>也是值得学习和参考 的。</p>

<h2>Frameworks</h2>

<p>在学习完API如何使用以后，还需要深入学习一下API下面的框架层。正所谓知其然，更要知其所以然，看了Demo以及文档后谁都会有API，要想加深理解，就必须继续深挖。</p>

<p>这部分没有什么捷径，只能去啃<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/hardware/camera2/">AOSP的源码</a>了。</p>

<h2><a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/av/services/camera/libcameraservice/CameraService.cpp?q=cameraservice">CameraService</a></h2>

<p>这是Frameworks层的最后一环，它连接着Java层和HAL层，主要负责camera device的管理，如权限，打开与关闭的管理，在Android M之前并不是独立的进程，是放在media.server一起的，后来独立成为一个单独的系统级别的进程cameraserver，在ServiceManager中的名字是media.camera，可以通过如下命令查看它的状态：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>adb shell dumpsys media.camera</span></code></pre></td></tr></table></div></figure>


<h2><a href="https://developer.android.com/jetpack">Jetpack</a>中的<a href="https://developer.android.com/training/camerax">CameraX</a></h2>

<p>这是谷歌封装的库，用以简化API的调用，加快app开发进度。</p>

<h2>深入了解业务架构与技术栈</h2>

<p><a href="https://source.android.google.cn/devices/camera">AOSP中的文档也值得学习</a></p>

<h2><a href="https://source.codeaurora.org/quic/la/platform/packages/apps/SnapdragonCamera/tree/">SnapdragonCamera</a></h2>

<p>相机是技术栈当中最为复杂的一个，SoC平台是至关重要的，所以Qcom的SnapdragonCamera也是值得深入学习的。</p>

<h2>相机业务知识学习</h2>

<h2>封装</h2>

<p>相机是非常受硬件限制的，不同的SoC平台，不同的OEM厂商，以及不同的Android版本，API以及具体细节差异巨大，这给Camera app开发带来非常大的适配工作，那么可以把Camera app核心的业务封装成一个库，这样可以简化开发。</p>

<h2>架构</h2>

<p>如何架构一个Camera app。</p>

<h2>扩展功能</h2>

<p>除基本的拍照录像功能以外，可以扩展一些功能。</p>

<h2>优秀开源项目</h2>

<h3><a href="https://github.com/react-native-camera/react-native-camera">react-native-camera</a></h3>

<h3><a href="https://github.com/CameraKit/camerakit-android">camerakit-android</a></h3>

<h3><a href="https://github.com/google/cameraview">cameraview</a></h3>

<h3><a href="https://github.com/natario1/CameraView">CameraView</a></h3>

<h3><a href="https://github.com/RedApparat/Fotoapparat">Fotoapparat</a></h3>

<h3><a href="https://github.com/Skykai521/StickerCamera">StickerCamera</a></h3>

<h3><a href="https://github.com/CJT2325/CameraView">CameraView</a></h3>

<h3><a href="https://github.com/CainKernel/CainCamera">CainCamera</a></h3>

<h3><a href="https://github.com/aserbao/AndroidCamera">AndroidCamera</a></h3>

<h3><a href="https://github.com/nekocode/CameraFilter">CameraFilter</a></h3>

<h3><a href="https://github.com/florent37/CameraFragment">CameraFragment</a></h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入学习Java虚拟机知识]]></title>
    <link href="http://toughcoder.net/blog/2022/02/08/study-further-the-java-virtual-machine/"/>
    <updated>2022-02-08T20:33:27+08:00</updated>
    <id>http://toughcoder.net/blog/2022/02/08/study-further-the-java-virtual-machine</id>
    <content type="html"><![CDATA[<p>Java编程语言的真核心是其<a href="https://www.geeksforgeeks.org/jvm-works-jvm-architecture/">虚拟机（Java Virtual Machine or JVM）</a>，JVM是真正的让Java宣言『Write Once，Run Anywhere』变成现实，JVM封装并隔离了不同的OS，JVM有它自己的标准和规范，从而凡是符合JVM的『代码』都可以在JVM上运行。Java编程语言并不是直接运行在JVM上面的，Java语言只是套在JVM上面的一层语言规则。</p>

<p><a href="http://toughcoder.net/blog/2022/02/08/study-further-the-java-virtual-machine/"><img src="https://javatutorial.net/wp-content/uploads/2017/10/write-once-run-anywhere-jvm.png" title="auto auto" ></a></p>

<!-- more -->


<p>准确的说JVM接收的是一套叫做<a href="https://www.javatpoint.com/java-bytecode">字节码（Bytecode）</a>的东西，只要是能把一套语法规则『翻译』成为符合JVM规范的字节码，就可以在JVM上面运行，除了正统的Java之外，<a href="https://scala-lang.org/">Scala</a>，<a href="http://www.groovy-lang.org/">Groovy</a>，以及<a href="https://kotlinlang.org/">Kotlin</a>等等都是这样实现的，它们编译之后得到的就是字节码文件，字节码文件可直接运行在JVM之上。</p>

<p>那么字节码才是Java编程语言的真核心，值得深入研究和学习。前面写过<a href="http://toughcoder.net/blog/2022/01/23/android-reverse-engineering-tricks/">一篇介绍安卓高级逆向方法的文章</a>，里面涉及到一些JVM的高级技术，还需要进一步的深入学习一下，以能更好的理解插件化和热修复的核心原理。</p>

<h2><a href="https://docs.oracle.com/javase/7/docs/api/java/lang/ClassLoader.html">ClassLoader</a></h2>

<p>除了标准Java中的以外，在Android当中的<a href="https://developer.android.com/reference/java/lang/ClassLoader">ClassLoader</a>也要深入学习一下，这个是相当多的逆向技术的基础，基本的原理和流程如委托机制看文章或者文档就可以了。</p>

<ul>
<li><a href="https://www.baeldung.com/java-classloaders">Class Loaders in Java</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/51374915">老大难的 Java ClassLoader 再不理解就老了</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/136083521">深入理解Android ClassLoader</a></li>
<li><a href="http://gityuan.com/2017/03/19/android-classloader/">Android类加载器ClassLoader</a></li>
</ul>


<p>需要重点记住的就是两点核心要点，一是ClassLoader是类的作用域，它是类的沙箱，同一个ClassLoader里面只能有一个类，必须唯一，但不同的ClassLoader对象，可以有同样的类。这里类的意思是全量类名，也即其packageName+ClassName，Fully Qualified Name。第二就是惰性加载机制，也就是说，对于同一个ClassLoader对象，一个类只会加载一次，加载过了，就不会再去loadClass了。</p>

<p>根据这两个核心要点，就理解了各种热修复的原理了，惰性加载机制决定了热生效和冷生效，因为ClassLoader只加载一次，所以Class替换的方式，只能下次启动生效（准确的说是下次需要loadClass时生效）。而替换的方法就是把修复的patch的想办法放在常规的前面，这样就会优先加载要替换的类了。</p>

<p><strong>注意</strong>：Android中并不是官方Java的bytecode，而一种叫做dex的东西，它是在编译时把标准Class文件经过转化再打包到一起形成的，最初安卓的VM叫做Dalvik，所以就把它的字节码命名为dex意即Dalvik Executable，这是dex的由来。虽然目标格式不一样，但是dex与class是可以自由转换的，且dex的生成在编译为标准class之后的，所以字节码的一切工具，对于安卓也都可以用。</p>

<p>Android中的ClassLoader，重点是DexPathList，它里面决定了各个dex的顺序，插件和热修复基本上都是在dex的顺序 上做文章，要么是把新的dex放在最前面，要么是找到原dex，然后替换，这就是核心原理，也是这一套逆向方法的可行之处。</p>

<h2><a href="https://www.oracle.com/technical-resources/articles/java/javareflection.html">反射</a></h2>

<p>也即是运行时修改代码的能力，它是直接去修改JVM中的代码，也即是修改bytecode。纯编译型语言如C/C++是不可能有这种能力的。Java有这种能力是因为JVM的存在，编译只是把源码『翻译』成字节码。</p>

<p><a href="https://www.baeldung.com/java-reflection">Guide to Java Reflection</a></p>

<p>原生东西不好用，还是用三方库来反射<a href="https://github.com/jOOQ/jOOR">jOOR</a>。</p>

<h2><a href="https://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/intro.html">JNI</a></h2>

<p>一些三方的号称可以热修复的工具如exposed和Andfix这些东西，之所以能够实现，是因为JVM本身就开了口子支持JNI，为了能让方法能让JVM找得到，就需要一个method table，而此method table是可以被修改的。
<a href="https://www.baeldung.com/jni">Guide to JNI (Java Native Interface)</a></p>

<p><a href="https://blog.csdn.net/createchance/article/details/53783490">Java Native Interface(JNI)从零开始详细教程</a></p>

<p><a href="https://www.cnblogs.com/DengGao/p/jni.html">java native方法与JNI实现</a></p>

<p><a href="https://www.zhihu.com/question/38509124">JNI本身会降低效率吗？</a></p>

<p>如果JNI接口较多，较复杂，建议用<a href="http://www.swig.org/">SWIG</a>，参见它的<a href="http://www.swig.org/Doc1.3/Java.html#java_overview">说明文档</a>。</p>

<p>Swig有点重了，这个库也相当的好用<a href="https://github.com/spotify/JniHelpers">JniHelpers</a>。</p>

<h2><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/reflection/proxy.html">动态代理</a></h2>

<p>除了官方JDK支持的以接口为基础的动态代理 方式之外，还有其他几种以子类化方式实现动态代理，但它们都是基于ASM的。</p>

<p><a href="https://www.baeldung.com/java-dynamic-proxies">Dynamic Proxies in Java</a></p>

<p><a href="https://www.cnblogs.com/techyc/p/3455950.html">Java的动态代理(dynamic proxy)</a></p>

<p><a href="https://www.cnblogs.com/bryan31/p/15266725.html">动态代理大揭秘，带你彻底弄清楚动态代理！</a></p>

<ul>
<li><a href="https://github.com/cglib/cglib">cglib</a></li>
<li><a href="https://www.javassist.org/">Javassist</a></li>
<li><a href="https://bytebuddy.net/#/">Byte Buddy</a></li>
</ul>


<h2><a href="https://en.wikipedia.org/wiki/Java_code_coverage_tools">代码覆盖率检测</a></h2>

<p><a href="http://cobertura.github.io/cobertura/">Cobertura</a></p>

<p><a href="https://github.com/jacoco/jacoco">JaCoCo</a></p>

<p><a href="https://www.baeldung.com/jacoco">Intro to JaCoCo</a></p>

<h2>Mock</h2>

<p>这是自动化测试以及单元测试必然会用到的利器。</p>

<p><a href="https://site.mockito.org/">Mockito</a></p>

<p><a href="https://easymock.org/">EasyMock</a></p>

<h2><a href="https://asm.ow2.io/">ASM</a></h2>

<p>这是一个神器，专门用来处理字节码的，所有其他的Java底层工具都是基于它来实现的，足可见它的牛逼之处。</p>

<p><a href="https://www.baeldung.com/java-asm">A Guide to Java Bytecode Manipulation with ASM</a></p>

<h2><a href="https://www.tutorialsteacher.com/ioc/dependency-injection">Dependency Injection</a></h2>

<ul>
<li><a href="https://www.vogella.com/tutorials/DependencyInjection/article.html">Using dependency injection in Java</a></li>
<li><a href="https://www.codejava.net/coding/what-is-dependency-injection-with-java-code-example">What is Dependency Injection with Java Code Example</a></li>
<li><a href="https://www.edureka.co/blog/what-is-dependency-injection/">What Is Dependency Injection? – Know How To Implement Dependency Injection</a></li>
</ul>


<h2><a href="https://en.wikipedia.org/wiki/Aspect-oriented_programming">AOP</a></h2>

<ul>
<li><a href="https://mvolkmann.github.io/JavaUserGroup/AOP.pdf">Aspect-Oriented Programming (AOP)in Java</a></li>
<li><a href="https://o7planning.org/10257/java-aspect-oriented-programming-with-aspectj">Java Aspect Oriented Programming with AspectJ (AOP)</a></li>
<li><a href="https://www.javatpoint.com/spring-aop-example">Spring AOP Example</a></li>
<li><a href="https://www.eclipse.org/aspectj/">AspectJ</a></li>
<li><a href="https://github.com/eclipse/org.aspectj">Aspectj source</a></li>
<li><a href="https://www.baeldung.com/aspectj">Intro to AspectJ</a></li>
</ul>


<h2>研究字节码的意义</h2>

<p>所有这些基于字节码的工具和技术存在的意义，是帮助我们如何更好的写出Java代码，而并不是纯粹去做一些逆向工程的事情。比如，效率工具，测试工具，调试工具和动态生成代码的技术等等。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://zhuanlan.zhihu.com/p/94498015">史上最通俗易懂的ASM教程</a></li>
<li><a href="https://www.jianshu.com/p/26e99d39b3fb">Java字节码处理框架ASM设计思想解析</a></li>
<li><a href="https://blog.51cto.com/lsieun/2924583">Java ASM系列一：Core API</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android逆向技术高阶大法]]></title>
    <link href="http://toughcoder.net/blog/2022/01/23/android-reverse-engineering-tricks/"/>
    <updated>2022-01-23T11:39:55+08:00</updated>
    <id>http://toughcoder.net/blog/2022/01/23/android-reverse-engineering-tricks</id>
    <content type="html"><![CDATA[<p>安卓应用是一个客户端，与传统软件类似，需要把软件打包，然后通过某种渠道（应用市场）分发给用户，这是常规的发布方式，它的更新节奏很慢，从你在应用市场上更新后，到用户真正的执行升级，这中间很慢的，而且很多用户根本不会升级新版本，这对于互联网来说是极不友好的。传统的互联网，用户刷新一下网页后，就能看得到更新了，但对于客户端，这行不通，要想实现小时级别的发布和分钟级别的问题修复，正规的发布渠道是做不到的。于是各路大神和专家开始研究客户端的前端化，也就是运用各种技术能让发布，特别是一些问题修复性的小规模发布可以更快的传递到用户手中。</p>

<p><a href="http://toughcoder.net/blog/2022/01/23/android-reverse-engineering-tricks/"><img src="https://images.xiaozhuanlan.com/photo/2017/3709753fdbe5d81e50abb1090511b92a.jpg" title="auto auto" ></a></p>

<!-- more -->


<p>这与正向方法不一样，谷歌或者水果针对 应用市场有明确 的流程的，这是常规发布也即是正向方式。今天我们来聊一聊非正向方法，非常规方式，来实现小模块的发布和热修复。</p>

<h2>核心技术原理</h2>

<p>任何一项技术都离不开编程语言和操作系统上的支持，对于插件化技术来说，最为核心的原理就是Java支持反射，这是一种运行时修改代码的技术，另外就是动态代理，这是插件化可行的根本技术支撑。</p>

<p>说到底，Java仍是一种解释型语言，它的核心是JVM，即也虚拟机，我们所熟悉的Java编程语言，本质上是套在JVM上的一层语法规则，换了一种语言规则也是可行的。就好比Kotlin，Scala和Groovy它们的语法与Java相差很大，但它们编译过后的字节码是完全符合JVM规范的，可以直接运行在JVM之上。</p>

<p>其他的纯解释型语言，如Python和JavaScript，它们在运行时可以动态的加载一段源码，这即是动态化，可以实现真正的插件化，运行时直接加载运行一段代码。Java略变态一些，但它本质上是JVM，而JVM通过反射和动态代理，在一定程度上支持了类似的动态化，就是通过ClassLoader来动态加载一些编译好的Class。</p>

<p>此为插件化的核心原理。</p>

<p>动态代理机制，可以读这几篇文章：</p>

<ul>
<li><a href="https://www.cnblogs.com/bryan31/p/15266725.html">动态代理大揭秘，带你彻底弄清楚动态代理</a></li>
<li><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1264804593397984">动态代理</a></li>
<li><a href="https://www.cnblogs.com/techyc/p/3455950.html">Java的动态代理(dynamic proxy) </a></li>
<li><a href="https://www.cnblogs.com/gonjan-blog/p/6685611.html">java动态代理实现与原理详细分析</a></li>
<li><a href="https://www.cnblogs.com/codingblock/p/6580364.html">小白也能看懂的插件化DroidPlugin原理（一）&ndash; 动态代理</a></li>
</ul>


<h2>Hook大法</h2>

<p>有了核心原理，才有可行的方案。Hook主要研究三方面内容，一是研究ClassLoader，因为不同的dex分属于不同的层级，它们的ClassLoader不一样，反射的第一步就是要能加载到想要的Class，这个要靠找到合适的ClassLoader；二是动态代理机制，hook的核心原理就是用动态代理机制，创建一个Mock对象用以替换掉原来的，所以接口Interface是关键，原系统设计中必须使用大量接口，并且是以标准方式使用的（没有强制向下转型downcast），这样你创建出来的动态代理去替换才是安全的；三就是学习安卓系统核心组件 的流程，以找到最佳的hook地点。</p>

<p>其实，第3条才是对大部分人最为有益的。</p>

<p>具体如何做hook，可以参考以下文章：</p>

<ul>
<li><a href="https://cloud.tencent.com/developer/article/1562137">Android 插件化原理解析——Service的插件化</a></li>
<li><a href="https://weishu.me/2016/03/07/understand-plugin-framework-ams-pms-hook/">Android 插件化原理解析——Hook机制之AMS&amp;PMS</a></li>
<li><a href="https://mp.weixin.qq.com/s/40NTVRw127JcJh_rL5HtwA">探索Android开源框架 - 10. 插件化原理</a></li>
<li><a href="https://www.cnblogs.com/codingblock/p/6642476.html">小白也能看懂的插件化DroidPlugin原理（二）&ndash; 反射机制和Hook入门</a></li>
</ul>


<p>由于安卓版本升级的原因，上面这几个文章都失效了，例子行不通了。但是这几遍对于原理解释的还是相当清楚的。</p>

<p>以下文章对于新版本也是适用的。</p>

<ul>
<li><a href="https://www.codenong.com/js57705d332677/">基于Android9.0的Hook Activity 的启动（插件化）</a></li>
<li><a href="https://www.jianshu.com/p/eb4121b037e2">Android Hook Activity 的几种姿势</a></li>
<li><a href="https://juejin.cn/post/6844903769650511879">Activity插件化原理第一种方案：Hook Instrumentation</a></li>
<li><a href="https://juejin.cn/post/6844903773823827975">Activity插件化原理第二种方案：Hook IActivityManager</a></li>
<li><a href="https://blog.csdn.net/qq_24675479/article/details/79334567">拦截Activity的启动流程绕过AndroidManifest检测</a></li>
</ul>


<p>需要注意的是，hook这件事情，最基础的技术很简单，就通过反射来替换对象，把系统中的对象替换为仿造的，仿造有三种方式，一是直接创建，这需要类是比较简单的情况，并不需要开放出来，通过反射一切皆可创建；二是继续，这个对于复杂对象也能仿造，如Instrumentation，但是需要类是开放出来的；三是接口，通过动态代理 创建仿造对象（也即代理 ）。核心技术就这些。其他的，全是对于系统代码的理解，找到可行的关键点来进行hook。</p>

<p>另外就是，谷歌对逆向方法限制越来越严了，反射系统的东西，会有限制，有时仅是打印日志，但指不定哪天就不给反射了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Accessing hidden field Landroid/app/ActivityManager;-&gt;IActivityManagerSingleton:Landroid/util/Singleton; (light greylist, reflection)</span></code></pre></td></tr></table></div></figure>


<h2>插件化原理</h2>

<p>学习一门技术最好的方式就是去研读优秀的开源库的源码，对于插件化，现在有很多比较成熟 的开源框架存在了，可以挑几个比较有代表性的来研究 一下。</p>

<h3><a href="http://droidpluginteam.github.io/DroidPlugin/">DroidPlugin</a></h3>

<p>这个基于动态代理创建的插件方法，较为流行，里面有大量的hook技术，网络上也有很多解析此框架的<a href="https://blog.csdn.net/zhejiang9/article/details/89407283">文章</a>，可以帮助理解。</p>

<p>它用了大量的hook，优点就是插件本身可以是正常的apk，无太多的限制，就用常规的app开发方式开发就好，这是它的最大优势，因为对插件无限制，所以框架本身就需要做大量的hook，是学习hook技法的良好例子。</p>

<h3><a href="https://github.com/singwhatiwanna/dynamic-load-apk">DL : Apk动态加载框架</a></h3>

<p>这个是以静态代理为基础创建的插件框架，并没有大量的hook，可以参看它的解析<a href="https://www.jianshu.com/p/30114b7176a3">文章</a>。</p>

<p>任大神的框架适配性较好，基本上是纯软件层的技术（静态代理），没怎么hook。当然缺点也相当明显，就是对于插件的开发要求很苛刻，必须实现框架本身自定义的一坨东西，与安卓标准的app开发差异较大，且越来越大，并且对于打包和开发过程并无工具支持，在实际应用过程中较为麻烦。退一步讲，并未有真正达到插化的目的，它对插件的限制较大。</p>

<p>现在已经基本没人用了，不过这属于开山之作。</p>

<h3><a href="https://github.com/iqiyi/Qigsaw">Qigsaw</a></h3>

<p>这个与其他插件框架的最大差别在于，它最接近于官方的东西（<a href="https://developer.android.com/guide/app-bundle/">App bundle</a>），它的重点在于项目模块化和打包上面，对于常规理解上的『插件』所做的事情特别少，hook特别少，安装和加载插件的过程比较很简单，接近原生，核心在于它的打包过程。<a href="https://www.bookstack.cn/read/Qigsaw/c47ca9c7359b0d0d.md">这里</a>有详细的介绍。</p>

<p>另外，包建强的书<a href="https://item.jd.com/12408095.html">《Android插件化开发指南》</a>也可以读一读的，书的好处在于，它毕竟是一个整体，从基础的技术原理到hook原理都有讲，还是相当不错的。不过书比较旧了 ，要结合<a href="https://www.cnblogs.com/Jax/p/9316422.html">作者的勘误</a>，以及网上的文章一起来消化理解。</p>

<h2>热修复原理</h2>

<p>除了插件化，另外一个大厂热衷的技术便是热修复，这也是大厂头部应用的标配技术。其实插件化，也能实现热修复，比如某个插件，一般是厂里的一个业务，出问题了，紧急打包发布一个修复的版本，然后更新插件。不过，这略显笨重，相当于用牛刀去杀鸡了，总之就是效率不高。</p>

<p>真正的热修复技术讲究效率，且要小巧，针对 点对点式的修复。它的核心原理就是替换，用反射去替换类（修改dex classloader中的dex顺序），以及对方法的替换（侵入虚拟机中的method表，进行替换），还分冷生效（类替换一般是冷生效，也即下次启动时生效）和热生效（方法替换一般是热的，下次调用此方法时就生效了，因为它并不涉及classloader，无需要重新加载类），还有插桩式的，在代码中直接插桩，先检查有没有patch，有patch就先运行patch（这个思路最简单，适配性也好，但实行难度大，需要对现有代码进行插桩）。</p>

<p>这几篇文章有比较详细的讨论。</p>

<ul>
<li><a href="https://www.cnblogs.com/popfisher/p/8543973.html">Android热修复技术原理详解</a></li>
<li><a href="https://www.jianshu.com/p/6ae1e09ebbf5">Android热修复技术，你会怎么选？</a></li>
<li><a href="https://www.jianshu.com/p/8891f95f6e8e">探索Android开源框架 - 11. 热修复原理</a></li>
</ul>


<h3>具体的热修复工具</h3>

<h4>xposed派系</h4>

<p>也即原生的<a href="https://github.com/rovo89/Xposed">Xposed</a>和<a href="https://github.com/rovo89/XposedBridge">Xposed framework</a>
以及大阿里的衍生版本<a href="https://github.com/alibaba/dexposed">dexposed</a>。</p>

<p>针对 方法可以热生效的hook，当年Dalvik时代，这个东西还是相当牛逼的，时过境迁虽然Art上无法用了，但不妨用来学习。</p>

<h4><a href="https://github.com/alibaba/AndFix">Andfix</a></h4>

<p>原产自支付宝的与Xposed类似的方法级的hook工具，支持Dalvik与Art，值得使用和学习。</p>

<h4><a href="https://github.com/panhongwei/AndroidMethodHook">AndroidMethodHook</a></h4>

<p>可以用来学习sophix，sophix是大阿里的东西，把andfix以及dexposed商业化了，不再开源免费用了。这个项目比较接近它们，可以用来学习。</p>

<h4><a href="https://github.com/Tencent/tinker">Tinker</a></h4>

<p>微信出品的Tinker，核心技术还是用dex替换实现的class替换，冷生效。</p>

<p>它的重点在于补丁dex的差量生成，以及发布平台，还做成了收费平台，变成一种服务。所以，你看核心技术是由目标平台（安卓）决定的，原理大家也都懂，各家也都大差不差的，也都有开源现成的方案可以用，但这远远不够，整个链路是值得深挖的，这也是能产生商业价值的地方。</p>

<h4><a href="https://github.com/dodola/HotFix">HotFix</a></h4>

<p><a href="https://zhuanlan.zhihu.com/p/20308548">安卓App热补丁动态修复技术介绍</a></p>

<h4><a href="https://github.com/jasonross/Nuwa">Nuwa</a></h4>

<p><a href="https://www.cnblogs.com/fanfu1/p/5506149.html">安卓热更新之Nuwa实现步骤</a></p>

<h4><a href="https://github.com/Meituan-Dianping/Robust">Robust</a></h4>

<p><a href="https://tech.meituan.com/2017/03/17/android-autopatch.html">Android热更新方案Robust开源，新增自动化补丁工具</a></p>

<p>这个与Nuwa一样，都用了代码插桩，当然插桩过程，是用了字节码工具（如ASM），进行编译时自动化处理，最终字节码（APK）是受影响的，但源码层面是无感知的。</p>

<h2>瓶颈在哪里</h2>

<p>插件化这项技术，它的成本特别高，但收益有限，需要庞大的研发体系来支持，并且只有长期投入，才能产出一些价值。因此，现在来说只有头部大厂才真正玩得转。</p>

<h3>技术本身并不是瓶颈</h3>

<p>这项技术的可行性是由Java决定的，因此一直是可行的。但每年的Android版本，都会对核心组件进行不同程度的强化和升级，这会导致之前的一些方案可能一下子就失效了。另外，手机厂商可能也会做一些修改，不过一般都比较小。</p>

<p>安卓 版本升级，会对插件化有影响，甚至会让现有方案全部失效，但这个还真不是这项技术的瓶颈。因为安卓 升级较慢，正常一年一个版本，但是对核心组件大变化，通常几年才有一次，这个速度对比三方技术的演进还是相当慢的。前面说了这项技术头部大厂最为受益，因此他们会有专门的专家级别的人物在研究，谷歌出了政策，很快就会对策出来，一般用不了多久，插件化技术大拿们就能给出针对 新版本的解决方案。</p>

<p>由于开源和技术分享，很快便会在业界普及。因此，单就技术本身，绝不是瓶颈，并且由于开源的发展，核心业务本身都是开源的，大家都能很快使用最先进的技术。</p>

<h3>网络和平台能力才是瓶颈</h3>

<p>插件化这个事情，想要真正的用好，光有核心业务还是不够的。核心业务现在都有现成的开源库，拿过来就可以用，但这远远不够。</p>

<p>就从一个插件从开发人员手中到用户手中，并成功安装生效，这一过程拆来看需要多少东西吧：</p>

<ol>
<li>插件的开发，需要一些辅助工具。理想的情况下，一个插件模块的开发，应该与常规应用开发是一样的，但毕竟它的构建目标是一个插件，而非标准的app，所以你需要针对核心业务插件框架适用的一些开发工具。这个一般开源框架中都有提供，但不见得有那么好。</li>
<li>构建和打包。如果是一个合格的插件化框架，一定会有怎么构建 打包的配套设施。</li>
<li>测试和调试。这里面的难点在于，如何能尽可能的模拟真实的流程，并且能方便的来实施测试和验证结果</li>
<li>发布上线控制。一些细节就是如何精准推送，如何做灰度发布，以及发现问题后如何快速回滚（你看，这哪一项涉及插件化技术）</li>
<li>下载。客户端的一个最大的问题就是，客户端在客户那里，我们发布的东西都在服务器上，如何能让插件顺利的送达到用户手中。别小看这个，网络问题永远是出错误原因里面最多的一个，而且容易被测试忽略，因为研发人员自己的网络环境一般简单且稳定。（一个最简单的测试就是，当你在电梯里，地铁里，高铁时，厕所里，山上，河里，村里，手机里面的应用还有几个能正常联网的？）</li>
<li>安装和生效。这个也是插件化的核心业务，框架都会支持的。难点在于校验，就是客户端拿到的插件是不是符合预期的，文件有没有损坏，有没被篡改。</li>
<li>降级。这个通常插件化框架不会提供。降级的意思就是如果插件安装更新失败了，你怎么办？能否回滚，如果这个插件彻底废了，有没有H5页面可以用？</li>
</ol>


<p>我们粗略来看，就能分出上面7个步骤，其实还有更细的。上面这些里，插件化开源框架一定能解决的是2和6，1和3会在一定程度上支持。而其他的只有靠自己了，当然 也可能会有一些开源软件可以用，但它们并不纯是为了插件化而做的。这些东西都属于研发效率平台，甚至是涉及软件流程，基本上都属于商业公司的核心业务机密了，基本上是不可能开源的，而且不同的公司文化制度流程都不一样，即使开源给你了，也不一定用得上。但这恰恰又是最能体现一个公司结合技术实力的地方，小公司或者综合能力差的公司，即使有现成的插件化框架方案给你，你也用不好，因为配套设施不行。再次佐证，插件化这东西只有头部大厂才能玩得转，并产生正收益。</p>

<p>这些才是真正的瓶颈。</p>

<h2>这是逆向工程技术</h2>

<p>插件化需要用到大量的反射和动态代理技术去hook安卓系统，从而实现官方并不直接支持的特性，这属于逆向工程，与官方倡导的方向并不一致。</p>

<p>而且，只有在国内圈子里面才比较流行，国外的一些大厂和专家似乎并不愿意花时间和精力搞这些事情。很难简单的用好与坏来评价，只能说文化不同。</p>

<p>逆向工程技术局限性较大，很难长久发展， 一旦官方把某个关键地方堵住（不能说是漏洞，而一些关键的对象和接口），很多插件框架可能就废掉了，当然了道高一尺，魔高一丈，总还是能找到可以hook的地方，仍总感觉怪怪的。</p>

<p>常规的技术，如编程范式（函数式编程，Reactive，RxJava），编程语言，平台框架和轮子（如Picasso，如OkHttp），这些是纯正的技术，不受制于任何平台，不但能长久发展，更能反过来推动官方进步（如OkHttp已被谷歌内置为安卓内部作为HTTP协议的实现）。</p>

<p>综合来说，除非你需要专门研究插件化，并能得到收益之外（对业务，对公司，对个人），对于插件化技术，了解一下就够了，而且这东西并不能真正的提升软件质量（它带来的问题比它解决的要多很多）。不如把时间花在业务上面，花在编程范式，花在编程语言，花在流行的框架和轮子上面，这更能提升软件质量，且是终生受益的。毕竟，假如代码质量够好，发出去的版本都可控，都能达到预期，也就没必要折腾插件化了（即使是对大厂头部应用来说，版本的发布仍主要是靠正常的apk发布，插件迭代一般用在正常版本来不及时使用比如电商的双11期间）。</p>

<p><strong>研发工具（如Instant Run），调试工具（如获取 一些运行时的信息，在线调试），测试工具（如Mock），不侵入源码式编程（动态插桩，AOP和依赖注入）</strong>才是反射和动态代理以及Hook的最终归宿，是值得我们深入研究和学习的方向。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://www.kancloud.cn/alex_wsc/android/504478">动态注入技术（hook技术）</a></li>
<li><a href="https://www.jianshu.com/p/b30ea19c444b">Android插件化原理解析——Hook机制之动态代理</a></li>
<li><a href="https://blog.csdn.net/yulong0809/article/details/56842027">插件化知识详细分解及原理 之代理，hook，反射</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/109157321">盘点Android常用Hook技术</a></li>
<li><a href="https://www.jianshu.com/p/4f6d20076922">理解 Android Hook 技术以及简单实战</a></li>
<li><a href="https://tech.meituan.com/2018/02/02/android-anti-hooking.html">Android Hook技术防范漫谈</a></li>
<li><a href="https://juejin.cn/post/6844903941105270798">Android插件化——高手必备的Hook技术</a></li>
<li><a href="https://blog.csdn.net/gdutxiaoxu/article/details/81459830">Android Hook 机制之简单实战</a></li>
<li><a href="https://juejin.cn/post/6998085562573783076">字节跳动开源 Android PLT hook 方案 bhook</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[拥抱新时代的Java]]></title>
    <link href="http://toughcoder.net/blog/2022/01/17/develop-with-java-8/"/>
    <updated>2022-01-17T22:55:19+08:00</updated>
    <id>http://toughcoder.net/blog/2022/01/17/develop-with-java-8</id>
    <content type="html"><![CDATA[<p>Java作为面向对象编程的王牌语言，曾经风靡一时，在Web领域是绝对的老大。随着时间的推移，一些新的编程范式不断的涌现，如函数式编程，响应式编程，以及对函数的全力支持（Lambda函数）变成了大家经常谈论的话题。移动互联网的出现，以及前端的流行，让新一代的编程语言如<a href="https://scala-lang.org/">Scala</a>，<a href="http://www.groovy-lang.org/">Groovy</a>，<a href="https://developer.apple.com/swift/">Swift</a>以及<a href="https://kotlinlang.org/">Kotlin</a>都大受欢迎。以函数式编程为核心的新一代编程范式慢慢变成了主流。曾经的王者Java，一度被人垢病，因为对函数支持不友好，（其实最主要的原因是如何保持好向后兼容），但也与时俱进，终于在Java 8版本迈出了重大的一步，完全支持了函数式编程。本篇将重点讨论Java 8的新特性，以及如何用Java 8来实践函数式编程。</p>

<p><a href="http://toughcoder.net/blog/2022/01/17/develop-with-java-8/"><img src="https://cdn.educba.com/academy/wp-content/uploads/2020/01/java-8-features.jpg" title="auto auto" ></a></p>

<!-- more -->


<h2><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html">Lambda表达式</a></h2>

<p>也即匿名函数，称之为lambda。具体数学上的定义比较复杂就不多说了。为了便于理解，我们先从匿名内部类说起。</p>

<p><img src="https://www.callicoder.com/static/a42462af7361c61f46c6ef49f0a5bb26/c1b63/java-lambda-expressions-tutorial.png" alt="" /></p>

<p>Java早就支持匿名内部类，这是在当年相比较C++一个重要大的提升，它在一些需要提供行为实现的地方还是非常方便的，典型的例子就是UI中的点击事件的处理：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">button</span><span class="o">.</span><span class="na">addActionListener</span><span class="o">(</span><span class="k">new</span> <span class="nf">ActionListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">actionPerformed</span><span class="o">(</span><span class="n">ActionEvent</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Button is clicked: &quot;</span> <span class="o">+</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的要点就是我们向button传递的是一个行为，也就是说按扭点击了时，要执行什么样的行为。对比其他现代语言，这还是显得有些笨重，没有简单明了的说明意图。用Java 8，这就好办多了，可以这样写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">button</span><span class="o">.</span><span class="na">addActionListener</span><span class="o">(</span><span class="n">e</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Button is clicked: &quot;</span> <span class="o">+</span> <span class="n">e</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>括号里面这一坨就是一个Lambda表达式，它是一个行为（严格来说是一个函数），用以直接向目标对象传递一个行为，对比前面的例子，可以发现，这种场景下使用Lambda更加的简洁高效。</p>

<h3>Lambda表达式的语法</h3>

<p>它的通用语法是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">(</span><span class="n">p1</span><span class="o">,</span> <span class="n">p2</span><span class="o">....)</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">statements</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>括号里面是参数列表，当只有一个参数时，括号可省略，但当参数多于1个时，或者显示声明了参数类型时，括号不能省略，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">names</span><span class="o">.</span><span class="na">sort</span><span class="o">((</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">b</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">a</span><span class="o">));</span>
</span><span class='line'><span class="n">button</span><span class="o">.</span><span class="na">addActionListener</span><span class="o">((</span><span class="n">ActionEvent</span> <span class="n">e</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Button is clicked: &quot;</span> <span class="o">+</span> <span class="n">e</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>花括号中就是语句块了，这跟常规语句块（如if， while等）是一样的，如果有返回值就return，把它理解为常规方法的实体就可以了，像写常规函数实现那样去写就好了。如果只有一个语句，或者一条表达式，可以省略花括号。</p>

<h3>类型推断</h3>

<p>Lambda表达是匿名函数，主要用以向目标对象传递行为，既然匿名，当然是图简洁和清晰，因此就不要弄的太复杂。所以，参数的类型，以及表达式的返回值（如有）的类型，都是编译器通过上下文来推断出来的，因此，不用给参数写类型，如果因为实现的接口不明确，编译器看不懂的话，会有编译报错的。</p>

<p>关于类型推断可以看《Java 8函数式编程》的第2章第5节有详细的讨论。</p>

<h3><a href="https://www.geeksforgeeks.org/closures-in-java-with-examples/">闭包</a></h3>

<p>也就是closure，严格的数学定义就不说了，有点复杂和难于理解，简单来说就是Lambda表达中使用了一个其定义域外的变量的值（称作捕获外部变量），lambda即变成了一个闭包。还是有点绕，这个其实并不陌生，以前的匿名内部就是可以使用外部变量的，只不过编译器要强加final修饰，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">final</span> <span class="kt">int</span> <span class="n">numberOfStudents</span> <span class="o">=</span> <span class="n">countStudents</span><span class="o">();</span>
</span><span class='line'><span class="n">button</span><span class="o">.</span><span class="na">addActionListener</span><span class="o">(</span><span class="k">new</span> <span class="nf">ActionListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">actionPerformed</span><span class="o">(</span><span class="n">ActionEvent</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Number of students is &quot;</span> <span class="o">+</span> <span class="n">numberOfStudents</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里其实就是一个闭包了，匿名内部类中捕获了外部的变量numberOfStudents，只不过要强加final修饰，这是因为这里要传值。</p>

<p>Java 8里面呢，外部变量不必用final修饰了，但是，它也必须实际上是final的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">numberOfStudents</span> <span class="o">=</span> <span class="n">countStudents</span><span class="o">();</span>
</span><span class='line'><span class="n">button</span><span class="o">.</span><span class="na">addActionListener</span><span class="o">(</span><span class="n">e</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Number of students is &quot;</span> <span class="o">+</span> <span class="n">numberOfStudents</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为，之前啊，假如捕获了一个外部变量，不是final的，会有编译错误，但如果你用IDE的建议时，它就直接再声明一个final变量，用原变量赋值，然后把新的final变量传给匿名内部类，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">numberOfStudents</span> <span class="o">=</span> <span class="n">countStudents</span><span class="o">();</span>
</span><span class='line'><span class="kd">final</span> <span class="kt">int</span> <span class="n">finalNumberOfStudents</span> <span class="o">=</span> <span class="n">numberOfStudents</span><span class="o">;</span>
</span><span class='line'><span class="n">button</span><span class="o">.</span><span class="na">addActionListener</span><span class="o">(</span><span class="k">new</span> <span class="nf">ActionListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">actionPerformed</span><span class="o">(</span><span class="n">ActionEvent</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Number of students is &quot;</span> <span class="o">+</span> <span class="n">finalNumberOfStudents</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>到此就明白了，Java 8对于闭包的支持，其实较之前没有实质的变化，只不过编译器帮你做了这个final变量的定义而已。</p>

<p>这部分可以参考《Java 8函数式编程》中第2章第3节的内容。</p>

<h2><a href="https://www.oracle.com/webfolder/technetwork/tutorials/obe/java/JavaSE8DefaultMethods/JavaSE8DefaultMethods.html">接口方法默认实现</a></h2>

<p>Java 8中，可以给接口interface，添加一个方法的默认实现，这样在实现此接口时，子类可以选择重新实现，或者不实现，直接调用此方法即可，从语法上来说，是比较简单的，用default关键字来修饰方法即可，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">interface</span> <span class="nc">Formula</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">double</span> <span class="nf">calculate</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">default</span> <span class="kt">double</span> <span class="nf">sqrt</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Math</span><span class="o">.</span><span class="na">sqrt</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">ComplexFormula</span> <span class="kd">implements</span> <span class="n">Formula</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">double</span> <span class="nf">calculate</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">sqrt</span><span class="o">(</span><span class="n">real</span><span class="o">)</span> <span class="o">+</span> <span class="kd">super</span><span class="o">.</span><span class="na">sqrt</span><span class="o">(</span><span class="n">imaginary</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里面，子类ComplexFormula是可以正常编译和运行的。</p>

<p><strong>注意</strong>：接口是支持多重继承的，比如一个类可以实现多个接口，这就有可能存在接口中有相同的默认方法，最好的处理方法就是子类重新实现一下此方法，然后可以用接口的名字+super来具体指定父类中的方法。这一具体的规则比较复杂，可以看《Java 8函数式编程》这本书中的第4章第7节，有比较详细的论述。</p>

<p>另外，需要注意，实际运用中，接口的默认方法并不常用，因为这本身就是比较奇怪的，与最初Java的设计有冲突，接口策重于行为的高级抽象，而抽象类侧重对象的高级抽象（多半涉及状态属性）。这东西的出现主要是为了解决向后兼容，比如说当你一个被广泛使用的接口添加了一个新的方法时，所有实现此接口的类必须全部要改一遍，要实现此接口，这会影响大量的现存代码，而默认方法就是为了解决这个问题的，给新添加的方法标记为default，就不会影响现存代码了。</p>

<p>这个可以仔细读一下《Java 8函数式编程》中的第4章第6节和第7节的内容。</p>

<h2><a href="https://www.geeksforgeeks.org/functional-interfaces-java/">函数接口</a></h2>

<p>支持函数式编程范式的语言一般来说呢，会把函数作为语义上的一级类型，比如像Python或者Kotlin都有专门用于声明函数的关键字。另外，需要澄清一下函数的概念，简单来说函数就是给定一些输入，然后给出输出，输出随输入改变而改变，<strong>不会产生副作用，也就是不会修改全局变量，不会修改环境变量</strong>。且<strong>具有幂等性，即针对 同一组输入，多次调用，结果仍是一样的</strong>，这就是函数。</p>

<p>对于Java，这事儿就有点难办了，因为前面的版本根本就没有把方法独立成为函数，方法必须存在于类中。为了支持函数，函数是函数式编程的基本要素，所以要想支持函数式编程，必须以某种方式来支持函数的定义。Java 8中就提出了函数接口的概念。</p>

<p><strong>函数接口是只有一个抽象方法的接口</strong>，这里有两个关键信息，首先，<strong>语义上的类型必须是一个interface</strong>，其次，<strong>它只能有一个抽象方法</strong>，放在以前的版本，其实意思就是说只有能一个方法，但还要注意的是前面提到的默认方法。那么这里的要求就是<strong>除了默认方法以外，只能有一个方法</strong>。</p>

<p>函数接口必须用<em>@FunctionalInterface</em>注解来标注，编译器会对它做特别的关注，一旦有超过1个抽象接口，就会编译报错。为啥要用注解而不是增加关键字（如function），或者创建一级类型（如function interface），目的仍是向后兼容。注解仅需要在编译阶段做一些额外的事情即可，这即实现了扩展，又保持了兼容性。</p>

<p>前面提到的Lambda表达式必须是一个函数接口的实例，这样说太抽象了，慢慢来解释下。Lambda是一个匿名函数，可以把它理解为一个对象，它所实现的必须是一个函数接口。换句话说，只有声明为函数接口的地方，也就是方法的参数类型或者变量的类型要声明为函数接口，只有这里才可以传入lambda表达式。</p>

<p>接着前面的Formula例子，假如有如下应用场景：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Number</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">payload</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Number</span> <span class="nf">transform</span><span class="o">(</span><span class="n">Formula</span> <span class="n">formula</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="k">return</span> <span class="n">formula</span><span class="o">.</span><span class="na">calculate</span><span class="o">(</span><span class="n">payload</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在调用transform方法时如果直接传递lambda，是会报错的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">number</span><span class="o">.</span><span class="na">transform</span><span class="o">(</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="o">*</span> <span class="n">a</span><span class="o">);</span> <span class="c1">// won&#39;t compile</span>
</span></code></pre></td></tr></table></div></figure>


<p>解决方法，就是要给Formula添加函数接口注解：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@FunctionalInterface</span>
</span><span class='line'><span class="kd">interface</span> <span class="nc">Formula</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">double</span> <span class="nf">calculate</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">default</span> <span class="kt">double</span> <span class="nf">sqrt</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Math</span><span class="o">.</span><span class="na">sqrt</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于函数接口，可以参阅《Java 8函数式编程》中第2章第4节和第4章第4节。</p>

<h3>常用的函数接口</h3>

<p>Java 8 定义了一些非常常用的函数接口，这里做一下简单的介绍。</p>

<h4><a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Predicate.html">Predict<T></a></h4>

<p>断言，给定一个类型为T的输入，给出boolean的输出（true of false）。通常用于过滤操作之中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Predict</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">isEmpty</span> <span class="o">=</span> <span class="nl">String:</span><span class="o">:</span><span class="n">isEmpty</span><span class="o">;</span>
</span><span class='line'><span class="n">students</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>    <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">name</span> <span class="o">-&gt;</span> <span class="o">!</span><span class="n">name</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<h4><a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Function.html">Function&lt;T, R></a></h4>

<p>通用的函数操作，给定类型为T的输入，返回类型为R的输出，通常用于map之中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Function</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">length</span> <span class="o">=</span> <span class="n">name</span> <span class="o">-&gt;</span> <span class="n">name</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实，Predict可视为一种特殊的Function，它的返回类型是boolean。</p>

<h4><a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Consumer.html">Consumer<T></a></h4>

<p>消费类型为T的对象，无输出，作为调用链的终点，通常用于生成终值，如前面例子中传给button的lambda就一个Consumer。</p>

<h4><a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Supplier.html">Supplier<T></a></h4>

<p>返回一个类型为T的对象，也即生产者，通常都是用于工厂方法，用来生成新的对象。</p>

<h4><a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/UnaryOperator.html">UnaryOperator<T></a></h4>

<p>一元操作符，输入类型是T的对象，返回类型是T的对象：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">UnaryOperator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">square</span> <span class="o">=</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<h4><a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/BinaryOperator.html">BinaryOperator<T></a></h4>

<p>二元操作符，输入参数是类型同为T的a和b两个参数，输出是一个类型为T的结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">BinaryOperator</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">join</span> <span class="o">=</span> <span class="o">(</span><span class="n">first</span><span class="o">,</span> <span class="n">second</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">first</span> <span class="o">+</span> <span class="s">&quot;, &quot;</span> <span class="o">+</span> <span class="n">second</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里例子不是很多，因为单独写这些函数接口的lambda不太好写，且意义不够实用，会在后面结合Stream API，给出更多示例。</p>

<h2><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html">Optional</a></h2>

<p>这个类用于封装可能为空的对象，以更好的处理null的情况，它加强了类型检查（null本身是没有类型的），以及使用时的空值检查，所以可以一定程度上防止NullPointerException的出现。</p>

<p><img src="https://sboychenko.ru/wp-content/uploads/2016/09/java8-optional.jpg" alt="" /></p>

<p>先来看一下它的简单使用方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span><span class="o">.</span><span class="na">get</span><span class="o">());</span> <span class="c1">// a</span>
</span><span class='line'><span class="n">Optional</span> <span class="n">empty</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span> <span class="c1">// 返回一个为空的对象</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">empty</span><span class="o">.</span><span class="na">isPresent</span><span class="o">());</span> <span class="c1">// false</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">empty</span><span class="o">.</span><span class="na">orElse</span><span class="o">(</span><span class="s">&quot;b&quot;</span><span class="o">);</span> <span class="c1">// b</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">empty</span><span class="o">.</span><span class="na">orElseGet</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="s">&quot;c&quot;</span><span class="o">));</span> <span class="c1">// c</span>
</span></code></pre></td></tr></table></div></figure>


<p>前面2行好理解了，第3行创建一个为空的Optional对象，它的isPresent会返回false，orElse是说如果为空时可以返回一个默认值『b』，而最后一行也可以为默认值提供一个Supplier以在为空的时候产生一个值。</p>

<p>通过这几个小例子可以看出Optional的用途，它可以比较好的封装对象，并提前定义值不存在时的应对情况，能够一定程序上减少NPE。</p>

<p>不过，这个东西对于复杂项目来说效用不会太大，假如你到处判断isPresent，其实跟检测== null也没有本质区别。实际项目中大量的NPE来自于多线程环境共享成员变量，这种情况下Optional也救不了你。</p>

<p>要想发挥这东西的最大效用，需要从设计角度尽可能的减少变量共享，尽可能的缩小变量作用域，再配合默认值或者默认值的Suppiier，多管齐下，才能有效的防止NPE。</p>

<h2><a href="https://www.javatpoint.com/java-8-method-reference">方法引用</a></h2>

<p>函数式编程，函数要是语义层面的一级类型，变量或者参数的类型可以是函数，前面提到了在Java 8中代表函数类型就是函数接口。</p>

<p>那么，当传递具体函数体的时候，我们一直在使用lambda表达式，但这并不是适合所有场景，比如说我已经有了一个类的方法，完全符合函数接口的方法签名，难道还非要写一个lambda吗？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">button</span><span class="o">.</span><span class="na">addActionListener</span><span class="o">(</span><span class="n">event</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">event</span><span class="o">));</span>
</span><span class='line'><span class="n">Predict</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">empty</span> <span class="o">=</span> <span class="n">str</span> <span class="o">-&gt;</span> <span class="n">str</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">();</span>
</span><span class='line'><span class="n">Function</span><span class="o">&lt;</span><span class="n">Artist</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">namer</span> <span class="o">=</span> <span class="n">artist</span> <span class="o">-&gt;</span> <span class="n">artist</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>这显然太啰嗦了，这种情况下，可以直接用<strong>方法引用</strong>，来把已有的方法传递过去，形式是<strong>类名::方法名</strong>，用方法引用重写上面的几个小例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">button</span><span class="o">.</span><span class="na">addActionListener</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</span><span class='line'><span class="n">Predict</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">empty</span> <span class="o">=</span> <span class="nl">String:</span><span class="o">:</span><span class="n">isEmpty</span><span class="o">;</span>
</span><span class='line'><span class="n">Function</span><span class="o">&lt;</span><span class="n">Artist</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">namer</span> <span class="o">=</span> <span class="nl">Artist:</span><span class="o">:</span><span class="n">getName</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>简洁了很多吧，不但可以复用已有的方法，简洁明了，而且也省去创建一个lambda对象。一定要注意的就是要用方法的名字，不能加括号，因为加了括号，在语义上就是对函数的调用了，引用的便是该方法的返回值，除非这个方法的返回值是一个函数接口实例（lambda或者一个方法引用）。</p>

<p>除了常规方法可以用作引用以外，还可以对构造方法进行引用，格式是<strong>类名::new</strong>，如</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nl">Artist:</span><span class="o">:</span><span class="k">new</span><span class="o">;</span> <span class="c1">// 相当于  (name, nationality) -&gt; new Artist(name, nationality);</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以参阅《Java 8函数式编程》第5章第1节的内容。</p>

<h2><a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html">Stream API</a></h2>

<p>终于到了最为重要的特性了，为了更进一步的支持函数式编程，Java 8新增了Stream API，它是针对集合类型（List，Map和Set等）函数式操作的支持，以更好的把行为与遍历分离。先来看一下小例子：</p>

<p>比如有这样一个列表：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">giants</span> <span class="o">=</span> <span class="n">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&quot;Apple&quot;</span><span class="o">,</span> <span class="s">&quot;Google&quot;</span><span class="o">,</span> <span class="s">&quot;Microsoft&quot;</span><span class="o">,</span> <span class="s">&quot;Facebook&quot;</span><span class="o">,</span> <span class="s">&quot;Tesla&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>想简单遍历一下，以前这么写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">item</span> <span class="o">:</span> <span class="n">giants</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">item</span><span class="o">);</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但，现在只需要这样写就可以了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">giants</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>是不是很清爽，这就是典型的函数式写法，你可能会说就这？客官别急，这只是前戏，后面还有更刺激的。</p>

<p><img src="https://miro.medium.com/max/1400/0*QCmZZpGs_rcF5y2-.png" alt="" /></p>

<p><strong>注意</strong>：这里一定要与I/O stream区分开来，完全是两个东西。Stream API是针对 集合操作的函数式支持。</p>

<p>函数式编程核心元素是函数，它通过对函数的各种组合得到最终的结果，最为典型的就是流式调用，把函数串连起来，或者叫做链式调用，让数据在函数链中流动，最终得到期望的结果。最为经典的函数式『三板斧』就是过滤（filter），转换（map）和折叠（也称化约，英文是reduce），这是所有函数式程序的基本构造单元。可以参阅《函数式编程思维》这本书的第2章，有比较详细的讨论。</p>

<p><img src="https://files.realpython.com/media/TUT19---Functional-Programming_Watermarked.3bb16c6198a2.jpg" alt="" /></p>

<h3>复杂的实例</h3>

<p>为了更好的演示Java 8的Stream API，以及综合运用函数式方法，本文剩余部分，将基于<a href="https://www.nba.com/nets/">Brooklyn</a>的球员技术统计信息操作为基础的实例。球队中有多名球员，每个球员有一些基本信息和一组比赛技术统计，现在教练需要对信息做一些统计。基础的类型是球员包含其基本信息和技术统计，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Player</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">firstName</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">lastName</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">community</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">points</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">rebounds</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">float</span> <span class="n">fieldGoal</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;&#39;&quot;</span> <span class="o">+</span> <span class="n">firstName</span> <span class="o">+</span>
</span><span class='line'>                <span class="s">&quot;, &quot;</span> <span class="o">+</span> <span class="n">lastName</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span><span class='line'>                <span class="s">&quot;, from &#39;&quot;</span> <span class="o">+</span> <span class="n">community</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span><span class='line'>                <span class="s">&quot;, scores=&quot;</span> <span class="o">+</span> <span class="n">points</span> <span class="o">+</span>
</span><span class='line'>                <span class="s">&quot;, rebounds=&quot;</span> <span class="o">+</span> <span class="n">rebounds</span> <span class="o">+</span>
</span><span class='line'>                <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;, fieldGoal=%.2f%%&quot;</span><span class="o">,</span> <span class="n">fieldGoal</span> <span class="o">*</span> <span class="mi">100</span><span class="o">.</span><span class="na">f</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">Player</span><span class="o">(</span><span class="n">String</span> <span class="n">firstName</span><span class="o">,</span> <span class="n">String</span> <span class="n">lastName</span><span class="o">,</span> <span class="n">String</span> <span class="n">community</span><span class="o">,</span> <span class="kt">int</span> <span class="n">scores</span><span class="o">,</span> <span class="kt">int</span> <span class="n">rebounds</span><span class="o">,</span> <span class="kt">float</span> <span class="n">fieldGoal</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">firstName</span> <span class="o">=</span> <span class="n">firstName</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">lastName</span> <span class="o">=</span> <span class="n">lastName</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">community</span> <span class="o">=</span> <span class="n">community</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">points</span> <span class="o">=</span> <span class="n">scores</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">rebounds</span> <span class="o">=</span> <span class="n">rebounds</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">fieldGoal</span> <span class="o">=</span> <span class="n">fieldGoal</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Builder</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">private</span> <span class="n">String</span> <span class="n">firstName</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">private</span> <span class="n">String</span> <span class="n">lastName</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">private</span> <span class="n">String</span> <span class="n">community</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">private</span> <span class="kt">int</span> <span class="n">scores</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">private</span> <span class="kt">int</span>  <span class="n">rebounds</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">private</span> <span class="kt">float</span> <span class="n">fieldGoal</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">firstName</span><span class="o">(</span><span class="n">String</span> <span class="n">firstName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">firstName</span> <span class="o">=</span> <span class="n">firstName</span><span class="o">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">lastName</span><span class="o">(</span><span class="n">String</span> <span class="n">lastName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">lastName</span> <span class="o">=</span> <span class="n">lastName</span><span class="o">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">community</span><span class="o">(</span><span class="n">Supplier</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">communitySupplier</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">community</span> <span class="o">=</span> <span class="n">communitySupplier</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">points</span><span class="o">(</span><span class="n">Supplier</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">pointsSupplier</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">scores</span> <span class="o">=</span> <span class="n">pointsSupplier</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">rebounds</span><span class="o">(</span><span class="n">Supplier</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">reboundsSupplier</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">rebounds</span> <span class="o">=</span> <span class="n">reboundsSupplier</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">fieldGoal</span><span class="o">(</span><span class="n">Supplier</span><span class="o">&lt;</span><span class="n">Float</span><span class="o">&gt;</span> <span class="n">fgSupplier</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">fieldGoal</span> <span class="o">=</span> <span class="n">fgSupplier</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="n">Player</span> <span class="nf">build</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nf">Player</span><span class="o">(</span><span class="n">firstName</span><span class="o">,</span> <span class="n">lastName</span><span class="o">,</span> <span class="n">community</span><span class="o">,</span> <span class="n">scores</span><span class="o">,</span> <span class="n">rebounds</span><span class="o">,</span> <span class="n">fieldGoal</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>再有就是球队了，就是针对球员们的操作的地方，首先，需要生成数据：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Brooklyn</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Player</span><span class="o">&gt;</span> <span class="n">players</span> <span class="o">=</span> <span class="n">generatePlayers</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Player</span><span class="o">&gt;</span> <span class="nf">generatePlayers</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">names</span> <span class="o">=</span> <span class="n">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span>
</span><span class='line'>                <span class="s">&quot;James Harden&quot;</span><span class="o">,</span> <span class="s">&quot;Kevin Durant&quot;</span><span class="o">,</span> <span class="s">&quot;Kyrie Irving&quot;</span><span class="o">,</span> <span class="s">&quot;Nic Clyxton&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;Kessler Edwards&quot;</span><span class="o">,</span> <span class="s">&quot;Bruce Brown&quot;</span><span class="o">,</span> <span class="s">&quot;LaMarcus Aldridge&quot;</span><span class="o">,</span> <span class="s">&quot;Blake Griffin&quot;</span>
</span><span class='line'>        <span class="o">);</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">communities</span> <span class="o">=</span> <span class="n">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&quot;The Bronx&quot;</span><span class="o">,</span> <span class="s">&quot;Brooklyn&quot;</span><span class="o">,</span> <span class="s">&quot;Manhattan&quot;</span><span class="o">,</span> <span class="s">&quot;Queens&quot;</span><span class="o">,</span> <span class="s">&quot;Staten Island&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Random</span> <span class="n">random</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Random</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">names</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>                <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">name</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">String</span><span class="o">[]</span> <span class="n">parts</span> <span class="o">=</span> <span class="n">name</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">&quot; &quot;</span><span class="o">);</span>
</span><span class='line'>                    <span class="k">return</span> <span class="k">new</span> <span class="n">Player</span><span class="o">.</span><span class="na">Builder</span><span class="o">().</span><span class="na">firstName</span><span class="o">(</span><span class="n">parts</span><span class="o">[</span><span class="mi">0</span><span class="o">])</span>
</span><span class='line'>                            <span class="o">.</span><span class="na">lastName</span><span class="o">(</span><span class="n">parts</span><span class="o">[</span><span class="mi">1</span><span class="o">])</span>
</span><span class='line'>                            <span class="o">.</span><span class="na">community</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>                                <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="n">communities</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
</span><span class='line'>                                <span class="k">return</span> <span class="n">communities</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">index</span><span class="o">);</span>
</span><span class='line'>                            <span class="o">})</span>
</span><span class='line'>                            <span class="o">.</span><span class="na">points</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">random</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">61</span><span class="o">))</span>
</span><span class='line'>                            <span class="o">.</span><span class="na">rebounds</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">random</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">31</span><span class="o">))</span>
</span><span class='line'>                            <span class="o">.</span><span class="na">fieldGoal</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">random</span><span class="o">.</span><span class="na">nextFloat</span><span class="o">())</span>
</span><span class='line'>                            <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>                <span class="o">})</span>
</span><span class='line'>                <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里为了方便使用了一个<a href="https://refactoring.guru/design-patterns/builder">Builder Pattern</a>。另外，创建数据的过程中，其实用到上面提到的大量知识点，如Supplier的使用，以及闭包和方法引用。整体并不难，可以仔细读一读例子中的代码。</p>

<h3>Stream基础操作</h3>

<p>先来看一下Stream的基础操作，包括filter，map和reduce，以及sort和match，不准备说太多的废话，将以实例操作为主线来讲解。</p>

<h4>forEach</h4>

<p>也即遍历，非常方便：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">players</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出会是：</p>

<blockquote><p>&lsquo;James, Harden&rsquo;, from &lsquo;Brooklyn&rsquo;, scores=11, rebounds=24, fieldGoal=10.62% <br/>
&lsquo;Kevin, Durant&rsquo;, from &lsquo;Queens&rsquo;, scores=48, rebounds=4, fieldGoal=47.16% <br/>
&lsquo;Kyrie, Irving&rsquo;, from &lsquo;Staten Island&rsquo;, scores=17, rebounds=21, fieldGoal=86.05% <br/>
&lsquo;Nic, Clyxton&rsquo;, from &lsquo;Queens&rsquo;, scores=43, rebounds=11, fieldGoal=99.66% <br/>
&lsquo;Kessler, Edwards&rsquo;, from &lsquo;The Bronx&rsquo;, scores=55, rebounds=12, fieldGoal=46.78% <br/>
&lsquo;Bruce, Brown&rsquo;, from &lsquo;Queens&rsquo;, scores=10, rebounds=20, fieldGoal=77.51% <br/>
&lsquo;LaMarcus, Aldridge&rsquo;, from &lsquo;Manhattan&rsquo;, scores=35, rebounds=22, fieldGoal=98.18% <br/>
&lsquo;Blake, Griffin&rsquo;, from &lsquo;Brooklyn&rsquo;, scores=3, rebounds=4, fieldGoal=38.06% <br/></p></blockquote>

<p>这个使用起来相当简单，forEach接收一个Consumer，另外需要注意的是forEach不会返回一个Stream对象，所以不能在其后再继续添加链了。它通常作为整个链路的终端，消费最终结果。</p>

<p><strong>注意</strong>：因为数据生成过程中使用了一些随机数，所以运行结果可能会不同。</p>

<h4>filter</h4>

<p>想看看哪些球员，命中率超过五成：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>   <span class="n">players</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>            <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">player</span> <span class="o">-&gt;</span> <span class="n">player</span><span class="o">.</span><span class="na">getFieldGoal</span><span class="o">()</span> <span class="o">&gt;=</span> <span class="mf">0.5f</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出：</p>

<blockquote><p>&lsquo;James, Harden&rsquo;, from &lsquo;Brooklyn&rsquo;, scores=6, rebounds=22, fieldGoal=95.02% <br/>
&lsquo;Kevin, Durant&rsquo;, from &lsquo;The Bronx&rsquo;, scores=37, rebounds=17, fieldGoal=78.81% <br/>
&lsquo;Bruce, Brown&rsquo;, from &lsquo;Queens&rsquo;, scores=26, rebounds=23, fieldGoal=57.35% <br/>
&lsquo;LaMarcus, Aldridge&rsquo;, from &lsquo;The Bronx&rsquo;, scores=35, rebounds=4, fieldGoal=59.75% <br/></p></blockquote>

<p>filter还是很容易理解的，它接收一个Predict，然后返回Stream中符合条件的元素，也即Predict中是true的。</p>

<h4>map</h4>

<p>转换，把一种数据类型转换为另外一种类型，其实从创建数据的方法generatePlayers中就可以看到了，是把String转换为Player，根据名字生成数据对象。</p>

<h4>sort</h4>

<p>接着前面的例子，把输出按命中率从高到低排个序吧：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">players</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>            <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">player</span> <span class="o">-&gt;</span> <span class="n">player</span><span class="o">.</span><span class="na">getFieldGoal</span><span class="o">()</span> <span class="o">&gt;=</span> <span class="mf">0.5f</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">sorted</span><span class="o">((</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">b</span><span class="o">.</span><span class="na">getFieldGoal</span><span class="o">()*</span><span class="mi">100</span> <span class="o">-</span> <span class="n">a</span><span class="o">.</span><span class="na">getFieldGoal</span><span class="o">()*</span><span class="mi">100</span><span class="o">))</span>
</span><span class='line'>            <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出：</p>

<blockquote><p>&lsquo;Nic, Clyxton&rsquo;, from &lsquo;Queens&rsquo;, scores=34, rebounds=17, fieldGoal=93.82% <br/>
&lsquo;Kyrie, Irving&rsquo;, from &lsquo;Brooklyn&rsquo;, scores=37, rebounds=16, fieldGoal=82.95% <br/>
&lsquo;LaMarcus, Aldridge&rsquo;, from &lsquo;Staten Island&rsquo;, scores=43, rebounds=10, fieldGoal=52.94% <br/></p></blockquote>

<h4>flatMap</h4>

<p>map是把一种数据类型转换为另外一各类型，然后让其在链式中流动，flatMap是更为复杂的操作，它是先做map再做flat，想当于把二维的Stream展平成为一维的Stream，传给flatMap的lambda必须返回一个Stream，来看个例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kd">static</span> <span class="n">Stream</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">queryEmail</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="k">return</span> <span class="n">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">name</span> <span class="o">+</span> <span class="s">&quot;@brooklyn.nets&quot;</span><span class="o">);</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'> <span class="n">players</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>        <span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="n">player</span> <span class="o">-&gt;</span> <span class="n">queryEmail</span><span class="o">(</span><span class="n">player</span><span class="o">.</span><span class="na">getLastName</span><span class="o">()))</span>
</span><span class='line'>        <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出：</p>

<blockquote><p><a href="&#x6d;&#x61;&#105;&#x6c;&#x74;&#111;&#58;&#72;&#x61;&#x72;&#100;&#101;&#110;&#x40;&#98;&#114;&#111;&#111;&#x6b;&#x6c;&#121;&#x6e;&#46;&#110;&#x65;&#116;&#x73;">&#72;&#97;&#x72;&#x64;&#x65;&#110;&#64;&#x62;&#114;&#111;&#x6f;&#107;&#x6c;&#121;&#110;&#x2e;&#110;&#101;&#x74;&#x73;</a> <br />
<a href="&#109;&#x61;&#105;&#x6c;&#x74;&#x6f;&#x3a;&#x44;&#x75;&#x72;&#97;&#x6e;&#116;&#64;&#x62;&#x72;&#111;&#x6f;&#107;&#108;&#x79;&#x6e;&#x2e;&#110;&#x65;&#x74;&#x73;">&#68;&#x75;&#x72;&#x61;&#x6e;&#116;&#x40;&#98;&#114;&#111;&#x6f;&#x6b;&#x6c;&#x79;&#110;&#x2e;&#x6e;&#101;&#116;&#115;</a> <br />
<a href="&#109;&#x61;&#x69;&#x6c;&#116;&#111;&#58;&#73;&#114;&#x76;&#x69;&#110;&#x67;&#64;&#x62;&#114;&#x6f;&#111;&#x6b;&#x6c;&#121;&#110;&#46;&#110;&#x65;&#116;&#x73;">&#73;&#114;&#x76;&#x69;&#x6e;&#103;&#64;&#98;&#114;&#111;&#111;&#107;&#108;&#x79;&#x6e;&#46;&#110;&#101;&#x74;&#x73;</a> <br />
<a href="&#x6d;&#x61;&#105;&#108;&#116;&#111;&#58;&#67;&#108;&#x79;&#x78;&#116;&#x6f;&#110;&#x40;&#98;&#114;&#x6f;&#111;&#107;&#108;&#121;&#110;&#46;&#110;&#x65;&#x74;&#115;">&#x43;&#108;&#x79;&#120;&#116;&#x6f;&#110;&#64;&#98;&#x72;&#111;&#111;&#107;&#x6c;&#121;&#x6e;&#x2e;&#110;&#101;&#x74;&#x73;</a> <br />
<a href="&#109;&#x61;&#x69;&#x6c;&#x74;&#111;&#x3a;&#69;&#x64;&#x77;&#97;&#x72;&#x64;&#115;&#x40;&#98;&#x72;&#x6f;&#111;&#107;&#x6c;&#121;&#110;&#46;&#x6e;&#x65;&#x74;&#x73;">&#x45;&#100;&#119;&#97;&#x72;&#100;&#x73;&#64;&#98;&#114;&#x6f;&#x6f;&#x6b;&#x6c;&#121;&#110;&#x2e;&#110;&#x65;&#116;&#x73;</a> <br />
<a href="&#x6d;&#97;&#x69;&#108;&#116;&#x6f;&#x3a;&#66;&#x72;&#111;&#x77;&#x6e;&#64;&#x62;&#x72;&#111;&#111;&#x6b;&#108;&#121;&#110;&#x2e;&#110;&#x65;&#116;&#115;">&#x42;&#114;&#x6f;&#x77;&#x6e;&#x40;&#98;&#114;&#x6f;&#111;&#107;&#108;&#121;&#x6e;&#46;&#110;&#101;&#116;&#x73;</a> <br />
<a href="&#x6d;&#x61;&#105;&#x6c;&#x74;&#111;&#x3a;&#x41;&#108;&#x64;&#x72;&#x69;&#100;&#x67;&#101;&#x40;&#98;&#x72;&#x6f;&#x6f;&#107;&#108;&#x79;&#110;&#46;&#110;&#101;&#116;&#115;">&#x41;&#108;&#100;&#114;&#105;&#x64;&#x67;&#101;&#64;&#98;&#x72;&#x6f;&#x6f;&#107;&#x6c;&#121;&#110;&#x2e;&#x6e;&#101;&#116;&#115;</a> <br />
<a href="&#109;&#97;&#x69;&#x6c;&#x74;&#x6f;&#x3a;&#x47;&#x72;&#105;&#x66;&#x66;&#105;&#x6e;&#64;&#98;&#114;&#x6f;&#111;&#x6b;&#108;&#121;&#x6e;&#46;&#110;&#x65;&#x74;&#x73;">&#x47;&#x72;&#x69;&#102;&#102;&#105;&#x6e;&#x40;&#x62;&#114;&#111;&#x6f;&#x6b;&#108;&#121;&#x6e;&#x2e;&#x6e;&#x65;&#x74;&#115;</a> <br /></p></blockquote>

<p>这里的获取到的Email是另外一个Stream，所以这里必须用flatMap，也即当把player转换为Email后，必须要再flat，变成最初的链中的对象。</p>

<h3>及时求值</h3>

<p>前面讲的操作都是<a href="https://www.geeksforgeeks.org/scala-lazy-evaluation/">惰性求值</a>的，它们都是返回一个Stream，而Stream本身仅是封装操作，其实并没有生成最终值。但有些操作是可以生成最终值的，就是把整个链路的值进行运算，然后生成最终的值，但这个值不再是Stream了，也就是说及时求值操作只能作为链式的终点。</p>

<p><strong>注意</strong>：惰性求值是函数式编程的一个概念，它的主要目的是将行为与结果分离开来，以方便并行化处理。具体可以参阅《函数式编程思维》书中的第4章，有详细的论述。</p>

<h4>count</h4>

<p>计算一下来自『Queens』的球员数量：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kt">long</span> <span class="n">fromQueens</span> <span class="o">=</span> <span class="n">players</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>            <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">player</span> <span class="o">-&gt;</span> <span class="n">player</span><span class="o">.</span><span class="na">getCommunity</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;Queens&quot;</span><span class="o">))</span>
</span><span class='line'>            <span class="o">.</span><span class="na">count</span><span class="o">();</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">fromQueens</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">// Output is: 2</span>
</span></code></pre></td></tr></table></div></figure>


<h4>match</h4>

<p>查看Stream的元素中是否有匹配的条件的，有any意即任意元素有了匹配，all所有，none没有（相当于not all）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kt">boolean</span> <span class="n">fromQueens</span> <span class="o">=</span> <span class="n">players</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>            <span class="o">.</span><span class="na">anyMatch</span><span class="o">(</span><span class="n">player</span> <span class="o">-&gt;</span> <span class="n">player</span><span class="o">.</span><span class="na">getCommunity</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;Queens&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">fromQueens</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">// 是否有人来自于Queens，true</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="n">fromQueens</span> <span class="o">=</span> <span class="n">players</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>            <span class="o">.</span><span class="na">allMatch</span><span class="o">(</span><span class="n">player</span> <span class="o">-&gt;</span> <span class="n">player</span><span class="o">.</span><span class="na">getCommunity</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;Queens&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">fromQueens</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">// 所有人都来自Queens，false</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="n">fromQueens</span> <span class="o">=</span> <span class="n">players</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>            <span class="o">.</span><span class="na">noneMatch</span><span class="o">(</span><span class="n">player</span> <span class="o">-&gt;</span> <span class="n">player</span><span class="o">.</span><span class="na">getCommunity</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;Queens&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">fromQueens</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">// 所有人都来自非Queens，false</span>
</span></code></pre></td></tr></table></div></figure>


<h4>reduce</h4>

<p>折叠或者叫作化约，有些语言也称之为fold，它接收两个参数，第一个是初始值，然后是一个二元操作符BinaryOperator，二元操作的第一个参数是截止目前的结果，第二个参数是当前的元素，然后针对每个元素进行滚动执行这个二元操作符。这么说有点难于理解，我们来个，计算球员们的总得分吧：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kt">int</span> <span class="n">totalPoints</span> <span class="o">=</span> <span class="n">players</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>            <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">Player:</span><span class="o">:</span><span class="n">getPoints</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">reduce</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">);</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">totalPoints</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">// output is 247</span>
</span></code></pre></td></tr></table></div></figure>


<p>再来计算平均命中率：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="n">Optional</span><span class="o">&lt;</span><span class="n">Float</span><span class="o">&gt;</span> <span class="n">averageFieldGoal</span> <span class="o">=</span> <span class="n">players</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>            <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">Player:</span><span class="o">:</span><span class="n">getFieldGoal</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">reduce</span><span class="o">((</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">.</span><span class="na">f</span><span class="o">);</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">averageFieldGoal</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>
</span><span class='line'>    <span class="c1">// Output is 0.40</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果没有初始值，或者初始值是0（针对数值时），为空时（针对对象），那么可以省略reduce的第1个参数，这时它会用第1个元素用作初始值。</p>

<h4>max和min</h4>

<p>寻找最少的篮板数的球员：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="n">Optional</span><span class="o">&lt;</span><span class="n">Player</span><span class="o">&gt;</span> <span class="n">minRebound</span> <span class="o">=</span> <span class="n">players</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">min</span><span class="o">((</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">a</span><span class="o">.</span><span class="na">getRebounds</span><span class="o">()</span> <span class="o">-</span> <span class="n">b</span><span class="o">.</span><span class="na">getRebounds</span><span class="o">());</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">minRebound</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出：</p>

<blockquote><p>&lsquo;Kessler, Edwards&rsquo;, from &lsquo;Staten Island&rsquo;, scores=8, rebounds=2, fieldGoal=97.53% <br/></p></blockquote>

<p>寻找命中率最高的球员：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="n">Optional</span><span class="o">&lt;</span><span class="n">Player</span><span class="o">&gt;</span> <span class="n">bestShooter</span> <span class="o">=</span> <span class="n">players</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">max</span><span class="o">((</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">a</span><span class="o">.</span><span class="na">getFieldGoal</span><span class="o">()*</span><span class="mi">100</span><span class="n">f</span> <span class="o">-</span> <span class="n">b</span><span class="o">.</span><span class="na">getFieldGoal</span><span class="o">()*</span><span class="mi">100</span><span class="n">f</span><span class="o">));</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">bestShooter</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出：</p>

<blockquote><p>&lsquo;Bruce, Brown&rsquo;, from &lsquo;The Bronx&rsquo;, scores=25, rebounds=15, fieldGoal=88.19% <br/></p></blockquote>

<p><strong>注意</strong>：reduce无初始值时，max和min返回的都是Optional，因为可能会取不到具体的值。</p>

<h2>This is just the beginning</h2>

<p>学无止境，Stream API还有很多高级的工具，以及Java 8的新特性也还有很多，还有待后面继续深入学习。</p>

<h2>Android SDK的支持情况</h2>

<p>进入智能手机时代和移动互联网时代，Java曾一度没落，好在安卓的官方开发语言是Java，这也让Java没有被丢弃，虽然现在谷歌力推Kotlin，不过Java仍是安卓 开发的首选语言，且仍在被广泛使用。不过，安卓的Java，并不是Oracle的Java SE，而是基于Apache开源的OpenJDK，这货自Java 1.6版本以后就没怎么更新，而作为downstream的安卓，更是一直停留在1.6的版本上面，这也导致了安卓开发人猿一直未能跟紧Java的发展，当然 这也是Kotlin自推出以来大受安卓开发人猿欢迎的原因。好在谷歌也在推进，它是以打包插件的方式来支持Java 7和Java 8的部分子集。现在AGP（Android Gradle Plugin）4.0以上的版本，是可以使用大部分Java 8的特性的，前面讲述的lambda，Optional，函数接口和Stream等都是可以直接使用的，只要把AGP的版本升级到4.0以上，sourceCompatibility选择VERSION_1_8，就可以了。</p>

<p>可以参阅<a href="https://developer.android.com/studio/write/java8-support">官方文档</a>。而<a href="https://tech.meituan.com/2019/10/17/android-java-8.html">这篇文章</a>相当不错的阐述一些详细的原因，可以仔细读一下。</p>

<h2>优质书籍</h2>

<p>编程范式的学习曲线都是非常陡峭的，函数式编程注重的是行为的抽象，以行为（函数）为第一要素来构建解决方案，这需要思维的转变。并不是说你用了一个lambda就是函数式编程了。因此需要系统化的学习。而系统化的学习，最好的方式就是去啃书（没说看，是要啃书）。</p>

<p>下面列出关于函数式编程，特别是用Java 8进行实践函数式编程的几本非优质的书籍：</p>

<h3><a href="https://www.oreilly.com/library/view/functional-thinking/9781449365509/">Functional Thinking</a></h3>

<p>中译名是《函数式编程思维》，是由Neal Ford出品的佳作，专门讲述如何Thinking in Functional Programming。这本书也不是很厚，非常值得看。因为是重点讲解函数式编程思维 的，所以它用了Java/Scala和Groovy，并且Java的版本还不是Java 8的。</p>

<p>这里也要说一下，编程范式跟语言是否直接支持没有关系，它更是一种思维抽象方法，比如用C也能写出完全符合面向对象的代码；用Java 7以前的版本也能写出函数式程序。</p>

<h3><a href="https://www.amazon.com/Java-Lambdas-Functional-Programming-Masses/dp/1449370772">Java 8 Lambdas: Functional Programming For The Masses</a></h3>

<p>中译名是《Java 8函数式编程》，由Richard Warburton写的。里面有丰富的实例和练习题，也不厚，专注于讲解如何用Java 8来实践函数式编程。</p>

<h3><a href="https://www.manning.com/books/java-8-in-action">Java 8 in Action</a></h3>

<p>中译名《Java 8实战》，由三位作者Raoul-Gabriel Urma, Mario Fusco, and Alan Mycroft合著。内容其实与前面那个差不多，但略有不同，这本书是重点讲解Java 8的新特性的，当然大量篇幅也是讲用Java 8实践函数式编程的（因为Java 8最重要的改进就是对函数式编程的支持），但还有其他的内容。并且这本书较厚，里面各种知识点讲解比较详细。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://stackify.com/streams-guide-java-8/">A Guide to Java Streams in Java 8: In-Depth Tutorial With Examples</a></li>
<li><a href="https://www.exception.site/java8/java8-new-features">Java8 新特性教程</a></li>
<li><a href="https://juejin.cn/post/6844903830254010381">[译] 一文带你玩转 Java8 Stream 流，从此操作集合 So Easy</a></li>
<li><a href="https://segmentfault.com/a/1190000022791696">Java8 Stream完全使用指南</a></li>
<li><a href="https://www.baeldung.com/java-8-streams">The Java 8 Stream API Tutorial</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[玩转安卓运行速度优化]]></title>
    <link href="http://toughcoder.net/blog/2022/01/14/android-cpu-optimization-made-easy/"/>
    <updated>2022-01-14T23:14:55+08:00</updated>
    <id>http://toughcoder.net/blog/2022/01/14/android-cpu-optimization-made-easy</id>
    <content type="html"><![CDATA[<p>早在许多年以前写过<a href="http://toughcoder.net/blog/2015/09/11/android-performance-profiling-made-easy/">一篇安卓性能优化文章</a>，时过境迁，很多事情都有了变化，所以再专门针对程序运行速度和渲染的优化，这两方面非常直接的影响应用程序的操作流畅度，也可以称作流畅度优化方法，但更为专业的方式就是CPU优化，因为就是要提高代码的运行速度。</p>

<p><a href="http://toughcoder.net/blog/2022/01/14/android-cpu-optimization-made-easy/"><img src="https://bs-uploads.toptal.io/blackfish-uploads/uploaded_file/file/192945/image-1582543505866-a62a10ab903703bc995fcaab8ccd0bd0.png" title="auto auto" ></a></p>

<!-- more -->


<h2>需要优化的地方</h2>

<p>总的来说，就是应用程序运行要快，大体可以分为三块：</p>

<h3>应用启动要快</h3>

<p>从用户点击了桌面的图标到用户能完整见到页面，这个过程要快。其实也不是快，而是没有能从用户感知得到的卡，或者黑屏或者白屏。</p>

<h3>渲染要快</h3>

<p>也就是说View的渲染要快，无明显的Jank，也即卡顿和丢帧。</p>

<h3>操作要流畅</h3>

<p>主要是针对动画，滑动，转场的时候要流畅，也并不一定就是要真的快，而是说从用户感知的角度来看没有明显的卡顿和丢帧。</p>

<h3>业务逻辑要快</h3>

<p>也就是说要快速的完成你的业务逻辑，这个其实没有办法一概而论，取决 于具体的业务逻辑和实际的使用场景，比如网络不好的时候肯定啥都慢啊。</p>

<p>我们常说的性能优化，一般重点是在启动，渲染和操作流畅度上面下功夫，因为这些东西的优化方法更为通用一些，用户感知也更明显一些。也将是我们后面要讨论的重点内容。而至于像业务逻辑，每个具体的应用程序都不一样，所以没有办法一概而论，而常规的一些小的优化技巧也不会起决定性使用。比如说I/O优化方法，缓存的使用，以及像内存优化等等，确实能帮助你的业务逻辑。但如果业务逻辑就是特别复杂，或者代码写的很差劲，明明一个网络请求就能搞定的事儿，非要弄四五个请求，那你再怎么优化细节，比如把每个请求速度都优化到最好，I/O优化到最好，也是没有多大提升的。</p>

<h2>运行速度分析方法</h2>

<p>前面提到的启动优化，渲染优化和操作流畅度优化，其实都是针对CPU的优化，也即代码执行的优化，只不过重点分析那三个场景而已。</p>

<p>具体的分析方法主要就有两方面，一是用Profiler抓取trace，另外就是可以在代码中加入打点数据。</p>

<p>可以先行用代码代码打点的方式进行粗略的量化，比如说看onCreate执行了多久，看onResume执行了多久，这有两方面好处，一是可以粗略的定位问题，二是方便监控，比如你优化前与优化后的对比，能知道到底是否真的有提升。</p>

<p>精细化分析的方法就是抓trace，然后看具体哪里耗时了，具体使用方法可参后面的罗列的资源都相当详细，就不重复了。</p>

<p>需要注意的就是分析trace时除了用<a href="https://developer.android.com/studio/profile/android-profiler">Profiler</a>以外，还可以用<a href="https://ui.perfetto.dev/#!/">Perfecto</a>，这个功能更为强大。</p>

<h2>优化方法</h2>

<p>具体的优化方法，就没有银弹了，做的事情特别多，代码特别复杂，逻辑特别多特别复杂，优化起来难度自然很大。</p>

<p>核心的原则就是少，少即是多，少做事，特别是主线程，能lazy则lazy，能异步则异步，涉及I/O时，要多用BufferedStream，巧用缓存，buffer尽可能要是8k大小（8192），有重I/O的场景要用nio库。View tree要尽可能精简和扁平，某些特殊条件才会显示的页面就用ViewStub先占着等等。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://juejin.cn/post/6950608825942868004">Android 性能优化总结</a></li>
<li><a href="https://developer.android.com/studio/profile/cpu-profiler">Inspect CPU activity with CPU Profiler</a></li>
<li><a href="https://developer.android.com/topic/performance/tracing">Overview of system tracing</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/27331842">手把手教你使用Systrace（一）</a></li>
<li><a href="https://source.android.google.cn/devices/tech/debug/systrace">Understanding Systrace</a></li>
<li><a href="https://developer.android.com/studio/profile/measuring-performance">Overview of measuring app performance</a></li>
<li><a href="https://developer.android.com/studio/profile/benchmarking-overview">Benchmark your app</a></li>
<li><a href="https://blog.csdn.net/u011578734/article/details/109497064">性能分析工具Systrace的使用详解</a></li>
<li><a href="https://juejin.cn/post/6844903912395243533">Android Systrace 使用方法</a></li>
<li><a href="https://juejin.cn/post/6844903734263152653">Android性能优化之CPU Profiler</a></li>
<li><a href="https://www.jianshu.com/p/38fbf61c48c5">CPU Profiler 使用指南</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让你不再惧怕内存优化]]></title>
    <link href="http://toughcoder.net/blog/2022/01/13/android-app-memory-optimization-made-easy/"/>
    <updated>2022-01-13T23:37:36+08:00</updated>
    <id>http://toughcoder.net/blog/2022/01/13/android-app-memory-optimization-made-easy</id>
    <content type="html"><![CDATA[<p>之前曾经写过一篇关于<a href="http://toughcoder.net/blog/2015/09/11/android-performance-profiling-made-easy/">如何做性能优化的文章</a>，现在针对内存这一专项再做精细化的讨论。对于安卓应用开发来说，内存究竟会遇到什么样的问题，有什么方法可以用来测试和分析，以及有什么样的策略可以去实践优化，今天就来好好聊聊这个话题。</p>

<p><a href="http://toughcoder.net/blog/2022/01/13/android-app-memory-optimization-made-easy/"><img src="https://blog.singsys.com/wp-content/uploads/2017/09/memoryLeak.jpg" title="auto auto" ></a></p>

<!-- more -->


<h2>缘起</h2>

<p>现代计算机是基于冯*诺依曼架构的，计算机的软件是运行在内存之中的，进程（也即运行中的程序）会耗费一定的内存，才能够正常执行。
在软件开发的中世纪，C和C++盛行的时代，是由软件开发人员（下称猿）自己管理内存，也就是说猿自己申请内存，并处理申请不到内存的情况，并在使用完成后自己负责释放内存，这无疑会加大程序开发难度，产生一些难以调试的问题，如内存越界或者内存踩踏。到了近现代，自动内存管理成为主流，研发人员不再用自己去手动管理内存了，尽管用，可劲儿造，由GC（也即是Garbage Collector内存回收器）来善后。</p>

<p>这极大的解放了研发人员的双手，可以让他们把更多的精力放在接收产品经理的需求上面了，三天一小需求，一周一大需求，产品迭代速度相当快，业务发展迅速，老板相当高兴啊，这干掉BAT指日可待，赶英超美就在明天，IPO触手可及。然而，现实是极其骨感的。</p>

<h2>内存问题会引发什么问题</h2>

<p>对于安卓 应用程序来说，内存优化很重要，因为Java VM本身就是比较耗资源的，当应用复杂到一定程度的时候，就会出现由内存使用不当造成的问题。如，测试同学反馈说应用越用越卡，经常crash，用户也反馈说应用越来越不好用了。老板把老猿叫进办公室一顿骂，然后老板让老猿尽快来解决一下问题。</p>

<p>老猿只得把需求放一边，花时间看一看这些问题，然后说凭我多年经验来看，这怕是内存出了问题。</p>

<p>前面提过，现代编程语言一般都有GC，帮助研发人员管理内存。但由于各种原因，还是会出现内存相关的问题。</p>

<p>特别是对于安卓猿来说，实现应用的编程语言是Java（准确说是JVM，Java和Kotlin 以及像Scala都是基于JVM的编程语言），天生支持GC，导致很多人对内存管理知之甚少。当应用程序复杂到一定程度，当源码庞大到一定的量级时，性能问题，特别是内存性能问题便随之而来。</p>

<p>具体可能是内存出现问题的场景有：</p>

<ol>
<li>OOM导致的crash。OOM，也即OutOfMemoryError，可能发生在任何地方，当Heap中可用内存不足时，便可能会遇到此类crash</li>
<li>应用程序越用越慢，出现黑屏或者白屏。</li>
<li>UI操作出现卡顿，不流畅。造成UI卡，不流畅的原因很多，当排除了其他原因时，就是内存问题了</li>
<li>应用程序莫名闪退</li>
</ol>


<h2>内存问题的具体类型及其原因</h2>

<p>要想做好内存优化，则必须先弄懂内存问题的根本原因，然后再对内存问题进行归类，最后是通过技术手段来解决。</p>

<h3>内存问题的根本原因</h3>

<p>安卓应用程序是由Java构建的，而Java是支持GC的编程语言，所以安卓猿是不需要自己手动的去做内存管理的，只管不停的创建对象即可，Java虚拟机（JVM）会帮助我们管理内存，当有不用的对象时会自动被GC。</p>

<p>但是Java应用程序（当然也包括安卓）还是会遇到内存问题，主要是两类，一类是内存不合理使用，如内存使用过多，频繁创建大量对象，内存碎片等等；二是内存泄露。很多人会把二者混为一谈，网络上绝大多数文章一谈性能优化，一谈内存优化，必然说到内存泄露，但其实并不严谨。内存泄露确实是最常见的内存优化内容，也确实是内存使用不合理的最常见问题，但内存问题并不局限于内存泄露。</p>

<h3>内存使用不合理</h3>

<p>主要分为三个方面：</p>

<ol>
<li>浪费内存，简单来理解就是用一个人住着一千平米的大平层</li>
<li>大量创建小对象，产生碎片，内存碎片会造成JVM中的内存管理效率变低，当后面申请大块内存的时候效率就变差，它需要把小对象（碎片）进行转移压缩，以腾出更大的空间给大的对象使用。简单理解，这个时候JVM的效率就会变差，你的应用程序性能变差，甚至可能引起卡顿。</li>
<li>频繁创建对象，特别是较大的对象，造成内存抖动，也即应用程序使用的内存忽多忽少，会频繁的触发GC，从而影响JVM的运行效率。</li>
</ol>


<h3>内存泄露</h3>

<p>JVM是支持自动GC的，也就是说JVM帮助你管理内存，当有不再使用的对象时，会被JVM自动回收，此称之为GC（Garbage Collection）。但如果对象长期处于『使用』状态，并且超出了它本应该存的周期，无法被及时GC，这就会造成泄露。一般来说，这也没啥影响，但是如果泄露的对象太多，或者泄露的时间够长，就会把系统配额Java Heap空间耗尽，应用程序便会因没有内存创建对象而OOM，就会crash。即使没有crash，因为剩余空间较少，会频繁触发GC，从而导致应用程序卡顿严重。</p>

<p>内存泄露的根本原因是<strong>对象的生命周期错乱</strong>，对象存活了超过了其本该的生命周期，或者简言之，一个本该是较短的生命周期的对象被一个更长生命周期的对象所引用着，就会导致它本该生命周期结束时无法被GC，便产生了泄露。</p>

<p>这是要重点关注对象的生命周期，只有管理好了对象的生命周期，才能彻底的解决内存泄露问题。</p>

<h3>安卓应用中的生命周期</h3>

<h4>短生命周期的对象</h4>

<p>安卓应用程序里面，有一些是短生命周期的，或者说有明显生命周期，且不是由研发人猿自己控制的，如框架层控制的那一坨东西。</p>

<ul>
<li>Activity</li>
<li>Fragment</li>
<li>View</li>
</ul>


<p>特别是Activity，它也是内存泄露的头号对象，90%的内存泄露都是Activity对象。这货完全由系统框架控制，并且有明显的生命周期，而且还有重建实例的情况（涉及状态恢复时），所以它的生命周期其实相当短暂，并且它跟进程和主线程没有任何关系，Activity退出 了（走了onDestroy）进程仍还在，主线程也仍还在。而，又因为它是应用程序的第1级入口，应用程序所有的对象，以及GUI所有的东西，全部都由Activity直接或者间接持有，换句话说，Activity泄露了，你整个应用程序的对象也基本上全泄露了。</p>

<h4>长生命周期对象</h4>

<p>这里所谓的长生命周期，是指它们的生命周期是与进程绑定的，除非进程退出，或者明显的执行一些退出，否则一直随进程而存在：</p>

<ul>
<li>Looper，或者说消息队列，这玩意儿除非主动quit，否则一直存在。主线程的Looper与进程同在，自己创建的Looper要手动退出才算终结。</li>
<li>被static修饰的成员变量，这东西的生命周期是跟进程一样的</li>
<li>单例，单例必须由static来修饰，所以与进程生命周期是一样的，进程在，则单例在</li>
<li>线程池，或者一个长时间运行的thread，除非主动去shutdown</li>
<li>RxJava的Schedulers，这玩意跟looper一样，都是长时间运行的消息队列，且与进程绑定的</li>
<li>系统框架，手机还在开机系统框架就在运行，所以它的生命周期远远长于某一个应用程序</li>
<li>Application和ApplicationContext，这东西与进程生命周期是一样的，相当于单例了</li>
</ul>


<h4>业务逻辑中的生命周期</h4>

<p>业务逻辑就纯属于应用程序的本身逻辑了，无法一概而论，但一般来说，主页面的生命周期肯定是长于某个子页面的。那么子页面在其退出后，理论上它的绝大多数对象应该要被回收。</p>

<h2>如何发现内存问题</h2>

<p>生活中不是缺少美，而是缺少发现。</p>

<p>对于内存优化，第一步就是要通过各种测试手段发现问题。最理想的情况是建立一种监控手段，这样最能保住革命果实，以及非常及时的发现问题。</p>

<p>这里指的是一般性的粗略手段来发现你的应用有内存问题了，可能需要优化了。并且这些测试方法最好能做成定期监控，这样一旦内存性能有回撤时，能尽快发现。</p>

<h3>『队长，我们暴露了』</h3>

<p>很多时候都是问题主动找上门来了。</p>

<h4>前方有雷区</h4>

<p>很不幸，你的应用程序中弹身亡（crash了），还是OOM。这是Java语言中的一个运行时的错误，可能在创建任何对象时发生，但一般来说创建比较大的对象时，这里的大是指对内存需求大，如图片，或者大块数组时，更容易发生。</p>

<p>当你的应用程序出现了OOM的时候，就是一个特别明显的信号，告诉你要重视内存优化了。</p>

<h4>遇到终结者了，是lowmemorykiller</h4>

<p>有时候，没有明显的错误，但是应用却闪退了，特别是在后台，或者跳到其他应用页面时。</p>

<p>这个会比较隐蔽，通常会引发其他表象的问题。最明显的问题就是，当跳转到其他页面，再返回时，发现原来的页面状态不存在了，比如你的应用要访问一个URL，跳转到了网页浏览器，但从浏览器返回时，要么你的应用不在了，要么你的应用的原先状态不在了。这其中的原因就是当你的应用不在前台了，就被系统回收了，其中一个占大头的原因就是占用内存太多，被系统的lmk（lowmemorykiller）干掉了。</p>

<p>因为系统要保证整个设备的正常运转，所以会把占用内存太多的先杀掉，以释放内存。</p>

<p>当你的应用频繁的遇到被lowmemory killer干掉时，也是一个明显的信号，要重视内存优化了。</p>

<h4>读懂系统GC日志</h4>

<p>有些时候不像前面那样严重，但是查看logcat日志时，能发现大量的GC日志，就像这样的</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>259857:01-08 20:00:17.836 10083 26337 26347 I test.test: NativeAlloc concurrent copying GC freed 141174(6852KB) AllocSpace objects, 29(12MB) LOS objects, 49% free, 24MB/48MB, paused 180us total 308.126ms
</span><span class='line'>279178:01-08 20:00:19.618 10083 26337 26347 I test.test: Background young concurrent copying GC freed 469755(20MB) AllocSpace objects, 40(3608KB) LOS objects, 41% free, 28MB/48MB, paused 396us total 124.817ms</span></code></pre></td></tr></table></div></figure>


<p>这是系统在进行GC，通常来说这没有什么问题。但如果在短时间内，比如某个页面，点了某个按扭后大量出现此类日志，也是一个明显的信号，告诉你要重视内存优化了。</p>

<h3>主动出击，以攻为守</h3>

<p>作为一个优秀的猿，不能坐着等问题上来，要能主动的去创造问题。每当完成一个需求后，或者写了一大坨代码以后，就需要主动的去查看一下内存方面是否有需要优化的地方。我们可以通过如下测试方法，来看内存是否有问题，是否需要做优化。重点就是看应用程序在一定时间内，使用的内存是否一直在增长， 有没有抖动，并且在GC后，或者退出 后是否仍不回落。</p>

<h4>meminfo</h4>

<p>具命令是adb shell dumpsys meminfo <package>，这个命令还是比较常见的，网上有很多资料可以用，可以看后面罗列的参考文章中来详细了解它的具体用法以及各个字段的意义，这里就重复了。</p>

<ul>
<li><a href="https://developer.android.com/studio/command-line/dumpsys">dumpsys</a></li>
<li><a href="https://blog.csdn.net/feelabclihu/article/details/105534175">dumpsys meminfo 的原理和应用</a></li>
<li><a href="https://www.cnblogs.com/helloTerry1987/p/13109971.html">adb shell dumpsys meminfo 详解</a></li>
<li><a href="https://www.jianshu.com/p/37539308ff32">dumpsys meminfo 含义</a></li>
</ul>


<p>需要关注一下重点，就是，可以重点看Java Heap一栏的数据变化，这是Java层的占用内存情况。另外就是每次运行meminfo其实会对进程产生影响。所以，这个命令可以用来粗维度的监控，查看一些信息，做一些定性的分析。</p>

<p>它最大的优点是方便，且只要是进程都可以查看，不用有源码。</p>

<h4>Android Studio的Memory Profiler</h4>

<p>在远古时代安卓SDK中会有DDMS，里面是一套调试工具，但现在都集成到Android Studio的Profiler里面了，通常会在下方的工具栏里面，如果 没有就到菜单View->Tools Window->Profiler把它调出来。然后选择要调试的进程，默认它会把CPU，Network，Memory和功耗都显示，这里可以双击Memory那一坨，就会进入专门的内存页面。</p>

<p>它会以时间轴的方式来图形化的展示内存使用情况，非常的直观和方便。通过这个可以直观的看到两个问题，就是嫌疑内存泄露以及内存抖动。</p>

<p>嫌疑内存泄露就是看到曲线一直在增长，且通过显示GC，或者退出后，或者停止某项目操作后，仍不回落的，这就非常有可能有泄露的存在，泄露是超出了它本该的生命周期，比如某一操作结束了，退出 了某一页面，甚至退出应用了，内存仍没有回落，就可能有问题。</p>

<p>另外就是内存抖动，就是能看到内存曲线 有毛刺，短时间内忽上忽下的，这就是内存抖动。</p>

<h4><a href="https://square.github.io/leakcanary/">leakcanary</a></h4>

<p>这货也是非常流行的，专门用于检测内存泄露的工具，它的功能较为强大，除了可以监控以外，还可以给出详细的trace。具体使用可以参考官方的文档，并不难。</p>

<p>但它最大的问题在于，必须参与项目构建。假如你想研究一下竞品的情况，就没有办法了。</p>

<h2>如何调试内存问题</h2>

<p>通过前面提到的手段，我们可以发现内存有一些问题了，需要进行内存方面的优化了，但这还不够，还需要一些精细化的调试方法来具体定位问题，这样才能更好的去进行优化。</p>

<p>那么有哪些具体的调试方法呢？</p>

<h3>Allocation tracer</h3>

<p>这个是前面提到的Android Studio Profier里面的工具。用Profiler可以发现问题，但还需要进一步的深入的分析问题。这就需要Allocation tracer了。</p>

<p>具体做法就是，当你发现某一系列操作后内存一直增长，或者看到有抖动现象时，就可以抓取这段时间的Heap dump，然后详细分析，现在Android Studio都集成好了，只需要点几下，就能抓到，并把结果列出来，可以看到具体创建哪些对象，以及它们的引用关系是怎样的。</p>

<p>可以参考 以下资源来详细了解如何使用此工具：</p>

<ul>
<li><a href="https://developer.android.com/studio/profile/android-profiler">The Android Profiler</a></li>
<li><a href="https://developer.android.com/studio/profile/memory-profiler">Inspect your app&rsquo;s memory usage with Memory Profiler</a></li>
<li><a href="https://juejin.cn/post/6844904080691691533">Android 内存优化篇 - 使用profile 和 MAT 工具进行内存泄漏检测</a></li>
</ul>


<h3><a href="https://www.eclipse.org/mat/">MAT</a></h3>

<p>这是专门用于Java heap内存分析的工具，相当强大。但不能直接使用。</p>

<p>需要先想办法抓取进程的heap dump，然后转换为Java标准的格式（因为安卓的Heap与Java SE的并不一样，安卓 SDK中有转换工具），然后再用MAT打开即可，它的功能要远强大于前面的提到的Allocation tracer。所以，如果要深度的分析和优化，还是要用MAT。</p>

<p>关于MAT的具体使用方法，可以参考以下资源：</p>

<ul>
<li><a href="http://wiki.eclipse.org/MemoryAnalyzer">官方文档</a></li>
<li><a href="https://blog.csdn.net/shulianghan/article/details/106958491">【Android 内存优化】使用 Memory Analyzer ( MAT ) 工具</a></li>
<li><a href="https://androidperformance.com/2015/04/11/AndroidMemory-Usage-Of-MAT/">Android 内存优化(1) - MAT 使用入门</a></li>
</ul>


<h3>leakcanary</h3>

<p>除了能监控以外，它还能分析具体的内存泄露，并给出trace，所以当发现问题后，具体定位问题的时候，也可以使用此工具，还是相当强大的。</p>

<p>它的使用相当简单，直接把它加入到dependencies，然后构建 就好了。</p>

<p>至于它的分析结果也是相当直观的，会以Notification的方式通知你，点开后有一个页面展示出引用关系链，然后判断是否是泄露，即可。</p>

<p>详细可以参阅它的<a href="https://square.github.io/leakcanary/getting_started/">官方文档</a>就可以了。</p>

<h2>如何优化内存</h2>

<p>内存优化，一大半在于测试，监控和调试分析，约占70%，这部分是重头，因为只有找到具体的代码位置，才好去修复问题，并且修复后还要验证问题是否真的修复了。不能光在那里看代码，想当然的认为把几个内部类改为static，或者传递引用了ApplicationContext，就能优化了内存。</p>

<p>对于性能优化，当然也包括内存优化，必须用测试手段进行量化，以此来验证是否真有有改善。</p>

<p>本节内容，假设已通过前面提到的测试方法发现了内存问题，并通过调试手段定位到了具体位置。优化的手段也要针对 具体的问题来进行：</p>

<h3>避免内存泄露</h3>

<p>内存优化的大头是要避免泄露，所以重点来谈谈如何避免内存泄露。</p>

<p>前面提到了，内存泄露的根本原因是生命周期混乱，较长生命周期的对象，甚至是超长生命周期的对象，持有了较短生命周期的对象，这一定会导致泄露。所以，要想真的解决内存泄露问题，必须设计好对象的生命周期，这是根本解决之法。</p>

<h4>要尽可能的，缩小对象的生命周期</h4>

<p>对象的生周期不应该超出它本该存在的范围，并且应该尽可能的减少对象的生命周期，这个可能在设计阶段考虑到。但一般较难执行，代码复杂了，很难控得住。</p>

<h4>对于超过Activity生命周期的对象要及时清理</h4>

<p>前面提到过的超长生命周期的东西，如Looper，如Frameworks，如单例，如RxJava的Schedulers，如线程池，这些东西的生命周期远长于Activity，所以，一定要在对应的地方，及时清除对Activity的引用持有。</p>

<p>后面的参考 资料里面也有大量的实用建议可以参考，这里就不重复了。避免内存泄露应该要被总结成为编程规范，然后在团队内部推行，当然也可以设计一些源码静态检测工具，来强制执行。当然，再好的工具和规范也需要人来遵守，任何事情能够在编码阶段防止发生，成本是最小的，收益 是最大的。</p>

<h4>WeakReference和SoftReference不是救命稻草</h4>

<p>千万不要用WeakReference和SoftReference这东西来修复内存泄露问题，它们根本就不是用来修复内存泄露问题的。</p>

<p>再说一遍，内存泄露是由生命周期混乱造成的。</p>

<p>如果强行使用WeakReference来代替原来的强引用，就会造成想使用对象的时候它却被回收了，这时你的正常逻辑就没法走了，而且如何正确的处理这种异常case，也是很难恰当 的处理的。</p>

<p>WeakReference这东西最最合理，最为适合的场景就是缓存里面，也就是说它本身是用于一种可有可无的引用关系，这样一旦被GC了，也不会影响原有逻辑，因为对象本来就可能在，也可能不在缓存里面，使用者必须处理在或者不在两种case。因为缓存的清理可能不够及时（必须由编码人员手动设置条件去清理，比如在退出的时候），当JVM需要GC时，因为都是WeakReference，GC就可以快速的回收对象释放内存。</p>

<h4>不要到处给对象引用置为null</h4>

<p>很多有过C++经验的同学，可能会习惯在对象使用完成后，手动把对象置为null。但其实这是完全没有必要的，只会造成不必要的混乱，JVM会自己去追踪每个对象，它到底还有没有被引用持有着。我们要把精力重点放在对象生命周期的把控上面，简单的置为null，不会缩减对象的生命周期，所以它对解决和防止泄露方面没有任何帮助。</p>

<h3>内存使用优化方式</h3>

<p>除了避免内存泄露，其他一些方式也是有很多技术可以用于优化的。</p>

<h4>减少内存浪费</h4>

<p>内存浪费，就是使用了没必要的内存，虽然可能不会引发问题，但是还是会增加风险，比如同样都是后台进程，你的应用占用内存稍大了一些，被杀的风险就高了一些。</p>

<p>减少内存浪费，核心的方法就是按需申请，特别像图片这种内存占用大户，一定要按需要来加载，何为需要就是目标View的大小，具体可以看官方教程<a href="https://developer.android.com/topic/performance/graphics/load-bitmap">Loading Large Bitmaps Efficiently</a>。以及尽可能的<a href="https://developer.android.com/topic/performance/graphics/manage-memory">要复用bitmap</a>。</p>

<p>再如资源图片，设置合理的分辨率，没有必要啥都上高清，且要为低精度设备提供单独的一套资源。</p>

<p>以及像不是要求那么清晰的场景就用RGB_565，而非RGBA_8888等等，这些都是在编码的时候就可以提高内存使用的方法。</p>

<h4>使用缓存</h4>

<p>缓存是计算机史上最伟大的发明，甚至是人类史上最伟大的发明，它无处不在从硬件到软件都会使用缓存，并且它在各种东西的设计之中都是很重要的一部分。</p>

<p>前面提到的内存抖动问题，就需要用缓存来解决，以避免频繁创建对象。特别是涉及图片的场景，比如流行的图片加载开源库里面都有专门的缓存的机制，有些是二级，有些是三级。当需要设计缓存时，可以重点参考图片加载库中的缓存设计。</p>

<p>另外，SDK中也有标准的缓存组件可以用，<a href="https://developer.android.com/reference/android/util/LruCache">LruCache</a>，这是针对内存层面的缓存，可以看<a href="https://www.jianshu.com/p/e09870b60046">这篇文章</a>来详细了解使用方法。</p>

<h4>合理复用对象</h4>

<p>这里的意思是使用像<a href="https://en.wikipedia.org/wiki/Flyweight_pattern">享元这样的设计模式</a>，来合理的复用对象。</p>

<p>需要注意的是享元(Flyweight Pattern)的适用场景，它适用于创建对象的成本较高，比如创建对象需要的一些资源较昂贵，不同的对象仅是有不同的属性，或者说对象本身在使用的时候的表现是不同的。</p>

<p>一个典型的例子就是绘图的形状，比如一个页面有大量的不同的形状需要绘制，有方的，有圆的，有白色的，有彩色的，有实边的有虚线的。常规的思路是一个基类叫Shape，里面有各种属性，还有一个draw方法，子类可以定义不同的属性，各自实现draw方法。然后根据需求创建一大坨具体的对象，遍历调用draw方法。这是面向对象编程（OOP）中的非常标准的多态（Polymophsim）。事实上，你只需要创建一个对象就够了，它会根据不同的属性画出不同的效果。这就是设计模式中的享元模式，具体可以参考<a href="https://refactoring.guru/design-patterns/flyweight">这篇文章</a>来详细了解。</p>

<h2>认识几种不同的内存类型</h2>

<p>通过各种工具查看的内存时，如通过meminfo以及像Memory profiler，但可以发现有不同种类，需要重点关注以几种：</p>

<h3>Java Heap</h3>

<p>也即通常意义上的heap内存（堆内存），名字可能会是Java，Java Heap，或者Java allocate，但都是一样就是指纯Java代码中通过new创建对象时使用的内存。</p>

<h3>Native Heap</h3>

<p>因为Java是支持JNI与C/C++接通，也即native方法，那么通过native方法创建的对象是计算在Native之中的，它与Java层是分开的，当然通过native方法（malloc或者new）创建的对象，要记得去释放，否则是一定会泄露的。</p>

<p>因为Android的大部分是由C/C++实现的，Java层仅是封装，Frameworks层大部分功能都由JNI转到native层去实现的，因此native这部分的内存也是很多的，并且由于Frameworks本身会大量调用JNI native层，所以即使你的应用程序根本没有用到JNI，但是还是会看到Native内存使用。</p>

<h3>Graphics</h3>

<p>主要是涉及OpenGL ES的相关内存占用，如GL Surfaces，如Texture或者如Framebuffer等，它们所占用的内存。</p>

<p>这里需要特别注意的是，即使你的应用没有用到OpenGL相关的东西，但仍可能会有此部分内存占用，这是由于硬件加速本身也是通过OpenGL ES实现的。</p>

<h3>ion内存</h3>

<p>这个是为了效率，直接从kernel层开出shared buffer，以加速内存使用效率，这个是偏底层的，普通app是用不到的。</p>

<p>可以参考一下这个<a href="https://www.cnblogs.com/willhua/p/10029280.html">The Android ION memory allocator</a>。</p>

<h3>共享内存</h3>

<p>可以理解为Linux中的匿名共享内存，可以用来实现IPC通信，但它并不会被Profiler计算在Java或者Native里面。非死不可出品的Fresco当初牛逼的地方就在于把Bitmap放在匿名共享内存里面，从而不占用应用自己的Heap空间。</p>

<p>可以参考这两个文章：</p>

<ul>
<li><a href="https://juejin.cn/post/6844904053961392141">Ashmem(Android共享内存)使用方法和原理</a></li>
<li><a href="https://developpaper.com/android-shared-memory/">Android shared memory</a></li>
</ul>


<h2>学无止境</h2>

<p>深入学习GC相关知识，如JVM的GC如何演进。</p>

<p>也可以学习一下其他编程语言的GC机制。</p>

<h2>不要过早优化，更不能过度优化</h2>

<p>性能优化这个事情是要在架构设计和产品设计阶段就需要考虑的事情，比如是否要加入缓存。</p>

<p>但如果前期想太多，会造成严重的扭曲，会让你陷入无限的复杂问题里面，难以自拔（本是问题1，但是变成了问题A，问题B，直到问题z，最初的问题1却被忽略了），反倒不是好事情。</p>

<p>最为想理的情况就是小步迭代，先提出能满足需求的最小版本，然后逐步迭代。比如说做一个新的feature的时候，先用最简单的架构和设计来实现，然后考虑补充细节，处理异常case，再考虑可能的扩展，然后考虑性能优化。</p>

<h2>剩下的是态度</h2>

<p>不是说一线开发的态度，而是老板们的态度。</p>

<p>性能问题是直接影响体验，所以只有重视体验的老板才会重视性能问题。而且这也不是研发猿的问题，需要测试，产品都要能重视性能问题，才能最终把性能做好。产品同学不能只顾着提需求，也要平衡性能，并且给研发同学一定的时间去注重性能问题，而测试同学更加重要，需要不断精进你的测试方法，帮助研发同学更好的解决问题，并且要有监控手段，比如说A版本做了性能优化专项，那么为了保留革命果实，需要有一种监控手段，以防性能出现重大回撤。</p>

<p>很多事情不能怪研发，就像有一位技术相当不错的同事说过的话，当时大家聊起性能优化的事情，他说：『道理大家都懂，但当左边是产品经理在那里崔需求，右边是设计师在那说按扭还差几个象素，测试同学在那崔你赶紧发版本啊，我还等着测完回家呢！当你处在这种条件下，谁TMD的还管性能啊，先实现了再说吧，甚至代码格式都懒得改了。』</p>

<p>所以，这是整个工程体系的事情，只有整个研发体系都注重性能，性能才会好，体验才会好，而这就需要一个老板的支持了，否则，性能不可能好，产品汪们只顾着提需求，设计师只顾着画面精美，研发同学光实现需求都做不完，哪有精力去搞性能啊！测试同学也不能只用粗浅的测试方法，只说性能不好，具体哪不好，不应该都让研发自己去调试，去发现问题。另外，也需要做好性能监控机制，以保住革命果实。要不然，A版本辛辛苦苦搞了一轮性能优化，也有大幅改善，然后到了B版本，或者几个月后，再来一轮。</p>

<p>这就是很骨感的现实。所以，在现实生活中只有大厂头部应用 才真的重视性能和体验，并且才能把性能和体验做好。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://developer.android.com/topic/performance/memory-overview">Overview of memory management</a></li>
<li><a href="https://developer.android.com/studio/profile">Profile your app performance</a></li>
<li><a href="https://www.jianshu.com/p/258229426da4">Android内存管理机制</a></li>
<li><a href="https://www.jianshu.com/p/51e28a2c609c">最全的Android内存优化技巧</a></li>
<li><a href="https://jsonchao.github.io/2019/08/18/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8B%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96/">Android性能优化之内存优化</a></li>
<li><a href="https://jsonchao.github.io/2019/12/29/%E6%B7%B1%E5%85%A5%E6%8E%A2%E7%B4%A2Android%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96/">深入探索Android内存优化</a></li>
<li><a href="https://juejin.cn/post/6844904096541966350">Android性能优化之内存优化</a></li>
<li><a href="https://juejin.cn/post/6844904099998089230">深入探索 Android 内存优化（炼狱级别-上）</a></li>
<li><a href="https://juejin.cn/post/6872919545728729095">深入探索 Android 内存优化（炼狱级别-下）</a></li>
<li><a href="https://juejin.cn/post/6844904191282905096">内存优化深入版</a></li>
<li><a href="https://pspdfkit.com/blog/2019/android-large-memory-requirements/">Dealing with Large Memory Requirements on Android</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Sync Barrier机制]]></title>
    <link href="http://toughcoder.net/blog/2022/01/07/android-sync-barrier-mechanism/"/>
    <updated>2022-01-07T00:06:33+08:00</updated>
    <id>http://toughcoder.net/blog/2022/01/07/android-sync-barrier-mechanism</id>
    <content type="html"><![CDATA[<h2>诡异的假死问题</h2>

<p>前段时间，项目上遇到了一个假死问题，随机出现，无固定复现规律，大量频繁随机操作后，便会出现假死，整个应用无法操作，不会响应事件，会发生各种奇怪的ANR，且trace不固定。非常之诡异。</p>

<p>经过大量的复现研究和分析， 以及大神的指点后，发现与同步屏障（Sync Barrier）有关系，于是发现有必要研究一下这个东西。</p>

<p><a href="http://toughcoder.net/blog/2022/01/07/android-sync-barrier-mechanism/"><img src="http://www.cse.chalmers.se/edu/year/2016/course/course/TDA383_LP1/assets/img/barrier.png" title="auto auto" ></a></p>

<!-- more -->


<h2>什么是Sync Barrier机制</h2>

<p>这是安卓线程消息队列里面的一个新增加的东西，这么说还是太抽象，我们从头说起这件事情：</p>

<h4>安卓的消息队列机制</h4>

<p>消息队列，或者叫做Event Loop，通常在任何一个GUI应用程序里面都会有的，应用大部分时间处于Idle状态，当有事件发生时，比如用户点了一个button，然后开始响应此事件。安卓也是一个GUI应用程序，绝大多数都是带有GUI的应用程序，那么安卓 里面是如何实现这个EventLoop的呢，它是用Looper和MessageQueue，以及Handler，以一种消息队列的方式来实现loop。</p>

<p>有一定经验的同学对这些东西肯定不陌生，因为它们在实际的开发过程中相当常见，比如说对于UI的操作只能放在主线程里面，那么当工作线程想要更新UI时就需要用Handler发一个消息，或者post一个Runnable。或者当你想延后一段时间执行某种操作，就可以用postDelayed。这些都是非常常规的操作了。对于工作线程，如果想启用消息队列，就用Looper#prepare就可以了，当然了，要记得quit。</p>

<p>内部原理上面也不是很复杂，就是Looper会给线程绑定一个消息队列，即是MessageQueue，这是一个无限循环的队列，不断的轮询队列，当有新的消息时就去处理，否则就等待。主线程，安卓框架层在创建应用进程的时候就会给主线程默认创建好MessageQueue，所以就可以向其发消息（sendMessage）或者postDelayed，它们本质上都是一样的，都是向MessageQueue中入队一个消息，稍后它便会得到处理。</p>

<p><img src="https://blog.ycshao.com/2020/08/30/event-loop-and-concurrency/Event%20Loop%20With%20Single%20Worker.png" alt="" /></p>

<h4>同步消息与异步消息</h4>

<p>这个MessageQueue机制，就是队列，也就是说符合队列的特点，先进先出（FIFO，First-In First Out），就是说你先post的消息，肯定是先被处理，后post的后处理，即使有delay时候，也是看谁先到，谁先到谁先被处理。因此，这里面的消息全是同步，也就是说所有消息都是顺序处理，这就是同步消息。</p>

<p>异步消息，也就是说某个消息，想被最高优先级处理，无视发送消息的时机，比如说队列里面有8个消息，如何想让某个消息最先被处理？这时队列就变成了优先队列，有优先级的队列。那么具有高优先级的消息也是异步消息（Asynchronous Message）。即使是最后加入队列的，但因为是异步消息，它会被先处理，并不是FIFO，此可理解 为异步。</p>

<h4>Sync Barrier用以实现优先队列</h4>

<p>说了这么多，Sync Barrier就是安卓 内部用以实现优先级队列的一种方式。</p>

<p>当队列中出现Sync barrier（具体实现上就是Message#target为null）时，就会忽略所有同步消息，寻找异步消息（isAsynchrouns为true）的消息，然后优先处理它。</p>

<p>需要注意的是，把消息标记为异步，以及向消息队列中发送Sync barrier，这些API全部都是hide的，也就是说app中是无法使用的，通过反射也许能调用成功，但风险也较大，后续会被谷歌限制调用。换言之，这东西只能在Frameworks层内部自己使用。</p>

<h2>为什么要有Sync Barrier</h2>

<p>说了这么多，其实本质上，这东西就是一个优先队列，给要处理的消息加一个优先级机制，那这有什么实际用途呢？</p>

<p>消息队列这东西是在安卓一诞生就有了的东西，大部分时候它也没有什么问题。但有一个事情，就是安卓操作系统的UI流畅度远不及水果平台（iOS），原因就是在于水果平台的UI渲染是整个系统中最高优先执行。</p>

<p>有同学会说安卓里面也是这样啊，你想UI都只能在主线程里面操作（因此主线程也叫UI线程）。只能在主线程中操作UI，就能保证UI渲染是最高优先级吗？当然不是了。因为整个应用程序的默认线程就是主线程，换句话说，如果你不明显的去做线程切换，或者启用工作线程，那么所有事情都发生在主线程里面，当然 也包括了UI渲染，因此UI的渲染与你在主线程时面post一个消息的优先级是一样的。</p>

<p>如何让UI渲染在主线程中以最高优先级运行？于是就有了Sync barrier机制，这东西就是为了让消息队列有优先级，并且没有开放给app使用。可以去看一下ViewRootImpl（这货是专门负责ViewTree渲染的，也即可以理解为负责UI渲染的）的几个perform，它都是异步消息，也即会开启Sync barrier，它发送的消息将会是最高优先级的，会被优先处理。</p>

<h2>主要在哪里用Sync barrier</h2>

<p>前面提到了，Sync barrier这玩意儿并不是给app开发同学用的，很多相关的接口并没有开放出来，这是为了提高UI渲染而设计的东西。因此这东西主要是用在了UI渲染过程中。</p>

<p>仔细查看ViewRootImpl的源码可以发现，每次渲染View tree之前都会先给主线程插入一个Sync barrier，以挡住同步消息，以保证渲染被主线程优先执行到。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@UnsupportedAppUsage</span><span class="o">(</span><span class="n">maxTargetSdk</span> <span class="o">=</span> <span class="n">Build</span><span class="o">.</span><span class="na">VERSION_CODES</span><span class="o">.</span><span class="na">R</span><span class="o">,</span> <span class="n">trackingBug</span> <span class="o">=</span> <span class="mi">170729553</span><span class="o">)</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">scheduleTraversals</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">mTraversalScheduled</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mTraversalScheduled</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="n">mTraversalBarrier</span> <span class="o">=</span> <span class="n">mHandler</span><span class="o">.</span><span class="na">getLooper</span><span class="o">().</span><span class="na">getQueue</span><span class="o">().</span><span class="na">postSyncBarrier</span><span class="o">();</span>
</span><span class='line'>        <span class="n">mChoreographer</span><span class="o">.</span><span class="na">postCallback</span><span class="o">(</span>
</span><span class='line'>                <span class="n">Choreographer</span><span class="o">.</span><span class="na">CALLBACK_TRAVERSAL</span><span class="o">,</span> <span class="n">mTraversalRunnable</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>        <span class="n">notifyRendererOfFramePending</span><span class="o">();</span>
</span><span class='line'>        <span class="n">pokeDrawLockIfNeeded</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">unscheduleTraversals</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mTraversalScheduled</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mTraversalScheduled</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="n">mHandler</span><span class="o">.</span><span class="na">getLooper</span><span class="o">().</span><span class="na">getQueue</span><span class="o">().</span><span class="na">removeSyncBarrier</span><span class="o">(</span><span class="n">mTraversalBarrier</span><span class="o">);</span>
</span><span class='line'>        <span class="n">mChoreographer</span><span class="o">.</span><span class="na">removeCallbacks</span><span class="o">(</span>
</span><span class='line'>                <span class="n">Choreographer</span><span class="o">.</span><span class="na">CALLBACK_TRAVERSAL</span><span class="o">,</span> <span class="n">mTraversalRunnable</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">doTraversal</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mTraversalScheduled</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mTraversalScheduled</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="n">mHandler</span><span class="o">.</span><span class="na">getLooper</span><span class="o">().</span><span class="na">getQueue</span><span class="o">().</span><span class="na">removeSyncBarrier</span><span class="o">(</span><span class="n">mTraversalBarrier</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">performTraversals</span><span class="o">();</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的逻辑略复杂一些，View tree本身的处理过程，也即三大步measure, layout和draw，也就是performTraversal本身并没有异步消息，它是在准备渲染的时候放一个sync barrier，而在具体处理每一帧前就移除了sync barrier，这里为何要这样，还没有完全想清楚。通过搜索ViewRootImpl可以发现只有input event，keyevent 以及与用户输入相关的消息被设置为了asynchronous，也就是说用户事件响应被提高了优先级，而view tree的渲染，即UI的每一帧，其实并没有被提升优先级。因为UI刷的每一帧是以固定频率刷新的，Choreographer 从硬件得到vsync脉冲信号，然后回调给ViewRootImpl让其渲染每一帧（也即是performTraversal）。</p>

<h2>Sync Barrier会引发什么问题</h2>

<p>说实话，这套机制，实现的并不怎么优雅，因为，毕竟它并不是在最初的设计之初就考虑到的东西，它的整体运行机制并不完善，非常依赖于调用者的使用，所以它的相关API并未有开放出来。</p>

<p>它有三步，先发一个Sync barrier，然后发送异步消息，然后再移除Sync barrier。</p>

<p>只有UI渲染（ViewTree的相关操作，才需要这样做），大部分其他的消息都是同步的，并不需要这样搞。当有Sync barrier时，消息队列在处理消息的时候会忽略掉所有的同步消息（也即是常规消息），优先处理异步消息，直到Sync barrier移除，也是需要手动移除的。Sync barrier需要手动移除是最坑的。</p>

<p>因此，假如要处理的异步特别多，或者逻辑出错Sync barrier没有被移除，那就悲剧 了，就会导致消息队列中的大量常规消息无法得到处理，队列就会停止工作，应用会出现随机的ANR，以及假死。</p>

<h2>如何调试</h2>

<p>很不幸，Sync barrier导致的问题很难调试，甚至很难被发现，通常都是ANR或者说卡死问题。</p>

<p>那么首先可以按照ANR和卡死的常规分析方式去分析，假如都未发现明显的问题时，比如没有明显的耗时的操作，也没有死锁，也没有被硬件和IO阻塞，也没有进入死循环。</p>

<p>这些常规的分析，都没有发现问题。这时就可以考虑是不是Sync barrier在搞鬼。特别当涉及一些诡异的UI状态时，比如某个View只显示 了一半，比如某一个View没有显示 完全，比如只有背景没有前景，等等，当排除了其他常规问题时，就很可能是Sync barrier有异常导致的。</p>

<p>另外，如果有能力修改Frameworks的话，可以给MessageQueue增加dump信息，把队列中的所有消息都打印出来，以及把Sycn barrier也都打印出来，这样能够比较清楚看到，队列内部的情况，自然也能够发现异常的Sync barrier。</p>

<h2>如何避免Sync Barrier搞鬼</h2>

<p>前面提到过，这套东西都是Frameworks层内部的机制，并没有开放给app使用，而Frameworks内部的逻辑一般来说还是相当健壮的，绝大多数时候并不会出问题。当然了，各个厂商内部搞的各种所谓优化，倒是有可能会引发问题。</p>

<p>在实际开发过程中，引发Sync barrier的最多场景就是自定义View。对于自定义View，是能够在非主线程调用其invalidate的，当有大量的非主线程调用invalidate时，就有可能恰好与主线程的渲染发生交互，具体case非常corner要刚巧非主线程在postInvalide，然后主线程也刚巧在发送异步消息，就可能使得Sync barrier没有被移除，从而导致问题。</p>

<p>这就需要我们在编码阶段做好封装，对于自定义View的刷新触发逻辑做好封装，做一下线程切换，以保证是在主线程里面执行invalidate。因为暴露出去的接口，是没有办法控制的，你没有办法让所有调用者都在主线程里面调用你的接口。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://blog.csdn.net/jdsjlzx/article/details/110563162">Handler sync barrier（同步屏障）</a></li>
<li><a href="https://hningoba.github.io/2019/12/06/Android%20%E5%90%8C%E6%AD%A5%E5%B1%8F%E9%9A%9C%E6%9C%BA%E5%88%B6(Sync%20Barrier">Android 同步屏障机制(Sync Barrier)</a>/)</li>
<li><a href="https://xiaozhuanlan.com/topic/0843791256">同步屏障？阻塞唤醒？和我一起重读 Handler 源码</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&amp;mid=2650839366&amp;idx=2&amp;sn=94536e87f552314acd1e4620109c3c9b&amp;chksm=80b74dd8b7c0c4ce3d4945d690d50feae9b7c2d7009ce113b90cc99712703521c31c75fe2026&amp;mpshare=1&amp;scene=1&amp;srcid=1230rTWKhDHdFQTcru6ohx67&amp;sharer_sharetime=1640838623088&amp;sharer_shareid=80824a30f91a8c144cac1fea148f525a#rd">同步屏障与异步消息，从入门到放弃</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&amp;mid=2650837028&amp;idx=2&amp;sn=b37f149f3ade5f8cf1bebb49487ed1df&amp;chksm=80b744bab7c0cdaca13a90022b4e8b949c1003a9b606c81ee8ac159377e328b358457d79a3b7&amp;scene=21#wechat_redirect">面试官：如何提高Message的优先级</a></li>
<li><a href="https://juejin.cn/post/6947986170135445535">今日头条 ANR 优化实践系列 - Barrier 导致主线程假死</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Animation Internal Secrets]]></title>
    <link href="http://toughcoder.net/blog/2021/09/14/android-animation-internal-secrets/"/>
    <updated>2021-09-14T21:07:00+08:00</updated>
    <id>http://toughcoder.net/blog/2021/09/14/android-animation-internal-secrets</id>
    <content type="html"><![CDATA[<p>前面的文章重点讲了如何使用安卓平台提供的能力来做好一个动画。为了更深入的理解，需要去了解一下动画框架的内部机理，这样能够帮助我们做出更优雅的动画实现。</p>

<p><a href="http://toughcoder.net/blog/2021/09/14/android-animation-internal-secrets/"><img src="https://raw.githubusercontent.com/OCNYang/Android-Animation-Set/master/app/src/main/res/drawable/header_bg.jpg?token=AQ83Mm1lTKd-0jwgDJ9K3tNGJbk9OI9iks5axtyQwA%3D%3D" title="auto auto" ></a></p>

<!-- more -->


<h2><a href="https://developer.android.com/guide/topics/graphics/view-animation">View Animation</a>的原理</h2>

<h3>View Animation源码解析</h3>

<p>View animation的代码都是在<a href="https://developer.android.com/reference/android/view/animation/package-summary">android.view.animation</a>包下面。</p>

<p>这里面主要有三个东西，下面来分别仔细说说</p>

<h4><a href=".https://developer.android.com/reference/android/view/animation/Animation">Animation</a></h4>

<p>主要是抽象类<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/animation/Animation.java">Animation</a>以及它的四大子类，也是View animation中的四大变幻对象&ndash;位移变幻<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/animation/TranslateAnimation.java">TranslateAnimation</a>，缩放变幻<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/animation/ScaleAnimation.java">ScaleAnimation</a>，旋转变幻<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/animation/RotateAnimation.java">RotateAnimation</a>和渐变变幻<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/animation/AlphaAnimation.java">AlphaAnimation</a>。</p>

<p>以及一些工具对象，如<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/animation/AnimationSet.java">AnimationSet</a>和<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/animation/AnimationUtils.java">AnimationUtils</a>。</p>

<p>仔细看这些类的源码可以发现，其实它们不复杂，里面也没啥东西，主要是用于各种参数管理，相当于封装出来的工具和原料，具体内部的原理并不在这里。仔细看四大变幻的<a href="https://developer.android.com/reference/android/view/animation/Animation#applyTransformation(float,%20android.view.animation.Transformation)">applyTransformation</a>方法，可以发现这一坨把最接近『原理』的东西都放在了一个叫做Transformation的对象中去了。</p>

<h4><a href="https://developer.android.com/reference/android/view/animation/Transformation">Transformation</a></h4>

<p>直译变幻，但文档中的定义是动画过程中某一时刻应该做的变幻，此为<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/animation/Transformation.java">Transformation</a>。</p>

<p>这货的实现也不复杂，它也就是个中间商，只是一个存储从Animation传过来的参数 的中间变量，它里面有一个Alpha成员参数用以保存当前的渐变参数值，以及一个<a href="https://developer.android.com/reference/android/graphics/Matrix">Matrix</a>，Matrix可以保存当前的位移，旋转和缩放。Matrix应该不算太陌生，处理过<a href="https://developer.android.com/reference/android/graphics/Bitmap">Bitmap</a>变幻的同学，对它应该会有了解，都是通过Matrix来设置参数的。</p>

<h4><a href="https://developer.android.com/reference/android/view/animation/Interpolator">Interpolator</a></h4>

<p>动画是随时间变化的一系列视觉变幻，因人眼视觉残留，连在一起就是动画，跟电影是一个道理。这里就有一个非常关键的参数就是时间。时间对于动画来说体现在两方面一是时长，就是整个动画持续 的时间，另外一个就是变幻变化的速率，也就是说动画播放速度的变化率。其实，这里变化的并不是时间，时间是永恒的以固定速度在流逝，对于动画来说，帧率是固定的，后面会谈到，动画的帧率是由时间驱动器驱动的，它是以固定的时间脉冲来回调渲染动画的每一帧。这里的时间变化其实是做动画的每一帧时用到的参数 的变化，它并不是线性的，假设动画一共有10帧，要把View向右移动100px，默认是线性的，匀速的，也即每一帧都向前移动10px，但如果使用加速插值器，那么可能就是一个变加速运动，第1帧可能在0px，第2帧在5px，第3帧25px，第4帧到36px，以此类推。</p>

<p>时间插值器，就是用来调整播放速度的，用以实现时间变化。</p>

<h3>View Animation的渲染原理</h3>

<p>从前面的讨论来看，动画的渲染跟那几个对象都没有关系，使用View animation的时候，只有两种方法可以让动画生效，一是调用<a href="https://developer.android.com/reference/android/view/View?hl=en#startAnimation(android.view.animation.Animation)">View#startAnimation</a>，另外一个是<a href="https://developer.android.com/reference/android/view/View?hl=en#setAnimation(android.view.animation.Animation)">View#setAnimation</a>，然后再<a href="https://developer.android.com/reference/kotlin/android/view/animation/Animation?hl=en#start()">Animation#start</a>。</p>

<p>假如没有把Animation塞给某一个具体的View对象，光是调用Animation#start，是不会有任何影响和效果的。这说明动画的渲染是在View对象draw时做的，没有与具体View对象建立关联的动画是没有任何效果的。所以动画的渲染主要还要看View本身的逻辑。</p>

<p>可以从View#setAnimation和View#startAnimation入手来看，这两个方法只是把外部传进来的Animation对象保存在了一个叫做mCurrentAnimation成员里面，其他的什么也没做。查询索引，关键的地方有两个，一个是View#applyLegacyAnimation方法，另外一个就是View#draw方法。</p>

<p>先来看View#applyLegacyAnimation方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>   <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Utility function, called by draw(canvas, parent, drawingTime) to handle the less common</span>
</span><span class='line'><span class="cm">     * case of an active Animation being run on the view.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">applyLegacyAnimation</span><span class="o">(</span><span class="n">ViewGroup</span> <span class="n">parent</span><span class="o">,</span> <span class="kt">long</span> <span class="n">drawingTime</span><span class="o">,</span>
</span><span class='line'>            <span class="n">Animation</span> <span class="n">a</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">scalingRequired</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Transformation</span> <span class="n">invalidationTransform</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">int</span> <span class="n">flags</span> <span class="o">=</span> <span class="n">parent</span><span class="o">.</span><span class="na">mGroupFlags</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">initialized</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="na">isInitialized</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">initialized</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">a</span><span class="o">.</span><span class="na">initialize</span><span class="o">(</span><span class="n">mRight</span> <span class="o">-</span> <span class="n">mLeft</span><span class="o">,</span> <span class="n">mBottom</span> <span class="o">-</span> <span class="n">mTop</span><span class="o">,</span> <span class="n">parent</span><span class="o">.</span><span class="na">getWidth</span><span class="o">(),</span> <span class="n">parent</span><span class="o">.</span><span class="na">getHeight</span><span class="o">());</span>
</span><span class='line'>            <span class="n">a</span><span class="o">.</span><span class="na">initializeInvalidateRegion</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">mRight</span> <span class="o">-</span> <span class="n">mLeft</span><span class="o">,</span> <span class="n">mBottom</span> <span class="o">-</span> <span class="n">mTop</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">mAttachInfo</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="n">a</span><span class="o">.</span><span class="na">setListenerHandler</span><span class="o">(</span><span class="n">mAttachInfo</span><span class="o">.</span><span class="na">mHandler</span><span class="o">);</span>
</span><span class='line'>            <span class="n">onAnimationStart</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">final</span> <span class="n">Transformation</span> <span class="n">t</span> <span class="o">=</span> <span class="n">parent</span><span class="o">.</span><span class="na">getChildTransformation</span><span class="o">();</span>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">more</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="na">getTransformation</span><span class="o">(</span><span class="n">drawingTime</span><span class="o">,</span> <span class="n">t</span><span class="o">,</span> <span class="mi">1</span><span class="n">f</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">scalingRequired</span> <span class="o">&amp;&amp;</span> <span class="n">mAttachInfo</span><span class="o">.</span><span class="na">mApplicationScale</span> <span class="o">!=</span> <span class="mi">1</span><span class="n">f</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">parent</span><span class="o">.</span><span class="na">mInvalidationTransformation</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">parent</span><span class="o">.</span><span class="na">mInvalidationTransformation</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Transformation</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">invalidationTransform</span> <span class="o">=</span> <span class="n">parent</span><span class="o">.</span><span class="na">mInvalidationTransformation</span><span class="o">;</span>
</span><span class='line'>            <span class="n">a</span><span class="o">.</span><span class="na">getTransformation</span><span class="o">(</span><span class="n">drawingTime</span><span class="o">,</span> <span class="n">invalidationTransform</span><span class="o">,</span> <span class="mi">1</span><span class="n">f</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">invalidationTransform</span> <span class="o">=</span> <span class="n">t</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">more</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(!</span><span class="n">a</span><span class="o">.</span><span class="na">willChangeBounds</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">((</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="o">(</span><span class="n">ViewGroup</span><span class="o">.</span><span class="na">FLAG_OPTIMIZE_INVALIDATE</span> <span class="o">|</span> <span class="n">ViewGroup</span><span class="o">.</span><span class="na">FLAG_ANIMATION_DONE</span><span class="o">))</span> <span class="o">==</span>
</span><span class='line'>                        <span class="n">ViewGroup</span><span class="o">.</span><span class="na">FLAG_OPTIMIZE_INVALIDATE</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">parent</span><span class="o">.</span><span class="na">mGroupFlags</span> <span class="o">|=</span> <span class="n">ViewGroup</span><span class="o">.</span><span class="na">FLAG_INVALIDATE_REQUIRED</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">((</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">ViewGroup</span><span class="o">.</span><span class="na">FLAG_INVALIDATE_REQUIRED</span><span class="o">)</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="c1">// The child need to draw an animation, potentially offscreen, so</span>
</span><span class='line'>                    <span class="c1">// make sure we do not cancel invalidate requests</span>
</span><span class='line'>                    <span class="n">parent</span><span class="o">.</span><span class="na">mPrivateFlags</span> <span class="o">|=</span> <span class="n">PFLAG_DRAW_ANIMATION</span><span class="o">;</span>
</span><span class='line'>                    <span class="n">parent</span><span class="o">.</span><span class="na">invalidate</span><span class="o">(</span><span class="n">mLeft</span><span class="o">,</span> <span class="n">mTop</span><span class="o">,</span> <span class="n">mRight</span><span class="o">,</span> <span class="n">mBottom</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">parent</span><span class="o">.</span><span class="na">mInvalidateRegion</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">parent</span><span class="o">.</span><span class="na">mInvalidateRegion</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">RectF</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="kd">final</span> <span class="n">RectF</span> <span class="n">region</span> <span class="o">=</span> <span class="n">parent</span><span class="o">.</span><span class="na">mInvalidateRegion</span><span class="o">;</span>
</span><span class='line'>                <span class="n">a</span><span class="o">.</span><span class="na">getInvalidateRegion</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">mRight</span> <span class="o">-</span> <span class="n">mLeft</span><span class="o">,</span> <span class="n">mBottom</span> <span class="o">-</span> <span class="n">mTop</span><span class="o">,</span> <span class="n">region</span><span class="o">,</span>
</span><span class='line'>                        <span class="n">invalidationTransform</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// The child need to draw an animation, potentially offscreen, so</span>
</span><span class='line'>                <span class="c1">// make sure we do not cancel invalidate requests</span>
</span><span class='line'>                <span class="n">parent</span><span class="o">.</span><span class="na">mPrivateFlags</span> <span class="o">|=</span> <span class="n">PFLAG_DRAW_ANIMATION</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="kd">final</span> <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">mLeft</span> <span class="o">+</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">region</span><span class="o">.</span><span class="na">left</span><span class="o">;</span>
</span><span class='line'>                <span class="kd">final</span> <span class="kt">int</span> <span class="n">top</span> <span class="o">=</span> <span class="n">mTop</span> <span class="o">+</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">region</span><span class="o">.</span><span class="na">top</span><span class="o">;</span>
</span><span class='line'>                <span class="n">parent</span><span class="o">.</span><span class="na">invalidate</span><span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">top</span><span class="o">,</span> <span class="n">left</span> <span class="o">+</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">region</span><span class="o">.</span><span class="na">width</span><span class="o">()</span> <span class="o">+</span> <span class="o">.</span><span class="mi">5</span><span class="n">f</span><span class="o">),</span>
</span><span class='line'>                        <span class="n">top</span> <span class="o">+</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">region</span><span class="o">.</span><span class="na">height</span><span class="o">()</span> <span class="o">+</span> <span class="o">.</span><span class="mi">5</span><span class="n">f</span><span class="o">));</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">more</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个方法看着比较长，但它就做了三件事情：1）初始化动画；2）获取当前时刻的Transformation；3）如果动画还没有完（还有下一帧），那就得调用View的invalidate，得重绘。</p>

<p>再看使用此方法的地方，是在draw，需要注意是带有三个参数的那个draw，在<a href="http://toughcoder.net/blog/2020/07/26/android-view-render-flow/">前面的文章里面</a>介绍过，这个draw方法是由ViewGroup#dispatchDraw中drawChild时调用的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>   <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * This method is called by ViewGroup.drawChild() to have each child view draw itself.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * This is where the View specializes rendering behavior based on layer type,</span>
</span><span class='line'><span class="cm">     * and hardware acceleration.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="nf">draw</span><span class="o">(</span><span class="n">Canvas</span> <span class="n">canvas</span><span class="o">,</span> <span class="n">ViewGroup</span> <span class="n">parent</span><span class="o">,</span> <span class="kt">long</span> <span class="n">drawingTime</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">hardwareAcceleratedCanvas</span> <span class="o">=</span> <span class="n">canvas</span><span class="o">.</span><span class="na">isHardwareAccelerated</span><span class="o">();</span>
</span><span class='line'>        <span class="cm">/* If an attached view draws to a HW canvas, it may use its RenderNode + DisplayList.</span>
</span><span class='line'><span class="cm">         *</span>
</span><span class='line'><span class="cm">         * If a view is dettached, its DisplayList shouldn&#39;t exist. If the canvas isn&#39;t</span>
</span><span class='line'><span class="cm">         * HW accelerated, it can&#39;t handle drawing RenderNodes.</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">drawingWithRenderNode</span> <span class="o">=</span> <span class="n">mAttachInfo</span> <span class="o">!=</span> <span class="kc">null</span>
</span><span class='line'>                <span class="o">&amp;&amp;</span> <span class="n">mAttachInfo</span><span class="o">.</span><span class="na">mHardwareAccelerated</span>
</span><span class='line'>                <span class="o">&amp;&amp;</span> <span class="n">hardwareAcceleratedCanvas</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">more</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">childHasIdentityMatrix</span> <span class="o">=</span> <span class="n">hasIdentityMatrix</span><span class="o">();</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">int</span> <span class="n">parentFlags</span> <span class="o">=</span> <span class="n">parent</span><span class="o">.</span><span class="na">mGroupFlags</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">((</span><span class="n">parentFlags</span> <span class="o">&amp;</span> <span class="n">ViewGroup</span><span class="o">.</span><span class="na">FLAG_CLEAR_TRANSFORMATION</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">parent</span><span class="o">.</span><span class="na">getChildTransformation</span><span class="o">().</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'>            <span class="n">parent</span><span class="o">.</span><span class="na">mGroupFlags</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="n">ViewGroup</span><span class="o">.</span><span class="na">FLAG_CLEAR_TRANSFORMATION</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Transformation</span> <span class="n">transformToApply</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">concatMatrix</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">scalingRequired</span> <span class="o">=</span> <span class="n">mAttachInfo</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">mAttachInfo</span><span class="o">.</span><span class="na">mScalingRequired</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">Animation</span> <span class="n">a</span> <span class="o">=</span> <span class="n">getAnimation</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">a</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">more</span> <span class="o">=</span> <span class="n">applyLegacyAnimation</span><span class="o">(</span><span class="n">parent</span><span class="o">,</span> <span class="n">drawingTime</span><span class="o">,</span> <span class="n">a</span><span class="o">,</span> <span class="n">scalingRequired</span><span class="o">);</span>
</span><span class='line'>            <span class="n">concatMatrix</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="na">willChangeTransformationMatrix</span><span class="o">();</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">concatMatrix</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">mPrivateFlags3</span> <span class="o">|=</span> <span class="n">PFLAG3_VIEW_IS_ANIMATING_TRANSFORM</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">transformToApply</span> <span class="o">=</span> <span class="n">parent</span><span class="o">.</span><span class="na">getChildTransformation</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">((</span><span class="n">mPrivateFlags3</span> <span class="o">&amp;</span> <span class="n">PFLAG3_VIEW_IS_ANIMATING_TRANSFORM</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// No longer animating: clear out old animation matrix</span>
</span><span class='line'>                <span class="n">mRenderNode</span><span class="o">.</span><span class="na">setAnimationMatrix</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>                <span class="n">mPrivateFlags3</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="n">PFLAG3_VIEW_IS_ANIMATING_TRANSFORM</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(!</span><span class="n">drawingWithRenderNode</span>
</span><span class='line'>                    <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">parentFlags</span> <span class="o">&amp;</span> <span class="n">ViewGroup</span><span class="o">.</span><span class="na">FLAG_SUPPORT_STATIC_TRANSFORMATIONS</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="kd">final</span> <span class="n">Transformation</span> <span class="n">t</span> <span class="o">=</span> <span class="n">parent</span><span class="o">.</span><span class="na">getChildTransformation</span><span class="o">();</span>
</span><span class='line'>                <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">hasTransform</span> <span class="o">=</span> <span class="n">parent</span><span class="o">.</span><span class="na">getChildStaticTransformation</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">t</span><span class="o">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">hasTransform</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="kd">final</span> <span class="kt">int</span> <span class="n">transformType</span> <span class="o">=</span> <span class="n">t</span><span class="o">.</span><span class="na">getTransformationType</span><span class="o">();</span>
</span><span class='line'>                    <span class="n">transformToApply</span> <span class="o">=</span> <span class="n">transformType</span> <span class="o">!=</span> <span class="n">Transformation</span><span class="o">.</span><span class="na">TYPE_IDENTITY</span> <span class="o">?</span> <span class="n">t</span> <span class="o">:</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>                    <span class="n">concatMatrix</span> <span class="o">=</span> <span class="o">(</span><span class="n">transformType</span> <span class="o">&amp;</span> <span class="n">Transformation</span><span class="o">.</span><span class="na">TYPE_MATRIX</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">concatMatrix</span> <span class="o">|=</span> <span class="o">!</span><span class="n">childHasIdentityMatrix</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Sets the flag as early as possible to allow draw() implementations</span>
</span><span class='line'>        <span class="c1">// to call invalidate() successfully when doing animations</span>
</span><span class='line'>        <span class="n">mPrivateFlags</span> <span class="o">|=</span> <span class="n">PFLAG_DRAWN</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">concatMatrix</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                <span class="o">(</span><span class="n">parentFlags</span> <span class="o">&amp;</span> <span class="o">(</span><span class="n">ViewGroup</span><span class="o">.</span><span class="na">FLAG_SUPPORT_STATIC_TRANSFORMATIONS</span> <span class="o">|</span>
</span><span class='line'>                        <span class="n">ViewGroup</span><span class="o">.</span><span class="na">FLAG_CLIP_CHILDREN</span><span class="o">))</span> <span class="o">==</span> <span class="n">ViewGroup</span><span class="o">.</span><span class="na">FLAG_CLIP_CHILDREN</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                <span class="n">canvas</span><span class="o">.</span><span class="na">quickReject</span><span class="o">(</span><span class="n">mLeft</span><span class="o">,</span> <span class="n">mTop</span><span class="o">,</span> <span class="n">mRight</span><span class="o">,</span> <span class="n">mBottom</span><span class="o">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                <span class="o">(</span><span class="n">mPrivateFlags</span> <span class="o">&amp;</span> <span class="n">PFLAG_DRAW_ANIMATION</span><span class="o">)</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">mPrivateFlags2</span> <span class="o">|=</span> <span class="n">PFLAG2_VIEW_QUICK_REJECTED</span><span class="o">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">more</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">mPrivateFlags2</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="n">PFLAG2_VIEW_QUICK_REJECTED</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">hardwareAcceleratedCanvas</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Clear INVALIDATED flag to allow invalidation to occur during rendering, but</span>
</span><span class='line'>            <span class="c1">// retain the flag&#39;s value temporarily in the mRecreateDisplayList flag</span>
</span><span class='line'>            <span class="n">mRecreateDisplayList</span> <span class="o">=</span> <span class="o">(</span><span class="n">mPrivateFlags</span> <span class="o">&amp;</span> <span class="n">PFLAG_INVALIDATED</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>            <span class="n">mPrivateFlags</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="n">PFLAG_INVALIDATED</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">RenderNode</span> <span class="n">renderNode</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">Bitmap</span> <span class="n">cache</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">layerType</span> <span class="o">=</span> <span class="n">getLayerType</span><span class="o">();</span> <span class="c1">// TODO: signify cache state with just &#39;cache&#39; local</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">layerType</span> <span class="o">==</span> <span class="n">LAYER_TYPE_SOFTWARE</span> <span class="o">||</span> <span class="o">!</span><span class="n">drawingWithRenderNode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>             <span class="k">if</span> <span class="o">(</span><span class="n">layerType</span> <span class="o">!=</span> <span class="n">LAYER_TYPE_NONE</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                 <span class="c1">// If not drawing with RenderNode, treat HW layers as SW</span>
</span><span class='line'>                 <span class="n">layerType</span> <span class="o">=</span> <span class="n">LAYER_TYPE_SOFTWARE</span><span class="o">;</span>
</span><span class='line'>                 <span class="n">buildDrawingCache</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">cache</span> <span class="o">=</span> <span class="n">getDrawingCache</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">drawingWithRenderNode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Delay getting the display list until animation-driven alpha values are</span>
</span><span class='line'>            <span class="c1">// set up and possibly passed on to the view</span>
</span><span class='line'>            <span class="n">renderNode</span> <span class="o">=</span> <span class="n">updateDisplayListIfDirty</span><span class="o">();</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(!</span><span class="n">renderNode</span><span class="o">.</span><span class="na">hasDisplayList</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// Uncommon, but possible. If a view is removed from the hierarchy during the call</span>
</span><span class='line'>                <span class="c1">// to getDisplayList(), the display list will be marked invalid and we should not</span>
</span><span class='line'>                <span class="c1">// try to use it again.</span>
</span><span class='line'>                <span class="n">renderNode</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>                <span class="n">drawingWithRenderNode</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">sx</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">sy</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">drawingWithRenderNode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">computeScroll</span><span class="o">();</span>
</span><span class='line'>            <span class="n">sx</span> <span class="o">=</span> <span class="n">mScrollX</span><span class="o">;</span>
</span><span class='line'>            <span class="n">sy</span> <span class="o">=</span> <span class="n">mScrollY</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">drawingWithDrawingCache</span> <span class="o">=</span> <span class="n">cache</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">drawingWithRenderNode</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">offsetForScroll</span> <span class="o">=</span> <span class="n">cache</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">drawingWithRenderNode</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">restoreTo</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">drawingWithRenderNode</span> <span class="o">||</span> <span class="n">transformToApply</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">restoreTo</span> <span class="o">=</span> <span class="n">canvas</span><span class="o">.</span><span class="na">save</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">offsetForScroll</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">canvas</span><span class="o">.</span><span class="na">translate</span><span class="o">(</span><span class="n">mLeft</span> <span class="o">-</span> <span class="n">sx</span><span class="o">,</span> <span class="n">mTop</span> <span class="o">-</span> <span class="n">sy</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(!</span><span class="n">drawingWithRenderNode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">canvas</span><span class="o">.</span><span class="na">translate</span><span class="o">(</span><span class="n">mLeft</span><span class="o">,</span> <span class="n">mTop</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">scalingRequired</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">drawingWithRenderNode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="c1">// TODO: Might not need this if we put everything inside the DL</span>
</span><span class='line'>                    <span class="n">restoreTo</span> <span class="o">=</span> <span class="n">canvas</span><span class="o">.</span><span class="na">save</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="c1">// mAttachInfo cannot be null, otherwise scalingRequired == false</span>
</span><span class='line'>                <span class="kd">final</span> <span class="kt">float</span> <span class="n">scale</span> <span class="o">=</span> <span class="mf">1.0f</span> <span class="o">/</span> <span class="n">mAttachInfo</span><span class="o">.</span><span class="na">mApplicationScale</span><span class="o">;</span>
</span><span class='line'>                <span class="n">canvas</span><span class="o">.</span><span class="na">scale</span><span class="o">(</span><span class="n">scale</span><span class="o">,</span> <span class="n">scale</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">float</span> <span class="n">alpha</span> <span class="o">=</span> <span class="n">drawingWithRenderNode</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="o">(</span><span class="n">getAlpha</span><span class="o">()</span> <span class="o">*</span> <span class="n">getTransitionAlpha</span><span class="o">());</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">transformToApply</span> <span class="o">!=</span> <span class="kc">null</span>
</span><span class='line'>                <span class="o">||</span> <span class="n">alpha</span> <span class="o">&lt;</span> <span class="mi">1</span>
</span><span class='line'>                <span class="o">||</span> <span class="o">!</span><span class="n">hasIdentityMatrix</span><span class="o">()</span>
</span><span class='line'>                <span class="o">||</span> <span class="o">(</span><span class="n">mPrivateFlags3</span> <span class="o">&amp;</span> <span class="n">PFLAG3_VIEW_IS_ANIMATING_ALPHA</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">transformToApply</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">||</span> <span class="o">!</span><span class="n">childHasIdentityMatrix</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">transX</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">transY</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">offsetForScroll</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">transX</span> <span class="o">=</span> <span class="o">-</span><span class="n">sx</span><span class="o">;</span>
</span><span class='line'>                    <span class="n">transY</span> <span class="o">=</span> <span class="o">-</span><span class="n">sy</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">transformToApply</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(</span><span class="n">concatMatrix</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="k">if</span> <span class="o">(</span><span class="n">drawingWithRenderNode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                            <span class="n">renderNode</span><span class="o">.</span><span class="na">setAnimationMatrix</span><span class="o">(</span><span class="n">transformToApply</span><span class="o">.</span><span class="na">getMatrix</span><span class="o">());</span>
</span><span class='line'>                        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                            <span class="c1">// Undo the scroll translation, apply the transformation matrix,</span>
</span><span class='line'>                            <span class="c1">// then redo the scroll translate to get the correct result.</span>
</span><span class='line'>                            <span class="n">canvas</span><span class="o">.</span><span class="na">translate</span><span class="o">(-</span><span class="n">transX</span><span class="o">,</span> <span class="o">-</span><span class="n">transY</span><span class="o">);</span>
</span><span class='line'>                            <span class="n">canvas</span><span class="o">.</span><span class="na">concat</span><span class="o">(</span><span class="n">transformToApply</span><span class="o">.</span><span class="na">getMatrix</span><span class="o">());</span>
</span><span class='line'>                            <span class="n">canvas</span><span class="o">.</span><span class="na">translate</span><span class="o">(</span><span class="n">transX</span><span class="o">,</span> <span class="n">transY</span><span class="o">);</span>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>                        <span class="n">parent</span><span class="o">.</span><span class="na">mGroupFlags</span> <span class="o">|=</span> <span class="n">ViewGroup</span><span class="o">.</span><span class="na">FLAG_CLEAR_TRANSFORMATION</span><span class="o">;</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                    <span class="kt">float</span> <span class="n">transformAlpha</span> <span class="o">=</span> <span class="n">transformToApply</span><span class="o">.</span><span class="na">getAlpha</span><span class="o">();</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(</span><span class="n">transformAlpha</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">alpha</span> <span class="o">*=</span> <span class="n">transformAlpha</span><span class="o">;</span>
</span><span class='line'>                        <span class="n">parent</span><span class="o">.</span><span class="na">mGroupFlags</span> <span class="o">|=</span> <span class="n">ViewGroup</span><span class="o">.</span><span class="na">FLAG_CLEAR_TRANSFORMATION</span><span class="o">;</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="o">(!</span><span class="n">childHasIdentityMatrix</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">drawingWithRenderNode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">canvas</span><span class="o">.</span><span class="na">translate</span><span class="o">(-</span><span class="n">transX</span><span class="o">,</span> <span class="o">-</span><span class="n">transY</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">canvas</span><span class="o">.</span><span class="na">concat</span><span class="o">(</span><span class="n">getMatrix</span><span class="o">());</span>
</span><span class='line'>                    <span class="n">canvas</span><span class="o">.</span><span class="na">translate</span><span class="o">(</span><span class="n">transX</span><span class="o">,</span> <span class="n">transY</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Deal with alpha if it is or used to be &lt;1</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">alpha</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">||</span> <span class="o">(</span><span class="n">mPrivateFlags3</span> <span class="o">&amp;</span> <span class="n">PFLAG3_VIEW_IS_ANIMATING_ALPHA</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">alpha</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">mPrivateFlags3</span> <span class="o">|=</span> <span class="n">PFLAG3_VIEW_IS_ANIMATING_ALPHA</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">mPrivateFlags3</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="n">PFLAG3_VIEW_IS_ANIMATING_ALPHA</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="n">parent</span><span class="o">.</span><span class="na">mGroupFlags</span> <span class="o">|=</span> <span class="n">ViewGroup</span><span class="o">.</span><span class="na">FLAG_CLEAR_TRANSFORMATION</span><span class="o">;</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(!</span><span class="n">drawingWithDrawingCache</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="kd">final</span> <span class="kt">int</span> <span class="n">multipliedAlpha</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="mi">255</span> <span class="o">*</span> <span class="n">alpha</span><span class="o">);</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(!</span><span class="n">onSetAlpha</span><span class="o">(</span><span class="n">multipliedAlpha</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                        <span class="k">if</span> <span class="o">(</span><span class="n">drawingWithRenderNode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                            <span class="n">renderNode</span><span class="o">.</span><span class="na">setAlpha</span><span class="o">(</span><span class="n">alpha</span> <span class="o">*</span> <span class="n">getAlpha</span><span class="o">()</span> <span class="o">*</span> <span class="n">getTransitionAlpha</span><span class="o">());</span>
</span><span class='line'>                        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">layerType</span> <span class="o">==</span> <span class="n">LAYER_TYPE_NONE</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                            <span class="n">canvas</span><span class="o">.</span><span class="na">saveLayerAlpha</span><span class="o">(</span><span class="n">sx</span><span class="o">,</span> <span class="n">sy</span><span class="o">,</span> <span class="n">sx</span> <span class="o">+</span> <span class="n">getWidth</span><span class="o">(),</span> <span class="n">sy</span> <span class="o">+</span> <span class="n">getHeight</span><span class="o">(),</span>
</span><span class='line'>                                    <span class="n">multipliedAlpha</span><span class="o">);</span>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>                    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                        <span class="c1">// Alpha is handled by the child directly, clobber the layer&#39;s alpha</span>
</span><span class='line'>                        <span class="n">mPrivateFlags</span> <span class="o">|=</span> <span class="n">PFLAG_ALPHA_SET</span><span class="o">;</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">((</span><span class="n">mPrivateFlags</span> <span class="o">&amp;</span> <span class="n">PFLAG_ALPHA_SET</span><span class="o">)</span> <span class="o">==</span> <span class="n">PFLAG_ALPHA_SET</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">onSetAlpha</span><span class="o">(</span><span class="mi">255</span><span class="o">);</span>
</span><span class='line'>            <span class="n">mPrivateFlags</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="n">PFLAG_ALPHA_SET</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">drawingWithRenderNode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// apply clips directly, since RenderNode won&#39;t do it for this draw</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">((</span><span class="n">parentFlags</span> <span class="o">&amp;</span> <span class="n">ViewGroup</span><span class="o">.</span><span class="na">FLAG_CLIP_CHILDREN</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">cache</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">offsetForScroll</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">canvas</span><span class="o">.</span><span class="na">clipRect</span><span class="o">(</span><span class="n">sx</span><span class="o">,</span> <span class="n">sy</span><span class="o">,</span> <span class="n">sx</span> <span class="o">+</span> <span class="n">getWidth</span><span class="o">(),</span> <span class="n">sy</span> <span class="o">+</span> <span class="n">getHeight</span><span class="o">());</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(!</span><span class="n">scalingRequired</span> <span class="o">||</span> <span class="n">cache</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">canvas</span><span class="o">.</span><span class="na">clipRect</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">getWidth</span><span class="o">(),</span> <span class="n">getHeight</span><span class="o">());</span>
</span><span class='line'>                    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">canvas</span><span class="o">.</span><span class="na">clipRect</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">cache</span><span class="o">.</span><span class="na">getWidth</span><span class="o">(),</span> <span class="n">cache</span><span class="o">.</span><span class="na">getHeight</span><span class="o">());</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">mClipBounds</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// clip bounds ignore scroll</span>
</span><span class='line'>                <span class="n">canvas</span><span class="o">.</span><span class="na">clipRect</span><span class="o">(</span><span class="n">mClipBounds</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">drawingWithDrawingCache</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">drawingWithRenderNode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">mPrivateFlags</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="n">PFLAG_DIRTY_MASK</span><span class="o">;</span>
</span><span class='line'>                <span class="o">((</span><span class="n">RecordingCanvas</span><span class="o">)</span> <span class="n">canvas</span><span class="o">).</span><span class="na">drawRenderNode</span><span class="o">(</span><span class="n">renderNode</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// Fast path for layouts with no backgrounds</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">((</span><span class="n">mPrivateFlags</span> <span class="o">&amp;</span> <span class="n">PFLAG_SKIP_DRAW</span><span class="o">)</span> <span class="o">==</span> <span class="n">PFLAG_SKIP_DRAW</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">mPrivateFlags</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="n">PFLAG_DIRTY_MASK</span><span class="o">;</span>
</span><span class='line'>                    <span class="n">dispatchDraw</span><span class="o">(</span><span class="n">canvas</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">draw</span><span class="o">(</span><span class="n">canvas</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">cache</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">mPrivateFlags</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="n">PFLAG_DIRTY_MASK</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">layerType</span> <span class="o">==</span> <span class="n">LAYER_TYPE_NONE</span> <span class="o">||</span> <span class="n">mLayerPaint</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// no layer paint, use temporary paint to draw bitmap</span>
</span><span class='line'>                <span class="n">Paint</span> <span class="n">cachePaint</span> <span class="o">=</span> <span class="n">parent</span><span class="o">.</span><span class="na">mCachePaint</span><span class="o">;</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">cachePaint</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">cachePaint</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Paint</span><span class="o">();</span>
</span><span class='line'>                    <span class="n">cachePaint</span><span class="o">.</span><span class="na">setDither</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">parent</span><span class="o">.</span><span class="na">mCachePaint</span> <span class="o">=</span> <span class="n">cachePaint</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="n">cachePaint</span><span class="o">.</span><span class="na">setAlpha</span><span class="o">((</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">alpha</span> <span class="o">*</span> <span class="mi">255</span><span class="o">));</span>
</span><span class='line'>                <span class="n">canvas</span><span class="o">.</span><span class="na">drawBitmap</span><span class="o">(</span><span class="n">cache</span><span class="o">,</span> <span class="mf">0.0f</span><span class="o">,</span> <span class="mf">0.0f</span><span class="o">,</span> <span class="n">cachePaint</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// use layer paint to draw the bitmap, merging the two alphas, but also restore</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">layerPaintAlpha</span> <span class="o">=</span> <span class="n">mLayerPaint</span><span class="o">.</span><span class="na">getAlpha</span><span class="o">();</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">alpha</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">mLayerPaint</span><span class="o">.</span><span class="na">setAlpha</span><span class="o">((</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">alpha</span> <span class="o">*</span> <span class="n">layerPaintAlpha</span><span class="o">));</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="n">canvas</span><span class="o">.</span><span class="na">drawBitmap</span><span class="o">(</span><span class="n">cache</span><span class="o">,</span> <span class="mf">0.0f</span><span class="o">,</span> <span class="mf">0.0f</span><span class="o">,</span> <span class="n">mLayerPaint</span><span class="o">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">alpha</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">mLayerPaint</span><span class="o">.</span><span class="na">setAlpha</span><span class="o">(</span><span class="n">layerPaintAlpha</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">restoreTo</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">canvas</span><span class="o">.</span><span class="na">restoreToCount</span><span class="o">(</span><span class="n">restoreTo</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">a</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">more</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(!</span><span class="n">hardwareAcceleratedCanvas</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">a</span><span class="o">.</span><span class="na">getFillAfter</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">onSetAlpha</span><span class="o">(</span><span class="mi">255</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">parent</span><span class="o">.</span><span class="na">finishAnimatingView</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">a</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">more</span> <span class="o">&amp;&amp;</span> <span class="n">hardwareAcceleratedCanvas</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">a</span><span class="o">.</span><span class="na">hasAlpha</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">mPrivateFlags</span> <span class="o">&amp;</span> <span class="n">PFLAG_ALPHA_SET</span><span class="o">)</span> <span class="o">==</span> <span class="n">PFLAG_ALPHA_SET</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// alpha animations should cause the child to recreate its display list</span>
</span><span class='line'>                <span class="n">invalidate</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">mRecreateDisplayList</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">more</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个方法更长，主要就看transformToApply这个变量就好了，这个变量是在调用了applyLegacyAnimation后被赋值的。之后，可以看到它其中的Matrix被作用于Canvas，而alpha值被用于setAlpha了。好了，这里就是动画的最核心的逻辑。前面说了Transformation对象就是包了一个Matrix和alpha，然后被用在了这里，Matrix作用于<a href="https://developer.android.com/reference/android/graphics/Canvas">Canvas</a>对象，以产生视觉变幻（位移，缩放和旋转），而渐变则是通过setAlpha实现的。</p>

<p>所以View Animation是View tree每次draw的时候去做的，用当前的Animation对象获取到Transformation，然后把Matrix和alpha应用到draw时的Canvas，这就产生了视觉变幻效果。因此，View animation只是放一遍电影，因为这一过程中变化 的只有Transformation对象，也即只有Matrix和alpha在变化，在View draw的时候应用一下就完了，它并没有对View的真实属性产生影响，仅是对渲染的结果Canvas产生影响。而每次View draw的时候，都是会重新生成一个Canvas对象，并且View的属性本身并没有变，所以新生成的Canvas对象并不会体现之前一次draw（也即上一帧）的变幻结果，它只是继续应用Transformation对象，假如动画结束了就没有了Transformation对象，那就没有Matrix和alpha可作用于Canvas，也就没有了动画效果，一切又恢复到了最初原始的样子。</p>

<h2>Property Animation的原理</h2>

<p>属性动画的实现主要是在<a href="https://developer.android.com/reference/kotlin/android/animation/package-summary?hl=en">android.animation</a>里面，它有独立的一级包名，可以看出它在平台中的位置，是要高于View animation的。</p>

<h3>Animator的源码解析</h3>

<p>先从<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/animation/Animator.java">Animator</a>对象看起，它是一个抽象类，只定义了关于动画的基本接口，如duration/start/end/cancel等，以及设置<a href="https://developer.android.com/reference/android/animation/Animator.AnimatorListener">AnimatorListener</a>以外，再无其他东西。</p>

<p>最为核心的对象是<a href="https://developer.android.com/reference/android/animation/ValueAnimator">ValueAnimator</a>，它是属性动画的核心，它主要有两部分，一是管理各种数值，前面的文章说过属性动画的核心原理就是在一定时间内，用一定速率把某个值变成另外一个值；另外一部分就涉及渲染原理，后面再详细说。</p>

<p>再有就是<a href="https://developer.android.com/reference/android/animation/ObjectAnimator">ObjectAnimator</a>，它是ValueAnimator的子类，连同<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/animation/PropertyValuesHolder.java">PropertyValuesHolder</a>一起，针对某个对象的属性进行管理，主要涉及两方面，一个是属性值的管理，也即把对象的属性名字和其要设置的值都暂存起来，另外一部分就是通过反射来把要修改的值作用于目标对象。</p>

<h3>Animator的时间驱动器</h3>

<p>动画要让数值随时间而变化，当start了以后，最重要的事情 就是以一定的时间速率来刷新数值，也即是用一个时间驱动器来刷新每一帧。前面讨论了View animation，是在View tree渲染时去刷新动画的每一帧。</p>

<p>属性动画的核心在ValueAnimator里面，连同一个<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/animation/AnimationHandler.java">AnimatorHandler</a>对象，一起实现了时间驱动。AnimatorHanndler是属性动画的时间驱动器，它从<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/Choreographer.java;drc=master;l=82">Choreographer</a>中接收脉冲信号，然后再回调给所有的ValueAnimator，令其doAnimationFrame。它是一个单例，也就是说同一个进程里所有的属性动画用的是内一个时间驱动器，同一个AnimatorHandler。</p>

<p><strong>注意</strong>：关于Choreographer的解释可以看<a href="http://toughcoder.net/blog/2020/07/26/android-view-render-flow/">另外的文章</a>。</p>

<p>当调用ValueAnimator#start时便会往<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/animation/AnimationHandler.java">AnimatorHandler</a>对象添加一个回调，用以接收do frame的脉冲事件，然后从时间插值器mInterpolator中获取当前的时间速率，再调用animateValue进行数值的改变，其子类可以override此方法以实现属性的具体变化。这里还有一个变量mSelfPulsing用以控制是否使用AnimatorHandler，默认是true，也就是让ValueAnimator使用AnimatorHandler接收来自Choreographer的脉冲信号做动画。此外，也可以自己实现一个时间驱动器。</p>

<p>由此，便可以让在duration之内，渲染动画的每一帧。</p>

<h3>Animator的渲染原理</h3>

<p><a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/animation/ValueAnimator.java">ValueAnimator</a>仅是让一个数值在一定时间内发生特定的变化，它没有实际的视觉效果。常常使用的是ObjectAnimator，并作用于View的属性以产生视觉效果，如前面文章中的例子。那么这个又是如何实现的呢？</p>

<p><a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/animation/ObjectAnimator.java">ObjectAnimator</a>是可能改变某个对象（内部称之为Target对象）的某个属性值，让其随时间变化，当应用到View对象时，比如translationY属性，ObjectAniamtor所做的也仅仅是让translationY的值随时间变化 而已，仅在animateValue时去调用View#setTranslationY把变化的数值传进去。是View自己在做重绘，View的setTranslationY方法中，有做invalidate以进行重绘。由此，便产生了视觉效果。</p>

<p><a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/ViewPropertyAnimator.java">ViewPropertyAnimator</a>是另一个常用的对象，但发现它并不是Animator的子类，是封装出来的专门针对View对象做属性动画的一个工具类，它本质上与ObjectAnimator一样，只不过做了一些集成与封装，可以同时方便的操作多个属性，另外它会把所有属性的值变更 过后统一调一次invalidate，效率上会略高一筹。ObjectAnimator一次只能操作一个属性，并且每个属性变化 时都会调一次invalidate。</p>

<p>它是把支持的属性都先放进一个map里面暂存起来，当调用startAnimation时，创建一个ValueAnimator，并设置一个AnimatorListener，在onAnimationUpdate时，把前面暂存的属性都设置到mView对象中去，然后调用一次invalidate让mView重绘。这里还需要注意，在设置属性这一块与ObjectAnimator也不一样，前面说了ObjectAniamtor是通过属性的settter来实现的，但View的属性的settter都会触发invalidate。所以，ViewPropertyAnimator为了避免每次设置属性时都触发invalidate，它是直接把属性塞给View的mRenderNode对象，然后在所有变化 的属性都设置完以后，再统一做一次重绘(invalidate)。</p>

<p>另外的区别就是，ViewPropertyAnimator仅支持一些特定的属性，而ObjectAnimator可以支持任意属性（只要有setter/getter，就可以）。</p>

<h2>关于动画的常见问题</h2>

<p>通过上面的论述，就搞清楚了动画原理了，下面来看一些比较有意思的问题。</p>

<h3>动画是在主线程里做的么</h3>

<p>动画主要是通过View对象来呈现视觉效果，View是在主线程中渲染的，所以动画也是在主线程里面完成的。这话呢，只对了一半，或者这么说是不够严谨的。</p>

<p>通过上面的讨论，View animation，都是在主线程中实现的，因为它的时间驱动器是View tree的渲染，也即在draw的时候，去计算当前的Transformation，然后应用到View的Canvas上面。这一切都是在主线程中完成的。</p>

<p>但对于属性动画，就不是这个样子，属性动画分两部分，一部分是让数值随时间变化 ，这个其实可以在任意线程中去做。通过上面的讨论，默认的情况下，确实也是在主线程中做的（从Choreographer得到时间脉冲，这是在主线程里面），但是留 有接口，可以改变的，虽然很少这样做，但确实是可行的，并且数值随时间变化，这个事情也是可以在任意线程中完成的。另外一部分，就是让变化 的数值对目标对象生效，这个要看具体的对象了，如果View，肯定 还是要在主线程里搞。</p>

<h3>动画的帧率（FPS）是多少</h3>

<p>从上面的讨论来看，无论是View animation还是属性动画，时间脉冲都是Choreographer，并且对View来说视觉要生效是通过重绘来做的，所以最高帧率都会是60FPS。</p>

<p>所以，其实动画的帧率是固定的，也就是说其doAnimationFrame是固定频率在回调。</p>

<p>这里要与动画的时间插值器区别开来，动画的真实帧率是固定的，时间插值器的作用是让动画的变化变成非线性的。比如说某个属性x从0变到100，ValueAnimator的doAnimationFrame以及animateValue会是以固定的频率，从Choreographer每隔16ms接收一次脉冲，就会调用一次animateValue，时间插值器的作用，能让x值的变化是非线性的：</p>

<p>时间脉冲：0 1 2 3 4 5 6 7 8 9 10
线性变化：0 10 20 30 40 50 60 70 80 90 100
加速减速：0 13 25 37 57 71 79 85 89 95 100</p>

<p>时间插值器并没有让动画的帧率发生变化 ，而是让动画的结果非线性变化。</p>

<h3>动画过程中如何处理MotionEvent事件</h3>

<p>没有任何影响，view animation是发生在draw的时候，而属性动画是设置属性后再re-draw。从逻辑 上来讲动画与事件不冲突，两者之间没有任何影响。</p>

<p>不过呢，View animation是对Canvas做变幻，View对象仍在原来的位置，原来的状态，所以点击动画过程中的View可能会没有效果，特别是对于有位移的时候。但属性动画就没有问题，View就是真实的在移动。</p>

<p>但对于业务逻辑来说，通常动画都用于某个View的入场和出场，所以入场动画做完之前，以及出场动画开始之后，不响应点击事件要好一些，当然，这个就要靠开发者自己去实现了。</p>

<h3>动画可以取消么</h3>

<p>当然可以，都有cancel接口可以调用，但具体影响不太一样。</p>

<p>对于View animation，<a href="https://developer.android.com/reference/android/view/animation/Animation#cancel()">Animation#cancel</a>是会调用onAnimationEnd的，因为它的回调接口没有专门用于cancel的。</p>

<p>但属性动画的回调接口要丰富一些，它有cancel，所以是会回调onAimationCancel的，但不会回调onAnimationEnd。</p>

<h3>动画需要注意的事项</h3>

<p>一定要实现onAnimationCancel，以及onAnimationEnd，如果有涉及状态变更，或者关联其他动画时。要知道动画除了常规结束还会有被cancel掉的可能。</p>

<p>另外，就是对于属性动画，取消有两种方式，一是直接调用<a href="https://developer.android.com/reference/android/animation/Animator#cancel()">Animator#cancel</a>另外一种是调用<a href="https://developer.android.com/reference/android/animation/Animator#end()">Animator#end</a>，两个方法在处理最后的状态时略有差异。end方法会把属性的最终状态设置给属性，然后回调onAnimationEnd，但cancel就直接终止动画了，属性当前啥状态那就啥状态，然后回调onAnimationCancel。其实，大多数情况下，end更为合理，但end可能会造成视觉上的跳跃，属性的状态会突然变化。</p>

<p>再有就是，如果对于View，有多个属性同时做动画时，用ViewPropertyAnimator更好一些。语法上面也更简洁，性能上也略优一些。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Animation Advanced Tricks]]></title>
    <link href="http://toughcoder.net/blog/2021/09/04/android-animation-advanced-tricks/"/>
    <updated>2021-09-04T11:45:13+08:00</updated>
    <id>http://toughcoder.net/blog/2021/09/04/android-animation-advanced-tricks</id>
    <content type="html"><![CDATA[<p><a href="http://toughcoder.net/blog/2021/08/19/android-animation-made-easy/">前面的文章</a>介绍了动画的基本使用方法，本文来聊一聊涉及到动画的高级技巧，以及一些非常优质的学习资源和动画三方库和框架。</p>

<p><a href="http://toughcoder.net/blog/2021/09/04/android-animation-advanced-tricks/"><img src="https://cdn.wccftech.com/wp-content/uploads/2020/04/Animations.png" title="auto auto" ></a></p>

<!-- more -->


<h2>页面之间的过渡动画</h2>

<p>常规的动画都是针对某一页面上的某个元素做动画，这个相对简单，<a href="http://toughcoder.net/blog/2021/08/19/android-animation-made-easy/">之前的文章</a>讲了很多。但有时候页面与页面之间也是需要过渡动画的，这个可以加强切换的视觉体验，但最好要注意整个应用内的风格统一，不能A到B是一种切换样式，B到C却是另外一种。</p>

<p>主要有两类，一是Activity之间的切换，二是布局之间的切换。</p>

<h3>Activity之间的切换动画</h3>

<p>因为Activity的创建与启动以及它的Window的创建和显示都是由Frameworks来控制的，甚至于Activity里面的布局何时加载也是由系统决定的，所以对于Activity之间的切换严重依赖于Frameworks，而不同版本的安卓，支持的情况还不一样。</p>

<h4>传统的做法</h4>

<p>这个是针对 于所有安卓 版本都可以使用的方法，也是最简单的方式，就是使用<a href="https://developer.android.com/reference/android/app/Activity#overridePendingTransition(int,%20int)">Activity#overridePendingTransition</a>方法。</p>

<p>这个方法并不难，具体如何使用可以参考其文档，以及<a href="https://blog.csdn.net/ccpat/article/details/84883418">这篇文章</a>，讲的都比较清楚。</p>

<h4>使用Transition</h4>

<p>在Android 4.4时，系统中加入了一个叫做Transition的东西，专门用于页面之间的切换的，但也仅是限于同一个窗口（也即同一个Activity内）的ViewGroup。在Android 5.0时又把Activity之间的切换提供了支持，对于5.0以上的版本可以使用这个框架来实现切换，会比传统的做法都要专业一些。</p>

<p>具体可以参看<a href="https://developer.android.com/training/transitions/start-activity">官方教程</a>，以及<a href="https://www.jianshu.com/p/a43daa1e3d6e">这篇教程</a>和<a href="https://guides.codepath.com/android/shared-element-activity-transition">这篇文章</a>，讲解的都相当好。</p>

<h3>布局之间的过渡切换</h3>

<p>这里的布局就是指除Activity以外的，比如从一个ViewGroup切换到另外一个ViewGroup。其实Fragment本质上就是一个ViewGroup，所以也包含在内。</p>

<p>在Android 4.4 (Kikat API 19)，加入了<a href="https://developer.android.com/reference/android/transition/Transition">Transition frameworks</a>，专门用于解决场景切换，主要是通过Scene对象和Transition对象。Transition对象定义具体针对 哪个ViewGroup做什么样的动画，而Scene对象定义了ViewGroup的某一种状态，如渐变进入，那么渐变前是一个Scene，完全可见后又是一个Scene，而渐变的过程则叫Transition。</p>

<p><img src="https://developer.android.com/images/transitions/transitions_diagram.png" alt="" /></p>

<p>可以参看<a href="https://developer.android.com/training/transitions">官方文档</a>，以详细了解如何使用transition。</p>

<h2>复杂动画的实现逻辑</h2>

<p>动画是一个非常复杂且精深的领域，千万不要说做个UI很容易，或者说写个动画很容易，要想做好动画需要很深的功底，不但需要对动画框架有深入的了解，也要对整个视觉GUI有深入的理解，并且需要良好的数学与物理知识。</p>

<p>复杂的动画的复杂度体现在两个方面，一个是整体上看起来复杂，也就是是很多不同的动画的组合；另外一个是具体的某个属性复杂，如复杂的路径，复杂的时间变化或者复杂的形变。分开说。</p>

<h4>看起来复杂的动画</h4>

<p>这一般是涉及众多的动画的组合，整体表现上看起来特别复杂。就比如说电商可能会有一个购物筐，里面往外飞各种商品的动画。对于这种就是要把它拆解，拆解开来后，其实并不复杂。</p>

<p><img src="http://pic.90sjimg.com/design/03/61/36/24/5d71ce10b36d1.png" alt="" /></p>

<ul>
<li>购物车：可以是渐变，不断的从透明变到不透明。或者干脆不做动画</li>
<li>商品：预定义一组商品，每次随机选择一个，再选择随机的位置，然后从底下往上飞（或者从上往下飞），再设置一个随机的速度，也可以加上旋转</li>
</ul>


<p>这样拆解开来就不复杂了。</p>

<h4>复杂的变幻</h4>

<p>这里就要涉及一些数学 和物理知识了，比如用一些特别的曲线，特殊的曲面，特殊的形变等。</p>

<h2>优秀的动画的设计范例</h2>

<p>这里就不得不得提到大名顶顶的<a href="https://dribbble.com/">Dribbble</a>了，这里有相当优秀的设计资源，其中也有很多<a href="https://dribbble.com/shots/popular/animation">动画设计</a>，可以尝试着去实现一下，都很有挑战。</p>

<h2>优秀的动画相关资源</h2>

<p>还有一些资源，特别是开源的库，也非常值得学习和研究和使用。</p>

<h4><a href="https://developer.android.com/reference/androidx/constraintlayout/motion/widget/MotionLayout">MotionLayout</a></h4>

<p>这个并不是三方的，而是官方AndroidX中的，相当的强大，当然使用起来也略复杂。具体使用方法可以参考 <a href="https://developer.android.com/training/constraint-layout/motionlayout">官方教程</a>和<a href="https://www.nomtek.com/blog/motionlayout">这篇文章</a>。</p>

<h4><a href="https://awesomeopensource.com/projects/android-animation">The Top 27 Android Animation Open Source Projects</a></h4>

<p>这里是一个集合，里面列出一些优秀的动画相关的开源库，都相当的棒。</p>

<h4><a href="https://github.com/daimajia/AndroidViewAnimations">Android View Animations</a></h4>

<p>有一些针对View的非常炫酷的特效，如抖动，缩放和旋转等。它是受一个<a href="https://github.com/ArtFeel/AFViewShaker">水果上面的动画库</a>的激发。</p>

<h4><a href="https://github.com/lgvalle/Material-Animations">Material-Animations</a></h4>

<p>主要是介绍如何使用Transition frameworks的。</p>

<h4><a href="https://github.com/airbnb/lottie-android">Lottie</a></h4>

<p>可以把设计软件Adobe After Effects直接转成动画。</p>

<h4>一些插值器</h4>

<p>可看<a href="https://github.com/daimajia/AnimationEasingFunctions">这个</a>和<a href="https://easings.net/">这个</a></p>

<h4><a href="https://github.com/ybq/Android-SpinKit">专门用于加载动画</a></h4>

<p>里面有各种神奇的加载特效，非常棒。是一个<a href="https://github.com/tobiasahlin/SpinKit">前端CSS加载特效</a>的Android上的实现。</p>

<h4><a href="https://github.com/OCNYang/Android-Animation-Set">教程的示例</a></h4>

<p>这是一个教程集锦，里面也包含各种示例，是一个相当不错的学习资源。</p>

<h4><a href="https://github.com/REBOOTERS/AndroidAnimationExercise">另外一个教程和示例</a></h4>

<p>与上面的类似，也是一个集教程与实例在一起的项目。</p>

<h4><a href="https://awesomeopensource.com/project/OCNYang/Android-Animation-Set">Android Animation Detailed Tutorials</a></h4>

<p>一个项目的合集。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Animation Made Easy]]></title>
    <link href="http://toughcoder.net/blog/2021/08/19/android-animation-made-easy/"/>
    <updated>2021-08-19T22:37:34+08:00</updated>
    <id>http://toughcoder.net/blog/2021/08/19/android-animation-made-easy</id>
    <content type="html"><![CDATA[<p>动画在任何一个GUI系统中都是一个非常重要的设计元素，它可以让交互变得优雅，让界面变得炫酷，让操作变得更加的舒畅，让状态过渡变得更加的顺滑，对视觉效果有极大的提升，时而提升用户体验，特别是对于移动应用来说，更是如此。就好比水果平台，最为吸引人的地方就在于其炫酷流畅的动画效果。早期的Android，在动画这一块确实差，不过，近些年，随着谷歌不断的加大力度在提升，现在来说安卓在动画这一块已经跟水果差不多了。今天就来聊一聊关于动画的话题。</p>

<p><a href="http://toughcoder.net/blog/2021/08/19/android-animation-made-easy/"><img src="https://files.betamax.raywenderlich.com/attachments/collections/291/dae8aa75-8ccb-4b2f-a98d-3d2230b63ed9.png"></a></p>

<!-- more -->


<h2>动画的种类</h2>

<p>一般来说动画分为二个种类：</p>

<h3>逐帧动画(Frame Animation)也叫做<a href="http://developer.android.com/intl/zh-cn/guide/topics/graphics/drawable-animation.html">Drawable Animation</a></h3>

<p>也就是电影胶片式的，一张张不同的画连在一起播放，比较简单，只需要准备足够帧数（数量）的图片，就可以了。缺点也比较明显，需要比较多的资源（图片，存储空间，内存空间以及CPU资源）。并且灵活性非常的差，不能让普通的一段文字或者一个按扭进行动画。
针对某些特别简单的动画可以用此方式来实现，比如像简单的进度条，或者滑动引导提示等，具体的方式就是：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;animation-list xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>    android:oneshot="true"&gt;    
</span><span class='line'>    &lt;item android:drawable="@drawable/rocket_thrust1" android:duration="200" /&gt;
</span><span class='line'>    &lt;item android:drawable="@drawable/rocket_thrust2" android:duration="200" /&gt;
</span><span class='line'>    &lt;item android:drawable="@drawable/rocket_thrust3" android:duration="200" /&gt;
</span><span class='line'>&lt;/animation-list&gt;</span></code></pre></td></tr></table></div></figure>


<h3>补间动画（Tween Animation）</h3>

<p>补间动画比帧动画就要高级一些，因为充分利用了计算机的特性，只需要告诉起始状态和结束状态，然后让计算机去计算中间的状态，再不用把每一帧都告诉计算机了。在安卓中就是<a href="http://developer.android.com/intl/zh-cn/guide/topics/graphics/view-animation.html">View Animation</a>，以及后来的强大的<a href="http://developer.android.com/intl/zh-cn/guide/topics/graphics/prop-animation.html">Property Animation</a>。</p>

<h2>动画的基本原理</h2>

<p>动画，其实就是一组快速播放的幻灯片，每一张（每一帧）的状态略有不同，快速连起来播放，由于人的眼睛有视觉残留效应，这就形成了动画。对于计算机程序来说，一般的动画就是给定对象的初始和终末状态，在一定时间内，不断的计算中间过程，并以视觉的方式展示出来，这就是动画。</p>

<p><img src="https://developer.android.com/images/animation/animation-linear.png" alt="" /></p>

<h2>动画的关键要素</h2>

<p>一个动画必须要有以下关键的要素：</p>

<ul>
<li>时长(Duration)，也就 说播放动画的总时长，系统默认是300ms</li>
<li>时间插值器(Interpolation)，就是动画的关键参数随时间要如何变化</li>
<li>重播(Repeat)，包括重播的次数以及方式，次数好理解，方式的意思是，可以顺序的一遍一遍的播，也是可以反着播</li>
<li>延迟(Delay)，动画启动的延时，通常用在动画组合里面。</li>
</ul>


<h2>View Animation</h2>

<p>这是从安卓一开始就支持的动画方式，仅能对View对象生效，使用起来也比较方便和简单，通过组合和自定义插值器，足以实现常用的视觉变幻（如渐变，旋转，缩放和位移）。</p>

<p>主要有四种<a href="http://developer.android.com/intl/zh-cn/reference/android/view/animation/TranslateAnimation.html">位移(translation)</a>，<a href="http://developer.android.com/intl/zh-cn/reference/android/view/animation/AlphaAnimation.html">透明度(alpha)</a>，<a href="http://developer.android.com/intl/zh-cn/reference/android/view/animation/RotateAnimation.html">旋转(rotation)</a>和<a href="http://developer.android.com/intl/zh-cn/reference/android/view/animation/ScaleAnimation.html">缩放(scaling)</a>。还可以以<a href="http://developer.android.com/intl/zh-cn/reference/android/view/animation/AnimationSet.html">集合</a>的方式来把几个动画合在一起播放。可以设置动画的时长(duration)，<a href="http://developer.android.com/intl/zh-cn/reference/android/view/animation/Interpolator.html">速率(interpolator)</a>，重复和事件的<a href="http://developer.android.com/intl/zh-cn/reference/android/view/animation/Animation.AnimationListener.html">监听</a>。
一些使用建议：</p>

<ul>
<li>所有这些东西都是放在<a href="http://developer.android.com/intl/zh-cn/reference/android/view/animation/package-summary.html">android.view.animation</a>包下面的，所以这些东西只能用于View对象。其实绝大多数时候，这也不是问题，除了View，还有啥要做动画呢。</li>
<li><a href="http://developer.android.com/intl/zh-cn/reference/android/view/animation/TranslateAnimation.html">TranslateAnimation</a>只能是直线运动，如果要曲线，就得自定义，可以参考<a href="http://guoh.org/lifelog/2012/04/android-customized-curved-path-animation/">这个</a>。</li>
<li>scale可以实现水平或者垂直翻转。</li>
<li><p>动画的触发是当View需要<a href="http://developer.android.com/intl/zh-cn/reference/android/view/View.html#invalidate(">invalidate</a>)的时候就会触发<a href="http://developer.android.com/intl/zh-cn/reference/android/view/View.html#setAnimation(android.view.animation.Animation">setAnimation</a>)指定的动画。所以，如下代码会正常触发:</p>

<pre><code class="`"> TextView title; // 原来是GONE的
 title.setVisibility(View.VISIBLE);
 title.setAnimation(new AlphaAnimation(0.3f, 1f);
</code></pre>

<p> 不一定非要<a href="http://developer.android.com/intl/zh-cn/reference/android/view/View.html#startAnimation(android.view.animation.Animation">startAnimation</a>)</p></li>
<li>要注意动画前后View的状态。这个比较难受。因为动画过程仅是放一遍电影（动画过程中仅是在View的绘制的时候对Canvas做变幻），对View本身并没有影响，通常的做法是给View Animation加上Listener，在onAnimationEnd的时候去设置目标状态。</li>
</ul>


<p>总的来说，View animation简单易用，大部分场景是可以满足需求的，早期版本确实有一些缺陷，内部状态在动画过程中会有问题，但是最近新的Android版本上面，已没有大问题，所以当能满足需求时，使用也没有问题。</p>

<h2><a href="http://developer.android.com/intl/zh-cn/guide/topics/graphics/prop-animation.html">属性动画（Property Animation)</a></h2>

<p>就像名字暗示那样，从3.0开始一套新的动画API出现了，可以描述为在一段时间内以一定的方式来改变某一个属性，是这样的方式来做动画。所以，它也可以做动画以外的事情。这套API的核心思想是在一段时间内，让某些属性随着时间改变（有点像中学的物理题）。</p>

<p>属性动画就是根据时间来改变某一对象（不一定非要是View）的某一个属性，至于某一时刻属性变化的值所产生的后果，由使用者自定义，因此你可以把它应用于任何对象。</p>

<p>它也与View一样，可以组合，可以设置事件监听。</p>

<p>与View动画最大的区别在于，View动画仅是按要求放一遍电影，不会对View的实际属性产生影响，因此，动画过程中以及完成后View仍是在原来的位置，属性也不会变化。而属性动画则不是，它会直接改变View的属性，所以有些时候这个优势会很方便，比如实现收起与展开的动画时Property动画会明显的优势：</p>

<p>比如，对于一个可以收起和弹出的动画，就可以这样来实现：</p>

<p>收起动画：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">animateCollapse</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">AnimatorSet</span> <span class="n">set</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">AnimatorSet</span><span class="o">();</span>
</span><span class='line'>        <span class="n">ObjectAnimator</span> <span class="n">translate</span> <span class="o">=</span> <span class="n">ObjectAnimator</span><span class="o">.</span><span class="na">ofFloat</span><span class="o">(</span><span class="n">mStatusPanel</span><span class="o">,</span> <span class="s">&quot;translationY&quot;</span><span class="o">,</span> <span class="mi">0</span><span class="n">f</span><span class="o">,</span> <span class="n">mTranslationY</span><span class="o">);</span>
</span><span class='line'>        <span class="n">ObjectAnimator</span> <span class="n">alpha</span> <span class="o">=</span> <span class="n">ObjectAnimator</span><span class="o">.</span><span class="na">ofFloat</span><span class="o">(</span><span class="n">mStatusPanel</span><span class="o">,</span> <span class="s">&quot;alpha&quot;</span><span class="o">,</span> <span class="mi">1</span><span class="n">f</span><span class="o">,</span> <span class="mf">0.75f</span><span class="o">);</span>
</span><span class='line'>        <span class="n">set</span><span class="o">.</span><span class="na">setDuration</span><span class="o">(</span><span class="mi">250</span><span class="o">);</span>
</span><span class='line'>        <span class="n">set</span><span class="o">.</span><span class="na">setInterpolator</span><span class="o">(</span><span class="k">new</span> <span class="nf">AccelerateDecelerateInterpolator</span><span class="o">());</span>
</span><span class='line'>        <span class="n">set</span><span class="o">.</span><span class="na">playTogether</span><span class="o">(</span><span class="n">translate</span><span class="o">,</span> <span class="n">alpha</span><span class="o">);</span>
</span><span class='line'>        <span class="n">set</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>弹出动画:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">animateExpansion</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">AnimatorSet</span> <span class="n">set</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">AnimatorSet</span><span class="o">();</span>
</span><span class='line'>        <span class="n">ObjectAnimator</span> <span class="n">translate</span> <span class="o">=</span> <span class="n">ObjectAnimator</span><span class="o">.</span><span class="na">ofFloat</span><span class="o">(</span><span class="n">mStatusPanel</span><span class="o">,</span> <span class="s">&quot;translationY&quot;</span><span class="o">,</span> <span class="n">mTranslationY</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>        <span class="n">ObjectAnimator</span> <span class="n">alpha</span> <span class="o">=</span> <span class="n">ObjectAnimator</span><span class="o">.</span><span class="na">ofFloat</span><span class="o">(</span><span class="n">mStatusPanel</span><span class="o">,</span> <span class="s">&quot;alpha&quot;</span><span class="o">,</span> <span class="mf">0.75f</span><span class="o">,</span> <span class="mi">1</span><span class="n">f</span><span class="o">);</span>
</span><span class='line'>        <span class="n">set</span><span class="o">.</span><span class="na">setDuration</span><span class="o">(</span><span class="mi">250</span><span class="o">);</span>
</span><span class='line'>        <span class="n">set</span><span class="o">.</span><span class="na">setInterpolator</span><span class="o">(</span><span class="k">new</span> <span class="nf">AccelerateDecelerateInterpolator</span><span class="o">());</span>
</span><span class='line'>        <span class="n">set</span><span class="o">.</span><span class="na">playTogether</span><span class="o">(</span><span class="n">translate</span><span class="o">,</span> <span class="n">alpha</span><span class="o">);</span>
</span><span class='line'>        <span class="n">set</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果要使用View animation，也许也可以实现同样的效果，但估计会很难，因为要注意设置View的属性。比如说收起时并不是全hide，而是半折叠状态，就需要在AnimationListener#onAnimationEnd时去设置特殊的位置状态.</p>

<p>使用时候的建议：</p>

<ul>
<li>属性动画是post layout的，所以所有属性的初始状态就是你在布局中指定的值，动画是以此为基础开始的。</li>
<li><p>比较难使用的是translationX和translationY属性，它们的定义是相对于left和top的值。或者理解为相对于layout之后的在父布局中的位置的左边和右边。比如：</p>

<pre><code>ObjectAnimator.ofFloat(mBar, "translationY", 0, height);
</code></pre>

<p>这个就是进入的动画，一个View从其上头滑入。反过来:</p>

<pre><code>ObjectAnimator.ofFloat(mBar, "translationY", height, 0);
</code></pre>

<p>就是滑出。</p></li>
</ul>


<h3><a href="https://developer.android.com/reference/android/animation/ValueAnimator">ValueAnimator</a></h3>

<p>这是属性动画的核心类，其实它很好的诠释了什么是动画，它就是把某个值在duration内，按照插值器指定的方式从一个值变化到另一个值。看到这个类，就可以感知到动画跟View其实一点关系都没有，动画就是一个随时间变化 的数值而已。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ValueAnimator</span> <span class="n">animation</span> <span class="o">=</span> <span class="n">ValueAnimator</span><span class="o">.</span><span class="na">ofFloat</span><span class="o">(</span><span class="mi">0</span><span class="n">f</span><span class="o">,</span> <span class="mi">100</span><span class="n">f</span><span class="o">);</span>
</span><span class='line'><span class="n">animation</span><span class="o">.</span><span class="na">setDuration</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
</span><span class='line'><span class="n">animation</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>这意思就是让一个浮点数变量，在1秒内，从0，变化 到100。至于这个有什么具体的效果，要看你如何应用这个随时间变化 的浮点数变量，比如用于控制进度，一般情况下都会将变化的数值用于改变View的视觉变幻形态，但并不局限于此，这里只是为了说明这个动画数值可以用于任何地方：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="n">animation</span><span class="o">.</span><span class="na">addUpdateListener</span><span class="o">(</span><span class="n">anim</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">float</span> <span class="n">t</span> <span class="o">=</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span> <span class="n">anim</span><span class="o">.</span><span class="na">getAnimatedValue</span><span class="o">();</span>
</span><span class='line'>        <span class="n">mStatusPanel</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;Temperature: %04.1f&quot;</span><span class="o">,</span> <span class="n">t</span><span class="o">));</span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a href="https://developer.android.com/reference/android/animation/ObjectAnimator">ObjectAnimator</a></h3>

<p>它是ValueAnimator的一个子类，增强了点功能，它的作用是针对 给定的对象，对其指定的某个属性做动画插值，动画计算与前面提到的ValueAnimator是一样的，只不过说它可以对某个对象的指定的属性做计算，并改变这个属性：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ObjectAnimator</span> <span class="n">animation</span> <span class="o">=</span> <span class="n">ObjectAnimator</span><span class="o">.</span><span class="na">ofFloat</span><span class="o">(</span><span class="n">textView</span><span class="o">,</span> <span class="s">&quot;translationX&quot;</span><span class="o">,</span> <span class="mi">100</span><span class="n">f</span><span class="o">);</span>
</span><span class='line'><span class="n">animation</span><span class="o">.</span><span class="na">setDuration</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
</span><span class='line'><span class="n">animation</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>这意思就是说，把动画计算出来的数值应用于一个textView的translationX属性上面。它与下面的代码，用ValueAnimator来实现，是完全等效的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ValueAnimator</span> <span class="n">animation</span> <span class="o">=</span> <span class="n">ValueAnimator</span><span class="o">.</span><span class="na">ofFloat</span><span class="o">(</span><span class="mi">0</span><span class="n">f</span><span class="o">,</span> <span class="mi">100</span><span class="n">f</span><span class="o">);</span>
</span><span class='line'><span class="n">animation</span><span class="o">.</span><span class="na">setDuration</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
</span><span class='line'><span class="n">animation</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">animation</span><span class="o">.</span><span class="na">addUpdateListener</span><span class="o">(</span><span class="k">new</span> <span class="n">ValueAnimator</span><span class="o">.</span><span class="na">AnimatorUpdateListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onAnimationUpdate</span><span class="o">(</span><span class="n">ValueAnimator</span> <span class="n">updatedAnimation</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">float</span> <span class="n">animatedValue</span> <span class="o">=</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span><span class="n">updatedAnimation</span><span class="o">.</span><span class="na">getAnimatedValue</span><span class="o">();</span>
</span><span class='line'>        <span class="n">textView</span><span class="o">.</span><span class="na">setTranslationX</span><span class="o">(</span><span class="n">animatedValue</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>由此可见ObjectAnimator就是多做了一层封装，方便来操作而已。需要注意的是，对象的属性必须要有setter和getter，因为这里会用传进来的属性名字用反射去调用，所以必须要有属性对应的settter和getter方法。</p>

<h3><a href="https://developer.android.com/reference/android/view/ViewPropertyAnimator">ViewPropertyAnimator</a></h3>

<p>因为大多数情况下是对View做动画，所以又封装出了一个专门用于View的属性动画工具，也即ViewPropertyAnimator，可以非常方便进行属性动画。用一个实例就会相当明了。</p>

<p>比如说想对某个View进行位置，用ObjectAnimator，就需要这么写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ObjectAnimator</span> <span class="n">animX</span> <span class="o">=</span> <span class="n">ObjectAnimator</span><span class="o">.</span><span class="na">ofFloat</span><span class="o">(</span><span class="n">myView</span><span class="o">,</span> <span class="s">&quot;x&quot;</span><span class="o">,</span> <span class="mi">50</span><span class="n">f</span><span class="o">);</span>
</span><span class='line'><span class="n">ObjectAnimator</span> <span class="n">animY</span> <span class="o">=</span> <span class="n">ObjectAnimator</span><span class="o">.</span><span class="na">ofFloat</span><span class="o">(</span><span class="n">myView</span><span class="o">,</span> <span class="s">&quot;y&quot;</span><span class="o">,</span> <span class="mi">100</span><span class="n">f</span><span class="o">);</span>
</span><span class='line'><span class="n">AnimatorSet</span> <span class="n">animSetXY</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">AnimatorSet</span><span class="o">();</span>
</span><span class='line'><span class="n">animSetXY</span><span class="o">.</span><span class="na">playTogether</span><span class="o">(</span><span class="n">animX</span><span class="o">,</span> <span class="n">animY</span><span class="o">);</span>
</span><span class='line'><span class="n">animSetXY</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>但如果用ViewPropertyAnimator就会非常简洁：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">myView</span><span class="o">.</span><span class="na">animate</span><span class="o">().</span><span class="na">x</span><span class="o">(</span><span class="mi">50</span><span class="n">f</span><span class="o">).</span><span class="na">y</span><span class="o">(</span><span class="mi">100</span><span class="n">f</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a href="https://developer.android.com/reference/android/animation/AnimatorSet">AnimatorSet</a></h3>

<p>用于创建组合，前面的例子已经可以看出来它怎么使用的了。当需要同时实现多个变幻时，就可以把多个Animator用AnimatorSet来组合起来。这个类非常的灵活，可以设置不同的时长，延迟和重复。</p>

<h3><a href="https://developer.android.com/reference/android/view/animation/Interpolator">插值器</a></h3>

<p>插值器（Interpolators）用以调节数值与时间变化 的关系，因为动画是有时长的，是在duration内，从某个数值变化 到另一数值，而具体随时间怎么变，则由插值器决定。默认是线性的，比如250ms，0f到100，那么就是匀速运动。也可以加速的，减速的，先加速后减速，先减速后加速。</p>

<p><a href="https://developer.android.com/reference/android/view/animation/package-summary">android.view.animation</a>内定义了大量的插值器可供使用。</p>

<h3>在XML中来声明动画</h3>

<p>与布局类似，动画也是支持在XML中来声明的，这样可以减少代码量，加强复用。方式与方法与写代码差不多，只不过是放在了XML里面，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;set</span> <span class="na">android:ordering=</span><span class="s">&quot;sequentially&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;set&gt;</span>
</span><span class='line'>        <span class="nt">&lt;objectAnimator</span>
</span><span class='line'>            <span class="na">android:propertyName=</span><span class="s">&quot;x&quot;</span>
</span><span class='line'>            <span class="na">android:duration=</span><span class="s">&quot;500&quot;</span>
</span><span class='line'>            <span class="na">android:valueTo=</span><span class="s">&quot;400&quot;</span>
</span><span class='line'>            <span class="na">android:valueType=</span><span class="s">&quot;intType&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;objectAnimator</span>
</span><span class='line'>            <span class="na">android:propertyName=</span><span class="s">&quot;y&quot;</span>
</span><span class='line'>            <span class="na">android:duration=</span><span class="s">&quot;500&quot;</span>
</span><span class='line'>            <span class="na">android:valueTo=</span><span class="s">&quot;300&quot;</span>
</span><span class='line'>            <span class="na">android:valueType=</span><span class="s">&quot;intType&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/set&gt;</span>
</span><span class='line'>    <span class="nt">&lt;objectAnimator</span>
</span><span class='line'>        <span class="na">android:propertyName=</span><span class="s">&quot;alpha&quot;</span>
</span><span class='line'>        <span class="na">android:duration=</span><span class="s">&quot;500&quot;</span>
</span><span class='line'>        <span class="na">android:valueTo=</span><span class="s">&quot;1f&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/set&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这就声明了一个AnimatorSet，是一个位移和渐变动画，使用时用<a href="https://developer.android.com/reference/android/animation/AnimatorInflater">AnimatorInflater</a> 来加载<a href="https://developer.android.com/reference/android/animation/AnimatorInflater#loadAnimator(android.content.Context,%20int">load</a>)一下就可以了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">AnimatorSet</span> <span class="n">set</span> <span class="o">=</span> <span class="o">(</span><span class="n">AnimatorSet</span><span class="o">)</span> <span class="n">AnimatorInflater</span><span class="o">.</span><span class="na">loadAnimator</span><span class="o">(</span><span class="n">myContext</span><span class="o">,</span>
</span><span class='line'>    <span class="n">R</span><span class="o">.</span><span class="na">animator</span><span class="o">.</span><span class="na">property_animator</span><span class="o">);</span>
</span><span class='line'><span class="n">set</span><span class="o">.</span><span class="na">setTarget</span><span class="o">(</span><span class="n">myObject</span><span class="o">);</span>
</span><span class='line'><span class="n">set</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>支持的根节点有三个，AnimatorSet，ObjectAnimator和ValueAnimator：</p>

<ul>
<li>ValueAnimator - &lt;animator></li>
<li>ObjectAnimator - &lt;objectAnimator></li>
<li>AnimatorSet - &lt;set></li>
</ul>


<p>对于XML中使用ValueAnimator也是一样的，定义好，然后加载出来就可以用了，其实跟前面用代码写是一样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;animator</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">android:duration=</span><span class="s">&quot;1000&quot;</span>
</span><span class='line'>    <span class="na">android:valueType=</span><span class="s">&quot;floatType&quot;</span>
</span><span class='line'>    <span class="na">android:valueFrom=</span><span class="s">&quot;0f&quot;</span>
</span><span class='line'>    <span class="na">android:valueTo=</span><span class="s">&quot;-100f&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ValueAnimator</span> <span class="n">xmlAnimator</span> <span class="o">=</span> <span class="o">(</span><span class="n">ValueAnimator</span><span class="o">)</span> <span class="n">AnimatorInflater</span><span class="o">.</span><span class="na">loadAnimator</span><span class="o">(</span><span class="k">this</span><span class="o">,</span>
</span><span class='line'>        <span class="n">R</span><span class="o">.</span><span class="na">animator</span><span class="o">.</span><span class="na">animator</span><span class="o">);</span>
</span><span class='line'><span class="n">xmlAnimator</span><span class="o">.</span><span class="na">addUpdateListener</span><span class="o">(</span><span class="k">new</span> <span class="n">ValueAnimator</span><span class="o">.</span><span class="na">AnimatorUpdateListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onAnimationUpdate</span><span class="o">(</span><span class="n">ValueAnimator</span> <span class="n">updatedAnimation</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">float</span> <span class="n">animatedValue</span> <span class="o">=</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span><span class="n">updatedAnimation</span><span class="o">.</span><span class="na">getAnimatedValue</span><span class="o">();</span>
</span><span class='line'>        <span class="n">textView</span><span class="o">.</span><span class="na">setTranslationX</span><span class="o">(</span><span class="n">animatedValue</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span><span class='line'>
</span><span class='line'><span class="n">xmlAnimator</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>注意</strong>：有一点需要注意的是，因为View Animation也是支持用XML方式来定义的，且是放在了res/anim下面。所以如果使用Property Animation 时要放在res/animator下面，这个一定要注意。</p>

<h3>View状态变化动画</h3>

<p>从安卓一开始，对于一些View的状态变化就可以设置不同的Drawable，以给用户视觉上的交互 反馈，最常见的比如按扭，常规状态，Focused状态和按压状态，以及Disabled的状态（不可点击）可以设置不同的Drawable（如icon或者颜色等）以告诉用户。这个是叫做<a href="https://developer.android.com/guide/topics/resources/drawable-resource#StateList">StateListDrawable</a>。</p>

<p>现如今，也可以针对 View的不同状态设置不同的动画了，通过<a href="https://developer.android.com/reference/android/animation/StateListAnimator">StateListAnimator</a>来实现，它的语法与前面提到的StateListDrawable类似，亦是通过一个selector，只不过其中的每个item都是animator，而非drawable，比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;selector</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- the pressed state; increase x and y size to 150% --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item</span> <span class="na">android:state_pressed=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;set&gt;</span>
</span><span class='line'>            <span class="nt">&lt;objectAnimator</span> <span class="na">android:propertyName=</span><span class="s">&quot;scaleX&quot;</span>
</span><span class='line'>                <span class="na">android:duration=</span><span class="s">&quot;@android:integer/config_shortAnimTime&quot;</span>
</span><span class='line'>                <span class="na">android:valueTo=</span><span class="s">&quot;1.5&quot;</span>
</span><span class='line'>                <span class="na">android:valueType=</span><span class="s">&quot;floatType&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;objectAnimator</span> <span class="na">android:propertyName=</span><span class="s">&quot;scaleY&quot;</span>
</span><span class='line'>                <span class="na">android:duration=</span><span class="s">&quot;@android:integer/config_shortAnimTime&quot;</span>
</span><span class='line'>                <span class="na">android:valueTo=</span><span class="s">&quot;1.5&quot;</span>
</span><span class='line'>                <span class="na">android:valueType=</span><span class="s">&quot;floatType&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/set&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/item&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- the default, non-pressed state; set x and y size to 100% --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item</span> <span class="na">android:state_pressed=</span><span class="s">&quot;false&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;set&gt;</span>
</span><span class='line'>            <span class="nt">&lt;objectAnimator</span> <span class="na">android:propertyName=</span><span class="s">&quot;scaleX&quot;</span>
</span><span class='line'>                <span class="na">android:duration=</span><span class="s">&quot;@android:integer/config_shortAnimTime&quot;</span>
</span><span class='line'>                <span class="na">android:valueTo=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>                <span class="na">android:valueType=</span><span class="s">&quot;floatType&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;objectAnimator</span> <span class="na">android:propertyName=</span><span class="s">&quot;scaleY&quot;</span>
</span><span class='line'>                <span class="na">android:duration=</span><span class="s">&quot;@android:integer/config_shortAnimTime&quot;</span>
</span><span class='line'>                <span class="na">android:valueTo=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>                <span class="na">android:valueType=</span><span class="s">&quot;floatType&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/set&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/item&gt;</span>
</span><span class='line'><span class="nt">&lt;/selector&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这意思就是当点击的时候进行缩放动画，把其保存在res/xml/animate_scale.xml，这里需要注意，StateListDrawable是可以直接保存在res/drawable/下面的，但动画毕竟不是drawable，是不可以放在res/drawable下面。</p>

<p>通过android:stateListAnimator添加给指定的View，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;Button</span> <span class="na">android:stateListAnimator=</span><span class="s">&quot;@xml/animate_scale&quot;</span>
</span><span class='line'>        <span class="err">...</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果不在XML中设置，用代码也可以，先用<a href="https://developer.android.com/reference/android/animation/AnimatorInflater">AnimatorInflater</a>，把它<a href="https://developer.android.com/reference/android/animation/AnimatorInflater#loadStateListAnimator(android.content.Context,%20int">加载出来</a>)，然后调用<a href="https://developer.android.com/reference/android/view/View#setStateListAnimator(android.animation.StateListAnimator">View#setStateListAnimator</a>)即可。</p>

<h2>设计与实现要符合标准</h2>

<p>一个不争的事实是，在安卓的早期版本的时候对动画支持并不友好，因此当时很多GUI的设计都是采用水果平台的规范，导致大量的头部app，GUI交互，特别是动画这一块都是尽可能 的去模仿水果平台。</p>

<p>但时代不一样了，现在在谷歌加大了对安桌的支持力度后，特别是当<a href="https://www.google.com/design/spec/material-design/introduction.html">Material Design</a>出来了以后，从Android 5.0 Lollipop开始，伟大的Google就发布了专门针对UED的设计语言<a href="http://developer.android.com/intl/zh-cn/design/material/index.html">Material Design</a>它不再单单是设计规范了，而是一个非常详细的设计语言，具体到Icon怎么画，动画怎么做。那么，安桌的GUI交互设计与实现，就要符合Material Design的规范了，这样不但体验更符合安桌的风格，实现起来也更加的顺手，因为大量的标准库，AndroidX的库和风格主题动画等等都是以Material Design为标准的，开发人猿在实现的时候有更多的资源可以复用，不用再重复的去造轮子。</p>

<p>Anyway，官方的东西我们还是要学习的并尽可能的遵守的，特别是关于Material Design和Animation。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://developer.android.com/training/animation">Animations and Transitions</a></li>
<li><a href="https://github.com/lgvalle/Material-Animations">https://github.com/lgvalle/Material-Animations</a></li>
<li><a href="http://android-developers.blogspot.com/2014/10/implementing-material-design-in-your.html">Implementing Material Design in Your Android app</a></li>
<li><a href="http://www.androidchina.net/4385.html">如何学习 Android Animation</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Layout大点兵]]></title>
    <link href="http://toughcoder.net/blog/2021/08/16/android-layout-general-guides/"/>
    <updated>2021-08-16T22:55:56+08:00</updated>
    <id>http://toughcoder.net/blog/2021/08/16/android-layout-general-guides</id>
    <content type="html"><![CDATA[<p>智能手机催生了移动互联时代，现如今移动应用越来越成为最为核心的终端。而GUI页面是移动互联终端的标配，做好一个GUI页面，是非常重要的，能极大的提升用户体验和用户满意度。安桌生态，自古以来（没那么久，自安桌流行以来）在GUI方面就逊于水果生态，GUI页面的美观程度，操作流畅度以及动效的优美程度，水果生态是远好于安卓生态的。好消息是近几年的版本谷歌在这些方面做了大量努力，几乎追平与水果平台的差距。特别是在support libraries（现在是叫AndroidX）里面加入一些在各方面都远好于标准API中的UI组件，现在只要稍加努力就可以做出与水果一样，甚至更炫酷的GUI页面。</p>

<p><a href="http://toughcoder.net/blog/2021/08/16/android-layout-general-guides/"><img src="https://d2h0cx97tjks2p.cloudfront.net/blogs/wp-content/uploads/sites/2/2020/05/types-of-android-Layouts.jpg"></a></p>

<!-- more -->


<p>现在，对于安卓开发人猿来说，做GUI页面时选择很多，比如实现一个简单页面，可以用FrameLayout，也可以用LinearLayout，实现列表时可以用ListView，也可以用RecyclerView，面对纷繁复杂的需求以及众多的选择，到底该如何做选择，就成一个令人头痛的事情，今天就对Android布局进行一次大点兵，聊聊这些布局到底该如何使用。</p>

<p><strong>注意</strong>：这里面提到 的布局的意思是承担主页面的ViewGroup，比如页面的根布局。而不是指一些具体的内容渲染View（如TextView之于Text，ImageView之于Image）。</p>

<h2>简单和够用</h2>

<p>同样一个页面，实现的方式可以千奇百怪，就好比经典的“Hello，world”，就可以有很多种实现方法。文字肯定是用TextView，那么根布局用什么呢？可以用FrameLayout，可以用RelativeLayout，可以用LinearLayout，当然也可以用ListView，甚至是RecyclerView。对于产品同学来说，需求都可以实现了。但是可以并意味着就应该。</p>

<p>从工程和研发的角度来讲，实现方式要以够用和简单为首要原则，功能实现了仅仅是第一步，后续的维护成本是极其高昂的。代码首要是写给人看的，简单或者说优雅的实现方式，才能方便其他人理解，才可以降低维护成本。除此之外，代码也是写给CPU的，执行的性能和效率也是要考虑的因素，重型武器虽然也能杀死一只蚂蚁，但它耗费的资源相较于一根树枝来说，就大太多了。</p>

<p>过早优化是万恶之源，同理过于复杂的实现方案也是灾难之源。开发人猿要把简单和够用作为首要的原则。针对页面布局更是如此，能用普通的就用普通的，能用简单的就用简单的，功能实现了就可以，但是要尽可能以简单和便于理解作为标准。</p>

<h2>布局大点兵</h2>

<p>要想做出合适的选择，首先就需要对常用的布局进入了解，知道每种布局的优势和缺点，不同布局之间的区别，这样才能做出最佳的选择。</p>

<p>对于安卓的布局，可以分为三类，一是结构性布局，二是集合性布局，区别就在于数据是否是一个无限集合。比如像ListView它就是一个集合性布局，因为它可以显示无限个数据，只要往adapter里塞数据，列表就可以展示；而像LinearLayout就是一个结构性布局，虽然理论上它也可以塞无限个子view，但只能手动的塞，且性能会极其的差，毕竟它设计出来的目的，是沿一个方向排列一定数量的子View。</p>

<p>需要注意，不能简单的以可否滑动来作为布局的区分分类，因为结构性的布局，假如子View较多的话，外面包一层ScrollView也是可以滑动的；而集合性布局，假如数据 少于一屏的话，也是不可以滑动的。重点还是在于数据量。</p>

<h3>结构性布局</h3>

<h4><a href="https://developer.android.com/reference/android/widget/FrameLayout">FrameLayout</a></h4>

<p>简单易用，重点应用场景是层叠，在水平和竖直方向都没有约束，因此它最适合用于页面的根布局，比如手机窗口的根节点，Activity的根节点，Dialog的根节点等等，都是FrameLayout。</p>

<p>因为FrameLayout重点在于层叠，所以有时候可以做一些Canvas级别的裁切，比如实现圆角，这时也可以用FrameLayout，对FrameLayout的draw时去做裁切，然后整体效果就是做出了圆角，这对于一些不方便做圆的View有帮助，比如像SurfaceView，本身不方便做圆角，因此可以面其上面包一层FrameLayout，就可以实现圆角。</p>

<h4><a href="https://developer.android.com/reference/android/widget/LinearLayout">LinearLayout</a></h4>

<p>某一个方向的简单堆叠。最为方便的便是按比例排列，不过性能有影响。居中和对齐不如RelativeLayout方便。</p>

<h4><a href="https://developer.android.com/reference/android/widget/RelativeLayout">RelativeLayout</a></h4>

<p>特点就是每个子View必须指定相对于其他View的条件参数，以实现布局。强大且复杂，可以完全实现FrameLayout和LinearLayout。</p>

<p>特点是对于居中和对齐的支持很好，缺点就是性能差。且容易牵一发动全身。</p>

<h4><a href="https://developer.android.com/reference/android/widget/GridLayout">GridLayout</a></h4>

<p>非常适合表格形的页面，就好比计算器之类的，具体使用方法可以<a href="http://toughcoder.net/blog/2015/11/25/android-tricks-introduct-to-gridlayout/">参考之前的文章</a>。要点就在于子View呈表格形排列，且大部分的子View的尺寸是一致的，这时就可以考虑使用GridLayout。</p>

<h4><a href="https://developer.android.com/reference/androidx/constraintlayout/widget/ConstraintLayout">ConstraintLayout</a></h4>

<p>这个是AndroidX中增加的大杀器，使用方法可以<a href="http://toughcoder.net/blog/2021/08/10/android-constraintlayout-made-easy/">参考这篇文章</a>，可以胜任意的非集合性布局场景，可以完全替代前面提到的几种布局。</p>

<p>但为了避免滥用重武器，建议用ConstraintLayout替代LinearLayout和RelativeLayout就好。</p>

<h3>集合性布局</h3>

<h4><a href="https://developer.android.com/reference/android/widget/ListView">ListView</a></h4>

<p>集合性布局的典型代码，非常适合列表性数据。特点是简单易用。缺点是只能垂直方向滑动，每个条目元素的布局不宜复杂，并且对动画的支持不那么友好。当每个元素条目的布局非常简单时（如 就是简单的icon+文字）并且没有眼花聊乱的动画时，那么用这个也足够了。</p>

<h4><a href="https://developer.android.com/reference/android/widget/GridView">GridView</a></h4>

<p>与ListView类似，只不过是以表格形态来展示，简单易用，当每个无素条目较简单时，用这个比较合适，同样只支持垂直方向滑动。</p>

<h4><a href="https://developer.android.com/jetpack/androidx/releases/recyclerview">RecyclerView</a></h4>

<p>AndroidX中的集合性布局的大杀器，它重点在于Recycler，在渲染层面做了较多的优化，且布局方式跟ViewGroup本身没关系，有各种布局管理器来实现不同样式的布局，并且对动画的支持，也就是说每个元素条目的进入退出的动画的支持非常友好。</p>

<p>缺点就是使用起来较麻烦，目前已经变成了集合性布局的标准实现，但其实有被滥用的嫌疑，很多对于元素条目非常简单的场景没必要用它的。</p>

<h4><a href="https://developer.android.com/reference/androidx/viewpager/widget/ViewPager">ViewPager</a></h4>

<p>水平方向多页布局的标准组件。其实把它称作集合性布局，略迁强，因为很多时候它的数据量并不像前面那几位那样多。需要注意它的适用场景是有很多页需要横向滑动展示时，这里页的意思是，每一屏只展示一个元素条目。</p>

<h2>如何选择一个合适的布局</h2>

<p>首先，要对数据量做区分，看是选择结构性布局还是集合性布局，然后再依据页面的复杂程度来做具体的选择。</p>

<p>其次，核心的原则是够用和简单，不能为了用而用，简单的实现功能能节省大量的维护成本。</p>

<p>具体的指导原则是：</p>

<ol>
<li>应用的根布局或者页面的根布局建议用FrameLayout</li>
<li>稍复杂的LinearLayout和RelativeLayout一定要用ConstraintLayout来做</li>
<li>如有可能，可以多多用ConstraintLayout</li>
<li>对于集合性布局，如果元素条目简单，且无动画要求，那就用ListView或者GridView吧</li>
<li>如有可能，可以多多用RecyclerView</li>
<li>水平方向多页展示，没得说就用ViewPager</li>
</ol>


<h2>参考资料</h2>

<ul>
<li><a href="https://developer.android.com/guide/topics/ui/declaring-layout">Layouts</a></li>
<li><a href="https://developer.android.com/guide/topics/ui/layout/linear">Linear Layout</a></li>
<li><a href="https://developer.android.com/guide/topics/ui/layout/relative">Relative Layout</a></li>
<li><a href="https://developer.android.com/training/constraint-layout">Build a Responsive UI with ConstraintLayout</a></li>
<li><a href="https://developer.android.com/guide/topics/ui/layout/recyclerview">Create dynamic lists with RecyclerView</a></li>
<li><a href="https://developer.android.com/guide/topics/ui/binding">AdapterView</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android ConstraintLayout使用攻略]]></title>
    <link href="http://toughcoder.net/blog/2021/08/10/android-constraintlayout-made-easy/"/>
    <updated>2021-08-10T22:49:20+08:00</updated>
    <id>http://toughcoder.net/blog/2021/08/10/android-constraintlayout-made-easy</id>
    <content type="html"><![CDATA[<p>ConstraintLayout是新一代的布局，它汲取了众家之长，把布局的概念进行了大统一，灵活且强大，基本上可以干掉以前所有的常用布局（LinearLayout, RelativeLayout和FrameLayout）。自从Android Studio 2.3（大约在2017年）后，它就变成了Android Studio的默认模板的布局控件，可以看出谷歌对它的钟爱程度。今天就来学习一下如何使用这个新布局神器。</p>

<p><a href="http://toughcoder.net/blog/2021/08/10/android-constraintlayout-made-easy/"><img src="https://abhiandroid.com/ui/wp-content/uploads/2018/07/Constraint-Layout-Example-In-Android-Studio-1.png"></a></p>

<!-- more -->


<h2>简述</h2>

<p><a href="(https://developer.android.com/reference/androidx/constraintlayout/widget/ConstraintLayout">ConstraintLayout</a>)与RelativeLayout有些类似，是一个布局管理器（ViewGroup），但要强大许多，它可以以各种方式排列子View，以及按比例伸缩。最重要的改变就是它对于『Drag and drop』拖拽式制作GUI页面支持的相当的好。当然了这个取决于个人喜好，很多人仍然喜欢用写代码的方式直接去写xml文件，包括我在内。拖拽式虽然直观，但是不方便精准控制，对于一般性的布局来说尚可，但稍复杂了后，以及有了一些可滑动的view时，就不是那么的方便了。对于喜欢拖拽的同学可以查看<a href="https://developer.android.google.cn/training/constraint-layout">官方的一个教程</a>，以及<a href="https://blog.csdn.net/guolin_blog/article/details/53122387">郭大婶的一篇文章</a>，这两篇专注于拖拽式，且讲的都比较详细。</p>

<h3>添加依赖</h3>

<p>因为ConstraintLayout并不是在标准的SDK中，而是被放在了support SDK中，现在统一叫androidx了，所以要单独添加依赖：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'> <span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">implementation</span> <span class="s1">&#39;com.android.support.constraint:constraint-layout:2.1.0&#39;</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>概念与术语</h3>

<p>ContraintLayout中把一切有关布局的参数都称之为Constraint（约束），长和宽，对齐，居中，margin和padding都是constraint。布局中的属性均以&#8221;layout_constraint&#8221;为前缀。
约束（Constrain）的意思是指用另外一个View（包括父布局即ContraintLayout）对当前View的某一布局参数施加影响。具体的影响叫做Constraint，另外一个View称作约束对象（Constraining Object)，当前View称作被约束对象（Constrainted Object）。</p>

<p><img src="https://developer.android.com/reference/androidx/constraintlayout/widget/resources/images/relative-positioning.png" alt="" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'> <span class="nt">&lt;Button</span> <span class="na">android:id=</span><span class="s">&quot;@+id/buttonA&quot;</span> <span class="err">...</span> <span class="nt">/&gt;</span>
</span><span class='line'> <span class="nt">&lt;Button</span> <span class="na">android:id=</span><span class="s">&quot;@+id/buttonB&quot;</span> <span class="err">...</span>
</span><span class='line'>          <span class="na">app:layout_constraintLeft_toRightOf=</span><span class="s">&quot;@id/buttonA&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>排列方式</h3>

<p>对子View的排列方式是一个ViewGroup的最基础的功能，它也体现了不同的布局管理器的作用，如线性布局（LinearLayout）是以水平或者垂直方向平铺方式来排列子View的。ConstraintLayout是以类似RelativeLayout的方式，需要针对每个子View指定如何排列。</p>

<p><img src="https://developer.android.com/reference/androidx/constraintlayout/widget/resources/images/relative-positioning-constraints.png" alt="" /></p>

<h4>基础排列方式</h4>

<p>最为基础的排列方式就是针对每个子View，指定它相对于另外一个View或者父布局（也就是ConstraintLayout本身）的相对位置，从而确定该View的具体方位。具体就是[left, top, right, bottom]四个关键的排列元素相对于另外一个View或者父布局的位置关系。</p>

<p>如，layout_constraintLeft_toLeftOf=&ldquo;parent&#8221;，这就是左边与父布局左边对齐；layout_constraintTop_toBottomOf=&#8221;id/header&#8221;，这是把这个View放在id为header的下面。以此类推，因为与RelativeLayout的布局参数比较类似，就不细说了，详情可参阅文档。</p>

<p>还有一个非常实用的Constraint叫做baseline，它是专门针对TextView的，baseline也即文本的基线，可以简单理解为文字的底部，当有两个TextiView不一样大，文字大小也不一样时，却需要对齐文本，这个属于就相当的有用。</p>

<p><img src="https://upload-images.jianshu.io/upload_images/2787721-aebcad66710f4d48.png?imageMogr2/auto-orient/strip|imageView2/2/w/213/format/webp" alt="" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;TextView</span> <span class="na">android:id=</span><span class="s">&quot;@+id/TextView1&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;TextView</span>
</span><span class='line'>    <span class="na">android:id=</span><span class="s">&quot;@+id/TextView2&quot;</span>
</span><span class='line'>    <span class="na">app:layout_constraintLeft_toRightOf=</span><span class="s">&quot;@+id/TextView1&quot;</span>
</span><span class='line'>    <span class="na">app:layout_constraintBaseline_toBaselineOf=</span><span class="s">&quot;@+id/TextView1&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>margin</h3>

<p>常规使用与其他布局是一样的，通过layout_margin[Start,End,Left,Right,Bottom,Top]来指定与约束对象之间的margin，这个不细说了。</p>

<p>需要说一下，ConstraintLayout有一个goneMargin，可以用于当一个约束对象的Visibility被设置为GONE时，使用。用layout_goneMargin[Start,End,Left,Top,Right,Bottom]来设置。</p>

<p>比如A约束B，B在A的右边，它俩挨着，但如果A的Visibility设置为GONE时，正常情况下B就会挨到原来A的左边了，跑到了左边界上，这时可能就会变得比较丑了，如果使用margin，比如在A和B中间加一个margin，可以解决问题，但是也会影响当A可见的时候。而用goneMargin就可以完美的解决此种场景。layout_goneMarginStart=&ldquo;10dip&#8221;，那么这个margin只有当约束对象A的Visibility被置为GONE时，才会生效，这时B虽然跑到了左边界上，但是还有margin，就不会那么丑了。（其实goneMargin应用的场景也比较有限，前面说的case，也可以用A和B的父布局的leftPadding来解决）</p>

<p><img src="https://developer.android.com/reference/androidx/constraintlayout/widget/resources/images/visibility-behavior.png" alt="" /></p>

<h4>相当骚气的环状排列方式</h4>

<p>除了常规的行列式排列以外，这货还非常骚气的可以环状排列，以约束对象为圆心，通过角度和半径来约束位置：</p>

<ul>
<li>layout_constraintCircle 用以指定作为圆心的约束对象（其他view的id）</li>
<li>layout_constraintCircleRadius 被约束对象与圆心的距离</li>
<li>layout_constraintCircleAngle 被约束对象与横轴的角度（0~360度之间）</li>
</ul>


<p><img src="https://developer.android.com/reference/androidx/constraintlayout/widget/resources/images/circle1.png" alt="" />
<img src="https://developer.android.com/reference/androidx/constraintlayout/widget/resources/images/circle2.png" alt="" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;Button</span> <span class="na">android:id=</span><span class="s">&quot;@+id/buttonA&quot;</span> <span class="err">...</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Button</span> <span class="na">android:id=</span><span class="s">&quot;@+id/buttonB&quot;</span> <span class="err">...</span>
</span><span class='line'>      <span class="na">app:layout_constraintCircle=</span><span class="s">&quot;@+id/buttonA&quot;</span>
</span><span class='line'>      <span class="na">app:layout_constraintCircleRadius=</span><span class="s">&quot;100dp&quot;</span>
</span><span class='line'>      <span class="na">app:layout_constraintCircleAngle=</span><span class="s">&quot;45&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>环状排列实例</h4>

<p>环状排列虽然骚气，但是现实中似乎应用场景不多。</p>

<h3>居中与对齐</h3>

<p>对齐不是大问题，前面讲的如何排列其实就是对齐，选定一个约束对象后，其他对象都受其约束，就自然对齐了。</p>

<p>比较常见的问题，以及大部分时候比较麻烦的是居中，平衡与中庸中符合绝大多数审美的，因此布局时，绝大多数情况下都是需要居中的。居中的实现的方式就是两边都约束于父布局（也即ConstraintLayout），如：</p>

<p><img src="https://developer.android.com/reference/androidx/constraintlayout/widget/resources/images/centering-positioning.png" alt="" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>     <span class="nt">&lt;androidx.constraintlayout.widget.ConstraintLayout</span> <span class="err">...</span><span class="nt">&gt;</span>
</span><span class='line'>         <span class="nt">&lt;Button</span> <span class="na">android:id=</span><span class="s">&quot;@+id/button&quot;</span> <span class="err">...</span>
</span><span class='line'>             <span class="na">app:layout_constraintLeft_toLeftOf=</span><span class="s">&quot;parent&quot;</span>
</span><span class='line'>             <span class="na">app:layout_constraintRight_toRightOf=</span><span class="s">&quot;parent&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>     <span class="err">&lt;</span>/&gt;
</span></code></pre></td></tr></table></div></figure>


<p>居中，其实就是两边的约束边距各占空余空间的50%，扩展开来，想要实现不完全居中，两边边距呈一定比例关系，也是可以办到的。比如说黄金比例0.618就比居中好看，这也好办：
<img src="https://developer.android.com/reference/androidx/constraintlayout/widget/resources/images/centering-positioning-bias.png" alt="" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>   <span class="nt">&lt;androidx.constraintlayout.widget.ConstraintLayout</span> <span class="err">...</span><span class="nt">&gt;</span>
</span><span class='line'>         <span class="nt">&lt;Button</span> <span class="na">android:id=</span><span class="s">&quot;@+id/button&quot;</span> <span class="err">...</span>
</span><span class='line'>             <span class="na">app:layout_constraintHorizontal_bias=</span><span class="s">&quot;0.382&quot;</span>
</span><span class='line'>             <span class="na">app:layout_constraintLeft_toLeftOf=</span><span class="s">&quot;parent&quot;</span>
</span><span class='line'>             <span class="na">app:layout_constraintRight_toRightOf=</span><span class="s">&quot;parent&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="err">&lt;</span>/&gt;
</span></code></pre></td></tr></table></div></figure>


<p>这个比例控制叫bias，可以有Horizontal和Vertical两个方向。</p>

<h3>尺寸</h3>

<p>尺寸也就是针对子View的宽与高的约束，其实大部分时候一些具体的子View的宽与高要么指定大小，要么是WRAP_CONTENT的，但有些时候可能就是需要更加的灵活一些，这时就可以考虑用ConstraintLayout里面的一些特性。宽与高设置为固定大小或者WRAP_CONTENT时与其他ViewGroup是一样的，不用多说，要想特别一点的就是设置为『0dip』或者MATCH_CONSTRAINT时，就会用其他约束来决定该View的宽或者高。后面重点讨论有约束的情况。</p>

<h4>默认行为</h4>

<p>如果子View的宽或者高设置为了MATCH_CONSTRAINT（或者『0dip』）时，默认的行为是它会占满剩余的可用空间。</p>

<h4>Max与Min</h4>

<p>还可以加上最大最小的限制：</p>

<ul>
<li>layout_constraintWidth_min and layout_constraintHeight_min : will set the minimum size for this dimension</li>
<li>layout_constraintWidth_max and layout_constraintHeight_max : will set the maximum size for this dimension</li>
<li>layout_constraintWidth_percent and layout_constraintHeight_percent : will set the size of this dimension as a percentage of the parent</li>
</ul>


<h4>按约束对象的比例来设置（Percent）</h4>

<p>前面的默认行为或者最大最小还算不上啥，其他ViewGroup也有类似参数。最为变态与强大的是可以按约束对象的比例来作为此View的宽或者高：</p>

<ul>
<li>The dimension should be set to MATCH_CONSTRAINT (0dp)</li>
<li>The default should be set to percent app:layout_constraintWidth_default=&ldquo;percent&rdquo; or app:layout_constraintHeight_default=&ldquo;percent&rdquo;</li>
<li>Then set the layout_constraintWidth_percent or layout_constraintHeight_percent attributes to a value between 0 and 1</li>
</ul>


<h4>自身宽高比（Ratio）</h4>

<p>这个是最变态的约束方式，可以设置一个自身的宽高比，以确定子View的尺寸，当然了具体的宽或者高还要以其他约束方式确定具体尺寸，然后再按照设置的宽高比对另外一个进行约束。比如，实现一个方形的按扭，宽是其自身要求的宽度值（WRAP_CONTENT），设置的宽高比是1：1，所以高度也会跟宽度一样，就是一个方形的按扭了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;Button</span> <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>               <span class="na">android:layout_height=</span><span class="s">&quot;0dp&quot;</span>
</span><span class='line'>               <span class="na">app:layout_constraintDimensionRatio=</span><span class="s">&quot;1:1&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>高级特性</h2>

<p>前面讲的是一些基础使用方式，但是这货远不止这些，还有一些非常强大的功能，下面简单介绍两个。</p>

<h3>链（Chains）</h3>

<p>在某一个方向上（横着或者竖着）有着相互约束的一组子View，会被视为一个链，第一个称作头部（Head），可以应用一些样式以对整个链内的子View都产生影响。
<img src="https://developer.android.com/reference/androidx/constraintlayout/widget/resources/images/chains.png" alt="" />
<img src="https://developer.android.com/reference/androidx/constraintlayout/widget/resources/images/chains-head.png" alt="" /></p>

<p>这里的相互约束的意思是，比如有上面A，B，C三个子View，那么它们要相互约束，也即：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;ConstraintLayout&gt;</span>
</span><span class='line'>      <span class="nt">&lt;A</span> <span class="na">layout_constraintLeft_toLeftOf=</span><span class="s">&quot;parent&quot;</span>
</span><span class='line'>           <span class="na">layout_constraintRight_toRightOf=</span><span class="s">&quot;B&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;B</span> <span class="na">layout_constraintLeft_toLeftOf=</span><span class="s">&quot;A&quot;</span>
</span><span class='line'>           <span class="na">layout_constraintRight_toRightOf=</span><span class="s">&quot;C&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;C</span> <span class="na">layout_constraintLeft_toLeftOf=</span><span class="s">&quot;B&quot;</span>
</span><span class='line'>           <span class="na">layout_constraintRight_toRightOf=</span><span class="s">&quot;parent&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/ConstraintLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>就可以，对头部子View  A进行样式（Chain style），通过layout_constraintHorizontal_chainStyle来设置：</p>

<ul>
<li>CHAIN_SPREAD &ndash; the elements will be spread out (default style)<em> Weighted chain &ndash; in CHAIN_SPREAD mode, if some widgets are set to MATCH_CONSTRAINT, they will split the available space</em> CHAIN_SPREAD_INSIDE &ndash; similar, but the endpoints of the chain will not be spread out* CHAIN_PACKED &ndash; the elements of the chain will be packed together. The horizontal or vertical bias attribute of the child will then affect the positioning of the packed elements</li>
</ul>


<p><img src="https://developer.android.com/reference/androidx/constraintlayout/widget/resources/images/chains-styles.png" alt="" /></p>

<p>链中的权重（Weighted chains）</p>

<p>默认情况下，子View会均分并占满可用的空间。可以用权重来按比例分配，给子View加上layout_constraintHorizontal_weight后，就会按比例分配，这个与LinearLayout的layoutWeight用法是一样的。</p>

<h3>组（Groups）</h3>

<p>为了View的渲染性能，各路大神告诉我们要尽可能的让布局扁平化，但是，如果太扁平了，全都放在一个ViewGroup下面，就会混乱，特别是像RelativeLayout和ConstraintLayout，子View的排列方式会产生相互依赖，会有牵一发动全身的情况出现。为了避免这种情况，就需要对子View进行分组，对页面进行区域划分，把紧密相关的视为一个组。以往，会用一个子ViewGroup把一个组包起来，虽然会加深View的层次，但这样能避免牵一发动全身。</p>

<p>而对于ConstraintLayout来说，有更先进的方式了，它有一个类叫Group，就是专门用来干这件事儿的，但Group对象并不是一个真的子View，这里的意思是它并不会在View tree中进行渲染，它是专门用于管理属于它的子View的，比如方便对整个组进行Visibility的设置。</p>

<h2>神器要如何使用</h2>

<p>前面的介绍就差不多了，ConstraintLayout还是相当的强大的，如有可能还是尽可能的多用它吧。它的实现上面确实挺复杂的，毕竟功能比较强大，但它的效率并不差。对于常用的几大布局都可以直接用它来替代。</p>

<h3>当线性布局使用（as LinearLayout）</h3>

<p>线性布局最大的优势就在于可以用weight的方式来按比例排放，而这个用前面提到的Chain就可以完美的解决。所以，LinearLayout可以完全放弃。</p>

<h3>当层叠布局使用（as FrameLayout）</h3>

<p>FrameLayout的全用场景一般是作为整个应用的根布局，特别是HomeActivity+Fragment这种架构。从纯的功能角度来讲，ConstraintLayout可以完全实现FrameLayout的所有功能，所以，FrameLayout也可以放弃。</p>

<p>但从简单方便角度来讲，假如是HomeActivity的根布局，子View都是MATCH_PARENT的Fragement的话，也没有必要换成ConstraintLayout，这种场景FrameLayout完全够用，而且非常适合它。换成ConstraintLayout反倒有些浪费，有些杀鸡用牛刀。</p>

<h3>当相对布局使用（as RelativeLayout）</h3>

<p>从前面的讲述可以看出，ConstraintLayout几乎就是RelativeLayout的加强版。所以，凡是用到RelativeLayout的地方都<strong>应该换成ConstaintLayout</strong>。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://developer.android.google.cn/training/constraint-layout">Build a Responsive UI with ConstraintLayout</a></li>
<li><a href="https://developer.android.com/reference/androidx/constraintlayout/widget/ConstraintLayout">ConstraintLayout</a></li>
<li><a href="https://www.jianshu.com/p/17ec9bd6ca8a">约束布局ConstraintLayout看这一篇就够了</a></li>
<li><a href="https://developer.android.com/codelabs/constraint-layout#0">Use ConstraintLayout to design your Android views</a></li>
<li><a href="https://www.raywenderlich.com/9475-constraintlayout-tutorial-for-android-complex-layouts">ConstraintLayout Tutorial for Android: Complex Layouts</a></li>
<li><a href="https://abhiandroid.com/ui/constraintlayout">Constraint Layout Tutorial With Example In Android Studio</a></li>
<li><a href="https://blog.csdn.net/guolin_blog/article/details/53122387">Android新特性介绍，ConstraintLayout完全解析</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android事件高级手势处理]]></title>
    <link href="http://toughcoder.net/blog/2021/08/03/advanced-event-gesture-tricks/"/>
    <updated>2021-08-03T21:26:02+08:00</updated>
    <id>http://toughcoder.net/blog/2021/08/03/advanced-event-gesture-tricks</id>
    <content type="html"><![CDATA[<p>GestureDetector只能帮我们处理并识别一些常用的简单的手势，如点击，双击，长按，滑动（Scroll）和快速滑动（Fling）等，一般情况下，这些足够我们使用了，但有些时候需要一些更为复杂的手势操作，如Translate，Zoom，Scale和Rotate，以及像处理一些多点触控（MultiTouch），这就需要开发人猿自己处理了，本文将讨论一下这些内容。</p>

<p><a href="http://toughcoder.net/blog/2021/08/03/advanced-event-gesture-tricks/"><img src="http://en.proft.me/media/android/android_gestures.jpg"></a></p>

<!-- more -->


<h2>高级手势识别</h2>

<h3>移动（Translate/Drag）</h3>

<p>这里的移动的意思是让物体随着手指在屏幕上移动，或者叫作拖拽。而且这个只需要一个手指就可以办到，不涉及多点触控。</p>

<p>其实，这个实现起来并不复杂，从onTouchEvent处获得事件后，不断的用MotionEvent的坐标来刷新目标View即可，甚至都不用管具体的事件类型，因为无论是ACTION_DOWN，ACTION_UP或者ACTION_MOVE，都可以提供新的坐标，只管从事件处取坐标然后刷新就可以了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>   <span class="n">draw</span> <span class="nf">at</span> <span class="o">(</span><span class="n">x0</span><span class="o">,</span> <span class="n">y0</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">onTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">x</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">getRawX</span><span class="o">();</span>
</span><span class='line'>      <span class="n">y</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">getRawY</span><span class="o">();</span>
</span><span class='line'>      <span class="n">invalidate</span> <span class="nf">with</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">);</span> <span class="c1">// will draw at (x, y);</span>
</span><span class='line'>   <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>旋转（Rotate）</h3>

<p>同样，对于旋转用单个手指也可以办到，以目标View当前的位置为圆心，以手指划过的曲线作为圆弧，由此便可让目标View旋转起来，而且这个手势由单个手指也可以实现，不用管多点触控。</p>

<p>其实可以进一步的做简化，认定屏幕中央为圆心，来计算手势划过的角度，并且为了连惯性，要以事件ACTION_MOVE过程中的增量角度来对View进行旋转，这样会让旋转看起来更顺滑一些，额外的工作是要把事件的坐标进行一下转化，转化为以屏幕中心为原点的坐标。</p>

<p>具体的流程是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>   <span class="n">lastTheta</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">onTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">switch</span> <span class="o">(</span><span class="n">action</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">case</span> <span class="nl">ACTION_DOWN:</span>
</span><span class='line'>      <span class="n">lastX</span> <span class="o">=</span> <span class="n">normalize</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getX</span><span class="o">());</span>
</span><span class='line'>      <span class="n">lastY</span> <span class="o">=</span> <span class="n">normalize</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getY</span><span class="o">());</span>
</span><span class='line'>      <span class="n">lastTheta</span> <span class="o">=</span> <span class="n">angle</span><span class="o">(</span><span class="n">lastX</span><span class="o">,</span> <span class="n">lastY</span><span class="o">);</span>
</span><span class='line'>      <span class="k">break</span><span class="o">;</span>
</span><span class='line'>   <span class="k">case</span> <span class="nl">ACTION_MOVE:</span>
</span><span class='line'>     <span class="n">newX</span> <span class="o">=</span> <span class="n">normalize</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getX</span><span class="o">());</span>
</span><span class='line'>     <span class="n">newY</span> <span class="o">=</span> <span class="n">normalize</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getY</span><span class="o">());</span>
</span><span class='line'>     <span class="n">theta</span> <span class="o">=</span> <span class="n">angle</span><span class="o">(</span><span class="n">newX</span><span class="o">,</span> <span class="n">newY</span><span class="o">);</span>
</span><span class='line'>     <span class="n">deltaTheta</span> <span class="o">=</span> <span class="n">alpha</span> <span class="o">-</span> <span class="n">beta</span><span class="o">;</span>
</span><span class='line'>     <span class="n">invalidate</span> <span class="n">to</span> <span class="n">rotate</span> <span class="n">with</span> <span class="n">deltaTheta</span><span class="o">;</span>
</span><span class='line'>     <span class="n">lastTheta</span> <span class="o">=</span> <span class="n">theta</span><span class="o">;</span>
</span><span class='line'>     <span class="k">break</span><span class="o">;</span>
</span><span class='line'>   <span class="k">case</span> <span class="nl">ACTION_CANCEL:</span>
</span><span class='line'>   <span class="k">case</span> <span class="nl">ACTION_UP:</span>
</span><span class='line'>      <span class="n">we</span> <span class="n">are</span> <span class="n">done</span><span class="o">.</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">normalizeX</span><span class="o">(</span><span class="n">x</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">x</span> <span class="o">/</span> <span class="n">screenWidth</span><span class="o">;</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">normalizeY</span><span class="o">(</span><span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">y</span> <span class="o">/</span> <span class="n">screenHeight</span><span class="o">;</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">angle</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nf">atan</span><span class="o">(</span><span class="n">y</span> <span class="o">/</span> <span class="n">x</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>至于缩放，单个手指无法完成，必须要用两个手指才可以，就涉及到多点触控，所以需要先介绍一下多点触控。</p>

<h2>多点触控（MultiTouch）</h2>

<p>这个并不复杂，虽然听起来像个神秘高科技，但其实，处理流程并不复杂，主体流程仍然是在onTouchEvent方法中，并且主要的对象仍是<a href="https://developer.android.com/reference/android/view/MotionEvent?hl=en">MotionEvent</a>，文档里面基本上都说清楚了，要点就是：</p>

<ol>
<li>MotionEvent对象，会用pointerId和pointerIndex来区分不同的触控点（术语是Pointer）</li>
<li>事件流是：ACTION_DOWN 称为主触控点(Primary Pointer），然后是ACTION_POINTER_DOWN 另外一个触控点来了（非Primary Pointer），然后是ACTION_MOVE 这里没有显示 区分不同的pointer，需要开发人猿自己去区分，然后是ACTION_POINTER_UP 非主触控点 离开了，最后是ACTION_UP 主触控点离开了。需要注意的是，这是处理事件的逻辑上的顺序 ，真实的事件流，不一定是这样的（ACTION_DOWN肯定是第一个，ACTION_UP肯定 肯定最后一个，但中间的几个有顺序 不定）。</li>
<li>注意的要点，每次事件来了后，不同的触控点（Pointer）的index并不是固定的，比如上一次MOVE时它在index 0，但下次可能就在index 1，而其Pointer Id是固定的。所以在处理的整个流程中要记录不同Pointer的id，然后获得其index，再用index去取坐标啊之类的数据。</li>
<li>多点触控，天生就支持，所以即使你不识别多点触控手势（如scale），只关心单个手指手势，在处理的时候，仍要考虑到多点的逻辑。比如说translate时，如果不考虑多点，那么当另外一个手指触摸了屏幕，产生了ACTION_MOVE事件，但它的坐标跟最初产生事件的Pointer差距很远，那么如果不做排除，就可能产生瞬间漂移。</li>
</ol>


<h3>加强版的单触控点手势</h3>

<p>对于前面提到的单触控点手势（单手指就能识别的手势）如Translate和Rotate，其实都需要加强一下逻辑，以防止多触控点产生的干扰。</p>

<p>加强版本的单触控点手势处理：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>   <span class="n">primaryPointerId</span> <span class="o">=</span> <span class="n">INVALIDE_POINTER_ID</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">onTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">switch</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getActionMasked</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>         <span class="k">case</span> <span class="nl">ACTION_DOWN:</span>
</span><span class='line'>              <span class="n">primaryPointer</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">getPointerId</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getActionIndex</span><span class="o">());</span>
</span><span class='line'>              <span class="k">break</span><span class="o">;</span>
</span><span class='line'>         <span class="k">case</span> <span class="nl">ACTION_MOVE:</span>
</span><span class='line'>              <span class="n">pointerIndex</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">findPointerIndex</span><span class="o">(</span><span class="n">primaryPointerId</span><span class="o">);</span>
</span><span class='line'>              <span class="n">x</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">getX</span><span class="o">(</span><span class="n">pointerIndex</span><span class="o">);</span>
</span><span class='line'>              <span class="n">y</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">getY</span><span class="o">(</span><span class="n">pointerIndex</span><span class="o">);</span>
</span><span class='line'>              <span class="n">be</span> <span class="n">happy</span> <span class="n">with</span> <span class="n">x</span> <span class="n">and</span> <span class="n">y</span><span class="o">;</span>
</span><span class='line'>              <span class="k">break</span><span class="o">;</span>
</span><span class='line'>          <span class="k">case</span> <span class="nl">ACTION_UP:</span>
</span><span class='line'>          <span class="k">case</span> <span class="nl">ACTION_CANCEL:</span>
</span><span class='line'>            <span class="n">primaryIndex</span> <span class="o">=</span> <span class="n">INVALIDE_POINTER_ID</span><span class="o">;</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>   <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然，这里也取决于具体的使用场景，假如允许切换触控点，比如先一个手指拖动，然后另外一个手指点进来，这时第一个手指离开了，如果想继续 拖动的话，就需要更换已保存的primaryPointer。这时会收到ACTION_POINTER_UP，需要在此做切换处理，继续 上面的代码片段，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="n">secondPointer</span> <span class="o">=</span> <span class="n">INVALIDE_POINTER_ID</span><span class="o">;</span>
</span><span class='line'>  <span class="k">case</span> <span class="nl">ACTION_POINTER_DOWN:</span>
</span><span class='line'>     <span class="n">secondPointer</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">getPointerId</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getActionIndex</span><span class="o">());</span>
</span><span class='line'>     <span class="k">break</span><span class="o">;</span>
</span><span class='line'>  <span class="k">case</span> <span class="nl">ACTION_POINTER_UP:</span>
</span><span class='line'>     <span class="n">thisPointer</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">getPointerId</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getActionIndex</span><span class="o">());</span>
</span><span class='line'>     <span class="k">if</span> <span class="o">(</span><span class="n">thisPointer</span> <span class="o">==</span> <span class="n">primaryPointer</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">primaryPointer</span> <span class="o">=</span> <span class="n">secondPointer</span><span class="o">;</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'>     <span class="n">secondPointer</span> <span class="o">=</span> <span class="n">INVALIDE_POINTER_ID</span><span class="o">;</span>
</span><span class='line'>     <span class="k">break</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>还有一点需要注意的是，不能简单的只用<a href="https://developer.android.com/reference/android/view/MotionEvent#getPointerCount()">getPointerCount</a>来作判断，就比如pointer 1先来，然后pointer 2来了，pointer 1又离开了，这时pointerCount仍是1，但是pointer已变化 了，事件的位置就变了，如果不按上述方法处理，将会发生跳变。</p>

<h3>缩放（Zoom/Scale）</h3>

<p>缩放手势是多点触控的一个非常典型的应用，因为单手无法做出比较合理的手势判断。SDK当中提供了一个用于识别缩放的手势识别器<a href="https://developer.android.com/reference/android/view/ScaleGestureDetector">ScaleGestureDetector</a>，它的使用方法与GestureDetector一样，创建对象，塞MotionEvent进去，然后注册listener即可。</p>

<p>但如果，用单独的detector不是很方便，比如已经自己实现了一套手势识别逻辑，现在只想加上Scale，或者其他原因不方便引入ScaleGestureDetector，那么就得自己去做了，也并不是很复杂。</p>

<p>主要思路就是，收集齐两个触控点，记录它们初始的位置，计算它们之间初始的距离，在ACTION_MOVE时，再计算新的距离，新旧距离之比既可当作缩放的比例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>   <span class="n">primaryPointer</span> <span class="o">=</span> <span class="n">INVALIDE_POINTER_ID</span><span class="o">;</span>
</span><span class='line'>   <span class="n">secondPointer</span> <span class="o">=</span> <span class="n">INVALIDE_POINTER_ID</span><span class="o">;</span>
</span><span class='line'>   <span class="n">initialSpan</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>   <span class="n">startPoint</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>   <span class="n">onTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="k">case</span> <span class="nl">ACTION_DOWN:</span>
</span><span class='line'>              <span class="n">index</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">getActionIndex</span><span class="o">();</span>
</span><span class='line'>              <span class="n">primaryPointer</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">getPointerId</span><span class="o">(</span><span class="n">index</span><span class="o">);</span>
</span><span class='line'>              <span class="n">startPoint</span> <span class="o">=</span> <span class="n">Point</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getX</span><span class="o">(</span><span class="n">index</span><span class="o">),</span> <span class="n">event</span><span class="o">.</span><span class="na">getY</span><span class="o">(</span><span class="n">index</span><span class="o">));</span>
</span><span class='line'>              <span class="k">break</span><span class="o">;</span>
</span><span class='line'>         <span class="k">case</span> <span class="nl">ACTION_POINTER_DOWN:</span>
</span><span class='line'>              <span class="n">index</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">getActionIndex</span><span class="o">();</span>
</span><span class='line'>              <span class="n">secondPointer</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">getPointerId</span><span class="o">(</span><span class="n">index</span><span class="o">);</span>
</span><span class='line'>              <span class="n">sp</span> <span class="o">=</span> <span class="n">Point</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getX</span><span class="o">(</span><span class="n">index</span><span class="o">),</span> <span class="n">event</span><span class="o">.</span><span class="na">getY</span><span class="o">(</span><span class="n">index</span><span class="o">));</span>
</span><span class='line'>              <span class="n">initialSpan</span> <span class="o">=</span> <span class="n">distance</span><span class="o">(</span><span class="n">startPoint</span><span class="o">,</span> <span class="n">sp</span><span class="o">);</span>
</span><span class='line'>             <span class="k">break</span><span class="o">;</span>
</span><span class='line'>         <span class="k">case</span> <span class="nl">ACTION_MOVE:</span>
</span><span class='line'>              <span class="k">if</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getPointerCount</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">primaryIndex</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">findPointerIndex</span><span class="o">(</span><span class="n">primaryPointer</span><span class="o">);</span>
</span><span class='line'>                  <span class="n">pp</span> <span class="o">=</span> <span class="n">Point</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getX</span><span class="o">(</span><span class="n">primaryIndex</span><span class="o">),</span> <span class="n">event</span><span class="o">.</span><span class="na">getY</span><span class="o">(</span><span class="n">primaryIndex</span><span class="o">));</span>
</span><span class='line'>                  <span class="n">secondIndex</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">findPointerIndex</span><span class="o">(</span><span class="n">secondPointer</span><span class="o">);</span>
</span><span class='line'>                  <span class="n">sp</span> <span class="o">=</span> <span class="n">Point</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getX</span><span class="o">(</span><span class="n">secondIndex</span><span class="o">),</span> <span class="n">event</span><span class="o">.</span><span class="na">getY</span><span class="o">(</span><span class="n">secondIndex</span><span class="o">));</span>
</span><span class='line'>                  <span class="n">thisDistance</span> <span class="o">=</span> <span class="n">distance</span><span class="o">(</span><span class="n">pp</span><span class="o">,</span> <span class="n">sp</span><span class="o">);</span>
</span><span class='line'>                  <span class="k">if</span> <span class="o">(</span><span class="n">thisDistance</span> <span class="o">&gt;</span> <span class="n">ScaledSpan</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                      <span class="n">scale</span> <span class="o">=</span> <span class="n">thisDistance</span> <span class="o">/</span> <span class="n">initialSpan</span><span class="o">;</span>
</span><span class='line'>                      <span class="n">be</span> <span class="n">happy</span> <span class="n">with</span> <span class="n">scale</span><span class="o">;</span>
</span><span class='line'>                  <span class="o">}</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              <span class="k">break</span><span class="o">;</span>
</span><span class='line'>         <span class="k">case</span> <span class="nl">ACTION_UP:</span>
</span><span class='line'>         <span class="k">case</span> <span class="nl">ACTION_CANCEL:</span>
</span><span class='line'>         <span class="k">case</span> <span class="nl">ACTION_POINTER_UP:</span>
</span><span class='line'>             <span class="n">thisPointer</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">getPointerId</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getActionIndex</span><span class="o">());</span>
</span><span class='line'>             <span class="k">if</span> <span class="o">(</span><span class="n">thisPointer</span> <span class="o">==</span> <span class="n">primaryPointer</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">primaryPointer</span> <span class="o">=</span> <span class="n">INVALIDE_POINTER_ID</span><span class="o">;</span>
</span><span class='line'>             <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">thisPointer</span> <span class="o">==</span> <span class="n">seocndPointer</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">secondPointer</span> <span class="o">=</span> <span class="n">INVALIDE_POINTER_ID</span><span class="o">;</span>
</span><span class='line'>             <span class="o">}</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>   <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然 ，还可以加一些阈值判断，比如当distance大于<a href="https://developer.android.com/reference/android/view/ViewConfiguration?hl=en#getScaledTouchSlop()">getScaledTouchSlop</a>，才触发使用scale的逻辑。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://en.proft.me/2017/06/25/detecting-gestures-android-gesturedetector/">Detecting gestures on Android via GestureDetector</a></li>
<li><a href="https://developer.android.com/training/gestures/multi">Handle multi-touch gestures</a></li>
<li><a href="https://developer.android.com/training/gestures/scale">Drag and scale</a></li>
<li><a href="https://developer.android.com/guide/topics/ui/drag-drop">Drag and drop</a></li>
<li><a href="https://developer.android.com/reference/android/view/MotionEvent?hl=en">MotionEvent</a></li>
<li><a href="https://guides.codepath.com/android/gestures-and-touch-events">Gestures and Touch Events</a></li>
<li><a href="https://github.com/Almeros/android-gesture-detectors">android-gesture-detectors</a></li>
<li><a href="https://github.com/ikew0ng/SwipeBackLayout">SwipeBackLayout</a></li>
<li><a href="https://github.com/alexvasilkov/GestureViews">GestureViews</a></li>
<li><a href="https://github.com/nisrulz/Sensey">Sensey</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android View滑动处理大法]]></title>
    <link href="http://toughcoder.net/blog/2021/07/26/android-view-scrolling-made-easy/"/>
    <updated>2021-07-26T22:27:14+08:00</updated>
    <id>http://toughcoder.net/blog/2021/07/26/android-view-scrolling-made-easy</id>
    <content type="html"><![CDATA[<p>对于触控式操作来说，滑动是一个特别重要的手势操作，如何做到让应用程序的页面滑动起来如丝般顺滑，让用户感觉到手起刀落的流畅感，是开发人猿需要重点解决的问题，这对提升用户体验是最为重要的事情。本文就将探讨一下，Android中View的滑动相关知识，以及如何做到丝般顺滑。</p>

<p><a href="http://toughcoder.net/blog/2021/07/26/android-view-scrolling-made-easy/"><img src="https://i.stack.imgur.com/tGa5g.png"></a></p>

<!-- more -->


<h2>如何让View滑动起来</h2>

<p>View的滑动是GUI支持的一项基本特性，就像触摸事件一件，这是废话，平台如果不支持，你还搞个毛线。</p>

<h3>View滑动的基本原理</h3>

<p>我们先来看一下Android中实现View的滑动的基本原理。其实屏幕并没有动啊，一个View的可绘制区域，对于屏幕来说，对于view tree来说都是没有变化 的。父布局给某一个View的绘制区域是在layout之后就确定好了的，当View的真实高度或者宽度超过了这块可绘制区域，那么就需要滑动才可以把整个View做到用户可见。View内部通过两个关键成员变量mScrollX和mScrollY来记录滑动之后的坐标，View本身有mLeft和mTop来标识自己相对于父布局的坐标位置，那么当有滑动的时候，在此View当中具体要绘制的区域就变成了以mLeft+mScrollX和mTop+mScrollY为起点的区域了。由此View便滚动起来了。</p>

<h3>如何实现View的滑动</h3>

<p>对于开发人猿来说，实现View的滑动，需要关注三个重要的方法，也即是<a href="https://developer.android.com/reference/android/view/View#scrollBy(int,%20int">View#scrollBy</a>)，<a href="https://developer.android.com/reference/android/view/View#scrollTo(int,%20int">View#scrollTo</a>)以及<a href="https://developer.android.com/reference/android/view/View#onScrollChanged(int,%20int,%20int,%20int">View#onScrollChanged</a>)，这是实现滑动的三个最为核心的方法。</p>

<p>scrollBy提供的参数是需要滑动的距离，而scrollTo则是需要传入要滑动到的目标坐标值，这两个方法都是要修改mScrollX和mScrollY的值，本质上是一样的。而onScrollChanged则是一个回调，用以通知更新了的滑动位置。</p>

<h2>Scroll手势</h2>

<p>要想让View滑动起来，离不开事件手势的支持。最简单也是最直接的手势就是onScroll手势，这个在GestureDetecor中可以识别出此手势，或者自己去直接处理touch event也可以得出此手势。这个并不复杂，就是直接通过touch 事件来计算滑动多少距离就好了，按照View预设计的可以滑动的方向，比如横向就计算不同时间点MotionEvent的坐标值，得到一个水平距离deltaX，然后调用scrollBy即可。垂直方向依此类推。</p>

<p>Scroll手势简单是因为它是直接来源于事件，且速度较慢，并不需要额外处理，所以整体逻辑处理流程并不复杂。</p>

<p>在<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/GestureDetector.java?q=gesturedetector">GestureDetector</a>中的识别就是在ACTION_MOVE时，查看滑动过的距离，这个距离（由sqrt(dx x dx, dy x dy）如果大于touch slop，就会触发onScroll手势回调。</p>

<h2>Fling手势</h2>

<p>Fling也即是快速滑动，就是手指在屏幕上使劲的『挠』一下，手势的要点是手指在屏幕快速滑过一小段短距离，就像把一个小球弹出去的感觉一样。对于Fling手势来说，最重要的是速度，水平方向的速度和垂直方向的速度，可以理解为高中物理常讲到的平抛运动一样。</p>

<p>GestureDetector识别Fling的逻辑是，在ACTION_UP时，检查此次事件的速度，如果水平方向速度或者垂直方向速度超过了阈值，便会触发Fling手势回调。</p>

<p><strong>注意</strong>：留意Scroll与Fling的区别，Scroll是慢的，不关心时间与速度，只关心滑动的距离，是在ACTION_MOVE时，手指并未有离开屏幕时就触发了，只要是ACTION_MOVE还在继续，就会继续触发onScroll，并且ACTION_UP时终止整个Scroll，而Fling只关心速度，不关心距离，是在ACTION_UP时，手指离开了屏幕了（此次事件流处理结了）才会触发。</p>

<h2>VelocityTracker</h2>

<p>Fling事件速度是决定性的，仔细看GestureDetector的处理过程会发现它使用了一个叫做VelocityTracker的对象，来帮忙处理一些关于速度的具体逻辑，那么有必要深入了解一下这个对象。</p>

<p><a href="https://developer.android.com/reference/android/view/VelocityTracker?hl=en">VelocityTracker</a>使用起来并不复杂，获取它的一个对象后，只需要不断的把MotionEvent塞给它就可以了，然后在需要的时候让其计算两个方向上的速度，然后就没有然后了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">velocityTracker</span> <span class="o">=</span> <span class="n">VelocityTracker</span><span class="o">.</span><span class="na">obtain</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">onTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">ev</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">velocityTracker</span><span class="o">.</span><span class="na">addMovement</span><span class="o">(</span><span class="n">ev</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">want</span> <span class="n">to</span> <span class="n">know</span> <span class="n">velocities</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">velocityTracker</span><span class="o">.</span><span class="na">computeCurrentVelocity</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
</span><span class='line'>       <span class="n">vx</span> <span class="o">=</span> <span class="n">velocityTracker</span><span class="o">.</span><span class="na">getXVelocity</span><span class="o">();</span>
</span><span class='line'>       <span class="n">vy</span> <span class="o">=</span> <span class="n">veolocityTracker</span><span class="o">.</span><span class="na">getYVelocity</span><span class="o">();</span>
</span><span class='line'>       <span class="n">be</span> <span class="n">happy</span> <span class="n">with</span> <span class="n">vx</span> <span class="n">and</span> <span class="n">vy</span><span class="o">.</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个类的实现，值得仔细看一下，它主要的实现都是用JNI去实现，可能是因为计算方式较复杂，所以<a href="https://developer.android.com/reference/android/view/VelocityTracker?hl=en#computeCurrentVelocity(int">computeCurrentVelocity</a>)方法也说明了，让你真用的时候再调，这个不用去管细节实现。重点看一下这个类，里面有一个对象池，用以缓存对象，并且创建对象的方式并不是直接new，而是用其<a href="https://developer.android.com/reference/android/view/VelocityTracker?hl=en#obtain(">obtain</a>)方法。这里用的是叫<a href="https://refactoring.guru/design-patterns/flyweight">享元</a>（Flyweight Pattern)的设计模式，也就是说VelocityTracker对象其实是共享的。</p>

<h2>顺滑如丝</h2>

<p>前面提到了，让View滑动，只需要调用scrollBy或者scrollTo即可，但这个吧，是直接修改了mScrollX，mScrollY，然后invalidate，View下次draw时就直接在把目标区域内容绘制出来了，换句话说这两个方法滑动是瞬间跳格式的。</p>

<p>一般来说，这也没有问题，就像onScroll手势，ACTION_MOVE时，不断的scrollBy刚刚滑过的距离，都还okay，没有什么问题。</p>

<p>但是对于Fling事件就不行了，Fling事件，也即快速滑动，要求短时间内进行大距离滑动，或者像有跳转的需求时，也是短时间内要滑动大距离。如果直接scrollBy或者scrollTo一步到位了，会显得 相当的突兀，体验相当不好，卡顿感特别强。如果能像做动画那样，在一定时间内，让其平滑的滑动，就会如丝般顺滑，体验好很多。Scroller就是专门用来解决此问题的。</p>

<h3>Scroller</h3>

<p><a href="">Scroller</a>是对滑动的封装，并不是View的子类，其实它跟View一点关系也没有，也不能操作View，实际上它与属性动画类似，它仅是一个滚动位置的计算器，告诉它起始位置和要滚动的距离，然后它就会告诉你位置随时间变化的值。其实这是一个中学物理题，也即给定初始位置，给定要滚动的距离，以一定的方式来计算每个时间点的位置。具体的计算方式由mInterpolater成员来控制，默认是ViscousFluid，是按自然指数为减速度来计算的，具体的可以查看Scroller的源码。如果不喜欢默认的计算方式，可以自己实现个Interpolator，然后在构造时传进去。</p>

<p>Scroller的作用在于实现平稳滑动，不让View的滚动出现跳跃，比如滑动一下ListView，开始滑动时的位置是x0，y0（ActionDown的位置），要向下滑动比如500个像素，不平稳的意思是，从x0，一下跳到x0+500的位置。要平稳，就要不断的一点点的改变x的值然后invalidate，这也就是Scroller的典型使用场景：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Scroller</span> <span class="n">scroller</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Scroller</span><span class="o">(</span><span class="n">getContext</span><span class="o">());</span>
</span><span class='line'><span class="n">scroller</span><span class="o">.</span><span class="na">startScroll</span><span class="o">(</span><span class="n">x0</span><span class="o">,</span> <span class="n">y0</span><span class="o">,</span> <span class="mi">500</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在computeScroll时：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">scroller</span><span class="o">.</span><span class="na">computeScrollOffset</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>   <span class="kt">int</span> <span class="n">currX</span> <span class="o">=</span> <span class="n">scroller</span><span class="o">.</span><span class="na">getCurrX</span><span class="o">();</span>
</span><span class='line'>   <span class="kt">int</span> <span class="n">currY</span> <span class="o">=</span> <span class="n">scroller</span><span class="o">.</span><span class="na">getCurrY</span><span class="o">();</span>
</span><span class='line'>   <span class="n">invalidate</span><span class="o">();</span> <span class="c1">// with currX and currY</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>computeScrollOffset在滚动没结束时返回true，也就是说你需要继续刷新view。返回false时表明滚动结束了，当然也就没有必要再刷新view（当然如果你乐意也可以继续刷，但是位置啥的都不变了，所以刷了也白刷）。</p>

<h2>滑动冲突处理</h2>

<p>关于View的滑动，最难搞的问题便是手势冲突处理，特别是当页面的结构变得复杂了以后。一般来讲，滑动手势，是让某一个View沿着某一个方向『平移』一段距离，如果某一个页面中只有一个View是可以滑动的，或者页面中不同的View的可滑动方向是垂直正交的，那么就不会有冲突的问题。</p>

<p>所谓滑动冲突，是指父View和子View都接受滑动手势，并且方向又是一样的，这时就产生了滑动冲突，常见就是ScrollView中套着ListView（这个通常是垂直Y方向上面有滑动冲突），或者ViewPager中套着ScrollView（这个是水平X方向上有滑动冲突）。</p>

<p>要想解决好滑动冲突问题，需要先确实好整体的设计方案，有了大的原则后，就容易用技术方案找到解法。最理想的方案，也是目前用的最多的方案就是在子View的边界设定一个margin区域，当ACTION_DOWN在margin区域以外，认定滑动手势归父View处理，否则交由子View处理。像一些全局手势也是要用如此的方案，当点击距离屏幕一定范围内(margin区域)认定此事件归当前页面处理，否则就认定为全局手势，就好比从屏幕左边向右滑动，很多应该将此识别为BACK到上一页，但如果离左边较远时滑动，就会是页面内部的滑动事件（假如它有可滑动的组件的话，事件手势会被其滑消耗掉）。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://developer.android.com/training/gestures/detector">Detect common gestures</a></li>
<li><a href="https://en.wikipedia.org/wiki/Flyweight_pattern">Flyweight pattern</a></li>
<li><a href="https://www.tutorialspoint.com/design_pattern/flyweight_pattern.htm">Design Patterns - Flyweight Pattern</a></li>
<li><a href="https://developer.android.com/training/gestures/scroll">Animate a scroll gesture</a></li>
<li><a href="https://stackoverflow.com/questions/11030639/android-scroller-simple-example">Android Scroller simple example</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android View 事件派发流程]]></title>
    <link href="http://toughcoder.net/blog/2021/07/21/android-view-event-dispatching/"/>
    <updated>2021-07-21T19:14:58+08:00</updated>
    <id>http://toughcoder.net/blog/2021/07/21/android-view-event-dispatching</id>
    <content type="html"><![CDATA[<p>自从乔帮主横空出世推出了iPhone以来，触控式的操作便成了21世纪智能设备的标准输入方式。对于同是智能操作系统的Android来说，也不例外。事件，特别是触控事件对于移动应用程序开发来说是一个非常重要的，也是开发人猿必须掌握的事情。这里就要讨论一下Android View中的Event系统，重点探讨一下事件的派发流程。</p>

<p><a href="http://toughcoder.net/blog/2021/07/21/android-view-event-dispatching/"><img src="https://i.stack.imgur.com/PgRvm.png"></a></p>

<!-- more -->


<h2>输入事件综述</h2>

<h3>事件的分类</h3>

<p>对于Android系统来说用户输入事件分为两类，一个是<a href="https://developer.android.com/reference/android/view/KeyEvent?hl=en">KeyEvent</a>，这个是硬件产生的事件，或者更准确的说是非触控手势产生的事件，通常包括硬件按扭如音量键，电源键，系统导航（HOME，BACK和MENU）以及外设（如外接设备，键盘，自拍杆等）系统层也都会统一的做成映射转成KeyEvent传给当前Window窗口（当前进程）。</p>

<p>还有一类就是专指解控屏幕产生的触摸式的手势事件，是<a href="https://developer.android.com/reference/android/view/MotionEvent">MotionEvent</a>，为啥不叫TouchEvent呢，因为啊最初的Android版本是支持滑动球的，现在已经没有这种设备，但是名字就这么流传下来了。这个事件专门由视图系统view tree来处理，本文也将重点讨论此类事件。</p>

<h3>事件从哪里来</h3>

<p>简单来说事件是源自于硬件，比如屏幕或者按键，这是废话，知道了这个意义也不大，硬件产生电子信号后会经由驱动传给内核，内核再报给输入系统，再传给wms（Windows Manager Server），最终会到Window这里。对于应用层来说，可以理解 为事件都是从Window对象这里来的就行了。</p>

<h3>谁先收到事件</h3>

<p>对于GUI应用程序层来说，wms就是事件来源，那么ViewRootImpl对象是第一个接收到事件，ViewRootImpl并没有直接把事件派发给view tree，而是先给到DecorView，宿主组件在DecorView处有一个专门接收事件的回调，由此事件便到了当前的宿主组件如Activity或者Dialog，看它是否愿意做处理，如果它不处理，那么就会把事件再派发给GUI视图系统，也即view tree，这一次没有再经过ViewRootImpl对象，而是由Window对象直接调用根节点的dispatchTouchEvent或者dispatchKeyEvent。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>   15:57:02.254   W/System.err: java.lang.Exception: Stack trace
</span><span class='line'>   15:57:02.255   W/System.err:     at java.lang.Thread.dumpStack(Thread.java:1348)
</span><span class='line'>   15:57:02.256   W/System.err:     at net.toughcoder.view.ViewWindowExampleActivity.dispatchKeyEvent(ViewWindowExampleActivity.java:107)
</span><span class='line'>   15:57:02.256   W/System.err:     at com.android.internal.policy.DecorView.dispatchKeyEvent(DecorView.java:342)
</span><span class='line'>   15:57:02.256   W/System.err:     at android.view.ViewRootImpl$ViewPostImeInputStage.processKeyEvent(ViewRootImpl.java:5053)
</span><span class='line'>   15:57:02.257   W/System.err:     at android.view.ViewRootImpl$ViewPostImeInputStage.onProcess(ViewRootImpl.java:4921)
</span><span class='line'>   15:57:02.257   W/System.err:     at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:4442)
</span><span class='line'>   15:57:02.258   W/System.err:     at android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:4495)
</span><span class='line'>   15:57:02.258   W/System.err:     at android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:4461)
</span><span class='line'>   15:57:02.259   W/System.err:     at android.view.ViewRootImpl$AsyncInputStage.forward(ViewRootImpl.java:4601)
</span><span class='line'>   15:57:02.259   W/System.err:     at android.view.ViewRootImpl$InputStage.apply(ViewRootImpl.java:4469)
</span><span class='line'>   15:57:02.259   W/System.err:     at android.view.ViewRootImpl$AsyncInputStage.apply(ViewRootImpl.java:4658)
</span><span class='line'>   15:57:02.260   W/System.err:     at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:4442)
</span><span class='line'>   15:57:02.260   W/System.err:     at android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:4495)
</span><span class='line'>   15:57:02.260   W/System.err:     at android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:4461)
</span><span class='line'>   15:57:02.261   W/System.err:     at android.view.ViewRootImpl$InputStage.apply(ViewRootImpl.java:4469)
</span><span class='line'>   15:57:02.261   W/System.err:     at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:4442)
</span><span class='line'>   15:57:02.261   W/System.err:     at android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:4495)
</span><span class='line'>   15:57:02.262   W/System.err:     at android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:4461)
</span><span class='line'>   15:57:02.262   W/System.err:     at android.view.ViewRootImpl$AsyncInputStage.forward(ViewRootImpl.java:4634)
</span><span class='line'>   15:57:02.263   W/System.err:     at android.view.ViewRootImpl$ImeInputStage.onFinishedInputEvent(ViewRootImpl.java:4795)
</span><span class='line'>   15:57:02.263   W/System.err:     at android.view.inputmethod.InputMethodManager$PendingEvent.run(InputMethodManager.java:2571)
</span><span class='line'>   15:57:02.263   W/System.err:     at android.view.inputmethod.InputMethodManager.invokeFinishedInputEventCallback(InputMethodManager.java:2081)
</span><span class='line'>   15:57:02.264   W/System.err:     at android.view.inputmethod.InputMethodManager.finishedInputEvent(InputMethodManager.java:2072)
</span><span class='line'>   15:57:02.264   W/System.err:     at android.view.inputmethod.InputMethodManager$ImeInputEventSender.onInputEventFinished(InputMethodManager.java:2548)
</span><span class='line'>   15:57:02.265   W/System.err:     at android.view.InputEventSender.dispatchInputEventFinished(InputEventSender.java:141)
</span><span class='line'>   15:57:02.265   W/System.err:     at android.os.MessageQueue.nativePollOnce(Native Method)
</span><span class='line'>   15:57:02.265   W/System.err:     at android.os.MessageQueue.next(MessageQueue.java:326)
</span><span class='line'>   15:57:02.265   W/System.err:     at android.os.Looper.loop(Looper.java:160)
</span><span class='line'>   15:57:02.266   W/System.err:     at android.app.ActivityThread.main(ActivityThread.java:6692)
</span><span class='line'>   15:57:02.266   W/System.err:     at java.lang.reflect.Method.invoke(Native Method)
</span><span class='line'>   15:57:02.266   W/System.err:     at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:493)
</span><span class='line'>   15:57:02.266   W/System.err:     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:858)</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>   15:57:14.582   W/System.err: java.lang.Exception: Stack trace
</span><span class='line'>   15:57:14.586   W/System.err:     at java.lang.Thread.dumpStack(Thread.java:1348)
</span><span class='line'>   15:57:14.586   W/System.err:     at net.toughcoder.view.DemoEventView.dispatchTouchEvent(DemoEventView.java:24)
</span><span class='line'>   15:57:14.586   W/System.err:     at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:3030)
</span><span class='line'>   15:57:14.586   W/System.err:     at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:2662)
</span><span class='line'>   15:57:14.586   W/System.err:     at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:3030)
</span><span class='line'>   15:57:14.587   W/System.err:     at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:2662)
</span><span class='line'>   15:57:14.587   W/System.err:     at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:3030)
</span><span class='line'>   15:57:14.587   W/System.err:     at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:2662)
</span><span class='line'>   15:57:14.587   W/System.err:     at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:3030)
</span><span class='line'>   15:57:14.587   W/System.err:     at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:2662)
</span><span class='line'>   15:57:14.587   W/System.err:     at com.android.internal.policy.DecorView.superDispatchTouchEvent(DecorView.java:440)
</span><span class='line'>   15:57:14.588   W/System.err:     at com.android.internal.policy.PhoneWindow.superDispatchTouchEvent(PhoneWindow.java:1830)
</span><span class='line'>   15:57:14.588   W/System.err:     at android.app.Activity.dispatchTouchEvent(Activity.java:3400)
</span><span class='line'>   15:57:14.588   W/System.err:     at com.android.internal.policy.DecorView.dispatchTouchEvent(DecorView.java:398)
</span><span class='line'>   15:57:14.588   W/System.err:     at android.view.View.dispatchPointerEvent(View.java:12753)
</span><span class='line'>   15:57:14.588   W/System.err:     at android.view.ViewRootImpl$ViewPostImeInputStage.processPointerEvent(ViewRootImpl.java:5122)
</span><span class='line'>   15:57:14.588   W/System.err:     at android.view.ViewRootImpl$ViewPostImeInputStage.onProcess(ViewRootImpl.java:4925)
</span><span class='line'>   15:57:14.588   W/System.err:     at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:4442)
</span><span class='line'>   15:57:14.588   W/System.err:     at android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:4495)
</span><span class='line'>   15:57:14.589   W/System.err:     at android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:4461)
</span><span class='line'>   15:57:14.589   W/System.err:     at android.view.ViewRootImpl$AsyncInputStage.forward(ViewRootImpl.java:4601)
</span><span class='line'>   15:57:14.589   W/System.err:     at android.view.ViewRootImpl$InputStage.apply(ViewRootImpl.java:4469)
</span><span class='line'>   15:57:14.589   W/System.err:     at android.view.ViewRootImpl$AsyncInputStage.apply(ViewRootImpl.java:4658)
</span><span class='line'>   15:57:14.589   W/System.err:     at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:4442)
</span><span class='line'>   15:57:14.589   W/System.err:     at android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:4495)
</span><span class='line'>   15:57:14.589   W/System.err:     at android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:4461)
</span><span class='line'>   15:57:14.589   W/System.err:     at android.view.ViewRootImpl$InputStage.apply(ViewRootImpl.java:4469)
</span><span class='line'>   15:57:14.590   W/System.err:     at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:4442)
</span><span class='line'>   15:57:14.590   W/System.err:     at android.view.ViewRootImpl.deliverInputEvent(ViewRootImpl.java:7117)
</span><span class='line'>   15:57:14.590   W/System.err:     at android.view.ViewRootImpl.doProcessInputEvents(ViewRootImpl.java:7086)
</span><span class='line'>   15:57:14.590   W/System.err:     at android.view.ViewRootImpl.enqueueInputEvent(ViewRootImpl.java:7047)
</span><span class='line'>   15:57:14.590   W/System.err:     at android.view.ViewRootImpl$WindowInputEventReceiver.onInputEvent(ViewRootImpl.java:7220)
</span><span class='line'>   15:57:14.590   W/System.err:     at android.view.InputEventReceiver.dispatchInputEvent(InputEventReceiver.java:187)
</span><span class='line'>   15:57:14.590   W/System.err:     at android.os.MessageQueue.nativePollOnce(Native Method)
</span><span class='line'>   15:57:14.590   W/System.err:     at android.os.MessageQueue.next(MessageQueue.java:326)
</span><span class='line'>   15:57:14.591   W/System.err:     at android.os.Looper.loop(Looper.java:160)
</span><span class='line'>   15:57:14.591   W/System.err:     at android.app.ActivityThread.main(ActivityThread.java:6692)
</span><span class='line'>   15:57:14.591   W/System.err:     at java.lang.reflect.Method.invoke(Native Method)
</span><span class='line'>   15:57:14.591   W/System.err:     at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:493)
</span><span class='line'>   15:57:14.591   W/System.err:     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:858)</span></code></pre></td></tr></table></div></figure>


<p>因此，从应用程序的角度来说，第一个收到事件的是Activity或者Dialog这种持有Window的顶级组件，所以如果想要从窗口级别来拦截掉所有的事件，那么Activity会是最好的选择，代码示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>   <span class="nd">@Override</span>
</span><span class='line'>   <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">dispatchKeyEvent</span><span class="o">(</span><span class="n">KeyEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">want</span> <span class="n">to</span> <span class="n">intercept</span> <span class="n">all</span> <span class="n">key</span> <span class="n">events</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">dispatchKeyEvent</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>     <span class="nd">@Override</span>
</span><span class='line'>   <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">dispatchTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">want</span> <span class="n">to</span> <span class="n">intercept</span> <span class="n">all</span> <span class="n">touch</span> <span class="n">events</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">dispatchTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面两个方法是在view tree之前最先收到事件的方法，是组件里面想拦截的最佳地点，这是从前面打先锋。而要想处理掉view tree未处理的事件，则需要在<a href="https://developer.android.com/reference/android/app/Activity?hl=en#onKeyUp(int,%20android.view.KeyEvent">onKeyUp(int keyCode, KeyEvent event)</a>)和<a href="https://developer.android.com/reference/android/app/Activity?hl=en#onKeyDown(int,%20android.view.KeyEvent">onKeyDown(int keyCode, KeyEvent event)</a>)以及<a href="https://developer.android.com/reference/android/app/Activity?hl=en#onTouchEvent(android.view.MotionEvent">onTouchEvent(MotionEvent event）</a>)这几个方法里面处理，这个相当于是断后。</p>

<h3>事件的散发过程（Event Propagation)</h3>

<p>事件到达应用程序这一端后，从Activity开始了散发过程，它的机制 和过程好比一个各处流动的小球，每个节点都接收一个事件对象，返回一个boolean，如果返回true则表示事件在此被消耗，当前事件散发终止，而如果返回false，表示当前节点对此事件不感兴趣，事件继续散发。</p>

<p>而具体的流程，则是先到Activity（Dialog等第一级组件），再到view tree，在view tree里面也是如此从父view到子view如此一个一个的传递，这个先后顺序流程则是由整个系统构架决定的。</p>

<h3>事件是一个数据流</h3>

<p>前面讲的事件的散发过程，就可以看作是一个球在在流动，这是从单个事件的处理角度看，是这样。但从整个的事件来看更如此，因为事件通常像电子信号一样，是从来源出发（如触摸屏，硬件等），有一定时间间隔的一连串的事件对象的派发的整个过程，简单来比喻就是几个球，每隔1秒就发出一个球，这样一个数据流。</p>

<p>说了这么多，其实真实要做起来还是比较简单的，虽然是一个数据流，但是每 一个流都有开始和结束的标志，处理起来并不难。比如KeyEvent，开始是onKeyDown，然后是onKeyUp，在这两个里面处理，就完成了对KeyEvent流的处理。</p>

<p>而MotionEvent则稍复杂一些，一个MotionEvent流，系统会不断的回调onTouchEvent，直到结束，通过<a href="https://developer.android.com/reference/android/view/MotionEvent?hl=en#getAction(">MotionEvent#getAction()</a>)来判断，从<a href="https://developer.android.com/reference/android/view/MotionEvent?hl=en#ACTION_DOWN">ACTION_DOWN</a>到ACTION_MOVE到ACTION_UP或者ACTION_CANCEL结束。</p>

<p><strong>注意</strong>：因为KeyEvent的处理相对较简单，所以剩下的部分将重点讨论MotionEevnt。</p>

<h2>Touch Event的派发流程</h2>

<p>事件产生以后，会传递给Activity#dispatchTouchEvent，如果没有被拦截，那么就会传给Window，而Window则会传给ViewRootImpl来处理，view tree处理完后，会再交给Activity#onTouchEvent：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">dispatchTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">ev</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">ev</span><span class="o">.</span><span class="na">getAction</span><span class="o">()</span> <span class="o">==</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">onUserInteraction</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">getWindow</span><span class="o">().</span><span class="na">superDispatchTouchEvent</span><span class="o">(</span><span class="n">ev</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">onTouchEvent</span><span class="o">(</span><span class="n">ev</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个方法可以清楚地看到，先锋和断后和view tree在事件派发流动中的顺序。</p>

<p>下面重点看看在Window中（view tree）里面事件的派发流动过程。其实重点看<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/View.java;bpv=0;bpt=1">View#dispatchTouchEvent</a>和<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/ViewGroup.java;bpv=0;bpt=1">ViewGroup#dispatchTouchEvent</a>就可以了，需要注意的是，事件的派发流程与处理流程是不一样的，派发在先，处理在后，所以如果看事件的派发需要看dispatch打头的方法，而处理则是看on打头的。</p>

<p>View的dispatch较为简单一些，因为它提供的是一个默认的实现，并且View是作为view tree中的一个叶子的，因此它的dispatch实际上就是一个终点，所以它做的事情就是，看是否有OnTouchListener，有就调用其onTouch，然后再调用onTouchEvent把事件处理一下，就完了。从这里也可以看出来OnTouchListener是走在onTouchEvent方法的前面的。</p>

<p>至于ViewGroup则相对复杂，因为它要管理子View，向子View派发事件，并且还要处理拦截。它的逻辑大概是：先看自己是否要拦截<a href="https://developer.android.com/reference/android/view/ViewGroup?hl=en#onInterceptTouchEvent(android.view.MotionEvent">onInterceptTouchEvent</a>)返回true表示要拦截，false不会拦截，如果要拦截，则调用自己的onTouchEvent处理掉事件，然后终止派发(真实的逻辑要略微复杂一些，不同的ACTION处理逻辑不一样)。</p>

<p>重点讲一下ViewGroup是如何向子View派发事件的，当不拦截的时候，这是比较常规的时候，会把事件向子View派发，来捋一捋这一流程：首先，会通过buildTouchDispatchChildList这个方法来选择子View的顺序，这个方法是把子View按事件派发的流程来排序，这个顺序是就是用户看到的顺序，会以Z轴（屏幕从里到外）来排序，以及渲染（draw）的顺序，毕竟从用户角度看最先点击到的，肯定 是Z轴最大（离用户最近），最先draw完的（没有被遮挡）。然后按这个顺序，按个子View调用其上面的dispatchTouchEvent，就把事件向子View传递了过去，当然 这个也是事件在流动，一旦事件被消耗，就会停止派发。</p>

<p>从这个过程来看view tree事件派发是个深度优先的过程，所以view tree的深度不单单影响渲染的性能，连事件处理也比扁平的要慢一些。</p>

<h2>Touch Event事件处理方法</h2>

<p>事件的处理也即是各种on开头的方法如onTouchEvent，或者各种listener（OnClickListener，OnTouchListener）。一般常规来说设置各种listener就够了，但如果想要自定义一些就直接override onTouchEvent方法，这里就不细说了，各种教程太多了。</p>

<h3>listener与直接Override父类方法的区别</h3>

<p>需要注意的是如果要override，那么肯定 要自定义View才可以，所以这个是更『黑客式』的方法，只有有必要自定义View，且常规各种listener不能满足需求才有必要如此做，如实现各种自定义的手势等。</p>

<p>listener最大的好处是，很简单方便，隔离性好，事件的触发与结果是隔离的，想针对 事件做处理，实现一个接口就好了，至于事件条件的触发则不用关心，任何对象都可以实现接口以处理事件，而不必非去子类化（继承）View对象。</p>

<p>还需要注意的是OnTouchListener发生的时间要早于onTouchEvent，而常规的手势回调接口（如OnClickListener和onLongClickListner）是在onTouchEvent中触发的。因此，OnTouchListener其实也是一个更为低级的『黑客式』的接口，一般当需要自定义识别手势时才需要实现此接口。</p>

<h3>防止点击穿透</h3>

<p>有些时候会有一些点击穿透的问题出现，比如写了一个布局，里面有几个Button和TextView，但是当点击这些主要内容之外的空白区域时，此页面下一层的Button却收到事件，比如触发了其onClick事件。当使用层叠 式的Fragment时，此问题较常见。其实从View#onTouchEvent中就可以看到解决方案，如此某个View是clickable的，那么它会把事件消耗掉，而如果clickable为false就会继续传递。</p>

<p>出现穿透的原因就是空白区域，只有这个层页面的一个根布局，通常会是一个ViewGroup，而大部分的ViewGroup默认clickable都是false，因而事件会继续向view tree里面传递，直到其被消耗。</p>

<p>此类问题最简单的解决就是把View设置为clickable=&ldquo;true&#8221;，这个在布局文件中就可以设置。</p>

<h3>基础手势识别</h3>

<p>基础的手势识别，是说对于触控式操作的一些简单的操作的分类，比如轻触屏幕马上拿开，这视为点击（click或者叫press，或者叫tap），长按屏幕视为long click或者叫long press，还有滑动，双击等等。手势识别，即是一套逻辑算法，用以判断用户当前是哪一种操作，然后触发相当的处理逻辑，给与用户操作上的反馈。废话就这么多，接下来来看具体如何做吧。</p>

<p>在Android的GUI系统中基础的手势有点击(click)和长按(long click)。要识别这些基础手势有两种方法，一是设置接口回调给View，也即实现一个<a href="https://developer.android.com/reference/android/view/View.OnClickListener">OnClickListener</a>，然后把此对象设置给<a href="https://developer.android.com/reference/android/view/View#setOnClickListener(android.view.View.OnClickListener">View#setOnClickListener</a>)（长按就是<a href="https://developer.android.com/reference/android/view/View.OnLongClickListener">OnLongClickListener</a>和<a href="https://developer.android.com/reference/android/view/View#setOnLongClickListener(android.view.View.OnLongClickListener">View#setOnLongClickListener</a>)）；另外一种方法，就是针对view tree内部，比如子类化（继承）某个View对象，然后override相应的方法。</p>

<p><strong>注意</strong>: 在写布局xml文件中也可以方便的用onclick属于来指定   手势回调方法，但它的本质与设置一个OnClickListener是一样的。</p>

<p>假如，点击和长按不能满足操作需求时，就需要稍复复杂的基础手势识别对象来帮助，也即是<a href="https://developer.android.com/reference/android/view/GestureDetector?hl=en">GestureDetector</a>，它与View的连接方式是接口分离，其实不见得可以用于View，只要有MotionEvent事件 来源即可。使用的方法并不复杂，只需要设置一个<a href="https://developer.android.com/reference/android/view/View.OnTouchListener">OnTouchListener</a>或者子类化View并override onTouch方法，从中拿到MotionEvent对象，然后把MotionEvent塞给一个GestureDetecotor对象，就完了，GestureDetector会回调你感兴趣的对应手势处理回调方法，通过<a href="https://developer.android.com/reference/android/view/GestureDetector.OnGestureListener?hl=en">OnGestureListener</a>对象。因为OnGestureListener是一个接口，但如果你仅对某几个手势回调方法感兴趣，不想把所有方法都 写一遍（哪怕是空实现），那么可以子类化<a href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener?hl=en">SimpleOnGestureListener</a>，这是一个类，它实现了OnGestureListener的所有方法，我们仅需要override感兴趣的方法即可。</p>

<p>有一个需要特别注意的事情就是，当你用GestureDetector时，它与常规的onClick或者onLongClick的先后顺序，或者 叫冲突处理。基于一致性的原则，如果使用了GestureDetector时，意味着你想要自己控制事件处理，那么就不应该再 设置onClick或者 onLongClick了。但如果真不小心这么做了，结果又会怎么样呢？这就需要从View的事件处理流程找答案。OnTouchListener的调用是在View#dispatchTouchEvent，这个是在View#onTouchEvent之前，而OnClickListener和OnLongClickListener是在View#onTouchEvent中调用的。所以，顺序是这样的：</p>

<ol>
<li>如果你用OnTouchListener获取的MotionEvent，那么你的OnGestureListener的回调方法是最先被调用到的，在所有的其他回调之前。</li>
<li>如果是override View#onTouchEvent方法获取的event，那么取决于你调用super#onTouchEvent的顺序，如果你是在调用super之前，那么还是你的gesture listener先执行。其实吧，正常人override的写法肯定都先写自己的逻辑最后再调用super，或者干脆不调用super，这是最正统子类override父类的姿式。</li>
</ol>


<p>由此，可以得出的结论就是如果使用了GestureDetector，那么你的gesture listener肯定是优先被执行的。</p>

<h3>onClick与onLongClick的触发时机</h3>

<p>再 来看另外 一个比较 有意思的两个问题，onClick的触发时机是啥时候？从View#onTouchEvent方法中可看出来，是在ACTION_UP时触发的，如果它还没有触发long click，而long click则是在事件开始以后ACTION_DOWN以后开始计时，到达一定时间间隔后便触发，不算后续的事件类型。</p>

<p>整体的流程是这样，在View#onTouchEvent里面，分事件类型来处理，ACTION_DOWN中开始计时，后面ACTION_MOVE中继续计时，如果达到长按标准，则触发long click，在正常结束的ACTION_UP中，看有没有达到长按标准，有就触发long click，没有则触发on click。</p>

<h3>系统阈值定义</h3>

<p>像长按的时长，滑动的最小距离，拉伸的最小距离等 等 这些关键的阈值都 是有系统建议的定义的，这些值都 在<a href="https://developer.android.com/reference/android/view/ViewConfiguration">ViewConfiguration</a>里面，通常建议直接使用系统定义的要好一些，除非真有特殊需要。</p>

<p>可以查看<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/GestureDetector.java?q=gesturedetector">GestureDetector</a>中对这些常量的使用。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://betterprogramming.pub/mastering-the-android-touch-system-41234cf3c3b3">Mastering the Android Touch System</a></li>
<li><a href="https://stackoverflow.com/questions/7449799/how-are-android-touch-events-delivered">How are Android touch events delivered?</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android View的渲染过程]]></title>
    <link href="http://toughcoder.net/blog/2020/07/26/android-view-render-flow/"/>
    <updated>2020-07-26T22:53:03+08:00</updated>
    <id>http://toughcoder.net/blog/2020/07/26/android-view-render-flow</id>
    <content type="html"><![CDATA[<p>对于安卓开发猿来说，每天都会跟布局打交道，那么从我们写的一个布局文件，到运行后可视化的视图页面，这么长的时间内到底 发生了啥呢？今天我们就一起来探询这一旅程。</p>

<p><img src="https://miro.medium.com/max/1400/1*6jNYifMX0MvMHxg2cxrzkg.png" alt="" /></p>

<!-- more -->


<h2>View tree的创建过程</h2>

<h3>布局文件的生成过程</h3>

<p>一般情况下，一个布局写好了，如果不是特别复杂的布局，那么当把布局文件塞给Activity#setContentView或者一个Dialog或者一个Fragment，之后这个View tree就创建好了。那么setContentView，其实是通过<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/LayoutInflater.java;bpv=0;bpt=0">LayoutInflater</a>这个对象来具体的把一个布局文件转化为一个内存中的View tree的。这个对象不算太复杂，主要的逻辑就是解析XML文件，把每个TAG，用反射的方式来生成一个View对象，当XML文件解析完成后，一颗View tree就生成完了。</p>

<p>但是需要注意，inflate之后虽然View tree是创建好了，但是这仅仅是以单纯对象数据的形式存在，这时去获取View的一些GUI的相关属性，如大小，位置和渲染状态，是不存在的，或者是不对的。</p>

<h3>手动创建</h3>

<p>除了用布局文件来生成布局，当然也可以直接用代码来撸，这个就比较直观了，view tree就是你创建的，然后再把根节点塞给某个窗口，如Activity或者Dialog，那么view tree就创建完事了。</p>

<h2>渲染前的准备工作</h2>

<p>View tree生成的最后一步就是把根结点送到ViewRootImpl#setView里面，这里会把view添加到wms之中，并着手开始渲染，接下来就主要看ViewRootImpl这个类了，主要入口方法就是<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/ViewRootImpl.java;l=1604;drc=master;bpv=1;bpt=1?q=viewrootimpl">ViewRootImpl#requestLayout</a>，然后是scheduleTraversals()，这里会把请求放入到队列之中，最终执行渲染的是doTraversal，它里面调用的是performTraversals()，所以，我们需要重点查看<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/ViewRootImpl.java;l=2332;drc=master;bpv=1;bpt=1?q=viewrootimpl">ViewRootImpl#performTraversals</a>这个方法，view tree渲染的流程全在这里面。这个方法相当之长，接近1000行，主要就是三个方法performMeasure，performLayout和performDraw，就是常说的三大步：measure，layout和draw。</p>

<h2>渲染之measure</h2>

<p>就看<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/ViewRootImpl.java;drc=master;l=3391?q=viewrootimpl">performMeasure</a>方法，这个方法很简单，就是调用了根view的measure方法，然后传入widthSpec和heightSpec。measure的目的就是测量view tree的大小，就是说view tree在用户可视化角度所占屏幕大小。要想理解透彻measure，需要理解三个事情，MeasureSpec，View#measure方法和View#onMeasure方法：</p>

<h3>理解MeasureSpec</h3>

<p>从<a href="https://developer.android.com/reference/android/view/View.MeasureSpec">文档</a>中可以了解到，MeasureSpec是从父布局传给子布局，用以代表父布局对子布局在宽度和高度上的约束，它有两部分一个是mode，一个是对应的size，打包成一个integer。</p>

<ul>
<li><p>UNSPECIFIED</p>

<p> 父布局对子布局没有要求，子布局可以设置任意大小，这个 基本上 不常见。</p></li>
<li><p>EXACTLY</p>

<p> 父布局已经计算好了一个精确的大小，子布局要严格按照 这个来。</p></li>
<li><p>AT_MOST</p>

<p> 子布局最大可以达到传过来的这个尺寸。</p></li>
</ul>


<p>光看这几个mode，还是不太好理解。因为我们平日里写布局，在大小（或者说宽和高）这块就三种写法：一个是<a href="https://developer.android.com/reference/android/view/ViewGroup.LayoutParams#MATCH_PARENT">MATCH_PARENT</a>，也就是要跟父布局一样大；要么是<a href="https://developer.android.com/reference/android/view/ViewGroup.LayoutParams#WRAP_CONTENT">WRAP_CONTENT</a>，也就是说子布局想要刚好合适够显示自己就行了；再者就是写死的如100dp等。需要把measure时的mode与LayoutParams结合联系起来，才能更好的理解measure的过程。</p>

<p>还是得从performMeasure这时入手，这个MeasureSpec是由父节点传给子节点，追根溯源，最原始的肯定是传给整个view tree根节点的，也就是调用performMeasure时传入的参数值。</p>

<h4>根节点的MeasureSpec</h4>

<p>根节点的MeasureSpec是由<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/ViewRootImpl.java;l=3624;drc=master;bpv=1;bpt=1?q=viewrootimpl">getRootMeasureSpec</a>得来的，这个方法传入的是窗口的大小，这是由窗口来给出的，当前的窗口肯定 是知道自己的大小的，以及根节点布局中写的大小。从这个方法就能看出前面说的布局中的三种写法对MeasureSpec的影响了：</p>

<ul>
<li>如果 根节点布局是MATCH_PARENT的，那么 mode就是EXACTLY，大小就是父布局的尺寸，因为根节点的父亲就是窗口，所以就是窗口的大小</li>
<li>如果 根节点布局是WRAP_CONTENT的，那么 mode是AT_MOST，大小依然会是父布局的尺寸。这个要这样理解，WRAP_CONTENT是想让子布局自己决定自己多大，但是，你的极限 就是父布局的大小了。</li>
<li>其他，其实就是根节点写死了大小的（写布局时是必须 要指定layout_width和layout_height的，即使某些view可以省略一个，也是因为缺省值，而并非不用指定），那么mode会是EXACTLY，大小用根节点指定的值。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">getRootMeasureSpec</span><span class="o">(</span><span class="kt">int</span> <span class="n">windowSize</span><span class="o">,</span> <span class="kt">int</span> <span class="n">rootDimension</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">measureSpec</span><span class="o">;</span>
</span><span class='line'>    <span class="k">switch</span> <span class="o">(</span><span class="n">rootDimension</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">case</span> <span class="n">ViewGroup</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">.</span><span class="na">MATCH_PARENT</span><span class="o">:</span>
</span><span class='line'>        <span class="c1">// Window can&#39;t resize. Force root view to be windowSize.</span>
</span><span class='line'>        <span class="n">measureSpec</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">makeMeasureSpec</span><span class="o">(</span><span class="n">windowSize</span><span class="o">,</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">EXACTLY</span><span class="o">);</span>
</span><span class='line'>        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">ViewGroup</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">.</span><span class="na">WRAP_CONTENT</span><span class="o">:</span>
</span><span class='line'>        <span class="c1">// Window can resize. Set max size for root view.</span>
</span><span class='line'>        <span class="n">measureSpec</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">makeMeasureSpec</span><span class="o">(</span><span class="n">windowSize</span><span class="o">,</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">AT_MOST</span><span class="o">);</span>
</span><span class='line'>        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>    <span class="k">default</span><span class="o">:</span>
</span><span class='line'>        <span class="c1">// Window wants to be an exact size. Force root view to be that size.</span>
</span><span class='line'>        <span class="n">measureSpec</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">makeMeasureSpec</span><span class="o">(</span><span class="n">rootDimension</span><span class="o">,</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">EXACTLY</span><span class="o">);</span>
</span><span class='line'>        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">measureSpec</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>子View的MeasureSpec</h4>

<p>MeasureSpec这个东西是自上而下的，从根节点向子View传递。前面看过了根节点的spec生成方式，还有必要再看一下子View在measure过程中是如何生成spec的，以更好的理解整体过程。主要看<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/ViewGroup.java;l=6979;bpv=0;bpt=1">ViewGroup#getChildMeasureSpec</a>方法就可以了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">getChildMeasureSpec</span><span class="o">(</span><span class="kt">int</span> <span class="n">spec</span><span class="o">,</span> <span class="kt">int</span> <span class="n">padding</span><span class="o">,</span> <span class="kt">int</span> <span class="n">childDimension</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">specMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">getMode</span><span class="o">(</span><span class="n">spec</span><span class="o">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">specSize</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">getSize</span><span class="o">(</span><span class="n">spec</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">specSize</span> <span class="o">-</span> <span class="n">padding</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">resultSize</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">resultMode</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">switch</span> <span class="o">(</span><span class="n">specMode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Parent has imposed an exact size on us</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">EXACTLY</span><span class="o">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">childDimension</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">resultSize</span> <span class="o">=</span> <span class="n">childDimension</span><span class="o">;</span>
</span><span class='line'>            <span class="n">resultMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">EXACTLY</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">childDimension</span> <span class="o">==</span> <span class="n">LayoutParams</span><span class="o">.</span><span class="na">MATCH_PARENT</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Child wants to be our size. So be it.</span>
</span><span class='line'>            <span class="n">resultSize</span> <span class="o">=</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>            <span class="n">resultMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">EXACTLY</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">childDimension</span> <span class="o">==</span> <span class="n">LayoutParams</span><span class="o">.</span><span class="na">WRAP_CONTENT</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Child wants to determine its own size. It can&#39;t be</span>
</span><span class='line'>            <span class="c1">// bigger than us.</span>
</span><span class='line'>            <span class="n">resultSize</span> <span class="o">=</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>            <span class="n">resultMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">AT_MOST</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Parent has imposed a maximum size on us</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">AT_MOST</span><span class="o">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">childDimension</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Child wants a specific size... so be it</span>
</span><span class='line'>            <span class="n">resultSize</span> <span class="o">=</span> <span class="n">childDimension</span><span class="o">;</span>
</span><span class='line'>            <span class="n">resultMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">EXACTLY</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">childDimension</span> <span class="o">==</span> <span class="n">LayoutParams</span><span class="o">.</span><span class="na">MATCH_PARENT</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Child wants to be our size, but our size is not fixed.</span>
</span><span class='line'>            <span class="c1">// Constrain child to not be bigger than us.</span>
</span><span class='line'>            <span class="n">resultSize</span> <span class="o">=</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>            <span class="n">resultMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">AT_MOST</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">childDimension</span> <span class="o">==</span> <span class="n">LayoutParams</span><span class="o">.</span><span class="na">WRAP_CONTENT</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Child wants to determine its own size. It can&#39;t be</span>
</span><span class='line'>            <span class="c1">// bigger than us.</span>
</span><span class='line'>            <span class="n">resultSize</span> <span class="o">=</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>            <span class="n">resultMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">AT_MOST</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Parent asked to see how big we want to be</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">UNSPECIFIED</span><span class="o">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">childDimension</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Child wants a specific size... let them have it</span>
</span><span class='line'>            <span class="n">resultSize</span> <span class="o">=</span> <span class="n">childDimension</span><span class="o">;</span>
</span><span class='line'>            <span class="n">resultMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">EXACTLY</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">childDimension</span> <span class="o">==</span> <span class="n">LayoutParams</span><span class="o">.</span><span class="na">MATCH_PARENT</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Child wants to be our size... find out how big it should</span>
</span><span class='line'>            <span class="c1">// be</span>
</span><span class='line'>            <span class="n">resultSize</span> <span class="o">=</span> <span class="n">View</span><span class="o">.</span><span class="na">sUseZeroUnspecifiedMeasureSpec</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>            <span class="n">resultMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">UNSPECIFIED</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">childDimension</span> <span class="o">==</span> <span class="n">LayoutParams</span><span class="o">.</span><span class="na">WRAP_CONTENT</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Child wants to determine its own size.... find out how</span>
</span><span class='line'>            <span class="c1">// big it should be</span>
</span><span class='line'>            <span class="n">resultSize</span> <span class="o">=</span> <span class="n">View</span><span class="o">.</span><span class="na">sUseZeroUnspecifiedMeasureSpec</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>            <span class="n">resultMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">UNSPECIFIED</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">//noinspection ResourceType</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">makeMeasureSpec</span><span class="o">(</span><span class="n">resultSize</span><span class="o">,</span> <span class="n">resultMode</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>单纯从spec角度来理解，与上面的是一样的，基本上WRAP_CONTENT会是AT_MOST，而其他都是EXACTLY。</p>

<p>后面会再详细讨论一下，父布局与子View的相互影响。</p>

<h3>View#measure和View#onMeasure</h3>

<p>performMeasure比较简单，只是调用根节点的measure方法，然后把计算出来的根节点的MeasureSpec传进去，就完事了，所以 重点要<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/View.java;l=25428;drc=master;bpv=0;bpt=1">View#measure</a>方法。这里需要注意的是整个View的设计体系里面一些主要的逻辑流程是不允许子类override的，可定制的部分作被动式的方法嵌入在主要逻辑流程中，如measure是不能被override的，它会调用可以被子类override的<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/View.java;l=25539;drc=master;bpv=1;bpt=1">onMeasure</a>。onMeasure是每个View必须实现的方法，用传入的父布局的约束来计算出自已的大小。</p>

<p>为了优化measure流程，还有一个cache机制，用从父布局传入的MeasureSpec作为key，从onMeasure得出的结果 作为value，保存在cache中，当后面再次调用measure时，如果MeasureSpec未发生变化，那么就直接从cache中取出结果，如果 有变化 那么再调用onMeasure去计算一次。光看View#measure和onMeasure这两个方法也没啥啊，或者说常见的view或者我们自己定义的view的onMeasure方法也没啥啊，都不算太复杂，有同学就会问，这里为啥这么费劲 非要搞出一个cache呢？这个也好理解，要明白任何一个view不光是你自己，还涉及到所有你的子view啊，如果你只是一个未端的view（叶子），那当然 无所谓了，但如果是一个ViewGroup，下面有很多个子view，那么 如果能少调用一次onMeasure，还是能节省不少CPU资源的。</p>

<h3>ViewGroup的onMeasure</h3>

<p>每个View的本身的onMeasure并不复杂，只需要关注好本身的尺寸就好了。</p>

<p>复杂的在于ViewGroup的onMeasure，简单来理解也并不复杂，它除了需要测量自己的宽与高之外，还需要逐个遍历子view以measure子view。如果ViewGroup自身是EACTLY的，那么onMeasure过程就会简单不少，因为它自身的宽与高是确定的，只需要挨个measure子View就可了，而且子View并不影响它本身。当然，要把padding和margin考虑进来。</p>

<p>最为复杂的就是AT_MOST，ViewGroup自身的宽与高是由其所有子View决定的，这才是最复杂的，也是各个ViewGroup子类布局器需要重点解决的，而且过程各不相同，因为每个布局器的特点不一样，所以过程并不相同，下面来各自讨论一下。</p>

<h3>几种常见的ViewGroup的measure逻辑</h3>

<p>下来来看一下一些非常常见的ViewGroup是如何measure的：</p>

<h4>LinearLayout</h4>

<p>它的方向只有两个，可以只分析一个方向，另外一个方向是差不多的，我们就看看measureVertical。</p>

<p>第1种情况，也就是height mode是EXACTLY的时候，这个时候LinearLayout布局本身的高度是已知的，挨个遍历子view然后measure一下就可以。</p>

<p>第2种情况，比较复杂的情况，是AT_MOST时，这其实也还好，理论上高度就是所有子view的高度之和。</p>

<p>对于LinearLayout，最为复杂的情况是处理weight，这需要很多复杂处理，要把剩余所有的空间按weight来分配，具体比较复杂，有兴趣的可以具体去看源码。这也说明了，为何在线性布局中使用weight会影响性能，代码中就可以看出当有weight要处理的时候，至少多遍历一遍子view以进行相关的计算。</p>

<p>虽然方向是VERTICAL时，重点只处理垂直方向，但是width也是需要计算的，但width的处理就要简单得多，如果其是EXACTLY的，那么就已知了；如果是AT_MOST的，就要找子view中width的最大值。</p>

<h4>FrameLayout</h4>

<p>FrameLayout其实是最简单的一个布局管理器，因为它对子view是没有约束的，无论水平方向还是垂直方向，对子view都是没有约束，所以它的measure过程最简单。</p>

<p>如果是EXACTLY的，它本身的高度与宽度是确定的，那么就遍历子view，measure一下就可以了，最后再把margin和padding加一下就完事了。</p>

<p>如果是AT_MOST的，那么也不难，遍历子View并measure，然后取子view中最大宽为它的宽度，取最大的高为其高度，再加上margin和padding，基本上就做完了。</p>

<p>因为，FrameLayout的measure过程最为简单，因此系统里很多地方默认用的就是FrameLayout，比如窗口里的root view。</p>

<h4>RelativeLayout</h4>

<p>这个是最为复杂的，从设计的目的来看，RelativeLayout要解决的问题也是提供了长与宽两个维度来约束子view。</p>

<p>总体过的过程就是要分别从vertical方向和horizontal方向，来进行两遍的measure，同时还要计算具体的坐标，实际上RelativeLayout的measure过程是把measure和layout一起做了。</p>

<h3>自定义View如何实现onMeasure</h3>

<p>如果是一个具体的View，那就相当简单了，默认的实现就可以了。</p>

<p>如果是ViewGroup会相对复杂一些，取决于如何从水平和垂直方向上约束子view，然后进行遍历，并把约束考虑进去。可以参考LinearLayout和RelativeLayout的onMeasure实现。</p>

<h2>渲染之layout</h2>

<p>measure是确定控件的尺寸，下一步就是layout，也就是对控件进行排列。</p>

<p>首先，需要理解现代GUI窗口的坐标系统，假设屏幕高为height，宽为width，那么屏幕左上角为坐标原点（0，0），右下角为（width, height），屏幕从上向下为Y轴方向，从左向右则是X轴方向。安卓当中，也是如此。每一个控件都是一个矩形区域，为了能知道如何渲染每一块矩形（每 一个控件）就需要知道它的坐标，在前一步measure中，能知道它的宽与高，如果再能确定它的起始坐标左上角，那么它在整个屏幕中的位置就可以确定了。</p>

<p>对于Android来说，view的渲染的第二步骤就是layout，其目的就是要确定好它的坐标，每一个View都有四个变量mLeft, mTop，mRight和mBottom，(mLeft, mTop)是它的左上角，(mRight, mBottom）是它的右下角，很明显width=mRight-mLeft，而height=mBottom-mTop。这些数值是相对于父布局来说的，每个View都是存在于view tree之中，知道相对于父布局的数值就足够在渲染时使用了，没必要用相对屏幕的绝对数值，而且用相对父布局的坐标数值再加上父布局的坐标，就可以得到在屏幕上的绝对数值，如果需要这样做的话。</p>

<p><img src="https://developervisits.files.wordpress.com/2017/11/androidscreencoordinates.jpg" alt="" /></p>

<p>layout过程依然是从根节点开始的，所以仍要从ViewRootImpl#performLayout作为起点来理顺layout的逻辑。performLayout的参数是一个LayoutParam，以及一个windowWidth和desiredWindowHeight，调用performLayout是在performTraversal当中，在做完performMeasure时，传入的参数其实就是窗口window的宽与高（因为毕竟是根节点嘛）。performLayout中会从根节点mView开开对整个view tree进行layout，其实就是调用mView.layout，传入的是0, 0和view的经过measure后宽与高。</p>

<p>单个View的layout方法实现较简单，把传入的参数保存到mLeft,mTop,mRight和mBottom变量，再调用onLayout就完事了，这个很好理解，因为子view是由父布局确定好的位置，只要在measure过程把自己需要的大小告诉父布局后，父布局会根据LayoutParam做安排，传给子view的就是计算过后的结果，每个子view记录一下结果就可以了，不需要做啥额外的事情。</p>

<p>ViewGroup稍复杂，因为它要处理其子view，并且要根据其设计的特点对子view进行约束排列。还是可以看看常见的三个ViewGroup是如何做layout的。</p>

<h4>LinearLayout</h4>

<p>依然是两个方向，因为LinearLayout的目的就是在某一个方向上对子view进行约束。看layoutVertical就可以了，水平方向上逻辑是一样的。</p>

<p>遍历一次子View即可，从父布局的left, top起始，考虑子view的height 以及上下的padding和margin，依次排列就可以了。需要注意的是，对于left的处理，理论上子view的left就应该等于父布局，因为这毕竟是vertical的，水平上是没有约束的，但是也要考虑Gravity，当然也要把padding和margin考虑进来。最后通过setChildFrame把排列好的坐标设置给子view。</p>

<p>总体来看，线性布局的layout过程比其measure过程要简单不少。</p>

<h4>FrameLayout</h4>

<p>FrameLayout对子view的排列其实是没有约束的，所以layout过程也不复杂，遍历子view，子view的left和top初始均为父布局，依据其Gravity来做一下排布即可，比如如果Gravity是right，那么子view就要从父布局的右侧开始计算，childRight=parentRight-margin-padding，childLeft=childRight-childWidth，以次类推，还是比较好理解的。</p>

<h4>RelativeLayout</h4>

<p>前面提到过RelativeLayout是在measure的时候就把坐标都计算好了，它的layout就是把坐标设置给子view，其余啥也没有。</p>

<h4>自定义View如何实现onLayout</h4>

<p>如果是自定义View的话，不需要做什么。</p>

<p>如果是自定义的ViewGroup的话，要看设计的目的，是如何排列子view的。</p>

<p>总之，layout过程相较measure过程还是比较好理解的，约束规则越复杂的view，其measure过程越复杂，但layout过程却不复杂。</p>

<h2>渲染之draw</h2>

<p>draw是整个渲染过程的核心也是最复杂的一步，前面的measure和layout只能算作准备，draw才会真正进行绘制。</p>

<h3>draw的整个逻辑流程</h3>

<p>与measure和layout的过程非常不一样，虽然在performTraversals中也会调用performDraw，也就是说看似draw流程的起点仍是ViewRootImpl#performDraw，但查看一下这个方法的实现就可以发现，这里面其实并没有调用到View#draw，就是说它其实也是做一些准备工作，整个View tree的draw触发，并不在这里。</p>

<p>从performDraw中并没有做直接与draw相关的事情，它会调用另外一个方法draw()来做此事情，在draw方法中，它会先计算需要渲染的区域（dirty区域），然后再针对 此区域做渲染，正常情况下会走硬件加速方式去渲染，这部分比较复杂，它直接与一个叫做ThreadedRenderer打交道，稍后再作分析。</p>

<p>由于各种原因，假如硬件加速未没有成功，那么会走到软件渲染，这部分逻辑相对清晰一些，可以先从这里看起，会直接调用到drawSoftware()，这个方法有助于我们看清楚渲染的流程。这个方法里面会创建一个Canvas对象，是由ViewRootImpl持有的一个Surface对象中创建出来的，并调用view tree根节点的mView.draw(canvas)，由此便把流程转移到了view tree上面。</p>

<h3>view tree的draw的过程</h3>

<p>ViewRootImpl是直接调用根节点的draw方法，那么这里便是整个view tree的入口。可先从View#draw(canvas）方法看起。主要分为四步：1）画背景drawBackground；2）画自己的内容通过onDraw来委派，具体的内容是在onDraw里面做的；3）画子view，通过dispatchDraw方法；4）画其他的东西，如scroll bar或者focus highlight等。可以重点关注一下这些操作的顺序，先画背景，然后画自己，然后画子view，最后画scroll bar和focus之类的东西。</p>

<p>重点来看看dispatchDraw方法，因为其他几个都相对非常好理解，这个方法主要要靠ViewGroup来实现，因为在View里面它是空的，节点自己只需要管自己就可以了，只有父节点才需要关注如何画子View。<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/ViewGroup.java;bpv=0;bpt=1">ViewGroup#dispatchDraw</a>这个方法做一些准备工作，如把padding考虑进来并进行clip，后会遍历子View，针对 每个子view调用drawChild方法，这实际上就 是调用回了View#draw(canvas，parent，drawingTime)方法，注意这个方法是package scope的，也就是说只能供view框架内部调用。这个方法并没有做具体的渲染工作（因为每个View的具体渲染都是在onDraw里面做的），这个方法里面做了大量与动画相关的各种变换。</p>

<h3>Canvas对象是从哪里来的</h3>

<p>View的渲染过程其实大都是GUI框架内部的逻辑流程控制，真正涉及graphics方面的具体的图形如何画出来，其实都是由Canvas对象来做的，比如如何画点，如何画线，如何画文字，如何画图片等等。一个Canvas对象从ViewRootImpl传给View tree，就在view tree中一层一层的传递，每个view都把其想要展示的内容渲染到Canvas对象中去。</p>

<p>那么，这个Canvas对象又是从何而来的呢？从view tree的一些方法中可以看到，都是从外面传进来的，view tree的各个方法（draw, dipsatchDraw和drawChild）都只接收Canvas对象，但并不创建它。</p>

<p>从上面的逻辑可以看到Canvas对象有二个来源：一是在ViewRootImpl中创建的，当走软件渲染时，会用Surface创建出一个Canvas对象，然后传给view tree。从ViewRootImpl的代码来看，它本身就会持有一个Surface对象，大概的逻辑就是每一个Window对象内，都会有一个用来渲染的Surface；</p>

<p>另外一个来源就是走硬件加速时，会由hwui创建出Canvas对象。</p>

<h3>draw过程的触发逻辑</h3>

<p>从上面的讨论中可以看出draw的触发逻辑有两条路：</p>

<p>一是，没有启用硬件加速时，走的软件draw流程，也是一条比较好理解的简单流程：performTraversal->performDraw->draw->drawSoftware->View#draw。</p>

<p>二是，启用了硬件加速时，走的是performTraversal->performDraw->draw->ThreadedRenderer#draw，到这里就走进了硬件加速相关的逻辑了。</p>

<h2>硬件加速</h2>

<p>硬件加速是从Android 4.0开始支持的，在此之前都是走的软件渲染，也就是从ViewRoot（4.0版本以前是叫ViewRoot，后来才是ViewRootImpl）中持有的Surface直接创建Canvas，然后传给view tree去做具体的渲染，与前面提到的drawSoftware过程类似。</p>

<p>硬件加速则要复杂得多，多了好多东西，它又搞出了一套渲染架构，但这套东西是直接与GPU联系，有点类似于OpenGL，把view tree的渲染转换成为一系列命令，直接传给GPU，软件渲染则是需要CPU把所有的运算都做了，最终生成graphic buffer送给屏幕（当然也是GPU）。</p>

<p>这一坨东西中最为核心就是RenderNode和RecordingCanvas。其中<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/graphics/java/android/graphics/RenderNode.java">RenderNode</a>是纯新的东西，它是为了构建 一个render tree（类似于view tree），用以构建复杂的渲染逻辑关系。<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/graphics/java/android/graphics/RecordingCanvas.java?q=recordingcanvas">RecordingCanvas</a>是Canvas的一个子类，它是专门用于硬件加速渲染的，但又为了兼容老的Canvas（软件渲染），为啥叫recording呢？因为硬件加速方式渲染，对于view tree的draw过程来说就是记录一系列的操作，这其实就是给GPU的指令，渲染的最后一步就是把整个render tree丢给GPU，就完了。</p>

<p>前面说的两个是数据结构，还不够，还有<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/graphics/java/android/graphics/HardwareRenderer.java">HardwareRenderer</a>和<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/ThreadedRenderer.java?q=threadedrenderer&amp;ss=android%2Fplatform%2Fsuperproject">ThreadedRenderer</a>，这两个用来建立和管理render tree的，也就是说它们内部管理着一组由RenderNode组成的render tree，并且做一些上下文环境的初始化与清理资源的工作。类似于OpenGL中GLSurfaceView的RenderThread做的事情。</p>

<p>硬件加速与原框架的切入点都是RenderNode和RecordingCanvas，View类中多了一个RenderNode成员，当draw的时候，从RenderNode中得到RecordingCanvas，其余操作都与原来一致，都是调用Canvas的方法进行graphics的绘制，这样整体渲染流程就走入到了硬件加速里面。</p>

<h2>Choreographer与vsync</h2>

<p>虽然在Android 4.0版本加入了硬件加速的支持，但这还是不够，因为它只是相当于具体的渲染时间可能快了一些，举例来说，可能是普通火车与高铁之间的差异，虽然确实行程所花时间变短了，但是对于整体的效率来说提升并不大。对于整体GUI的流畅度，响应度，特别是动画这一块的流程程度与其他平台（如水果）差距仍是巨大的。一个最重要的原因就在于，GUI整体的渲染流程是缺少协同的，仍是按需式渲染：应用层布局加载完了要渲染了，或者ViewRootImpl发现dirty了，需要重绘了，或者有用户事件了需要响应了，触发整体渲染流程，更新graphic buffer，屏幕刷新了。</p>

<p>这一过程其实也没有啥大问题，对于常规的UI显示，没有问题，我没有更新，没有变化 ，当然 不需要重绘了，如果有更新有变化时再按需重新渲染，这显然 没有什么问题。最大的问题在于动画，动画是要求连续不停的重绘，如果仅靠客户这一端（相较于graphic buffer和屏幕这一端来说）来触发，显然FPS（帧率）是不够的，由此造成流畅度肯定不够好。</p>

<p>于是在Android 4.1 （Jelly Bean）中就引入了<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/Choreographer.java?q=choreographer">Choreographer</a>以及vsync机制，来解决此问题，它们两个并不全完是一回事，Choreographer是纯软件的，vsync则是更为复杂的更底层的机制，有没有vsync，Choreographer都能很好的工作，只不过有了vsync会更好，就好比硬件加速之于View的渲染，没有硬件加速也可以渲染啊，有了硬件加速渲染会更加的快一些。</p>

<h4>Choreographer</h4>

<p>它的英文本意是歌舞的编舞者，有点类似于导演，但歌舞一般时间更短，所以对编舞者要求更高，需要在短时间内把精华全部展现出来。它的目的就是要协调整个View的渲染过程，对输入事件响应，动画和渲染进行时间上的把控。文档原文是说：Coordinates the timing of animations, input and drawing.，精华就在于timing这个词上。</p>

<p>但其实，这个类本身并不是很复杂，相较于其他frameworks层的东西来说它算简单的了，它就是负责定时回调，按照一定的FPS来给你回调，简单来说它就是做了这么一件事情。它公开的接口也特别少，就是postFrameCallback和removeFrameCallback，而<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/Choreographer.java;bpv=1;bpt=1?q=choreographer">FrameCallback</a>也是一个非常简单的接口doFrame(long frameTimeNanos)，里面的参数是当前帧开始渲染的时间序列。</p>

<p>所以，它的工作就是在计时，或者叫把控时间，到了每一帧该渲染的时候了，它会告诉你。有了它，那么GUI的渲染将不再是按需重绘了，而是有节奏的，可以以固定FPS定时刷新。ViewRootImpl那头也需要做调整，每当有主动重绘时（view tree有变化，用户有输入事件等），也并不是说立马就去做draw，而是往Choreographer里post一个FrameCallback，在里面做具体的draw。</p>

<h4>vsync（Vertical Synchronization）</h4>

<p>垂直同步，是另外一套更为底层的机制，简单来理解就是由屏幕显示系统直接向软件层派发定时的脉冲信号，用以提高整体的渲染流畅程度，屏幕刷新，graphic buffer和window GUI（view tree）三者在这个脉冲信号下，做到同步。</p>

<p><a href="https://source.android.com/devices/graphics/implement-vsync">vsync</a>是通过对Choreographer来发挥作用的。Choreographer有两套timing机制，一是靠它自己实现的一套，另外就是直接传导vsync的信号。通过<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/DisplayEventReceiver.java;bpv=1;bpt=1">DisplayEventReceiver</a>（这个类对于App层是完全不可见的被hide了）就可以接收到vsync的信号了，调用其sheduleVsync来告诉vsync说我想接收下一次同步的信号，然后在重载onVsync方法以接收信号，就能够与vsync系统连接起来了。</p>

<h2>渲染性能优化</h2>

<p>这是一个很大的话题</p>

<h4>保持简单</h4>

<p>最最重要的原则就是要保持简单，比如，UI页面尽可能的简洁，view tree的层级要尽可能的少，能用颜色就别用背景图片，能merge就merge。</p>

<p>动画也要尽可能的简单，并且使用标准的ValueAnimator接口，而不要简单粗暴的去修改LayoutParams（如height和width）。</p>

<h4>减少重绘</h4>

<p>这个要多用系统中开发者模式里面的重绘调试工具来做优化，尽可能的减少重绘。</p>

<h4>专项定制</h4>

<p>有些时候，对于一些特殊需求的view要进行定制优化。举个例子，比如一个巨复杂的页面（如某宝的首页），中有一个用于显示倒计时的view，实现起来并不复杂，一个TextView就搞定了，一个Timer来倒计时，不断的刷新数字 就可以了。但是，这通常会导致整个页面都跟着在重绘。因为数字在变化，会导致TextView的大小在变化，进而导致整个View tree都在不断的跟着重绘。</p>

<p>像这种case，如果遇到了，就需要自定义一个专门用于此的View，并针对数字不断刷新做专门的优化，以不让其影响整个view tree。</p>

<p>不要在意这个例子的真实性，要知道，当某个View演变成了整个页面的瓶颈的时候，就需要专门针对 其进行特殊定制以优化整体页面的渲染性能。</p>

<p>更多的技巧可以参考<a href="http://toughcoder.net/blog/2015/09/11/android-performance-profiling-made-easy/">这篇文章</a>和后面的参考资料。</p>

<h2>参考资料</h2>

<p>列举一下关于此话题的比较好的其他资源</p>

<ul>
<li><a href="https://blog.csdn.net/guolin_blog/article/details/16330267">Android视图绘制流程完全解析，带你一步步深入了解View</a></li>
<li><a href="https://www.jianshu.com/p/9ac245657127">Android性能优化第（四）篇&mdash;Android渲染机制
</a></li>
<li><a href="https://www.jianshu.com/p/1ef2a9e5aa91">深入Android渲染机制</a></li>
<li><a href="https://blog.csdn.net/CrazyMo_/article/details/80038948">Android进阶——性能优化之布局渲染原理和底层机制机详解及卡顿根源探究（四）</a></li>
<li><a href="https://blog.csdn.net/say_from_wen/article/details/79093883">View渲染机制</a></li>
<li><a href="https://blog.csdn.net/hfy8971613/article/details/108041504">Android屏幕刷新机制</a></li>
<li><a href="https://www.androidperformance.com/2019/10/22/Android-Choreographer">Android 基于 Choreographer 的渲染机制详解</a></li>
<li><a href="https://hningoba.github.io/2019/11/28/Android%20Choreographer%E5%8E%9F%E7%90%86/">Android图形渲染之Choreographer原理</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[理解安卓的视图体系结构]]></title>
    <link href="http://toughcoder.net/blog/2020/03/16/understanding-the-view-system-of-android/"/>
    <updated>2020-03-16T22:17:17+08:00</updated>
    <id>http://toughcoder.net/blog/2020/03/16/understanding-the-view-system-of-android</id>
    <content type="html"><![CDATA[<p>当我们想要写一个页面的时候，通过一个Activity，然后调用其setContentView方法，把一个布局文件当作一个参数传递过去，然后一个页面就好了，但是除此之外，我们还需要与一些组件打交道，比如像Window，WindowManager，那么这些东西到底 与我们的页面布局有什么关系，今天就来学习一下，以便对整体窗口有个更清楚的认知。</p>

<p><a href="http://toughcoder.net/blog/2020/03/16/understanding-the-view-system-of-android/"><img src="https://image.slidesharecdn.com/androiduisystem-151208024825-lva1-app6892/95/android-ui-system-5-638.jpg?cb=1449545828"></a></p>

<!-- more -->


<h2>布局是一颗View tree</h2>

<p>先从一个最简单的例子出发，平时我们写一个页面，都从一个布局文件出发。这其实是在构建一个View tree，为啥一定是tree呢，因为我们的布局文件，无论有多么的复杂，都是从一个根（通常是一个ViewGroup对象）开始的，父布局里面再写子布局，比如这样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;LinearLayout</span> <span class="na">id=</span><span class="s">&quot;app_root&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;TextView</span> <span class="na">id=</span><span class="s">&quot;label&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Button</span> <span class="na">id=</span><span class="s">&quot;submit&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/LinearLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这会形成一个树状结构：</p>

<p>| app_root<br/>
&nbsp;&nbsp;  |- label<br/>
&nbsp;&nbsp;  |- submit<br/>
作为一个开发者，写布局是我们再熟悉不过的了，主要就是用所熟悉的各种Layout和View一起来构建想要的页面。</p>

<p>所写的布局，最终会生成一颗View tree，是一个树状的数据结构，每一个节点都是一个View对象（ViewGroup和View）。因此，布局优化的一个是感觉重要的点就是要先减少View tree的深度（也即平时所说的减少布局的嵌套），再想办法减少广度（减少个数）。</p>

<p>那么，我们写的布局的父布局又是哪里呢？这就又涉及两个东西，一个叫做decorView和contentView的东西。</p>

<h3>DecorView与ContentView</h3>

<p>我们平常所见的屏幕窗口的根布局是一个叫做DecorView的东西，它是我们通常意义上整个屏幕的根节点，它包含了上面的Status bar和下方的Navigation bar，以及属于应用程序的中间部分。它的源码路径是<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/com/android/internal/policy/DecorView.java;drc=master;l=118">frameworks/base/core/java/com/android/internal/policy/DecorView.java</a>。它是一个真实的view，它是FrameLayout的子类。</p>

<p>它下面有一个id为android.R.id.content的FrameLayout，我们平时在Activity中调用setContent时所传过去的布局文件所生成的View tree都是添加在这个FrameLayout下面，所以，通常对于我们一个Activity来说，这个FrameLayout是直接意义上的根节点，我们所写的布局都是添加它下面的。</p>

<h3>ContentView所引申出来的奇技淫巧</h3>

<h4>布局优化技巧</h4>

<p>首先，一个是布局的优化技巧，可以减少View tree的层级：假如你写的布局中根节点也是一个FrameLayout，那么可以直接用merge节点，把子view全部都直接加挂到前面提到的系统创建的Activity的根布局上面。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;merge&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Text</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Button</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/merge&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这可以把View tree减少一个层级（深度减1）。</p>

<h4>页面内即插即用的弹窗</h4>

<p>每个Activity都被回挂在一个id是android.R.id.content的FrameLayout下面，利用这一点，可以做一些即插即用的弹窗，即插即用的意思是，不用写在布局里面，而且显示的时间是不固定的，可能很多时候都不显示，在某个特定的逻辑或者时间才显示。就好比某些电商特定节日的弹窗一样，这种东西，一年也显示不了几回，如果直接添加在布局里面（哪怕你用ViewStub），不够优雅，毕竟不是常规逻辑下会出现的页面，这时可以利用content来做一些即时弹窗：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">FrameLayout</span> <span class="n">container</span> <span class="o">=</span> <span class="n">activity</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">android</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">content</span><span class="o">);</span>
</span><span class='line'><span class="n">View</span> <span class="n">pop</span> <span class="o">=</span> <span class="o">&lt;</span><span class="n">create</span> <span class="n">or</span> <span class="n">inflate</span> <span class="n">your</span> <span class="n">own</span> <span class="n">view</span><span class="o">&gt;;</span>
</span><span class='line'><span class="n">container</span><span class="o">.</span><span class="na">addView</span><span class="o">(</span><span class="n">pop</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>只要你能获得到Activity的实例（这个并不难），那么就可以非常优雅的添加弹窗，逻辑代码和布局文件都会相当独立，甚至可以用插件形式来异步加载。再进一步，如果 添加一个WebView，那么就可以做得更加的前端化，实时化和定制化，好多电商的弹窗就是这么干的。</p>

<h2>Window与WindowManager</h2>

<p>作为应用开发者，我们看一个View tree其实就是一坨布局，这是站在一个非常小的角度去看的，但如果站在整体系统架构角度来看的话，就会发现应用程序所在的view tree仅是系统可视化窗口架构中的末端，View只是用来构建视图的基本砖块而已。对于整体View tree是如何渲染的，何时渲染，这就涉及到了整体系统架构层面的重量级组件了。</p>

<p>对于现化代的视图窗口架构(Modern GUI)，都有一个window server，作来管理视图窗口的核心组件，比如X11，Android当中也不例外。在Android里面，WindowManager就是专门用于管理视图窗口的，它是系统级别的server叫window manager server是一个系统级别的常驻进程，由init.rc启动。而Window则是一个基本的窗口的逻辑上的抽象。关于Window以及<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/services/core/java/com/android/server/wm/WindowManagerService.java;bpv=0;bpt=0">WindowManager</a>本身就是相当大的话题，都可以单独写本书，这时不做过多的探讨，对于我们应用开发者来说，了解一下基本的知识就够用了。</p>

<p>每一个Activity，都有一个Window对象，所有一切与GUI有关的事情，都委派给了Window对象，Actvity本身并不参与GUI的具体流程，比如像上面提到的DecorView，ContentView等View tree的构建与管理，View tree的渲染，以及像事件的处理，都是Window对象处理的。Window是WindowManager的基本对象，与其server之间通过IPC通信，Window是供应用程序端使用的，其实真正一切都掌握在window server手中。Activity和Dialog使用的对象都是PhoneWindow，它在<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/com/android/internal/policy/PhoneWindow.java;l=159;drc=master">frameworks/base/core/java/com/android/internal/policy/PhoneWindow.java</a>，Window对象会具体负责创建像DecorView之类的一些基础设施。最为关键的一个方法就是其PhoneWindow#installDecor()方法，这个方法里面会先调用generateDecor()创建mDecor，它就是前面讲到的DecorView对象，再通过generateLayout()创建mContentParent对象，它就是前面讲到的id是android.R.id.content的那个FrameLayout，Activity或者Dialog通过setContentView送过来的View tree就是加在它的下面的。</p>

<p>WindowManager是一个接口（Android系统的代码接口用的特别多，很多关键的架构层面的组件 都是接口，实际使用的都是其一个实现。)实际使用的是<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/WindowManagerImpl.java">WindowManagerImpl</a>对象，而它也没干啥，它把事情 又委派给另外一个叫做WindowManagerGlobal的对象，这个WindowManagerGlobal则是GUI端的最后一站，它负责与wms（WindowManagerServer）通信。它在<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/WindowManagerGlobal.java">frameworks/base/core/java/android/view/WindowManagerGlobal.java</a></p>

<p>需要注意WindowManagerGlobal是一个单例，也就是说每一个应用程序（严格来说是每一个进程只有一个实例，但安卓上面带有GUI的应用程序只能存活在一个进程，所以可以理解 为一个应用程序）只有一个实例，所以它管理着一个应用程序中的所有的View tree。从它的成员中便可看出，它有一坨ViewRootImpl对象（一个列表），而每一个ViewRoot对象管理着一颗View tree。</p>

<p>最为关键的一个方法就是WindowManagerGlobal#addView，每一个Window的持有者对象（如Activity或者Dialog）都是通过这个方法将其DecorView对象添加给WindowManager的。addView方法，会先创建一个ViewRootImpl对象，然后把要添加的view以及刚创建出来的<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/ViewRootImpl.java">ViewRootImpl</a>都放进它的列表中，最后再调用ViewRootImpl#setView(view)，这就把几大关键对象建立好了连接，接下来的事情就归ViewRootImpl了。这里还有一个相当关键的对象，那就是LayoutParams，WindowManagerGlobal也有一个列表里面存着每个Viewtree根节点（也就是Decor view）的LayoutParams。</p>

<p><img src="https://gss0.baidu.com/-4o3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/58ee3d6d55fbb2fb3f8cdfbe474a20a44723dcf3.jpg" alt="" /></p>

<h2>ViewRootImpl又是个啥</h2>

<p>Window是从手机系统角度来看待的窗口的概念，而View tree则是从应用程序角度构建GUI页面的概念，view tree是Window的一部分，Window对象持有mView，而这个mView就是上面提到的DecorView，也即是View tree的根节点。这里又要涉及另外一个对象ViewRootImpl，它并非是View tree的一部分，虽然名字上比较容易混淆，因为它并不是View的子类，所以它不是任何一个View tree的节点，它的职责是管理View tree，像渲染以及事件派发，都是Window直接通过ViewRootImpl来进行的。在代码中实际使用的是ViewRootImpl对象，它实现了ViewParent接口。</p>

<p>所以，ViewRootImpl对象是值得细细研究的，因为实际上是它在管理着GUI系统&ndash;view tree的管理，渲染的三大步(measure, layout和draw）以及事件的派发，最源头的逻辑都在这个对象里面，当然 它也是非常复杂的，源码大概有1万行左右。</p>

<h2>ViewParent又是个啥</h2>

<p>它是一个接口，行使的职责是管理子View，也就是说在View tree当中管理子View的行为的集合便是ViewParent接口。View tree的节点都是View的子类，所以，你看ViewRootImpl实现了ViewParent接口，它是负责管理Window里面的View tree的。另外一个就是ViewGroup，ViewGroup是View的子类，所以它是Viewtree的一部分，父节点都是ViewGroup，它核心就两样东西一个是子View的列表，另外就是ViewGroup也实现了ViewParent的接口，因为它也要管理它的子节点（也即子View）。</p>

<h2>Activity到底是个啥东西</h2>

<p>它是系统的四大核心组件之一，如果想构建GUI页面，则Activity是绕不开的。如果再详细一点，Activity是一个系统给你的融合了应用生命周期管理，组件级别复用（Intent相关）和窗口管理的组件，生命周期也即ActivityManager干的事情，它通过Activity的回调告诉你；而GUI则是通过Activity的Window对象帮你实现（Activity的布局和事件的处理都是委派给其持有的Window对象来处理）。</p>

<p>如果，把Activity的Window对象拿掉，那么它跟一个Service组件就基本上没有差别了。如果把Activity的Intent相关拿掉，那么它跟一个Dialog就没啥区别了。</p>

<h2>Fragment又是个啥</h2>

<p>坦白说，Fragment是Google挖的一个大坑，这玩意儿不符合Android的核心设计思想，因为Android出世的时候并没有它，是后来Google跟水果平台抄来的一个不伦不类的东西，结果全是坑。在它刚出来的一些年，Google极力的推荐使用Fragment，但是近一两年，又不推荐了。</p>

<p>Fragment本质上就是一个强加了生命周期函数回调的View，因为显示Fragmeng时，都是把它替换一个View或者添加到一个ViewGroup上面，所以它就是一个View，或者说一个View tree中的节点。但是强加了生命周期的回调。光是这两点，其实也没有啥，毕竟生命周期对于View是重要的，一般时候我们要在onResume与onPause之间才让View处于active状态。</p>

<p>Fragment最大的问题在于它的异步机制和状态恢复机制，也就是说用FragmentManager#commit了以后，具体啥时候Fragment会真正显示出来，我们是无法控制的，这是相当的坑；它的状态恢复机制就更加的坑，状态恢复这个东西如果全让程序员来负责也还好，就像Activity的设计一样，但是如果框架帮你做了一些事情，但又不完整，这就坑了，关于状态恢复的坑可以参考<a href="http://toughcoder.net/blog/2016/11/28/fear-android-fragment-state-loss-no-more/">这篇文章</a>来详细的了解。</p>

<h4>DialogFragment</h4>

<p>这个本质上是Dialog，但是被包了一层Fragment，所以它会有Fragment的特性，但是Window和View tree则是属于Dialog的。</p>

<p><strong>注意：</strong>FragmentTransaction#add(Fragment fragment, String tag)有一个方法是不需要提供父布局，这是为没有常规布局准备的，因为无法把布局添加到Activity的现有View tree之中。一般情况下，我们是不会使用这个方法的，目前看仅在DialogFramgment中使用这个方法，那是因为Dialog本身有Window和view tree。</p>

<h2>不在Activity view tree里面的窗口控件</h2>

<p>一般来讲，我们想要显示的页面都会放进布局里面，也就是说大部分时候我们的页面都由Activity的view tree来实现。但是有些特殊的场景，却不是在view tree里面，比如弹窗，像Dialog，PopupWindow以及Toast，这些东西一般是用于弹出式的页面，由特定的逻辑触发，它与常规页面最为显著的区别就是，它们与Activity的Window和View tree是独立开来的，它们并不是添加在当前Activity的view tree上面的。它们自己有独立的view tree，或者换句话说，它们是独立的Window。</p>

<p>我们这里重点探讨它们与Window和当前Activity之间的关系，至于它们的基本使用方法，可以参阅其他文章。</p>

<h3>Dialog</h3>

<p>这里不说基本使用方法。</p>

<p>通过查阅源码，可以发现Dialog与Activity的实现相当类似，它内部也有一个独立的Window，也是通过WindowManager#addView把其ContentView（我们提供的布局）加到屏幕上去的。因此，它与Activity也是相互独立的，是两个Window，两棵View tree。Dialog类里面还有getActionBar，OptionsMenu等相关的方法，但似乎在实际使用当中比较少用到。</p>

<p><a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/app/Dialog.java;l=207;bpv=0;bpt=1">Dialog</a>最为核心的两个方法一个是其构造方法，这其中会创建Window对象，另外一个就是#show，里面可以看到，它是通过WindowManager#addView()方法，来把它的mDecorView添加到窗口体系当中的，这与Activity其实是一样的。</p>

<h4>为啥显示Dialog一定需要Activity，一般Context却不可以</h4>

<p>使用过Dialog的人都知道，创建Dialog时一定要传递Activity为其参数，尽管构造方法里面声明的是Context。前面提到，Dialog有自己的Window和View tree，理论上它跟Activity是没有关系的。</p>

<p>如果，用一个非Activity作为Context传给Dialog，报错，是WindowManager抛出来的异常，说：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">android</span><span class="o">.</span><span class="na">view</span><span class="o">.</span><span class="na">WindowManager$BadTokenException</span><span class="o">:</span> <span class="n">Unable</span> <span class="n">to</span> <span class="n">add</span> <span class="n">window</span> <span class="o">--</span> <span class="n">token</span> <span class="kc">null</span> <span class="n">is</span> <span class="n">not</span> <span class="n">valid</span><span class="o">;</span> <span class="n">is</span> <span class="n">your</span> <span class="n">activity</span> <span class="n">running</span><span class="o">?</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">view</span><span class="o">.</span><span class="na">ViewRootImpl</span><span class="o">.</span><span class="na">setView</span><span class="o">(</span><span class="n">ViewRootImpl</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1093</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">view</span><span class="o">.</span><span class="na">WindowManagerGlobal</span><span class="o">.</span><span class="na">addView</span><span class="o">(</span><span class="n">WindowManagerGlobal</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">409</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">view</span><span class="o">.</span><span class="na">WindowManagerImpl</span><span class="o">.</span><span class="na">addView</span><span class="o">(</span><span class="n">WindowManagerImpl</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">110</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">Dialog</span><span class="o">.</span><span class="na">show</span><span class="o">(</span><span class="n">Dialog</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">342</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>而Dialog#setOwnerActivity(Activity)方法在创建Dialog之后再把相关Activity塞过去，也是不行的，必须传入的Context参数要是一个Activity实例才可以。</p>

<p>最初以为，可以从它的构造方法中看出为啥一定需要Activity，就是因为需要theme.但其实并不是，因为theme是可以通过resource id传进去的。</p>

<p>关键点仍在于ViewRootImpl对象，因为这个异常是ViewRootImpl在其setView方法中抛出的，前面讲过，向一个Window添加布局最终会走到WindowManagerGlobal#addView，而它又是通过ViewRootImpl#setView来做具体事情 的，这个方法里面，会先获取当前的WindowSession，然后再把当前的Viewtree转化为窗口对象，添加给wms。所以最核心的地方还得看WindowManagerService#addWindow()这个方法，这个方法也相当之复杂，但是还是能大概看懂它的意思。</p>

<p>通俗的来理解这是安卓系统本身加的限制，也就是说窗口本身也是有逻辑关系的，可以简单理解 为树状关系，一个Activity是主Window，而由此Activity衍生出来的属于此Window的子Window，因此在添加子Window的时候，必须 要知道它从属于哪个父Window，因此，你必须 传Activity实例给Dialog的构造方法，因为只有Activity才是有主Window的。但是这个具体的逻辑连接却比较奇怪，从上面的过程描述来看，WindowManager#addView到ViewRootImpl#setView，其实，都没有明确的把父Window，也就是Activity的Window传进来，那么WindowManagerService又是从哪里去找这个父Window呢？</p>

<p>WindowManagerService#addWindow方法，并没有传递父Window参数 进来，那就只能是它从传进来的参数获得的。这里一个很重要的东西就是token，它是一个IBinder对象，它是一个Window的标识，它存在Window的attris对象里面，这个就是WindowManager#LayoutParams对象，它的作用就是存储Window的特征参数，比如你要改变Window的一些特性（通俗来说就是定制一下Window），那么通过改变LayoutParams，就可以了。这个其实不难理解，我们对View不就是通过其LayoutParams来改变View的特征参数 么。都 是一样的。</p>

<p>Dialog对象在show()时会把其mDecor添加到WindowManagerService中去，其并未传父Window，只传了一个LayoutParams过去，其实玄机也就在LayoutParams之中，窗口的token，父token（标识着父窗口）以及像窗口的type都是在LayoutParams中。那么这个LayoutParams是哪里创建的呢？它是来自于Window对象的，而Dialog的mWindow成员实例是在构造时创建的，创建的是一个PhoneWindow对象，并且把构造Dialog传进来的Context对象传给了PhoneWindow的对象，LayoutParams对象则是通过mWindow.getAttributes()得来的。因此啊，可以断定，PhoneWindow在生成LayoutParams时，会从传给其构造的上下文对象mContext中获取一些信息，如窗口的类型或者父窗口信息，而只有Activity对象才有窗口信息，并且可以作为父窗口，而普通 的Context对象是没有窗口的，由此可以解答我们的疑惑了。</p>

<h4>也可以显示独立于任何Activity的Dialog</h4>

<p>窗口是有很类型的，WindowManagerService为了方便管理，所以针对Activity及其从属于子窗口（Dialog和PopWindow）做了类似tree结构的逻辑上的整理，所以普通 的Dialog必须要能找到其主窗口（或者叫父窗口）。</p>

<p>但其实，我们经常能见到一些非常牛逼的Dialog，可以显示 在任何Activity之上，如电源没了，或者音量调节，等等。这些是叫作system dialog，需要特殊权限 才能显示出来的。管理来理解，系统级别的组件 才有权限 显示system dialog。</p>

<p>其实，想一想也合理，作为一个应用程序，你在自己的生命周期内，显示内容给用户足够的信息就可以了。当用户离开了你的应用，你也没有必要再显示Dialog了。</p>

<p><strong>注</strong>：应用在后台时，想在前台显示信息有其他的方式，如Notification等，这属于另外的话题，不做过多讨论。</p>

<h4>可以弄个全屏的Dialog吗？</h4>

<p>一般来讲呢，Actiivty都是全屏的，Dialog一般是非全屏的，可以把一个Activity弄成非全屏的，长的像Dialog一样，当成Dialog来使用，就在设置Activity的Theme时，用Theme.Dialog就可以了。</p>

<p>那么，反过来搞可不可呢，就是可不可以把常规的Dialog弄成一个全屏的呢？</p>

<p>从Dialog的实现上来看，它有Window对象，甚至连Actionbar和OptionsMenu都有，所以从实现上来看，Dialog并不一定非要像我们平常所使用的那样是一个对话框，它能做的事情 不比Activity少。默认Dialog的style就是一个平常的对话框，但其实，设置不同的style，就可以得到全屏的dialog。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">private</span> <span class="kt">void</span> <span class="nf">showFullscreenDialog</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Theme_Material_NoActionBar_Fullscreen is real full screen, i.e. hide the status bar.</span>
</span><span class='line'>    <span class="n">Dialog</span> <span class="n">dialog</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Dialog</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">android</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">style</span><span class="o">.</span><span class="na">Theme_Material_NoActionBar</span><span class="o">);</span>
</span><span class='line'>    <span class="n">dialog</span><span class="o">.</span><span class="na">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">fullscreen_dialog</span><span class="o">);</span>
</span><span class='line'>    <span class="n">dialog</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">okay</span><span class="o">).</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="n">view</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">dialog</span><span class="o">.</span><span class="na">dismiss</span><span class="o">();</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'>    <span class="n">dialog</span><span class="o">.</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>注</strong>：这里有点歧义，全屏意思是指铺满整个父Activity，严格意义上的全屏是要把状态栏也要隐藏掉。</p>

<h3>PopupWindow</h3>

<p>PopupWindow是一个独立的类，并不是View的子类，因此，它跟常规的widget不一样，无法直接添加到现有的View tree之中，这也导致它的实现方式比较复杂。</p>

<p><a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/widget/PopupWindow.java;l=1497;drc=master;bpv=0;bpt=0">PopupWindow</a>它并没有创建Window对象，但是它有一个类似于Window对象的DecorView的东西，它的根节点是一个叫做PopupDectorView的东西，其实是一个FrameLayout，我们让PopupWindow显示的布局就是加在这个PopupDectorView下面。最重要的两个方法一个是preparePopup() 这个方法会创建根节点PopupDecorView，然后把我们需要显示的mContentView以及还有一个PopupBackgroundView（也是一个FrameLayout，包裹在要显示的ContentView外面），放在PopupDecorView的下面，所以真实的结构是根节点是PoupDecorView，包了PopupBackgroundView，再包上要显示的mContentView，一共三层。</p>

<p>另外，一个方法就是invokePopup，核心逻辑是调用WindowManager#addView，把mDecorView添加到窗口系统中以显示出来，后面的过程跟上面提到的Dialog的显示过程是一样的。那么PopupWindow又是如何找到Activity的主Window的呢？答案还是在LayoutParams中，方法preparePopup()的参数 是LayoutParams，如前面所述LayoutParams是最终会传递给WindowManagerService的，而这里面就包含了主窗口的信息。而这个LayoutParams对象是通过方法createPopupLayoutParams()得来的，而这个方法的参数 是一个IBinder对象，我们知道这个IBinder对象就标识着一个主窗口。那么PopupWindow的IBinder对象又从何而来呢？是通过View.getWindowToken()得来的，PopupWindow的显示 方法都要提供一个View如showAsDropDown，里面的参数是一个View，而这个View必须 是已显示的View tree中的一个节点，现在应该知道一个窗口有一颗View tree，那么此View tree中的节点肯定 知道自己属于哪个窗口啊，由此便找到了主窗口。</p>

<p>另注意，PopupMenu，也是基于PopupWindow的，只不过弄成了Menu的样子（其实就是一个ListView）。</p>

<h4>可以弄个全屏的PopupWindow吗？</h4>

<p>当然 可以，只需要在构造PopupWindow时传入MATCH_PARENT作为其宽和高就可以了，不过这样做以后后面再选择哪种show方式就不影响了，都是铺满Activity来显示。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">private</span> <span class="kt">void</span> <span class="nf">showFullscreenPopup</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">View</span> <span class="n">content</span> <span class="o">=</span> <span class="n">LayoutInflater</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="k">this</span><span class="o">).</span><span class="na">inflate</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">fullscreen_dialog</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>    <span class="n">PopupWindow</span> <span class="n">popup</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">PopupWindow</span><span class="o">(</span><span class="n">content</span><span class="o">,</span> <span class="n">ViewGroup</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">.</span><span class="na">MATCH_PARENT</span><span class="o">,</span> <span class="n">ViewGroup</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">.</span><span class="na">MATCH_PARENT</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">View</span> <span class="n">anchor</span> <span class="o">=</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">fullscreen_popup</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">// Key is the width and height passed to constructor, show does not affect anything.</span>
</span><span class='line'><span class="c1">//        popup.showAtLocation(anchor, Gravity.NO_GRAVITY, 0, 0);</span>
</span><span class='line'>    <span class="n">popup</span><span class="o">.</span><span class="na">showAsDropDown</span><span class="o">(</span><span class="n">anchor</span><span class="o">,</span> <span class="mi">100</span><span class="o">,</span> <span class="mi">200</span><span class="o">);</span>
</span><span class='line'>    <span class="n">content</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">okay</span><span class="o">).</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="n">view</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">popup</span><span class="o">.</span><span class="na">dismiss</span><span class="o">();</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Toast又是个啥</h3>

<p>这个大家都非常熟悉了，每天都用到，用以给出一些非常弱的提示。</p>

<p>它其实也是有独立Window的。<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/widget/Toast.java;drc=master;bpv=0;bpt=0;l=348">Toast</a>类本身比较简单，但它也是有一个专门的Server的叫NotificationManager，Toast也是一个客户端，直接做工作的是另一端的服务，这也是为何即使我们的应用退到了后台依然可以show一个Toast。我们用的最多的就是让其显示一段文字，但其实那只是它的一个非常基础的用法。从Toast的方法就可以看出来，它是可以接受一个View的，所以把一个布局的根节点传进去，那这个布局不就可以显示了么？</p>

<h4>Toast可以显示复杂布局吗？</h4>

<p>虽然，通常我们都是使用Toast.makeText方法，但这并意味着它只能显示纯文字，它是可发接收一个View作为其Content的，就通过其setView方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">private</span> <span class="kt">void</span> <span class="nf">showComplexToast</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Toast</span> <span class="n">toast</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Toast</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">View</span> <span class="n">dialog</span> <span class="o">=</span> <span class="n">LayoutInflater</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="k">this</span><span class="o">).</span><span class="na">inflate</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">fullscreen_dialog</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>    <span class="n">toast</span><span class="o">.</span><span class="na">setDuration</span><span class="o">(</span><span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_LONG</span><span class="o">);</span>
</span><span class='line'>    <span class="n">toast</span><span class="o">.</span><span class="na">setView</span><span class="o">(</span><span class="n">dialog</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">// This does not work, Toast cannot receive focus, i.e. it won&#39;t receive events from WMS</span>
</span><span class='line'>    <span class="n">dialog</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">okay</span><span class="o">).</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="n">view</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">toast</span><span class="o">.</span><span class="na">cancel</span><span class="o">();</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'>    <span class="n">toast</span><span class="o">.</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>不过呢，虽然Toast可以展示更为复杂的布局，但是它是无法接收用户事件，也就是说它是无法处理点击事件的，你想有用户交互的话，是不可以的。</p>

<p>如此，假如你想显示一个类似Toast的，但是可以交互 的，那只能用PopupWindow或者Dialog来模拟，但这又只能是在应用在前台时显示；假如在后台时，又想要有交互行为，那只能用Notification和PendingIntent了。</p>

<h2>综合结论</h2>

<p>说了这么多，希望还没有看晕，总结一下：</p>

<ol>
<li>Window也是有结构 关系的，类似于View一样，像一样tree</li>
<li>每一个Window都有一颗View tree，DecorView是其根节点</li>
<li>ViewRootImpl是用来管理View tree的</li>
<li>Dialog和PopupWindow可以用以显示铺满Activity，甚至全屏的View</li>
<li>Toast也可以展示复杂布局</li>
</ol>


<h3>实战建议</h3>

<p>Activity应该只用于显示一个页面内的主要的，逻辑上都可以触达的布局，比如一上来用户就可见的所有东西，以及常规操作可以触发的（如折叠展开等）。</p>

<p>Activity的View tree要尽可能的小，这样才能保证最好的渲染性能，其余的，很多一次性的，即插即用的，鲜有逻辑才会有触发的，这种布局，要尽可能的独立于Activity的View tree之外，以保证其布局和逻辑上的独立，也更方便维护，更能减少Activity的view tree的体积。因为Dialog和PopupWindow也可以铺满整个Activity，所以，像一些用户引导，新人引导，运营活动，分享，等等一些常规逻辑走不到的页面，都可以考虑用Dialog和PopupWindow来实现。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何玩转安卓源代码]]></title>
    <link href="http://toughcoder.net/blog/2020/03/12/play-with-android-source-code/"/>
    <updated>2020-03-12T23:35:08+08:00</updated>
    <id>http://toughcoder.net/blog/2020/03/12/play-with-android-source-code</id>
    <content type="html"><![CDATA[<p>身为一个安卓开发者，除了学习<a href="https://developer.android.com/">应用开发</a>以外，安卓本身的源码也是必须要玩一玩的，因为安卓系统的源码中还有相当不错的东西值得去学习的。<a href="https://source.android.com/">官方的网站</a>（AOSP)就是专门为安卓源码相关而搭建的，换句话说想玩转安卓的源码，看这个网站就可以了。本篇重点讲一讲，如何玩转安卓源码，从环境搭建，到下载源码，到编译，以及源码的学习和查看。</p>

<p><a href="http://toughcoder.net/blog/2020/03/12/play-with-android-source-code/"><img src="https://qooah.com/wp-content/uploads/2014/06/Android-Open-Source-Project.jpg"></a></p>

<!-- more -->


<h2>好好的为啥折腾源码</h2>

<p>再多废话几句，安卓源码也即安卓操作系统的源码，它是由Google开发的移动智能设备的操作系统，完全开源，市面上的大部分手机都是安卓 手机，详细的可以看<a href="https://source.android.com/">官方网站的介绍</a>。</p>

<p>一般来说，除非是手机厂商或者ROM开发人员，否则作为一个应用开发者来说，跟源码直接打交道的时候比较少，更多是出于学习的目的才需要折腾源码，或者是出于折腾的目的，想搞一个自定义的ROM。因为源码文件非常大，几十个G，下载源码不但耗时而且消耗硬盘空间，编译也非常的慢，编译一个ROM需要二个小时左右。</p>

<h2>基础工具和开发环境搭建</h2>

<p>最基础的工具，常规的开发者应该都满足，这个可以参考<a href="https://source.android.com/setup">官方文档</a>，基本无大碍。像git和Python，开发者的电脑上应该都有，那么基础中的基础就够了。</p>

<h2>repo工具</h2>

<p>需要重点说一下repo工具，它的<a href="https://gerrit.googlesource.com/git-repo/+/refs/heads/master/README.md">官方文档在这里</a>。</p>

<p>因为安卓源码非常庞大，涉及几百个开源项目，如果像普通的项目那样，用一个git的仓库来管理不现实，因为文件特别特别多，如果直接用git，可能一下子就卡死了；除文件特别多以外，虽然有上百个项目，但是不同的项目之间的关系程度并不大，有些项目之间完全没有关系，有些虽然有依赖，但是也没有源方面的直接依赖。所以，其实每个项目都是一个独立的git仓库，单独版本管理，安卓整体的源码就是这些项目的集合，用一个配置文件(manifest.xml)来描述，这个文件里面写着有多少个项目，每个项目的仓库在哪里，以及使用哪个分支。</p>

<p>因为项目复杂，有单独的配置文件，所以也就是需要一个工具，这就是repo工具，它会根据manifest文件，来协助管理源码。repo的原理也不复杂，它就是一个Python脚本，操作git命令。如何使用repo就直接看它的<a href="https://source.android.com/setup/develop/repo">帮助文档</a>就可以了，文档相当详细，这里就不重复了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>repo --help
</span><span class='line'>repo <span class="nb">help </span>init<span class="p">|</span>start<span class="p">|</span>sync<span class="p">|</span>upload
</span></code></pre></td></tr></table></div></figure>


<h2>如何优雅的下载源码</h2>

<p>可以参考<a href="https://source.android.com/setup/build/downloading">官方文档</a>，就不重复了，输入以下命令，然后漫长等待就可以了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir aosp
</span><span class='line'><span class="nb">cd </span>aosp
</span><span class='line'>repo init -u https://android.googlesource.com/platform/manifest
</span><span class='line'>repo sync
</span></code></pre></td></tr></table></div></figure>


<p>如果网络都正常的情况下，执行上面的命令后，等待就可以了。但是不要too yong，too simple，因为『你懂得』的原因，上面的命令是无法成功的，即使你有梯子，也会很慢，而且源码几十个G，白白浪费这流量干嘛呢？要学会站在巨人肩膀上，不知尔等发现没有，凡是国外一些源码啊，软件库啊，在国内都是有镜像的，以应对一些网络不好的情况，比如像Ubuntu的软件库，像Ruby的源。是的，安卓源码，在国内也是有镜像的，我们直接从镜像网站下载，不但不会有网络连接问题，而且速度非常的快，十分钟就可以下完。</p>

<p>比较好的镜像有<a href="https://mirrors.tuna.tsinghua.edu.cn/help/AOSP/">清化大学的镜像</a>和<a href="https://lug.ustc.edu.cn/wiki/mirrors/help/aosp">中科大的镜像</a>。具体镜像怎么使用，看相应的主页上面就可以，都有介绍的。</p>

<h2>搭建OpenGrok来浏览代码</h2>

<p>如上面所说的安卓源码是非常庞大的，所以浏览源码是相当费劲的，光靠find+grep+vim也是可以，但是效率太低了，源码中的交叉索引，函数调用栈这些东西如果 没有像IDE一样专业的工具来看，还是相当的蛋痛的。当然 啦，也可以用Eclipse或者AndroidStudio或者SourceInsight把某些模块导入去来查看，这也是可以的，但是如果只看某个模块还是可以的。如果多了的话IDE也扛不住。</p>

<p>这里就需要用到专业级别的交叉索引工具了，比如<a href="https://github.com/OpenGrok/OpenGrok">OpenGrok</a>这是一个开源的代码交叉索引引挚，相当强大，特别适合像安卓源码这种超级庞大的项目。折腾起来也不算费劲，要先安装tomcat，可以考<a href="https://mazhuang.org/2016/12/14/rtfsc-with-opengrok/">这篇文章</a>，相当详细。</p>

<p>这里需要说一下可能遇到的坑，因为安卓 源码文件数量相当庞大，这里的意思是不但整体占用硬盘空间大，而且文件数量也非常非常的多，OpenGrok的安装运行时间特别长，因为它要过一遍源码生成交叉引用所需要的cache，综合起来的结果 就是，整体会占用非常大的磁盘空间(可能会上百G)，以及特别特别特别多的文件，你至少需要准备一个500G以上的硬盘，否则会出现一个致命的问题，不是简单的磁盘满了，而是文件系统的inode数满了，简单来理解就是每个文件在内核看来是一个inode，它与文件所占的空间类似，一块硬盘分区的空间是有限的，当达到一定限额后将无法再存储新的文件，文件系统的inode也是如此，当一块硬盘达到80%以后，便无法再添加新文件，整体文件系统将不可操作，对,连删除文件都无法进行，这个时候没有别的办法，只能重新装系统，相当麻烦。</p>

<h2>如何编译</h2>

<p>编译的话，最好选择Ubuntu的LTS版本，如LTS14.04，因为这个是用的比较多的，像Google自己以及很多厂商的编译服务器也都基于Ubuntu LTS来搭建的，这样可以避免很多烦人的问题。之后再安装一些交叉所需要的库就可以了，这个follow<a href="https://source.android.com/setup/build/initializing">官方文档</a>就可以了，比较详细。</p>

<p>具体的编译的话，也是一样的，直接follow<a href="https://source.android.com/setup/build/building">官方文档</a>就好了，人家写的非常详细也相当的专业，没有必要重复。</p>

<h2>如何刷机</h2>

<p>这个都是用fastboot这个工具，可以<a href="https://source.android.com/setup/build/running">参考官方文档</a>不过现在除非是厂商的工程机，否则折腾解锁也比较麻烦，可以到厂商的论坛以及像<a href="https://www.xda-developers.com/">XDA</a>上面多逛逛。</p>

<p>不过，如果有亲儿子的话，还是比较好折腾的，官方文档上面就有相应的方法，以及一些带有版权的BSP依赖包，可以刷起来玩一玩。</p>

<h2>优雅的读代码</h2>

<p>如果不想编译自定义的ROM，就是想看看源码的话，其实没有必要这么费劲的折腾，把代码下载下来不但费时费力，慢，而且还不是最新的代码。当然是有有更好的方式，有好多在线的源码查看工具。</p>

<ul>
<li><a href="https://android.googlesource.com/">官方source</a>. 这个是官方的版本管理的在线浏览，不是很方便，不够强大（比如没有交叉索引），而且速度不快，还需要翻墙</li>
<li><a href="http://androidxref.com/">androidXef</a>. 这个基于OpenGrok搭建的，在线浏览安桌源代码的在线工具，但是貌似2018年以后就不更新了，上面最新的版本是Android Pie。速度也不算快，但好在能查看好多个版本。</li>
<li><a href="https://cs.android.com/">官方code search</a>  这个是2019年Google新推出的查阅安卓源码的在线工具，速度非常快，貌似不是基于OpenGrok，相当好用，推荐直接看这个。</li>
</ul>


<h2>拓展资源</h2>

<p>除了安卓源代码以外，还有一坨资源可以看，像芯片厂商也会发布<a href="https://source.codeaurora.org/">相当多的源码</a>，比如像高通就有安卓源码相在的一坨源码，高通芯片的手机基本上也都有基于这些代码进行二次开发，所以也非常值得一看。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python字符串编码答疑]]></title>
    <link href="http://toughcoder.net/blog/2020/03/06/understanding-python-string-encoding/"/>
    <updated>2020-03-06T22:21:49+08:00</updated>
    <id>http://toughcoder.net/blog/2020/03/06/understanding-python-string-encoding</id>
    <content type="html"><![CDATA[<h2>Python 2中的字符串分类</h2>

<p>在Python 2中字符串，有两个类型，一个是str，一个是unicode。str可以理解为ASCII的字符列表，说白了，只能存储ASCII字符，如果赋个中文值，会报错；而unicode是支持非ASCII字符的。这个与C语言中的字符非常类似char[]只能存ASCII字符串，而wchar[]才可以存储Unidcode字符串。</p>

<p><a href="http://toughcoder.net/blog/2020/03/06/understanding-python-string-encoding/"><img src="https://www.kodefork.com/media/uploads/articles/2019/06/23/python-strings.png"></a></p>

<!-- more -->


<p>可以用如下方式来安全的转换两种字符串：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">to_str</span><span class="p">(</span><span class="n">foo</span><span class="p">):</span>
</span><span class='line'>   <span class="k">if</span> <span class="n">foo</span> <span class="n">instanceof</span> <span class="nb">unicode</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">str</span><span class="p">(</span><span class="n">foo</span><span class="p">)</span>
</span><span class='line'>   <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">foo</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">to_unicode</span><span class="p">(</span><span class="n">bar</span><span class="p">):</span>
</span><span class='line'>   <span class="k">if</span> <span class="n">bar</span> <span class="n">instanceof</span> <span class="nb">str</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">unicode</span><span class="p">(</span><span class="n">bar</span><span class="p">)</span>
</span><span class='line'>   <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">bar</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于字面字符串，前面加上u来标识是一个unicode，否则会当成str：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="s">&#39;this is a string&#39;</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="s">u&#39;nah, I am a unicode&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Python 3中的字符串分类</h2>

<p>由于Python 2中的混乱，所以到了Python 3里面，有了新的定义，字符串类型是str，支持Unicode，另外多了一个类型bytes，可以理解为byte的列表，也即是0&lt;=且&lt;=256的无符号整数，或者说是ASCII字符，简单来理解意思是一样的。这个就与Java语言类似了，如同Java中一样，String支持unicode，另专门有byte类型。另外，对于字面字符串也无需要再要标识了。</p>

<p>str与bytes之间的关系与区别是，str是给人看的，而bytes是给机器看的，bytes是str的底层实现。所以，bytes处理起来更快，效率更高，一些底层的IO库以及像网络IO，用的数据 一般都是bytes。它们之间是可以互转的：</p>

<ul>
<li>str转为bytes叫encode</li>
<li>bytes转为str叫decode</li>
</ul>


<p>在转换的时候还需要指定编码格式，这个编码格式就是unicode的编码方式，默认是&#8217;utf-8&#8217;，这里就涉及Unicode编码解码的相关知识了，常见的就是&#8217;utf-8&#8217;，&#8217;unicode&#8217;，以及&#8217;gbk&#8217;等。可以用如下方法来安全的转换：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">to_bytes</span><span class="p">(</span><span class="n">foo</span><span class="p">):</span>
</span><span class='line'>   <span class="k">if</span> <span class="n">foo</span> <span class="n">instanceof</span> <span class="nb">str</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">foo</span><span class="o">.</span><span class="n">encode</span><span class="p">()</span>
</span><span class='line'>   <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">foo</span>
</span><span class='line'><span class="k">def</span> <span class="nf">to_str</span><span class="p">(</span><span class="n">bar</span><span class="p">):</span>
</span><span class='line'>   <span class="k">if</span> <span class="n">bar</span> <span class="n">intanceof</span> <span class="nb">bytes</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">bar</span><span class="o">.</span><span class="n">decode</span><span class="p">()</span>
</span><span class='line'>   <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">bar</span>
</span></code></pre></td></tr></table></div></figure>


<h2>注意区分两个编码格式</h2>

<p>需要注意区分两个编码格式的设置，一个是指定程序里面字符串的编码，如在encode()和decode()时指定编码格式。</p>

<p>另外，一个就是程序源文件的编码格式，这个容易被忽略，要详细说下：程序的源码，其实就是一个文本文件，对吧，那么这个文本文件也是要指定编码格式的，常规来说，Python程序应该都是ASCII字符，所以默认的呢Python解释器，是按照ASCII文本的方式来处理代码源文件，但我们代码里面是会出现Unicode字符的，比如字面字符串，或者写的注释，如果 不进行特殊的设置解释器会报错的，因为出现了它不认识的字符。这时就需要对源码文件设置一下编码格式，把这句加在代码源文件的最上面，就好了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span></code></pre></td></tr></table></div></figure>


<h2>如何解决未知编码格式</h2>

<p>关于编码最容易遇到的就是UnicodeDecodeError，后面跟着一坨详细信息，这个错误就是告诉你编码时出问题了，通常有两类错误：</p>

<ul>
<li><p>UnicodeDecodeError: &lsquo;ascii&rsquo; codec can&rsquo;t decode byte 0xe4 in position 0: ordinal not in range(128)</p>

<p>这个通常是在Python 2时会遇到，原因简单的来说就是把unicode当成了string，或者源码文件的编码格式不对。解决的办法就是按照 上面介绍的安全转换方法，另外要设置一下源码文件的编码格式，这个问题自然可解。</p></li>
<li><p>Python3.6 UnicodeDecodeError: &lsquo;utf8&rsquo; codec can&rsquo;t decode byte 0xb2 in position 24137: invalid start byte</p>

<p>这个通常是在Python 3时面遇到的，后面的具体信息会不一样，这个问题会发生在bytes转化为string，decode时会报出，原因就是指定的解码方式与真实的不匹配，无法成功decode，比如，bytes是「gtk」的，但是用&#8217;utf-8&#8217;去decode肯定会失败。这个问题，在写爬虫或者一些文本处理时经常遇到，因为来源的编码方式不固定。</p>

<p>这个问题，如果想要根解，必须预知来源bytes的编码格式，但这通常不可能，所以可行的一条方案是，用一坨编码方式来不停的尝试：</p>

<pre><code class="python">def safe_decode(source):
   encodeings = ['utf-8', 'gbk', 'utf-16']
   for en in encodeings:
      try:
         return source.decode(en)
      except UnicodeDecodeError as e:
         print('Failed: ', e)
   return source
</code></pre></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 2升级到Python 3的指导建议]]></title>
    <link href="http://toughcoder.net/blog/2020/03/05/guide-of-upgrade-from-python-2-to-python-3/"/>
    <updated>2020-03-05T23:51:53+08:00</updated>
    <id>http://toughcoder.net/blog/2020/03/05/guide-of-upgrade-from-python-2-to-python-3</id>
    <content type="html"><![CDATA[<p>&ldquo;Life is short, we must upgrade to Python 3&rdquo;</p>

<p>Python是一个非常好用的工具语言，哪怕主业中用不到它，到处可见到一些非常实用的小的工具都是用Python来写的，即使再小的工具，也要做到小而美，这是工匠精神的体现。在社区里面Python 2已经停止开发新功能了，仅维护并修复一些bug，未来也将会停止维护，有些平台已经默认用python3了。除非有些无法替换的依赖必须强制使用Python 2以外，建议要升级到Python 3。本篇记录一些朕在升级到Python 3时遇到的一些问题，也即升级的时候的一些指导提示。</p>

<p><a href="http://toughcoder.net/blog/2020/03/05/guide-of-upgrade-from-python-2-to-python-3/"><img src="https://miro.medium.com/max/2156/1*HacaJfdu7HF8V4gIoA98ww.png"></a></p>

<!-- more -->


<h2>Python 2与Python 3的区别</h2>

<h3>两个版本并不兼容</h3>

<p>就像刚接触Python时，竟然发现它有两个版本，而且它们还不兼容，具体原因可能是因为时代的发展，编程语言也在不断的进步，而Python语言并不年轻，所以可能会导致新的编程语言设计思想在老的版本上面不好去兼容，很多软件都会有这样的问题，当有跨度比较大的升级时，相当于重新设计了，基本上是取代而非升级，因为老版本的设计架构等原因，是无法兼容的。</p>

<p>姑且不管啥原因吧，我们要明白一个事实就是Python 2与Python 3是不兼容的，意思就是，如果按照Python 2写的一段代码，用Python 3的解释器去运行，会报错，无法运行，反之亦然。</p>

<h3>两个版本的主要区别</h3>

<p>关于两方面的区别，可以看一看<a href="https://www.cnblogs.com/aguncn/p/3427531.html">这篇文章</a>，写的比较详细，这里就不重复了，只是罗列一些最常用的，也是最显著的一些需要注意的地方：</p>

<h4>print</h4>

<p>在Python 2里面啊，print是一个语言关键字，就像if when一样，它是一个独立的语句，想输出啥东西时，都是直接在print后面写就行了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">print</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;Security code is &#39;</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span>
</span></code></pre></td></tr></table></div></figure>


<p>而Python 3里面，print是一个内置函数，必须带有()才算函数调用，这里不纠结语句与函数的区别，只需要记得，现在要在print后面加上括号就可以了，下面的代码与上面效果等同：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">print</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&#39;Security code is &#39;</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>字符串编码</h4>

<p>这个可能是最复杂的和令人困惑的，根本的原因在于Python 2中的字符串与编码问题很绕，而Python 3中就清晰多了。</p>

<p>在Python 2里面字符串与字符的类型是不一样的，它与上一代的编程语言（C）有点类似，ASCII的与Unicode是不同的类型：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="s">&#39;abcd&#39;</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="s">u&#39;早上好&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里面a是一个string，而b是一个unicode str，如果 不加u，直接写unicode字符会报错的，可以通过unicode函数转化为unicode str，以及通过str函数转化为ASCII字符串。</p>

<p>而在Python 3中不再这么绕了，它就一种字符串类型str，支持unicode，所以你可以直接写了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="s">&#39;abcd&#39;</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="s">&#39;下午好&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以简单的来理解，把Python 2里的字串想像为C语言，而Python 3的字串相像为Java就可以了。</p>

<p><strong>注意</strong>： 关于字串与编码比较复杂，后面会单独的文章来介绍。</p>

<h4>重要模块的迁移</h4>

<p>大部分的模块是没有变动的，也即import时没有变化，但是有一些有比较大的变化，原因也是相关的代码在设计上有了重大变更，最明显的就是HTTP相关，原来比较乱有httplib, cookie, urllib2等一坨，现在都集中在了urllib里面。详细的可参见上面推荐的文章。</p>

<h4>遍历字典和列表</h4>

<p>字典遍历有变化 ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># data is a dictionary</span>
</span><span class='line'><span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">data</span><span class="o">.</span><span class="n">items</span><span class="p">():</span> <span class="c"># not iteritems()</span>
</span><span class='line'>   <span class="k">print</span><span class="p">(</span><span class="s">&#39;{} -&gt; {}.format(k, v))</span>
</span></code></pre></td></tr></table></div></figure>


<p>遍历平行列表时有变化 ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># sections, departments are lists</span>
</span><span class='line'><span class="k">for</span> <span class="n">s</span><span class="p">,</span> <span class="n">d</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">sections</span><span class="p">,</span> <span class="n">departments</span><span class="p">):</span>
</span><span class='line'>   <span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">d</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>而在Python 2里面必须 这样写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">itertools</span>
</span><span class='line'><span class="k">for</span> <span class="n">s</span><span class="p">,</span> <span class="n">d</span> <span class="ow">in</span> <span class="n">itertools</span><span class="o">.</span><span class="n">zip</span><span class="p">(</span><span class="n">sections</span><span class="p">,</span> <span class="n">departments</span><span class="p">):</span>
</span><span class='line'>   <span class="k">print</span> <span class="n">s</span><span class="p">,</span> <span class="n">d</span>
</span></code></pre></td></tr></table></div></figure>


<h2>解释器的选择</h2>

<p>上面是代码层面的区别和要注意的点，代码写好了要执行啊，执行的时候也需要注意，用错了解释器，还是跑不通的。</p>

<p>目前大部分的平台上面（Ubuntu和Mac OSX）的系统默认解释器还是2.7.x版本的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>-&gt; ~<span class="o">]</span> which python
</span><span class='line'>/usr/bin/python
</span><span class='line'><span class="o">[</span>-&gt; ~<span class="o">]</span> ll /usr/bin/python
</span><span class='line'>/usr/bin/python -&gt; python2.7
</span></code></pre></td></tr></table></div></figure>


<p>但是呢，不建议强行把系统的默认解释器换成Python 3，这可能会导致系统出问题，我们直接让我们的脚本用Python 3来运行就可以了，在shebang中改：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python3</span>
</span></code></pre></td></tr></table></div></figure>


<p>或者如果是使用PyCharm的话，在项目配置上直接选择Python 3的解释器就好了。</p>

<h2>用pip3安装依赖</h2>

<p>同时，安装需要的依赖时也使用pip3而非pip：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install python3-pip
</span><span class='line'>pip3 install --upgrade pip
</span><span class='line'>pip3 install pandas
</span></code></pre></td></tr></table></div></figure>


<h2>思维的转变</h2>

<p>这里仅是罗列出一些非常显著 的变化 ，实际上远不止这些，大版本的跳跃哪能就这么一点变化呢，还有想当多的细节问题可能会在日常使用中遇到。</p>

<p>这里想说的是如果遇到问题，比如在Python 3中报错了，或者某个问题不知道怎么搞，在搜索答案时，或者寻求帮助时记得直接搜索『Python 3』，这会比较明确的把范围限定 在Python 3里面。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://medium.com/@rajputankit22/upgrade-python-2-7-to-3-6-and-3-7-in-ubuntu-97d2727bf911">Upgrade python 2.7 to 3.6 and 3.7 in Ubuntu</a></li>
<li><a href="https://www.cnblogs.com/aguncn/p/3427531.html">使用2to3将代码移植到Python 3-转</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
