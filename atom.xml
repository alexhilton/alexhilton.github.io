<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[稀有猿诉]]></title>
  <link href="http://toughcoder.net/atom.xml" rel="self"/>
  <link href="http://toughcoder.net/"/>
  <updated>2023-09-14T22:36:41+08:00</updated>
  <id>http://toughcoder.net/</id>
  <author>
    <name><![CDATA[Alex Hilton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Understanding Kotlin Delegation]]></title>
    <link href="http://toughcoder.net/blog/2023/09/14/understanding-kotlin-delegation/"/>
    <updated>2023-09-14T22:01:46+08:00</updated>
    <id>http://toughcoder.net/blog/2023/09/14/understanding-kotlin-delegation</id>
    <content type="html"><![CDATA[<p>委托或者说委派，是一种设计机制，实现者并不真正的实现某些方法（行为），而是让另外一个对象来当真正的实现者。委拖与依赖注入和延时加载技术结合在一起会产生非常巨大的威力，让代码不但灵活方便扩展，也非常的优雅，但确实会较难以理解。<a href="https://kotlinlang.org/docs/delegation.html">委托机制(Delegation)</a>在Kotlin中的支持是很友好的，并且非常完善，用关键字by和lazy一起就可以写出非常强大的委拖机制代码。</p>

<p><a href="http://toughcoder.net/blog/2023/09/14/understanding-kotlin-delegation/"><img src="https://hashnode.com/utility/r?url=https:%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1629222884259%2FI3f9YGK1M.png%3Fw%3D1200%26h%3D630%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp%26fm%3Dpng" title="auto auto" ></a></p>

<!-- more -->


<h2><a href="https://en.wikipedia.org/wiki/Delegation_pattern">Delegation Pattern</a></h2>

<p>要想理解Kotlin中的委托，要先理解一下设计模式中的委托模式。严格来说委拖并不是一种设计模式，因为它并没有固定的范式，在GoF以及很多关于设计模式的书中并没有这一模式，准确的来说它是一种行为的实现方式，并不自己直接实现，而是委派给另外一个对象的方法。委托是一种行为模式，它只注重于行为，一般情况下都是对对象的方法进行委托，或者行为产生的结果也就是一个变量或者对象的域也可以委托，但只能委托给一个函数，这个函数会产生结果，以得到域的值。</p>

<p><img src="https://assets.alexandria.raywenderlich.com/books/des/images/c57492352703ffd13faa67205936b3bcb113947305da80d0be80770d0ceea10e/original.png" alt="" /></p>

<h3>委托与代理的区别</h3>

<p>代理是一种正式的设计模式，它强调的是权限和隔离，client只能访问到proxy，而并不知道realObject。而委托是一种实现机制，不自己实现，委派给其他对象去实现，它更强调的是行为和结果。代理是一种委托机制，但委托并不是代理。</p>

<p><img src="https://i1.wp.com/www.robertlarsononline.com/wp-content/uploads/2017/05/ProxyPatternGeneric.png?resize=700%2C388&amp;ssl=1" alt="" /></p>

<p>在理解了委托的概念后，就可以进一步的来看一下Kotlin中的委托了。</p>

<h2><a href="https://kotlinlang.org/docs/delegation.html">实现委托</a></h2>

<p>就是某一个类的实现，完全委托给另外一个对象，为了保持行为的一致，它们都实现了某一个接口。用关键字by来实现这一委托机制：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">interface</span> <span class="n">Base</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">print</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">BaseImpl</span><span class="p">(</span><span class="k">val</span> <span class="py">x</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">:</span> <span class="n">Base</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">print</span><span class="p">()</span> <span class="p">{</span> <span class="n">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Derived</span><span class="p">(</span><span class="n">b</span><span class="p">:</span> <span class="n">Base</span><span class="p">)</span> <span class="p">:</span> <span class="n">Base</span> <span class="k">by</span> <span class="n">b</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">b</span> <span class="p">=</span> <span class="n">BaseImpl</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>
</span><span class='line'>    <span class="n">Derived</span><span class="p">(</span><span class="n">b</span><span class="p">).</span><span class="n">print</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>类Drived也实现了接口Base，但它并没有自己去实现方法，而是委派给了它的构造参数b，b也是一个实现了接口的对象。这样Drived的行为就都委托给了对象b。而b则可以是任何一个实现了Base接口的对象，并且是在创建Drived时才指定的。更进一步的，这里可以用工厂方法，因为只要能生成一个实现了Base接口的对象即可，甚至可以用依赖注入来动态生成对委托对象。</p>

<h2><a href="https://kotlinlang.org/docs/delegated-properties.html">属性委托</a></h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">Example</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">p</span><span class="p">:</span> <span class="n">String</span> <span class="k">by</span> <span class="n">Delegate</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/lazy.html">延时机制(lazy)</a></h2>

<p>延时机制的委托才能产生最大的威力，而在Kotlin中，借助by和lazy就能对对象的属性实现延时委托机制，让只有在必要的时候(即第一次访问这个属性的时候)才生产出属性的真实值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">lazyValue</span><span class="p">:</span> <span class="n">String</span> <span class="k">by</span> <span class="n">lazy</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;computed!&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="s">&quot;Hello&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="n">lazyValue</span><span class="p">)</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="n">lazyValue</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实，by lazy可以应用在任何地方，不光是属性，常规的变量也是可以的。</p>

<p>需要注意，lazy并不是一个关键字，它是一个函数，它只有一个参数就是一个lambda，所以可以写成尾部lambda的方式。</p>

<h2>常规委托</h2>

<p>使用by关键字就可以实现委托，这除了可以用于类的实现，属性实现以外，其实任何一个变量也可以用by来委托给一个函数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">var</span> <span class="py">expand</span> <span class="k">by</span> <span class="n">remember</span> <span class="p">{</span> <span class="n">mutableStateOf</span><span class="p">(</span><span class="k">true</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参考资料</h2>

<ul>
<li><a href="https://www.cnblogs.com/itzhoucong/p/14255117.html">设计模式（二）之委派模式（Delegate Pattern）深入浅出 </a></li>
<li><a href="https://learnku.com/docs/99-software-pattern/delegation-pattern/12018">委托模式 Delegation Pattern</a></li>
<li><a href="https://www.zhihu.com/question/23123039">编程设计模式中委托 和代理模式什么区别？</a></li>
<li><a href="https://stackoverflow.com/questions/38250022/what-does-by-keyword-do-in-kotlin">What does &lsquo;by&rsquo; keyword do in Kotlin?</a></li>
<li><a href="https://blog.csdn.net/wzgiceman/article/details/82689135">Kotlin -by 详解</a></li>
<li><a href="https://juejin.cn/post/7057675598671380493">Kotlin常用的by lazy你真的了解吗</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[More About Kotlin Functions]]></title>
    <link href="http://toughcoder.net/blog/2023/09/13/more-about-kotlin-functions/"/>
    <updated>2023-09-13T20:52:36+08:00</updated>
    <id>http://toughcoder.net/blog/2023/09/13/more-about-kotlin-functions</id>
    <content type="html"><![CDATA[<p>Kotlin中的函数是一级对象，除了常规的函数式编程以外，还支持一些非常灵活的特殊用法，可以大大增强代码的可读性和简洁性，让代码更加的优雅，在业界顶级的库如Compose中有大量的应用，今天就来学习一些，以扫清学习Compose的障碍。</p>

<p><a href="http://toughcoder.net/blog/2023/09/13/more-about-kotlin-functions/"><img src="https://www.callicoder.com/static/faf261ddf8d3f25d8c48da997d9a2dc1/kotlin-functions.png" title="auto auto" ></a></p>

<!-- more -->


<h2><a href="https://kotlinlang.org/docs/extensions.html">Extension Functions</a></h2>

<p>与传统的编程语言如C/C++，Java或者Python最大的不同就是，Kotlin对于类的扩展提供了相当灵活的方式。像Java和Python除了标准的继承方式以外，就只能用注解和Decorator。但对于Kotlin还可以用<a href="https://kotlinlang.org/docs/extensions.html">Extensions</a>这一方式。无论是注解还是Decorator，它的使用方式还是比较笨拙的，可以明显的看出来是额外定义的函数，与原Class是没啥关系的。</p>

<p><img src="https://thetechstack.net/assets/images/banners/kotlin-extension-function.png" alt="" /></p>

<p>比如说，对于整数来说，我们通常会有求绝对值，通常可以这样写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">abs</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="p">&lt;</span> <span class="m">0</span><span class="p">)</span> <span class="p">-</span><span class="n">a</span> <span class="k">else</span> <span class="n">a</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后，这样使用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">aa</span> <span class="p">=</span> <span class="n">abs</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>但在Kotlin中，有更优雅的方式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">Int</span><span class="p">.</span><span class="n">abs</span><span class="p">()</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="k">this</span> <span class="p">&lt;</span> <span class="m">0</span><span class="p">)</span> <span class="p">-</span><span class="k">this</span> <span class="k">else</span> <span class="k">this</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span><span class="p">((-</span><span class="m">4</span><span class="p">).</span><span class="n">abs</span><span class="p">())</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="m">100.</span><span class="n">abs</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<p>这就是Extension functions，这样定义了后，可以像整数类型本身定义的方法那样直接在其对象上面调用。</p>

<h3>如何定义Extension functions</h3>

<p>Extension functions是针对Class的，或者一个Type的，指定目标Class名字，和参数就可以了，在函数的内部this就是调用函数时的对象。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="err">&lt;</span><span class="nf">ClassName</span><span class="p">&gt;.&lt;</span><span class="n">function</span> <span class="n">name</span><span class="p">&gt;(</span><span class="n">params</span><span class="p">...):</span> <span class="k">return</span> <span class="k">type</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// this is the function&#39;s receiver, which is the object when function invoked.</span>
</span><span class='line'>  <span class="c1">// function implementation</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要注意，Extension functions必须是针对Class的。</p>

<h3>理解Extension functions</h3>

<p>Extension functions并没什么高深和神秘的东西，它只是相当于一个static函数，接收目标Class的对象而已，比如说：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">Shape</span><span class="p">.</span><span class="n">area</span><span class="p">():</span> <span class="n">Int</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">length</span> <span class="p">*</span> <span class="k">this</span><span class="p">.</span><span class="n">width</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">area</span><span class="p">(</span><span class="n">shape</span><span class="p">:</span> <span class="n">Shape</span><span class="p">):</span> <span class="n">Int</span> <span class="p">=</span> <span class="n">shape</span><span class="p">.</span><span class="n">length</span> <span class="p">*</span> <span class="n">shape</span><span class="p">.</span><span class="n">width</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实这两个函数是完全一样的，上面的那个Extension function其实就相当于后面的那个常规函数。只不过在函数的调用上面更加的方便，看起来更像是目标Class提供的方法一样，更优雅一些。</p>

<h3>Extension function的作用域</h3>

<p>Extension function并不会真的对目标Class做任何修改，它只是相当于你自己定义的一个函数。所以，它的作用域就是你定义的函数的作用域，如果你是在一个文件中定义的，那么它的作用域就是导入了这个文件的地方；如果是在一个类中的，那作用域就是这个类。</p>

<p>另外的问题就是，假如在多个地方定义了相同的Extension function，会发生什么呢，相同的意思就是目标Class一样，函数名字也一样，所做的事情也一样，仍是把它当成普通函数来理解就行，按照虚拟机懒惰加载的原则，应该是第一个被引用到的Extension function生效。</p>

<h3>参考资料</h3>

<ul>
<li><a href="https://www.baeldung.com/kotlin/extension-methods">Extension Functions in Kotlin</a></li>
<li><a href="https://marketsplash.com/tutorials/kotlin/kotlin-extension-function/">Kotlin Extension Function: How To Implement And Use It</a></li>
<li><a href="https://www.geekailab.com/doc/as/book/docs/Part1/Android%E5%BC%80%E5%8F%91%E5%BF%85%E5%A4%87Kotlin%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/KotlinExtensions.html">让人爱不释手的Kotlin扩展（Extensions）技术探Extensions秘与应用</a></li>
<li><a href="https://www.jianshu.com/p/314cdb1603fc">Kotlin 扩展函数及原理</a></li>
<li><a href="https://juejin.cn/post/6935027613542907941">Kotlin 编程 #3 扩展函数（终于知道为什么 with 用 this，let 用 it）</a></li>
</ul>


<h2><a href="https://kotlinlang.org/docs/functions.html#infix-notation">Infix Functions</a></h2>

<p>准确的来说是Infix notation，它是一种执行函数的特殊方式，并不是定义了特殊的函数。也就是说某个函数被infix修饰了后，就可以用更为简洁的方式来调用它。常规的函数执行（或者说调用）是用函数名字加上括号，括号里面是参数，比如foo()，bar(&ldquo;here&rdquo;)。而infix方式则可以是 <code>参数1 函数名 参数2</code> 这种方式，也即与常规的函数调用完全不一样。看起来像是语言本身的关键字一样。</p>

<p><img src="https://www.fusebes.com/wp-content/uploads/2021/03/Post-Banners-FuseBase-17-1.png" alt="" /></p>

<p>比如，移位并不是运算符，也不是关键字，而是一个被infix修饰的二元参数函数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">finfix</span> <span class="n">un</span> <span class="n">Int</span><span class="p">.</span><span class="n">shr</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">Int</span><span class="p">):</span> <span class="n">Int</span> <span class="p">{...}</span>
</span><span class='line'>
</span><span class='line'><span class="m">8.</span><span class="n">shr</span><span class="p">(</span><span class="m">2</span><span class="p">)</span> <span class="c1">// 这样正常调用也完全可以，把整数8右移2位</span>
</span><span class='line'><span class="m">8</span> <span class="n">shr</span> <span class="m">2</span> <span class="c1">// 这是infix式的用法，其实是等同于上面的函数调用</span>
</span></code></pre></td></tr></table></div></figure>


<p>infix必须是Extension function，并且只能有一个参数，算上Extension function的接收对象，其实一共是2个参数。标准库中也定义了大量的infix，如整数位移的shr和shl。以及像一些DSL中的函数，都会定义成infix，以让代码更简洁。</p>

<p>总之，下次再见到 <code>a xyz b</code> 这种写法时，不用害怕，并不是有了新的关键字，这里的xyz是infix notation，把它当成函数调用 <code>xyz(a, b)</code> 就好了。</p>

<h3>参考资料</h3>

<ul>
<li><a href="https://www.programiz.com/kotlin-programming/infix-notation">Kotlin Infix Function Call</a></li>
<li><a href="https://www.baeldung.com/kotlin/infix-functions">Infix Functions in Kotlin</a></li>
</ul>


<h2><a href="https://kotlinlang.org/docs/inline-functions.html">inline Functions</a></h2>

<p><img src="https://cdn.educba.com/academy/wp-content/uploads/2021/04/Kotlin-Inline-Function.jpg" alt="" /></p>

<p>常规的lambda会有closure（捕获上下文中的对象），在编译后会产生很多对象，这会导致一些性能问题，但这是标准的函数式编程。</p>

<p>但某些情况下，我提供的是一个单纯的行为（lambda），比如像Collections的forEach以及filter，传入的lambda也好，或者其他函数也好，这是一个单纯的行为，你在集合中遍历时执行它就好。这种情况好，我们希望高阶函数在其函数体内直接使用传入的函数参数就可以了，不需要进行常规的对象创建（closure对象以及函数接口对象）。就可以使用inline关键字来修饰这人高阶函数。</p>

<h3>参考资料</h3>

<ul>
<li><a href="https://www.baeldung.com/kotlin/inline-functions">Inline Functions in Kotlin</a></li>
<li><a href="https://amitshekhar.me/blog/inline-function-in-kotlin">inline function in Kotlin</a></li>
<li><a href="https://www.geeksforgeeks.org/kotlin-inline-functions/">Kotlin Inline Functions</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jetpack Compose Road Map]]></title>
    <link href="http://toughcoder.net/blog/2023/09/08/jetpack-compose-road-map/"/>
    <updated>2023-09-08T23:04:44+08:00</updated>
    <id>http://toughcoder.net/blog/2023/09/08/jetpack-compose-road-map</id>
    <content type="html"><![CDATA[<p>Jetpack Compose是由Google在2019年Google I/O大会提出的新一代声明式UI框架，它基于Kotlin编程语言与Android Studio可以无缝衔接，在Google的大力推动下，现在已经变成了Android App的标准UI构建方式。网络上更是更是满屏的相关内容，如果说没有用过Compose都不好意思说自己会Android开发。是时候恶补一下了。</p>

<p><a href="http://toughcoder.net/blog/2023/09/08/jetpack-compose-road-map/"><img src="https://www.somagnews.com/wp-content/uploads/2021/02/Jetpack-Compose.jpg" title="auto auto" ></a></p>

<!-- more -->


<h2>快速上手体验</h2>

<p>可以follow下Google官方的<a href="https://developer.android.com/jetpack/compose/tutorial">Quick start</a>教程来快速体验一下。</p>

<p>可以<a href="https://developer.android.com/jetpack/compose/documentation">参考官方文档</a>以进一步了解。</p>

<h2>理解Compose</h2>

<p>体验过Compose可以发现，它与原生的Android app UI开发完全不同，最大的区别就是全是Kotlin代码，不用再去摆弄xml了。</p>

<p>其实Compose与Kotlin最初搞的<a href="https://github.com/Kotlin/anko">anko</a>是类似的东西，它的核心是利用Kotlin的语言特性来实现了一套写UI的DSL。在Compose里面所有的花括号其实都是一个函数，而且Compose里面的DSL都是用的大写字母开头的驼峰式，如<strong>Text {}</strong>，让人误以为这是一个类，但其实它是一个函数，容易让人误解不说，还不符合Kotlin语言的开发规范。这一点上当初的anko就相当的好，它的DSL命令都与函数的命名是一致（小写开头的驼峰式）。</p>

<p><strong>注意</strong>，如果Compose用起来感觉相当的别扭，这说明缺少前置知识，要把Kotlin的一些高级特性熟悉一下，比如<a href="http://toughcoder.net/blog/2023/02/14/understanding-kotlin-based-dsl/">DSL</a>，委拖机制以及扩展函数，只有把这些概念熟悉了以后，再写Compose会顺手很多。记住，Compose里面的所有东西都是函数调用，当成函数来写就可以了。</p>

<p>Compose其实就是一坨DSL，一层层的嵌套，本质上是一坨函数调用。极容易写出『箭头式』的代码，如这种：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">@Composable</span>
</span><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">Greetings</span><span class="p">(</span>
</span><span class='line'>    <span class="n">modifier</span><span class="p">:</span> <span class="n">Modifier</span> <span class="p">=</span> <span class="n">Modifier</span><span class="p">,</span>
</span><span class='line'>    <span class="n">names</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">List</span><span class="p">(</span><span class="m">100</span><span class="p">)</span> <span class="p">{</span> <span class="s">&quot;Compose #${it + 1}&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// A surface container using the &#39;background&#39; color from the theme</span>
</span><span class='line'>    <span class="n">Surface</span><span class="p">(</span><span class="n">modifier</span><span class="p">,</span> <span class="n">color</span> <span class="p">=</span> <span class="n">MaterialTheme</span><span class="p">.</span><span class="n">colorScheme</span><span class="p">.</span><span class="n">background</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">LazyColumn</span><span class="p">(</span><span class="n">modifier</span><span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="n">vertical</span> <span class="p">=</span> <span class="m">4.</span><span class="n">dp</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">items</span><span class="p">(</span><span class="n">items</span> <span class="p">=</span> <span class="n">names</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                 <span class="n">Greeting</span><span class="p">(</span><span class="n">it</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当view的嵌套比较深的时候，更明显，这就需要我们要及时的抽出公共的Composable组件，其实就相当于抽出函数，以让嵌套不那么深。</p>

<p>其实Android的原生UI开发方式（也即View与xml）是相当强大的，特别是在复用，如animation，drawable，color，string和dimens的复用和适配已经相当完善了。这方面Compose还是略显笨拙，因为还必须代码，甚至还可能重复的代码。对于常规的页面，比如列表（横竖或者格子）和基础UI组件（图片，文字和按扭）组合而成的页，用Compose是完全不成问题的。但对于成百上千个各种小组件时，View的结构与交互都非常复杂的页面时，如某宝某东某团的页面，或者页面有重型的组件，如Webview，如video，graphics或者游戏，Compose肯定 力不从心。这也是为何国内，特别是一些大厂其实对Compose这玩意儿并不怎么感冒，真正在产品里使用的可能还是那些国外头部app。</p>

<h2>进阶之路</h2>

<p>最好的资源莫过于官方推出的教程。
<a href="https://developer.android.com/courses/jetpack-compose/course">jetpack compose course</a>是Google官方推出的一系列教程，有视频讲解，有实战codelab，还有测试quiz。相当的丰富，可以看得出Google对Compose还是相当上心的。</p>

<h2>项目实战</h2>

<p>有一些非常优秀的真实的用Compose构建 出来的App可以供学习和参考，<a href="https://developer.android.com/jetpack/compose/samples">有些是官方的</a>，有些则是民间的，不但开源，而且还有配套的博客来说明构建 的过程，是非常难得的参考 资料。</p>

<ul>
<li><a href="https://github.com/android/compose-samples/tree/main/Jetchat">Jetchat</a> 纯Compose构建UI，适合初学者上手</li>
<li><a href="https://github.com/android/compose-samples/tree/main/Jetsurvey">Jetsurvey</a>纯Compose构建UI，适合上手</li>
<li><a href="https://github.com/android/sunflower/tree/main">Sunflower</a> 除UI外，还有网络要用到Jetpack组件</li>
<li><a href="https://github.com/android/nowinandroid/tree/main">Now in Android</a> 集大成者，Compose，加上Jetpack再上架构思维，适合高级玩家</li>
<li><a href="https://github.com/ellisonchan/ComposeMovie">电影App</a> 一个电影的简单app，配套<a href="https://blog.csdn.net/allisonchen/article/details/115052707">博客在这里</a></li>
<li><a href="https://jetpackcompose.cn/docs/">Jetpack Compose博物馆</a> 不但有教程，还有数个实例</li>
<li><a href="https://github.com/wangchenyan/wanandroid-compose">WanAndroid</a> <a href="https://www.wanandroid.com/">WanAndroid</a>的一个客户端，<a href="https://www.jianshu.com/p/cc11f2c93778">配套博客</a></li>
<li><a href="https://github.com/Mercandj/android-dev-challenge-compose-4">Compose Weather App</a> <a href="https://www.jetpackcompose.net/compose-weather-app">配套博客</a></li>
<li><a href="https://github.com/microsoft/surface-duo-compose-samples/tree/main">Surface Dual Compose Samples</a> Compose是一个跨平台的UI构建工具，不光能为Android构建，为其他平台也能构建App，<a href="https://learn.microsoft.com/zh-cn/dual-screen/android/jetpack/compose/samples">如Surface</a></li>
</ul>


<h2>参考资料</h2>

<ul>
<li><a href="https://coolshell.cn/articles/17757.html">如何重构“箭头型”代码</a></li>
<li><a href="https://developer.android.com/jetpack/compose/mental-model">Thinking in Compose</a></li>
<li><a href="https://www.jetpackcompose.net/">Jetpack Compose Tutorial</a></li>
<li><a href="https://www.jetpackcompose.app/">The #1 destination for all things Jetpack Compose</a></li>
<li><a href="https://www.theinsaneapp.com/2021/08/jetpack-compose-sample-examples-projects-and-android-apps.html">70+ Jetpack Compose Projects For Beginners And Experts</a></li>
<li><a href="https://developersbreach.com/compose/">Collection of Android Compose UI samples</a></li>
<li><a href="https://c1ctech.com/android-jetpack-compose-example/">Android Jetpack Compose Example</a></li>
<li><a href="https://blog.mindorks.com/jetpack-compose-tutorial/">Jetpack Compose Tutorial - Step by Step Guide</a></li>
<li><a href="https://foso.github.io/Jetpack-Compose-Playground/compose_projects/">Compose Projects</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[回乡见闻：感知农村的新变化]]></title>
    <link href="http://toughcoder.net/blog/2023/08/09/hometown-travel-notes/"/>
    <updated>2023-08-09T22:28:53+08:00</updated>
    <id>http://toughcoder.net/blog/2023/08/09/hometown-travel-notes</id>
    <content type="html"><![CDATA[<p>前不久休了一个星期的假，回了趟老家，一路所见所闻不少令人惊叹的事情，有必要略作小结并记录下来，也没什么特别的目的，就是把一些看到的比较有意思的事情以及产生的想法分享一下。</p>

<p><a href="http://toughcoder.net/blog/2023/08/09/hometown-travel-notes/"><img src="https://ts1.cn.mm.bing.net/th/id/R-C.4c2c27ca5d13da44d3fced7c83764ff7?rik=Y4MYdJogaFhAsQ&riu=http%3a%2f%2fimg.siluclouds.com%2fa%2fthumb%2f10009%2f201902%2f8a895a81d2c2425a656bea42dade314f.jpg!w960_h540.jpg&ehk=KlsjVgYoPkPh4RVso0rQpCyZXeeNVBbmRFABESBYr%2bM%3d&risl=&pid=ImgRaw&r=0" title="auto auto" ></a></p>

<!-- more -->


<h2>一些背景</h2>

<p>我的老家是在东北的一个贫困县城的一个村子里，跟一些讲述东北地区影视剧里面的村子是一样的。虽然是贫困县，但其实并不是想像中的那种吃不上饭，住不上房子的那种，从小到大吃穿住以及上学的费用等等都不成问题的。贫困的原因并不是生活不温饱，而是这么多年来，一直富不起来，与同区域内的较富一点的县城比，以及南方的大多数县城比，还是落后很多的，生活在这里的人也相对较穷。</p>

<p>县城下面，就是镇和乡，一个县城下面会十几个乡镇，乡和镇下面是村，我老家就住在村上，村下面还有屯儿，一个乡或镇下面会十几个村，一个村通常有十个左右的屯儿。对于生活在村里面的人来说，乡镇就是活动半径，一年会去几次县城，县城的商品是最全的，生活所需要的所有东西都能在县城买到，乡镇上最常用的东西如米面菜，零食，日用百货和常用药品也都能买 得到，到了村儿里，就只有食杂店了，零食和最常用的日用品能买 得到，屯儿的话则是啥都没有，只有生活在这里的人。</p>

<p>以前路不好，柏油水泥这种下雨天也能走的路只通到乡镇一级，而且也破败不堪。现在情况大为改观，村屯之间都修了水泥路，村屯里面的主要几条街道也都给修了水泥路，对出行有极大的改善，以前那种雨后全是大泥巴，无法出行的场景，已看不到了。因为路好了，所以走村串屯的流动商贩也远比以前多了，通常是用一个小型货车，拉车各种生活物品，一个村一个村的流动，到了村上就走街串巷的叫卖。</p>

<h2>微信无处不在</h2>

<p>令人震惊的是微信真的无处不在，已经触达了所有人，村里的老人也都用微信相互沟通。此外，商业活动和行政工作也都用微信。比如，省城到县城的客运大巴的售票都是通过微信服务号实现的，并没有官方网站。村上的行政工作，也都是通过微信，发什么通知之类的都是通过微信群，甚至有些福利的发放等也都通过微信。</p>

<p><img src="https://logodix.com/logo/1812564.png" alt="" /></p>

<p>还有一个现象是，都用微信支付，几乎看不到支付宝的影子。比如县城的出租车，乡镇村店里的收款，以及一些流动商贩都是用微信来收款，没有用支付宝的。猜测原因可能是大家平时就用微信，所以顺便用微信支付来方便交易，支付宝只有支付功能，不能用来干别的，为啥要用它？</p>

<h2>镇上的蜜雪冰城极为受欢迎</h2>

<p><img src="https://tse4-mm.cn.bing.net/th/id/OIP-C.5y5uvhFtaTE__UmR4U6xEQHaFj?pid=ImgDet&amp;rs=1" alt="" /></p>

<p>稍好一点的乡镇上有蜜雪冰城的店，并且比较受欢迎，但没看到同类型的其他品牌的饮品店。店的空间不小，有空调冷气，有舒适的位子坐，年轻人会扫码微信点餐（微信真的无所不能，无所不在啊），年纪大一点的人就现场排队点餐，所有单品均在5~10块左右，却比袋装的冷饮和瓶装的饮料口味好上不少，老少皆宜。</p>

<h2>快递最后一公里极为蛋疼</h2>

<p>村里人网购其实前几年就开始了，但现在仍不是主流，最主要的原因仍旧是快递最后一公里问题。快递包裹只能送到乡镇一级的代收点，无法到村，连京东也只是送到乡镇的代收点，后面就只能自己想办法去取。</p>

<h2>美团社区团购已深入村里</h2>

<p><img src="https://n.sinaimg.cn/sinakd20111/320/w1200h720/20210413/acde-knqqqmv1811611.jpg" alt="" /></p>

<p>最令人震惊的是村里面的人已经有不少人使用美团的社区团购了，不过只能是次日达，也就是今天下单明天送达，并且品类越来越齐全了，不但有瓜果蔬菜，米面油和酒水，连日用百货也都有了。不但村里面的年轻人会大量的下单，连一些老年人也开始大量的下单了，因为有些单品确实很便宜。并且使用相当的方便，直接用微信里面的美团小程序就能下单，微信就能登录，支付就用微信支付，即使对于老年人也是没有难度的。</p>

<p>每天下午4点左右，会有配货的车把货物送到村里面的团长家里，然后大家都去团长家里取货。商品的丰富程度与县城的超市是一样的，远比乡镇村的各种店丰富，事实上货品也都是从县城的仓库中调配出来的。</p>

<h2>手机多是HOV的中低端机</h2>

<p>村里人用的手机都是荣耀，OPPO和Vivo的中低端手机，约在1000元~2000元档，年轻一点的人用2000元往上一点的，老年人一般都是一千出头的千出头的千元机。大部分人手机中应用不多但微信，快手和抖音这三个几乎每个手机上都有。</p>

<p>手机毕竟属于较贵重的单品，前面也说了快递无法直达村，所以人们买 手机肯定是去县城里面的店里面买，这说明在县城级别的线下市场，HOV仍占绝对优势，粮厂的优势仍是在一二线城市。</p>

<h2>农村垃圾处理问题很大</h2>

<p>现在村里面垃圾处理是一个很大的问题，其实一直都是一个问题，只是以前感觉没那么明显，但现在人们生活水平好了一些，衣食方面更新的速度比以前快很多，自然产生的垃圾也多了很多，网购和社区团购也导致人们买更多的有包装的食品，这也会产生比以前更多的垃圾。</p>

<p>垃圾也不会随处丢，一般都是集中到村子外面的某一处，但也只是简单的堆放在那里，没有进一步的处理方式（如填埋或者焚烧），有的管理稍好一点的乡镇，会调用资源进行进一步的集中，然后填埋，但也不够理想，毕竟成本很高，村屯又很分散，清运垃圾的成本很高，很多乡镇都搞过垃圾集中站，但最后都不了了之了。</p>

<h2>房地产大周期已到尽头</h2>

<p>现在村屯里面全是新房子了（砖墙和铁皮屋顶），小时侯那种土墙和茅草屋顶已经见不到了，稍年轻一点的人也会在县城里面买楼房住，农忙时会回到村里面住，忙完了就会回到县城住，大部分也都买 了小汽车。即使这样县城的楼房还空着一大半，前几年地产商在县城疯狂的建了好多新楼房，但愿去县城的人和有能力去县城的人毕竟有限。另一方面，县城的建材市场行情近一两年也大幅下滑，因为村里面的新房子建的差不多了，也饱和了。</p>

<h2>无人机喷农药</h2>

<p><img src="https://ts1.cn.mm.bing.net/th/id/R-C.f25f792f9e4ecacacaa6da55525f80d9?rik=QQjyA%2f1eY%2fgo2Q&amp;riu=http%3a%2f%2fwww.qfhkzb.com%2fUploads%2fimage%2f20190805%2f1564965385884174.jpg&amp;ehk=pRZuEOrAGmbG3prpdgy9x1BQiNgHBgGQb9aHUITD2fU%3d&amp;risl=&amp;pid=ImgRaw&amp;r=0&amp;sres=1&amp;sresct=1" alt="" /></p>

<p>村里面已经有人用上了无人机来喷农药了，是那种较大型的四翼无人机，与常见的航拍那种是一样的，只不过个头更大。运营模式是中介式的，也就是有人专门养护无人机，给农民的田地里喷农药，赚取佣金。毕竟这种大型的无人机成本较高，维护成本也很高，并且操作起来难度也不小，并不是人人都能驾驭得了的。</p>

<h2>明天会更好</h2>

<p><img src="https://tse4-mm.cn.bing.net/th/id/OIP-C.U0S--5yGkvRugBuww7MHkAHaEK?pid=ImgDet&amp;rs=1" alt="" /></p>

<p>现在国家的政策也更多的偏向广大农村地区，每年都会出台很多的惠农政策以及振兴新农村政策，因为各种不可抗力，到了基层执行效果会大打折扣，但仍相信一切都只会变得越来越好。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding Minimum Viable Product]]></title>
    <link href="http://toughcoder.net/blog/2023/08/08/understanding-minimum-viable-product/"/>
    <updated>2023-08-08T22:11:11+08:00</updated>
    <id>http://toughcoder.net/blog/2023/08/08/understanding-minimum-viable-product</id>
    <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Minimum_viable_product">Minimum Viable Product(MVP)</a>是创业公司中比较流行的一个产品开发方法，一个比较贴切的翻译是最低可行产品，但总感觉不如英文原文有感觉。它能够帮助创业团队以最小的成本，开发出一个刚好能满足用户核心需求的产品，来验证商业逻辑是否可行。</p>

<p><a href="http://toughcoder.net/blog/2023/08/08/understanding-minimum-viable-product/"><img src="https://www.agiratech.com/wp-content/uploads/2019/09/what-is-a-minimum-viable-product.jpg" title="auto auto" ></a></p>

<!-- more -->


<h2>理解MVP</h2>

<p>MVP最初由Eric Ries提出来的，它的意思是一个能够让一个团队以最少的成本（时间与金钱）来收集最多的用户的真实需求和想法。通过做出一个最基础功能的产品，并发布给用户使用，不断的接受用户的反馈，基于用户的反馈，再进行迭代。</p>

<p><img src="https://ts1.cn.mm.bing.net/th/id/R-C.537b2438249904649d41a4f5e5f952da?rik=AYTulqitQkA9CA&amp;riu=http%3a%2f%2fwww.azquotes.com%2fpicture-quotes%2fquote-the-minimum-viable-product-is-that-version-of-a-new-product-which-allows-a-team-to-collect-eric-ries-72-47-40.jpg&amp;ehk=HBGya%2bo4pC0WU1lX10ONl%2bMz4pne%2fsrzCEx3Zq4qAQM%3d&amp;risl=&amp;pid=ImgRaw&amp;r=0" alt="" /></p>

<p>这段原文并不难，直接多读几遍去理解其内在涵义，目前并末找到一个非常贴切的翻译。</p>

<p>一个最为贴切的表达MVP精髓的图片就是那张滑板车到跑车的图片了：</p>

<p><img src="https://tse2-mm.cn.bing.net/th/id/OIP-C.Sroo_DWfJfKCeSmQs5QdewHaE7?pid=ImgDet&amp;rs=1" alt="" /></p>

<h2>MVP不是什么</h2>

<p>需要特别注意的是，MVP不是产品原型，也不是软件的alpha版本。它是一个完整的产品，经过了足够的测试，足够安全，足够稳定，是符合上线发布标准的产品。从产品上来说它是『Viable』的，也即是完全可使用的，也能解决用户问题，满足用户需求的产品。精华在于『Minimum』也就是仅仅包含能满足用户核心需求的最少功能。</p>

<h2>如何做到MVP</h2>

<h3>弄清楚产品的市场定位</h3>

<p>也就是说你的产品到底是给谁使用的，必须 弄清楚。</p>

<h3>挖掘核心需求</h3>

<p>也就是你的产品到底解决了用户的什么问题。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://www.productplan.com/glossary/minimum-viable-product/">Minimum Viable Product (MVP)</a></li>
<li><a href="https://www.agilealliance.org/glossary/mvp/">What is a Minimum Viable Product (MVP)</a></li>
<li><a href="https://www.netsolutions.com/insights/how-to-build-an-mvp-minimum-viable-product-a-step-by-step-guide/">A Step-by-Step Guide to Build a Minimum Viable Product (MVP)</a></li>
<li><a href="https://www.woshipm.com/pd/879821.html">五个步骤，实现产品MVP</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/258565534">什么是MVP（最小可行性产品）？如何构建和验证MVP？</a></li>
<li><a href="https://www.minjiekaifa.com/agilearticles/mvp-prototype-proof-of-concept-80445.mhtml">MVP、原型、概念验证，傻傻分不清楚？</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1724045">5 分钟，带你了解MVP（最低可行性产品）</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Assimp安装折腾记]]></title>
    <link href="http://toughcoder.net/blog/2023/07/21/assimp-installing-troubleshooting/"/>
    <updated>2023-07-21T00:05:06+08:00</updated>
    <id>http://toughcoder.net/blog/2023/07/21/assimp-installing-troubleshooting</id>
    <content type="html"><![CDATA[<p>为了学习<a href="https://www.opengl.org/">OpenGL</a>，在学习大名鼎鼎的<a href="https://learnopengl.com/">LearnOpenGL</a>时，参考它的<a href="https://github.com/JoeyDeVries/LearnOpenGL">源码时</a>遇到了一点小小的困难，折腾了两天，感觉有必要总结一下。</p>

<p>LearnOpenGL是一个大神写的一整套关于OpenGL的资料，已出版成书，非常具有参考价值。不过它里面的示例都依赖于一些开源库，如<a href="https://github.com/assimp/assimp">assimp</a>和<a href="https://github.com/glfw/glfw">glfw</a>以及<a href="https://github.com/g-truc/glm">glm</a>等。在它的ReadMe中也都针对主流平台Windows, Linux/Unix以及Mac上面给出安装和编译教程。</p>

<p><a href="http://toughcoder.net/blog/2023/07/21/assimp-installing-troubleshooting/"><img src="https://ts1.cn.mm.bing.net/th/id/R-C.48d6ecd812532356af55ed7d662b4c3d?rik=TcRtYNyxFi9zYw&riu=http%3a%2f%2fioshacker.com%2fwp-content%2fuploads%2f2017%2f08%2fHomebrew-mac-logo.jpg&ehk=iZTgjyqdB7mHgQBwBprmXOcxPVvR%2bG9bdzmvDauON8A%3d&risl=&pid=ImgRaw&r=0" title="auto auto" ></a></p>

<!-- more -->


<p>先在Ubuntu 22.04 LTS上面搞，按照<a href="https://github.com/JoeyDeVries/LearnOpenGL">其官方教程</a>上面说的Linux/Unix编译方法，一下子就搞定了。</p>

<p>但在Mac上面就遇到了困难。这里得说一下，我的MBP是2019年买的，系统版本是Mojave 10.14.6，现在来看是过点过时了，因为最新的稳定版本Mac OSX已经到了Ventura 10.22了，很多软件，像XCode等都已经不再提供对Mojave的支持了，平时安装软件以及一些开发库的时候也都有遇到不支持的情况。但仍不想升级，因为旧硬件升级大版本的新操作系统，往往会遇到问题，即使能升级成功，性能也大打折扣。对于电子产品，永远相信出厂的配置是最优的。可以进行小的升级，但绝不升级大版本。</p>

<p>好了，这些是背景。</p>

<h2>brew初偿败果</h2>

<p>仍是按照<a href="https://github.com/JoeyDeVries/LearnOpenGL">教程</a>在Mac上面，先是安装依赖：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install cmake assimp glm glfw freetype
</span></code></pre></td></tr></table></div></figure>


<p>但安装依赖时出错了，以下是错误信息（很长，很长，只截取一部分）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Running <span class="sb">`</span>brew update --auto-update<span class="sb">`</span>...
</span><span class='line'><span class="o">==</span>&gt; Auto-updated Homebrew!
</span><span class='line'>Updated <span class="m">1</span> tap <span class="o">(</span>homebrew/core<span class="o">)</span>.
</span><span class='line'>
</span><span class='line'>You have <span class="m">3</span> outdated formulae installed.
</span><span class='line'>
</span><span class='line'>Warning: You are using macOS 10.14.
</span><span class='line'>We <span class="o">(</span>and Apple<span class="o">)</span> <span class="k">do</span> not provide support <span class="k">for</span> this old version.
</span><span class='line'>It is expected behaviour that some formulae will fail to build in this old version.
</span><span class='line'>It is expected behaviour that Homebrew will be buggy and slow.
</span><span class='line'>Do not create any issues about this on Homebrew<span class="s1">&#39;s GitHub repositories.</span>
</span><span class='line'><span class="s1">Do not create any issues even if you think this message is unrelated.</span>
</span><span class='line'><span class="s1">Any opened issues will be immediately closed without response.</span>
</span><span class='line'><span class="s1">Do not ask for help from Homebrew or its maintainers on social media.</span>
</span><span class='line'><span class="s1">You may ask for help in Homebrew&#39;</span>s discussions but are unlikely to receive a response.
</span><span class='line'>Try to figure out the problem yourself and submit a fix as a pull request.
</span><span class='line'>We will review it but may or may not accept it.
</span><span class='line'>
</span><span class='line'><span class="o">==</span>&gt; Fetching <span class="nv">assimp</span>
</span><span class='line'><span class="o">==</span>&gt; Downloading https://github.com/assimp/assimp/commit/5a89d6fee138f8bc979b508719163a74ddc9a384.patch?full_index<span class="o">=</span>1
</span><span class='line'>Already downloaded: /Users/alexhilton/Library/Caches/Homebrew/downloads/af0c0eeaaca4991d7485bfb46ac1cb6209ce97489e6e4a94cb0debcaa03215cc--5a89d6fee138f8bc979b508719163a74ddc9a384.patch
</span><span class='line'><span class="o">==</span>&gt; Downloading https://github.com/assimp/assimp/archive/v5.2.5.tar.gz
</span><span class='line'>Already downloaded: /Users/alexhilton/Library/Caches/Homebrew/downloads/17609a79a14f9163556e55125d6e9008276ba8e8bae256242c47e9dbbb4a34d2--assimp-5.2.5.tar.gz
</span><span class='line'>Warning: A newer Command Line Tools release is available.
</span><span class='line'>Update them from Software Update in System Preferences.
</span><span class='line'>
</span><span class='line'>If that doesn<span class="s1">&#39;t show you any updates, run:</span>
</span><span class='line'><span class="s1">  sudo rm -rf /Library/Developer/CommandLineTools</span>
</span><span class='line'><span class="s1">  sudo xcode-select --install</span>
</span><span class='line'>
</span><span class='line'><span class="s1">Alternatively, manually download them from:</span>
</span><span class='line'><span class="s1">  https://developer.apple.com/download/all/.</span>
</span><span class='line'><span class="s1">You should download the Command Line Tools for Xcode 11.3.1.</span>
</span><span class='line'>
</span><span class='line'><span class="s1">==&gt; Patching</span>
</span><span class='line'><span class="s1">==&gt; Applying 5a89d6fee138f8bc979b508719163a74ddc9a384.patch</span>
</span><span class='line'>
</span><span class='line'><span class="s1">==&gt; cmake  -S . -B build -G Ninja -DASSIMP_BUILD_TESTS=OFF -DASSIMP_BUILD_ASSIMP_TOOLS=ON -DCMAKE_INSTALL_RPATH=@loader_</span>
</span><span class='line'><span class="s1">==&gt; cmake --build build</span>
</span><span class='line'><span class="s1">Last 15 lines from /Users/alexhilton/Library/Logs/Homebrew/assimp/02.cmake:</span>
</span><span class='line'><span class="s1">^</span>
</span><span class='line'><span class="s1">/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:769:1: note: candidate function</span>
</span><span class='line'><span class="s1">abs(long double __lcpp_x) _NOEXCEPT {return ::fabsl(__lcpp_x);}</span>
</span><span class='line'><span class="s1">^</span>
</span><span class='line'><span class="s1">1 error generated.</span>
</span><span class='line'>
</span><span class='line'><span class="s1">Do not report this issue to Homebrew/brew or Homebrew/homebrew-core!</span>
</span><span class='line'>
</span><span class='line'><span class="s1">Error: You are using macOS 10.14.</span>
</span><span class='line'><span class="s1">We (and Apple) do not provide support for this old version.</span>
</span><span class='line'><span class="s1">It is expected behaviour that some formulae will fail to build in this old version.</span>
</span><span class='line'><span class="s1">It is expected behaviour that Homebrew will be buggy and slow.</span>
</span><span class='line'><span class="s1">Do not create any issues about this on Homebrew&#39;</span>s GitHub repositories.
</span><span class='line'>Do not create any issues even <span class="k">if</span> you think this message is unrelated.
</span><span class='line'>Any opened issues will be immediately closed without response.
</span><span class='line'>Do not ask <span class="k">for</span> <span class="nb">help </span>from Homebrew or its maintainers on social media.
</span><span class='line'>You may ask <span class="k">for</span> <span class="nb">help </span>in Homebrew<span class="s1">&#39;s discussions but are unlikely to receive a response.</span>
</span><span class='line'><span class="s1">Try to figure out the problem yourself and submit a fix as a pull request.</span>
</span><span class='line'><span class="s1">We will review it but may or may not accept it.</span>
</span><span class='line'>
</span><span class='line'><span class="s1">Error: A newer Command Line Tools release is available.</span>
</span><span class='line'><span class="s1">Update them from Software Update in System Preferences.</span>
</span><span class='line'>
</span><span class='line'><span class="s1">If that doesn&#39;</span>t show you any updates, run:
</span><span class='line'>  sudo rm -rf /Library/Developer/CommandLineTools
</span><span class='line'>  sudo xcode-select --install
</span><span class='line'>
</span><span class='line'>Alternatively, manually download them from:
</span><span class='line'>  https://developer.apple.com/download/all/.
</span><span class='line'>You should download the Command Line Tools <span class="k">for</span> Xcode 11.3.1.
</span></code></pre></td></tr></table></div></figure>


<p>总结起来就是一句话，你的操作系统太旧了，brew已经不支持了，自已解决吧，别向brew来报问题。。。</p>

<p>傻掉了，因为看到需要升级系统，有了放弃的想法，因为有Ubuntu上能跑就也差不多够用了，也很晚了，就休息了。</p>

<h2>尝试解决</h2>

<p>第二天，仍不想轻易放弃，想再折腾一下。因为不确定是哪个库安装失败了，所以就一个一个的单独安装。单独安装cmake, glfw, glm, freetype都成功了。就是assimp会出错，错误信息与昨晚一样。</p>

<p>它里面也有提示，说可以尝试升级一下<strong>Command Line Tools</strong>，这货是XCode带的命令行编译工具集。因为最新版本XCode已不支持Mojave了，并不会提示更新Command Line Tools，其实我的Command Line Tools已经是支持Mojave中最新的了。</p>

<p>按错误信息中的提示，强行把xcode-select重装一遍也还是出错。</p>

<p>折腾环境这条路就断了，只能找找其他方式。回到问题本身，仔细看了下错误信息，似乎是一个编译错误：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Last <span class="m">15</span> lines from /Users/alexhilton/Library/Logs/Homebrew/assimp/02.cmake:
</span><span class='line'>^
</span><span class='line'>/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:769:1: note: candidate <span class="k">function</span>
</span><span class='line'>abs<span class="o">(</span>long double __lcpp_x<span class="o">)</span> _NOEXCEPT <span class="o">{</span><span class="k">return</span> ::fabsl<span class="o">(</span>__lcpp_x<span class="o">)</span><span class="p">;</span><span class="o">}</span>
</span><span class='line'>^
</span><span class='line'><span class="m">1</span> error generated.
</span></code></pre></td></tr></table></div></figure>


<p>但是这个信息仍不够明确，没有指出是assimp的哪句编译出错的。</p>

<p>于是就想换条路吧，用brew不可以，那直接找assimp编译好的库，或者直接手动去编译它的源码，应该可行吧？找了一下，没找到可用的已编译好的库，于是就去手动编译assimp的源码。</p>

<h2>直接编译assimp源码</h2>

<p>把assimp源码直接下载下来，下载最新稳定版本5.2.5，这与brew的版本是一致的，然后按<a href="https://github.com/assimp/assimp/blob/master/Build.md">官程</a>编译，也出错了，但错误信息非常详细：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>➜  assimp-5.2.5 cmake --build .
</span><span class='line'><span class="o">[</span>  0%<span class="o">]</span> Building CXX object code/CMakeFiles/assimp.dir/Common/Assimp.cpp.o
</span><span class='line'><span class="o">[</span>  0%<span class="o">]</span> Building CXX object code/CMakeFiles/assimp.dir/CApi/CInterfaceIOWrapper.cpp.o
</span><span class='line'><span class="o">[</span>  0%<span class="o">]</span> Building CXX object code/CMakeFiles/assimp.dir/Common/Compression.cpp.o
</span><span class='line'><span class="o">[</span>  1%<span class="o">]</span> Building CXX object code/CMakeFiles/assimp.dir/Common/BaseImporter.cpp.o
</span><span class='line'><span class="o">[</span>  1%<span class="o">]</span> Building CXX object code/CMakeFiles/assimp.dir/Common/BaseProcess.cpp.o
</span><span class='line'>In file included from /Users/alexhilton/opensource/assimp-5.2.5/code/Common/BaseProcess.cpp:44:
</span><span class='line'>In file included from /Users/alexhilton/opensource/assimp-5.2.5/code/Common/BaseProcess.h:46:
</span><span class='line'>In file included from /Users/alexhilton/opensource/assimp-5.2.5/include/assimp/GenericProperty.h:50:
</span><span class='line'>/Users/alexhilton/opensource/assimp-5.2.5/include/assimp/Hash.h:99:25: error: call to <span class="s1">&#39;abs&#39;</span> is ambiguous
</span><span class='line'>                <span class="nb">hash</span> ^<span class="o">=</span> abs<span class="o">(</span>data<span class="o">[</span>sizeof<span class="o">(</span>uint16_t<span class="o">)])</span> <span class="s">&lt;&lt; 18;</span>
</span><span class='line'><span class="s">                        ^~~</span>
</span><span class='line'><span class="s">/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1</span>/math.h:761:1: note:
</span><span class='line'>      candidate <span class="k">function</span>
</span><span class='line'>abs<span class="o">(</span>float __lcpp_x<span class="o">)</span> _NOEXCEPT <span class="o">{</span><span class="k">return</span> ::fabsf<span class="o">(</span>__lcpp_x<span class="o">)</span><span class="p">;</span><span class="o">}</span>
</span><span class='line'>^
</span><span class='line'>/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:765:1: note:
</span><span class='line'>      candidate <span class="k">function</span>
</span><span class='line'>abs<span class="o">(</span>double __lcpp_x<span class="o">)</span> _NOEXCEPT <span class="o">{</span><span class="k">return</span> ::fabs<span class="o">(</span>__lcpp_x<span class="o">)</span><span class="p">;</span><span class="o">}</span>
</span><span class='line'>^
</span><span class='line'>/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/math.h:769:1: note:
</span><span class='line'>      candidate <span class="k">function</span>
</span><span class='line'>abs<span class="o">(</span>long double __lcpp_x<span class="o">)</span> _NOEXCEPT <span class="o">{</span><span class="k">return</span> ::fabsl<span class="o">(</span>__lcpp_x<span class="o">)</span><span class="p">;</span><span class="o">}</span>
</span><span class='line'>^
</span><span class='line'><span class="m">1</span> error generated.
</span><span class='line'>make<span class="o">[</span>2<span class="o">]</span>: *** <span class="o">[</span>code/CMakeFiles/assimp.dir/Common/BaseProcess.cpp.o<span class="o">]</span> Error 1
</span><span class='line'>make<span class="o">[</span>1<span class="o">]</span>: *** <span class="o">[</span>code/CMakeFiles/assimp.dir/all<span class="o">]</span> Error 2
</span><span class='line'>make: *** <span class="o">[</span>all<span class="o">]</span> Error 2
</span></code></pre></td></tr></table></div></figure>


<p>这个编译错误比较直接，不像brew给出的不直观，可以清楚的看到是头文件include/assimp/Hash.h出错了。打开include/assimp/Hash.h查看，这只是用了一个abs函数，但引用的头文件是#include <cmath>，通过搜索找到了原因，cmath中定义了三个重载abs(float) abs(double)等。而Hash.h用的是整数，整数的abs定义是在stdlib中，也就是头文件要引用<cstdlib>。但Hash.h只引用了<cmath>，所以导致找不到整数的abs。那就简单了，直接把include/assimp/Hash.h中的头文件从cmath改成cstdlib，就可以了，再次编译，成功了。</p>

<p>看起来是个版本兼容性的问题，估计新版本的C++兼容了cmath和cstdlib，所以只引用cmath也不会出错。Anyway，这说明只是一个小小的问题，到不了放弃或者重装系统的地步。这个可以作为Plan B，如果最后用brew仍不成功，就把手动把刚编译好的库放到项目能链接 到的地方就行了。</p>

<h2>brew install assimp的折腾过程</h2>

<p>既然小修改就能成功，那么如果找到brew使用的源码包，稍加修改，不就能安装成功了么，这是值得折腾的，可以加深了解一下brew的具体过程。</p>

<p>brew是一个软件包管理工具，它会找某一个软件的最新稳定版本，如果本地未安装的话，会把其源码下载下来，打重要的patches，然后再编译，最后执行安装。</p>

<p>找到了brew会把临时文件放在HOME/Library/Caches/Homebrew下面，并且如果已下载过了就不会重新再下载源码包，太好了。于是找到assimp的源码包，解压，修改Hash.h然后再压缩。然后再运行brew install assimp，发现它确实会直接用下载好的源码 包，不会重新下载，太好了，这离成功就相当近了。</p>

<p>但，还是会报错，它会对源码包做校验，为了防止源码包被篡改，当然需要做校验了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">==</span>&gt; Fetching <span class="nv">assimp</span>
</span><span class='line'><span class="o">==</span>&gt; Downloading https://github.com/assimp/assimp/commit/5a89d6fee138f8bc979b508719163a74ddc9a384.patch?full_index<span class="o">=</span>1
</span><span class='line'>Already downloaded: /Users/alexhilton/Library/Caches/Homebrew/downloads/af0c0eeaaca4991d7485bfb46ac1cb6209ce97489e6e4a94cb0debcaa03215cc--5a89d6fee138f8bc979b508719163a74ddc9a384.patch
</span><span class='line'><span class="o">==</span>&gt; Downloading https://github.com/assimp/assimp/archive/v5.2.5.tar.gz
</span><span class='line'>Already downloaded: /Users/alexhilton/Library/Caches/Homebrew/downloads/17609a79a14f9163556e55125d6e9008276ba8e8bae256242c47e9dbbb4a34d2--assimp-5.2.5.tar.gz
</span><span class='line'>Error: assimp: SHA256 mismatch
</span><span class='line'>Expected: b5219e63ae31d895d60d98001ee5bb809fb2c7b2de1e7f78ceeb600063641e1a
</span><span class='line'>  Actual: b99489f8d142769dda720f4d250da31214efad3460f92b3d3ec71919de196dd1
</span><span class='line'>    File: /Users/alexhilton/Library/Caches/Homebrew/downloads/17609a79a14f9163556e55125d6e9008276ba8e8bae256242c47e9dbbb4a34d2--assimp-5.2.5.tar.gz
</span><span class='line'>To retry an incomplete download, remove the file above.
</span></code></pre></td></tr></table></div></figure>


<p>这也好办，得到我们修改过的压缩包的sha256的值，然后想办法找到校验配置的文件，改一下就可以了。试了下，未成功，估计校验文件配置会被brew覆盖掉。</p>

<p>然后发现，brew有跳过校验的方法，运行brew edit assimp会出现关于assimp的一些meta信息，把sha256的值改一下，改成我们修改后的就可以了，然后就安装成功了。</p>

<h2>总结</h2>

<p>还是要找到问题的根因，多从源码出发进行hack，然后解决问题。像这个问题，一开始安装一坨依赖的时候失败了，这时就要一个一个的安装，然后看是哪个失败了。先把成功的装上，留下失败的这个慢慢解决。然后就要找到它编译失败的根本原因。如果brew安装的错误信息不够明确，那么就要直接去找它的源码，然后手动编译，看出错在哪里，这时一般能够发现问题，一般来说都是一些编译器版本兼容的小问题，这本身也能当作Plan B，因为可以手动安装。</p>

<p>之后就是要研究一下包管理工具的工作流程，看能否修改它使用的源码包，然后一一把流程跑通就可以了。</p>

<p>切忌不要一上来就轻易的去升级电脑，先尝试解决软件包本身，而不是去改运行环境，流行的开源库兼容性会很好，通常都只会是一些小的兼容问题，不要轻易的去改电脑本身的运行环境。</p>

<h2>参考</h2>

<ul>
<li><a href="https://github.com/assimp/assimp/blob/master/Build.md">Assimp Build</a></li>
<li><a href="https://github.com/JoeyDeVries/LearnOpenGL">LearnOpenGL</a></li>
<li><a href="https://stackoverflow.com/questions/19208607/homebrew-force-install-even-with-sha1-mismatch">homebrew - force install even with SHA1 mismatch</a></li>
<li><a href="https://stackoverflow.com/questions/4800588/modifying-the-source-code-of-a-home-brew-package">Modifying the source code of a home brew package</a></li>
<li><a href="https://stackoverflow.com/questions/56978365/how-to-fix-error-call-to-abs-is-ambiguous">How to fix &ldquo;error: call to &lsquo;abs&rsquo; is ambiguous&rdquo;</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Metaprogramming in Python]]></title>
    <link href="http://toughcoder.net/blog/2023/07/17/metaprogramming-in-python/"/>
    <updated>2023-07-17T23:34:14+08:00</updated>
    <id>http://toughcoder.net/blog/2023/07/17/metaprogramming-in-python</id>
    <content type="html"><![CDATA[<p>元编程是一种编写生成或者处理程序代码的技术，Python语言也支持元编程，今天就来好好的学习一下。我们先了解元编程的概念，然后再深入探讨在Python中如何实现元编程。</p>

<p><a href="http://toughcoder.net/blog/2023/07/17/metaprogramming-in-python/"><img src="https://tse4-mm.cn.bing.net/th/id/OIP-C.szFdgvrOnL6NNY3yIbVg7QHaHa?pid=ImgDet&rs=1"></a></p>

<!-- more -->


<h2>什么是元编程</h2>

<p><a href="https://en.wikipedia.org/wiki/Metaprogramming">元编程Metaprogramming</a>就是编写元程序(Metaprograms)的过程。而元程序则是用于生成程序，或者处理的程序的程序。通俗一点的理来理解，元编程就是编写生成代码的代码。程序的处理对象一般是数据，比如从用户处得到输出数据，经过业务逻辑处理，再把输出数据反馈给用户，这是绝大多数程序所做的事情。而元程序处理的对象则是程序，编写元程序的过程就叫做元编程。</p>

<p><img src="https://tse3-mm.cn.bing.net/th/id/OIP-C.hZeaNZPsVVpTioOzzb54oQHaEK?pid=ImgDet&amp;rs=1" alt="" /></p>

<p>元程序的优势，或者我们元编程的目的在于复用和减少代码量，而且是用一种非常优雅的方式。</p>

<p>这么说确实比较抽象，其实元编程没那么复杂，甚至平时都或多或少的已经用到元编程了。比如像C/C++中的宏和模板函数，Java中的泛型，注解，反向和动态代理，代码模板（模板容易混淆，这里指的是<a href="https://en.wikipedia.org/wiki/Boilerplate_code">boilerplate codes</a>）等等，这些本质上都是元编程。</p>

<h3>参考资料</h3>

<ul>
<li><a href="https://zhuanlan.zhihu.com/p/461190812">元编程 (meta-programming)</a></li>
<li><a href="https://codedocs.org/what-is/metaprogramming">What is Metaprogramming</a></li>
<li><a href="https://www.jianshu.com/p/d3b637ece518">一文读懂元编程</a></li>
<li><a href="https://draveness.me/metaprogramming/">谈元编程与表达能力</a></li>
<li><a href="https://stackoverflow.com/questions/514644/what-exactly-is-metaprogramming">What exactly is metaprogramming?</a></li>
<li><a href="https://cs.lmu.edu/~ray/notes/metaprogramming/">Metaprogramming</a></li>
<li><a href="https://devopedia.org/metaprogramming">Metaprogramming</a></li>
</ul>


<p>在大Python中，实现元编程的方式主要是通过装饰器Decorators和元类Metaclasses。</p>

<h2><a href="https://peps.python.org/pep-0318/">装饰器Decorators</a></h2>

<p><img src="https://ts1.cn.mm.bing.net/th/id/R-C.8e7531f7cc7cbb9427f0191423bc0739?rik=WGXrND77wsMxmA&amp;riu=http%3a%2f%2fwww.trytoprogram.com%2fimages%2fpython_decorators.jpg&amp;ehk=SlZpChA7lJNyuSSJnXJMUiyk%2floVKyi3jjsLAcJGHyo%3d&amp;risl=&amp;pid=ImgRaw&amp;r=0" alt="" /></p>

<h3>理解Decorator</h3>

<p>Decorator本质上是高阶函数，最常用的就是用来修饰一个函数，形式上是一个@my_decorator加在一个函数定义的上面，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@my_decorator</span>
</span><span class='line'><span class="k">def</span> <span class="nf">say_hello</span><span class="p">():</span>
</span><span class='line'>  <span class="k">print</span><span class="p">(</span><span class="s">&#39;Hello, world&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>它等同于：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">say_hello</span><span class="p">():</span>
</span><span class='line'>  <span class="k">print</span><span class="p">(</span><span class="s">&#39;Hello, world&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">my_decorator</span><span class="p">(</span><span class="n">say_hello</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Decorator是一个函数，它的输入参数是被修饰的函数，此例中即sya_hello。</p>

<p>Python的函数是一级对象，可以赋给变量，可以当作参数和返回值，而以函数为参数或者返回值的函数称为高阶函数。装饰器本质上就是一个高阶函数，只不过，以一种更为简洁的方式来书写@my_decorator。所以再次看到@时，不用害怕，把它看成高阶函数调用即可。</p>

<h3>自定义Decorator</h3>

<p>装饰器本质上就是高阶函数，它的输入是一个函数，所以定义一个高阶函数，即可当作decorator使用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">my_decorator</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">wrapper</span><span class="p">():</span>
</span><span class='line'>      <span class="k">print</span><span class="p">(</span><span class="s">&#39;Before func is called&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">func</span><span class="p">()</span>
</span><span class='line'>      <span class="k">print</span><span class="p">(</span><span class="s">&#39;After func is called&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">wrapper</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@my_decorator</span>
</span><span class='line'><span class="k">def</span> <span class="nf">say_hello</span><span class="p">():</span>
</span><span class='line'>  <span class="k">print</span><span class="p">(</span><span class="s">&#39;Hello, world&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">say_hello</span><span class="p">()</span>
</span><span class='line'><span class="c">#Output:</span>
</span><span class='line'><span class="c">#Before func is called</span>
</span><span class='line'><span class="c">#Hello, world</span>
</span><span class='line'><span class="c">#After func is called</span>
</span></code></pre></td></tr></table></div></figure>


<p>这就实现了一个非常简单的自定义decorator。</p>

<h3>装饰器的作用</h3>

<p>装饰器就是高阶函数，所以通常用于对函数产生一些副作用，比如打印日志，性能测试等等，其与<a href="https://refactoring.guru/design-patterns">设计模式中</a>的<a href="https://refactoring.guru/design-patterns/decorator">装饰模式</a>的思想是一致的，通俗来理解就是套娃。</p>

<p><a href="https://docs.python.org/3/library/functools.html">模块functools</a>定义了很多高阶函数，都可以直接当作decorator使用。用好Decorator可以写出很简洁和易于维护的代码。</p>

<h3>参考资料</h3>

<ul>
<li><a href="https://www.geeksforgeeks.org/decorators-in-python/">Decorators in Python</a></li>
<li><a href="https://realpython.com/primer-on-python-decorators/">Primer on Python Decorators</a></li>
<li><a href="https://www.programiz.com/python-programming/decorator">Python Decorators</a></li>
<li><a href="https://www.datacamp.com/tutorial/decorators-python">Python Decorators Tutorial</a></li>
<li><a href="https://machinelearningmastery.com/a-gentle-introduction-to-decorators-in-python/">A Gentle Introduction to Decorators in Python</a></li>
</ul>


<h2>元类Metaclasses</h2>

<p>Decorator可以非常方便的修饰一个函数，但如果我们有很多个方法（属于类的函数，称为方法），难道要一个一个的去添加@吗？或者想对类的属性也搞些操作，咋办？如果是一个类，倒也可以手动加一加，如果想给整个类的继承体系内的所有类都施加某种副作用影响呢？这时就会用到Metaclasses。</p>

<p><img src="https://tse3-mm.cn.bing.net/th/id/OIP-C.XRGcsVISQj6adHt8Ygq6cAHaGV?pid=ImgDet&amp;rs=1" alt="" /></p>

<p>Metaclasses可以理解为类的基类，也就是用于定义每个类(class）时使用的类，Metaclass中可以定义一些高阶函数用于在创建对象时，实始化对象时，调用属性时和调用方法时施加副作用影响。可以在定义类的时候通过metaclasses来指定使用的Metaclasses，并且会在继承体系中得到继承。</p>

<p>Metaclasses可以对类施加一些额外影响，比如说Python并非强OO的，像abstract没有直接的支持，这时就可以用Metaclasses来定义额外的限制，比如当基类是abstract时，如果子类没有实现一些abstract方法，就报错等等。</p>

<h3>参考资料</h3>

<ul>
<li><a href="https://realpython.com/python-metaclasses/">Python Metaclasses</a></li>
<li><a href="https://www.geeksforgeeks.org/metaprogramming-metaclasses-python/">Metaprogramming with Metaclasses in Python</a></li>
<li><a href="https://lotabout.me/2018/Understanding-Python-MetaClass/">Python 元类 (MetaClass) 小教程</a></li>
<li><a href="https://stackoverflow.com/questions/100003/what-are-metaclasses-in-python">What are metaclasses in Python?</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/149126959">Python进阶——详解元类，metaclass的原理和用法</a></li>
</ul>


<h2>参考资料</h2>

<ul>
<li><a href="https://developer.ibm.com/tutorials/ba-metaprogramming-python/">Metaprogramming in Python</a></li>
<li><a href="https://www.oreilly.com/library/view/metaprogramming-with-python/9781838554651/">Metaprogramming with Python</a></li>
<li><a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/chapters/p09_meta_programming.html">第九章：元编程</a></li>
<li><a href="https://github.com/PacktPublishing/Metaprogramming-with-Python">Metaprogramming with Python, published by Packt</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploying Python Applications]]></title>
    <link href="http://toughcoder.net/blog/2023/07/16/deploying-python-applications/"/>
    <updated>2023-07-16T14:53:07+08:00</updated>
    <id>http://toughcoder.net/blog/2023/07/16/deploying-python-applications</id>
    <content type="html"><![CDATA[<p>一个软件项目通常的开发流程包括创建，开发，打包和发布，不同为类型的项目具体过程可能不太一样，比如像Web项目，最后一般不叫发布而是叫做部署，并且像动态语言类的项目一般不会有打包过程。但总的来说，这几个流程确实是任何一个软件开发过程中必做的事情。今天就来学习一下如何部署Python应用程序，也就是除了项目开发写代码以外的一些必须做的事情。</p>

<p><a href="http://toughcoder.net/blog/2023/07/16/deploying-python-applications/"><img src="https://www.antagonist.nl/blog/wp-content/uploads/2020/11/py-deployment.png" title="auto auto" ></a></p>

<!-- more -->


<p><strong>注意</strong>：本文不去纠结项目和应用程序的具体定义与区别，就是泛指一个软件项目，一坨脚本工具集，一个module package，一个桌面应用程序，一个Web app都是一个项目。并且项目和应用程序也基本上指的是同一个东西，很多语境下可互换。</p>

<h2>以符合规范的方式来开发项目</h2>

<p>在讨论部署之前，我们先谈谈项目的创建与开发，视项目的不同用途，每个类型的项目都会有相应的开发规范，比如要创建哪些必备的配置类的文件，比如要采用什么样的目录结构。并没有一个大一统的统一规范，但是不同的类型的项目确实会有其规范，比如一个package要如何创建，一个Django app要如何创建。</p>

<p>我们还是要符合具体项目类型的要求，这样的做的原因是，当开发完成后，进行打包和部署的时候会容易得多。</p>

<p>可以参考 《Expert Python Programming 2nd Edition》中的第五章『Creating a package』。</p>

<h2>打包和部署</h2>

<p>Python是通用的编程语言，在打包和部署这块也是相当灵活的，没有固定和统一的规则，主要还是依据不同类型的项目来确实具体的部署策略。</p>

<h3>package</h3>

<p><img src="https://tse3-mm.cn.bing.net/th/id/OIP-C.tL670VQGeyalMhD23kSXPwHaEE?pid=ImgDet&amp;rs=1" alt="" /></p>

<p>package是指一坨Python代码的集合，是可以供其他人使用的库，应该被视为三方module。Python是有完整的生态的，它提供三方module的<a href="https://pypi.org/">聚合PyPI</a>，提供下载管理工具<a href="https://pypi.org/project/pip/">pip</a>， 以及module（package是更正式的称谓）的开发和发布机制。</p>

<ul>
<li><a href="https://www.geeksforgeeks.org/how-to-build-a-python-package/">How to Build a Python package?</a></li>
<li><a href="https://packaging.python.org/en/latest/tutorials/packaging-projects/">Packaging Python Projects</a></li>
<li><a href="https://www.freecodecamp.org/news/build-your-first-python-package/">How to Build Your Very First Python Package</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/126357143">创建Python Package</a></li>
<li><a href="https://www.pythoncentral.io/how-to-create-a-python-package/">How to Create a Python Package</a></li>
</ul>


<h3>Desktop app</h3>

<p>这里的Desktop app是指除了package（会发布到PyPI的）和Web app以外的，能独立运行的，没有与客户端或者其他服务器有太多交互的通用应用程序，比如一些脚本，或者一个桌面应用程序都算Desktop app。</p>

<p>其实，这里重点想强调的就是运行环境，可以是本机，也可以是服务器。</p>

<ul>
<li><a href="https://packaging.python.org/en/latest/discussions/deploying-python-applications/">Deploying Python applications</a></li>
<li><a href="https://pypi.org/project/desktop-app/">desktop-app 0.4.0</a></li>
<li><a href="https://pythonistaplanet.com/how-to-create-a-desktop-application-using-python/">How to Create a Desktop Application Using Python
Written by Ashwin Joyin Python</a></li>
<li><a href="https://www.freecodecamp.org/news/the-python-desktop-application-3a66b4a128d3/">How to Turn a Web App Into a Desktop App, Using Chromium and PyInstaller</a></li>
</ul>


<h3>Web app</h3>

<p><img src="https://tse3-mm.cn.bing.net/th/id/OIP-C.Bt6Ec7CvI4OGvQ9eD39-EQAAAA?pid=ImgDet&amp;rs=1" alt="" /></p>

<p>Web app一般部署规则都由其使用的框架决定，比如Django有其自己的规则和方法，而Flask又有一套。也跟服务器有关系，比如部署到私有服务器，跟部署到云服务上面是完全不一样的。</p>

<ul>
<li><a href="https://realpython.com/python-web-applications/">Python Web Applications: Deploy Your Script as a Flask App</a></li>
<li><a href="https://learn.microsoft.com/en-us/azure/app-service/quickstart-python?tabs=flask%2Cwindows%2Cazure-cli%2Cvscode-deploy%2Cdeploy-instructions-azportal%2Cterminal-bash%2Cdeploy-instructions-zip-azcli">Quickstart: Deploy a Python (Django or Flask) web app to Azure App Service</a></li>
<li><a href="https://python-adv-web-apps.readthedocs.io/en/latest/flask_deploy.html">Flask: Deploy an App</a></li>
<li><a href="https://realpython.com/lessons/build-basic-python-web-app/">Building a Basic Python Web App</a></li>
<li><a href="https://www.geeksforgeeks.org/how-to-deploy-django-project-on-pythonanywhere/#:~:text=How%20to%20Deploy%20Django%20project%20on%20PythonAnywhere%3F%201,Github%3F%203%20Step%203%3A%20Deploy%20Project%20on%20pythonanywhere">How to Deploy Django project on PythonAnywhere?</a></li>
<li><a href="https://docs.djangoproject.com/en/4.2/howto/deployment/">How to deploy Django</a></li>
<li><a href="https://docs.digitalocean.com/tutorials/app-deploy-django-app/">Deploy a Django App on App Platform </a></li>
</ul>


<h3>部署到服务器</h3>

<p><img src="https://www.aipython.in/wp-content/uploads/2021/09/Deploy-python-app-on-heroku-cloud-server-for-free.jpg" alt="" /></p>

<p>这个跟Web app不太一样，Web app当然要部署到服务器中。但需要往服务器部署的可不止Web app，一些工具性脚本，Desktop app也有可能需要往服务器部署，这只是有别于本机运行的不同的环境而已，与app的类型并没有太多关系。</p>

<ul>
<li><a href="https://zhuanlan.zhihu.com/p/595872062">手把手教你如何从零开始部署一个Python项目到服务器</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/323261131">Pycharm 实现远程部署和调试，原来这么简单</a></li>
</ul>


<h3>使用虚拟环境</h3>

<p>简单的项目还好，如果复杂一点的项目，最好使用虚拟环境进行隔离，我们在<a href="http://toughcoder.net/blog/2023/07/14/python-runtime-environment/">另外一个文章</a>里面有详细的讨论。</p>

<p>如果项目真的是比较复杂，并且用了超出Python的东西，或者说需要往服务器部署，那么最好的方式是使用Docker。</p>

<ul>
<li><a href="https://zhuanlan.zhihu.com/p/137895577">Docker极简实战之python项目安装部署</a></li>
<li><a href="https://docs.docker.com/language/python/build-images/">Build your Python image</a></li>
<li><a href="https://www.docker.com/blog/how-to-dockerize-your-python-applications/">How to “Dockerize” Your Python Applications</a></li>
<li><a href="https://realpython.com/offline-python-deployments-with-docker/">Simplifying Offline Python Deployments With Docker</a></li>
</ul>


<p>更多内容可以参考 《Expert Python Programming 2nd Edition》中的第六章『Chapter 6. Deploying Code』。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://packaging.python.org/en/latest/overview/">An Overview of Packaging for Python</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-package-and-distribute-python-applications">How To Package And Distribute Python Applications</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/161930778">Python 项目代码写完了，然后怎么打包和发布？</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python GUI Made Easy]]></title>
    <link href="http://toughcoder.net/blog/2023/07/15/python-gui-made-easy/"/>
    <updated>2023-07-15T22:11:49+08:00</updated>
    <id>http://toughcoder.net/blog/2023/07/15/python-gui-made-easy</id>
    <content type="html"><![CDATA[<p><a href="https://www.python.org/">大Python</a>是很好用的一门编程语言，默认情况下我们都当成脚本来使用，都是通过命令行方式来运行我们写的程序。但有些时候GUI还是很方便使用的，脚本和命令行最适合的场景是批量任务运行和自动化，但是如果交互性质的任务较多时，脚本就特别不方便，这个时候GUI就相当的方便。因此，学习一下GUI相关方面的框架，还是相当有必要的。</p>

<p><a href="http://toughcoder.net/blog/2023/07/15/python-gui-made-easy/"><img src="https://onaircode.com/wp-content/uploads/2018/09/Python-GUI-Frameworks.jpg" title="auto auto" ></a></p>

<!-- more -->


<p><a href="https://www.computerhope.com/jargon/g/gui.htm">GUI</a>也即是图形用户界面，是用一些窗口小部件(widgets或者叫做views）如按扭，标签，列表，文本输入框等视觉元素组成的直观的，方便用户操作的软件使用界面。大Python是一个跨平台的通用编程语言，它本身是没有GUI框架的，语言本身以及核心库都不涉及GUI，所以，要想实现GUI，一个最为容易的方式就是对现有的GUI平台进行封装，也即是套壳。</p>

<h2>流行的跨平台GUI平台</h2>

<p>说到GUI，主流的操作系统平台都有自己的GUI框架，比如Windows的.NET以及水果Mac上面的Cocoa，再如Java的Swing和JavaFX。这些都是平台本身提供的能开发GUI的框架。</p>

<p>此外，还有一些非常流行的三方GUI，并且这些GUI都是跨平台的，如wxWidget，Tcl/Tk，QT和GTK+，这几个是非常流行的跨平台的GUI框架，起初这些平台都是源于C/C++语言的，因为桌面软件大多是用C/C++的，并且这两个语言本身也没有GUI库。</p>

<p>GUI平台重点在于其GUI开发能力，至于其支持的编程语言并不是问题，因为把它们用其他编程语言封装一下就能提供对其他语言支持了，像这些平台现在已经支持很多种编程语言了。</p>

<h3>wxWidgets</h3>

<p><img src="https://images.sftcdn.net/images/t_app-cover-l,f_auto/p/bf323fac-9b26-11e6-af72-00163ec9f5fa/659332528/wxwidgets-screenshot.jpg" alt="" /></p>

<p><a href="https://www.wxwidgets.org/">wxWidgets</a>是用C++实现的，最初也是用于C++的一个跨平台的GUI框架，也就 说用一套代码就可以在不同的平台（Windows, Linux和Mac OS）上创建GUI应用程序。后来也发展出来了对其他编程语言的支持，如Python。它最大的优势是接近平台本身的原生风格，就是说并没有进行过度的包装。</p>

<h3>Tcl/Tk</h3>

<p><a href="https://www.linuxjournal.com/article/7225">Tcl/Tk</a>是起源于Linux的一个脚本式的GUI编程语言，不用安装基本上都带了，最大问在于特别丑，而且比较难用，它的思维跟很多通用的编程语言是不一致的。</p>

<h3>QT</h3>

<p><img src="https://ts1.cn.mm.bing.net/th/id/R-C.ccc4bcee36abe0e7c3a4b7df0e8ee87c?rik=HKrLeROHBCAOzA&amp;riu=http%3a%2f%2fpic.baike.soso.com%2fp%2f20131206%2f20131206105338-1481443581.jpg&amp;ehk=GiZS%2byK%2bwSMVOZUmst8BLdXKbummKkNaQMkjqYMLHnw%3d&amp;risl=&amp;pid=ImgRaw&amp;r=0" alt="" /></p>

<p><a href="https://www.qt.io/">QT</a>是很强大的平台，不仅仅是用于GUI，当然最初也为了C++设计的GUI库。是KDE桌面的核心库。</p>

<h3>GTK+</h3>

<p><img src="https://news-cdn.softpedia.com/images/news2/gtk-plus-4-gets-wayland-cpu-fixes-adwaita-to-use-standard-css-gradient-definitions-510213-2.jpg" alt="" /></p>

<p><a href="https://www.gtk.org/">GTK+</a>是起源于Linux的强大的GUI平台，最初是为了给C语言提供的GUI库。是Gnome桌面的核心库。</p>

<h2>Python的封装式GUI框架</h2>

<p>这些是GUI框架的核心实现，它们都支持多语言和跨平台。所以，很多Python的GUI框架都是基于上面这些的，有些是简单的封装，有些做了再次封装，但是核心实现仍是上述这些的库，在安装框架时都是需要先安装上述核心框架后才可以使用。
现在流行的Python的3方GUI框架也多是基于流行的3方的跨平台，跨语言的GUI框架，它们也是跨语言的，就是说针对 不同的编程语言都包了一层皮。</p>

<h3>基于wxWidgets的</h3>

<h4>WxPython</h4>

<p><a href="https://www.wxpython.org/">WxPython</a>可以说是wxWidgets提供给Python的官方库，它的优势是没有对wxWidgets进行过度的封装，使用起来就跟使用wxWidgets是一样的，如果有过wxWidgets的经验，那么上手wxPython会非常的快速。缺点是API相对low level，因为它就是把wxWidgets进行简单的封装和转化，并未进行层次更高的抽象和封装。</p>

<h4>Wax</h4>

<p><a href="https://pypi.org/project/wax/">Wax</a>是对wxPython的二次封装，是个二道贩子，优势是组件化更强，更好用，更方便搭建应用程序，会让wxPython更为好用一些。但是底层GUI实现仍是wxWidgets.</p>

<h3>基于Tcl/Tk</h3>

<p>就是<a href="https://docs.python.org/3/library/tkinter.html">Tkinker</a>了。它最大的优势就是它是随着Python一起发布的，它是官方的，默认的GUI框架，不用再折腾安装。但是相对来说不是很好用，而且很丑。</p>

<h3>基于QT</h3>

<h4>PyQT</h4>

<p><a href="https://wiki.python.org/moin/PyQt">PyQt</a>这是QT对Python的官方支持，如果已有QT经验的人，用起来会相当的顺手。不好的地方在于API生硬，基本就是QT的原生API。</p>

<h4>PySide</h4>

<p><a href="https://pypi.org/project/PySide/">PySide</a>是另外一个QT针对 Python的封装。
基于QT的最大的问题在于QT本身是收费的，虽然有免费的社区版本，但功能不如收费版本。</p>

<h4>pyforms</h4>

<p><a href="https://pyforms.readthedocs.io/en/v3.0/">pyforms</a>这个库也是基于QT，它最大的优势是在于form这个词，所以它更适合于网站样式的GUI。缺点是文档等资源比较少。官方网站也相当简陋。</p>

<h3>基于GTK+</h3>

<h4>PyGTK</h4>

<p><a href="https://wiki.python.org/moin/PyGtk">PyGTK</a>是GTK对Python的封装，如果有GTK经验会上手比较快，缺点跟PyQT或者wxPython是一样的，就是它只是GTK框架接口的一个简单封装，不够Pythonic，用起来可能也不是那么顺手，如果 没有GTK经验的话。</p>

<h4>PyGUI</h4>

<p><a href="https://www.cosc.canterbury.ac.nz/greg.ewing/python_gui/">PyGUI</a>这个库实现比较优雅，符合Pythonic精神。但它依赖于pyGtk，其实也是一个二道贩子。比较小众，文档教程之类的不够强大。</p>

<h3>高层次的抽象封装</h3>

<p>还有一些GUI框架，是更高层次的抽象封装，它底层的实现并没有指定哪个GUI框架，它们更注重于GUI组件本身，开发体验和GUI的使用体验，用起来更舒畅，而不用管底层的GUI框架实现。</p>

<h4>PySimpleGUI</h4>

<p><a href="https://pypi.org/project/PySimpleGUI/">PySimpleGUI</a>目的是高级的封装，让使用者完全不用理会具体的GUI框架。但是使用起来比较麻烦，虽然说它封装的更好，但是实装时要把各种GUI框架全装上。它最大的优势就是能与各种框架高度集成，比如能与给图框架matplotlib高度集成，或者与计算机视觉OpenCV高度集成，不需要做太多额外的事情。</p>

<h2>如何选择</h2>

<p>现在人都会有选择困难证，因为可供选择确实太多，对于开发领域更是如此，每一个功能需求都有大量的框架可供选择。</p>

<ul>
<li>把tkinker过滤掉，太丑太难用。</li>
<li>QT系列的也要过滤掉，因为非常讨厌QT。</li>
<li>太原始的封装也要过滤掉，如PyGTK和wxPython，因这些API过于生硬，仅是对核心GUI框架的简单映射封装。</li>
<li>wxWidgets的也要过滤掉，因为讨厌C++。</li>
<li>pyforms也过滤掉，这东西太接近网页了。</li>
</ul>


<p>剩下的只有PySimpleGUI和PyGUI再做一下PK吧。</p>

<p>PyGUI再pass掉，因为它的文档等看起来较简单，暂不考虑。</p>

<p>接下就只剩下PySimpleGUI</p>

<h4><a href="https://pypi.org/project/PySimpleGUI/#description">PySimpleGUI</a></h4>

<ul>
<li><a href="https://pysimplegui.readthedocs.io/en/latest/">官方文档</a></li>
<li><a href="https://realpython.com/pysimplegui-python/">一个教程</a></li>
<li><a href="https://pypi.org/project/PySimpleGUI/">pypi上的介绍</a></li>
</ul>


<p>通过进一步的看文档和资料，可以发现它的语句过于Python化，完全没有面向对象的概念（GUI框架是强OO的，有对象才更方便操作），可能易于上手，但跟大多的GUI框架明显差异过大，语法和语句过于奇怪。比如为何用widnow.read()，这个怪怪的，不应该封装一下嘛？</p>

<p>它看起来也很不错，不过，不想先尝试它，作为备选方案吧。</p>

<h2>集大成者</h2>

<p>除了针对三方GUI平台的封装外，还有一些GUI框架是基于更底层的graphics，从头搭建的GUI能力，比如Kivy和PyGame。</p>

<h3><a href="https://pypi.org/project/pygame/">PyGame</a></h3>

<p><img src="https://p1.ssl.qhimg.com/dr/270_500_/t01002dca6d3a0f83f5.jpg?size=268x161" alt="" /></p>

<p>主要面向游戏开发，并不适用于一般性的GUI开发，所以暂时忽略。</p>

<h3>Kivy</h3>

<p><img src="https://tse1-mm.cn.bing.net/th/id/OIP-C._Fe1WM6KaAnIHiT10uw4BAHaCe?pid=ImgDet&amp;rs=1" alt="" /></p>

<p>就只剩下Kivy了，决定先尝试一下Kivy，起码这个名字听起来更酷一些。重点介绍一下，Kivy一个非常与众不同的Python GUI框架，起码跟上面那一坨封装都不一样。</p>

<p><a href="https://kivy.org/#home">Kivy</a>是一个基于OpenGL的从零搭建GUI框架，GUI是一坨用户操作元素的组合，比如按扭文本框，输入框，文字标签，动态列表等等，它与graphics是无关的，是抽象层次更高的组件；而OpenGL是graphics库，它是专门用于画几何图形的，如点，线，面体等。通常情况下graphics是GUI的更底层能力，GUI是基于某个graphics库搭建而成的。所以Kivy是一个从零搭建的GUI框架，底层graphics是基于OpenGL，它的技术栈层位置与wxWidget/QT/GTK+是处于同一层的。所以，它跟那些封装层的库是完全不一样的东西。</p>

<p>Kivy是跨平台的，开发语言是Python，但是能为不同的平台构建应用程序，与所有的上面的相比，它的优势是不但可生成Desktop应用，也可以为移动平台（安卓和水果）和树莓派构建应用程序。另外一个巨大的优势是它是基于OpenGL实现的，因此可以用上GPU来加速渲染，渲染性能较高，而且会在图形方面和游戏方面有天生的优势，它本身是基于OpenGL的，所以可以直接用OpenGL API进行图形和游戏开发，不用再额外引入依赖。</p>

<ul>
<li><a href="https://kivy.org/#home">官方文档</a></li>
<li><a href="https://www.geeksforgeeks.org/kivy-tutorial/">一个不错的教程</a></li>
</ul>


<p>从文档来看，这东西较适合游戏开发，而且它又是基于OpenGL的，可以用GPU加速，擅长于此。不过不重要，它是目前看起来最好的，先用它吧。还有一个非常大的优点就是，它做的很彻底，代码逻辑是用Python的，但是布局是用一套自定义的规则语言Kv来实现的，这就实现了代码逻辑与布局的分享，与大多数GUI框架的思想是一致的。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://zhuanlan.zhihu.com/p/347290491">Python的GUI图形界面工具大全</a></li>
<li><a href="https://realpython.com/tutorials/gui/">Python GUI Programming Tutorials</a></li>
<li><a href="https://baijiahao.baidu.com/s?id=1751367833923725788">推荐10款Python图形界面（GUI）框架</a></li>
<li><a href="https://wiki.python.org/moin/GuiProgramming">GUI Programming in Python</a></li>
<li><a href="https://pythongui.org/">Python GUI</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Runtime Environment]]></title>
    <link href="http://toughcoder.net/blog/2023/07/14/python-runtime-environment/"/>
    <updated>2023-07-14T22:46:17+08:00</updated>
    <id>http://toughcoder.net/blog/2023/07/14/python-runtime-environment</id>
    <content type="html"><![CDATA[<p><a href="https://www.python.org/">Python</a>是非常流行的通用编程语言，因其简洁和易读而广受喜爱，近年来由于深度学习的崛起更是让Python登顶为<a href="https://www.tiobe.com/tiobe-index/">最受欢迎的编程语言</a>。虽然已使用Python写了一些程序，但总是缺少深度的理解，加之前段时间因为升级pip导致一些依赖的module无法正常工作，于是要停下来把Python到底是如何工作的了解清楚。</p>

<p><a href="http://toughcoder.net/blog/2023/07/14/python-runtime-environment/"><img src="https://ts1.cn.mm.bing.net/th/id/R-C.c953feda2b0afda299ccfbe1a9743f00?rik=zz1NU7tbEq3gJQ&riu=http%3a%2f%2fwww.pc9.com%2fuploads%2f20190916%2f805079fa18cbca1ac696dfc8e5efdece.jpg&ehk=tFZHTezwkONle9xLOfoCkQHlSjQvyAla02%2fvtEsdl9I%3d&risl=&pid=ImgRaw&r=0" title="auto auto" ></a></p>

<!-- more -->


<p><strong>注意</strong>：这不是一个基础的教程，也不是一个系统的教程，假定读者有一定的编程开发经验，并且已有Python基础。</p>

<h2><a href="https://docs.python.org/3/tutorial/interpreter.html">Python解释器</a></h2>

<p>这是Python语言中最重要的东西，它负责运行你写的代码，把我们的代码作为输入塞给Python解释器，就能得到我们期望的输出。</p>

<p><strong>注意</strong>：本文中不纠结编译与解释的区别，以及说Python到底会不会把源代码进行编译。</p>

<p>现代比较流行的操作系统如Ubuntu LTS或者Mac OX都会预装Python，原因在于一方面Python太过流行，另外就是操作系统本身也会用到Python。</p>

<p><img src="https://techvidvan.com/tutorials/wp-content/uploads/sites/2/2020/03/how-python-interpreter-works.jpg" alt="" /></p>

<p>但需要特别注意的是，大Python有两个版本Python2和Python3，且并不兼容，稍学习过Python的都应该知道，现在Python2已经停止维护了，Python社区现只管Python3了，并且以后再说Python其实都是指Python3。本文当中除非特别说明，否则也都是Python3。</p>

<p>虽然说Python2已经停止维护了，但是由于历史的原因很多三方的库未能及时升级到Python3，所以现在的操作系统中仍会把两个版本的Python都集成，Python2的版本一般会是2.7.x，而Python3的版本一般会是3.7.x或者3.8.x。反正不会是最新的3.11或者3.14。</p>

<p>操作系统默认的命令python一般都仍指向Python2，而命令python3才是指向Python3。所以在使用解释器或者指定解释器的时候要注意。</p>

<p><strong>注意</strong>：操作系统一般把程序安装某个位置，然后在系统路径中只添加指向其安装位置的<a href="https://www.geeksforgeeks.org/soft-hard-links-unixlinux/">二进制文件的链接</a>，对于有兼容性不同版本的命令更是如此，比如/usr/bin/python，这是默认的命令，它是一个指向Python 2.7.x安装位置的一个链接。同理/usr/bin/python3也是一个链接。</p>

<p>可以用which命令来查看这些命令的最终指向：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>➜  ~ which python3
</span><span class='line'>/Library/Frameworks/Python.framework/Versions/3.7/bin/python3
</span></code></pre></td></tr></table></div></figure>


<p>需要特别注意的是，操作系统自带的Python一般不是最新的，所以有时候可能有会升级的需要，一般用软件包管理工具如<a href="https://linux.die.net/man/8/apt-get">apt-get</a> 或者<a href="https://brew.sh/">brew</a>可以安装新版本的Python3，如3.11，但一般建议把它安装在一个不同的位置，也就是说不要直接覆盖操作系统预装的版本。并且，不要把默认链接python3指向新版本。这是因为，操作系统之所以选择特定的版本，是为了<strong>兼容性和稳定性</strong>，这个版本能保证操作系统的Python代码和库都能正常运行。如果我们用新版本覆盖了原装的，或者把默认的链接替换掉，有可能会对操作系统造成伤害，轻则发生奇怪的事情，重则可能要重装系统。</p>

<h3>交互式环境</h3>

<p><img src="https://www.circuitbasics.com/wp-content/uploads/2015/12/Python-and-python3-REPL.png" alt="" /></p>

<p>直接启动解释器会进入一个叫做<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">REPL（Read Evaluate Print Loop）</a>的环境，这是脚本语言都会有的一个环境，它的是意思读取指令（也即我们输入的Python语句），执行，打印输出，然后循环上述步骤。直到给一个退出命令(exit())才会终止。</p>

<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy82eFcyRDk0cUJqSEw1Q01lOUVHWEFKTmJmbXJIanNwbkVtOGlheDlKTE1kWU0zSUZHYmZzRHdpY25ZV1h1ZU9jamNIRjBpY1BpYmtFbWljZUo4QTRUOG5KNWljZy82NDA?x-oss-process=image/format,png" alt="" /></p>

<p>另外一个更为高级一些的<a href="https://ipython.org/">交互式Python运行环境</a>就是非常著名的<a href="https://jupyter.org/">Jupyter</a>。</p>

<h3>命令行</h3>

<p>在Python世界里<a href="https://docs.python.org/3/tutorial/modules.html">模块Modules</a>是一个代码管理的基本单元，内置的库和三方的库都包含一个或者多个Module。Python有一个特殊功能，就是可以用命令行直接执行一个Module:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>python3 -m http.server 8000
</span></code></pre></td></tr></table></div></figure>


<p>这就启动了一个非常简单的HTTP server。它的作用就是把一个叫做http.server的Module直接运行起来。</p>

<h3>源代码式</h3>

<p>更多的时候我们会把Python代码写入一个文件，然后再塞给解释器去执行。写一个简单的hello.py：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python3'><span class='line'><span class="c">#!/usr/bin/env python3</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="s">&#39;Hello, world&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后，运行它：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>python3 hello.py
</span><span class='line'>Hello, world
</span></code></pre></td></tr></table></div></figure>


<p>也可以直接执行hello.py</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./hello.py
</span><span class='line'>Hello, world
</span></code></pre></td></tr></table></div></figure>


<p>这里的区别就在于，前面加了解释器的，就会用命令行中的解释器去运行。而直接执行脚本文件，则会用第一行的叫做<a href="https://linuxhandbook.com/shebang/">shebang的东西</a>来找解释器，这里就是<strong>/usr/bin/env python3</strong>，这个意思是说用操作系统中的路径中的python3来作为解释器（作为执行这个脚本的命令）。</p>

<p>那么，利用shebang就可以指定特定的Python版本来运行脚本了。比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python3'><span class='line'><span class="c">#!/usr/local/opt/python@3.11</span>
</span></code></pre></td></tr></table></div></figure>


<h3>环境变量</h3>

<p>解释器在运行代码的时候用到一些库，核心module以及三方module，那么解释器是如何找到这些东西的呢？</p>

<ul>
<li>PYTHONHOME 这是解释器的安装目录，通常用作module搜索的前缀来使用</li>
<li>PYTHONPATH 这是模块module的搜索目录，默认的是sys.path，这个是由Python预定义好了的，通过PYTHONPATH指定的搜索目录会加在sys.path的前面。所以如果想指定额外的Module目录或者想替换掉默认的module时就可以使用此变量。</li>
</ul>


<p>除了一些解释器需要的底层的动态库之外，最重要的就是模块module目录了，默认的module搜索目录由sys.path定义，可以通过两种方式查看它有哪些路径：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>➜  ~ python3 -m site
</span><span class='line'>sys.path <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>    <span class="s1">&#39;/Users/alexhilton&#39;</span>,
</span><span class='line'>    <span class="s1">&#39;/Library/Frameworks/Python.framework/Versions/3.7/lib/python37.zip&#39;</span>,
</span><span class='line'>    <span class="s1">&#39;/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7&#39;</span>,
</span><span class='line'>    <span class="s1">&#39;/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/lib-dynload&#39;</span>,
</span><span class='line'>    <span class="s1">&#39;/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages&#39;</span>,
</span><span class='line'><span class="o">]</span>
</span><span class='line'>USER_BASE: <span class="s1">&#39;/Users/alexhilton/Library/Python/3.7&#39;</span> <span class="o">(</span>doesn<span class="s1">&#39;t exist)</span>
</span><span class='line'><span class="s1">USER_SITE: &#39;</span>/Users/alexhilton/Library/Python/3.7/lib/python/site-packages<span class="s1">&#39; (doesn&#39;</span>t exist<span class="o">)</span>
</span><span class='line'>ENABLE_USER_SITE: True
</span></code></pre></td></tr></table></div></figure>


<p>或者通过代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python3'><span class='line'><span class="err">➜</span>  <span class="o">~</span> <span class="n">python3</span>
</span><span class='line'><span class="n">Python</span> <span class="mf">3.7</span><span class="o">.</span><span class="mi">3</span> <span class="p">(</span><span class="n">v3</span><span class="o">.</span><span class="mf">7.3</span><span class="p">:</span><span class="n">ef4ec6ed12</span><span class="p">,</span> <span class="n">Mar</span> <span class="mi">25</span> <span class="mi">2019</span><span class="p">,</span> <span class="mi">16</span><span class="p">:</span><span class="mi">52</span><span class="p">:</span><span class="mi">21</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="n">Clang</span> <span class="mf">6.0</span> <span class="p">(</span><span class="n">clang</span><span class="o">-</span><span class="mf">600.0</span><span class="o">.</span><span class="mi">57</span><span class="p">)]</span> <span class="n">on</span> <span class="n">darwin</span>
</span><span class='line'><span class="n">Type</span> <span class="s">&quot;help&quot;</span><span class="p">,</span> <span class="s">&quot;copyright&quot;</span><span class="p">,</span> <span class="s">&quot;credits&quot;</span> <span class="ow">or</span> <span class="s">&quot;license&quot;</span> <span class="k">for</span> <span class="n">more</span> <span class="n">information</span><span class="o">.</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">print</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="s">&#39;/Library/Frameworks/Python.framework/Versions/3.7/lib/python37.zip&#39;</span><span class="p">,</span> <span class="s">&#39;/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7&#39;</span><span class="p">,</span> <span class="s">&#39;/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/lib-dynload&#39;</span><span class="p">,</span> <span class="s">&#39;/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">exit</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，它会包含当前路径，以及预定义的一些目录。重点看site-packages这个目录，这是所有第三方module安装的目录，Python的包管理工具pip也都是安装在些位置的。所以说，用pip安装完成后，不用特殊指定目录就能找到module。</p>

<h3>解决多版本的site-pakcages冲突</h3>

<p>每一个解释器都能找到它的site-packages，换句话说如果装了不同版本的Python，就会有多个site-packages路径。就比如，在我的电脑上面有三个版本的Python：</p>

<ul>
<li><p>Python2
系统中的默认python指向Python2
/usr/bin/python  2.7.16
site packages: &lsquo;/Library/Python/2.7/site-packages&rsquo;,</p></li>
<li><p>Python3.7
系统带有Python3，由命令/usr/local/bin/python3指向 /Library/Frameworks/Python.framework/Versions/3.7/bin/python3
site packages &lsquo;/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages&rsquo;,</p></li>
<li><p>Python3.11
由brew升级安装得到的。被安装在
二进制是在：/usr/local/opt/<a href="&#109;&#97;&#x69;&#108;&#x74;&#111;&#x3a;&#112;&#121;&#x74;&#104;&#111;&#x6e;&#64;&#51;&#46;&#x31;&#x31;">&#x70;&#121;&#116;&#104;&#111;&#x6e;&#x40;&#x33;&#46;&#49;&#x31;</a>
site-packages  /usr/local/lib/python3.11/site-packages</p></li>
</ul>


<p>那么，假如想要把三个site-packages里面的module都得到使用的话，就可以用<strong>PYTHONPATH</strong>来把三个路径都加进来。</p>

<h2><a href="https://www.jetbrains.com/pycharm/">IDE(PyCharm)</a></h2>

<p>对于集成开发环境（IDE）来说，也是可以配置的，几乎都可以配置从解释器，到环境变量都是<a href="https://intellipaat.com/blog/tutorial/pycharm-tutorial/how-to-configure-pycharm-interpreter/?US">可以配置的</a>。</p>

<p><img src="https://intellipaat.com/blog/wp-content/uploads/2020/01/i5-768x495.png" alt="" /></p>

<h2><a href="https://pypi.org/project/pip/">pip</a></h2>

<p>pip是Python的<a href="https://pypi.org/project/pip/">包管理工具</a>，可以用它来安装Python生态中的第三方module，可以理解为apt-get之于Ubutu，brew之于Mac，只不过pip能安装都是Python的module。基础的使用教程可以<a href="https://www.runoob.com/w3cnote/python-pip-install-usage.html">看这里</a>。</p>

<p><img src="https://tse1-mm.cn.bing.net/th/id/OIP-C.lnjh5MWQRVvUHrqx4TH1SwHaHa?pid=ImgDet&amp;rs=1" alt="" /></p>

<p><strong>注意</strong>：pip是与Python版本绑定的，比如pip对应于Python2，pip3对应Python3，因为它是包管理工具，它下载的module都会安装在对应的site-packages里面，而从前面的讨论知道每个解释器是有自己的site-packages，因此pip要对其解释器对应，这样才能安装到正确的位置上。</p>

<p>这样就会有问题，比如安装了多个版本，那么最后一个安装的Python版本的pip会把之前的都覆盖掉。比如我的电脑上最后用brew安装了Python 3.11，然后pip就被替换成了python3.11的，且pip与pip3是一样的了，它安装的module都是在Python 3.11的那个site-packages里面。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>➜  ~ pip3 --version
</span><span class='line'>pip 23.1.2 from /usr/local/lib/python3.11/site-packages/pip <span class="o">(</span>python 3.11<span class="o">)</span>
</span><span class='line'>➜  ~ pip --version
</span><span class='line'>pip 23.1.2 from /usr/local/lib/python3.11/site-packages/pip <span class="o">(</span>python 3.11<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意，因为/usr/local/bin/python3 仍链向了系统预装的python3.7，所以3.11并未有真正的安装成功，最后的系统链接并未有完全修改掉，比如python3仍指向预装的3.7。但比较神奇的是pip被替换为了3.11的。而且，它的site位置也与预装 的不一致了。因为我之前已经用pip3安装了很多三方Module，安装了Python3.11后突然报错找不到module了，原因就在于，现在pip认识的site 位置（3.11的），只有比较少的库，而原来的，仍在原来的位置。</p>

<h2><a href="https://docs.python.org/3/tutorial/venv.html">Virtual Environment</a></h2>

<p>由于可能有多个Python版本，会有不同的site-packages，可能会比较混乱，因此就有了虚拟运行环境这一个的技术，它可以为某一个项目，或者某一类项目设定一个虚拟运行环境，在这个环境里面可以安装任何module，它与宿主操作系统，和其他虚拟环境都是隔离的，互不影响。</p>

<p><img src="https://tse2-mm.cn.bing.net/th/id/OIP-C.xF4itTOl_0EWotnQsd7IJAHaEL?pid=ImgDet&amp;rs=1" alt="" /></p>

<p>虚拟环境还能解决<a href="https://www.techtarget.com/searchitoperations/definition/dependency-hell">依赖地狱问题</a>，比如A项目需要依赖一个1.0版本的module C，但B项目却需要依赖1.4版本的module C，这时如果都在操作系统本机环境去折腾就相当麻烦，也极容易打破项目的稳定性，甚至会影响操作系统的稳定性。这时虚拟环境就能很好的解决这个问题。</p>

<h3><a href="https://docs.python.org/zh-cn/3/library/venv.html">venv</a></h3>

<p>这是官方推荐的虚拟环境管理器，从Python 3.3版本就变成官方的标准module了，从Python3.6以后就是官方推荐的虚拟环境管理器。它的优点很明显，就是不需要额外安装了，且是官方支持的。缺点也很明显，就是不够强大，在软件国度里一般官方的东西都是方便易用，但不够强大。</p>

<h3><a href="https://pypi.org/project/virtualenv/">virtualenv</a></h3>

<p>这个是最为流行的虚拟环境管理器，它出现的非常早，功能也非常的强大，官方的venv其实相当于virutalenv的一个简化版本。甚至这个不单单能隔离Python，也能当成一个系统级别的虚拟环境来使用。</p>

<p>如果项目不是特别多特别复杂的话，其实用官方的venv就够了，毕竟不用折腾，直接拿过来就用了，并且大多数情况下也够用了。但如果项目很多，依赖特别复杂，那还是用virtualenv，毕竟它足够强大。</p>

<h3>How it works</h3>

<p>需要注意，所创建的虚拟环境里面用的Python版本，就是你运行venv时的Python版本，同时从上面的讨论来看，pip的版本也是与Python相关的，简单来理解，你命令行中默认的python3是3.7的，那么你创建的虚拟环境里面的Python就是3.7的，pip也是3.7的。venv的缺点是不够灵活，它只能使用操作系统中已有的Python版本，并且是在创建环境时就指定好了。</p>

<p>相比之下virtualenv就强大很多了，它能自由指定虚拟环境中的Python版本，甚至是操作系统中还未安装的版本，它的指定方式是在创建环境通过参数-p来指定，当然，如果你不指定，它也是用运行virtualenv所使用的那个Python版本。</p>

<p>此外，virtualenv还能继承操作系统中的site-packages，这就更为强大了，可以减少一些非常基础的module的重复安装。总之virtualenv相当强大，建议还是直接上virtualenv。</p>

<h3>实在不行就上<a href="https://www.docker.com/">Docker</a></h3>

<p>其实最为彻底，最为专业的应用级别虚拟化环境就是docker了，venv或者virtualenv仅是隔离Python的依赖环境，一般来说一个应用也会用到Python以外的东西或者影响到运行环境的，即使它是用Python编写的，所以如果 想彻底一些隔离，那就直接<a href="https://www.docker.com/get-started/">上Docker</a>。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://www.knowledgehut.com/blog/programming/run-python-scripts">How To Run Your Python Scripts</a></li>
<li><a href="https://indianpythonista.wordpress.com/2018/01/04/how-python-runs/">How Python runs?</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/341481537">python虚拟环境管理工具venv教程</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/338424040">Python虚拟环境Virtualenv详解</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/269805011">如何使用 virtualenv 创建 Python 虚拟环境？</a></li>
<li><a href="https://www.infoworld.com/article/3239675/virtualenv-and-venv-python-virtual-environments-explained.html">Virtualenv and venv: Python virtual environments explained</a></li>
<li><a href="https://www.cnblogs.com/doublexi/p/15783355.html">python多环境管理（venv与virtualenv）</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hashing Hash and HashMap]]></title>
    <link href="http://toughcoder.net/blog/2023/07/13/hashing-hash-and-hashmap/"/>
    <updated>2023-07-13T23:17:13+08:00</updated>
    <id>http://toughcoder.net/blog/2023/07/13/hashing-hash-and-hashmap</id>
    <content type="html"><![CDATA[<p>哈希表(HashMap)或者叫做散列表，是非常常用的一种二维的键值对式的数据结构，用以非常高效的解决查询问题的。
其核心是Hashing，这是把一个对象映射到一个索引的过程，实现hashing的函数通常称为hash函数或者叫散列函数，基于hashing实现的数据结构称作HashMap，或者叫做散列表。</p>

<p><a href="http://toughcoder.net/blog/2023/07/13/hashing-hash-and-hashmap/"><img src="https://techdose.co.in/wp-content/uploads/2021/02/City-of-TL-2-1024x576.png" title="auto auto" ></a></p>

<!-- more -->


<h2><a href="https://www.techtarget.com/searchdatamanagement/definition/hashing">Hashing</a></h2>

<p><a href="https://www.educative.io/answers/what-is-hashing">哈希或者散列</a>，是一个映射的过程，把一个对象，一些值，一些数据，一个文件等等通过某些方式映射成为一个键，用这个键可以<strong>非常快速</strong>的找到对应的值，也即原数据。通常键都是以索引形式存在的，因为用索引去查找数组的元素是绝对的O(1)时间的。但，这只是哈希过程的一个普通应用实例。</p>

<p><img src="https://tse1-mm.cn.bing.net/th/id/OIP-C.LEfONm4SRcDy3upe46WUMQHaE7?pid=ImgDet&amp;rs=1" alt="" /></p>

<p>在更广泛的加密领域，哈希过程并不是为了查找，而是为了生成一种代表着原数据的签名，也就是用一个更为小巧的方便的数据（通常是字符串）作为原数据的代表，看到了签名，就认为是看到的是其原数据，当然，其实这也是一种查找过程。</p>

<p>所以，不失一般性，满足这样的关系hash(data) = key，就是一个hashing。还要注意这个过程是不可逆的，也就是不存在反函数g(key) = data，没有办法能从key逆推出data。</p>

<h2><a href="https://en.wikipedia.org/wiki/Hash_function">Hash</a></h2>

<p>通常称作Hash，Hash function，Hash algorithm，哈希函数，哈希算法或者散列函数，散列算法。是能够实现hashing的一个函数或者算法。</p>

<p><img src="https://tse1-mm.cn.bing.net/th/id/OIP-C.RKHyLYrEjVpCdQfJFUQy2AHaDq?pid=ImgDet&amp;rs=1" alt="" /></p>

<p>哈希算法是把一个对象转化为int的过程，最为常用的一种哈希方法就是用多项式乘素法，比如一个长度为n的byte数组payload，它的hash = payload[0]*P<sup>n-1</sup> + payload[1]*P<sup>n-2</sup> + &hellip; + payload[n-1]。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Other possible primes are: 31, 131, 1313, 13131, 131313</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">P</span> <span class="o">=</span> <span class="mi">33</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">hash</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">hashBytes</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Polynomial multiplication of prime:</span>
</span><span class='line'><span class="cm"> * hash = c[0]*P^(n-1) + c[1]*P^(n-2) + ... + s[n-1]</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">hashBytes</span><span class="o">(</span><span class="kt">char</span><span class="o">[]</span> <span class="n">chars</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">hash</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">ch</span> <span class="o">:</span> <span class="n">chars</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">hash</span> <span class="o">=</span> <span class="n">P</span> <span class="o">*</span> <span class="n">hash</span> <span class="o">+</span> <span class="n">ch</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">hash</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>像Java中的String用的就是这个算法，Prime选择可能不一样，常用的有31, 131, 1313, 13131, 131313。其他对象都可以使用此方法，因为任何对象都可以序列化为byte。可以看到hash算法没有考虑溢出，这样计算P的乘方，很快就会溢出，但是没关系，溢出会变成负数，并不影响hashing。在有些算法中会对一个很大的素数如10<sup>9</sup>+7取余，以让哈希值变得的不那么大。</p>

<p>另外，可以看出哈希算法是O(L)的，这里L是输入数据的长度，比如对于字符串来说就是字符串的长度，假如是一个很长很长很长的字符串，那么计算其hash可能会很久很久，因此当使用HashMap时，可能就会变得很慢。</p>

<h3>参考资料</h3>

<ul>
<li><a href="https://www.zhihu.com/question/20820286">什么是哈希算法？</a></li>
<li><a href="https://wingsxdu.com/posts/algorithms/cryptographic-hashing-function/">加密哈希算法的实现原理</a></li>
<li><a href="https://segmentfault.com/a/1190000021199728">图解一致性哈希算法</a></li>
<li><a href="https://www.cnblogs.com/barrywxx/p/10739871.html">经典Hash函数的实现</a></li>
<li><a href="https://houbb.github.io/2018/05/30/hash-impl">Hash 算法实现</a></li>
<li><a href="https://developer.aliyun.com/article/1012265">Hash算法详细介绍与实现(一)</a></li>
<li><a href="https://developer.aliyun.com/article/1015830">Hash 算法详细介绍与实现 (二)</a></li>
</ul>


<h2><a href="https://docs.oracle.com/javase/8/docs/api/java/util/HashMap.html">HashMap</a>/<a href="https://docs.oracle.com/javase/8/docs/api/java/util/HashSet.html">HashSet</a></h2>

<p>基于Hashing和Hash构建出来的用于高效查询的数据结构。</p>

<p><img src="https://cdn.educba.com/academy/wp-content/uploads/2019/11/hashmap-in-java.png" alt="" /></p>

<h3>参考资料</h3>

<ul>
<li><a href="https://www.interviewcake.com/concept/java/hash-map">Data structure Hash Table</a></li>
<li><a href="https://www.geeksforgeeks.org/hashing-data-structure/">Hashing Data Structure</a></li>
<li><a href="https://tech.meituan.com/2016/06/24/java-hashmap.html">Java 8系列之重新认识HashMap</a></li>
<li><a href="https://pdai.tech/md/java/collection/java-map-HashMap&amp;HashSet.html">Map - HashSet &amp; HashMap 源码解析</a></li>
<li><a href="https://xie.infoq.cn/article/01538faefd4816128ede4212a">了解 HashMap 数据结构，超详细！</a></li>
</ul>


<h2><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html">ConcurrentHashMap</a></h2>

<p>线程安全的哈希表，采用分段式读加锁的方式来提高并发效率。</p>

<h3>参考资料</h3>

<ul>
<li><a href="https://www.cnblogs.com/zerotomax/p/8687425.html">ConcurrentHashMap源码分析(1.8)</a></li>
<li><a href="https://javaguide.cn/java/collection/concurrent-hash-map-source-code.html">ConcurrentHashMap 源码分析</a></li>
<li><a href="https://juejin.cn/post/7045955943296679949">ConcurrentHashMap源码分析</a></li>
</ul>


<h2><a href="https://en.wikipedia.org/wiki/Hash_collision">哈希碰撞Hash Collision</a></h2>

<p>哈希算法针对不同的原始数据却产生了相同的键，这就是哈希碰撞，因为最理想的hashing是一一对应，同样的原始数据（也就是相等的两个对象）肯定会产生相同的键，这时我们认为数据是同一份（相等的），但不同的数据（也即不相等）却产生了相同的键，就需要进行特殊处理，这会增加复杂度。哈希碰撞是不可避免的，同时也是一个衡量指标，即好的哈希函数会产生较少的合理碰撞（也就是因为数据边界和算法能力导致的碰撞）。</p>

<p><img src="https://ts1.cn.mm.bing.net/th/id/R-C.b7b51eed3f8027b11a32e091363c26f7?rik=scKHPWTjDjuM5Q&amp;riu=http%3a%2f%2fjustinparrtech.com%2fJustinParr-Tech%2fwp-content%2fuploads%2fHashing-Passwords_Hash-Collision.png&amp;ehk=Cs%2fOrEQS48SFm8KbaMfL0mOJxPm3AfjQlJvsMeddGP4%3d&amp;risl=&amp;pid=ImgRaw&amp;r=0" alt="" /></p>

<p>哈希碰撞会降低效率和安全性，比如说服务器通常会把客户端的request先暂存起来，去异步处理，当有了response后，再找到其对应的request然后给其回复response。这一过程，一般会有哈希表来存储request。假如哈希函数选择的不好，比如用request当中的某一个String字段来作为request的Key的话，就有可能被恶意攻击。哈希表常规的效率是很高的，一旦有哈希碰撞就会变成链表复杂度会上升为O(n<sup>2</sup>)。而String的hash是容易产生碰撞，假如恶意客户端发现了是用String作为Key的，那么就可以用能产生哈希碰撞的String来生成不同的request，这样就会让服务器短时间内负载特别高而且宕机。这是一种基于哈希碰撞的古老的攻击方式。</p>

<p>所以一般服务器使用的哈希函数都是要特别设计，不能采用太普通 的哈希算法。</p>

<h3>参考资料</h3>

<ul>
<li><a href="https://www.ruanyifeng.com/blog/2018/09/hash-collision-and-birthday-attack.html">哈希碰撞与生日攻击</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1776352">HASH碰撞问题一直没真正搞懂？这下不用慌了</a></li>
<li><a href="https://segmentfault.com/a/1190000041421664">哈希理解、哈希碰撞（hash冲突）及处理</a></li>
<li><a href="https://www.baeldung.com/cs/hash-collision-weak-vs-strong-resistance">Hash Collision: Weak and Strong Resistance</a></li>
</ul>


<h2><a href="https://en.wikipedia.org/wiki/Rolling_hash">滚动哈希Rolling Hash</a></h2>

<p>是一种哈希算法，使用一个固定长度的窗口（通常远小于数据本身的长度）在数据中滑动，能以更高的效率计算出数据的哈希值（键）。通常会被用于检查文章的相似性（是否存在抄袭），查找重复的子串等。因为滚动哈希是在一个长的序列中以一个固定的窗口在计算，所以特别擅长在接近无限的序列中探测重复子序列，比如网络流模式探测，视频重复帧识别等等。</p>

<p><img src="https://www.francofernando.com/assets/img/blog/algorithms/rolling-hash/rolling-hash-1.png" alt="" /></p>

<p>一个典型的Rolling hash实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="nf">rollingHash</span><span class="o">(</span><span class="n">String</span> <span class="n">payload</span><span class="o">,</span> <span class="kt">int</span> <span class="n">window</span><span class="o">,</span> <span class="kt">int</span> <span class="n">p</span><span class="o">,</span> <span class="kt">int</span> <span class="n">mod</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">payload</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
</span><span class='line'>        <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">hashValues</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">n</span> <span class="o">-</span> <span class="n">window</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">power</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">window</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">power</span> <span class="o">*=</span> <span class="n">p</span><span class="o">;</span>
</span><span class='line'>            <span class="n">power</span> <span class="o">%=</span> <span class="n">mod</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">hash</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">window</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">hash</span> <span class="o">=</span> <span class="o">(</span><span class="n">hash</span> <span class="o">*</span> <span class="n">p</span> <span class="o">+</span> <span class="n">payload</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">))</span> <span class="o">%</span> <span class="n">mod</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">hashValues</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">hash</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">-</span> <span class="n">window</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">hash</span> <span class="o">=</span> <span class="o">(</span><span class="n">hash</span> <span class="o">-</span> <span class="n">power</span> <span class="o">*</span> <span class="n">payload</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">))</span> <span class="o">%</span> <span class="n">mod</span><span class="o">;</span>
</span><span class='line'>            <span class="n">hash</span> <span class="o">=</span> <span class="o">(</span><span class="n">hash</span> <span class="o">*</span> <span class="n">p</span> <span class="o">+</span> <span class="n">payload</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="n">window</span> <span class="o">-</span> <span class="mi">1</span><span class="o">))</span> <span class="o">%</span> <span class="n">mod</span><span class="o">;</span>
</span><span class='line'>            <span class="n">hashValues</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">hash</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">hashValues</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;abcabcabc&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">window</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
</span><span class='line'>        <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">hashes</span> <span class="o">=</span> <span class="n">rollingHash</span><span class="o">(</span><span class="n">payload</span><span class="o">,</span> <span class="n">window</span><span class="o">,</span> <span class="mi">31</span><span class="o">,</span> <span class="n">MOD</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Rolling hash of &quot;</span> <span class="o">+</span> <span class="n">payload</span> <span class="o">+</span> <span class="s">&quot;, window size &quot;</span> <span class="o">+</span> <span class="n">window</span><span class="o">);</span>
</span><span class='line'>        <span class="n">IntStream</span><span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">hashes</span><span class="o">.</span><span class="na">size</span><span class="o">())</span>
</span><span class='line'>                <span class="o">.</span><span class="na">mapToObj</span><span class="o">(</span><span class="n">i</span> <span class="o">-&gt;</span> <span class="n">i</span> <span class="o">+</span> <span class="s">&quot;-&gt;&quot;</span> <span class="o">+</span> <span class="n">payload</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">i</span> <span class="o">+</span> <span class="n">window</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot; whose hash is &quot;</span> <span class="o">+</span> <span class="n">hashes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">))</span>
</span><span class='line'>                <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">// outputs</span>
</span><span class='line'>    <span class="c1">//Rolling hash of abcabcabc, window size 3</span>
</span><span class='line'>    <span class="c1">//0-&gt;abc whose hash is 96354</span>
</span><span class='line'>    <span class="c1">//1-&gt;bca whose hash is 97344</span>
</span><span class='line'>    <span class="c1">//2-&gt;cab whose hash is 98244</span>
</span><span class='line'>    <span class="c1">//3-&gt;abc whose hash is 96354</span>
</span><span class='line'>    <span class="c1">//4-&gt;bca whose hash is 97344</span>
</span><span class='line'>    <span class="c1">//5-&gt;cab whose hash is 98244</span>
</span><span class='line'>    <span class="c1">//6-&gt;abc whose hash is 96354</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看出，字符串是&#8221;abcabcabc&#8221;，有三个重复子串，Rolling hash能清查的找到，看Rolling hash输出中的0，3和6个元素（即子串&#8221;abc&#8221;），另外两个重复子串&#8221;bca&#8221;，是1和4，以及&#8221;cab&#8221;，是2和5。</p>

<p>Rolling hash是O(n)的，每个子串的比较都是O(1)，是相当高效的算法，是用于解决子串查找，重复子串查找的利器。</p>

<h3>参考资料</h3>

<ul>
<li><a href="https://www.geeksforgeeks.org/introduction-to-rolling-hash-data-structures-and-algorithms/">Introduction to Rolling Hash – Data Structures and Algorithms</a></li>
<li><a href="https://juejin.cn/post/7180323231918882874">(Rabin-Karp算法)匹配字符串（滚动哈希）</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/564537288">滚动哈希（Rolling Hash）</a></li>
<li><a href="https://www.cnblogs.com/sunchi/p/13632779.html">滚动hash实现字符串匹配</a></li>
</ul>


<h3>典型问题</h3>

<p>哈希表作为一种极基础的数据结构，提供以O(1)时间查询的能力，所以是刷题当中最为常用的辅助数据结构，没有之一。但其实HashMap/HashSet并不 真的O(1)，它只是摊还分析的时间复杂度能到O(1)，但真实的运行效率不可能达到O(1)，一旦发生哈希碰撞就会上升到O(n<sup>2</sup>)。并且还有扩容和自动装箱autobox等隐形开销，hash函数本身也有开销一般是O(L)的，所以HashMap真实的运行效率并不高。</p>

<p>但哈希表是一种hashing的实现，更为重要的是体现了hashing的映射思想。所以，在有些时候虽然用到了哈希表，但不一定要用HashMap。比如像英文字母到索引的映射，以及数据范围不大的自然数到索引的映射，这本质上也是hashing，但用数组就可以了，并且这是真正的O(1)。</p>

<p>哈希表一般当作基础设施来使用，所以没有专门的题，关于哈希的题目一般都是滚动哈希的，并且难度都不小。</p>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/repeated-dna-sequences/">187. 重复的DNA序列</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/repeated-dna-sequences/solution/187-zhong-fu-de-dnaxu-lie-by-alexhilton-5or9/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h2>参考资料</h2>

<ul>
<li><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1304227729113121">哈希算法</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TopK问题，堆和快速选择]]></title>
    <link href="http://toughcoder.net/blog/2023/07/11/topk/"/>
    <updated>2023-07-11T22:35:15+08:00</updated>
    <id>http://toughcoder.net/blog/2023/07/11/topk</id>
    <content type="html"><![CDATA[<p>TopK问题是很常见的一种问题，它的描述是从一个数据集或者序列中取出前k大（或者前k小），或者说找出第k大（第k小）。最为典型的就是 <a href="https://leetcode.cn/problems/kth-largest-element-in-an-array/solution/215-shu-zu-zhong-de-di-kge-zui-da-yuan-s-0lm6/">题215. 数组中的第K个最大元素</a>。解决TopK需要的是最基础的数据结构和算法，不但可以考查编码基本功，更能考查思维能力。</p>

<p><a href="http://toughcoder.net/blog/2023/07/11/topk/"><img src="https://tse1-mm.cn.bing.net/th/id/OIP-C.2aULRows_3CiTGr1IQamzgHaE-?pid=ImgDet&rs=1" title="auto auto" ></a></p>

<!-- more -->


<p>为了方便，后面就以找前k大为主要示例：输入长度为n的整数数组，找出前k大的数，1 &lt;= k &lt;= n。</p>

<h2>排序大法</h2>

<p>解决TopK问题，最简单也是最为暴力的做法就是排序，如果数据是有序的，无论你想找前k大或者第k大，都是非常容易的了。</p>

<p><img src="https://programs.wiki/images/wiki/01f03444af1b72507fd4d18f22f94d67.jpg" alt="" /></p>

<p>问题就转化为排序问题了，至于排序有O(n<sup>2</sup>)的冒泡，选择和插入， 以及高效一些的归并和快速排序。如果是特殊数据集还可以用计数排序（也叫桶排序）。关于排序算法的教程太多了，就不重复了，可以参考Yu神的 <a href="https://leetcode.cn/circle/discuss/eBo9UB/">十大排序从入门到入赘</a>。</p>

<p>用排序来解决TopK问题可行但并不高效，比如k特别小时，n特别大时效率就会特别差。甚至，对于序列（也就是输入数据接近无限）时，可能没有办法先排序再去选择前k大了。</p>

<h2>堆<a href="https://en.wikipedia.org/wiki/Heap_(data_structure)">Heap</a></h2>

<p>堆是一个逻辑上的二叉树式的数据结构，但实现上通常用数组来实现，它保证根节点是所有元素中最大的称作最大堆或者大根堆，或者最小的称作最小堆或者小根堆。有些地方也称之为优先队列，比如在大Java中的就叫做<a href="https://docs.oracle.com/javase/8/docs/api/java/util/PriorityQueue.html">PriorityQueue</a>。</p>

<p><img src="https://www.cdn.geeksforgeeks.org/wp-content/uploads/MinHeapAndMaxHeap.png" alt="" /></p>

<p>以最大堆为例，它保证根节点永远不小于两个子节点，假如堆的大小（也即元素总数）是k，那么根节点就是这k个元素中的最大值，维护一次堆（Heapify）的代价是log(k)，只需要不断的比较根节点和子节点即可，所以复杂度是二叉树的高度即log(k)。对于TopK问题，可以创建一个大小为k的最小堆，把n个数都填到堆里，当堆未满时，直接塞，如果满时了，堆顶是最小值，如果新元素小于最小值可直接跳过，它不可能成为TopK；否则先移除堆顶然后再塞，最后堆里面剩下的就是前k大元素，这样复杂度会降到nlog(k)，当n特别大，k远小于n时，或者说对n接近无穷的序列时，用最小堆的效率会明显的高于排序大法。</p>

<p><img src="https://programs.wiki/images/wiki/219e46ebbe75d147a8f2d508a9b1890a.jpg" alt="" /></p>

<p>堆（优先队列）是一种非常常见且基础的数据结构，标准库中都有，可以拿来就用，但是学习手撸一个堆更能加深理解。</p>

<h3>堆的实现</h3>

<p>来手撸一个最大堆。最常见的就是二叉堆，也就是说逻辑上是一个二叉树，但实际的存储一般是用数组，索引0就是根节点root（又叫堆顶），索引i它的左子节点是在索引2*i+1，右子节点是在2*i+2。</p>

<p>需要不断的<strong>维护堆的特性</strong>，也即是它的<strong>根节点总是大于两个子节点</strong>，要时刻保持这种性质。主要难点在于向堆中添加一个元素时，先把此元素放在数组最后，也即树中最右下的叶子节点，然后不断的向上更新：如果此元素大于其父节点，就互换直到它小于其父节点。</p>

<p>另外需要维护的地方就是移除堆顶，堆顶是堆中的最大元素，它大于其两个子节点。大哥没了，就要重新选大哥：因为逻辑上是一个二叉树，所以只需要解决一个最小的树即可，其余可以递归处理。从父节点，左子节点和右子节点中取最大的，与父节点互换，然后再递归处理刚刚转换过的子树，即可。</p>

<p>废话这么多，其实代码比较精简，也较容易理解，还是直接上代码吧：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * A bound Max Heap of int type elements.</span>
</span><span class='line'><span class="cm"> * This is a binary heap with array as the underlying container.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MaxHeap</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">INF</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">capacity</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * Put the elements into an array, but the logical relationship is a binary tree.</span>
</span><span class='line'><span class="cm">     * 0 is the root;</span>
</span><span class='line'><span class="cm">     * i&#39;s left child is 2*i + 1, right child is 2*i + 2;</span>
</span><span class='line'><span class="cm">     * i&#39;s parent is (i-1) / 2.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">elements</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">MaxHeap</span><span class="o">(</span><span class="kt">int</span> <span class="n">capacity</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">capacity</span> <span class="o">=</span> <span class="n">capacity</span><span class="o">;</span>
</span><span class='line'>        <span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="n">elements</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">capacity</span><span class="o">];</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Nothing happens if heap is full.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">offer</span><span class="o">(</span><span class="kt">int</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">isFull</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Overflowed.</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">         * Put the new element at the end of the heap.</span>
</span><span class='line'><span class="cm">         * Push it up until it is less than its parent.</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="n">size</span><span class="o">++;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">size</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="n">elements</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">e</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">elements</span><span class="o">[</span><span class="n">parent</span><span class="o">(</span><span class="n">i</span><span class="o">)]</span> <span class="o">&lt;</span> <span class="n">elements</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">swap</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">parent</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
</span><span class='line'>            <span class="n">i</span> <span class="o">=</span> <span class="n">parent</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">heapSize</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">peek</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">INF</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">elements</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">clear</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">poll</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">INF</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">size</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">size</span><span class="o">--;</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">elements</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">         * Root is the max value in the heap, will remove and return it to caller.</span>
</span><span class='line'><span class="cm">         * Push down the tree and select the max of left and right as the new parent.</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">root</span> <span class="o">=</span> <span class="n">elements</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>        <span class="n">elements</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">elements</span><span class="o">[</span><span class="n">size</span> <span class="o">-</span> <span class="mi">1</span><span class="o">];</span>
</span><span class='line'>        <span class="n">size</span><span class="o">--;</span>
</span><span class='line'>        <span class="n">heapify</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">root</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isEmpty</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">size</span> <span class="o">==</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isFull</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">size</span> <span class="o">==</span> <span class="n">capacity</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * Heapify the sub-tree rooted with index i.</span>
</span><span class='line'><span class="cm">     * Find the largest value of parent, left and right;</span>
</span><span class='line'><span class="cm">     * If the parent is the largest, we are done.</span>
</span><span class='line'><span class="cm">     * Swap parent with the largest node, now parent is the largest;</span>
</span><span class='line'><span class="cm">     * Keep heapifying the swapped sub-tree.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">heapify</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="n">left</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="n">right</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">largest</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">l</span> <span class="o">&lt;</span> <span class="n">size</span> <span class="o">&amp;&amp;</span> <span class="n">elements</span><span class="o">[</span><span class="n">l</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">elements</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">largest</span> <span class="o">=</span> <span class="n">l</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">r</span> <span class="o">&lt;</span> <span class="n">size</span> <span class="o">&amp;&amp;</span> <span class="n">elements</span><span class="o">[</span><span class="n">r</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">elements</span><span class="o">[</span><span class="n">largest</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">largest</span> <span class="o">=</span> <span class="n">r</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">largest</span> <span class="o">!=</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">swap</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">largest</span><span class="o">);</span>
</span><span class='line'>            <span class="n">heapify</span><span class="o">(</span><span class="n">largest</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">swap</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">j</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">j</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="n">elements</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>        <span class="n">elements</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">elements</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
</span><span class='line'>        <span class="n">elements</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">t</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="nf">parent</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="nf">left</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="nf">right</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>完整<a href="https://github.com/alexhilton/EffectiveAlgorithm/blob/main/datastructure/src/main/java/MaxHeap.java">代码在这里</a>。</p>

<p>这就是最基础的一种二叉堆(Binary Heap)的实现。注意基础堆是用于快速找最大值或者最小值，是O(1)的，其他的操作如查询非最大值或者最小值，或者移除某个特定的元素，效率差会变成O(n)的。</p>

<p>为此，还有其他的实现方式如<a href="https://brilliant.org/wiki/binomial-heap/">Binomial Heap</a>和<a href="https://brilliant.org/wiki/fibonacci-heap/">Fibonacci Heap</a>，这两种堆除了保证堆的基本特质外，还能把其他的操作也降低到log(n)的复杂度。</p>

<h3>堆的应用</h3>

<p>一是用来排序，通常称作堆排序，把n个元素都入堆，然后依次把堆顶取出来，这样就能得到一个有序数组了。复杂度是nlog(n)。</p>

<p>另外，就是用于解决topK问题了。更为实际一点的应用就是Job Scheduling，把一坨Job加入堆中，每次取堆顶（优先级最高的Job）来执行。</p>

<h2><a href="https://en.wikipedia.org/wiki/Quickselect">Quick select</a></h2>

<p>快速选择是快速排序衍生出来的一个算法，专门适用以线性复杂度O(n)来解决TopK问题。为此我们先复习快速排序算法，然后再解释快速选择原理。</p>

<p><img src="https://image3.slideserve.com/6106968/quick-select-visualization-l.jpg" alt="" /></p>

<h3>快速排序</h3>

<p>这是一个非常经典又基础的算法，是算法入门的必讲算法。快速排序的<strong>核心思想是分治</strong>(Divide and Conquer)，核心技巧是<strong>分区(partition)</strong>，选取一个<strong>轴元素作为分界点(pivot)</strong>，把<strong>小于轴的元素</strong>都放在它<strong>左边</strong>，把<strong>大于它的元素</strong>都放在其<strong>右边</strong>，然后再用同样的方法处理左边和右边。伪码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nf">quickSort</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">start</span><span class="o">,</span> <span class="kt">int</span> <span class="n">end</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">start</span> <span class="o">==</span> <span class="n">end</span><span class="o">)</span> <span class="k">return</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">p</span> <span class="o">=</span> <span class="n">partition</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="n">start</span><span class="o">,</span> <span class="n">end</span><span class="o">);</span>
</span><span class='line'>    <span class="n">quickSort</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="n">start</span><span class="o">,</span> <span class="n">p</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>    <span class="n">quickSort</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="n">p</span><span class="o">,</span> <span class="n">end</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>分区</h3>

<p>分区partition是快排的核心技巧，当然也是快速选择的核心，它是先选出一个轴元素pivot，然后以它为界把数组分成两段。比如说数组arr = [5,3,7,1,8,2,9,4]。如果选择索引位置0，元素5作为pivot，那么partition之后的数组会变为arr=[3,1,2,4,5,7,8,9]，partition的返回值，是pivot元素在分区之后的新索引p，即此例中的索引4。可以看出经过partition后，数组左区[0,p-1]都是小于pivot的，而右区[p,n-1]则是大于等于pivot的。这就是分区的作用。</p>

<p>分区算法轴元素的选择至关重要，为了达到最好的效果，在区间内随机选择一个索引位置的元素作为pivot是最理想的，摊还分析后可以达到O(n)。快排的复杂则是nlog(n)。</p>

<p>对于数组arr，做partition的具体做法是：</p>

<ol>
<li>随机选择一个元素为轴元素，记其索引为pivot</li>
<li>先把pivot与最后一个元素交换swap(arr, pivot, end)，注意交换后轴元素在end，即arr[end]</li>
<li>用双指针，左指针left总是指针向小于轴元素arr[end]的最后一个元素，也即分区好了时的左边界的最后一个位置。</li>
<li>右指针right则从start开始，遍历到end - 1，如果arr[right]小于轴，即arr[right]&lt;arr[end]，则交换并更新左指针</li>
<li>最后left索引即是轴应该在的索引，与轴交换swap(arr, left, end)</li>
<li>返回left。这是分区后的轴所在的位置。</li>
</ol>


<p>代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">int</span> <span class="nf">partition</span><span class="o">(</span><span class="n">Random</span> <span class="n">random</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">start</span><span class="o">,</span> <span class="kt">int</span> <span class="n">end</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">pivot</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="n">end</span> <span class="o">-</span> <span class="n">start</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">start</span><span class="o">;</span>
</span><span class='line'>        <span class="n">swap</span><span class="o">(</span><span class="n">nums</span><span class="o">,</span> <span class="n">pivot</span><span class="o">,</span> <span class="n">end</span><span class="o">);</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">start</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">start</span><span class="o">;</span> <span class="n">right</span> <span class="o">&lt;</span> <span class="n">end</span><span class="o">;</span> <span class="n">right</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">right</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">[</span><span class="n">end</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">left</span><span class="o">++;</span>
</span><span class='line'>                <span class="n">swap</span><span class="o">(</span><span class="n">nums</span><span class="o">,</span> <span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">left</span><span class="o">++;</span>
</span><span class='line'>        <span class="n">swap</span><span class="o">(</span><span class="n">nums</span><span class="o">,</span> <span class="n">left</span><span class="o">,</span> <span class="n">end</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">left</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>记住，<strong>分区返回一个轴的索引，轴左边的元素都小于轴，轴右边的元素都大于轴</strong>。这是快速排序和快速选择的核心奥妙精华所在。</p>

<h3>快速选择</h3>

<p>基于分区就能开发出快速选择算法。对于长度为n的数组arr，进行partition后，得到一个轴的位置pivot，[0,pivot-1]都小于arr[pivot]，而[pivot+1,n-1]都大于arr[pivot]。那么，对于想找出前k大的TopK问题而方，如果pivot=n-k，那么[pivot, n - 1]分区后的右边部分不就刚好前k大元素么？</p>

<p>有同学举手问了，咋可能那么巧嘛。这位同学请先坐下，不巧也没关系，如果pivot大于n-k，说明比pivot大的数不够k个，就得往左找，所以在左部分递归处理就可以了；同理，如果pivot小于n-k，说明右部分太多了，往右找即可。代码大概这样子的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">int</span> <span class="nf">findKthLargest</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Random</span> <span class="n">random</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Random</span><span class="o">();</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">target</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="n">k</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">end</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">partition</span><span class="o">(</span><span class="n">random</span><span class="o">,</span> <span class="n">nums</span><span class="o">,</span> <span class="n">start</span><span class="o">,</span> <span class="n">end</span><span class="o">);</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">index</span> <span class="o">!=</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">index</span> <span class="o">&gt;</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">end</span> <span class="o">=</span> <span class="n">index</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">start</span> <span class="o">=</span> <span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">index</span> <span class="o">=</span> <span class="n">partition</span><span class="o">(</span><span class="n">random</span><span class="o">,</span> <span class="n">nums</span><span class="o">,</span> <span class="n">start</span><span class="o">,</span> <span class="n">end</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">nums</span><span class="o">[</span><span class="n">index</span><span class="o">];</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是迭代式的，看起来可能不那么直观，我们用递归来写，就相当直观了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="nf">quickSelect</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="n">start</span><span class="o">,</span> <span class="n">end</span><span class="o">,</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">start</span> <span class="o">==</span> <span class="n">end</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="k">return</span> <span class="n">start</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">p</span> <span class="o">=</span> <span class="n">partition</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="n">start</span><span class="o">,</span> <span class="n">end</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">p</span> <span class="o">==</span> <span class="n">n</span> <span class="o">-</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">p</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">p</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">-</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">quickSelect</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="n">p</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">end</span><span class="o">,</span> <span class="n">k</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">quickSelect</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="n">start</span><span class="o">,</span> <span class="n">p</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">k</span> <span class="o">-</span> <span class="n">p</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>总结</h2>

<p>TopK问题是非常常见且基础的一个问题，通常是融合在了其他问题里面，不会以比较直观的方式求TopK。如果是问题中的一个子问题，那么通常用堆来当作辅助数据结构是最优的做法。如果TopK问题是最问题的最后一步的话，那么排序或者用快速选择也是可以的。</p>

<h2>典型问题</h2>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/kth-largest-element-in-an-array/">215. 数组中的第K个最大元素</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/kth-largest-element-in-an-array/solution/215-shu-zu-zhong-de-di-kge-zui-da-yuan-s-0lm6/">题解</a> </td>
<td style="text-align:left;"> 典型TopK问题 </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/merge-k-sorted-lists/">23. 合并 K 个升序链表</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/merge-k-sorted-lists/solution/by-alexhilton-zctb/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/sliding-window-maximum/">239. 滑动窗口最大值</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/sliding-window-maximum/solution/239-hua-dong-chuang-kou-zui-da-zhi-xian-fwypk/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/top-k-frequent-elements/">347. 前 K 个高频元素</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/top-k-frequent-elements/solution/by-alexhilton-xhxc/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/k-closest-points-to-origin/">973. 最接近原点的 K 个点</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/k-closest-points-to-origin/solution/xi-you-yuan-su-973-zui-jie-jin-yuan-dian-xtze/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/wiggle-sort-ii/">324. 摆动排序 II</a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h2>参考资料</h2>

<ul>
<li><a href="https://www.geeksforgeeks.org/heap-data-structure/">Heap Data Structure</a></li>
<li><a href="https://www.programiz.com/dsa/heap-data-structure">Heap Data Structure</a></li>
<li><a href="https://blog.csdn.net/guoweimelon/article/details/50904346">堆树（最大堆、最小堆）详解</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/362129090">数据结构之最大堆</a></li>
<li><a href="https://www.geeksforgeeks.org/quickselect-algorithm/">Quickselect Algorithm</a></li>
<li><a href="https://aticleworld.com/quickselect-algorithm/">Quickselect Algorithm: Quick Select Algorithm With Example Code</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/64627590">Top K 问题的最优解 - 快速选择算法（Quickselect）</a></li>
<li><a href="https://nicodechal.github.io/2020/01/12/quick-sort-and-quick-selection/">快速排序 ( QuickSort ) 和快速选择 ( QuickSelection )</a></li>
<li><a href="https://juejin.cn/post/6844903774004183047">算法必学：经典的 Top K 问题</a></li>
<li><a href="https://segmentfault.com/a/1190000041127350">面试被问TopK问题，可以这样优雅的解答</a></li>
<li><a href="https://blog.csdn.net/z50L2O08e2u4afToR9A/article/details/82837278">拜托，面试别再问我TopK了！！！</a></li>
<li><a href="https://leetcode.cn/circle/discuss/eBo9UB/">十大排序从入门到入赘</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DFS in Depth]]></title>
    <link href="http://toughcoder.net/blog/2023/06/15/dfs-in-depth/"/>
    <updated>2023-06-15T21:56:31+08:00</updated>
    <id>http://toughcoder.net/blog/2023/06/15/dfs-in-depth</id>
    <content type="html"><![CDATA[<p><a href="http://toughcoder.net/blog/2022/09/02/bfs-and-dfs-made-easy/">前面一篇文章</a>讲解了<a href="https://en.wikipedia.org/wiki/Depth-first_search">DFS</a>的基本概念和基础的使用方法，但不够深入，DFS的应用是很广泛的，不论是枚举状态或者路径，还是递归，其本质上都是DFS。今天就来好好的理解一下DFS的内在本质，并学会在树，在图以及在回溯中的应用。</p>

<p><a href="http://toughcoder.net/blog/2023/06/15/dfs-in-depth/"><img src="https://tse3-mm.cn.bing.net/th/id/OIP-C.kOp9h97z5AGxyxs-q2u_8AHaHP?pid=ImgDet&rs=1" title="auto auto" ></a></p>

<!-- more -->


<h2>回顾DFS</h2>

<p>深度优先搜索，是指沿着某一路径方向，一直遍历到叶子节点为止，然后再回到初始顶点，换个方向继续。</p>

<p><img src="https://image4.slideserve.com/8160117/dfs-pseudocode-l.jpg" alt="" /></p>

<p>这里就不过多的重复了，因为在<a href="http://toughcoder.net/blog/2022/09/02/bfs-and-dfs-made-easy/">前一篇文章</a>里面已经讲过了，看那篇文章就好。</p>

<p>注意<strong>理解DFS的本质</strong>，DFS的本质就是<strong>递归</strong>，因此用递归式的DFS效率是最高的，如果是迭代式则要借助栈，伪码参见<a href="http://toughcoder.net/blog/2022/09/02/bfs-and-dfs-made-easy/">前一篇文章</a>。</p>

<h2>DFS树的遍历</h2>

<p>树的常规遍历，涉及路径的问题，如查找 某一个路径，或者查找所有的路径都非常适合用DFS，效率也非常的高。</p>

<p>对于涉及树的层序的时候，如果是寻找层级内的某种状态，如层和，层最大值层最小值等，也是可以用DFS的。这方面可以参考<a href="http://toughcoder.net/blog/2022/09/02/bfs-and-dfs-made-easy/">前面的文章</a>，以及关于<a href="http://toughcoder.net/blog/2022/08/18/binary-tree-made-easy/">二叉树的文章</a>。</p>

<h3>典型题目</h3>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">  <a href="">110. 平衡二叉树</a> </td>
<td style="text-align:left;">  <a href="https://leetcode.cn/problems/balanced-binary-tree/solutions/2403949/xi-you-yuan-su-110-ping-heng-er-cha-shu-b4pmy/">题解</a>  </td>
<td style="text-align:left;">   </td>
</tr>
<tr>
<td style="text-align:left;">  <a href="https://leetcode.cn/problems/count-good-nodes-in-binary-tree/description/">1448. 统计二叉树中好节点的数目</a> </td>
<td style="text-align:left;">  <a href="https://leetcode.cn/problems/count-good-nodes-in-binary-tree/solutions/2403859/xi-you-yuan-su-1448-tong-ji-er-cha-shu-z-w7bi/">题解</a>  </td>
<td style="text-align:left;">   </td>
</tr>
<tr>
<td style="text-align:left;">  <a href=""></a> </td>
<td style="text-align:left;">  <a href="">题解</a>  </td>
<td style="text-align:left;">   </td>
</tr>
<tr>
<td style="text-align:left;">  <a href=""></a> </td>
<td style="text-align:left;">  <a href="">题解</a>  </td>
<td style="text-align:left;">   </td>
</tr>
<tr>
<td style="text-align:left;">  <a href=""></a> </td>
<td style="text-align:left;">  <a href="">题解</a>  </td>
<td style="text-align:left;">   </td>
</tr>
</tbody>
</table>


<h2>路径问题</h2>

<p>寻找特定的路径，或者枚举所有可能的路径就非常适合用DFS来求解。这其实是回溯算法，回溯其实就是用递归来枚举所有状态，这也是DFS的本质。</p>

<h3>典型题目</h3>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">  <a href="https://leetcode.cn/problems/all-paths-from-source-to-target/description/">797. 所有可能的路径</a> </td>
<td style="text-align:left;">  <a href="https://leetcode.cn/problems/all-paths-from-source-to-target/solutions/1951745/797-suo-you-ke-neng-de-lu-jing-by-alexhi-70xm/">题解</a>  </td>
<td style="text-align:left;">   </td>
</tr>
<tr>
<td style="text-align:left;">  <a href=""></a> </td>
<td style="text-align:left;">  <a href="">题解</a>  </td>
<td style="text-align:left;">   </td>
</tr>
<tr>
<td style="text-align:left;">  <a href=""></a> </td>
<td style="text-align:left;">  <a href="">题解</a>  </td>
<td style="text-align:left;">   </td>
</tr>
<tr>
<td style="text-align:left;">  <a href=""></a> </td>
<td style="text-align:left;">  <a href="">题解</a>  </td>
<td style="text-align:left;">   </td>
</tr>
</tbody>
</table>


<h2>图的遍历</h2>

<h3>典型题目</h3>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/flood-fill/description/">733. 图像渲染</a> </td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/flood-fill/solutions/1788931/733-tu-xiang-xuan-ran-by-alexhilton-mem7/">题解</a> </td>
<td style="text-align:left;">  </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/number-of-islands/">200. 岛屿数量</a> </td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/number-of-islands/solutions/1636556/200-dao-yu-shu-liang-by-alexhilton-cexx/">题解</a> </td>
<td style="text-align:left;">  </td>
</tr>
<tr>
<td style="text-align:left;">  <a href="https://leetcode.cn/problems/max-area-of-island/">695. 岛屿的最大面积</a> </td>
<td style="text-align:left;">  <a href="https://leetcode.cn/problems/max-area-of-island/solutions/1786740/by-alexhilton-9eby/">题解</a>  </td>
<td style="text-align:left;">   </td>
</tr>
</tbody>
</table>


<h2>有返回值的DFS</h2>

<p>有返回值的情况略为复杂，常规的DFS，特别是递归式，只以标记当成返回结果的，函数本身并没有返回值，但有时候光做标记还不够，还需要额外的信息作为是否有解的判断，这时就需要额外的返回值，通常用dfs函数的返回值作为判断。</p>

<p>写返回值时就要小心一些，当超过边界了，或者确定无解的情况下时<strong>返回无解状态（如false）</strong>，DFS过程中已标记过了的地方直接返回有解（如true），然后<strong>递归 调用，并把递归 的所有结果合并起来当作 返回值</strong>。这里特别要注意的是要把下一步都递归了，再合并结果，因为DFS除了有返回值外，它还会做标记，如果简单的进行与，会因为<strong>布尔操作符的short-circuit</strong>原因导致某些分支没走下去，最后的标记状态肯定就不对。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">private</span> <span class="k">fun</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">g</span><span class="p">:</span> <span class="n">Array</span><span class="p">&lt;</span><span class="n">IntArray</span><span class="p">&gt;,</span> <span class="n">i</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">j</span><span class="p">:</span> <span class="n">Int</span><span class="p">):</span> <span class="n">Boolean</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="p">&lt;</span> <span class="m">0</span> <span class="p">||</span> <span class="n">i</span> <span class="p">&gt;=</span> <span class="n">g</span><span class="p">.</span><span class="n">size</span> <span class="p">||</span> <span class="n">j</span> <span class="p">&lt;</span> <span class="m">0</span> <span class="p">||</span> <span class="n">j</span> <span class="p">&gt;=</span> <span class="n">g</span><span class="p">[</span><span class="m">0</span><span class="p">].</span><span class="n">size</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">false</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">g</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="p">==</span> <span class="m">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">true</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">g</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="p">=</span> <span class="m">1</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="py">n</span> <span class="p">=</span> <span class="n">dfs</span><span class="p">(</span><span class="n">g</span><span class="p">,</span> <span class="n">i</span> <span class="p">-</span> <span class="m">1</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">w</span> <span class="p">=</span> <span class="n">dfs</span><span class="p">(</span><span class="n">g</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="p">-</span> <span class="m">1</span><span class="p">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">s</span> <span class="p">=</span> <span class="n">dfs</span><span class="p">(</span><span class="n">g</span><span class="p">,</span> <span class="n">i</span> <span class="p">+</span> <span class="m">1</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">e</span> <span class="p">=</span> <span class="n">dfs</span><span class="p">(</span><span class="n">g</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="p">+</span> <span class="m">1</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">n</span> <span class="p">&amp;&amp;</span> <span class="n">w</span> <span class="p">&amp;&amp;</span> <span class="n">s</span> <span class="p">&amp;&amp;</span> <span class="n">e</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>典型题目</h3>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">  <a href="https://leetcode.cn/problems/number-of-closed-islands/">1254. 统计封闭岛屿的数目</a> </td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/number-of-closed-islands/solutions/2290858/xi-you-yuan-su-1254-tong-ji-feng-bi-dao-5e98a/">题解</a> </td>
<td style="text-align:left;">   </td>
</tr>
<tr>
<td style="text-align:left;">  <a href="https://leetcode.cn/problems/number-of-enclaves/">1020. 飞地的数量</a> </td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/number-of-enclaves/solutions/2292106/xi-you-yuan-su-1020-fei-di-de-shu-liang-gawj8/">题解</a> </td>
<td style="text-align:left;">  </td>
</tr>
<tr>
<td style="text-align:left;">  <a href="https://leetcode.cn/problems/count-sub-islands/description/">1905. 统计子岛屿</a> </td>
<td style="text-align:left;">  <a href="https://leetcode.cn/problems/count-sub-islands/solutions/2292277/xi-you-yuan-su-1905-tong-ji-zi-dao-yu-bf-ws6r/">题解</a>  </td>
<td style="text-align:left;">   </td>
</tr>
</tbody>
</table>


<h2>着色法DFS</h2>

<h3>典型题目</h3>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">  <a href="https://leetcode.cn/problems/find-eventual-safe-states/description/">802. 找到最终的安全状态</a> </td>
<td style="text-align:left;">  <a href="https://leetcode.cn/problems/find-eventual-safe-states/solutions/916155/zhao-dao-zui-zhong-de-an-quan-zhuang-tai-yzfz/">题解</a>  </td>
<td style="text-align:left;">   </td>
</tr>
<tr>
<td style="text-align:left;">  <a href=""></a> </td>
<td style="text-align:left;">  <a href="">题解</a>  </td>
<td style="text-align:left;">   </td>
</tr>
<tr>
<td style="text-align:left;">  <a href=""></a> </td>
<td style="text-align:left;">  <a href="">题解</a>  </td>
<td style="text-align:left;">   </td>
</tr>
</tbody>
</table>


<h2>枚举+DFS（回溯）</h2>

<p>如前所述，DFS的本质就是枚举所有状态，这其实也是回溯算法的核心所在，关于回溯可以<a href="http://toughcoder.net/blog/2022/09/04/backtracking-algorithm-explained/">参考另外的文章</a>。</p>

<p>这类题目通常涉及矩阵或者可转化为图，用DFS进行暴力搜索（暴力穷举所有可能的路径），再辅以其他方法进行剪枝优化。</p>

<h3>典型题目</h3>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">  <a href="https://leetcode.cn/problems/word-search/">79. 单词搜索</a> </td>
<td style="text-align:left;">  <a href="https://leetcode.cn/problems/word-search/solutions/1726936/79-dan-ci-sou-suo-by-alexhilton-2luf/">题解</a>  </td>
<td style="text-align:left;">   </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/water-and-jug-problem/description/">365. 水壶问题</a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> 建模是难点，如何定义状态 </td>
</tr>
<tr>
<td style="text-align:left;">  <a href="https://leetcode.cn/problems/word-search-ii/description/">212. 单词搜索 II</a> </td>
<td style="text-align:left;">  <a href="https://leetcode.cn/problems/word-search-ii/solutions/2417260/xi-you-yuan-su-212-dan-ci-sou-suo-iidfsh-c8wr/">题解</a>  </td>
<td style="text-align:left;">   </td>
</tr>
<tr>
<td style="text-align:left;">  <a href="https://leetcode.cn/problems/longest-increasing-path-in-a-matrix/description/">329. 矩阵中的最长递增路径</a> </td>
<td style="text-align:left;">  <a href="https://leetcode.cn/problems/longest-increasing-path-in-a-matrix/solutions/2414845/xi-you-yuan-su-329-ju-zhen-zhong-de-zui-qcoyn/">题解</a>  </td>
<td style="text-align:left;">   </td>
</tr>
<tr>
<td style="text-align:left;">  <a href=""></a> </td>
<td style="text-align:left;">  <a href="">题解</a>  </td>
<td style="text-align:left;">   </td>
</tr>
</tbody>
</table>


<h2>参考资料</h2>

<ul>
<li><a href="https://www.javatpoint.com/depth-first-search-algorithm">DFS (Depth First Search) algorithm</a></li>
<li><a href="https://www.simplilearn.com/tutorials/data-structure-tutorial/dfs-algorithm">Learn Depth-First Search(DFS) Algorithm From Scratch</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BFS in Graph Made Easy]]></title>
    <link href="http://toughcoder.net/blog/2023/06/14/graph-bfs-made-easy/"/>
    <updated>2023-06-14T23:07:20+08:00</updated>
    <id>http://toughcoder.net/blog/2023/06/14/graph-bfs-made-easy</id>
    <content type="html"><![CDATA[<p><a href="http://toughcoder.net/blog/2022/09/02/bfs-and-dfs-made-easy/">前面一篇文章</a>讲解过BFS和DFS的基本概念常见用法，今天专注于图论中的BFS，来深入的探讨一下BFS在图论的搜索中的应用，并总结相关解题技巧。</p>

<p><a href="http://toughcoder.net/blog/2023/06/14/graph-bfs-made-easy/"><img src="https://tutorialhorizon.com/static/media/algorithms/2015/05/Graph-BFS.gif" title="auto auto" ></a></p>

<!-- more -->


<p>本文假定已经熟知图论的基本知识，比如图的表示方式和一些基本概念等，如不熟悉可以<a href="http://toughcoder.net/blog/2022/09/08/graph-data-structure-made-easy/">参考此文</a>。</p>

<h2>基础（单源）BFS</h2>

<p>基础的BFS通常是单源的，也就是以某一个顶点为起点。借助队列(FIFO先入先出队列)，把起点入队，然后不断的从队出取出顶点，访问与其连通的顶点，直到队列为空。为了防止重复遍历，需要在遍历过程中做标记。因为这个比较基础，我们在<a href="http://toughcoder.net/blog/2022/09/02/bfs-and-dfs-made-easy/">前一篇文章</a>中已有伪码，所以这里就不再重复了。</p>

<p>这是最基础的BFS，当然 也是最重要的，因为更为复杂的玩法也是基于此的，因此要烂熟于心，有一些板子题，可以时常拿出来复习一下：</p>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/number-of-islands/">200. 岛屿数量</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/number-of-islands/solution/200-dao-yu-shu-liang-by-alexhilton-cexx/">题解</a> </td>
<td style="text-align:left;"> 邻接矩阵，矩阵式基础BFS板子题 </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/max-area-of-island/">695. 岛屿的最大面积</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/max-area-of-island/solution/by-alexhilton-9eby/">题解</a> </td>
<td style="text-align:left;"> 邻接矩阵，矩阵式基础BFS板子题 </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/flood-fill/">733. 图像渲染</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/flood-fill/solution/733-tu-xiang-xuan-ran-by-alexhilton-mem7/">题解</a> </td>
<td style="text-align:left;"> 邻接矩阵，矩阵式基础BFS板子题 </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/count-sub-islands/description/">1905. 统计子岛屿</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/count-sub-islands/solutions/2292277/xi-you-yuan-su-1905-tong-ji-zi-dao-yu-bf-ws6r/">题解</a> </td>
<td style="text-align:left;">  邻接矩阵，矩阵式基础BFS板子题 </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/reorder-routes-to-make-all-paths-lead-to-the-city-zero/description/">1466. 重新规划路线</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/reorder-routes-to-make-all-paths-lead-to-the-city-zero/solutions/2301538/xi-you-yuan-su-1466-zhong-xin-gui-hua-lu-juiu/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/keys-and-rooms/description/">841. 钥匙和房间</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/keys-and-rooms/solutions/2193103/xi-you-yuan-su-841-yao-chi-he-fang-jian-hcqfy/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h2>多方向邻接</h2>

<p>对于矩阵来说一般的邻接是四个方向，上下左右，但有时斜角也算邻接，这就有了八个方向，整体遍历的套路不变，只不过在找邻接顶点时要考虑八个方向。</p>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/shortest-path-in-binary-matrix/">1091. 二进制矩阵中的最短路径</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/shortest-path-in-binary-matrix/solution/xi-you-yuan-su-1091-er-jin-zhi-ju-zhen-z-gxba/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/pond-sizes-lcci/">面试题 16.19. 水域大小</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/pond-sizes-lcci/solution/xi-you-yuan-su-mian-shi-ti-1619-shui-yu-m0azj/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h2><a href="https://mathworld.wolfram.com/BipartiteGraph.html">二分图判定</a>之着色法BFS</h2>

<p>先要讲下<strong><a href="https://en.wikipedia.org/wiki/Bipartite_graph">二分图</a></strong>的定义：对于图中的<strong>任意两顶点u和v</strong>，如果它们有一条边<strong>直接相连</strong>，那么u和v必须<strong>属于不同的集合</strong>。更为学术一点的说法是：如果能将一个图的顶点集合分割为两个独立的子集A和B，并使略中的每一条边的两个节点一个来自于A集合，一个来自于B集合，就将这个图称为<strong>二分图</strong>。</p>

<p><img src="https://www.researchgate.net/profile/Ehdieh_Khaledian/publication/327213774/figure/download/fig1/AS:671177970294792@1537032706486/a-Example-showing-the-bipartite-graph-of-the-organism-cluster-relationship-Left-side.ppm" alt="" /></p>

<p>有些题目，并不会这么直接的告诉你这是一个判定二分图，而且会做一些信息隐藏，一般而言，如果 涉及把一个图的顶点进行归类，只分为两类，并且有边直连的顶点要归在不同的类别中，那么这就是一个二分图判定问题，比如题886，给你的是某人不喜欢的一群人，显然有边连接的顶点要归属于不同的集合，那么这就是一个二分图判定题。</p>

<p>可以用着色法BFS来判定二分图，大概的算法流程如下：</p>

<ol>
<li>用一个与顶点集合一样大的整数数组（或者其他结构）用作颜色标记，0是未着色（也就是还未访问），1着成红色，2着成绿色</li>
<li>任选一个顶点作为起点，着色为1（红色），加入队列，开始BFS</li>
<li>当队列不为空时，取出当前顶点u，遍历与u直连的顶点v，如果v还未着色，则把它加入队列，并着为3-color[u]；如果v已着色，且与color[u]着色一样，则说明不是二分图，返回F并终止遍历；</li>
<li>重复3直到队列为空，说明可以把所有顶点着为不同的色，也即是二分图，返回T</li>
</ol>


<p>伪码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python3'><span class='line'><span class="n">start</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">color</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">n</span>
</span><span class='line'><span class="n">queue</span> <span class="o">=</span> <span class="n">deque</span><span class="p">()</span>
</span><span class='line'><span class="n">queue</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">start</span><span class="p">)</span>
</span><span class='line'><span class="n">color</span><span class="p">[</span><span class="n">start</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">queue</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>  <span class="n">u</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="n">popleft</span><span class="p">()</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">[</span><span class="n">u</span><span class="p">]:</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">color</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>          <span class="n">color</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="mi">3</span> <span class="o">-</span> <span class="n">color</span><span class="p">[</span><span class="n">u</span><span class="p">]</span>
</span><span class='line'>          <span class="n">queue</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
</span><span class='line'>      <span class="k">elif</span> <span class="n">color</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">==</span> <span class="n">color</span><span class="p">[</span><span class="n">u</span><span class="p">]:</span>
</span><span class='line'>          <span class="k">return</span> <span class="k">False</span>
</span><span class='line'><span class="k">return</span> <span class="k">True</span>
</span></code></pre></td></tr></table></div></figure>


<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/is-graph-bipartite/description/">785. 判断二分图</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/is-graph-bipartite/solutions/2306267/xi-you-yuan-su-785-pan-duan-er-fen-tu-zh-mmdh/">题解</a> </td>
<td style="text-align:left;"> 二分图判定板子题 </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/possible-bipartition/">886. 可能的二分法</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/possible-bipartition/solution/886-ke-neng-de-er-fen-fa-by-alexhilton-5au7/">题解</a> </td>
<td style="text-align:left;">  二分图判定模板题  </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<p><strong>注意</strong>：二分图是把图的顶点进行分类到不同的集合，这是并查集最为擅长的应用场景，因此用并查集解决二分图判定更为高效和优雅。关于<a href="http://toughcoder.net/blog/2022/09/08/disjoint-set-data-structure/">并查集可以参考此文</a>。</p>

<h2>多源BFS</h2>

<p>基础的BFS<strong>只有一个起点</strong>，把图中的<strong>某一个顶点</strong>最先放入队列，然后开始BFS。但有些场景，以单个顶点为起点不能解决问题。这类问题的特点一般是求某一类顶点的极值，比如0-1矩阵中，求0最近的1，或者求1最近的0。这里的要点在于说单个顶点通过BFS找到的值并不一定是全局最优解。而如果以每个顶点都做一遍BFS又会导致复杂度太高，不但复杂度超高，而且有时候会难以编码（大致的思路是有的，但难以转化为具体的代码）。这时就要用到更为复杂一些的多源BFS来求解。</p>

<p>需要应用多源BFS题目的特点是与<strong>多个顶点相关</strong>，并求一个<strong>全局最优解</strong>，也就是说求<strong>顶点集合</strong>到另一个<strong>顶点集合</strong>的距离或者路径长度。有时候我们还需要运用逆向思维，反向思考，以使问题简化，比如虽然题目求0到1的距离，但如果反着去计算1到0的距离，反倒更为方便一些，那么就需要把顶点集合反一下。</p>

<p>多源BFS的套路：</p>

<ol>
<li>依据题目信息，看是否要把顶点集互换一下，大部分的题目是需要互换的</li>
<li>把点集都加入到队列中，同时入队的还有一个初始状态，比如求最短路径，可以把MAX_INTEGER加进去</li>
<li>以这些点集为起始，去做BFS，同时更新状态，这与常规BFS就一样了</li>
<li>为了防止重复遍历也是要做标记的，这与常规BFS一样，可以用步骤3里面与顶点一起入队的状态来当作标记，比如是MAX_INTEGER时肯定是还未访问到，是其他值时说明已访问过了</li>
<li>遍历过程中，可以求得全局最优解</li>
</ol>


<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/01-matrix/description/">542. 01 矩阵</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/01-matrix/solutions/1790257/by-alexhilton-ngwy/">题解</a> </td>
<td style="text-align:left;"> 点集互换，多源BFS模板题，多源最短路径 </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/shortest-bridge/description/">934. 最短的桥</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/shortest-bridge/solutions/1922745/934-zui-duan-de-qiao-by-alexhilton-mkxy/">题解</a> </td>
<td style="text-align:left;"> 多源BFS，数圈圈 </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/rotting-oranges/description/">994. 腐烂的橘子</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/rotting-oranges/solutions/1794075/994-fu-lan-de-ju-zi-by-alexhilton-6g10/">题解</a> </td>
<td style="text-align:left;"> 多源BFS </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/as-far-from-land-as-possible/description/">1162. 地图分析</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/as-far-from-land-as-possible/solution/xi-you-yuan-su-1162-di-tu-fen-xi-duo-yua-7c8t/">题解</a> </td>
<td style="text-align:left;"> 点集互换，多源最短路径 </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/shortest-path-with-alternating-colors/description/">1129. 颜色交替的最短路径</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/shortest-path-with-alternating-colors/solutions/2091594/1129-yan-se-jiao-ti-de-zui-duan-lu-jing-cwm57/">题解</a> </td>
<td style="text-align:left;"> 双源BFS </td>
</tr>
</tbody>
</table>


<h2>圈式BFS</h2>

<p>单源多源都可以，重点不是起点的多少，而是要在遍历的时候注意数圈层。BFS的特点是像水波一样一层一层，一圈一圈的由起点向外传播，有时候我们需要对这些层和圈进行计数。</p>

<p>其实，这个跟树的层序遍历是一样的，树的遍历大法可以<a href="http://toughcoder.net/blog/2022/08/18/binary-tree-made-easy/">参考 这个文章</a>，如果对树的层序遍历熟悉了，那么图的数圈圈也就会了。做法就是添加下一层时做一下标记，就可以了，并不复杂。</p>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/shortest-bridge/description/">934. 最短的桥</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/shortest-bridge/solutions/1922745/934-zui-duan-de-qiao-by-alexhilton-mkxy/">题解</a> </td>
<td style="text-align:left;"> 多源BFS，数圈圈 </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h2>泛图BFS（枚举）</h2>

<p>图是一个很广泛的概念，任何事情都可以视为一个顶点，事物之间的联系可视一条边，状态也可以视为一个顶点，一个状态变化 为另一个状态可视为一条边，因此图论的搜索，或者说图论的遍历方式可以广泛的应用。</p>

<p>BFS的遍历特点是能找到<strong>两个顶点之间的最短路径</strong>，因此，当找一些<strong>状态与状态之间的最少变化次数</strong>之类的问题时，经过适当的建模后，便可以用图论的BFS来求解。</p>

<p>针对广泛图应用BFS的套路：</p>

<ol>
<li>针对 状态进行建模，确定状态的变化规律</li>
<li>搞清楚状态的变化 规律后就可以建图了，要注意图是否是无限图，如果是无限图就必须找遍历搜索的边界</li>
<li>把起点加入队列，确定标记方案，然后开始做BFS</li>
<li>注意边界，包括重复标记，以及搜索的边界，以防止进入死循环</li>
</ol>


<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/jump-game-iii/solutions/">1306. 跳跃游戏 III</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/jump-game-iii/solutions/2302494/1306-tiao-yue-you-xi-iii-by-alexhilton-uayu/">题解</a> </td>
<td style="text-align:left;"> 模板题，本身是数组边界固定 </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/minimum-jumps-to-reach-home/description/">1654. 到家的最少跳跃次数</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/minimum-jumps-to-reach-home/solutions/2302780/xi-you-yuan-su-1654-dao-jia-de-zui-shao-mrilp/">题解</a> </td>
<td style="text-align:left;"> 容易想到BFS，确定右界是关键 </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/minimum-genetic-mutation/">433. 最小基因变化</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/minimum-genetic-mutation/solutions/2303783/433-zui-xiao-ji-yin-bian-hua-by-alexhilt-vc3x/">题解</a> </td>
<td style="text-align:left;"> 枚举状态的模板题 </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/open-the-lock/">752. 打开转盘锁</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/open-the-lock/solutions/2303829/xi-you-yuan-su-752-da-kai-zhuan-pan-suo-b6ulp/">题解</a> </td>
<td style="text-align:left;"> 枚举状态的模板题 </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/water-and-jug-problem/">365. 水壶问题</a> </td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/water-and-jug-problem/solution/xi-you-yuan-su-365-shui-hu-wen-ti-bfs-by-shah/">题解</a> </td>
<td style="text-align:left;"> 建模定义状态，转换状态 </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<p><strong>注意</strong>：本质上，这属于枚举，我们枚举各种状态，然后找到想要的答案。用BFS来枚举是寻找两种状态之间的最少变化 次数。而DFS枚举则用于查找所有的可行方案，这其实就是回溯算法了。图论真的博大精深，与各种算法融合在一起。</p>

<h2>复杂状态处理</h2>

<p>图的遍历可复杂也可简单，重点并不是遍历方式如DFS，单源BFS或者多源BFS，而且遍历到每个节点时，对节点状态的处理，这里可能会千变万化，有些难题就难在对状态的处理，有些是状态太复杂了，要想办法压缩 以达到可处理的地步（如题847），有些则是状态变化 太多了（如题417）。这有点类似于<a href="http://toughcoder.net/blog/2022/09/08/introduction-to-dynamic-programming/">动态规划</a>，是没有固定的套路的，只能靠平时积累以及分析建模能力了。</p>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/shortest-path-visiting-all-nodes/description/">847. 访问所有节点的最短路径</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/shortest-path-visiting-all-nodes/solutions/2301703/xi-you-yuan-su-847-fang-wen-suo-you-jie-jvpcz/">题解</a> </td>
<td style="text-align:left;"> 多源BFS，状态压缩 </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/nearest-exit-from-entrance-in-maze/">1926. 迷宫中离入口最近的出口</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/nearest-exit-from-entrance-in-maze/solution/xi-you-yuan-su-1926-mi-gong-zhong-chi-ru-fxvi/">题解</a> </td>
<td style="text-align:left;"> 单源最短路 </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h2>双向BFS</h2>

<p>无论是单源还是多源做BFS时一般都是一个方向的，也就是说把起始顶点或者点集加入队列作为起点，向着目标顶点或者点集或者说终点去BFS遍历。通常情况下，这没什么问题。</p>

<p>但当数据量特别大时，或者状态的计算比较复杂时，这样效率就不够高了，这时需要更为复杂的玩法。其实前面说的起点和终点都是相对的，图的搜索遍历其实是不分方向的，起点到终点的最短距离，与终点到起点的最短距离其实是一样的，反过来你把终点当成起点来做BFS也是一样的（前面讲多源BFS时就提到过逆向思维，把点集对换，其实就是从原终点当作新起点做BFS）。</p>

<p>那么，假如同时从起点开始，和从终点开始一起做BFS，当两个BFS相遇时（同时到达相同的一层顶点时）搜索完成，是不是搜索效率就会加倍？这就是双向BFS的核心思想。另外，为了保证平衡性和效率，每次要<strong>优先把队列元素数量小</strong>的一个方向向前推进。</p>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/word-ladder/description/">127. 单词接龙</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/word-ladder/solution/xi-you-yuan-su-127-dan-ci-jie-long-bfs-b-52ia/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/shortest-path-in-binary-matrix/">1091. 二进制矩阵中的最短路径</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/shortest-path-in-binary-matrix/solution/xi-you-yuan-su-1091-er-jin-zhi-ju-zhen-z-gxba/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h2>逆向遍历</h2>

<p>图的遍历都是从某些顶点出发，去寻找另外的顶点。有些时候是起始顶点已知，比如前面提到的常规遍历问题，无论是单源还是多源，都是起点是已知的固定的一个顶点集合。</p>

<p>但有时候，起点并不固定，但终点是固定的，这时候就需要运用逆向思维，从这些固定的终点出发做遍历，进而求解。</p>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/pacific-atlantic-water-flow/">417. 太平洋大西洋水流问题</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/pacific-atlantic-water-flow/solution/xi-you-yuan-su-417-tai-ping-yang-da-xi-y-jami/">题解</a>  </td>
<td style="text-align:left;"> 典型的终点固定，起点不固定，从终点出发遍历  </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h2>拓朴排序</h2>

<p>对于有向无环图而言，拓朴排序能够把顶点按依赖顺序排成线性列表，用的也是BFS来实现的，<a href="http://toughcoder.net/blog/2022/09/08/topological-sorting/">详情可以参考此文</a>。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://leetcode.cn/circle/discuss/FyPTTM/">图论算法，拿得起放得下</a></li>
<li><a href="https://www.hackerearth.com/practice/algorithms/graphs/breadth-first-search/tutorial/">Breadth First Search</a></li>
<li><a href="https://www.geeksforgeeks.org/multi-source-shortest-path-in-unweighted-graph/">Multi Source Shortest Path in Unweighted Graph</a></li>
<li><a href="https://www.geeksforgeeks.org/bipartite-graph/">Check whether a given graph is Bipartite or not</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[悼念耗子叔]]></title>
    <link href="http://toughcoder.net/blog/2023/05/16/mourn-mr-hao-chen/"/>
    <updated>2023-05-16T10:03:45+08:00</updated>
    <id>http://toughcoder.net/blog/2023/05/16/mourn-mr-hao-chen</id>
    <content type="html"><![CDATA[<p>惊闻<a href="https://coolshell.cn/haoel">耗子叔</a>突然辞世，悲伤不已。仍活跃在一线的技术大神，前几天仍在社交网络上活跃的大牛，突然就这么走了，犹如一首高亢激昂的交响乐曲，嘎然而止，亦如波涛奔涌的大江，瞬间冰封，不免让人心痛，亦会唏嘘感慨生命的短暂。</p>

<p><a href="http://toughcoder.net/blog/2023/05/16/mourn-mr-hao-chen/"><img src="https://coolshell.cn/wp-content/uploads/2011/03/me.jpg"></a></p>

<!-- more -->


<p>早年就曾关注耗子叔，并成为<a href="https://coolshell.cn/">其博客</a>的忠实读者，但如果非硬要扯上关系，也曾做过同事，2015年初我去了大阿里，彼时耗子叔仍在阿里，记得彼时耗子叔经常分享一些国际巨头（谷歌，亚马逊）的一些高效的工作模式，先进的技术迭代方式，在阿里味引起了不小的反响。</p>

<p>耗子叔是一个技术布道者，对技术有着极度热情和坚定的信仰，写了大量的优质博客，影响了无数人，是很多年轻人的良师益友。他常说的两句话是：学无止境，以及年轻人要多到大平台大公司去开阔眼界。个人最受影响的便是他那篇著名的博客<a href="https://coolshell.cn/articles/4990.html">程序员技术练级攻略</a>，这篇文章的影响力可比肩<a href="https://norvig.com/">Peter Norvig</a>大神的那篇著名的<a href="https://norvig.com/21-days.html">Teach Yourself Programming in Ten Years</a>。</p>

<p>耗子叔起步不高，却大器晚成，是勤奋成材的典范，是学无止境的标兵，坚定的信仰着技术改变世界，并为之奋斗，为技术布道，并追求极致的工程师文化。相信如果耗子叔起点高一些，或者再多给他一些时间，他的成就会更高，至少能达到巨头公司副总的级别。</p>

<p>现今社会职场压力大，特别是IT行业内卷极其严重，小则996，大则007，耗子叔以及很多嘎然而止的鲜活生命也都在提醒着我们要多多运动，关注身心健康，正所谓前面那个1倒下了，后面再多的0都是徒劳。</p>

<p>愿耗子叔能安息，也愿天堂有纯正的技术氛围和极致的工程师文化。</p>


]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Scoped Storage Puzzles]]></title>
    <link href="http://toughcoder.net/blog/2023/05/03/android-scope-storage-puzzles/"/>
    <updated>2023-05-03T17:58:43+08:00</updated>
    <id>http://toughcoder.net/blog/2023/05/03/android-scope-storage-puzzles</id>
    <content type="html"><![CDATA[<p>安卓对于文件存储这块，其实是相当混乱的，在早期的版本中对存储甚至是没有所谓的管理的，有多种方法可以操作文件存储，比如通过Java原生的方式(File/InputStream/OutputStream)，以及通过ContentProvider的方式(openFile/openOutputStream)。文件的路径也是相当混乱的，有公共存储区域，App的沙盒，外部存储中的App沙盒，但其实整个文件系统中的文件都是可读的，除了系统目录，其他应用的沙盒(内部和外部）以外也都是可写的。这就造成了，安卓的文件系统特别的混乱，加之应用使用不规范，对存储造成极大的滥用，外部存储空间产生大量的垃圾文件，应用卸载后仍然存在，这也催生了一系列的清理软件。</p>

<p><a href="http://toughcoder.net/blog/2023/05/03/android-scope-storage-puzzles/"><img src="https://co-well.vn/wp-content/uploads/2020/05/Android-01-2048x1280.jpg" title="auto auto" ></a></p>

<!-- more -->


<p>但随着用户隐私问题越来越被重视，谷歌也开始收紧了存储权限管理。</p>

<h2>存储权限的变迁史</h2>

<h3>强制动态申请权限</h3>

<p>从Android 6.0（Android M, API 23）开始，存储权限除了在AndroidManifest中静态声明以外，还需要在运行时动态的申请，用户授权了后才可以使用。但这并没有本质的变化，只要用户授权了，就跟以前一样，所有文件可读，大量位置的文件也都可写，App依然可以随便乱搞。</p>

<h3><a href="https://developer.android.com/training/data-storage#scoped-storage">Scoped Storage</a></h3>

<p>后来到了Android 10 (Android Q, API 29)时提出了scoped storage的概念，并把权限进一步的收紧，仅留下几个公共的文件夹可写，其他地方均不可写。并且写媒体文件时(Image/Video/Audio)，要用MediaStore API的方式，直接以Java的文件方式将不再可用。Android 10并未强制开启scoped storage，通过在Manifest中设置requestLegacyStorageManage=true，依然可以像以往那样搞，但到了Android 11时，就强制开启了scoped storage。
<img src="https://koenig-media.raywenderlich.com/uploads/2020/06/PreparingScopedStorage-twitter.png" alt="" /></p>

<h3>强制Score Storage</h3>

<p>到了Android 11(Android R, API 30)时，就强制了，只有应用自己的沙盒可自由读写。创建媒体文件必须 通过MediaStore API。只有少数区域可写（Documents/Downloads/Pictures）等，并且这些区域只有自己创建的文件是可见和可读的。这就导致了，应用能乱搞的区间相当有限了。</p>

<h3>细分文件种类权限</h3>

<p>到了Android 13(Android T, API 33)，更加变态了，把原来的<a href="https://developer.android.com/reference/android/Manifest.permission#WRITE_EXTERNAL_STORAGE">WRITE_EXTERNAL_STORAGE</a>/<a href="https://developer.android.com/reference/android/Manifest.permission#READ_EXTERNAL_STORAGE">READ_EXTERNAL_STORAGE</a>权限细分为对具体文件种类的操作，拆分为Image/Audio/Video三种媒体文件类型的读写。</p>

<p><strong>注意</strong>：只有当targetSdk=33时，并且目标设备是Android 13时，才需要做权限的细分处理。也许后面的版本就会强制了，如果强制那无论taregtSdk是多少都会强制使用细分 权限。</p>

<h2>存储问题的适配</h2>

<p>前面简单的介绍了安卓存储权限的变化过程，重点还是要了解一下如何适配。因为现在已经是2023年了，Android 13(Android T)，API 33也快要普及了，所以就直接总结下现在应该怎么做。</p>

<h3>动态申请存储权限</h3>

<p>对于现在来说，动态申请权限已经是必备的技能之一了，不用多说了。就是先在应用的入口处，或者将要使用存储的地方去申请</p>

<h3>在manifest中声明<a href="https://developer.android.com/reference/android/R.attr#requestLegacyExternalStorage">requestLegacyExternalStorage=true</a></h3>

<h3>用MediaStore API来操作媒体文件(Image/Audio/Video)</h3>

<p>首先要声明具体的权限，然后用<a href="https://developer.android.com/training/data-storage/shared/media">MediaStore API</a>来操作。</p>

<h3>申请另外一个权限MANAGE_EXTERNAL_STORAGE</h3>

<p><strong>注意</strong>: 这个不管你的targetSDK是多少，只要目标运行设备是Android 11，就必须 这样做。</p>

<p>从Android 11开始，要想看到公共区域(Documents/Downloads)中的所有文件，还必须申请另外一个权限<a href="https://developer.android.com/reference/android/Manifest.permission#MANAGE_EXTERNAL_STORAGE">MANAGE_EXTERNAL_STORAGE</a>。因为理论上来说，公共区域你只能看见你自己创建的文件就够了，想看所有文件就越权了。但对于有些应用来说，如文件浏览器，或者请记录阅读器来说，肯定要能看到所有的文件。这个权限需要再次单独申请，用户授权后即可以看到公共区域的所有的文件了。</p>

<p>需要注意，这个权限像常规权限那样去申请是没用的，它的状态永远是denied的，所以，逻辑要这样写：</p>

<ol>
<li>先正常申请存储相关的权限</li>
<li>正常权限有了后，判断Environment.isExternalStorageManager()，如果 是false则需要再次申请另外一个叫做access all files的权限，通过<a href="https://developer.android.com/reference/android/provider/Settings#ACTION_MANAGE_ALL_FILES_ACCESS_PERMISSION">ACTION_MANAGE_ALL_FILES_ACCESS_PERMISSION</a>或者<a href="https://developer.android.com/reference/android/provider/Settings#ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION">ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION</a></li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>   <span class="c1">// after read/write permission granted</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">(!</span><span class="n">Environment</span><span class="o">.</span><span class="na">isExternalStorageManager</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">requestAllFilesAccess</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">private</span> <span class="kt">void</span> <span class="nf">requestAllFilesAccess</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Intent</span><span class="o">(</span><span class="n">Settings</span><span class="o">.</span><span class="na">ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION</span><span class="o">);</span>
</span><span class='line'>    <span class="n">intent</span><span class="o">.</span><span class="na">addCategory</span><span class="o">(</span><span class="n">Intent</span><span class="o">.</span><span class="na">CATEGORY_DEFAULT</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Uri</span> <span class="n">uri</span> <span class="o">=</span> <span class="n">Uri</span><span class="o">.</span><span class="na">fromParts</span><span class="o">(</span><span class="s">&quot;package&quot;</span><span class="o">,</span> <span class="n">getPackageName</span><span class="o">(),</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>    <span class="n">intent</span><span class="o">.</span><span class="na">setData</span><span class="o">(</span><span class="n">uri</span><span class="o">);</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">startActivity</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ActivityNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">LOG_TAG</span><span class="o">,</span> <span class="s">&quot;Exception: &quot;</span> <span class="o">+</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要注意，有可能会有Activity not found exception，注意try-catch下。</p>

<p>因为这个权限又会导致失控，只要申请了就可以在公共区域随意创建文件了，所以谷歌对这个权限管控也是比较严的。虽然你在研发测试阶段可以申请这个权限，但是在发布阶段，要给应用商店一个使用此权限的合理理由，否则Play store会拒绝上线的。</p>

<h3>合理使用公共区域</h3>

<p>作为App，最应该做的就是从业务上区分文件的属性，然后合理的选择存储空间进行存储。对于App本身运行相关的文件，如配置，如算法的模型，如数据库，缓存和日志等等应用本身运行密切相关的文件，一定不可以放在公共区域，一定要放在应用自己的沙盒内（通过<a href="https://developer.android.com/reference/android/content/Context#getFilesDir(">context.getFilesDir</a>), <a href="https://developer.android.com/reference/android/content/Context#getCacheDir(">context.getCacheDir</a>), <a href="https://developer.android.com/reference/android/content/Context#getExternalFilesDir(java.lang.String">context.getExternalFilesDir</a>), <a href="https://developer.android.com/reference/android/content/Context#getExternalCacheDir(">context.getExternalCacheDir</a>), <a href="https://developer.android.com/reference/android/content/Context#openFileOutput(java.lang.String,%20int">context.openFileOutput</a>)）等来读写，应用自己的沙盒也是属于App的自由空间，你可以随意玩。</p>

<p>对于用户生成的文件则要放在公共区域，比如说相机产出的图片和视频，编辑软件产生的文档，这些属于用户生成文件，它的所有权是用户的，可能会通过其他软件再次编辑或者分享，这些肯定要放在公共区域的。对于媒体类Image/Audio/Video则要通过MediaStore API的方式来创建和管理。对于其他文档类型，在获得了WRITE权限 后也可以在（Documents/Downloads）中创建和管理的，绝大多数情况下，这就够了。</p>

<p>总的来说，在用户隐私越来越被重视的今天，安卓现在存储管理策略在保护用户隐私的前提下是能够满足开发者使用的。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://apilevels.com/">Android API Levels</a></li>
<li><a href="https://developer.android.com/guide/topics/providers/document-provider">Open files using storage access framework</a></li>
<li><a href="https://developer.android.com/about/versions/11/privacy/storage">Storage updates in Android 11</a></li>
<li><a href="https://developer.android.com/training/permissions/requesting">Request runtime permissions</a></li>
<li><a href="https://www.geeksforgeeks.org/external-storage-in-android-with-example/">External Storage in Android with Example</a></li>
<li><a href="https://developer.android.com/training/data-storage/manage-all-files">Manage all files on a storage device</a></li>
<li><a href="https://stackoverflow.com/questions/62782648/android-11-scoped-storage-permissions">Android 11 Scoped storage permissions</a></li>
<li><a href="https://ourcodeworld.com/articles/read/1559/how-does-manage-external-storage-permission-work-in-android">How does MANAGE_EXTERNAL_STORAGE permission work in Android?</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding Kotlin Scope Functions]]></title>
    <link href="http://toughcoder.net/blog/2023/04/12/understanding-kotlin-scope-functions/"/>
    <updated>2023-04-12T15:06:18+08:00</updated>
    <id>http://toughcoder.net/blog/2023/04/12/understanding-kotlin-scope-functions</id>
    <content type="html"><![CDATA[<p>Kotlin是基于JVM衍生出来的新一代通用编程语言，它的目标是简洁，可读和高效，这里的高效并不是代码的运行效率高，而是说项目的开发效率高。Kotlin有太多的小巧的新特性（在Java眼中就是语法糖），比如在Kotlin中有几个作用和用法都非常接近的函数apply/with/run/let/also，它们的正统名字是<strong>作用域函数</strong>(Scope functions)，今天就来学习一下这些函数的使用方法和具体区别。</p>

<p><a href="http://toughcoder.net/blog/2023/04/12/understanding-kotlin-scope-functions/"><img src="https://tse2-mm.cn.bing.net/th/id/OIP-C.eDXYmyuQp-E1wGqx4WnhIgHaEK?pid=ImgDet&rs=1" title="auto auto" ></a></p>

<!-- more -->


<p>Java是面向对象的王牌语言，它的特点是严谨和教条，Java写出来的代码学过Java的人大多都看得懂，所以规模以上的项目现在基本上都用Java，这对维护是有好处的。但Kotlin不一样，它有非常多的特性，融合了众多编程语言的特点，同样一件事情，可能有无数种写法，虽然号称是用标准Kotlin语言实现的，但是即使学过Kotin的人也看不懂。比如虽然你学会了Function，Object和lambda，以及像inline function和extension，但是如果用apply和with写几段方法，你就看不懂了，这就导致了Kotlin虽然易于上手，但是要想学透和提高曲线 就会陡峭许多。</p>

<p><img src="https://tse2-mm.cn.bing.net/th/id/OIP-C.pVewkBVy74Ivnoumj0Gx0wHaF8?pid=ImgDet&amp;rs=1" alt="" /></p>

<h2>到底是个啥</h2>

<p>先来看一下Scope function到底是什么，它们的作用是在一个对象上执行一段代码，我们来看一个简单的例子：有一个类是Person，它有一些属性和方法，我们想对它的一个对象进行操作，通常会这样做：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">alice</span> <span class="p">=</span> <span class="n">Person</span><span class="p">(</span><span class="n">name</span><span class="p">=</span><span class="s">&quot;Alice&quot;</span><span class="p">,</span> <span class="n">age</span><span class="p">=</span><span class="m">20</span><span class="p">,</span><span class="n">addr</span><span class="p">=</span><span class="s">&quot;Amsterdam&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">alice</span><span class="p">)</span>
</span><span class='line'><span class="n">alice</span><span class="p">.</span><span class="n">moveTo</span><span class="p">(</span><span class="s">&quot;London&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">alice</span><span class="p">.</span><span class="n">incrementAge</span><span class="p">(</span><span class="m">2</span><span class="p">)</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;Two years later ${alice.name} is at ${alice.addr}&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>但使用scope function，我们可以这样做：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">alice</span> <span class="p">=</span> <span class="n">Person</span><span class="p">(</span><span class="s">&quot;Alice&quot;</span><span class="p">,</span> <span class="m">20</span><span class="p">,</span> <span class="s">&quot;Amsterdam&quot;</span><span class="p">).</span><span class="n">apply</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span><span class='line'>  <span class="n">moveTo</span><span class="p">(</span><span class="s">&quot;London&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">incrementAge</span><span class="p">(</span><span class="m">2</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;Two years later ${alice.name} is at ${alice.addr}&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Person(name=&#39;Alice&#39;, age=20, addr=&#39;Amsterdam&#39;)</span>
</span><span class='line'><span class="c1">//Two years later Alice is at London</span>
</span></code></pre></td></tr></table></div></figure>


<p>这两段代码的输出是完全一样的，但是第二段明显要简洁很多这就是scope function的作用，仔细看apply后面的lambda块，它是一个scope，犹如在对象的类定义之中，在这个代码块中可以直接引用对象的方法，而不是像常规的那样使用对象的引用。</p>

<p><em>注意</em>：如果不是很尾部lambda的同学可以先行参考<a href="http://toughcoder.net/blog/2023/01/24/understanding-kotlin-functions/">另外一篇文章</a>，以加强理解。</p>

<h2>理解Scope</h2>

<p>作用域也可以理解为一个代码块的上下文，也就是说在一个代码中，可以直接使用的东西，环境变量之于进程，系统框架为应用准备的基础对象，都可以视为一种scope。最为明显的就是类的定义，在类中，我们可以引用this指针来代表当前对象super指针来代表基类，这也是一种scope。lambda捕获的闭包也是一种scope。</p>

<p>Kotlin的scope functions就是把某一个对象当作代码块的scope，代码块中的代码可以方便的使用这个对象。</p>

<h2>Scope funtions的作用</h2>

<p>如同开头讨论的，能用scope function写出来的东西，用常规方式也一样可以做到，那到底图个啥呢？用scope function的方式代码变得更加的简洁和紧凑，我们把针对某一对象的密集操作集中在一起放入一个代码块中，会更加的内聚和紧凑，易于扩展和维护。但也要注意不能滥用，代码块中只应该写与对象相关的操作，与scope对象不相干的事情是绝对不应该放入其中的。</p>

<h2>Scope functions</h2>

<p>主要有6个，它们的应用主体都是一个对象，也就是要在一个对象上面调用这些函数，然后提供一个代码块（lambda）：</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> Scope Function </th>
<th style="text-align:center;"> Object reference </th>
<th style="text-align:center;"> Return value </th>
<th style="text-align:center;"> Description </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> let </td>
<td style="text-align:center;"> it </td>
<td style="text-align:center;"> lambda result </td>
<td style="text-align:center;"> Extension function </td>
</tr>
<tr>
<td style="text-align:center;"> run </td>
<td style="text-align:center;"> this </td>
<td style="text-align:center;"> lambda result </td>
<td style="text-align:center;"> Extension function </td>
</tr>
<tr>
<td style="text-align:center;"> run </td>
<td style="text-align:center;"> _ </td>
<td style="text-align:center;"> lambda result </td>
<td style="text-align:center;"> No object in the scope </td>
</tr>
<tr>
<td style="text-align:center;"> with </td>
<td style="text-align:center;"> this </td>
<td style="text-align:center;"> lambda result </td>
<td style="text-align:center;"> Take the object as an argument </td>
</tr>
<tr>
<td style="text-align:center;"> apply </td>
<td style="text-align:center;"> this </td>
<td style="text-align:center;"> context object </td>
<td style="text-align:center;"> Extension function </td>
</tr>
<tr>
<td style="text-align:center;"> also </td>
<td style="text-align:center;"> it </td>
<td style="text-align:center;"> context object </td>
<td style="text-align:center;"> Extension function </td>
</tr>
</tbody>
</table>


<h2>它们的区别和如何选用</h2>

<h3>with不是一个extension函数</h3>

<p>其他几个都是extension函数，所以with一定要把scope object作为参数传入。</p>

<h3>scope对象的引用方式</h3>

<p>对于scope function来说scope对象都会作为一个context object，可以在lambda块中使用，有些是作为this指针，有些是作为lambda的默认参数名字也即it指针，但它们都指向context object，本质上是没有区别的只是指针的名字一个是this一个是it。但是，跟类的定义scope是一样的，this指针是可以省略的，但如果it作为参数，则是不能省略的，具体来说，比如说，用apply时，代码块中是this指针，那么可以直接这样写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">alice</span> <span class="p">=</span> <span class="n">Person</span><span class="p">(</span><span class="s">&quot;Alice&quot;</span><span class="p">,</span> <span class="m">20</span><span class="p">,</span> <span class="s">&quot;Amsterdam&quot;</span><span class="p">).</span><span class="n">apply</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span><span class='line'>  <span class="n">moveTo</span><span class="p">(</span><span class="s">&quot;London&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">incrementAge</span><span class="p">(</span><span class="m">2</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然 你也可以显式的把this写出来，this.moveTo(&ldquo;London&rdquo;)，但这就麻烦多了，何必呢。所以apply最合适的场景是对对象本身的操作，如赋值和修改属性。</p>

<p>但如果是用also，就必须用it了，这个不能省，因为它是对scope对象的引用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">alice</span><span class="p">.</span><span class="n">also</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot;Two years later ${it.name} is at ${it.addr}&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以，also最适合的不是对对象本身的操作，而是一些与对象相关的副作用，如打印日志等。</p>

<h3>返回值不同</h3>

<p>这坨Scope functions是一个函数，它是有返回值的，这个返回是不一样的，apply/also返回的是context object，其他几个则是返回lambda中的返回值也就是lambda的最后一个表达 式或者lambda中显式的return语句。</p>

<p>所以，如果是想继续使用scope object，那么就要用apply/also，如果想得到某个其他值就要用let/run/with，即使说不在乎函数的返回值时，这时也推荐使用also，因为假如后续想继续添加其他操作时，可以直接在后面链接上其他的scope function。其他返回值的let/run/with一般用在一组操作的确定性的终点上面，比如统计均值，那最后的均值计算可以用run，比如文件操作，读写都可以用with。</p>

<h2>注意事项</h2>

<p>任何技术和工具要深刻理解它们的应用范围和使用场景以避免滥用，要用到恰到好处才能发挥最大的价值。对于一些非必须的东西，更是如此。</p>

<p>Scope functions是应用于对象上面的，所以前提是当你需要对一个对象进行一些操作时，才可以使用scope functions，具体选择哪一个参考 上面一节的讨论。另外，就是放入代码块中的操作必须全部是scope对象相关的才可以。一个scope function中只能是一组相关的操作，不同组的操作要启用不同的scope functions。比如说网络请求response的处理，可以分为服务器状态码和返回实体的检测，转成具体数据，打印日志这么三个scope functions，而不是全放进一个里面。</p>

<p>总而言之，要视具体的需求和场景，并基于场景选择合适的scope function，切忌过度使用。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://kotlinlang.org/docs/scope-functions.html">Scope functions</a></li>
<li><a href="https://blog.mindorks.com/using-scoped-functions-in-kotlin-let-run-with-also-apply/">Using Scoped Functions in Kotlin - let, run, with, also, apply</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/kotlin-let-run-also-apply-with">Kotlin let, run, also, apply, with</a></li>
<li><a href="https://shusheng007.top/2020/10/02/1-6/">秒懂Kotlin之彻底掌握Scope Functions (apply, also,let,run,with)</a></li>
<li><a href="https://www.jianshu.com/p/5c4a954d2b2c">Kotlin之let,apply,run,with等函数区别</a></li>
<li><a href="https://juejin.cn/post/6868179386344931342">Kotlin学习：run、with、apply、also、let的区别</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[String Problems Archive]]></title>
    <link href="http://toughcoder.net/blog/2023/03/19/string-problem-archive/"/>
    <updated>2023-03-19T10:24:09+08:00</updated>
    <id>http://toughcoder.net/blog/2023/03/19/string-problem-archive</id>
    <content type="html"><![CDATA[<p>字符串即由字符组成的线性数组结构，可以理解为字符数组或者字符列表，但元素的集合是有限集合，通常是英文字符，数字和算术运算符号。可以说数组和列表的常见问题和技巧都可以应用于字符串，但因为是有限集合，所以又有一些独特的问题和技巧，今天就来总结一下。</p>

<p><a href="http://toughcoder.net/blog/2023/03/19/string-problem-archive/"><img src="https://cdn.programiz.com/sites/tutorial2program/files/c-strings.jpg" title="auto auto" ></a></p>

<!-- more -->


<h2>编程技巧</h2>

<h3>转成字符数组来遍历</h3>

<p>对于Java语言来说charAt(i)非常的慢，所以如果需要多次遍历，或者多次获利某个索引位置的字符，最好先转成字符数组toCharArray()，这样效率会高出很多。对于其他语言像Python3和Kotlin则没必要，因为本来就可以像常规数组(列表)一样遍历。</p>

<h3>用桶代替哈希表</h3>

<p>字符串的每个元素是有限集合，所以要尽可能的用桶来代替哈希表，每当需要对字符计数，或者做映射的时候，都可以先尝试用桶。
比如小写英文字母，就可以用一个长度为26的整数数组来计数，字符与索引的转化关系是ch-&lsquo;a&#8217;，同理可以扩展到大写ch-&#8216;A&#8217;，甚至数字字符ch-&#8216;0&#8217;。</p>

<h3>字符与索引相互转化</h3>

<p>前面提到了用桶，就是把字符转化为索引。反过来也是可行的。目标字符ch = (char) (i + &lsquo;a&rsquo;)就把索引转为小写，大写和数字字符也是同理的。</p>

<h4>Java/C/C++</h4>

<p>传统语言里面char相当于无符号整数，所以可以直接强行互转：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kt">char</span> <span class="n">ch</span> <span class="o">=</span> <span class="o">(</span><span class="kt">char</span><span class="o">)</span> <span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="sc">&#39;a&#39;</span><span class="o">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="n">ch</span> <span class="o">-</span> <span class="sc">&#39;a&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Python3</h4>

<p>大Python3中要用ord()和chr()来进行字符到整数的互转</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Python3'><span class='line'><span class="n">idx</span> <span class="o">=</span> <span class="nb">ord</span><span class="p">(</span><span class="n">ch</span><span class="p">)</span> <span class="o">-</span> <span class="nb">ord</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">ch</span> <span class="o">=</span> <span class="nb">chr</span><span class="p">(</span><span class="n">idx</span> <span class="o">+</span> <span class="nb">ord</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Kotlin</h4>

<p>因为Kotlin中没有所谓的基础类型，都是对象，所以就用对象提供的方法即可。字符转为整数用Char.code，要把数字字符转为对应字面的整数用Char.digitToInt，如:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">ch</span><span class="p">:</span> <span class="n">Char</span> <span class="p">=</span> <span class="sc">&#39;3&#39;</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;ch as int ${ch.code}, ch digit as int ${ch.digitToInt()}&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">// ch as int 51, ch digit as int 3</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果是想转成其他进制的整数，可以传入基数作为参数，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">hexCh</span> <span class="p">=</span> <span class="sc">&#39;F&#39;</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;hex ch ${hexCh.digitToInt(16)}&quot;</span><span class="p">)</span> <span class="c1">// 15</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为是基于JVM的，所以字符也可以用于计算，比如idx = ch - &lsquo;a&#8217;，这是完全没有问题的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">a</span> <span class="p">=</span> <span class="sc">&#39;a&#39;</span>
</span><span class='line'><span class="k">var</span> <span class="py">idx</span> <span class="p">=</span> <span class="sc">&#39;d&#39;</span> <span class="p">-</span> <span class="n">a</span>
</span><span class='line'><span class="k">val</span> <span class="py">aidx</span> <span class="p">=</span> <span class="n">idx</span> <span class="p">+</span> <span class="m">7</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;idx $idx, aidx to ch ${(aidx + &#39;a&#39;.code).toChar()}&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">//idx 3, aidx to ch k</span>
</span></code></pre></td></tr></table></div></figure>


<p>反过来，整数转到字符，用Int.toChar()就可以了，会按ASCII的code值去转。另外，如果想转成数字字符用Character.forDigit(ch, radix):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">d</span> <span class="p">=</span> <span class="m">8</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot; int to char ${d.toChar()}, to digit char ${Character.forDigit(d, 10)}&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>字符数组/列表转为String</h3>

<p>涉及字符的题目，一般需要转成字符数组处理后，再把字符数组转成字符串。</p>

<p>对于Java来说，String的构造方法支持传入char[]作为参数。</p>

<p>而Python3，其实就是字符列表转为字串，可以用join方法，这个方法是str提供的方法，用一个str当作分隔符来把一个列表连接起来：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Python3'><span class='line'><span class="n">chars</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;H&#39;</span><span class="p">,</span> <span class="s">&#39;e&#39;</span><span class="p">,</span> <span class="s">&#39;l&#39;</span><span class="p">,</span> <span class="s">&#39;l&#39;</span><span class="p">,</span> <span class="s">&#39;o&#39;</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">chars</span><span class="p">)</span> <span class="c"># &quot;Hello&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>同样，Kotlin中也有joinToString方法，它对数组和列表都支持，可以传入一个参数作为分隔符：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Kotlin'><span class='line'><span class="k">val</span> <span class="py">chars</span> <span class="p">=</span> <span class="n">charArrayOf</span><span class="p">(</span><span class="sc">&#39;H&#39;</span><span class="p">,</span> <span class="sc">&#39;e&#39;</span><span class="p">,</span> <span class="sc">&#39;l&#39;</span><span class="p">,</span> <span class="sc">&#39;l&#39;</span><span class="p">,</span> <span class="sc">&#39;o&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">val</span> <span class="py">res</span> <span class="p">=</span> <span class="n">chars</span><span class="p">.</span><span class="n">joinToString</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>压缩到位运算</h3>

<p>如果字符集合特别有限，比如只有有限几个字符，或者只有小写，只有大写，这时可以更进一步的，用位运算来进行优化。小写字符只有26个，一个整数有32位可以用，完全够用。</p>

<p>当满足以下两个条件时就可以考虑用位运算来优化：仅涉及两个状态，有和没有；另外就是字符或者组合后的集合范围在32个以内。</p>

<h3>典型问题</h3>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/sort-characters-by-frequency/">451. 根据字符出现频率排序</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/sort-characters-by-frequency/solution/451-gen-ju-zi-fu-chu-xian-pin-lu-pai-xu-01mur/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h2>变位词</h2>

<p>变位词是指对于一个字符串，把某几个字符位置换一下之后得到的字符串，与原串互为变位词。其实变位词不局限于字符串，对于任何一个线性列表来说，把某几个元素位置变一下就是互为变位词了。变位词有两大特点：字符集合是一样的，种类一样，频次也一样，但排列不一样。</p>

<p>基于它的特点，涉及变位词的问题，就变成了字符频次统计的问题了，如果两个字符串的字符频次一样，那么就互为变位词。另外的处理方式就是排序，因为只是排列不一样，所以按照同一规则排序后，两字符串就相同了，那么通过排序 来验证也可以可行的。具体处理时，要依据不同的条件来灵活选择具体的识别方式。</p>

<p>需要注意的是，当用频次统计法时，记得用桶而不是直接用哈希表。</p>

<h3>典型问题</h3>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/group-anagrams/">49. 字母异位词分组</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/group-anagrams/solution/49-zi-mu-yi-wei-ci-fen-zu-by-alexhilton-ni22/">题解</a> </td>
<td style="text-align:left;"> 排序法 </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h2>回文</h2>

<h3>典型问题</h3>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/longest-palindromic-substring/solution/">5. 最长回文子串</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/longest-palindromic-substring/solution/5-zui-chang-hui-wen-zi-chuan-by-alexhilt-6kvt/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h2>状态压缩</h2>

<h3>典型问题</h3>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/repeated-dna-sequences/">187. 重复的DNA序列</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/repeated-dna-sequences/solution/187-zhong-fu-de-dnaxu-lie-by-alexhilton-5or9/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h2>其他</h2>

<h3>典型问题</h3>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基础利器之Stack和Queue]]></title>
    <link href="http://toughcoder.net/blog/2023/03/05/stack-and-queue/"/>
    <updated>2023-03-05T10:11:21+08:00</updated>
    <id>http://toughcoder.net/blog/2023/03/05/stack-and-queue</id>
    <content type="html"><![CDATA[<p>在基础的数据结构中栈和队列使用极其广泛，其用法也很多，今天就来总结一下栈和队列的使用方法和相关的题目。</p>

<p><a href="http://toughcoder.net/blog/2023/03/05/stack-and-queue/"><img src="https://i0.wp.com/www.dineshonjava.com/wp-content/uploads/2017/01/stack-queue.png?fit=523%2C228&ssl=1" title="auto auto" ></a></p>

<!-- more -->


<h2>队列Queue</h2>

<p><img src="https://www.wisdomjobs.com/tutorials/representation-of-a-fifo-queue.png" alt="" /></p>

<h3>基本概念</h3>

<p>队列是一个线性数据 结构，特点是先入先出，也就是能保证先入队的元素先出队，也即FIFO First In First Out。与现实生活中的排队是一样的。</p>

<h3>基础应用</h3>

<p>应用很广泛，像消息队列，任务队列，以及像滑动窗口。</p>

<h4>典型题目</h4>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/qIsx9U/">剑指 Offer II 041. 滑动窗口的平均值</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/qIsx9U/solution/by-alexhilton-1c5a/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/design-circular-queue/">622. 设计循环队列</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/design-circular-queue/solution/622-she-ji-xun-huan-dui-lie-by-alexhilto-adr5/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h3>中级应用</h3>

<p>BFS要用到队列。</p>

<p>BFS可以<a href="http://toughcoder.net/blog/2022/09/02/bfs-and-dfs-made-easy/">参考另外一个文章</a>。</p>

<h4>典型题目</h4>

<h3>高级应用</h3>

<p>单调队列，队列中的元素以非递增顺序或者非递减顺序排列。</p>

<p>单调队列<a href="http://toughcoder.net/blog/2022/08/15/secret-weapon-monotonic-stack/">参见另外一个文章</a>。</p>

<h2>栈Stack</h2>

<p><img src="https://holycoders.com/content/images/2020/06/Stack.png" alt="" /></p>

<h3>基本概念</h3>

<p>也是一个线性结构，与队列类似，但它是先入后出，或者说后入先出，FILO First In Last Out。现实生活中也有，比如像盘子，通常是叠在一起的，这就是一个栈，一个一个叠 在一起，最后放上去的，最先拿下来用。</p>

<h3>基础应用</h3>

<p>程序运行时会用到栈，函数的调用会用到栈。还有一些模拟的场景也会用到栈，比如像处理括号和表达式一类的问题时。</p>

<h4>典型题目</h4>

<table>
<thead>
<tr>
<th style="text-align:left;"> 题目 </th>
<th style="text-align:left;"> 题解 </th>
<th style="text-align:left;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/valid-parentheses/">20. 有效的括号</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/valid-parentheses/solution/by-alexhilton-8tcu/">题解</a> </td>
<td style="text-align:left;"> 栈模拟 </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/min-stack/">155. 最小栈</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/min-stack/solution/by-alexhilton-20au/">题解</a> </td>
<td style="text-align:left;"> 栈模拟 </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/asteroid-collision/">735. 行星碰撞</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/asteroid-collision/solution/by-alexhilton-87ks/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/maximum-frequency-stack/">895. 最大频率栈</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/maximum-frequency-stack/solution/by-alexhilton-xdq9/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/validate-stack-sequences/">946. 验证栈序列</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/validate-stack-sequences/solution/946-yan-zheng-zhan-xu-lie-by-alexhilton-cjjq/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/build-an-array-with-stack-operations/">1441. 用栈操作构建数组</a></td>
<td style="text-align:left;"> <a href="https://leetcode.cn/problems/build-an-array-with-stack-operations/solution/1441-yong-zhan-cao-zuo-gou-jian-shu-zu-b-sw1y/">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:left;"> <a href=""></a></td>
<td style="text-align:left;"> <a href="">题解</a> </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<h3>中级应用</h3>

<p>DFS需要用到栈.</p>

<p>DFS可以<a href="http://toughcoder.net/blog/2022/09/02/bfs-and-dfs-made-easy/">参考另外一个文章</a>。</p>

<h3>高级应用</h3>

<p>单调栈<a href="http://toughcoder.net/blog/2022/08/15/secret-weapon-monotonic-stack/">参见另外一个文章</a>。</p>

<h2>双端队列Deque</h2>

<p>双端队列Deque读作dek，是两端都可以入队和出队，因此它即可以用作栈也可以用作队列，在实际使用中是最多的，大多数时候都尽可能用双端队列。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Table Tennis Road Map]]></title>
    <link href="http://toughcoder.net/blog/2023/02/22/table-tennis-road-map/"/>
    <updated>2023-02-22T21:28:33+08:00</updated>
    <id>http://toughcoder.net/blog/2023/02/22/table-tennis-road-map</id>
    <content type="html"><![CDATA[<p>乒乓球可以锻炼反应能力，运动量适中，场地要求不高，能放下球台就能玩，人数要求也不高，二个人就能玩，所以非常适合中老年人，打了一段时间感觉良好，但乱打还是不行的，需要好好入门，然后再慢慢提高。</p>

<p><a href="http://toughcoder.net/blog/2023/02/22/table-tennis-road-map/"><img src="https://www.athens2020.org/sites/default/files/styles/fullhd/public/disciplines-table-tennis.jpg?itok=tgR2uDF5" title="auto auto" ></a></p>

<!-- more -->


<p>注意，所有的动作均以右手横板为基准，因为尝试了各种手法，横板是最为舒服的，因此决定用横板。</p>

<h2>乒乓球核心要点</h2>

<p>其实乒乓球不难，但基础的东西一定要对，否则会养成不好的习惯，而一旦形成习惯了就很难改，所以从最开始，基本的动作都要按照 标准的来，打下良好的基础后，后续提高才会更顺利。</p>

<h3>放松，舒服</h3>

<p>运动一定是符合身体的自然规律的，所以一定要做到放松和舒服，凡是不舒服不放松就违被了自然规律，就一定是错的，不但效果不好，而且会去身体造成伤害。</p>

<p>比如站位，是又脚自然分开，一前一后，在中间偏左一点（惯用右手，横板），身体略向前。肩要放松，手腕肘都要放松，千万不能端着肩，提着肘，或者全身都绷的很紧，这是错误的。运动的规律都是在发力（击球时）的时候，是紧的，是端的，但绝大部分时间都是要自然放松，所有运动都是如此。</p>

<p>引拍，挥拍也要适度，让肘和手以身体为轴心自然的去旋转，而不要过度的引后（向后甩的太远），过度的挥拍（向前挥的太远）这都是不对的。</p>

<p>包括握拍，也要松紧适度，不用太紧的捏着，只有击球时需要握紧，不然容易飞出去，其余大部分时间，都是拿住拍子即可，只要拍不从手上掉下来即可，不用太紧，要放松，要自然。</p>

<p>时刻想着自然和舒服，始终处于一种自然和放松的状态。</p>

<h3>以身体为轴，用腰转动发力</h3>

<p>乒乓球的主要动作引拍和挥拍，都是以身体为轴，通过转动腰来进行，手腕，肘和肩都是不动的。向后转身，即是引拍，向前转身即是挥拍。</p>

<p>要仔细体会这个要领，用腰的转动来实现引拍和挥拍，身体的各个部位都没有位移，只有转动。</p>

<h3>重心轮换</h3>

<p>两脚 自然分开，略比肩宽，一前一后，重心随着身体的转动而不停在两脚 之间切换。正常时重心在左脚上，引拍时，向后转动，重心到了右脚上，向前转身，挥拍击球，重心又回到左脚 上，然后再向后转心，还原动作。</p>

<h3>还原动作，专注于球，提前调整位置</h3>

<p>击球后，要立刻还原动作，然后专注于球，预判球的方位，远近，然后调整位置，同时引拍，准备击球。</p>

<h2>具体技术要点</h2>

<ol>
<li>站位，站在中线的左边，身体不能超过中线</li>
<li>左脚在前，右脚 在后，重心在左脚上，两脚略比肩宽，身体略前倾</li>
<li>肩放松，肘放松，腕放松，手放松，不能端着，不能紧绷着，要放松</li>
<li>不要抬肘，一定不能抬肘，要自然放松</li>
<li>拍子，腕，肘要成一个直线，拍了向前斜，与台面约45度角</li>
<li>球在身体右边，用正手攻球，就是向右后转身，引拍，击球，然后还原</li>
<li>球在身体左边，用反手攻球，向左后转身，引拍，击求，然后还原</li>
<li>想要击球有力度，就引拍幅度大一些，力量靠身休转动的角度发出来的，而不是肘或者手腕（身体是轴心，手臂是半径，转动角度越大，产生的力矩就越大）</li>
<li>拍子要始终与台面形成斜角，这样击球才会有旋转，并且球会速度快且向下飞，而不是速度慢向上飞（那就被挑起来了，会被对方狠拍杀死），球要越旋越好，越低越好，越快越好。所以，拍子要压低与台面的斜角，角度越小越好。</li>
</ol>


<p><img src="https://so1.360tres.com/t014e6a3a2efc70251f.jpg" alt="" />
所以，总结 起来，其实乒乓球就两个主要动作，向右后转身，然后还原（正手攻球）；向左后转身，然后还原（反手攻球），不打球时，也可以练习这些基本动作。
<img src="https://file.zhibo.tv/uploads/imgs/2021/06-07/1623061996619420_2606x1817.jpg" alt="" /></p>

<h2>四大打法</h2>

<h3>抽</h3>

<p>拍子向前斜，与台面呈斜角，从下向上击球，这是抽，正手攻球，反手基本都是抽。引拍幅度要大一些，球拍角度要圧低一些，这样回球力度大，速度快，旋转好，高度低。打出来的都是上旋球。</p>

<p>适合长球，球在台面外，球下落时，从下向上抽。</p>

<h3>推</h3>

<p>拍子，稍向前斜，比抽时斜角要大，几乎快直立。拍子不动，手腕不动，是整个手臂（肘，腕和拍）整体向前推，推的过程中拍子腕和肘仍呈直线，相对位置不变，是整体向前推。</p>

<p>适合，反手时，球比较高，球在台面上，球速也不快时，把球推回对方。当然 也有快推和慢推，但整体差别不大，打出来的球也基本没旋转，球速也不快，也很高。很容易被对方直接快速抽回来。</p>

<h3>削</h3>

<p>拍向后斜，从上向下击球，这是削。打出来的是下旋球
<img src="https://www.ttline.cn/uploadfile/ueditor/image/2022/02/4085168991547474880.jpg" alt="" />
适合球比较高时，在台面上，或者在台面外都可以，但一定要比较高。</p>

<h3>搓</h3>

<p>拍子向下斜，与台面的斜角是负的，基本是直着向前搓球。</p>

<p><img src="https://tse3-mm.cn.bing.net/th/id/OIP-C.-yw5SLZUxW0Tgg88poSb-QHaE8?pid=ImgDet&amp;rs=1" alt="" /></p>

<p>适合台内的短球。搓出来的也是下旋球。</p>
]]></content>
  </entry>
  
</feed>
