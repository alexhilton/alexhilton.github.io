<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[稀有猿诉]]></title>
  <link href="http://toughcoder.net/atom.xml" rel="self"/>
  <link href="http://toughcoder.net/"/>
  <updated>2022-01-07T00:17:30+08:00</updated>
  <id>http://toughcoder.net/</id>
  <author>
    <name><![CDATA[Alex Hilton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android Sync Barrier机制]]></title>
    <link href="http://toughcoder.net/blog/2022/01/07/android-sync-barrier-mechanism/"/>
    <updated>2022-01-07T00:06:33+08:00</updated>
    <id>http://toughcoder.net/blog/2022/01/07/android-sync-barrier-mechanism</id>
    <content type="html"><![CDATA[<h2>诡异的假死问题</h2>

<p>前段时间，项目上遇到了一个假死问题，随机出现，无固定复现规律，大量频繁随机操作后，便会出现假死，整个应用无法操作，不会响应事件，会发生各种奇怪的ANR，且trace不固定。非常之诡异。</p>

<p>经过大量的复现研究和分析， 以及大神的指点后，发现与同步屏障（Sync Barrier）有关系，于是发现有必要研究一下这个东西。</p>

<p><a href="http://toughcoder.net/blog/2022/01/07/android-sync-barrier-mechanism/"><img src="http://www.cse.chalmers.se/edu/year/2016/course/course/TDA383_LP1/assets/img/barrier.png" title="auto auto" ></a></p>

<!-- more -->


<h2>什么是Sync Barrier机制</h2>

<p>这是安卓线程消息队列里面的一个新增加的东西，这么说还是太抽象，我们从头说起这件事情：</p>

<h4>安卓的消息队列机制</h4>

<p>消息队列，或者叫做Event Loop，通常在任何一个GUI应用程序里面都会有的，应用大部分时间处于Idle状态，当有事件发生时，比如用户点了一个button，然后开始响应此事件。安卓也是一个GUI应用程序，绝大多数都是带有GUI的应用程序，那么安卓 里面是如何实现这个EventLoop的呢，它是用Looper和MessageQueue，以及Handler，以一种消息队列的方式来实现loop。</p>

<p>有一定经验的同学对这些东西肯定不陌生，因为它们在实际的开发过程中相当常见，比如说对于UI的操作只能放在主线程里面，那么当工作线程想要更新UI时就需要用Handler发一个消息，或者post一个Runnable。或者当你想延后一段时间执行某种操作，就可以用postDelayed。这些都是非常常规的操作了。对于工作线程，如果想启用消息队列，就用Looper#prepare就可以了，当然了，要记得quit。</p>

<p>内部原理上面也不是很复杂，就是Looper会给线程绑定一个消息队列，即是MessageQueue，这是一个无限循环的队列，不断的轮询队列，当有新的消息时就去处理，否则就等待。主线程，安卓框架层在创建应用进程的时候就会给主线程默认创建好MessageQueue，所以就可以向其发消息（sendMessage）或者postDelayed，它们本质上都是一样的，都是向MessageQueue中入队一个消息，稍后它便会得到处理。</p>

<p><img src="https://blog.ycshao.com/2020/08/30/event-loop-and-concurrency/Event%20Loop%20With%20Single%20Worker.png" alt="" /></p>

<h4>同步消息与异步消息</h4>

<p>这个MessageQueue机制，就是队列，也就是说符合队列的特点，先进先出（FIFO，First-In First Out），就是说你先post的消息，肯定是先被处理，后post的后处理，即使有delay时候，也是看谁先到，谁先到谁先被处理。因此，这里面的消息全是同步，也就是说所有消息都是顺序处理，这就是同步消息。</p>

<p>异步消息，也就是说某个消息，想被最高优先级处理，无视发送消息的时机，比如说队列里面有8个消息，如何想让某个消息最先被处理？这时队列就变成了优先队列，有优先级的队列。那么具有高优先级的消息也是异步消息（Asynchronous Message）。即使是最后加入队列的，但因为是异步消息，它会被先处理，并不是FIFO，此可理解 为异步。</p>

<h4>Sync Barrier用以实现优先队列</h4>

<p>说了这么多，Sync Barrier就是安卓 内部用以实现优先级队列的一种方式。</p>

<p>当队列中出现Sync barrier（具体实现上就是Message#target为null）时，就会忽略所有同步消息，寻找异步消息（isAsynchrouns为true）的消息，然后优先处理它。</p>

<p>需要注意的是，把消息标记为异步，以及向消息队列中发送Sync barrier，这些API全部都是hide的，也就是说app中是无法使用的，通过反射也许能调用成功，但风险也较大，后续会被谷歌限制调用。换言之，这东西只能在Frameworks层内部自己使用。</p>

<h2>为什么要有Sync Barrier</h2>

<p>说了这么多，其实本质上，这东西就是一个优先队列，给要处理的消息加一个优先级机制，那这有什么实际用途呢？</p>

<p>消息队列这东西是在安卓一诞生就有了的东西，大部分时候它也没有什么问题。但有一个事情，就是安卓操作系统的UI流畅度远不及水果平台（iOS），原因就是在于水果平台的UI渲染是整个系统中最高优先执行。</p>

<p>有同学会说安卓里面也是这样啊，你想UI都只能在主线程里面操作（因此主线程也叫UI线程）。只能在主线程中操作UI，就能保证UI渲染是最高优先级吗？当然不是了。因为整个应用程序的默认线程就是主线程，换句话说，如果你不明显的去做线程切换，或者启用工作线程，那么所有事情都发生在主线程里面，当然 也包括了UI渲染，因此UI的渲染与你在主线程时面post一个消息的优先级是一样的。</p>

<p>如何让UI渲染在主线程中以最高优先级运行？于是就有了Sync barrier机制，这东西就是为了让消息队列有优先级，并且没有开放给app使用。可以去看一下ViewRootImpl（这货是专门负责ViewTree渲染的，也即可以理解为负责UI渲染的）的几个perform，它都是异步消息，也即会开启Sync barrier，它发送的消息将会是最高优先级的，会被优先处理。</p>

<h2>主要在哪里用Sync barrier</h2>

<p>前面提到了，Sync barrier这玩意儿并不是给app开发同学用的，很多相关的接口并没有开放出来，这是为了提高UI渲染而设计的东西。因此这东西主要是用在了UI渲染过程中。</p>

<p>仔细查看ViewRootImpl的源码可以发现，每次渲染View tree之前都会先给主线程插入一个Sync barrier，以挡住同步消息，以保证渲染被主线程优先执行到。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@UnsupportedAppUsage</span><span class="o">(</span><span class="n">maxTargetSdk</span> <span class="o">=</span> <span class="n">Build</span><span class="o">.</span><span class="na">VERSION_CODES</span><span class="o">.</span><span class="na">R</span><span class="o">,</span> <span class="n">trackingBug</span> <span class="o">=</span> <span class="mi">170729553</span><span class="o">)</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">scheduleTraversals</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">mTraversalScheduled</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mTraversalScheduled</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="n">mTraversalBarrier</span> <span class="o">=</span> <span class="n">mHandler</span><span class="o">.</span><span class="na">getLooper</span><span class="o">().</span><span class="na">getQueue</span><span class="o">().</span><span class="na">postSyncBarrier</span><span class="o">();</span>
</span><span class='line'>        <span class="n">mChoreographer</span><span class="o">.</span><span class="na">postCallback</span><span class="o">(</span>
</span><span class='line'>                <span class="n">Choreographer</span><span class="o">.</span><span class="na">CALLBACK_TRAVERSAL</span><span class="o">,</span> <span class="n">mTraversalRunnable</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>        <span class="n">notifyRendererOfFramePending</span><span class="o">();</span>
</span><span class='line'>        <span class="n">pokeDrawLockIfNeeded</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">unscheduleTraversals</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mTraversalScheduled</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mTraversalScheduled</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="n">mHandler</span><span class="o">.</span><span class="na">getLooper</span><span class="o">().</span><span class="na">getQueue</span><span class="o">().</span><span class="na">removeSyncBarrier</span><span class="o">(</span><span class="n">mTraversalBarrier</span><span class="o">);</span>
</span><span class='line'>        <span class="n">mChoreographer</span><span class="o">.</span><span class="na">removeCallbacks</span><span class="o">(</span>
</span><span class='line'>                <span class="n">Choreographer</span><span class="o">.</span><span class="na">CALLBACK_TRAVERSAL</span><span class="o">,</span> <span class="n">mTraversalRunnable</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">doTraversal</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mTraversalScheduled</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mTraversalScheduled</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="n">mHandler</span><span class="o">.</span><span class="na">getLooper</span><span class="o">().</span><span class="na">getQueue</span><span class="o">().</span><span class="na">removeSyncBarrier</span><span class="o">(</span><span class="n">mTraversalBarrier</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">performTraversals</span><span class="o">();</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的逻辑略复杂一些，View tree本身的处理过程，也即三大步measure, layout和draw，也就是performTraversal本身并没有异步消息，它是在准备渲染的时候放一个sync barrier，而在具体处理每一帧前就移除了sync barrier，这里为何要这样，还没有完全想清楚。通过搜索ViewRootImpl可以发现只有input event，keyevent 以及与用户输入相关的消息被设置为了asynchronous，也就是说用户事件响应被提高了优先级，而view tree的渲染，即UI的每一帧，其实并没有被提升优先级。因为UI刷的每一帧是以固定频率刷新的，Choreographer 从硬件得到vsync脉冲信号，然后回调给ViewRootImpl让其渲染每一帧（也即是performTraversal）。</p>

<h2>Sync Barrier会引发什么问题</h2>

<p>说实话，这套机制，实现的并不怎么优雅，因为，毕竟它并不是在最初的设计之初就考虑到的东西，它的整体运行机制并不完善，非常依赖于调用者的使用，所以它的相关API并未有开放出来。</p>

<p>它有三步，先发一个Sync barrier，然后发送异步消息，然后再移除Sync barrier。</p>

<p>只有UI渲染（ViewTree的相关操作，才需要这样做），大部分其他的消息都是同步的，并不需要这样搞。当有Sync barrier时，消息队列在处理消息的时候会忽略掉所有的同步消息（也即是常规消息），优先处理异步消息，直到Sync barrier移除，也是需要手动移除的。Sync barrier需要手动移除是最坑的。</p>

<p>因此，假如要处理的异步特别多，或者逻辑出错Sync barrier没有被移除，那就悲剧 了，就会导致消息队列中的大量常规消息无法得到处理，队列就会停止工作，应用会出现随机的ANR，以及假死。</p>

<h2>如何调试</h2>

<p>很不幸，Sync barrier导致的问题很难调试，甚至很难被发现，通常都是ANR或者说卡死问题。</p>

<p>那么首先可以按照ANR和卡死的常规分析方式去分析，假如都未发现明显的问题时，比如没有明显的耗时的操作，也没有死锁，也没有被硬件和IO阻塞，也没有进入死循环。</p>

<p>这些常规的分析，都没有发现问题。这时就可以考虑是不是Sync barrier在搞鬼。特别当涉及一些诡异的UI状态时，比如某个View只显示 了一半，比如某一个View没有显示 完全，比如只有背景没有前景，等等，当排除了其他常规问题时，就很可能是Sync barrier有异常导致的。</p>

<p>另外，如果有能力修改Frameworks的话，可以给MessageQueue增加dump信息，把队列中的所有消息都打印出来，以及把Sycn barrier也都打印出来，这样能够比较清楚看到，队列内部的情况，自然也能够发现异常的Sync barrier。</p>

<h2>如何避免Sync Barrier搞鬼</h2>

<p>前面提到过，这套东西都是Frameworks层内部的机制，并没有开放给app使用，而Frameworks内部的逻辑一般来说还是相当健壮的，绝大多数时候并不会出问题。当然了，各个厂商内部搞的各种所谓优化，倒是有可能会引发问题。</p>

<p>在实际开发过程中，引发Sync barrier的最多场景就是自定义View。对于自定义View，是能够在非主线程调用其invalidate的，当有大量的非主线程调用invalidate时，就有可能恰好与主线程的渲染发生交互，具体case非常corner要刚巧非主线程在postInvalide，然后主线程也刚巧在发送异步消息，就可能使得Sync barrier没有被移除，从而导致问题。</p>

<p>这就需要我们在编码阶段做好封装，对于自定义View的刷新触发逻辑做好封装，做一下线程切换，以保证是在主线程里面执行invalidate。因为暴露出去的接口，是没有办法控制的，你没有办法让所有调用者都在主线程里面调用你的接口。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://blog.csdn.net/jdsjlzx/article/details/110563162">Handler sync barrier（同步屏障）</a></li>
<li><a href="https://hningoba.github.io/2019/12/06/Android%20%E5%90%8C%E6%AD%A5%E5%B1%8F%E9%9A%9C%E6%9C%BA%E5%88%B6(Sync%20Barrier">Android 同步屏障机制(Sync Barrier)</a>/)</li>
<li><a href="https://xiaozhuanlan.com/topic/0843791256">同步屏障？阻塞唤醒？和我一起重读 Handler 源码</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&amp;mid=2650839366&amp;idx=2&amp;sn=94536e87f552314acd1e4620109c3c9b&amp;chksm=80b74dd8b7c0c4ce3d4945d690d50feae9b7c2d7009ce113b90cc99712703521c31c75fe2026&amp;mpshare=1&amp;scene=1&amp;srcid=1230rTWKhDHdFQTcru6ohx67&amp;sharer_sharetime=1640838623088&amp;sharer_shareid=80824a30f91a8c144cac1fea148f525a#rd">同步屏障与异步消息，从入门到放弃</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&amp;mid=2650837028&amp;idx=2&amp;sn=b37f149f3ade5f8cf1bebb49487ed1df&amp;chksm=80b744bab7c0cdaca13a90022b4e8b949c1003a9b606c81ee8ac159377e328b358457d79a3b7&amp;scene=21#wechat_redirect">面试官：如何提高Message的优先级</a></li>
<li><a href="https://juejin.cn/post/6947986170135445535">今日头条 ANR 优化实践系列 - Barrier 导致主线程假死</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Animation Internal Secrets]]></title>
    <link href="http://toughcoder.net/blog/2021/09/14/android-animation-internal-secrets/"/>
    <updated>2021-09-14T21:07:00+08:00</updated>
    <id>http://toughcoder.net/blog/2021/09/14/android-animation-internal-secrets</id>
    <content type="html"><![CDATA[<p>前面的文章重点讲了如何使用安卓平台提供的能力来做好一个动画。为了更深入的理解，需要去了解一下动画框架的内部机理，这样能够帮助我们做出更优雅的动画实现。</p>

<p><a href="http://toughcoder.net/blog/2021/09/14/android-animation-internal-secrets/"><img src="https://raw.githubusercontent.com/OCNYang/Android-Animation-Set/master/app/src/main/res/drawable/header_bg.jpg?token=AQ83Mm1lTKd-0jwgDJ9K3tNGJbk9OI9iks5axtyQwA%3D%3D" title="auto auto" ></a></p>

<!-- more -->


<h2><a href="https://developer.android.com/guide/topics/graphics/view-animation">View Animation</a>的原理</h2>

<h3>View Animation源码解析</h3>

<p>View animation的代码都是在<a href="https://developer.android.com/reference/android/view/animation/package-summary">android.view.animation</a>包下面。</p>

<p>这里面主要有三个东西，下面来分别仔细说说</p>

<h4><a href=".https://developer.android.com/reference/android/view/animation/Animation">Animation</a></h4>

<p>主要是抽象类<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/animation/Animation.java">Animation</a>以及它的四大子类，也是View animation中的四大变幻对象&ndash;位移变幻<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/animation/TranslateAnimation.java">TranslateAnimation</a>，缩放变幻<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/animation/ScaleAnimation.java">ScaleAnimation</a>，旋转变幻<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/animation/RotateAnimation.java">RotateAnimation</a>和渐变变幻<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/animation/AlphaAnimation.java">AlphaAnimation</a>。</p>

<p>以及一些工具对象，如<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/animation/AnimationSet.java">AnimationSet</a>和<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/animation/AnimationUtils.java">AnimationUtils</a>。</p>

<p>仔细看这些类的源码可以发现，其实它们不复杂，里面也没啥东西，主要是用于各种参数管理，相当于封装出来的工具和原料，具体内部的原理并不在这里。仔细看四大变幻的<a href="https://developer.android.com/reference/android/view/animation/Animation#applyTransformation(float,%20android.view.animation.Transformation)">applyTransformation</a>方法，可以发现这一坨把最接近『原理』的东西都放在了一个叫做Transformation的对象中去了。</p>

<h4><a href="https://developer.android.com/reference/android/view/animation/Transformation">Transformation</a></h4>

<p>直译变幻，但文档中的定义是动画过程中某一时刻应该做的变幻，此为<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/animation/Transformation.java">Transformation</a>。</p>

<p>这货的实现也不复杂，它也就是个中间商，只是一个存储从Animation传过来的参数 的中间变量，它里面有一个Alpha成员参数用以保存当前的渐变参数值，以及一个<a href="https://developer.android.com/reference/android/graphics/Matrix">Matrix</a>，Matrix可以保存当前的位移，旋转和缩放。Matrix应该不算太陌生，处理过<a href="https://developer.android.com/reference/android/graphics/Bitmap">Bitmap</a>变幻的同学，对它应该会有了解，都是通过Matrix来设置参数的。</p>

<h4><a href="https://developer.android.com/reference/android/view/animation/Interpolator">Interpolator</a></h4>

<p>动画是随时间变化的一系列视觉变幻，因人眼视觉残留，连在一起就是动画，跟电影是一个道理。这里就有一个非常关键的参数就是时间。时间对于动画来说体现在两方面一是时长，就是整个动画持续 的时间，另外一个就是变幻变化的速率，也就是说动画播放速度的变化率。其实，这里变化的并不是时间，时间是永恒的以固定速度在流逝，对于动画来说，帧率是固定的，后面会谈到，动画的帧率是由时间驱动器驱动的，它是以固定的时间脉冲来回调渲染动画的每一帧。这里的时间变化其实是做动画的每一帧时用到的参数 的变化，它并不是线性的，假设动画一共有10帧，要把View向右移动100px，默认是线性的，匀速的，也即每一帧都向前移动10px，但如果使用加速插值器，那么可能就是一个变加速运动，第1帧可能在0px，第2帧在5px，第3帧25px，第4帧到36px，以此类推。</p>

<p>时间插值器，就是用来调整播放速度的，用以实现时间变化。</p>

<h3>View Animation的渲染原理</h3>

<p>从前面的讨论来看，动画的渲染跟那几个对象都没有关系，使用View animation的时候，只有两种方法可以让动画生效，一是调用<a href="https://developer.android.com/reference/android/view/View?hl=en#startAnimation(android.view.animation.Animation)">View#startAnimation</a>，另外一个是<a href="https://developer.android.com/reference/android/view/View?hl=en#setAnimation(android.view.animation.Animation)">View#setAnimation</a>，然后再<a href="https://developer.android.com/reference/kotlin/android/view/animation/Animation?hl=en#start()">Animation#start</a>。</p>

<p>假如没有把Animation塞给某一个具体的View对象，光是调用Animation#start，是不会有任何影响和效果的。这说明动画的渲染是在View对象draw时做的，没有与具体View对象建立关联的动画是没有任何效果的。所以动画的渲染主要还要看View本身的逻辑。</p>

<p>可以从View#setAnimation和View#startAnimation入手来看，这两个方法只是把外部传进来的Animation对象保存在了一个叫做mCurrentAnimation成员里面，其他的什么也没做。查询索引，关键的地方有两个，一个是View#applyLegacyAnimation方法，另外一个就是View#draw方法。</p>

<p>先来看View#applyLegacyAnimation方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>   <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Utility function, called by draw(canvas, parent, drawingTime) to handle the less common</span>
</span><span class='line'><span class="cm">     * case of an active Animation being run on the view.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">applyLegacyAnimation</span><span class="o">(</span><span class="n">ViewGroup</span> <span class="n">parent</span><span class="o">,</span> <span class="kt">long</span> <span class="n">drawingTime</span><span class="o">,</span>
</span><span class='line'>            <span class="n">Animation</span> <span class="n">a</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">scalingRequired</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Transformation</span> <span class="n">invalidationTransform</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">int</span> <span class="n">flags</span> <span class="o">=</span> <span class="n">parent</span><span class="o">.</span><span class="na">mGroupFlags</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">initialized</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="na">isInitialized</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">initialized</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">a</span><span class="o">.</span><span class="na">initialize</span><span class="o">(</span><span class="n">mRight</span> <span class="o">-</span> <span class="n">mLeft</span><span class="o">,</span> <span class="n">mBottom</span> <span class="o">-</span> <span class="n">mTop</span><span class="o">,</span> <span class="n">parent</span><span class="o">.</span><span class="na">getWidth</span><span class="o">(),</span> <span class="n">parent</span><span class="o">.</span><span class="na">getHeight</span><span class="o">());</span>
</span><span class='line'>            <span class="n">a</span><span class="o">.</span><span class="na">initializeInvalidateRegion</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">mRight</span> <span class="o">-</span> <span class="n">mLeft</span><span class="o">,</span> <span class="n">mBottom</span> <span class="o">-</span> <span class="n">mTop</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">mAttachInfo</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="n">a</span><span class="o">.</span><span class="na">setListenerHandler</span><span class="o">(</span><span class="n">mAttachInfo</span><span class="o">.</span><span class="na">mHandler</span><span class="o">);</span>
</span><span class='line'>            <span class="n">onAnimationStart</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">final</span> <span class="n">Transformation</span> <span class="n">t</span> <span class="o">=</span> <span class="n">parent</span><span class="o">.</span><span class="na">getChildTransformation</span><span class="o">();</span>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">more</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="na">getTransformation</span><span class="o">(</span><span class="n">drawingTime</span><span class="o">,</span> <span class="n">t</span><span class="o">,</span> <span class="mi">1</span><span class="n">f</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">scalingRequired</span> <span class="o">&amp;&amp;</span> <span class="n">mAttachInfo</span><span class="o">.</span><span class="na">mApplicationScale</span> <span class="o">!=</span> <span class="mi">1</span><span class="n">f</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">parent</span><span class="o">.</span><span class="na">mInvalidationTransformation</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">parent</span><span class="o">.</span><span class="na">mInvalidationTransformation</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Transformation</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">invalidationTransform</span> <span class="o">=</span> <span class="n">parent</span><span class="o">.</span><span class="na">mInvalidationTransformation</span><span class="o">;</span>
</span><span class='line'>            <span class="n">a</span><span class="o">.</span><span class="na">getTransformation</span><span class="o">(</span><span class="n">drawingTime</span><span class="o">,</span> <span class="n">invalidationTransform</span><span class="o">,</span> <span class="mi">1</span><span class="n">f</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">invalidationTransform</span> <span class="o">=</span> <span class="n">t</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">more</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(!</span><span class="n">a</span><span class="o">.</span><span class="na">willChangeBounds</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">((</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="o">(</span><span class="n">ViewGroup</span><span class="o">.</span><span class="na">FLAG_OPTIMIZE_INVALIDATE</span> <span class="o">|</span> <span class="n">ViewGroup</span><span class="o">.</span><span class="na">FLAG_ANIMATION_DONE</span><span class="o">))</span> <span class="o">==</span>
</span><span class='line'>                        <span class="n">ViewGroup</span><span class="o">.</span><span class="na">FLAG_OPTIMIZE_INVALIDATE</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">parent</span><span class="o">.</span><span class="na">mGroupFlags</span> <span class="o">|=</span> <span class="n">ViewGroup</span><span class="o">.</span><span class="na">FLAG_INVALIDATE_REQUIRED</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">((</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">ViewGroup</span><span class="o">.</span><span class="na">FLAG_INVALIDATE_REQUIRED</span><span class="o">)</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="c1">// The child need to draw an animation, potentially offscreen, so</span>
</span><span class='line'>                    <span class="c1">// make sure we do not cancel invalidate requests</span>
</span><span class='line'>                    <span class="n">parent</span><span class="o">.</span><span class="na">mPrivateFlags</span> <span class="o">|=</span> <span class="n">PFLAG_DRAW_ANIMATION</span><span class="o">;</span>
</span><span class='line'>                    <span class="n">parent</span><span class="o">.</span><span class="na">invalidate</span><span class="o">(</span><span class="n">mLeft</span><span class="o">,</span> <span class="n">mTop</span><span class="o">,</span> <span class="n">mRight</span><span class="o">,</span> <span class="n">mBottom</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">parent</span><span class="o">.</span><span class="na">mInvalidateRegion</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">parent</span><span class="o">.</span><span class="na">mInvalidateRegion</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">RectF</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="kd">final</span> <span class="n">RectF</span> <span class="n">region</span> <span class="o">=</span> <span class="n">parent</span><span class="o">.</span><span class="na">mInvalidateRegion</span><span class="o">;</span>
</span><span class='line'>                <span class="n">a</span><span class="o">.</span><span class="na">getInvalidateRegion</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">mRight</span> <span class="o">-</span> <span class="n">mLeft</span><span class="o">,</span> <span class="n">mBottom</span> <span class="o">-</span> <span class="n">mTop</span><span class="o">,</span> <span class="n">region</span><span class="o">,</span>
</span><span class='line'>                        <span class="n">invalidationTransform</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// The child need to draw an animation, potentially offscreen, so</span>
</span><span class='line'>                <span class="c1">// make sure we do not cancel invalidate requests</span>
</span><span class='line'>                <span class="n">parent</span><span class="o">.</span><span class="na">mPrivateFlags</span> <span class="o">|=</span> <span class="n">PFLAG_DRAW_ANIMATION</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="kd">final</span> <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">mLeft</span> <span class="o">+</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">region</span><span class="o">.</span><span class="na">left</span><span class="o">;</span>
</span><span class='line'>                <span class="kd">final</span> <span class="kt">int</span> <span class="n">top</span> <span class="o">=</span> <span class="n">mTop</span> <span class="o">+</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">region</span><span class="o">.</span><span class="na">top</span><span class="o">;</span>
</span><span class='line'>                <span class="n">parent</span><span class="o">.</span><span class="na">invalidate</span><span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">top</span><span class="o">,</span> <span class="n">left</span> <span class="o">+</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">region</span><span class="o">.</span><span class="na">width</span><span class="o">()</span> <span class="o">+</span> <span class="o">.</span><span class="mi">5</span><span class="n">f</span><span class="o">),</span>
</span><span class='line'>                        <span class="n">top</span> <span class="o">+</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">region</span><span class="o">.</span><span class="na">height</span><span class="o">()</span> <span class="o">+</span> <span class="o">.</span><span class="mi">5</span><span class="n">f</span><span class="o">));</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">more</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个方法看着比较长，但它就做了三件事情：1）初始化动画；2）获取当前时刻的Transformation；3）如果动画还没有完（还有下一帧），那就得调用View的invalidate，得重绘。</p>

<p>再看使用此方法的地方，是在draw，需要注意是带有三个参数的那个draw，在<a href="http://toughcoder.net/blog/2020/07/26/android-view-render-flow/">前面的文章里面</a>介绍过，这个draw方法是由ViewGroup#dispatchDraw中drawChild时调用的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>   <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * This method is called by ViewGroup.drawChild() to have each child view draw itself.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * This is where the View specializes rendering behavior based on layer type,</span>
</span><span class='line'><span class="cm">     * and hardware acceleration.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="nf">draw</span><span class="o">(</span><span class="n">Canvas</span> <span class="n">canvas</span><span class="o">,</span> <span class="n">ViewGroup</span> <span class="n">parent</span><span class="o">,</span> <span class="kt">long</span> <span class="n">drawingTime</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">hardwareAcceleratedCanvas</span> <span class="o">=</span> <span class="n">canvas</span><span class="o">.</span><span class="na">isHardwareAccelerated</span><span class="o">();</span>
</span><span class='line'>        <span class="cm">/* If an attached view draws to a HW canvas, it may use its RenderNode + DisplayList.</span>
</span><span class='line'><span class="cm">         *</span>
</span><span class='line'><span class="cm">         * If a view is dettached, its DisplayList shouldn&#39;t exist. If the canvas isn&#39;t</span>
</span><span class='line'><span class="cm">         * HW accelerated, it can&#39;t handle drawing RenderNodes.</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">drawingWithRenderNode</span> <span class="o">=</span> <span class="n">mAttachInfo</span> <span class="o">!=</span> <span class="kc">null</span>
</span><span class='line'>                <span class="o">&amp;&amp;</span> <span class="n">mAttachInfo</span><span class="o">.</span><span class="na">mHardwareAccelerated</span>
</span><span class='line'>                <span class="o">&amp;&amp;</span> <span class="n">hardwareAcceleratedCanvas</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">more</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">childHasIdentityMatrix</span> <span class="o">=</span> <span class="n">hasIdentityMatrix</span><span class="o">();</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">int</span> <span class="n">parentFlags</span> <span class="o">=</span> <span class="n">parent</span><span class="o">.</span><span class="na">mGroupFlags</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">((</span><span class="n">parentFlags</span> <span class="o">&amp;</span> <span class="n">ViewGroup</span><span class="o">.</span><span class="na">FLAG_CLEAR_TRANSFORMATION</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">parent</span><span class="o">.</span><span class="na">getChildTransformation</span><span class="o">().</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'>            <span class="n">parent</span><span class="o">.</span><span class="na">mGroupFlags</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="n">ViewGroup</span><span class="o">.</span><span class="na">FLAG_CLEAR_TRANSFORMATION</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Transformation</span> <span class="n">transformToApply</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">concatMatrix</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">scalingRequired</span> <span class="o">=</span> <span class="n">mAttachInfo</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">mAttachInfo</span><span class="o">.</span><span class="na">mScalingRequired</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">Animation</span> <span class="n">a</span> <span class="o">=</span> <span class="n">getAnimation</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">a</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">more</span> <span class="o">=</span> <span class="n">applyLegacyAnimation</span><span class="o">(</span><span class="n">parent</span><span class="o">,</span> <span class="n">drawingTime</span><span class="o">,</span> <span class="n">a</span><span class="o">,</span> <span class="n">scalingRequired</span><span class="o">);</span>
</span><span class='line'>            <span class="n">concatMatrix</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="na">willChangeTransformationMatrix</span><span class="o">();</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">concatMatrix</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">mPrivateFlags3</span> <span class="o">|=</span> <span class="n">PFLAG3_VIEW_IS_ANIMATING_TRANSFORM</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">transformToApply</span> <span class="o">=</span> <span class="n">parent</span><span class="o">.</span><span class="na">getChildTransformation</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">((</span><span class="n">mPrivateFlags3</span> <span class="o">&amp;</span> <span class="n">PFLAG3_VIEW_IS_ANIMATING_TRANSFORM</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// No longer animating: clear out old animation matrix</span>
</span><span class='line'>                <span class="n">mRenderNode</span><span class="o">.</span><span class="na">setAnimationMatrix</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>                <span class="n">mPrivateFlags3</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="n">PFLAG3_VIEW_IS_ANIMATING_TRANSFORM</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(!</span><span class="n">drawingWithRenderNode</span>
</span><span class='line'>                    <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">parentFlags</span> <span class="o">&amp;</span> <span class="n">ViewGroup</span><span class="o">.</span><span class="na">FLAG_SUPPORT_STATIC_TRANSFORMATIONS</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="kd">final</span> <span class="n">Transformation</span> <span class="n">t</span> <span class="o">=</span> <span class="n">parent</span><span class="o">.</span><span class="na">getChildTransformation</span><span class="o">();</span>
</span><span class='line'>                <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">hasTransform</span> <span class="o">=</span> <span class="n">parent</span><span class="o">.</span><span class="na">getChildStaticTransformation</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">t</span><span class="o">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">hasTransform</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="kd">final</span> <span class="kt">int</span> <span class="n">transformType</span> <span class="o">=</span> <span class="n">t</span><span class="o">.</span><span class="na">getTransformationType</span><span class="o">();</span>
</span><span class='line'>                    <span class="n">transformToApply</span> <span class="o">=</span> <span class="n">transformType</span> <span class="o">!=</span> <span class="n">Transformation</span><span class="o">.</span><span class="na">TYPE_IDENTITY</span> <span class="o">?</span> <span class="n">t</span> <span class="o">:</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>                    <span class="n">concatMatrix</span> <span class="o">=</span> <span class="o">(</span><span class="n">transformType</span> <span class="o">&amp;</span> <span class="n">Transformation</span><span class="o">.</span><span class="na">TYPE_MATRIX</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">concatMatrix</span> <span class="o">|=</span> <span class="o">!</span><span class="n">childHasIdentityMatrix</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Sets the flag as early as possible to allow draw() implementations</span>
</span><span class='line'>        <span class="c1">// to call invalidate() successfully when doing animations</span>
</span><span class='line'>        <span class="n">mPrivateFlags</span> <span class="o">|=</span> <span class="n">PFLAG_DRAWN</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">concatMatrix</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                <span class="o">(</span><span class="n">parentFlags</span> <span class="o">&amp;</span> <span class="o">(</span><span class="n">ViewGroup</span><span class="o">.</span><span class="na">FLAG_SUPPORT_STATIC_TRANSFORMATIONS</span> <span class="o">|</span>
</span><span class='line'>                        <span class="n">ViewGroup</span><span class="o">.</span><span class="na">FLAG_CLIP_CHILDREN</span><span class="o">))</span> <span class="o">==</span> <span class="n">ViewGroup</span><span class="o">.</span><span class="na">FLAG_CLIP_CHILDREN</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                <span class="n">canvas</span><span class="o">.</span><span class="na">quickReject</span><span class="o">(</span><span class="n">mLeft</span><span class="o">,</span> <span class="n">mTop</span><span class="o">,</span> <span class="n">mRight</span><span class="o">,</span> <span class="n">mBottom</span><span class="o">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                <span class="o">(</span><span class="n">mPrivateFlags</span> <span class="o">&amp;</span> <span class="n">PFLAG_DRAW_ANIMATION</span><span class="o">)</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">mPrivateFlags2</span> <span class="o">|=</span> <span class="n">PFLAG2_VIEW_QUICK_REJECTED</span><span class="o">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">more</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">mPrivateFlags2</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="n">PFLAG2_VIEW_QUICK_REJECTED</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">hardwareAcceleratedCanvas</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Clear INVALIDATED flag to allow invalidation to occur during rendering, but</span>
</span><span class='line'>            <span class="c1">// retain the flag&#39;s value temporarily in the mRecreateDisplayList flag</span>
</span><span class='line'>            <span class="n">mRecreateDisplayList</span> <span class="o">=</span> <span class="o">(</span><span class="n">mPrivateFlags</span> <span class="o">&amp;</span> <span class="n">PFLAG_INVALIDATED</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>            <span class="n">mPrivateFlags</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="n">PFLAG_INVALIDATED</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">RenderNode</span> <span class="n">renderNode</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">Bitmap</span> <span class="n">cache</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">layerType</span> <span class="o">=</span> <span class="n">getLayerType</span><span class="o">();</span> <span class="c1">// TODO: signify cache state with just &#39;cache&#39; local</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">layerType</span> <span class="o">==</span> <span class="n">LAYER_TYPE_SOFTWARE</span> <span class="o">||</span> <span class="o">!</span><span class="n">drawingWithRenderNode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>             <span class="k">if</span> <span class="o">(</span><span class="n">layerType</span> <span class="o">!=</span> <span class="n">LAYER_TYPE_NONE</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                 <span class="c1">// If not drawing with RenderNode, treat HW layers as SW</span>
</span><span class='line'>                 <span class="n">layerType</span> <span class="o">=</span> <span class="n">LAYER_TYPE_SOFTWARE</span><span class="o">;</span>
</span><span class='line'>                 <span class="n">buildDrawingCache</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">cache</span> <span class="o">=</span> <span class="n">getDrawingCache</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">drawingWithRenderNode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Delay getting the display list until animation-driven alpha values are</span>
</span><span class='line'>            <span class="c1">// set up and possibly passed on to the view</span>
</span><span class='line'>            <span class="n">renderNode</span> <span class="o">=</span> <span class="n">updateDisplayListIfDirty</span><span class="o">();</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(!</span><span class="n">renderNode</span><span class="o">.</span><span class="na">hasDisplayList</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// Uncommon, but possible. If a view is removed from the hierarchy during the call</span>
</span><span class='line'>                <span class="c1">// to getDisplayList(), the display list will be marked invalid and we should not</span>
</span><span class='line'>                <span class="c1">// try to use it again.</span>
</span><span class='line'>                <span class="n">renderNode</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>                <span class="n">drawingWithRenderNode</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">sx</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">sy</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">drawingWithRenderNode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">computeScroll</span><span class="o">();</span>
</span><span class='line'>            <span class="n">sx</span> <span class="o">=</span> <span class="n">mScrollX</span><span class="o">;</span>
</span><span class='line'>            <span class="n">sy</span> <span class="o">=</span> <span class="n">mScrollY</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">drawingWithDrawingCache</span> <span class="o">=</span> <span class="n">cache</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">drawingWithRenderNode</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">offsetForScroll</span> <span class="o">=</span> <span class="n">cache</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">drawingWithRenderNode</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">restoreTo</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">drawingWithRenderNode</span> <span class="o">||</span> <span class="n">transformToApply</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">restoreTo</span> <span class="o">=</span> <span class="n">canvas</span><span class="o">.</span><span class="na">save</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">offsetForScroll</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">canvas</span><span class="o">.</span><span class="na">translate</span><span class="o">(</span><span class="n">mLeft</span> <span class="o">-</span> <span class="n">sx</span><span class="o">,</span> <span class="n">mTop</span> <span class="o">-</span> <span class="n">sy</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(!</span><span class="n">drawingWithRenderNode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">canvas</span><span class="o">.</span><span class="na">translate</span><span class="o">(</span><span class="n">mLeft</span><span class="o">,</span> <span class="n">mTop</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">scalingRequired</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">drawingWithRenderNode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="c1">// TODO: Might not need this if we put everything inside the DL</span>
</span><span class='line'>                    <span class="n">restoreTo</span> <span class="o">=</span> <span class="n">canvas</span><span class="o">.</span><span class="na">save</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="c1">// mAttachInfo cannot be null, otherwise scalingRequired == false</span>
</span><span class='line'>                <span class="kd">final</span> <span class="kt">float</span> <span class="n">scale</span> <span class="o">=</span> <span class="mf">1.0f</span> <span class="o">/</span> <span class="n">mAttachInfo</span><span class="o">.</span><span class="na">mApplicationScale</span><span class="o">;</span>
</span><span class='line'>                <span class="n">canvas</span><span class="o">.</span><span class="na">scale</span><span class="o">(</span><span class="n">scale</span><span class="o">,</span> <span class="n">scale</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">float</span> <span class="n">alpha</span> <span class="o">=</span> <span class="n">drawingWithRenderNode</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="o">(</span><span class="n">getAlpha</span><span class="o">()</span> <span class="o">*</span> <span class="n">getTransitionAlpha</span><span class="o">());</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">transformToApply</span> <span class="o">!=</span> <span class="kc">null</span>
</span><span class='line'>                <span class="o">||</span> <span class="n">alpha</span> <span class="o">&lt;</span> <span class="mi">1</span>
</span><span class='line'>                <span class="o">||</span> <span class="o">!</span><span class="n">hasIdentityMatrix</span><span class="o">()</span>
</span><span class='line'>                <span class="o">||</span> <span class="o">(</span><span class="n">mPrivateFlags3</span> <span class="o">&amp;</span> <span class="n">PFLAG3_VIEW_IS_ANIMATING_ALPHA</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">transformToApply</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">||</span> <span class="o">!</span><span class="n">childHasIdentityMatrix</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">transX</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">transY</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">offsetForScroll</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">transX</span> <span class="o">=</span> <span class="o">-</span><span class="n">sx</span><span class="o">;</span>
</span><span class='line'>                    <span class="n">transY</span> <span class="o">=</span> <span class="o">-</span><span class="n">sy</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">transformToApply</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(</span><span class="n">concatMatrix</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="k">if</span> <span class="o">(</span><span class="n">drawingWithRenderNode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                            <span class="n">renderNode</span><span class="o">.</span><span class="na">setAnimationMatrix</span><span class="o">(</span><span class="n">transformToApply</span><span class="o">.</span><span class="na">getMatrix</span><span class="o">());</span>
</span><span class='line'>                        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                            <span class="c1">// Undo the scroll translation, apply the transformation matrix,</span>
</span><span class='line'>                            <span class="c1">// then redo the scroll translate to get the correct result.</span>
</span><span class='line'>                            <span class="n">canvas</span><span class="o">.</span><span class="na">translate</span><span class="o">(-</span><span class="n">transX</span><span class="o">,</span> <span class="o">-</span><span class="n">transY</span><span class="o">);</span>
</span><span class='line'>                            <span class="n">canvas</span><span class="o">.</span><span class="na">concat</span><span class="o">(</span><span class="n">transformToApply</span><span class="o">.</span><span class="na">getMatrix</span><span class="o">());</span>
</span><span class='line'>                            <span class="n">canvas</span><span class="o">.</span><span class="na">translate</span><span class="o">(</span><span class="n">transX</span><span class="o">,</span> <span class="n">transY</span><span class="o">);</span>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>                        <span class="n">parent</span><span class="o">.</span><span class="na">mGroupFlags</span> <span class="o">|=</span> <span class="n">ViewGroup</span><span class="o">.</span><span class="na">FLAG_CLEAR_TRANSFORMATION</span><span class="o">;</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                    <span class="kt">float</span> <span class="n">transformAlpha</span> <span class="o">=</span> <span class="n">transformToApply</span><span class="o">.</span><span class="na">getAlpha</span><span class="o">();</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(</span><span class="n">transformAlpha</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">alpha</span> <span class="o">*=</span> <span class="n">transformAlpha</span><span class="o">;</span>
</span><span class='line'>                        <span class="n">parent</span><span class="o">.</span><span class="na">mGroupFlags</span> <span class="o">|=</span> <span class="n">ViewGroup</span><span class="o">.</span><span class="na">FLAG_CLEAR_TRANSFORMATION</span><span class="o">;</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="o">(!</span><span class="n">childHasIdentityMatrix</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">drawingWithRenderNode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">canvas</span><span class="o">.</span><span class="na">translate</span><span class="o">(-</span><span class="n">transX</span><span class="o">,</span> <span class="o">-</span><span class="n">transY</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">canvas</span><span class="o">.</span><span class="na">concat</span><span class="o">(</span><span class="n">getMatrix</span><span class="o">());</span>
</span><span class='line'>                    <span class="n">canvas</span><span class="o">.</span><span class="na">translate</span><span class="o">(</span><span class="n">transX</span><span class="o">,</span> <span class="n">transY</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Deal with alpha if it is or used to be &lt;1</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">alpha</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">||</span> <span class="o">(</span><span class="n">mPrivateFlags3</span> <span class="o">&amp;</span> <span class="n">PFLAG3_VIEW_IS_ANIMATING_ALPHA</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">alpha</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">mPrivateFlags3</span> <span class="o">|=</span> <span class="n">PFLAG3_VIEW_IS_ANIMATING_ALPHA</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">mPrivateFlags3</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="n">PFLAG3_VIEW_IS_ANIMATING_ALPHA</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="n">parent</span><span class="o">.</span><span class="na">mGroupFlags</span> <span class="o">|=</span> <span class="n">ViewGroup</span><span class="o">.</span><span class="na">FLAG_CLEAR_TRANSFORMATION</span><span class="o">;</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(!</span><span class="n">drawingWithDrawingCache</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="kd">final</span> <span class="kt">int</span> <span class="n">multipliedAlpha</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="mi">255</span> <span class="o">*</span> <span class="n">alpha</span><span class="o">);</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(!</span><span class="n">onSetAlpha</span><span class="o">(</span><span class="n">multipliedAlpha</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                        <span class="k">if</span> <span class="o">(</span><span class="n">drawingWithRenderNode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                            <span class="n">renderNode</span><span class="o">.</span><span class="na">setAlpha</span><span class="o">(</span><span class="n">alpha</span> <span class="o">*</span> <span class="n">getAlpha</span><span class="o">()</span> <span class="o">*</span> <span class="n">getTransitionAlpha</span><span class="o">());</span>
</span><span class='line'>                        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">layerType</span> <span class="o">==</span> <span class="n">LAYER_TYPE_NONE</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                            <span class="n">canvas</span><span class="o">.</span><span class="na">saveLayerAlpha</span><span class="o">(</span><span class="n">sx</span><span class="o">,</span> <span class="n">sy</span><span class="o">,</span> <span class="n">sx</span> <span class="o">+</span> <span class="n">getWidth</span><span class="o">(),</span> <span class="n">sy</span> <span class="o">+</span> <span class="n">getHeight</span><span class="o">(),</span>
</span><span class='line'>                                    <span class="n">multipliedAlpha</span><span class="o">);</span>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>                    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                        <span class="c1">// Alpha is handled by the child directly, clobber the layer&#39;s alpha</span>
</span><span class='line'>                        <span class="n">mPrivateFlags</span> <span class="o">|=</span> <span class="n">PFLAG_ALPHA_SET</span><span class="o">;</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">((</span><span class="n">mPrivateFlags</span> <span class="o">&amp;</span> <span class="n">PFLAG_ALPHA_SET</span><span class="o">)</span> <span class="o">==</span> <span class="n">PFLAG_ALPHA_SET</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">onSetAlpha</span><span class="o">(</span><span class="mi">255</span><span class="o">);</span>
</span><span class='line'>            <span class="n">mPrivateFlags</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="n">PFLAG_ALPHA_SET</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">drawingWithRenderNode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// apply clips directly, since RenderNode won&#39;t do it for this draw</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">((</span><span class="n">parentFlags</span> <span class="o">&amp;</span> <span class="n">ViewGroup</span><span class="o">.</span><span class="na">FLAG_CLIP_CHILDREN</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">cache</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">offsetForScroll</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">canvas</span><span class="o">.</span><span class="na">clipRect</span><span class="o">(</span><span class="n">sx</span><span class="o">,</span> <span class="n">sy</span><span class="o">,</span> <span class="n">sx</span> <span class="o">+</span> <span class="n">getWidth</span><span class="o">(),</span> <span class="n">sy</span> <span class="o">+</span> <span class="n">getHeight</span><span class="o">());</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(!</span><span class="n">scalingRequired</span> <span class="o">||</span> <span class="n">cache</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">canvas</span><span class="o">.</span><span class="na">clipRect</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">getWidth</span><span class="o">(),</span> <span class="n">getHeight</span><span class="o">());</span>
</span><span class='line'>                    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">canvas</span><span class="o">.</span><span class="na">clipRect</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">cache</span><span class="o">.</span><span class="na">getWidth</span><span class="o">(),</span> <span class="n">cache</span><span class="o">.</span><span class="na">getHeight</span><span class="o">());</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">mClipBounds</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// clip bounds ignore scroll</span>
</span><span class='line'>                <span class="n">canvas</span><span class="o">.</span><span class="na">clipRect</span><span class="o">(</span><span class="n">mClipBounds</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">drawingWithDrawingCache</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">drawingWithRenderNode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">mPrivateFlags</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="n">PFLAG_DIRTY_MASK</span><span class="o">;</span>
</span><span class='line'>                <span class="o">((</span><span class="n">RecordingCanvas</span><span class="o">)</span> <span class="n">canvas</span><span class="o">).</span><span class="na">drawRenderNode</span><span class="o">(</span><span class="n">renderNode</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// Fast path for layouts with no backgrounds</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">((</span><span class="n">mPrivateFlags</span> <span class="o">&amp;</span> <span class="n">PFLAG_SKIP_DRAW</span><span class="o">)</span> <span class="o">==</span> <span class="n">PFLAG_SKIP_DRAW</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">mPrivateFlags</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="n">PFLAG_DIRTY_MASK</span><span class="o">;</span>
</span><span class='line'>                    <span class="n">dispatchDraw</span><span class="o">(</span><span class="n">canvas</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">draw</span><span class="o">(</span><span class="n">canvas</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">cache</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">mPrivateFlags</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="n">PFLAG_DIRTY_MASK</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">layerType</span> <span class="o">==</span> <span class="n">LAYER_TYPE_NONE</span> <span class="o">||</span> <span class="n">mLayerPaint</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// no layer paint, use temporary paint to draw bitmap</span>
</span><span class='line'>                <span class="n">Paint</span> <span class="n">cachePaint</span> <span class="o">=</span> <span class="n">parent</span><span class="o">.</span><span class="na">mCachePaint</span><span class="o">;</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">cachePaint</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">cachePaint</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Paint</span><span class="o">();</span>
</span><span class='line'>                    <span class="n">cachePaint</span><span class="o">.</span><span class="na">setDither</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">parent</span><span class="o">.</span><span class="na">mCachePaint</span> <span class="o">=</span> <span class="n">cachePaint</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="n">cachePaint</span><span class="o">.</span><span class="na">setAlpha</span><span class="o">((</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">alpha</span> <span class="o">*</span> <span class="mi">255</span><span class="o">));</span>
</span><span class='line'>                <span class="n">canvas</span><span class="o">.</span><span class="na">drawBitmap</span><span class="o">(</span><span class="n">cache</span><span class="o">,</span> <span class="mf">0.0f</span><span class="o">,</span> <span class="mf">0.0f</span><span class="o">,</span> <span class="n">cachePaint</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// use layer paint to draw the bitmap, merging the two alphas, but also restore</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">layerPaintAlpha</span> <span class="o">=</span> <span class="n">mLayerPaint</span><span class="o">.</span><span class="na">getAlpha</span><span class="o">();</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">alpha</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">mLayerPaint</span><span class="o">.</span><span class="na">setAlpha</span><span class="o">((</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">alpha</span> <span class="o">*</span> <span class="n">layerPaintAlpha</span><span class="o">));</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="n">canvas</span><span class="o">.</span><span class="na">drawBitmap</span><span class="o">(</span><span class="n">cache</span><span class="o">,</span> <span class="mf">0.0f</span><span class="o">,</span> <span class="mf">0.0f</span><span class="o">,</span> <span class="n">mLayerPaint</span><span class="o">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">alpha</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">mLayerPaint</span><span class="o">.</span><span class="na">setAlpha</span><span class="o">(</span><span class="n">layerPaintAlpha</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">restoreTo</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">canvas</span><span class="o">.</span><span class="na">restoreToCount</span><span class="o">(</span><span class="n">restoreTo</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">a</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">more</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(!</span><span class="n">hardwareAcceleratedCanvas</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">a</span><span class="o">.</span><span class="na">getFillAfter</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">onSetAlpha</span><span class="o">(</span><span class="mi">255</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">parent</span><span class="o">.</span><span class="na">finishAnimatingView</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">a</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">more</span> <span class="o">&amp;&amp;</span> <span class="n">hardwareAcceleratedCanvas</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">a</span><span class="o">.</span><span class="na">hasAlpha</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">mPrivateFlags</span> <span class="o">&amp;</span> <span class="n">PFLAG_ALPHA_SET</span><span class="o">)</span> <span class="o">==</span> <span class="n">PFLAG_ALPHA_SET</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// alpha animations should cause the child to recreate its display list</span>
</span><span class='line'>                <span class="n">invalidate</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">mRecreateDisplayList</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">more</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个方法更长，主要就看transformToApply这个变量就好了，这个变量是在调用了applyLegacyAnimation后被赋值的。之后，可以看到它其中的Matrix被作用于Canvas，而alpha值被用于setAlpha了。好了，这里就是动画的最核心的逻辑。前面说了Transformation对象就是包了一个Matrix和alpha，然后被用在了这里，Matrix作用于<a href="https://developer.android.com/reference/android/graphics/Canvas">Canvas</a>对象，以产生视觉变幻（位移，缩放和旋转），而渐变则是通过setAlpha实现的。</p>

<p>所以View Animation是View tree每次draw的时候去做的，用当前的Animation对象获取到Transformation，然后把Matrix和alpha应用到draw时的Canvas，这就产生了视觉变幻效果。因此，View animation只是放一遍电影，因为这一过程中变化 的只有Transformation对象，也即只有Matrix和alpha在变化，在View draw的时候应用一下就完了，它并没有对View的真实属性产生影响，仅是对渲染的结果Canvas产生影响。而每次View draw的时候，都是会重新生成一个Canvas对象，并且View的属性本身并没有变，所以新生成的Canvas对象并不会体现之前一次draw（也即上一帧）的变幻结果，它只是继续应用Transformation对象，假如动画结束了就没有了Transformation对象，那就没有Matrix和alpha可作用于Canvas，也就没有了动画效果，一切又恢复到了最初原始的样子。</p>

<h2>Property Animation的原理</h2>

<p>属性动画的实现主要是在<a href="https://developer.android.com/reference/kotlin/android/animation/package-summary?hl=en">android.animation</a>里面，它有独立的一级包名，可以看出它在平台中的位置，是要高于View animation的。</p>

<h3>Animator的源码解析</h3>

<p>先从<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/animation/Animator.java">Animator</a>对象看起，它是一个抽象类，只定义了关于动画的基本接口，如duration/start/end/cancel等，以及设置<a href="https://developer.android.com/reference/android/animation/Animator.AnimatorListener">AnimatorListener</a>以外，再无其他东西。</p>

<p>最为核心的对象是<a href="https://developer.android.com/reference/android/animation/ValueAnimator">ValueAnimator</a>，它是属性动画的核心，它主要有两部分，一是管理各种数值，前面的文章说过属性动画的核心原理就是在一定时间内，用一定速率把某个值变成另外一个值；另外一部分就涉及渲染原理，后面再详细说。</p>

<p>再有就是<a href="https://developer.android.com/reference/android/animation/ObjectAnimator">ObjectAnimator</a>，它是ValueAnimator的子类，连同<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/animation/PropertyValuesHolder.java">PropertyValuesHolder</a>一起，针对某个对象的属性进行管理，主要涉及两方面，一个是属性值的管理，也即把对象的属性名字和其要设置的值都暂存起来，另外一部分就是通过反射来把要修改的值作用于目标对象。</p>

<h3>Animator的时间驱动器</h3>

<p>动画要让数值随时间而变化，当start了以后，最重要的事情 就是以一定的时间速率来刷新数值，也即是用一个时间驱动器来刷新每一帧。前面讨论了View animation，是在View tree渲染时去刷新动画的每一帧。</p>

<p>属性动画的核心在ValueAnimator里面，连同一个<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/animation/AnimationHandler.java">AnimatorHandler</a>对象，一起实现了时间驱动。AnimatorHanndler是属性动画的时间驱动器，它从<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/Choreographer.java;drc=master;l=82">Choreographer</a>中接收脉冲信号，然后再回调给所有的ValueAnimator，令其doAnimationFrame。它是一个单例，也就是说同一个进程里所有的属性动画用的是内一个时间驱动器，同一个AnimatorHandler。</p>

<p><strong>注意</strong>：关于Choreographer的解释可以看<a href="http://toughcoder.net/blog/2020/07/26/android-view-render-flow/">另外的文章</a>。</p>

<p>当调用ValueAnimator#start时便会往<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/animation/AnimationHandler.java">AnimatorHandler</a>对象添加一个回调，用以接收do frame的脉冲事件，然后从时间插值器mInterpolator中获取当前的时间速率，再调用animateValue进行数值的改变，其子类可以override此方法以实现属性的具体变化。这里还有一个变量mSelfPulsing用以控制是否使用AnimatorHandler，默认是true，也就是让ValueAnimator使用AnimatorHandler接收来自Choreographer的脉冲信号做动画。此外，也可以自己实现一个时间驱动器。</p>

<p>由此，便可以让在duration之内，渲染动画的每一帧。</p>

<h3>Animator的渲染原理</h3>

<p><a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/animation/ValueAnimator.java">ValueAnimator</a>仅是让一个数值在一定时间内发生特定的变化，它没有实际的视觉效果。常常使用的是ObjectAnimator，并作用于View的属性以产生视觉效果，如前面文章中的例子。那么这个又是如何实现的呢？</p>

<p><a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/animation/ObjectAnimator.java">ObjectAnimator</a>是可能改变某个对象（内部称之为Target对象）的某个属性值，让其随时间变化，当应用到View对象时，比如translationY属性，ObjectAniamtor所做的也仅仅是让translationY的值随时间变化 而已，仅在animateValue时去调用View#setTranslationY把变化的数值传进去。是View自己在做重绘，View的setTranslationY方法中，有做invalidate以进行重绘。由此，便产生了视觉效果。</p>

<p><a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/ViewPropertyAnimator.java">ViewPropertyAnimator</a>是另一个常用的对象，但发现它并不是Animator的子类，是封装出来的专门针对View对象做属性动画的一个工具类，它本质上与ObjectAnimator一样，只不过做了一些集成与封装，可以同时方便的操作多个属性，另外它会把所有属性的值变更 过后统一调一次invalidate，效率上会略高一筹。ObjectAnimator一次只能操作一个属性，并且每个属性变化 时都会调一次invalidate。</p>

<p>它是把支持的属性都先放进一个map里面暂存起来，当调用startAnimation时，创建一个ValueAnimator，并设置一个AnimatorListener，在onAnimationUpdate时，把前面暂存的属性都设置到mView对象中去，然后调用一次invalidate让mView重绘。这里还需要注意，在设置属性这一块与ObjectAnimator也不一样，前面说了ObjectAniamtor是通过属性的settter来实现的，但View的属性的settter都会触发invalidate。所以，ViewPropertyAnimator为了避免每次设置属性时都触发invalidate，它是直接把属性塞给View的mRenderNode对象，然后在所有变化 的属性都设置完以后，再统一做一次重绘(invalidate)。</p>

<p>另外的区别就是，ViewPropertyAnimator仅支持一些特定的属性，而ObjectAnimator可以支持任意属性（只要有setter/getter，就可以）。</p>

<h2>关于动画的常见问题</h2>

<p>通过上面的论述，就搞清楚了动画原理了，下面来看一些比较有意思的问题。</p>

<h3>动画是在主线程里做的么</h3>

<p>动画主要是通过View对象来呈现视觉效果，View是在主线程中渲染的，所以动画也是在主线程里面完成的。这话呢，只对了一半，或者这么说是不够严谨的。</p>

<p>通过上面的讨论，View animation，都是在主线程中实现的，因为它的时间驱动器是View tree的渲染，也即在draw的时候，去计算当前的Transformation，然后应用到View的Canvas上面。这一切都是在主线程中完成的。</p>

<p>但对于属性动画，就不是这个样子，属性动画分两部分，一部分是让数值随时间变化 ，这个其实可以在任意线程中去做。通过上面的讨论，默认的情况下，确实也是在主线程中做的（从Choreographer得到时间脉冲，这是在主线程里面），但是留 有接口，可以改变的，虽然很少这样做，但确实是可行的，并且数值随时间变化，这个事情也是可以在任意线程中完成的。另外一部分，就是让变化 的数值对目标对象生效，这个要看具体的对象了，如果View，肯定 还是要在主线程里搞。</p>

<h3>动画的帧率（FPS）是多少</h3>

<p>从上面的讨论来看，无论是View animation还是属性动画，时间脉冲都是Choreographer，并且对View来说视觉要生效是通过重绘来做的，所以最高帧率都会是60FPS。</p>

<p>所以，其实动画的帧率是固定的，也就是说其doAnimationFrame是固定频率在回调。</p>

<p>这里要与动画的时间插值器区别开来，动画的真实帧率是固定的，时间插值器的作用是让动画的变化变成非线性的。比如说某个属性x从0变到100，ValueAnimator的doAnimationFrame以及animateValue会是以固定的频率，从Choreographer每隔16ms接收一次脉冲，就会调用一次animateValue，时间插值器的作用，能让x值的变化是非线性的：</p>

<p>时间脉冲：0 1 2 3 4 5 6 7 8 9 10
线性变化：0 10 20 30 40 50 60 70 80 90 100
加速减速：0 13 25 37 57 71 79 85 89 95 100</p>

<p>时间插值器并没有让动画的帧率发生变化 ，而是让动画的结果非线性变化。</p>

<h3>动画过程中如何处理MotionEvent事件</h3>

<p>没有任何影响，view animation是发生在draw的时候，而属性动画是设置属性后再re-draw。从逻辑 上来讲动画与事件不冲突，两者之间没有任何影响。</p>

<p>不过呢，View animation是对Canvas做变幻，View对象仍在原来的位置，原来的状态，所以点击动画过程中的View可能会没有效果，特别是对于有位移的时候。但属性动画就没有问题，View就是真实的在移动。</p>

<p>但对于业务逻辑来说，通常动画都用于某个View的入场和出场，所以入场动画做完之前，以及出场动画开始之后，不响应点击事件要好一些，当然，这个就要靠开发者自己去实现了。</p>

<h3>动画可以取消么</h3>

<p>当然可以，都有cancel接口可以调用，但具体影响不太一样。</p>

<p>对于View animation，<a href="https://developer.android.com/reference/android/view/animation/Animation#cancel()">Animation#cancel</a>是会调用onAnimationEnd的，因为它的回调接口没有专门用于cancel的。</p>

<p>但属性动画的回调接口要丰富一些，它有cancel，所以是会回调onAimationCancel的，但不会回调onAnimationEnd。</p>

<h3>动画需要注意的事项</h3>

<p>一定要实现onAnimationCancel，以及onAnimationEnd，如果有涉及状态变更，或者关联其他动画时。要知道动画除了常规结束还会有被cancel掉的可能。</p>

<p>另外，就是对于属性动画，取消有两种方式，一是直接调用<a href="https://developer.android.com/reference/android/animation/Animator#cancel()">Animator#cancel</a>另外一种是调用<a href="https://developer.android.com/reference/android/animation/Animator#end()">Animator#end</a>，两个方法在处理最后的状态时略有差异。end方法会把属性的最终状态设置给属性，然后回调onAnimationEnd，但cancel就直接终止动画了，属性当前啥状态那就啥状态，然后回调onAnimationCancel。其实，大多数情况下，end更为合理，但end可能会造成视觉上的跳跃，属性的状态会突然变化。</p>

<p>再有就是，如果对于View，有多个属性同时做动画时，用ViewPropertyAnimator更好一些。语法上面也更简洁，性能上也略优一些。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Animation Advanced Tricks]]></title>
    <link href="http://toughcoder.net/blog/2021/09/04/android-animation-advanced-tricks/"/>
    <updated>2021-09-04T11:45:13+08:00</updated>
    <id>http://toughcoder.net/blog/2021/09/04/android-animation-advanced-tricks</id>
    <content type="html"><![CDATA[<p><a href="http://toughcoder.net/blog/2021/08/19/android-animation-made-easy/">前面的文章</a>介绍了动画的基本使用方法，本文来聊一聊涉及到动画的高级技巧，以及一些非常优质的学习资源和动画三方库和框架。</p>

<p><a href="http://toughcoder.net/blog/2021/09/04/android-animation-advanced-tricks/"><img src="https://cdn.wccftech.com/wp-content/uploads/2020/04/Animations.png" title="auto auto" ></a></p>

<!-- more -->


<h2>页面之间的过渡动画</h2>

<p>常规的动画都是针对某一页面上的某个元素做动画，这个相对简单，<a href="http://toughcoder.net/blog/2021/08/19/android-animation-made-easy/">之前的文章</a>讲了很多。但有时候页面与页面之间也是需要过渡动画的，这个可以加强切换的视觉体验，但最好要注意整个应用内的风格统一，不能A到B是一种切换样式，B到C却是另外一种。</p>

<p>主要有两类，一是Activity之间的切换，二是布局之间的切换。</p>

<h3>Activity之间的切换动画</h3>

<p>因为Activity的创建与启动以及它的Window的创建和显示都是由Frameworks来控制的，甚至于Activity里面的布局何时加载也是由系统决定的，所以对于Activity之间的切换严重依赖于Frameworks，而不同版本的安卓，支持的情况还不一样。</p>

<h4>传统的做法</h4>

<p>这个是针对 于所有安卓 版本都可以使用的方法，也是最简单的方式，就是使用<a href="https://developer.android.com/reference/android/app/Activity#overridePendingTransition(int,%20int)">Activity#overridePendingTransition</a>方法。</p>

<p>这个方法并不难，具体如何使用可以参考其文档，以及<a href="https://blog.csdn.net/ccpat/article/details/84883418">这篇文章</a>，讲的都比较清楚。</p>

<h4>使用Transition</h4>

<p>在Android 4.4时，系统中加入了一个叫做Transition的东西，专门用于页面之间的切换的，但也仅是限于同一个窗口（也即同一个Activity内）的ViewGroup。在Android 5.0时又把Activity之间的切换提供了支持，对于5.0以上的版本可以使用这个框架来实现切换，会比传统的做法都要专业一些。</p>

<p>具体可以参看<a href="https://developer.android.com/training/transitions/start-activity">官方教程</a>，以及<a href="https://www.jianshu.com/p/a43daa1e3d6e">这篇教程</a>和<a href="https://guides.codepath.com/android/shared-element-activity-transition">这篇文章</a>，讲解的都相当好。</p>

<h3>布局之间的过渡切换</h3>

<p>这里的布局就是指除Activity以外的，比如从一个ViewGroup切换到另外一个ViewGroup。其实Fragment本质上就是一个ViewGroup，所以也包含在内。</p>

<p>在Android 4.4 (Kikat API 19)，加入了<a href="https://developer.android.com/reference/android/transition/Transition">Transition frameworks</a>，专门用于解决场景切换，主要是通过Scene对象和Transition对象。Transition对象定义具体针对 哪个ViewGroup做什么样的动画，而Scene对象定义了ViewGroup的某一种状态，如渐变进入，那么渐变前是一个Scene，完全可见后又是一个Scene，而渐变的过程则叫Transition。</p>

<p><img src="https://developer.android.com/images/transitions/transitions_diagram.png" alt="" /></p>

<p>可以参看<a href="https://developer.android.com/training/transitions">官方文档</a>，以详细了解如何使用transition。</p>

<h2>复杂动画的实现逻辑</h2>

<p>动画是一个非常复杂且精深的领域，千万不要说做个UI很容易，或者说写个动画很容易，要想做好动画需要很深的功底，不但需要对动画框架有深入的了解，也要对整个视觉GUI有深入的理解，并且需要良好的数学与物理知识。</p>

<p>复杂的动画的复杂度体现在两个方面，一个是整体上看起来复杂，也就是是很多不同的动画的组合；另外一个是具体的某个属性复杂，如复杂的路径，复杂的时间变化或者复杂的形变。分开说。</p>

<h4>看起来复杂的动画</h4>

<p>这一般是涉及众多的动画的组合，整体表现上看起来特别复杂。就比如说电商可能会有一个购物筐，里面往外飞各种商品的动画。对于这种就是要把它拆解，拆解开来后，其实并不复杂。</p>

<p><img src="http://pic.90sjimg.com/design/03/61/36/24/5d71ce10b36d1.png" alt="" /></p>

<ul>
<li>购物车：可以是渐变，不断的从透明变到不透明。或者干脆不做动画</li>
<li>商品：预定义一组商品，每次随机选择一个，再选择随机的位置，然后从底下往上飞（或者从上往下飞），再设置一个随机的速度，也可以加上旋转</li>
</ul>


<p>这样拆解开来就不复杂了。</p>

<h4>复杂的变幻</h4>

<p>这里就要涉及一些数学 和物理知识了，比如用一些特别的曲线，特殊的曲面，特殊的形变等。</p>

<h2>优秀的动画的设计范例</h2>

<p>这里就不得不得提到大名顶顶的<a href="https://dribbble.com/">Dribbble</a>了，这里有相当优秀的设计资源，其中也有很多<a href="https://dribbble.com/shots/popular/animation">动画设计</a>，可以尝试着去实现一下，都很有挑战。</p>

<h2>优秀的动画相关资源</h2>

<p>还有一些资源，特别是开源的库，也非常值得学习和研究和使用。</p>

<h4><a href="https://developer.android.com/reference/androidx/constraintlayout/motion/widget/MotionLayout">MotionLayout</a></h4>

<p>这个并不是三方的，而是官方AndroidX中的，相当的强大，当然使用起来也略复杂。具体使用方法可以参考 <a href="https://developer.android.com/training/constraint-layout/motionlayout">官方教程</a>和<a href="https://www.nomtek.com/blog/motionlayout">这篇文章</a>。</p>

<h4><a href="https://awesomeopensource.com/projects/android-animation">The Top 27 Android Animation Open Source Projects</a></h4>

<p>这里是一个集合，里面列出一些优秀的动画相关的开源库，都相当的棒。</p>

<h4><a href="https://github.com/daimajia/AndroidViewAnimations">Android View Animations</a></h4>

<p>有一些针对View的非常炫酷的特效，如抖动，缩放和旋转等。它是受一个<a href="https://github.com/ArtFeel/AFViewShaker">水果上面的动画库</a>的激发。</p>

<h4><a href="https://github.com/lgvalle/Material-Animations">Material-Animations</a></h4>

<p>主要是介绍如何使用Transition frameworks的。</p>

<h4><a href="https://github.com/airbnb/lottie-android">Lottie</a></h4>

<p>可以把设计软件Adobe After Effects直接转成动画。</p>

<h4>一些插值器</h4>

<p>可看<a href="https://github.com/daimajia/AnimationEasingFunctions">这个</a>和<a href="https://easings.net/">这个</a></p>

<h4><a href="https://github.com/ybq/Android-SpinKit">专门用于加载动画</a></h4>

<p>里面有各种神奇的加载特效，非常棒。是一个<a href="https://github.com/tobiasahlin/SpinKit">前端CSS加载特效</a>的Android上的实现。</p>

<h4><a href="https://github.com/OCNYang/Android-Animation-Set">教程的示例</a></h4>

<p>这是一个教程集锦，里面也包含各种示例，是一个相当不错的学习资源。</p>

<h4><a href="https://github.com/REBOOTERS/AndroidAnimationExercise">另外一个教程和示例</a></h4>

<p>与上面的类似，也是一个集教程与实例在一起的项目。</p>

<h4><a href="https://awesomeopensource.com/project/OCNYang/Android-Animation-Set">Android Animation Detailed Tutorials</a></h4>

<p>一个项目的合集。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Animation Made Easy]]></title>
    <link href="http://toughcoder.net/blog/2021/08/19/android-animation-made-easy/"/>
    <updated>2021-08-19T22:37:34+08:00</updated>
    <id>http://toughcoder.net/blog/2021/08/19/android-animation-made-easy</id>
    <content type="html"><![CDATA[<p>动画在任何一个GUI系统中都是一个非常重要的设计元素，它可以让交互变得优雅，让界面变得炫酷，让操作变得更加的舒畅，让状态过渡变得更加的顺滑，对视觉效果有极大的提升，时而提升用户体验，特别是对于移动应用来说，更是如此。就好比水果平台，最为吸引人的地方就在于其炫酷流畅的动画效果。早期的Android，在动画这一块确实差，不过，近些年，随着谷歌不断的加大力度在提升，现在来说安卓在动画这一块已经跟水果差不多了。今天就来聊一聊关于动画的话题。</p>

<p><a href="http://toughcoder.net/blog/2021/08/19/android-animation-made-easy/"><img src="https://files.betamax.raywenderlich.com/attachments/collections/291/dae8aa75-8ccb-4b2f-a98d-3d2230b63ed9.png"></a></p>

<!-- more -->


<h2>动画的种类</h2>

<p>一般来说动画分为二个种类：</p>

<h3>逐帧动画(Frame Animation)也叫做<a href="http://developer.android.com/intl/zh-cn/guide/topics/graphics/drawable-animation.html">Drawable Animation</a></h3>

<p>也就是电影胶片式的，一张张不同的画连在一起播放，比较简单，只需要准备足够帧数（数量）的图片，就可以了。缺点也比较明显，需要比较多的资源（图片，存储空间，内存空间以及CPU资源）。并且灵活性非常的差，不能让普通的一段文字或者一个按扭进行动画。
针对某些特别简单的动画可以用此方式来实现，比如像简单的进度条，或者滑动引导提示等，具体的方式就是：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;animation-list xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>    android:oneshot="true"&gt;    
</span><span class='line'>    &lt;item android:drawable="@drawable/rocket_thrust1" android:duration="200" /&gt;
</span><span class='line'>    &lt;item android:drawable="@drawable/rocket_thrust2" android:duration="200" /&gt;
</span><span class='line'>    &lt;item android:drawable="@drawable/rocket_thrust3" android:duration="200" /&gt;
</span><span class='line'>&lt;/animation-list&gt;</span></code></pre></td></tr></table></div></figure>


<h3>补间动画（Tween Animation）</h3>

<p>补间动画比帧动画就要高级一些，因为充分利用了计算机的特性，只需要告诉起始状态和结束状态，然后让计算机去计算中间的状态，再不用把每一帧都告诉计算机了。在安卓中就是<a href="http://developer.android.com/intl/zh-cn/guide/topics/graphics/view-animation.html">View Animation</a>，以及后来的强大的<a href="http://developer.android.com/intl/zh-cn/guide/topics/graphics/prop-animation.html">Property Animation</a>。</p>

<h2>动画的基本原理</h2>

<p>动画，其实就是一组快速播放的幻灯片，每一张（每一帧）的状态略有不同，快速连起来播放，由于人的眼睛有视觉残留效应，这就形成了动画。对于计算机程序来说，一般的动画就是给定对象的初始和终末状态，在一定时间内，不断的计算中间过程，并以视觉的方式展示出来，这就是动画。</p>

<p><img src="https://developer.android.com/images/animation/animation-linear.png" alt="" /></p>

<h2>动画的关键要素</h2>

<p>一个动画必须要有以下关键的要素：</p>

<ul>
<li>时长(Duration)，也就 说播放动画的总时长，系统默认是300ms</li>
<li>时间插值器(Interpolation)，就是动画的关键参数随时间要如何变化</li>
<li>重播(Repeat)，包括重播的次数以及方式，次数好理解，方式的意思是，可以顺序的一遍一遍的播，也是可以反着播</li>
<li>延迟(Delay)，动画启动的延时，通常用在动画组合里面。</li>
</ul>


<h2>View Animation</h2>

<p>这是从安卓一开始就支持的动画方式，仅能对View对象生效，使用起来也比较方便和简单，通过组合和自定义插值器，足以实现常用的视觉变幻（如渐变，旋转，缩放和位移）。</p>

<p>主要有四种<a href="http://developer.android.com/intl/zh-cn/reference/android/view/animation/TranslateAnimation.html">位移(translation)</a>，<a href="http://developer.android.com/intl/zh-cn/reference/android/view/animation/AlphaAnimation.html">透明度(alpha)</a>，<a href="http://developer.android.com/intl/zh-cn/reference/android/view/animation/RotateAnimation.html">旋转(rotation)</a>和<a href="http://developer.android.com/intl/zh-cn/reference/android/view/animation/ScaleAnimation.html">缩放(scaling)</a>。还可以以<a href="http://developer.android.com/intl/zh-cn/reference/android/view/animation/AnimationSet.html">集合</a>的方式来把几个动画合在一起播放。可以设置动画的时长(duration)，<a href="http://developer.android.com/intl/zh-cn/reference/android/view/animation/Interpolator.html">速率(interpolator)</a>，重复和事件的<a href="http://developer.android.com/intl/zh-cn/reference/android/view/animation/Animation.AnimationListener.html">监听</a>。
一些使用建议：</p>

<ul>
<li>所有这些东西都是放在<a href="http://developer.android.com/intl/zh-cn/reference/android/view/animation/package-summary.html">android.view.animation</a>包下面的，所以这些东西只能用于View对象。其实绝大多数时候，这也不是问题，除了View，还有啥要做动画呢。</li>
<li><a href="http://developer.android.com/intl/zh-cn/reference/android/view/animation/TranslateAnimation.html">TranslateAnimation</a>只能是直线运动，如果要曲线，就得自定义，可以参考<a href="http://guoh.org/lifelog/2012/04/android-customized-curved-path-animation/">这个</a>。</li>
<li>scale可以实现水平或者垂直翻转。</li>
<li><p>动画的触发是当View需要<a href="http://developer.android.com/intl/zh-cn/reference/android/view/View.html#invalidate(">invalidate</a>)的时候就会触发<a href="http://developer.android.com/intl/zh-cn/reference/android/view/View.html#setAnimation(android.view.animation.Animation">setAnimation</a>)指定的动画。所以，如下代码会正常触发:</p>

<pre><code class="`"> TextView title; // 原来是GONE的
 title.setVisibility(View.VISIBLE);
 title.setAnimation(new AlphaAnimation(0.3f, 1f);
</code></pre>

<p> 不一定非要<a href="http://developer.android.com/intl/zh-cn/reference/android/view/View.html#startAnimation(android.view.animation.Animation">startAnimation</a>)</p></li>
<li>要注意动画前后View的状态。这个比较难受。因为动画过程仅是放一遍电影（动画过程中仅是在View的绘制的时候对Canvas做变幻），对View本身并没有影响，通常的做法是给View Animation加上Listener，在onAnimationEnd的时候去设置目标状态。</li>
</ul>


<p>总的来说，View animation简单易用，大部分场景是可以满足需求的，早期版本确实有一些缺陷，内部状态在动画过程中会有问题，但是最近新的Android版本上面，已没有大问题，所以当能满足需求时，使用也没有问题。</p>

<h2><a href="http://developer.android.com/intl/zh-cn/guide/topics/graphics/prop-animation.html">属性动画（Property Animation)</a></h2>

<p>就像名字暗示那样，从3.0开始一套新的动画API出现了，可以描述为在一段时间内以一定的方式来改变某一个属性，是这样的方式来做动画。所以，它也可以做动画以外的事情。这套API的核心思想是在一段时间内，让某些属性随着时间改变（有点像中学的物理题）。</p>

<p>属性动画就是根据时间来改变某一对象（不一定非要是View）的某一个属性，至于某一时刻属性变化的值所产生的后果，由使用者自定义，因此你可以把它应用于任何对象。</p>

<p>它也与View一样，可以组合，可以设置事件监听。</p>

<p>与View动画最大的区别在于，View动画仅是按要求放一遍电影，不会对View的实际属性产生影响，因此，动画过程中以及完成后View仍是在原来的位置，属性也不会变化。而属性动画则不是，它会直接改变View的属性，所以有些时候这个优势会很方便，比如实现收起与展开的动画时Property动画会明显的优势：</p>

<p>比如，对于一个可以收起和弹出的动画，就可以这样来实现：</p>

<p>收起动画：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">animateCollapse</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">AnimatorSet</span> <span class="n">set</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">AnimatorSet</span><span class="o">();</span>
</span><span class='line'>        <span class="n">ObjectAnimator</span> <span class="n">translate</span> <span class="o">=</span> <span class="n">ObjectAnimator</span><span class="o">.</span><span class="na">ofFloat</span><span class="o">(</span><span class="n">mStatusPanel</span><span class="o">,</span> <span class="s">&quot;translationY&quot;</span><span class="o">,</span> <span class="mi">0</span><span class="n">f</span><span class="o">,</span> <span class="n">mTranslationY</span><span class="o">);</span>
</span><span class='line'>        <span class="n">ObjectAnimator</span> <span class="n">alpha</span> <span class="o">=</span> <span class="n">ObjectAnimator</span><span class="o">.</span><span class="na">ofFloat</span><span class="o">(</span><span class="n">mStatusPanel</span><span class="o">,</span> <span class="s">&quot;alpha&quot;</span><span class="o">,</span> <span class="mi">1</span><span class="n">f</span><span class="o">,</span> <span class="mf">0.75f</span><span class="o">);</span>
</span><span class='line'>        <span class="n">set</span><span class="o">.</span><span class="na">setDuration</span><span class="o">(</span><span class="mi">250</span><span class="o">);</span>
</span><span class='line'>        <span class="n">set</span><span class="o">.</span><span class="na">setInterpolator</span><span class="o">(</span><span class="k">new</span> <span class="nf">AccelerateDecelerateInterpolator</span><span class="o">());</span>
</span><span class='line'>        <span class="n">set</span><span class="o">.</span><span class="na">playTogether</span><span class="o">(</span><span class="n">translate</span><span class="o">,</span> <span class="n">alpha</span><span class="o">);</span>
</span><span class='line'>        <span class="n">set</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>弹出动画:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">animateExpansion</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">AnimatorSet</span> <span class="n">set</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">AnimatorSet</span><span class="o">();</span>
</span><span class='line'>        <span class="n">ObjectAnimator</span> <span class="n">translate</span> <span class="o">=</span> <span class="n">ObjectAnimator</span><span class="o">.</span><span class="na">ofFloat</span><span class="o">(</span><span class="n">mStatusPanel</span><span class="o">,</span> <span class="s">&quot;translationY&quot;</span><span class="o">,</span> <span class="n">mTranslationY</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>        <span class="n">ObjectAnimator</span> <span class="n">alpha</span> <span class="o">=</span> <span class="n">ObjectAnimator</span><span class="o">.</span><span class="na">ofFloat</span><span class="o">(</span><span class="n">mStatusPanel</span><span class="o">,</span> <span class="s">&quot;alpha&quot;</span><span class="o">,</span> <span class="mf">0.75f</span><span class="o">,</span> <span class="mi">1</span><span class="n">f</span><span class="o">);</span>
</span><span class='line'>        <span class="n">set</span><span class="o">.</span><span class="na">setDuration</span><span class="o">(</span><span class="mi">250</span><span class="o">);</span>
</span><span class='line'>        <span class="n">set</span><span class="o">.</span><span class="na">setInterpolator</span><span class="o">(</span><span class="k">new</span> <span class="nf">AccelerateDecelerateInterpolator</span><span class="o">());</span>
</span><span class='line'>        <span class="n">set</span><span class="o">.</span><span class="na">playTogether</span><span class="o">(</span><span class="n">translate</span><span class="o">,</span> <span class="n">alpha</span><span class="o">);</span>
</span><span class='line'>        <span class="n">set</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果要使用View animation，也许也可以实现同样的效果，但估计会很难，因为要注意设置View的属性。比如说收起时并不是全hide，而是半折叠状态，就需要在AnimationListener#onAnimationEnd时去设置特殊的位置状态.</p>

<p>使用时候的建议：</p>

<ul>
<li>属性动画是post layout的，所以所有属性的初始状态就是你在布局中指定的值，动画是以此为基础开始的。</li>
<li><p>比较难使用的是translationX和translationY属性，它们的定义是相对于left和top的值。或者理解为相对于layout之后的在父布局中的位置的左边和右边。比如：</p>

<pre><code>ObjectAnimator.ofFloat(mBar, "translationY", 0, height);
</code></pre>

<p>这个就是进入的动画，一个View从其上头滑入。反过来:</p>

<pre><code>ObjectAnimator.ofFloat(mBar, "translationY", height, 0);
</code></pre>

<p>就是滑出。</p></li>
</ul>


<h3><a href="https://developer.android.com/reference/android/animation/ValueAnimator">ValueAnimator</a></h3>

<p>这是属性动画的核心类，其实它很好的诠释了什么是动画，它就是把某个值在duration内，按照插值器指定的方式从一个值变化到另一个值。看到这个类，就可以感知到动画跟View其实一点关系都没有，动画就是一个随时间变化 的数值而已。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ValueAnimator</span> <span class="n">animation</span> <span class="o">=</span> <span class="n">ValueAnimator</span><span class="o">.</span><span class="na">ofFloat</span><span class="o">(</span><span class="mi">0</span><span class="n">f</span><span class="o">,</span> <span class="mi">100</span><span class="n">f</span><span class="o">);</span>
</span><span class='line'><span class="n">animation</span><span class="o">.</span><span class="na">setDuration</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
</span><span class='line'><span class="n">animation</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>这意思就是让一个浮点数变量，在1秒内，从0，变化 到100。至于这个有什么具体的效果，要看你如何应用这个随时间变化 的浮点数变量，比如用于控制进度，一般情况下都会将变化的数值用于改变View的视觉变幻形态，但并不局限于此，这里只是为了说明这个动画数值可以用于任何地方：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="n">animation</span><span class="o">.</span><span class="na">addUpdateListener</span><span class="o">(</span><span class="n">anim</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">float</span> <span class="n">t</span> <span class="o">=</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span> <span class="n">anim</span><span class="o">.</span><span class="na">getAnimatedValue</span><span class="o">();</span>
</span><span class='line'>        <span class="n">mStatusPanel</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;Temperature: %04.1f&quot;</span><span class="o">,</span> <span class="n">t</span><span class="o">));</span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a href="https://developer.android.com/reference/android/animation/ObjectAnimator">ObjectAnimator</a></h3>

<p>它是ValueAnimator的一个子类，增强了点功能，它的作用是针对 给定的对象，对其指定的某个属性做动画插值，动画计算与前面提到的ValueAnimator是一样的，只不过说它可以对某个对象的指定的属性做计算，并改变这个属性：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ObjectAnimator</span> <span class="n">animation</span> <span class="o">=</span> <span class="n">ObjectAnimator</span><span class="o">.</span><span class="na">ofFloat</span><span class="o">(</span><span class="n">textView</span><span class="o">,</span> <span class="s">&quot;translationX&quot;</span><span class="o">,</span> <span class="mi">100</span><span class="n">f</span><span class="o">);</span>
</span><span class='line'><span class="n">animation</span><span class="o">.</span><span class="na">setDuration</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
</span><span class='line'><span class="n">animation</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>这意思就是说，把动画计算出来的数值应用于一个textView的translationX属性上面。它与下面的代码，用ValueAnimator来实现，是完全等效的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ValueAnimator</span> <span class="n">animation</span> <span class="o">=</span> <span class="n">ValueAnimator</span><span class="o">.</span><span class="na">ofFloat</span><span class="o">(</span><span class="mi">0</span><span class="n">f</span><span class="o">,</span> <span class="mi">100</span><span class="n">f</span><span class="o">);</span>
</span><span class='line'><span class="n">animation</span><span class="o">.</span><span class="na">setDuration</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
</span><span class='line'><span class="n">animation</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">animation</span><span class="o">.</span><span class="na">addUpdateListener</span><span class="o">(</span><span class="k">new</span> <span class="n">ValueAnimator</span><span class="o">.</span><span class="na">AnimatorUpdateListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onAnimationUpdate</span><span class="o">(</span><span class="n">ValueAnimator</span> <span class="n">updatedAnimation</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">float</span> <span class="n">animatedValue</span> <span class="o">=</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span><span class="n">updatedAnimation</span><span class="o">.</span><span class="na">getAnimatedValue</span><span class="o">();</span>
</span><span class='line'>        <span class="n">textView</span><span class="o">.</span><span class="na">setTranslationX</span><span class="o">(</span><span class="n">animatedValue</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>由此可见ObjectAnimator就是多做了一层封装，方便来操作而已。需要注意的是，对象的属性必须要有setter和getter，因为这里会用传进来的属性名字用反射去调用，所以必须要有属性对应的settter和getter方法。</p>

<h3><a href="https://developer.android.com/reference/android/view/ViewPropertyAnimator">ViewPropertyAnimator</a></h3>

<p>因为大多数情况下是对View做动画，所以又封装出了一个专门用于View的属性动画工具，也即ViewPropertyAnimator，可以非常方便进行属性动画。用一个实例就会相当明了。</p>

<p>比如说想对某个View进行位置，用ObjectAnimator，就需要这么写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ObjectAnimator</span> <span class="n">animX</span> <span class="o">=</span> <span class="n">ObjectAnimator</span><span class="o">.</span><span class="na">ofFloat</span><span class="o">(</span><span class="n">myView</span><span class="o">,</span> <span class="s">&quot;x&quot;</span><span class="o">,</span> <span class="mi">50</span><span class="n">f</span><span class="o">);</span>
</span><span class='line'><span class="n">ObjectAnimator</span> <span class="n">animY</span> <span class="o">=</span> <span class="n">ObjectAnimator</span><span class="o">.</span><span class="na">ofFloat</span><span class="o">(</span><span class="n">myView</span><span class="o">,</span> <span class="s">&quot;y&quot;</span><span class="o">,</span> <span class="mi">100</span><span class="n">f</span><span class="o">);</span>
</span><span class='line'><span class="n">AnimatorSet</span> <span class="n">animSetXY</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">AnimatorSet</span><span class="o">();</span>
</span><span class='line'><span class="n">animSetXY</span><span class="o">.</span><span class="na">playTogether</span><span class="o">(</span><span class="n">animX</span><span class="o">,</span> <span class="n">animY</span><span class="o">);</span>
</span><span class='line'><span class="n">animSetXY</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>但如果用ViewPropertyAnimator就会非常简洁：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">myView</span><span class="o">.</span><span class="na">animate</span><span class="o">().</span><span class="na">x</span><span class="o">(</span><span class="mi">50</span><span class="n">f</span><span class="o">).</span><span class="na">y</span><span class="o">(</span><span class="mi">100</span><span class="n">f</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a href="https://developer.android.com/reference/android/animation/AnimatorSet">AnimatorSet</a></h3>

<p>用于创建组合，前面的例子已经可以看出来它怎么使用的了。当需要同时实现多个变幻时，就可以把多个Animator用AnimatorSet来组合起来。这个类非常的灵活，可以设置不同的时长，延迟和重复。</p>

<h3><a href="https://developer.android.com/reference/android/view/animation/Interpolator">插值器</a></h3>

<p>插值器（Interpolators）用以调节数值与时间变化 的关系，因为动画是有时长的，是在duration内，从某个数值变化 到另一数值，而具体随时间怎么变，则由插值器决定。默认是线性的，比如250ms，0f到100，那么就是匀速运动。也可以加速的，减速的，先加速后减速，先减速后加速。</p>

<p><a href="https://developer.android.com/reference/android/view/animation/package-summary">android.view.animation</a>内定义了大量的插值器可供使用。</p>

<h3>在XML中来声明动画</h3>

<p>与布局类似，动画也是支持在XML中来声明的，这样可以减少代码量，加强复用。方式与方法与写代码差不多，只不过是放在了XML里面，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;set</span> <span class="na">android:ordering=</span><span class="s">&quot;sequentially&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;set&gt;</span>
</span><span class='line'>        <span class="nt">&lt;objectAnimator</span>
</span><span class='line'>            <span class="na">android:propertyName=</span><span class="s">&quot;x&quot;</span>
</span><span class='line'>            <span class="na">android:duration=</span><span class="s">&quot;500&quot;</span>
</span><span class='line'>            <span class="na">android:valueTo=</span><span class="s">&quot;400&quot;</span>
</span><span class='line'>            <span class="na">android:valueType=</span><span class="s">&quot;intType&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;objectAnimator</span>
</span><span class='line'>            <span class="na">android:propertyName=</span><span class="s">&quot;y&quot;</span>
</span><span class='line'>            <span class="na">android:duration=</span><span class="s">&quot;500&quot;</span>
</span><span class='line'>            <span class="na">android:valueTo=</span><span class="s">&quot;300&quot;</span>
</span><span class='line'>            <span class="na">android:valueType=</span><span class="s">&quot;intType&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/set&gt;</span>
</span><span class='line'>    <span class="nt">&lt;objectAnimator</span>
</span><span class='line'>        <span class="na">android:propertyName=</span><span class="s">&quot;alpha&quot;</span>
</span><span class='line'>        <span class="na">android:duration=</span><span class="s">&quot;500&quot;</span>
</span><span class='line'>        <span class="na">android:valueTo=</span><span class="s">&quot;1f&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/set&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这就声明了一个AnimatorSet，是一个位移和渐变动画，使用时用<a href="https://developer.android.com/reference/android/animation/AnimatorInflater">AnimatorInflater</a> 来加载<a href="https://developer.android.com/reference/android/animation/AnimatorInflater#loadAnimator(android.content.Context,%20int">load</a>)一下就可以了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">AnimatorSet</span> <span class="n">set</span> <span class="o">=</span> <span class="o">(</span><span class="n">AnimatorSet</span><span class="o">)</span> <span class="n">AnimatorInflater</span><span class="o">.</span><span class="na">loadAnimator</span><span class="o">(</span><span class="n">myContext</span><span class="o">,</span>
</span><span class='line'>    <span class="n">R</span><span class="o">.</span><span class="na">animator</span><span class="o">.</span><span class="na">property_animator</span><span class="o">);</span>
</span><span class='line'><span class="n">set</span><span class="o">.</span><span class="na">setTarget</span><span class="o">(</span><span class="n">myObject</span><span class="o">);</span>
</span><span class='line'><span class="n">set</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>支持的根节点有三个，AnimatorSet，ObjectAnimator和ValueAnimator：</p>

<ul>
<li>ValueAnimator - &lt;animator></li>
<li>ObjectAnimator - &lt;objectAnimator></li>
<li>AnimatorSet - &lt;set></li>
</ul>


<p>对于XML中使用ValueAnimator也是一样的，定义好，然后加载出来就可以用了，其实跟前面用代码写是一样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;animator</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">android:duration=</span><span class="s">&quot;1000&quot;</span>
</span><span class='line'>    <span class="na">android:valueType=</span><span class="s">&quot;floatType&quot;</span>
</span><span class='line'>    <span class="na">android:valueFrom=</span><span class="s">&quot;0f&quot;</span>
</span><span class='line'>    <span class="na">android:valueTo=</span><span class="s">&quot;-100f&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ValueAnimator</span> <span class="n">xmlAnimator</span> <span class="o">=</span> <span class="o">(</span><span class="n">ValueAnimator</span><span class="o">)</span> <span class="n">AnimatorInflater</span><span class="o">.</span><span class="na">loadAnimator</span><span class="o">(</span><span class="k">this</span><span class="o">,</span>
</span><span class='line'>        <span class="n">R</span><span class="o">.</span><span class="na">animator</span><span class="o">.</span><span class="na">animator</span><span class="o">);</span>
</span><span class='line'><span class="n">xmlAnimator</span><span class="o">.</span><span class="na">addUpdateListener</span><span class="o">(</span><span class="k">new</span> <span class="n">ValueAnimator</span><span class="o">.</span><span class="na">AnimatorUpdateListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onAnimationUpdate</span><span class="o">(</span><span class="n">ValueAnimator</span> <span class="n">updatedAnimation</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">float</span> <span class="n">animatedValue</span> <span class="o">=</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span><span class="n">updatedAnimation</span><span class="o">.</span><span class="na">getAnimatedValue</span><span class="o">();</span>
</span><span class='line'>        <span class="n">textView</span><span class="o">.</span><span class="na">setTranslationX</span><span class="o">(</span><span class="n">animatedValue</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span><span class='line'>
</span><span class='line'><span class="n">xmlAnimator</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>注意</strong>：有一点需要注意的是，因为View Animation也是支持用XML方式来定义的，且是放在了res/anim下面。所以如果使用Property Animation 时要放在res/animator下面，这个一定要注意。</p>

<h3>View状态变化动画</h3>

<p>从安卓一开始，对于一些View的状态变化就可以设置不同的Drawable，以给用户视觉上的交互 反馈，最常见的比如按扭，常规状态，Focused状态和按压状态，以及Disabled的状态（不可点击）可以设置不同的Drawable（如icon或者颜色等）以告诉用户。这个是叫做<a href="https://developer.android.com/guide/topics/resources/drawable-resource#StateList">StateListDrawable</a>。</p>

<p>现如今，也可以针对 View的不同状态设置不同的动画了，通过<a href="https://developer.android.com/reference/android/animation/StateListAnimator">StateListAnimator</a>来实现，它的语法与前面提到的StateListDrawable类似，亦是通过一个selector，只不过其中的每个item都是animator，而非drawable，比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;selector</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- the pressed state; increase x and y size to 150% --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item</span> <span class="na">android:state_pressed=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;set&gt;</span>
</span><span class='line'>            <span class="nt">&lt;objectAnimator</span> <span class="na">android:propertyName=</span><span class="s">&quot;scaleX&quot;</span>
</span><span class='line'>                <span class="na">android:duration=</span><span class="s">&quot;@android:integer/config_shortAnimTime&quot;</span>
</span><span class='line'>                <span class="na">android:valueTo=</span><span class="s">&quot;1.5&quot;</span>
</span><span class='line'>                <span class="na">android:valueType=</span><span class="s">&quot;floatType&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;objectAnimator</span> <span class="na">android:propertyName=</span><span class="s">&quot;scaleY&quot;</span>
</span><span class='line'>                <span class="na">android:duration=</span><span class="s">&quot;@android:integer/config_shortAnimTime&quot;</span>
</span><span class='line'>                <span class="na">android:valueTo=</span><span class="s">&quot;1.5&quot;</span>
</span><span class='line'>                <span class="na">android:valueType=</span><span class="s">&quot;floatType&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/set&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/item&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- the default, non-pressed state; set x and y size to 100% --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item</span> <span class="na">android:state_pressed=</span><span class="s">&quot;false&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;set&gt;</span>
</span><span class='line'>            <span class="nt">&lt;objectAnimator</span> <span class="na">android:propertyName=</span><span class="s">&quot;scaleX&quot;</span>
</span><span class='line'>                <span class="na">android:duration=</span><span class="s">&quot;@android:integer/config_shortAnimTime&quot;</span>
</span><span class='line'>                <span class="na">android:valueTo=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>                <span class="na">android:valueType=</span><span class="s">&quot;floatType&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;objectAnimator</span> <span class="na">android:propertyName=</span><span class="s">&quot;scaleY&quot;</span>
</span><span class='line'>                <span class="na">android:duration=</span><span class="s">&quot;@android:integer/config_shortAnimTime&quot;</span>
</span><span class='line'>                <span class="na">android:valueTo=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>                <span class="na">android:valueType=</span><span class="s">&quot;floatType&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/set&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/item&gt;</span>
</span><span class='line'><span class="nt">&lt;/selector&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这意思就是当点击的时候进行缩放动画，把其保存在res/xml/animate_scale.xml，这里需要注意，StateListDrawable是可以直接保存在res/drawable/下面的，但动画毕竟不是drawable，是不可以放在res/drawable下面。</p>

<p>通过android:stateListAnimator添加给指定的View，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;Button</span> <span class="na">android:stateListAnimator=</span><span class="s">&quot;@xml/animate_scale&quot;</span>
</span><span class='line'>        <span class="err">...</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果不在XML中设置，用代码也可以，先用<a href="https://developer.android.com/reference/android/animation/AnimatorInflater">AnimatorInflater</a>，把它<a href="https://developer.android.com/reference/android/animation/AnimatorInflater#loadStateListAnimator(android.content.Context,%20int">加载出来</a>)，然后调用<a href="https://developer.android.com/reference/android/view/View#setStateListAnimator(android.animation.StateListAnimator">View#setStateListAnimator</a>)即可。</p>

<h2>设计与实现要符合标准</h2>

<p>一个不争的事实是，在安卓的早期版本的时候对动画支持并不友好，因此当时很多GUI的设计都是采用水果平台的规范，导致大量的头部app，GUI交互，特别是动画这一块都是尽可能 的去模仿水果平台。</p>

<p>但时代不一样了，现在在谷歌加大了对安桌的支持力度后，特别是当<a href="https://www.google.com/design/spec/material-design/introduction.html">Material Design</a>出来了以后，从Android 5.0 Lollipop开始，伟大的Google就发布了专门针对UED的设计语言<a href="http://developer.android.com/intl/zh-cn/design/material/index.html">Material Design</a>它不再单单是设计规范了，而是一个非常详细的设计语言，具体到Icon怎么画，动画怎么做。那么，安桌的GUI交互设计与实现，就要符合Material Design的规范了，这样不但体验更符合安桌的风格，实现起来也更加的顺手，因为大量的标准库，AndroidX的库和风格主题动画等等都是以Material Design为标准的，开发人猿在实现的时候有更多的资源可以复用，不用再重复的去造轮子。</p>

<p>Anyway，官方的东西我们还是要学习的并尽可能的遵守的，特别是关于Material Design和Animation。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://developer.android.com/training/animation">Animations and Transitions</a></li>
<li><a href="https://github.com/lgvalle/Material-Animations">https://github.com/lgvalle/Material-Animations</a></li>
<li><a href="http://android-developers.blogspot.com/2014/10/implementing-material-design-in-your.html">Implementing Material Design in Your Android app</a></li>
<li><a href="http://www.androidchina.net/4385.html">如何学习 Android Animation</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Layout大点兵]]></title>
    <link href="http://toughcoder.net/blog/2021/08/16/android-layout-general-guides/"/>
    <updated>2021-08-16T22:55:56+08:00</updated>
    <id>http://toughcoder.net/blog/2021/08/16/android-layout-general-guides</id>
    <content type="html"><![CDATA[<p>智能手机催生了移动互联时代，现如今移动应用越来越成为最为核心的终端。而GUI页面是移动互联终端的标配，做好一个GUI页面，是非常重要的，能极大的提升用户体验和用户满意度。安桌生态，自古以来（没那么久，自安桌流行以来）在GUI方面就逊于水果生态，GUI页面的美观程度，操作流畅度以及动效的优美程度，水果生态是远好于安卓生态的。好消息是近几年的版本谷歌在这些方面做了大量努力，几乎追平与水果平台的差距。特别是在support libraries（现在是叫AndroidX）里面加入一些在各方面都远好于标准API中的UI组件，现在只要稍加努力就可以做出与水果一样，甚至更炫酷的GUI页面。</p>

<p><a href="http://toughcoder.net/blog/2021/08/16/android-layout-general-guides/"><img src="https://d2h0cx97tjks2p.cloudfront.net/blogs/wp-content/uploads/sites/2/2020/05/types-of-android-Layouts.jpg"></a></p>

<!-- more -->


<p>现在，对于安卓开发人猿来说，做GUI页面时选择很多，比如实现一个简单页面，可以用FrameLayout，也可以用LinearLayout，实现列表时可以用ListView，也可以用RecyclerView，面对纷繁复杂的需求以及众多的选择，到底该如何做选择，就成一个令人头痛的事情，今天就对Android布局进行一次大点兵，聊聊这些布局到底该如何使用。</p>

<p><strong>注意</strong>：这里面提到 的布局的意思是承担主页面的ViewGroup，比如页面的根布局。而不是指一些具体的内容渲染View（如TextView之于Text，ImageView之于Image）。</p>

<h2>简单和够用</h2>

<p>同样一个页面，实现的方式可以千奇百怪，就好比经典的“Hello，world”，就可以有很多种实现方法。文字肯定是用TextView，那么根布局用什么呢？可以用FrameLayout，可以用RelativeLayout，可以用LinearLayout，当然也可以用ListView，甚至是RecyclerView。对于产品同学来说，需求都可以实现了。但是可以并意味着就应该。</p>

<p>从工程和研发的角度来讲，实现方式要以够用和简单为首要原则，功能实现了仅仅是第一步，后续的维护成本是极其高昂的。代码首要是写给人看的，简单或者说优雅的实现方式，才能方便其他人理解，才可以降低维护成本。除此之外，代码也是写给CPU的，执行的性能和效率也是要考虑的因素，重型武器虽然也能杀死一只蚂蚁，但它耗费的资源相较于一根树枝来说，就大太多了。</p>

<p>过早优化是万恶之源，同理过于复杂的实现方案也是灾难之源。开发人猿要把简单和够用作为首要的原则。针对页面布局更是如此，能用普通的就用普通的，能用简单的就用简单的，功能实现了就可以，但是要尽可能以简单和便于理解作为标准。</p>

<h2>布局大点兵</h2>

<p>要想做出合适的选择，首先就需要对常用的布局进入了解，知道每种布局的优势和缺点，不同布局之间的区别，这样才能做出最佳的选择。</p>

<p>对于安卓的布局，可以分为三类，一是结构性布局，二是集合性布局，区别就在于数据是否是一个无限集合。比如像ListView它就是一个集合性布局，因为它可以显示无限个数据，只要往adapter里塞数据，列表就可以展示；而像LinearLayout就是一个结构性布局，虽然理论上它也可以塞无限个子view，但只能手动的塞，且性能会极其的差，毕竟它设计出来的目的，是沿一个方向排列一定数量的子View。</p>

<p>需要注意，不能简单的以可否滑动来作为布局的区分分类，因为结构性的布局，假如子View较多的话，外面包一层ScrollView也是可以滑动的；而集合性布局，假如数据 少于一屏的话，也是不可以滑动的。重点还是在于数据量。</p>

<h3>结构性布局</h3>

<h4><a href="https://developer.android.com/reference/android/widget/FrameLayout">FrameLayout</a></h4>

<p>简单易用，重点应用场景是层叠，在水平和竖直方向都没有约束，因此它最适合用于页面的根布局，比如手机窗口的根节点，Activity的根节点，Dialog的根节点等等，都是FrameLayout。</p>

<p>因为FrameLayout重点在于层叠，所以有时候可以做一些Canvas级别的裁切，比如实现圆角，这时也可以用FrameLayout，对FrameLayout的draw时去做裁切，然后整体效果就是做出了圆角，这对于一些不方便做圆的View有帮助，比如像SurfaceView，本身不方便做圆角，因此可以面其上面包一层FrameLayout，就可以实现圆角。</p>

<h4><a href="https://developer.android.com/reference/android/widget/LinearLayout">LinearLayout</a></h4>

<p>某一个方向的简单堆叠。最为方便的便是按比例排列，不过性能有影响。居中和对齐不如RelativeLayout方便。</p>

<h4><a href="https://developer.android.com/reference/android/widget/RelativeLayout">RelativeLayout</a></h4>

<p>特点就是每个子View必须指定相对于其他View的条件参数，以实现布局。强大且复杂，可以完全实现FrameLayout和LinearLayout。</p>

<p>特点是对于居中和对齐的支持很好，缺点就是性能差。且容易牵一发动全身。</p>

<h4><a href="https://developer.android.com/reference/android/widget/GridLayout">GridLayout</a></h4>

<p>非常适合表格形的页面，就好比计算器之类的，具体使用方法可以<a href="http://toughcoder.net/blog/2015/11/25/android-tricks-introduct-to-gridlayout/">参考之前的文章</a>。要点就在于子View呈表格形排列，且大部分的子View的尺寸是一致的，这时就可以考虑使用GridLayout。</p>

<h4><a href="https://developer.android.com/reference/androidx/constraintlayout/widget/ConstraintLayout">ConstraintLayout</a></h4>

<p>这个是AndroidX中增加的大杀器，使用方法可以<a href="http://toughcoder.net/blog/2021/08/10/android-constraintlayout-made-easy/">参考这篇文章</a>，可以胜任意的非集合性布局场景，可以完全替代前面提到的几种布局。</p>

<p>但为了避免滥用重武器，建议用ConstraintLayout替代LinearLayout和RelativeLayout就好。</p>

<h3>集合性布局</h3>

<h4><a href="https://developer.android.com/reference/android/widget/ListView">ListView</a></h4>

<p>集合性布局的典型代码，非常适合列表性数据。特点是简单易用。缺点是只能垂直方向滑动，每个条目元素的布局不宜复杂，并且对动画的支持不那么友好。当每个元素条目的布局非常简单时（如 就是简单的icon+文字）并且没有眼花聊乱的动画时，那么用这个也足够了。</p>

<h4><a href="https://developer.android.com/reference/android/widget/GridView">GridView</a></h4>

<p>与ListView类似，只不过是以表格形态来展示，简单易用，当每个无素条目较简单时，用这个比较合适，同样只支持垂直方向滑动。</p>

<h4><a href="https://developer.android.com/jetpack/androidx/releases/recyclerview">RecyclerView</a></h4>

<p>AndroidX中的集合性布局的大杀器，它重点在于Recycler，在渲染层面做了较多的优化，且布局方式跟ViewGroup本身没关系，有各种布局管理器来实现不同样式的布局，并且对动画的支持，也就是说每个元素条目的进入退出的动画的支持非常友好。</p>

<p>缺点就是使用起来较麻烦，目前已经变成了集合性布局的标准实现，但其实有被滥用的嫌疑，很多对于元素条目非常简单的场景没必要用它的。</p>

<h4><a href="https://developer.android.com/reference/androidx/viewpager/widget/ViewPager">ViewPager</a></h4>

<p>水平方向多页布局的标准组件。其实把它称作集合性布局，略迁强，因为很多时候它的数据量并不像前面那几位那样多。需要注意它的适用场景是有很多页需要横向滑动展示时，这里页的意思是，每一屏只展示一个元素条目。</p>

<h2>如何选择一个合适的布局</h2>

<p>首先，要对数据量做区分，看是选择结构性布局还是集合性布局，然后再依据页面的复杂程度来做具体的选择。</p>

<p>其次，核心的原则是够用和简单，不能为了用而用，简单的实现功能能节省大量的维护成本。</p>

<p>具体的指导原则是：</p>

<ol>
<li>应用的根布局或者页面的根布局建议用FrameLayout</li>
<li>稍复杂的LinearLayout和RelativeLayout一定要用ConstraintLayout来做</li>
<li>如有可能，可以多多用ConstraintLayout</li>
<li>对于集合性布局，如果元素条目简单，且无动画要求，那就用ListView或者GridView吧</li>
<li>如有可能，可以多多用RecyclerView</li>
<li>水平方向多页展示，没得说就用ViewPager</li>
</ol>


<h2>参考资料</h2>

<ul>
<li><a href="https://developer.android.com/guide/topics/ui/declaring-layout">Layouts</a></li>
<li><a href="https://developer.android.com/guide/topics/ui/layout/linear">Linear Layout</a></li>
<li><a href="https://developer.android.com/guide/topics/ui/layout/relative">Relative Layout</a></li>
<li><a href="https://developer.android.com/training/constraint-layout">Build a Responsive UI with ConstraintLayout</a></li>
<li><a href="https://developer.android.com/guide/topics/ui/layout/recyclerview">Create dynamic lists with RecyclerView</a></li>
<li><a href="https://developer.android.com/guide/topics/ui/binding">AdapterView</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android ConstraintLayout使用攻略]]></title>
    <link href="http://toughcoder.net/blog/2021/08/10/android-constraintlayout-made-easy/"/>
    <updated>2021-08-10T22:49:20+08:00</updated>
    <id>http://toughcoder.net/blog/2021/08/10/android-constraintlayout-made-easy</id>
    <content type="html"><![CDATA[<p>ConstraintLayout是新一代的布局，它汲取了众家之长，把布局的概念进行了大统一，灵活且强大，基本上可以干掉以前所有的常用布局（LinearLayout, RelativeLayout和FrameLayout）。自从Android Studio 2.3（大约在2017年）后，它就变成了Android Studio的默认模板的布局控件，可以看出谷歌对它的钟爱程度。今天就来学习一下如何使用这个新布局神器。</p>

<p><a href="http://toughcoder.net/blog/2021/08/10/android-constraintlayout-made-easy/"><img src="https://abhiandroid.com/ui/wp-content/uploads/2018/07/Constraint-Layout-Example-In-Android-Studio-1.png"></a></p>

<!-- more -->


<h2>简述</h2>

<p><a href="(https://developer.android.com/reference/androidx/constraintlayout/widget/ConstraintLayout">ConstraintLayout</a>)与RelativeLayout有些类似，是一个布局管理器（ViewGroup），但要强大许多，它可以以各种方式排列子View，以及按比例伸缩。最重要的改变就是它对于『Drag and drop』拖拽式制作GUI页面支持的相当的好。当然了这个取决于个人喜好，很多人仍然喜欢用写代码的方式直接去写xml文件，包括我在内。拖拽式虽然直观，但是不方便精准控制，对于一般性的布局来说尚可，但稍复杂了后，以及有了一些可滑动的view时，就不是那么的方便了。对于喜欢拖拽的同学可以查看<a href="https://developer.android.google.cn/training/constraint-layout">官方的一个教程</a>，以及<a href="https://blog.csdn.net/guolin_blog/article/details/53122387">郭大婶的一篇文章</a>，这两篇专注于拖拽式，且讲的都比较详细。</p>

<h3>添加依赖</h3>

<p>因为ConstraintLayout并不是在标准的SDK中，而是被放在了support SDK中，现在统一叫androidx了，所以要单独添加依赖：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'> <span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">implementation</span> <span class="s1">&#39;com.android.support.constraint:constraint-layout:2.1.0&#39;</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>概念与术语</h3>

<p>ContraintLayout中把一切有关布局的参数都称之为Constraint（约束），长和宽，对齐，居中，margin和padding都是constraint。布局中的属性均以&#8221;layout_constraint&#8221;为前缀。
约束（Constrain）的意思是指用另外一个View（包括父布局即ContraintLayout）对当前View的某一布局参数施加影响。具体的影响叫做Constraint，另外一个View称作约束对象（Constraining Object)，当前View称作被约束对象（Constrainted Object）。</p>

<p><img src="https://developer.android.com/reference/androidx/constraintlayout/widget/resources/images/relative-positioning.png" alt="" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>     <span class="nt">&lt;Button</span> <span class="na">android:id=</span><span class="s">&quot;@+id/buttonA&quot;</span> <span class="err">...</span> <span class="nt">/&gt;</span>
</span><span class='line'>         <span class="nt">&lt;Button</span> <span class="na">android:id=</span><span class="s">&quot;@+id/buttonB&quot;</span> <span class="err">...</span>
</span><span class='line'>                 <span class="na">app:layout_constraintLeft_toRightOf=</span><span class="s">&quot;@id/buttonA&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>排列方式</h3>

<p>对子View的排列方式是一个ViewGroup的最基础的功能，它也体现了不同的布局管理器的作用，如线性布局（LinearLayout）是以水平或者垂直方向平铺方式来排列子View的。ConstraintLayout是以类似RelativeLayout的方式，需要针对每个子View指定如何排列。</p>

<p><img src="https://developer.android.com/reference/androidx/constraintlayout/widget/resources/images/relative-positioning-constraints.png" alt="" /></p>

<h4>基础排列方式</h4>

<p>最为基础的排列方式就是针对每个子View，指定它相对于另外一个View或者父布局（也就是ConstraintLayout本身）的相对位置，从而确定该View的具体方位。具体就是[left, top, right, bottom]四个关键的排列元素相对于另外一个View或者父布局的位置关系。</p>

<p>如，layout_constraintLeft_toLeftOf=&ldquo;parent&#8221;，这就是左边与父布局左边对齐；layout_constraintTop_toBottomOf=&#8221;id/header&#8221;，这是把这个View放在id为header的下面。以此类推，因为与RelativeLayout的布局参数比较类似，就不细说了，详情可参阅文档。</p>

<p>还有一个非常实用的Constraint叫做baseline，它是专门针对TextView的，baseline也即文本的基线，可以简单理解为文字的底部，当有两个TextiView不一样大，文字大小也不一样时，却需要对齐文本，这个属于就相当的有用。</p>

<p><img src="https://upload-images.jianshu.io/upload_images/2787721-aebcad66710f4d48.png?imageMogr2/auto-orient/strip|imageView2/2/w/213/format/webp" alt="" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;TextView</span> <span class="na">android:id=</span><span class="s">&quot;@+id/TextView1&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;TextView</span>
</span><span class='line'>    <span class="na">android:id=</span><span class="s">&quot;@+id/TextView2&quot;</span>
</span><span class='line'>    <span class="na">app:layout_constraintLeft_toRightOf=</span><span class="s">&quot;@+id/TextView1&quot;</span>
</span><span class='line'>    <span class="na">app:layout_constraintBaseline_toBaselineOf=</span><span class="s">&quot;@+id/TextView1&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>margin</h3>

<p>常规使用与其他布局是一样的，通过layout_margin[Start,End,Left,Right,Bottom,Top]来指定与约束对象之间的margin，这个不细说了。</p>

<p>需要说一下，ConstraintLayout有一个goneMargin，可以用于当一个约束对象的Visibility被设置为GONE时，使用。用layout_goneMargin[Start,End,Left,Top,Right,Bottom]来设置。</p>

<p>比如A约束B，B在A的右边，它俩挨着，但如果A的Visibility设置为GONE时，正常情况下B就会挨到原来A的左边了，跑到了左边界上，这时可能就会变得比较丑了，如果使用margin，比如在A和B中间加一个margin，可以解决问题，但是也会影响当A可见的时候。而用goneMargin就可以完美的解决此种场景。layout_goneMarginStart=&ldquo;10dip&#8221;，那么这个margin只有当约束对象A的Visibility被置为GONE时，才会生效，这时B虽然跑到了左边界上，但是还有margin，就不会那么丑了。（其实goneMargin应用的场景也比较有限，前面说的case，也可以用A和B的父布局的leftPadding来解决）</p>

<p><img src="https://developer.android.com/reference/androidx/constraintlayout/widget/resources/images/visibility-behavior.png" alt="" /></p>

<h4>相当骚气的环状排列方式</h4>

<p>除了常规的行列式排列以外，这货还非常骚气的可以环状排列，以约束对象为圆心，通过角度和半径来约束位置：</p>

<ul>
<li>layout_constraintCircle 用以指定作为圆心的约束对象（其他view的id）</li>
<li>layout_constraintCircleRadius 被约束对象与圆心的距离</li>
<li>layout_constraintCircleAngle 被约束对象与横轴的角度（0~360度之间）</li>
</ul>


<p><img src="https://developer.android.com/reference/androidx/constraintlayout/widget/resources/images/circle1.png" alt="" />
<img src="https://developer.android.com/reference/androidx/constraintlayout/widget/resources/images/circle2.png" alt="" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;Button</span> <span class="na">android:id=</span><span class="s">&quot;@+id/buttonA&quot;</span> <span class="err">...</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Button</span> <span class="na">android:id=</span><span class="s">&quot;@+id/buttonB&quot;</span> <span class="err">...</span>
</span><span class='line'>      <span class="na">app:layout_constraintCircle=</span><span class="s">&quot;@+id/buttonA&quot;</span>
</span><span class='line'>      <span class="na">app:layout_constraintCircleRadius=</span><span class="s">&quot;100dp&quot;</span>
</span><span class='line'>      <span class="na">app:layout_constraintCircleAngle=</span><span class="s">&quot;45&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>环状排列实例</h4>

<p>环状排列虽然骚气，但是现实中似乎应用场景不多。</p>

<h3>居中与对齐</h3>

<p>对齐不是大问题，前面讲的如何排列其实就是对齐，选定一个约束对象后，其他对象都受其约束，就自然对齐了。</p>

<p>比较常见的问题，以及大部分时候比较麻烦的是居中，平衡与中庸中符合绝大多数审美的，因此布局时，绝大多数情况下都是需要居中的。居中的实现的方式就是两边都约束于父布局（也即ConstraintLayout），如：</p>

<p><img src="https://developer.android.com/reference/androidx/constraintlayout/widget/resources/images/centering-positioning.png" alt="" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>     <span class="nt">&lt;androidx.constraintlayout.widget.ConstraintLayout</span> <span class="err">...</span><span class="nt">&gt;</span>
</span><span class='line'>         <span class="nt">&lt;Button</span> <span class="na">android:id=</span><span class="s">&quot;@+id/button&quot;</span> <span class="err">...</span>
</span><span class='line'>             <span class="na">app:layout_constraintLeft_toLeftOf=</span><span class="s">&quot;parent&quot;</span>
</span><span class='line'>             <span class="na">app:layout_constraintRight_toRightOf=</span><span class="s">&quot;parent&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>     <span class="err">&lt;</span>/&gt;
</span></code></pre></td></tr></table></div></figure>


<p>居中，其实就是两边的约束边距各占空余空间的50%，扩展开来，想要实现不完全居中，两边边距呈一定比例关系，也是可以办到的。比如说黄金比例0.618就比居中好看，这也好办：
<img src="https://developer.android.com/reference/androidx/constraintlayout/widget/resources/images/centering-positioning-bias.png" alt="" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>   <span class="nt">&lt;androidx.constraintlayout.widget.ConstraintLayout</span> <span class="err">...</span><span class="nt">&gt;</span>
</span><span class='line'>         <span class="nt">&lt;Button</span> <span class="na">android:id=</span><span class="s">&quot;@+id/button&quot;</span> <span class="err">...</span>
</span><span class='line'>             <span class="na">app:layout_constraintHorizontal_bias=</span><span class="s">&quot;0.382&quot;</span>
</span><span class='line'>             <span class="na">app:layout_constraintLeft_toLeftOf=</span><span class="s">&quot;parent&quot;</span>
</span><span class='line'>             <span class="na">app:layout_constraintRight_toRightOf=</span><span class="s">&quot;parent&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="err">&lt;</span>/&gt;
</span></code></pre></td></tr></table></div></figure>


<p>这个比例控制叫bias，可以有Horizontal和Vertical两个方向。</p>

<h3>尺寸</h3>

<p>尺寸也就是针对子View的宽与高的约束，其实大部分时候一些具体的子View的宽与高要么指定大小，要么是WRAP_CONTENT的，但有些时候可能就是需要更加的灵活一些，这时就可以考虑用ConstraintLayout里面的一些特性。宽与高设置为固定大小或者WRAP_CONTENT时与其他ViewGroup是一样的，不用多说，要想特别一点的就是设置为『0dip』或者MATCH_CONSTRAINT时，就会用其他约束来决定该View的宽或者高。后面重点讨论有约束的情况。</p>

<h4>默认行为</h4>

<p>如果子View的宽或者高设置为了MATCH_CONSTRAINT（或者『0dip』）时，默认的行为是它会占满剩余的可用空间。</p>

<h4>Max与Min</h4>

<p>还可以加上最大最小的限制：</p>

<ul>
<li>layout_constraintWidth_min and layout_constraintHeight_min : will set the minimum size for this dimension</li>
<li>layout_constraintWidth_max and layout_constraintHeight_max : will set the maximum size for this dimension</li>
<li>layout_constraintWidth_percent and layout_constraintHeight_percent : will set the size of this dimension as a percentage of the parent</li>
</ul>


<h4>按约束对象的比例来设置（Percent）</h4>

<p>前面的默认行为或者最大最小还算不上啥，其他ViewGroup也有类似参数。最为变态与强大的是可以按约束对象的比例来作为此View的宽或者高：</p>

<ul>
<li>The dimension should be set to MATCH_CONSTRAINT (0dp)</li>
<li>The default should be set to percent app:layout_constraintWidth_default=&ldquo;percent&rdquo; or app:layout_constraintHeight_default=&ldquo;percent&rdquo;</li>
<li>Then set the layout_constraintWidth_percent or layout_constraintHeight_percent attributes to a value between 0 and 1</li>
</ul>


<h4>自身宽高比（Ratio）</h4>

<p>这个是最变态的约束方式，可以设置一个自身的宽高比，以确定子View的尺寸，当然了具体的宽或者高还要以其他约束方式确定具体尺寸，然后再按照设置的宽高比对另外一个进行约束。比如，实现一个方形的按扭，宽是其自身要求的宽度值（WRAP_CONTENT），设置的宽高比是1：1，所以高度也会跟宽度一样，就是一个方形的按扭了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;Button</span> <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>               <span class="na">android:layout_height=</span><span class="s">&quot;0dp&quot;</span>
</span><span class='line'>               <span class="na">app:layout_constraintDimensionRatio=</span><span class="s">&quot;1:1&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>高级特性</h2>

<p>前面讲的是一些基础使用方式，但是这货远不止这些，还有一些非常强大的功能，下面简单介绍两个。</p>

<h3>链（Chains）</h3>

<p>在某一个方向上（横着或者竖着）有着相互约束的一组子View，会被视为一个链，第一个称作头部（Head），可以应用一些样式以对整个链内的子View都产生影响。
<img src="https://developer.android.com/reference/androidx/constraintlayout/widget/resources/images/chains.png" alt="" />
<img src="https://developer.android.com/reference/androidx/constraintlayout/widget/resources/images/chains-head.png" alt="" /></p>

<p>这里的相互约束的意思是，比如有上面A，B，C三个子View，那么它们要相互约束，也即：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;ConstraintLayout&gt;</span>
</span><span class='line'>      <span class="nt">&lt;A</span> <span class="na">layout_constraintLeft_toLeftOf=</span><span class="s">&quot;parent&quot;</span>
</span><span class='line'>           <span class="na">layout_constraintRight_toRightOf=</span><span class="s">&quot;B&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;B</span> <span class="na">layout_constraintLeft_toLeftOf=</span><span class="s">&quot;A&quot;</span>
</span><span class='line'>           <span class="na">layout_constraintRight_toRightOf=</span><span class="s">&quot;C&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;C</span> <span class="na">layout_constraintLeft_toLeftOf=</span><span class="s">&quot;B&quot;</span>
</span><span class='line'>           <span class="na">layout_constraintRight_toRightOf=</span><span class="s">&quot;parent&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/ConstraintLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>就可以，对头部子View  A进行样式（Chain style），通过layout_constraintHorizontal_chainStyle来设置：</p>

<ul>
<li>CHAIN_SPREAD &ndash; the elements will be spread out (default style)<em> Weighted chain &ndash; in CHAIN_SPREAD mode, if some widgets are set to MATCH_CONSTRAINT, they will split the available space</em> CHAIN_SPREAD_INSIDE &ndash; similar, but the endpoints of the chain will not be spread out* CHAIN_PACKED &ndash; the elements of the chain will be packed together. The horizontal or vertical bias attribute of the child will then affect the positioning of the packed elements</li>
</ul>


<p><img src="https://developer.android.com/reference/androidx/constraintlayout/widget/resources/images/chains-styles.png" alt="" /></p>

<p>链中的权重（Weighted chains）</p>

<p>默认情况下，子View会均分并占满可用的空间。可以用权重来按比例分配，给子View加上layout_constraintHorizontal_weight后，就会按比例分配，这个与LinearLayout的layoutWeight用法是一样的。</p>

<h3>组（Groups）</h3>

<p>为了View的渲染性能，各路大神告诉我们要尽可能的让布局扁平化，但是，如果太扁平了，全都放在一个ViewGroup下面，就会混乱，特别是像RelativeLayout和ConstraintLayout，子View的排列方式会产生相互依赖，会有牵一发动全身的情况出现。为了避免这种情况，就需要对子View进行分组，对页面进行区域划分，把紧密相关的视为一个组。以往，会用一个子ViewGroup把一个组包起来，虽然会加深View的层次，但这样能避免牵一发动全身。</p>

<p>而对于ConstraintLayout来说，有更先进的方式了，它有一个类叫Group，就是专门用来干这件事儿的，但Group对象并不是一个真的子View，这里的意思是它并不会在View tree中进行渲染，它是专门用于管理属于它的子View的，比如方便对整个组进行Visibility的设置。</p>

<h2>神器要如何使用</h2>

<p>前面的介绍就差不多了，ConstraintLayout还是相当的强大的，如有可能还是尽可能的多用它吧。它的实现上面确实挺复杂的，毕竟功能比较强大，但它的效率并不差。对于常用的几大布局都可以直接用它来替代。</p>

<h3>当线性布局使用（as LinearLayout）</h3>

<p>线性布局最大的优势就在于可以用weight的方式来按比例排放，而这个用前面提到的Chain就可以完美的解决。所以，LinearLayout可以完全放弃。</p>

<h3>当层叠布局使用（as FrameLayout）</h3>

<p>FrameLayout的全用场景一般是作为整个应用的根布局，特别是HomeActivity+Fragment这种架构。从纯的功能角度来讲，ConstraintLayout可以完全实现FrameLayout的所有功能，所以，FrameLayout也可以放弃。</p>

<p>但从简单方便角度来讲，假如是HomeActivity的根布局，子View都是MATCH_PARENT的Fragement的话，也没有必要换成ConstraintLayout，这种场景FrameLayout完全够用，而且非常适合它。换成ConstraintLayout反倒有些浪费，有些杀鸡用牛刀。</p>

<h3>当相对布局使用（as RelativeLayout）</h3>

<p>从前面的讲述可以看出，ConstraintLayout几乎就是RelativeLayout的加强版。所以，凡是用到RelativeLayout的地方都<strong>应该换成ConstaintLayout</strong>。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://developer.android.google.cn/training/constraint-layout">Build a Responsive UI with ConstraintLayout</a></li>
<li><a href="https://developer.android.com/reference/androidx/constraintlayout/widget/ConstraintLayout">ConstraintLayout</a></li>
<li><a href="https://www.jianshu.com/p/17ec9bd6ca8a">约束布局ConstraintLayout看这一篇就够了</a></li>
<li><a href="https://developer.android.com/codelabs/constraint-layout#0">Use ConstraintLayout to design your Android views</a></li>
<li><a href="https://www.raywenderlich.com/9475-constraintlayout-tutorial-for-android-complex-layouts">ConstraintLayout Tutorial for Android: Complex Layouts</a></li>
<li><a href="https://abhiandroid.com/ui/constraintlayout">Constraint Layout Tutorial With Example In Android Studio</a></li>
<li><a href="https://blog.csdn.net/guolin_blog/article/details/53122387">Android新特性介绍，ConstraintLayout完全解析</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android事件高级手势处理]]></title>
    <link href="http://toughcoder.net/blog/2021/08/03/advanced-event-gesture-tricks/"/>
    <updated>2021-08-03T21:26:02+08:00</updated>
    <id>http://toughcoder.net/blog/2021/08/03/advanced-event-gesture-tricks</id>
    <content type="html"><![CDATA[<p>GestureDetector只能帮我们处理并识别一些常用的简单的手势，如点击，双击，长按，滑动（Scroll）和快速滑动（Fling）等，一般情况下，这些足够我们使用了，但有些时候需要一些更为复杂的手势操作，如Translate，Zoom，Scale和Rotate，以及像处理一些多点触控（MultiTouch），这就需要开发人猿自己处理了，本文将讨论一下这些内容。</p>

<p><a href="http://toughcoder.net/blog/2021/08/03/advanced-event-gesture-tricks/"><img src="http://en.proft.me/media/android/android_gestures.jpg"></a></p>

<!-- more -->


<h2>高级手势识别</h2>

<h3>移动（Translate/Drag）</h3>

<p>这里的移动的意思是让物体随着手指在屏幕上移动，或者叫作拖拽。而且这个只需要一个手指就可以办到，不涉及多点触控。</p>

<p>其实，这个实现起来并不复杂，从onTouchEvent处获得事件后，不断的用MotionEvent的坐标来刷新目标View即可，甚至都不用管具体的事件类型，因为无论是ACTION_DOWN，ACTION_UP或者ACTION_MOVE，都可以提供新的坐标，只管从事件处取坐标然后刷新就可以了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>   <span class="n">draw</span> <span class="nf">at</span> <span class="o">(</span><span class="n">x0</span><span class="o">,</span> <span class="n">y0</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">onTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">x</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">getRawX</span><span class="o">();</span>
</span><span class='line'>      <span class="n">y</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">getRawY</span><span class="o">();</span>
</span><span class='line'>      <span class="n">invalidate</span> <span class="nf">with</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">);</span> <span class="c1">// will draw at (x, y);</span>
</span><span class='line'>   <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>旋转（Rotate）</h3>

<p>同样，对于旋转用单个手指也可以办到，以目标View当前的位置为圆心，以手指划过的曲线作为圆弧，由此便可让目标View旋转起来，而且这个手势由单个手指也可以实现，不用管多点触控。</p>

<p>其实可以进一步的做简化，认定屏幕中央为圆心，来计算手势划过的角度，并且为了连惯性，要以事件ACTION_MOVE过程中的增量角度来对View进行旋转，这样会让旋转看起来更顺滑一些，额外的工作是要把事件的坐标进行一下转化，转化为以屏幕中心为原点的坐标。</p>

<p>具体的流程是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>   <span class="n">lastTheta</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">onTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">switch</span> <span class="o">(</span><span class="n">action</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">case</span> <span class="nl">ACTION_DOWN:</span>
</span><span class='line'>      <span class="n">lastX</span> <span class="o">=</span> <span class="n">normalize</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getX</span><span class="o">());</span>
</span><span class='line'>      <span class="n">lastY</span> <span class="o">=</span> <span class="n">normalize</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getY</span><span class="o">());</span>
</span><span class='line'>      <span class="n">lastTheta</span> <span class="o">=</span> <span class="n">angle</span><span class="o">(</span><span class="n">lastX</span><span class="o">,</span> <span class="n">lastY</span><span class="o">);</span>
</span><span class='line'>      <span class="k">break</span><span class="o">;</span>
</span><span class='line'>   <span class="k">case</span> <span class="nl">ACTION_MOVE:</span>
</span><span class='line'>     <span class="n">newX</span> <span class="o">=</span> <span class="n">normalize</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getX</span><span class="o">());</span>
</span><span class='line'>     <span class="n">newY</span> <span class="o">=</span> <span class="n">normalize</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getY</span><span class="o">());</span>
</span><span class='line'>     <span class="n">theta</span> <span class="o">=</span> <span class="n">angle</span><span class="o">(</span><span class="n">newX</span><span class="o">,</span> <span class="n">newY</span><span class="o">);</span>
</span><span class='line'>     <span class="n">deltaTheta</span> <span class="o">=</span> <span class="n">alpha</span> <span class="o">-</span> <span class="n">beta</span><span class="o">;</span>
</span><span class='line'>     <span class="n">invalidate</span> <span class="n">to</span> <span class="n">rotate</span> <span class="n">with</span> <span class="n">deltaTheta</span><span class="o">;</span>
</span><span class='line'>     <span class="n">lastTheta</span> <span class="o">=</span> <span class="n">theta</span><span class="o">;</span>
</span><span class='line'>     <span class="k">break</span><span class="o">;</span>
</span><span class='line'>   <span class="k">case</span> <span class="nl">ACTION_CANCEL:</span>
</span><span class='line'>   <span class="k">case</span> <span class="nl">ACTION_UP:</span>
</span><span class='line'>      <span class="n">we</span> <span class="n">are</span> <span class="n">done</span><span class="o">.</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">normalizeX</span><span class="o">(</span><span class="n">x</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">x</span> <span class="o">/</span> <span class="n">screenWidth</span><span class="o">;</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">normalizeY</span><span class="o">(</span><span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">y</span> <span class="o">/</span> <span class="n">screenHeight</span><span class="o">;</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">angle</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nf">atan</span><span class="o">(</span><span class="n">y</span> <span class="o">/</span> <span class="n">x</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>至于缩放，单个手指无法完成，必须要用两个手指才可以，就涉及到多点触控，所以需要先介绍一下多点触控。</p>

<h2>多点触控（MultiTouch）</h2>

<p>这个并不复杂，虽然听起来像个神秘高科技，但其实，处理流程并不复杂，主体流程仍然是在onTouchEvent方法中，并且主要的对象仍是<a href="https://developer.android.com/reference/android/view/MotionEvent?hl=en">MotionEvent</a>，文档里面基本上都说清楚了，要点就是：</p>

<ol>
<li>MotionEvent对象，会用pointerId和pointerIndex来区分不同的触控点（术语是Pointer）</li>
<li>事件流是：ACTION_DOWN 称为主触控点(Primary Pointer），然后是ACTION_POINTER_DOWN 另外一个触控点来了（非Primary Pointer），然后是ACTION_MOVE 这里没有显示 区分不同的pointer，需要开发人猿自己去区分，然后是ACTION_POINTER_UP 非主触控点 离开了，最后是ACTION_UP 主触控点离开了。需要注意的是，这是处理事件的逻辑上的顺序 ，真实的事件流，不一定是这样的（ACTION_DOWN肯定是第一个，ACTION_UP肯定 肯定最后一个，但中间的几个有顺序 不定）。</li>
<li>注意的要点，每次事件来了后，不同的触控点（Pointer）的index并不是固定的，比如上一次MOVE时它在index 0，但下次可能就在index 1，而其Pointer Id是固定的。所以在处理的整个流程中要记录不同Pointer的id，然后获得其index，再用index去取坐标啊之类的数据。</li>
<li>多点触控，天生就支持，所以即使你不识别多点触控手势（如scale），只关心单个手指手势，在处理的时候，仍要考虑到多点的逻辑。比如说translate时，如果不考虑多点，那么当另外一个手指触摸了屏幕，产生了ACTION_MOVE事件，但它的坐标跟最初产生事件的Pointer差距很远，那么如果不做排除，就可能产生瞬间漂移。</li>
</ol>


<h3>加强版的单触控点手势</h3>

<p>对于前面提到的单触控点手势（单手指就能识别的手势）如Translate和Rotate，其实都需要加强一下逻辑，以防止多触控点产生的干扰。</p>

<p>加强版本的单触控点手势处理：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>   <span class="n">primaryPointerId</span> <span class="o">=</span> <span class="n">INVALIDE_POINTER_ID</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">onTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">switch</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getActionMasked</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>         <span class="k">case</span> <span class="nl">ACTION_DOWN:</span>
</span><span class='line'>              <span class="n">primaryPointer</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">getPointerId</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getActionIndex</span><span class="o">());</span>
</span><span class='line'>              <span class="k">break</span><span class="o">;</span>
</span><span class='line'>         <span class="k">case</span> <span class="nl">ACTION_MOVE:</span>
</span><span class='line'>              <span class="n">pointerIndex</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">findPointerIndex</span><span class="o">(</span><span class="n">primaryPointerId</span><span class="o">);</span>
</span><span class='line'>              <span class="n">x</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">getX</span><span class="o">(</span><span class="n">pointerIndex</span><span class="o">);</span>
</span><span class='line'>              <span class="n">y</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">getY</span><span class="o">(</span><span class="n">pointerIndex</span><span class="o">);</span>
</span><span class='line'>              <span class="n">be</span> <span class="n">happy</span> <span class="n">with</span> <span class="n">x</span> <span class="n">and</span> <span class="n">y</span><span class="o">;</span>
</span><span class='line'>              <span class="k">break</span><span class="o">;</span>
</span><span class='line'>          <span class="k">case</span> <span class="nl">ACTION_UP:</span>
</span><span class='line'>          <span class="k">case</span> <span class="nl">ACTION_CANCEL:</span>
</span><span class='line'>            <span class="n">primaryIndex</span> <span class="o">=</span> <span class="n">INVALIDE_POINTER_ID</span><span class="o">;</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>   <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然，这里也取决于具体的使用场景，假如允许切换触控点，比如先一个手指拖动，然后另外一个手指点进来，这时第一个手指离开了，如果想继续 拖动的话，就需要更换已保存的primaryPointer。这时会收到ACTION_POINTER_UP，需要在此做切换处理，继续 上面的代码片段，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="n">secondPointer</span> <span class="o">=</span> <span class="n">INVALIDE_POINTER_ID</span><span class="o">;</span>
</span><span class='line'>  <span class="k">case</span> <span class="nl">ACTION_POINTER_DOWN:</span>
</span><span class='line'>     <span class="n">secondPointer</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">getPointerId</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getActionIndex</span><span class="o">());</span>
</span><span class='line'>     <span class="k">break</span><span class="o">;</span>
</span><span class='line'>  <span class="k">case</span> <span class="nl">ACTION_POINTER_UP:</span>
</span><span class='line'>     <span class="n">thisPointer</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">getPointerId</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getActionIndex</span><span class="o">());</span>
</span><span class='line'>     <span class="k">if</span> <span class="o">(</span><span class="n">thisPointer</span> <span class="o">==</span> <span class="n">primaryPointer</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">primaryPointer</span> <span class="o">=</span> <span class="n">secondPointer</span><span class="o">;</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'>     <span class="n">secondPointer</span> <span class="o">=</span> <span class="n">INVALIDE_POINTER_ID</span><span class="o">;</span>
</span><span class='line'>     <span class="k">break</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>还有一点需要注意的是，不能简单的只用<a href="https://developer.android.com/reference/android/view/MotionEvent#getPointerCount()">getPointerCount</a>来作判断，就比如pointer 1先来，然后pointer 2来了，pointer 1又离开了，这时pointerCount仍是1，但是pointer已变化 了，事件的位置就变了，如果不按上述方法处理，将会发生跳变。</p>

<h3>缩放（Zoom/Scale）</h3>

<p>缩放手势是多点触控的一个非常典型的应用，因为单手无法做出比较合理的手势判断。SDK当中提供了一个用于识别缩放的手势识别器<a href="https://developer.android.com/reference/android/view/ScaleGestureDetector">ScaleGestureDetector</a>，它的使用方法与GestureDetector一样，创建对象，塞MotionEvent进去，然后注册listener即可。</p>

<p>但如果，用单独的detector不是很方便，比如已经自己实现了一套手势识别逻辑，现在只想加上Scale，或者其他原因不方便引入ScaleGestureDetector，那么就得自己去做了，也并不是很复杂。</p>

<p>主要思路就是，收集齐两个触控点，记录它们初始的位置，计算它们之间初始的距离，在ACTION_MOVE时，再计算新的距离，新旧距离之比既可当作缩放的比例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>   <span class="n">primaryPointer</span> <span class="o">=</span> <span class="n">INVALIDE_POINTER_ID</span><span class="o">;</span>
</span><span class='line'>   <span class="n">secondPointer</span> <span class="o">=</span> <span class="n">INVALIDE_POINTER_ID</span><span class="o">;</span>
</span><span class='line'>   <span class="n">initialSpan</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>   <span class="n">startPoint</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>   <span class="n">onTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="k">case</span> <span class="nl">ACTION_DOWN:</span>
</span><span class='line'>              <span class="n">index</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">getActionIndex</span><span class="o">();</span>
</span><span class='line'>              <span class="n">primaryPointer</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">getPointerId</span><span class="o">(</span><span class="n">index</span><span class="o">);</span>
</span><span class='line'>              <span class="n">startPoint</span> <span class="o">=</span> <span class="n">Point</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getX</span><span class="o">(</span><span class="n">index</span><span class="o">),</span> <span class="n">event</span><span class="o">.</span><span class="na">getY</span><span class="o">(</span><span class="n">index</span><span class="o">));</span>
</span><span class='line'>              <span class="k">break</span><span class="o">;</span>
</span><span class='line'>         <span class="k">case</span> <span class="nl">ACTION_POINTER_DOWN:</span>
</span><span class='line'>              <span class="n">index</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">getActionIndex</span><span class="o">();</span>
</span><span class='line'>              <span class="n">secondPointer</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">getPointerId</span><span class="o">(</span><span class="n">index</span><span class="o">);</span>
</span><span class='line'>              <span class="n">sp</span> <span class="o">=</span> <span class="n">Point</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getX</span><span class="o">(</span><span class="n">index</span><span class="o">),</span> <span class="n">event</span><span class="o">.</span><span class="na">getY</span><span class="o">(</span><span class="n">index</span><span class="o">));</span>
</span><span class='line'>              <span class="n">initialSpan</span> <span class="o">=</span> <span class="n">distance</span><span class="o">(</span><span class="n">startPoint</span><span class="o">,</span> <span class="n">sp</span><span class="o">);</span>
</span><span class='line'>             <span class="k">break</span><span class="o">;</span>
</span><span class='line'>         <span class="k">case</span> <span class="nl">ACTION_MOVE:</span>
</span><span class='line'>              <span class="k">if</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getPointerCount</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">primaryIndex</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">findPointerIndex</span><span class="o">(</span><span class="n">primaryPointer</span><span class="o">);</span>
</span><span class='line'>                  <span class="n">pp</span> <span class="o">=</span> <span class="n">Point</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getX</span><span class="o">(</span><span class="n">primaryIndex</span><span class="o">),</span> <span class="n">event</span><span class="o">.</span><span class="na">getY</span><span class="o">(</span><span class="n">primaryIndex</span><span class="o">));</span>
</span><span class='line'>                  <span class="n">secondIndex</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">findPointerIndex</span><span class="o">(</span><span class="n">secondPointer</span><span class="o">);</span>
</span><span class='line'>                  <span class="n">sp</span> <span class="o">=</span> <span class="n">Point</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getX</span><span class="o">(</span><span class="n">secondIndex</span><span class="o">),</span> <span class="n">event</span><span class="o">.</span><span class="na">getY</span><span class="o">(</span><span class="n">secondIndex</span><span class="o">));</span>
</span><span class='line'>                  <span class="n">thisDistance</span> <span class="o">=</span> <span class="n">distance</span><span class="o">(</span><span class="n">pp</span><span class="o">,</span> <span class="n">sp</span><span class="o">);</span>
</span><span class='line'>                  <span class="k">if</span> <span class="o">(</span><span class="n">thisDistance</span> <span class="o">&gt;</span> <span class="n">ScaledSpan</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                      <span class="n">scale</span> <span class="o">=</span> <span class="n">thisDistance</span> <span class="o">/</span> <span class="n">initialSpan</span><span class="o">;</span>
</span><span class='line'>                      <span class="n">be</span> <span class="n">happy</span> <span class="n">with</span> <span class="n">scale</span><span class="o">;</span>
</span><span class='line'>                  <span class="o">}</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              <span class="k">break</span><span class="o">;</span>
</span><span class='line'>         <span class="k">case</span> <span class="nl">ACTION_UP:</span>
</span><span class='line'>         <span class="k">case</span> <span class="nl">ACTION_CANCEL:</span>
</span><span class='line'>         <span class="k">case</span> <span class="nl">ACTION_POINTER_UP:</span>
</span><span class='line'>             <span class="n">thisPointer</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">getPointerId</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getActionIndex</span><span class="o">());</span>
</span><span class='line'>             <span class="k">if</span> <span class="o">(</span><span class="n">thisPointer</span> <span class="o">==</span> <span class="n">primaryPointer</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">primaryPointer</span> <span class="o">=</span> <span class="n">INVALIDE_POINTER_ID</span><span class="o">;</span>
</span><span class='line'>             <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">thisPointer</span> <span class="o">==</span> <span class="n">seocndPointer</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">secondPointer</span> <span class="o">=</span> <span class="n">INVALIDE_POINTER_ID</span><span class="o">;</span>
</span><span class='line'>             <span class="o">}</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>   <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然 ，还可以加一些阈值判断，比如当distance大于<a href="https://developer.android.com/reference/android/view/ViewConfiguration?hl=en#getScaledTouchSlop()">getScaledTouchSlop</a>，才触发使用scale的逻辑。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://en.proft.me/2017/06/25/detecting-gestures-android-gesturedetector/">Detecting gestures on Android via GestureDetector</a></li>
<li><a href="https://developer.android.com/training/gestures/multi">Handle multi-touch gestures</a></li>
<li><a href="https://developer.android.com/training/gestures/scale">Drag and scale</a></li>
<li><a href="https://developer.android.com/guide/topics/ui/drag-drop">Drag and drop</a></li>
<li><a href="https://developer.android.com/reference/android/view/MotionEvent?hl=en">MotionEvent</a></li>
<li><a href="https://guides.codepath.com/android/gestures-and-touch-events">Gestures and Touch Events</a></li>
<li><a href="https://github.com/Almeros/android-gesture-detectors">android-gesture-detectors</a></li>
<li><a href="https://github.com/ikew0ng/SwipeBackLayout">SwipeBackLayout</a></li>
<li><a href="https://github.com/alexvasilkov/GestureViews">GestureViews</a></li>
<li><a href="https://github.com/nisrulz/Sensey">Sensey</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android View滑动处理大法]]></title>
    <link href="http://toughcoder.net/blog/2021/07/26/android-view-scrolling-made-easy/"/>
    <updated>2021-07-26T22:27:14+08:00</updated>
    <id>http://toughcoder.net/blog/2021/07/26/android-view-scrolling-made-easy</id>
    <content type="html"><![CDATA[<p>对于触控式操作来说，滑动是一个特别重要的手势操作，如何做到让应用程序的页面滑动起来如丝般顺滑，让用户感觉到手起刀落的流畅感，是开发人猿需要重点解决的问题，这对提升用户体验是最为重要的事情。本文就将探讨一下，Android中View的滑动相关知识，以及如何做到丝般顺滑。</p>

<p><a href="http://toughcoder.net/blog/2021/07/26/android-view-scrolling-made-easy/"><img src="https://i.stack.imgur.com/tGa5g.png"></a></p>

<!-- more -->


<h2>如何让View滑动起来</h2>

<p>View的滑动是GUI支持的一项基本特性，就像触摸事件一件，这是废话，平台如果不支持，你还搞个毛线。</p>

<h3>View滑动的基本原理</h3>

<p>我们先来看一下Android中实现View的滑动的基本原理。其实屏幕并没有动啊，一个View的可绘制区域，对于屏幕来说，对于view tree来说都是没有变化 的。父布局给某一个View的绘制区域是在layout之后就确定好了的，当View的真实高度或者宽度超过了这块可绘制区域，那么就需要滑动才可以把整个View做到用户可见。View内部通过两个关键成员变量mScrollX和mScrollY来记录滑动之后的坐标，View本身有mLeft和mTop来标识自己相对于父布局的坐标位置，那么当有滑动的时候，在此View当中具体要绘制的区域就变成了以mLeft+mScrollX和mTop+mScrollY为起点的区域了。由此View便滚动起来了。</p>

<h3>如何实现View的滑动</h3>

<p>对于开发人猿来说，实现View的滑动，需要关注三个重要的方法，也即是<a href="https://developer.android.com/reference/android/view/View#scrollBy(int,%20int">View#scrollBy</a>)，<a href="https://developer.android.com/reference/android/view/View#scrollTo(int,%20int">View#scrollTo</a>)以及<a href="https://developer.android.com/reference/android/view/View#onScrollChanged(int,%20int,%20int,%20int">View#onScrollChanged</a>)，这是实现滑动的三个最为核心的方法。</p>

<p>scrollBy提供的参数是需要滑动的距离，而scrollTo则是需要传入要滑动到的目标坐标值，这两个方法都是要修改mScrollX和mScrollY的值，本质上是一样的。而onScrollChanged则是一个回调，用以通知更新了的滑动位置。</p>

<h2>Scroll手势</h2>

<p>要想让View滑动起来，离不开事件手势的支持。最简单也是最直接的手势就是onScroll手势，这个在GestureDetecor中可以识别出此手势，或者自己去直接处理touch event也可以得出此手势。这个并不复杂，就是直接通过touch 事件来计算滑动多少距离就好了，按照View预设计的可以滑动的方向，比如横向就计算不同时间点MotionEvent的坐标值，得到一个水平距离deltaX，然后调用scrollBy即可。垂直方向依此类推。</p>

<p>Scroll手势简单是因为它是直接来源于事件，且速度较慢，并不需要额外处理，所以整体逻辑处理流程并不复杂。</p>

<p>在<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/GestureDetector.java?q=gesturedetector">GestureDetector</a>中的识别就是在ACTION_MOVE时，查看滑动过的距离，这个距离（由sqrt(dx x dx, dy x dy）如果大于touch slop，就会触发onScroll手势回调。</p>

<h2>Fling手势</h2>

<p>Fling也即是快速滑动，就是手指在屏幕上使劲的『挠』一下，手势的要点是手指在屏幕快速滑过一小段短距离，就像把一个小球弹出去的感觉一样。对于Fling手势来说，最重要的是速度，水平方向的速度和垂直方向的速度，可以理解为高中物理常讲到的平抛运动一样。</p>

<p>GestureDetector识别Fling的逻辑是，在ACTION_UP时，检查此次事件的速度，如果水平方向速度或者垂直方向速度超过了阈值，便会触发Fling手势回调。</p>

<p><strong>注意</strong>：留意Scroll与Fling的区别，Scroll是慢的，不关心时间与速度，只关心滑动的距离，是在ACTION_MOVE时，手指并未有离开屏幕时就触发了，只要是ACTION_MOVE还在继续，就会继续触发onScroll，并且ACTION_UP时终止整个Scroll，而Fling只关心速度，不关心距离，是在ACTION_UP时，手指离开了屏幕了（此次事件流处理结了）才会触发。</p>

<h2>VelocityTracker</h2>

<p>Fling事件速度是决定性的，仔细看GestureDetector的处理过程会发现它使用了一个叫做VelocityTracker的对象，来帮忙处理一些关于速度的具体逻辑，那么有必要深入了解一下这个对象。</p>

<p><a href="https://developer.android.com/reference/android/view/VelocityTracker?hl=en">VelocityTracker</a>使用起来并不复杂，获取它的一个对象后，只需要不断的把MotionEvent塞给它就可以了，然后在需要的时候让其计算两个方向上的速度，然后就没有然后了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">velocityTracker</span> <span class="o">=</span> <span class="n">VelocityTracker</span><span class="o">.</span><span class="na">obtain</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">onTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">ev</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">velocityTracker</span><span class="o">.</span><span class="na">addMovement</span><span class="o">(</span><span class="n">ev</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">want</span> <span class="n">to</span> <span class="n">know</span> <span class="n">velocities</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">velocityTracker</span><span class="o">.</span><span class="na">computeCurrentVelocity</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
</span><span class='line'>       <span class="n">vx</span> <span class="o">=</span> <span class="n">velocityTracker</span><span class="o">.</span><span class="na">getXVelocity</span><span class="o">();</span>
</span><span class='line'>       <span class="n">vy</span> <span class="o">=</span> <span class="n">veolocityTracker</span><span class="o">.</span><span class="na">getYVelocity</span><span class="o">();</span>
</span><span class='line'>       <span class="n">be</span> <span class="n">happy</span> <span class="n">with</span> <span class="n">vx</span> <span class="n">and</span> <span class="n">vy</span><span class="o">.</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个类的实现，值得仔细看一下，它主要的实现都是用JNI去实现，可能是因为计算方式较复杂，所以<a href="https://developer.android.com/reference/android/view/VelocityTracker?hl=en#computeCurrentVelocity(int">computeCurrentVelocity</a>)方法也说明了，让你真用的时候再调，这个不用去管细节实现。重点看一下这个类，里面有一个对象池，用以缓存对象，并且创建对象的方式并不是直接new，而是用其<a href="https://developer.android.com/reference/android/view/VelocityTracker?hl=en#obtain(">obtain</a>)方法。这里用的是叫<a href="https://refactoring.guru/design-patterns/flyweight">享元</a>（Flyweight Pattern)的设计模式，也就是说VelocityTracker对象其实是共享的。</p>

<h2>顺滑如丝</h2>

<p>前面提到了，让View滑动，只需要调用scrollBy或者scrollTo即可，但这个吧，是直接修改了mScrollX，mScrollY，然后invalidate，View下次draw时就直接在把目标区域内容绘制出来了，换句话说这两个方法滑动是瞬间跳格式的。</p>

<p>一般来说，这也没有问题，就像onScroll手势，ACTION_MOVE时，不断的scrollBy刚刚滑过的距离，都还okay，没有什么问题。</p>

<p>但是对于Fling事件就不行了，Fling事件，也即快速滑动，要求短时间内进行大距离滑动，或者像有跳转的需求时，也是短时间内要滑动大距离。如果直接scrollBy或者scrollTo一步到位了，会显得 相当的突兀，体验相当不好，卡顿感特别强。如果能像做动画那样，在一定时间内，让其平滑的滑动，就会如丝般顺滑，体验好很多。Scroller就是专门用来解决此问题的。</p>

<h3>Scroller</h3>

<p><a href="">Scroller</a>是对滑动的封装，并不是View的子类，其实它跟View一点关系也没有，也不能操作View，实际上它与属性动画类似，它仅是一个滚动位置的计算器，告诉它起始位置和要滚动的距离，然后它就会告诉你位置随时间变化的值。其实这是一个中学物理题，也即给定初始位置，给定要滚动的距离，以一定的方式来计算每个时间点的位置。具体的计算方式由mInterpolater成员来控制，默认是ViscousFluid，是按自然指数为减速度来计算的，具体的可以查看Scroller的源码。如果不喜欢默认的计算方式，可以自己实现个Interpolator，然后在构造时传进去。</p>

<p>Scroller的作用在于实现平稳滑动，不让View的滚动出现跳跃，比如滑动一下ListView，开始滑动时的位置是x0，y0（ActionDown的位置），要向下滑动比如500个像素，不平稳的意思是，从x0，一下跳到x0+500的位置。要平稳，就要不断的一点点的改变x的值然后invalidate，这也就是Scroller的典型使用场景：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Scroller</span> <span class="n">scroller</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Scroller</span><span class="o">(</span><span class="n">getContext</span><span class="o">());</span>
</span><span class='line'><span class="n">scroller</span><span class="o">.</span><span class="na">startScroll</span><span class="o">(</span><span class="n">x0</span><span class="o">,</span> <span class="n">y0</span><span class="o">,</span> <span class="mi">500</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在computeScroll时：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">scroller</span><span class="o">.</span><span class="na">computeScrollOffset</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>   <span class="kt">int</span> <span class="n">currX</span> <span class="o">=</span> <span class="n">scroller</span><span class="o">.</span><span class="na">getCurrX</span><span class="o">();</span>
</span><span class='line'>   <span class="kt">int</span> <span class="n">currY</span> <span class="o">=</span> <span class="n">scroller</span><span class="o">.</span><span class="na">getCurrY</span><span class="o">();</span>
</span><span class='line'>   <span class="n">invalidate</span><span class="o">();</span> <span class="c1">// with currX and currY</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>computeScrollOffset在滚动没结束时返回true，也就是说你需要继续刷新view。返回false时表明滚动结束了，当然也就没有必要再刷新view（当然如果你乐意也可以继续刷，但是位置啥的都不变了，所以刷了也白刷）。</p>

<h2>滑动冲突处理</h2>

<p>关于View的滑动，最难搞的问题便是手势冲突处理，特别是当页面的结构变得复杂了以后。一般来讲，滑动手势，是让某一个View沿着某一个方向『平移』一段距离，如果某一个页面中只有一个View是可以滑动的，或者页面中不同的View的可滑动方向是垂直正交的，那么就不会有冲突的问题。</p>

<p>所谓滑动冲突，是指父View和子View都接受滑动手势，并且方向又是一样的，这时就产生了滑动冲突，常见就是ScrollView中套着ListView（这个通常是垂直Y方向上面有滑动冲突），或者ViewPager中套着ScrollView（这个是水平X方向上有滑动冲突）。</p>

<p>要想解决好滑动冲突问题，需要先确实好整体的设计方案，有了大的原则后，就容易用技术方案找到解法。最理想的方案，也是目前用的最多的方案就是在子View的边界设定一个margin区域，当ACTION_DOWN在margin区域以外，认定滑动手势归父View处理，否则交由子View处理。像一些全局手势也是要用如此的方案，当点击距离屏幕一定范围内(margin区域)认定此事件归当前页面处理，否则就认定为全局手势，就好比从屏幕左边向右滑动，很多应该将此识别为BACK到上一页，但如果离左边较远时滑动，就会是页面内部的滑动事件（假如它有可滑动的组件的话，事件手势会被其滑消耗掉）。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://developer.android.com/training/gestures/detector">Detect common gestures</a></li>
<li><a href="https://en.wikipedia.org/wiki/Flyweight_pattern">Flyweight pattern</a></li>
<li><a href="https://www.tutorialspoint.com/design_pattern/flyweight_pattern.htm">Design Patterns - Flyweight Pattern</a></li>
<li><a href="https://developer.android.com/training/gestures/scroll">Animate a scroll gesture</a></li>
<li><a href="https://stackoverflow.com/questions/11030639/android-scroller-simple-example">Android Scroller simple example</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android View 事件派发流程]]></title>
    <link href="http://toughcoder.net/blog/2021/07/21/android-view-event-dispatching/"/>
    <updated>2021-07-21T19:14:58+08:00</updated>
    <id>http://toughcoder.net/blog/2021/07/21/android-view-event-dispatching</id>
    <content type="html"><![CDATA[<p>自从乔帮主横空出世推出了iPhone以来，触控式的操作便成了21世纪智能设备的标准输入方式。对于同是智能操作系统的Android来说，也不例外。事件，特别是触控事件对于移动应用程序开发来说是一个非常重要的，也是开发人猿必须掌握的事情。这里就要讨论一下Android View中的Event系统，重点探讨一下事件的派发流程。</p>

<p><a href="http://toughcoder.net/blog/2021/07/21/android-view-event-dispatching/"><img src="https://i.stack.imgur.com/PgRvm.png"></a></p>

<!-- more -->


<h2>输入事件综述</h2>

<h3>事件的分类</h3>

<p>对于Android系统来说用户输入事件分为两类，一个是<a href="https://developer.android.com/reference/android/view/KeyEvent?hl=en">KeyEvent</a>，这个是硬件产生的事件，或者更准确的说是非触控手势产生的事件，通常包括硬件按扭如音量键，电源键，系统导航（HOME，BACK和MENU）以及外设（如外接设备，键盘，自拍杆等）系统层也都会统一的做成映射转成KeyEvent传给当前Window窗口（当前进程）。</p>

<p>还有一类就是专指解控屏幕产生的触摸式的手势事件，是<a href="https://developer.android.com/reference/android/view/MotionEvent">MotionEvent</a>，为啥不叫TouchEvent呢，因为啊最初的Android版本是支持滑动球的，现在已经没有这种设备，但是名字就这么流传下来了。这个事件专门由视图系统view tree来处理，本文也将重点讨论此类事件。</p>

<h3>事件从哪里来</h3>

<p>简单来说事件是源自于硬件，比如屏幕或者按键，这是废话，知道了这个意义也不大，硬件产生电子信号后会经由驱动传给内核，内核再报给输入系统，再传给wms（Windows Manager Server），最终会到Window这里。对于应用层来说，可以理解 为事件都是从Window对象这里来的就行了。</p>

<h3>谁先收到事件</h3>

<p>对于GUI应用程序层来说，wms就是事件来源，那么ViewRootImpl对象是第一个接收到事件，ViewRootImpl并没有直接把事件派发给view tree，而是先给到DecorView，宿主组件在DecorView处有一个专门接收事件的回调，由此事件便到了当前的宿主组件如Activity或者Dialog，看它是否愿意做处理，如果它不处理，那么就会把事件再派发给GUI视图系统，也即view tree，这一次没有再经过ViewRootImpl对象，而是由Window对象直接调用根节点的dispatchTouchEvent或者dispatchKeyEvent。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>   15:57:02.254   W/System.err: java.lang.Exception: Stack trace
</span><span class='line'>   15:57:02.255   W/System.err:     at java.lang.Thread.dumpStack(Thread.java:1348)
</span><span class='line'>   15:57:02.256   W/System.err:     at net.toughcoder.view.ViewWindowExampleActivity.dispatchKeyEvent(ViewWindowExampleActivity.java:107)
</span><span class='line'>   15:57:02.256   W/System.err:     at com.android.internal.policy.DecorView.dispatchKeyEvent(DecorView.java:342)
</span><span class='line'>   15:57:02.256   W/System.err:     at android.view.ViewRootImpl$ViewPostImeInputStage.processKeyEvent(ViewRootImpl.java:5053)
</span><span class='line'>   15:57:02.257   W/System.err:     at android.view.ViewRootImpl$ViewPostImeInputStage.onProcess(ViewRootImpl.java:4921)
</span><span class='line'>   15:57:02.257   W/System.err:     at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:4442)
</span><span class='line'>   15:57:02.258   W/System.err:     at android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:4495)
</span><span class='line'>   15:57:02.258   W/System.err:     at android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:4461)
</span><span class='line'>   15:57:02.259   W/System.err:     at android.view.ViewRootImpl$AsyncInputStage.forward(ViewRootImpl.java:4601)
</span><span class='line'>   15:57:02.259   W/System.err:     at android.view.ViewRootImpl$InputStage.apply(ViewRootImpl.java:4469)
</span><span class='line'>   15:57:02.259   W/System.err:     at android.view.ViewRootImpl$AsyncInputStage.apply(ViewRootImpl.java:4658)
</span><span class='line'>   15:57:02.260   W/System.err:     at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:4442)
</span><span class='line'>   15:57:02.260   W/System.err:     at android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:4495)
</span><span class='line'>   15:57:02.260   W/System.err:     at android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:4461)
</span><span class='line'>   15:57:02.261   W/System.err:     at android.view.ViewRootImpl$InputStage.apply(ViewRootImpl.java:4469)
</span><span class='line'>   15:57:02.261   W/System.err:     at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:4442)
</span><span class='line'>   15:57:02.261   W/System.err:     at android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:4495)
</span><span class='line'>   15:57:02.262   W/System.err:     at android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:4461)
</span><span class='line'>   15:57:02.262   W/System.err:     at android.view.ViewRootImpl$AsyncInputStage.forward(ViewRootImpl.java:4634)
</span><span class='line'>   15:57:02.263   W/System.err:     at android.view.ViewRootImpl$ImeInputStage.onFinishedInputEvent(ViewRootImpl.java:4795)
</span><span class='line'>   15:57:02.263   W/System.err:     at android.view.inputmethod.InputMethodManager$PendingEvent.run(InputMethodManager.java:2571)
</span><span class='line'>   15:57:02.263   W/System.err:     at android.view.inputmethod.InputMethodManager.invokeFinishedInputEventCallback(InputMethodManager.java:2081)
</span><span class='line'>   15:57:02.264   W/System.err:     at android.view.inputmethod.InputMethodManager.finishedInputEvent(InputMethodManager.java:2072)
</span><span class='line'>   15:57:02.264   W/System.err:     at android.view.inputmethod.InputMethodManager$ImeInputEventSender.onInputEventFinished(InputMethodManager.java:2548)
</span><span class='line'>   15:57:02.265   W/System.err:     at android.view.InputEventSender.dispatchInputEventFinished(InputEventSender.java:141)
</span><span class='line'>   15:57:02.265   W/System.err:     at android.os.MessageQueue.nativePollOnce(Native Method)
</span><span class='line'>   15:57:02.265   W/System.err:     at android.os.MessageQueue.next(MessageQueue.java:326)
</span><span class='line'>   15:57:02.265   W/System.err:     at android.os.Looper.loop(Looper.java:160)
</span><span class='line'>   15:57:02.266   W/System.err:     at android.app.ActivityThread.main(ActivityThread.java:6692)
</span><span class='line'>   15:57:02.266   W/System.err:     at java.lang.reflect.Method.invoke(Native Method)
</span><span class='line'>   15:57:02.266   W/System.err:     at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:493)
</span><span class='line'>   15:57:02.266   W/System.err:     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:858)</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>   15:57:14.582   W/System.err: java.lang.Exception: Stack trace
</span><span class='line'>   15:57:14.586   W/System.err:     at java.lang.Thread.dumpStack(Thread.java:1348)
</span><span class='line'>   15:57:14.586   W/System.err:     at net.toughcoder.view.DemoEventView.dispatchTouchEvent(DemoEventView.java:24)
</span><span class='line'>   15:57:14.586   W/System.err:     at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:3030)
</span><span class='line'>   15:57:14.586   W/System.err:     at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:2662)
</span><span class='line'>   15:57:14.586   W/System.err:     at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:3030)
</span><span class='line'>   15:57:14.587   W/System.err:     at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:2662)
</span><span class='line'>   15:57:14.587   W/System.err:     at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:3030)
</span><span class='line'>   15:57:14.587   W/System.err:     at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:2662)
</span><span class='line'>   15:57:14.587   W/System.err:     at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:3030)
</span><span class='line'>   15:57:14.587   W/System.err:     at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:2662)
</span><span class='line'>   15:57:14.587   W/System.err:     at com.android.internal.policy.DecorView.superDispatchTouchEvent(DecorView.java:440)
</span><span class='line'>   15:57:14.588   W/System.err:     at com.android.internal.policy.PhoneWindow.superDispatchTouchEvent(PhoneWindow.java:1830)
</span><span class='line'>   15:57:14.588   W/System.err:     at android.app.Activity.dispatchTouchEvent(Activity.java:3400)
</span><span class='line'>   15:57:14.588   W/System.err:     at com.android.internal.policy.DecorView.dispatchTouchEvent(DecorView.java:398)
</span><span class='line'>   15:57:14.588   W/System.err:     at android.view.View.dispatchPointerEvent(View.java:12753)
</span><span class='line'>   15:57:14.588   W/System.err:     at android.view.ViewRootImpl$ViewPostImeInputStage.processPointerEvent(ViewRootImpl.java:5122)
</span><span class='line'>   15:57:14.588   W/System.err:     at android.view.ViewRootImpl$ViewPostImeInputStage.onProcess(ViewRootImpl.java:4925)
</span><span class='line'>   15:57:14.588   W/System.err:     at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:4442)
</span><span class='line'>   15:57:14.588   W/System.err:     at android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:4495)
</span><span class='line'>   15:57:14.589   W/System.err:     at android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:4461)
</span><span class='line'>   15:57:14.589   W/System.err:     at android.view.ViewRootImpl$AsyncInputStage.forward(ViewRootImpl.java:4601)
</span><span class='line'>   15:57:14.589   W/System.err:     at android.view.ViewRootImpl$InputStage.apply(ViewRootImpl.java:4469)
</span><span class='line'>   15:57:14.589   W/System.err:     at android.view.ViewRootImpl$AsyncInputStage.apply(ViewRootImpl.java:4658)
</span><span class='line'>   15:57:14.589   W/System.err:     at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:4442)
</span><span class='line'>   15:57:14.589   W/System.err:     at android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:4495)
</span><span class='line'>   15:57:14.589   W/System.err:     at android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:4461)
</span><span class='line'>   15:57:14.589   W/System.err:     at android.view.ViewRootImpl$InputStage.apply(ViewRootImpl.java:4469)
</span><span class='line'>   15:57:14.590   W/System.err:     at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:4442)
</span><span class='line'>   15:57:14.590   W/System.err:     at android.view.ViewRootImpl.deliverInputEvent(ViewRootImpl.java:7117)
</span><span class='line'>   15:57:14.590   W/System.err:     at android.view.ViewRootImpl.doProcessInputEvents(ViewRootImpl.java:7086)
</span><span class='line'>   15:57:14.590   W/System.err:     at android.view.ViewRootImpl.enqueueInputEvent(ViewRootImpl.java:7047)
</span><span class='line'>   15:57:14.590   W/System.err:     at android.view.ViewRootImpl$WindowInputEventReceiver.onInputEvent(ViewRootImpl.java:7220)
</span><span class='line'>   15:57:14.590   W/System.err:     at android.view.InputEventReceiver.dispatchInputEvent(InputEventReceiver.java:187)
</span><span class='line'>   15:57:14.590   W/System.err:     at android.os.MessageQueue.nativePollOnce(Native Method)
</span><span class='line'>   15:57:14.590   W/System.err:     at android.os.MessageQueue.next(MessageQueue.java:326)
</span><span class='line'>   15:57:14.591   W/System.err:     at android.os.Looper.loop(Looper.java:160)
</span><span class='line'>   15:57:14.591   W/System.err:     at android.app.ActivityThread.main(ActivityThread.java:6692)
</span><span class='line'>   15:57:14.591   W/System.err:     at java.lang.reflect.Method.invoke(Native Method)
</span><span class='line'>   15:57:14.591   W/System.err:     at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:493)
</span><span class='line'>   15:57:14.591   W/System.err:     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:858)</span></code></pre></td></tr></table></div></figure>


<p>因此，从应用程序的角度来说，第一个收到事件的是Activity或者Dialog这种持有Window的顶级组件，所以如果想要从窗口级别来拦截掉所有的事件，那么Activity会是最好的选择，代码示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>   <span class="nd">@Override</span>
</span><span class='line'>   <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">dispatchKeyEvent</span><span class="o">(</span><span class="n">KeyEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">want</span> <span class="n">to</span> <span class="n">intercept</span> <span class="n">all</span> <span class="n">key</span> <span class="n">events</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">dispatchKeyEvent</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>     <span class="nd">@Override</span>
</span><span class='line'>   <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">dispatchTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">want</span> <span class="n">to</span> <span class="n">intercept</span> <span class="n">all</span> <span class="n">touch</span> <span class="n">events</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">dispatchTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面两个方法是在view tree之前最先收到事件的方法，是组件里面想拦截的最佳地点，这是从前面打先锋。而要想处理掉view tree未处理的事件，则需要在<a href="https://developer.android.com/reference/android/app/Activity?hl=en#onKeyUp(int,%20android.view.KeyEvent">onKeyUp(int keyCode, KeyEvent event)</a>)和<a href="https://developer.android.com/reference/android/app/Activity?hl=en#onKeyDown(int,%20android.view.KeyEvent">onKeyDown(int keyCode, KeyEvent event)</a>)以及<a href="https://developer.android.com/reference/android/app/Activity?hl=en#onTouchEvent(android.view.MotionEvent">onTouchEvent(MotionEvent event）</a>)这几个方法里面处理，这个相当于是断后。</p>

<h3>事件的散发过程（Event Propagation)</h3>

<p>事件到达应用程序这一端后，从Activity开始了散发过程，它的机制 和过程好比一个各处流动的小球，每个节点都接收一个事件对象，返回一个boolean，如果返回true则表示事件在此被消耗，当前事件散发终止，而如果返回false，表示当前节点对此事件不感兴趣，事件继续散发。</p>

<p>而具体的流程，则是先到Activity（Dialog等第一级组件），再到view tree，在view tree里面也是如此从父view到子view如此一个一个的传递，这个先后顺序流程则是由整个系统构架决定的。</p>

<h3>事件是一个数据流</h3>

<p>前面讲的事件的散发过程，就可以看作是一个球在在流动，这是从单个事件的处理角度看，是这样。但从整个的事件来看更如此，因为事件通常像电子信号一样，是从来源出发（如触摸屏，硬件等），有一定时间间隔的一连串的事件对象的派发的整个过程，简单来比喻就是几个球，每隔1秒就发出一个球，这样一个数据流。</p>

<p>说了这么多，其实真实要做起来还是比较简单的，虽然是一个数据流，但是每 一个流都有开始和结束的标志，处理起来并不难。比如KeyEvent，开始是onKeyDown，然后是onKeyUp，在这两个里面处理，就完成了对KeyEvent流的处理。</p>

<p>而MotionEvent则稍复杂一些，一个MotionEvent流，系统会不断的回调onTouchEvent，直到结束，通过<a href="https://developer.android.com/reference/android/view/MotionEvent?hl=en#getAction(">MotionEvent#getAction()</a>)来判断，从<a href="https://developer.android.com/reference/android/view/MotionEvent?hl=en#ACTION_DOWN">ACTION_DOWN</a>到ACTION_MOVE到ACTION_UP或者ACTION_CANCEL结束。</p>

<p><strong>注意</strong>：因为KeyEvent的处理相对较简单，所以剩下的部分将重点讨论MotionEevnt。</p>

<h2>Touch Event的派发流程</h2>

<p>事件产生以后，会传递给Activity#dispatchTouchEvent，如果没有被拦截，那么就会传给Window，而Window则会传给ViewRootImpl来处理，view tree处理完后，会再交给Activity#onTouchEvent：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">dispatchTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">ev</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">ev</span><span class="o">.</span><span class="na">getAction</span><span class="o">()</span> <span class="o">==</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">onUserInteraction</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">getWindow</span><span class="o">().</span><span class="na">superDispatchTouchEvent</span><span class="o">(</span><span class="n">ev</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">onTouchEvent</span><span class="o">(</span><span class="n">ev</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个方法可以清楚地看到，先锋和断后和view tree在事件派发流动中的顺序。</p>

<p>下面重点看看在Window中（view tree）里面事件的派发流动过程。其实重点看<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/View.java;bpv=0;bpt=1">View#dispatchTouchEvent</a>和<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/ViewGroup.java;bpv=0;bpt=1">ViewGroup#dispatchTouchEvent</a>就可以了，需要注意的是，事件的派发流程与处理流程是不一样的，派发在先，处理在后，所以如果看事件的派发需要看dispatch打头的方法，而处理则是看on打头的。</p>

<p>View的dispatch较为简单一些，因为它提供的是一个默认的实现，并且View是作为view tree中的一个叶子的，因此它的dispatch实际上就是一个终点，所以它做的事情就是，看是否有OnTouchListener，有就调用其onTouch，然后再调用onTouchEvent把事件处理一下，就完了。从这里也可以看出来OnTouchListener是走在onTouchEvent方法的前面的。</p>

<p>至于ViewGroup则相对复杂，因为它要管理子View，向子View派发事件，并且还要处理拦截。它的逻辑大概是：先看自己是否要拦截<a href="https://developer.android.com/reference/android/view/ViewGroup?hl=en#onInterceptTouchEvent(android.view.MotionEvent">onInterceptTouchEvent</a>)返回true表示要拦截，false不会拦截，如果要拦截，则调用自己的onTouchEvent处理掉事件，然后终止派发(真实的逻辑要略微复杂一些，不同的ACTION处理逻辑不一样)。</p>

<p>重点讲一下ViewGroup是如何向子View派发事件的，当不拦截的时候，这是比较常规的时候，会把事件向子View派发，来捋一捋这一流程：首先，会通过buildTouchDispatchChildList这个方法来选择子View的顺序，这个方法是把子View按事件派发的流程来排序，这个顺序是就是用户看到的顺序，会以Z轴（屏幕从里到外）来排序，以及渲染（draw）的顺序，毕竟从用户角度看最先点击到的，肯定 是Z轴最大（离用户最近），最先draw完的（没有被遮挡）。然后按这个顺序，按个子View调用其上面的dispatchTouchEvent，就把事件向子View传递了过去，当然 这个也是事件在流动，一旦事件被消耗，就会停止派发。</p>

<p>从这个过程来看view tree事件派发是个深度优先的过程，所以view tree的深度不单单影响渲染的性能，连事件处理也比扁平的要慢一些。</p>

<h2>Touch Event事件处理方法</h2>

<p>事件的处理也即是各种on开头的方法如onTouchEvent，或者各种listener（OnClickListener，OnTouchListener）。一般常规来说设置各种listener就够了，但如果想要自定义一些就直接override onTouchEvent方法，这里就不细说了，各种教程太多了。</p>

<h3>listener与直接Override父类方法的区别</h3>

<p>需要注意的是如果要override，那么肯定 要自定义View才可以，所以这个是更『黑客式』的方法，只有有必要自定义View，且常规各种listener不能满足需求才有必要如此做，如实现各种自定义的手势等。</p>

<p>listener最大的好处是，很简单方便，隔离性好，事件的触发与结果是隔离的，想针对 事件做处理，实现一个接口就好了，至于事件条件的触发则不用关心，任何对象都可以实现接口以处理事件，而不必非去子类化（继承）View对象。</p>

<p>还需要注意的是OnTouchListener发生的时间要早于onTouchEvent，而常规的手势回调接口（如OnClickListener和onLongClickListner）是在onTouchEvent中触发的。因此，OnTouchListener其实也是一个更为低级的『黑客式』的接口，一般当需要自定义识别手势时才需要实现此接口。</p>

<h3>防止点击穿透</h3>

<p>有些时候会有一些点击穿透的问题出现，比如写了一个布局，里面有几个Button和TextView，但是当点击这些主要内容之外的空白区域时，此页面下一层的Button却收到事件，比如触发了其onClick事件。当使用层叠 式的Fragment时，此问题较常见。其实从View#onTouchEvent中就可以看到解决方案，如此某个View是clickable的，那么它会把事件消耗掉，而如果clickable为false就会继续传递。</p>

<p>出现穿透的原因就是空白区域，只有这个层页面的一个根布局，通常会是一个ViewGroup，而大部分的ViewGroup默认clickable都是false，因而事件会继续向view tree里面传递，直到其被消耗。</p>

<p>此类问题最简单的解决就是把View设置为clickable=&ldquo;true&#8221;，这个在布局文件中就可以设置。</p>

<h3>基础手势识别</h3>

<p>基础的手势识别，是说对于触控式操作的一些简单的操作的分类，比如轻触屏幕马上拿开，这视为点击（click或者叫press，或者叫tap），长按屏幕视为long click或者叫long press，还有滑动，双击等等。手势识别，即是一套逻辑算法，用以判断用户当前是哪一种操作，然后触发相当的处理逻辑，给与用户操作上的反馈。废话就这么多，接下来来看具体如何做吧。</p>

<p>在Android的GUI系统中基础的手势有点击(click)和长按(long click)。要识别这些基础手势有两种方法，一是设置接口回调给View，也即实现一个<a href="https://developer.android.com/reference/android/view/View.OnClickListener">OnClickListener</a>，然后把此对象设置给<a href="https://developer.android.com/reference/android/view/View#setOnClickListener(android.view.View.OnClickListener">View#setOnClickListener</a>)（长按就是<a href="https://developer.android.com/reference/android/view/View.OnLongClickListener">OnLongClickListener</a>和<a href="https://developer.android.com/reference/android/view/View#setOnLongClickListener(android.view.View.OnLongClickListener">View#setOnLongClickListener</a>)）；另外一种方法，就是针对view tree内部，比如子类化（继承）某个View对象，然后override相应的方法。</p>

<p><strong>注意</strong>: 在写布局xml文件中也可以方便的用onclick属于来指定   手势回调方法，但它的本质与设置一个OnClickListener是一样的。</p>

<p>假如，点击和长按不能满足操作需求时，就需要稍复复杂的基础手势识别对象来帮助，也即是<a href="https://developer.android.com/reference/android/view/GestureDetector?hl=en">GestureDetector</a>，它与View的连接方式是接口分离，其实不见得可以用于View，只要有MotionEvent事件 来源即可。使用的方法并不复杂，只需要设置一个<a href="https://developer.android.com/reference/android/view/View.OnTouchListener">OnTouchListener</a>或者子类化View并override onTouch方法，从中拿到MotionEvent对象，然后把MotionEvent塞给一个GestureDetecotor对象，就完了，GestureDetector会回调你感兴趣的对应手势处理回调方法，通过<a href="https://developer.android.com/reference/android/view/GestureDetector.OnGestureListener?hl=en">OnGestureListener</a>对象。因为OnGestureListener是一个接口，但如果你仅对某几个手势回调方法感兴趣，不想把所有方法都 写一遍（哪怕是空实现），那么可以子类化<a href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener?hl=en">SimpleOnGestureListener</a>，这是一个类，它实现了OnGestureListener的所有方法，我们仅需要override感兴趣的方法即可。</p>

<p>有一个需要特别注意的事情就是，当你用GestureDetector时，它与常规的onClick或者onLongClick的先后顺序，或者 叫冲突处理。基于一致性的原则，如果使用了GestureDetector时，意味着你想要自己控制事件处理，那么就不应该再 设置onClick或者 onLongClick了。但如果真不小心这么做了，结果又会怎么样呢？这就需要从View的事件处理流程找答案。OnTouchListener的调用是在View#dispatchTouchEvent，这个是在View#onTouchEvent之前，而OnClickListener和OnLongClickListener是在View#onTouchEvent中调用的。所以，顺序是这样的：</p>

<ol>
<li>如果你用OnTouchListener获取的MotionEvent，那么你的OnGestureListener的回调方法是最先被调用到的，在所有的其他回调之前。</li>
<li>如果是override View#onTouchEvent方法获取的event，那么取决于你调用super#onTouchEvent的顺序，如果你是在调用super之前，那么还是你的gesture listener先执行。其实吧，正常人override的写法肯定都先写自己的逻辑最后再调用super，或者干脆不调用super，这是最正统子类override父类的姿式。</li>
</ol>


<p>由此，可以得出的结论就是如果使用了GestureDetector，那么你的gesture listener肯定是优先被执行的。</p>

<h3>onClick与onLongClick的触发时机</h3>

<p>再 来看另外 一个比较 有意思的两个问题，onClick的触发时机是啥时候？从View#onTouchEvent方法中可看出来，是在ACTION_UP时触发的，如果它还没有触发long click，而long click则是在事件开始以后ACTION_DOWN以后开始计时，到达一定时间间隔后便触发，不算后续的事件类型。</p>

<p>整体的流程是这样，在View#onTouchEvent里面，分事件类型来处理，ACTION_DOWN中开始计时，后面ACTION_MOVE中继续计时，如果达到长按标准，则触发long click，在正常结束的ACTION_UP中，看有没有达到长按标准，有就触发long click，没有则触发on click。</p>

<h3>系统阈值定义</h3>

<p>像长按的时长，滑动的最小距离，拉伸的最小距离等 等 这些关键的阈值都 是有系统建议的定义的，这些值都 在<a href="https://developer.android.com/reference/android/view/ViewConfiguration">ViewConfiguration</a>里面，通常建议直接使用系统定义的要好一些，除非真有特殊需要。</p>

<p>可以查看<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/GestureDetector.java?q=gesturedetector">GestureDetector</a>中对这些常量的使用。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://betterprogramming.pub/mastering-the-android-touch-system-41234cf3c3b3">Mastering the Android Touch System</a></li>
<li><a href="https://stackoverflow.com/questions/7449799/how-are-android-touch-events-delivered">How are Android touch events delivered?</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android View的渲染过程]]></title>
    <link href="http://toughcoder.net/blog/2020/07/26/android-view-render-flow/"/>
    <updated>2020-07-26T22:53:03+08:00</updated>
    <id>http://toughcoder.net/blog/2020/07/26/android-view-render-flow</id>
    <content type="html"><![CDATA[<p>对于安卓开发猿来说，每天都会跟布局打交道，那么从我们写的一个布局文件，到运行后可视化的视图页面，这么长的时间内到底 发生了啥呢？今天我们就一起来探询这一旅程。</p>

<p><img src="https://miro.medium.com/max/1400/1*6jNYifMX0MvMHxg2cxrzkg.png" alt="" /></p>

<!-- more -->


<h2>View tree的创建过程</h2>

<h3>布局文件的生成过程</h3>

<p>一般情况下，一个布局写好了，如果不是特别复杂的布局，那么当把布局文件塞给Activity#setContentView或者一个Dialog或者一个Fragment，之后这个View tree就创建好了。那么setContentView，其实是通过<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/LayoutInflater.java;bpv=0;bpt=0">LayoutInflater</a>这个对象来具体的把一个布局文件转化为一个内存中的View tree的。这个对象不算太复杂，主要的逻辑就是解析XML文件，把每个TAG，用反射的方式来生成一个View对象，当XML文件解析完成后，一颗View tree就生成完了。</p>

<p>但是需要注意，inflate之后虽然View tree是创建好了，但是这仅仅是以单纯对象数据的形式存在，这时去获取View的一些GUI的相关属性，如大小，位置和渲染状态，是不存在的，或者是不对的。</p>

<h3>手动创建</h3>

<p>除了用布局文件来生成布局，当然也可以直接用代码来撸，这个就比较直观了，view tree就是你创建的，然后再把根节点塞给某个窗口，如Activity或者Dialog，那么view tree就创建完事了。</p>

<h2>渲染前的准备工作</h2>

<p>View tree生成的最后一步就是把根结点送到ViewRootImpl#setView里面，这里会把view添加到wms之中，并着手开始渲染，接下来就主要看ViewRootImpl这个类了，主要入口方法就是<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/ViewRootImpl.java;l=1604;drc=master;bpv=1;bpt=1?q=viewrootimpl">ViewRootImpl#requestLayout</a>，然后是scheduleTraversals()，这里会把请求放入到队列之中，最终执行渲染的是doTraversal，它里面调用的是performTraversals()，所以，我们需要重点查看<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/ViewRootImpl.java;l=2332;drc=master;bpv=1;bpt=1?q=viewrootimpl">ViewRootImpl#performTraversals</a>这个方法，view tree渲染的流程全在这里面。这个方法相当之长，接近1000行，主要就是三个方法performMeasure，performLayout和performDraw，就是常说的三大步：measure，layout和draw。</p>

<h2>渲染之measure</h2>

<p>就看<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/ViewRootImpl.java;drc=master;l=3391?q=viewrootimpl">performMeasure</a>方法，这个方法很简单，就是调用了根view的measure方法，然后传入widthSpec和heightSpec。measure的目的就是测量view tree的大小，就是说view tree在用户可视化角度所占屏幕大小。要想理解透彻measure，需要理解三个事情，MeasureSpec，View#measure方法和View#onMeasure方法：</p>

<h3>理解MeasureSpec</h3>

<p>从<a href="https://developer.android.com/reference/android/view/View.MeasureSpec">文档</a>中可以了解到，MeasureSpec是从父布局传给子布局，用以代表父布局对子布局在宽度和高度上的约束，它有两部分一个是mode，一个是对应的size，打包成一个integer。</p>

<ul>
<li><p>UNSPECIFIED</p>

<p> 父布局对子布局没有要求，子布局可以设置任意大小，这个 基本上 不常见。</p></li>
<li><p>EXACTLY</p>

<p> 父布局已经计算好了一个精确的大小，子布局要严格按照 这个来。</p></li>
<li><p>AT_MOST</p>

<p> 子布局最大可以达到传过来的这个尺寸。</p></li>
</ul>


<p>光看这几个mode，还是不太好理解。因为我们平日里写布局，在大小（或者说宽和高）这块就三种写法：一个是<a href="https://developer.android.com/reference/android/view/ViewGroup.LayoutParams#MATCH_PARENT">MATCH_PARENT</a>，也就是要跟父布局一样大；要么是<a href="https://developer.android.com/reference/android/view/ViewGroup.LayoutParams#WRAP_CONTENT">WRAP_CONTENT</a>，也就是说子布局想要刚好合适够显示自己就行了；再者就是写死的如100dp等。需要把measure时的mode与LayoutParams结合联系起来，才能更好的理解measure的过程。</p>

<p>还是得从performMeasure这时入手，这个MeasureSpec是由父节点传给子节点，追根溯源，最原始的肯定是传给整个view tree根节点的，也就是调用performMeasure时传入的参数值。</p>

<h4>根节点的MeasureSpec</h4>

<p>根节点的MeasureSpec是由<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/ViewRootImpl.java;l=3624;drc=master;bpv=1;bpt=1?q=viewrootimpl">getRootMeasureSpec</a>得来的，这个方法传入的是窗口的大小，这是由窗口来给出的，当前的窗口肯定 是知道自己的大小的，以及根节点布局中写的大小。从这个方法就能看出前面说的布局中的三种写法对MeasureSpec的影响了：</p>

<ul>
<li>如果 根节点布局是MATCH_PARENT的，那么 mode就是EXACTLY，大小就是父布局的尺寸，因为根节点的父亲就是窗口，所以就是窗口的大小</li>
<li>如果 根节点布局是WRAP_CONTENT的，那么 mode是AT_MOST，大小依然会是父布局的尺寸。这个要这样理解，WRAP_CONTENT是想让子布局自己决定自己多大，但是，你的极限 就是父布局的大小了。</li>
<li>其他，其实就是根节点写死了大小的（写布局时是必须 要指定layout_width和layout_height的，即使某些view可以省略一个，也是因为缺省值，而并非不用指定），那么mode会是EXACTLY，大小用根节点指定的值。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">getRootMeasureSpec</span><span class="o">(</span><span class="kt">int</span> <span class="n">windowSize</span><span class="o">,</span> <span class="kt">int</span> <span class="n">rootDimension</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">measureSpec</span><span class="o">;</span>
</span><span class='line'>    <span class="k">switch</span> <span class="o">(</span><span class="n">rootDimension</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">case</span> <span class="n">ViewGroup</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">.</span><span class="na">MATCH_PARENT</span><span class="o">:</span>
</span><span class='line'>        <span class="c1">// Window can&#39;t resize. Force root view to be windowSize.</span>
</span><span class='line'>        <span class="n">measureSpec</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">makeMeasureSpec</span><span class="o">(</span><span class="n">windowSize</span><span class="o">,</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">EXACTLY</span><span class="o">);</span>
</span><span class='line'>        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">ViewGroup</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">.</span><span class="na">WRAP_CONTENT</span><span class="o">:</span>
</span><span class='line'>        <span class="c1">// Window can resize. Set max size for root view.</span>
</span><span class='line'>        <span class="n">measureSpec</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">makeMeasureSpec</span><span class="o">(</span><span class="n">windowSize</span><span class="o">,</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">AT_MOST</span><span class="o">);</span>
</span><span class='line'>        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>    <span class="k">default</span><span class="o">:</span>
</span><span class='line'>        <span class="c1">// Window wants to be an exact size. Force root view to be that size.</span>
</span><span class='line'>        <span class="n">measureSpec</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">makeMeasureSpec</span><span class="o">(</span><span class="n">rootDimension</span><span class="o">,</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">EXACTLY</span><span class="o">);</span>
</span><span class='line'>        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">measureSpec</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>子View的MeasureSpec</h4>

<p>MeasureSpec这个东西是自上而下的，从根节点向子View传递。前面看过了根节点的spec生成方式，还有必要再看一下子View在measure过程中是如何生成spec的，以更好的理解整体过程。主要看<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/ViewGroup.java;l=6979;bpv=0;bpt=1">ViewGroup#getChildMeasureSpec</a>方法就可以了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">getChildMeasureSpec</span><span class="o">(</span><span class="kt">int</span> <span class="n">spec</span><span class="o">,</span> <span class="kt">int</span> <span class="n">padding</span><span class="o">,</span> <span class="kt">int</span> <span class="n">childDimension</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">specMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">getMode</span><span class="o">(</span><span class="n">spec</span><span class="o">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">specSize</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">getSize</span><span class="o">(</span><span class="n">spec</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">specSize</span> <span class="o">-</span> <span class="n">padding</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">resultSize</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">resultMode</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">switch</span> <span class="o">(</span><span class="n">specMode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Parent has imposed an exact size on us</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">EXACTLY</span><span class="o">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">childDimension</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">resultSize</span> <span class="o">=</span> <span class="n">childDimension</span><span class="o">;</span>
</span><span class='line'>            <span class="n">resultMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">EXACTLY</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">childDimension</span> <span class="o">==</span> <span class="n">LayoutParams</span><span class="o">.</span><span class="na">MATCH_PARENT</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Child wants to be our size. So be it.</span>
</span><span class='line'>            <span class="n">resultSize</span> <span class="o">=</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>            <span class="n">resultMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">EXACTLY</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">childDimension</span> <span class="o">==</span> <span class="n">LayoutParams</span><span class="o">.</span><span class="na">WRAP_CONTENT</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Child wants to determine its own size. It can&#39;t be</span>
</span><span class='line'>            <span class="c1">// bigger than us.</span>
</span><span class='line'>            <span class="n">resultSize</span> <span class="o">=</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>            <span class="n">resultMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">AT_MOST</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Parent has imposed a maximum size on us</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">AT_MOST</span><span class="o">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">childDimension</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Child wants a specific size... so be it</span>
</span><span class='line'>            <span class="n">resultSize</span> <span class="o">=</span> <span class="n">childDimension</span><span class="o">;</span>
</span><span class='line'>            <span class="n">resultMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">EXACTLY</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">childDimension</span> <span class="o">==</span> <span class="n">LayoutParams</span><span class="o">.</span><span class="na">MATCH_PARENT</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Child wants to be our size, but our size is not fixed.</span>
</span><span class='line'>            <span class="c1">// Constrain child to not be bigger than us.</span>
</span><span class='line'>            <span class="n">resultSize</span> <span class="o">=</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>            <span class="n">resultMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">AT_MOST</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">childDimension</span> <span class="o">==</span> <span class="n">LayoutParams</span><span class="o">.</span><span class="na">WRAP_CONTENT</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Child wants to determine its own size. It can&#39;t be</span>
</span><span class='line'>            <span class="c1">// bigger than us.</span>
</span><span class='line'>            <span class="n">resultSize</span> <span class="o">=</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>            <span class="n">resultMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">AT_MOST</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Parent asked to see how big we want to be</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">UNSPECIFIED</span><span class="o">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">childDimension</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Child wants a specific size... let them have it</span>
</span><span class='line'>            <span class="n">resultSize</span> <span class="o">=</span> <span class="n">childDimension</span><span class="o">;</span>
</span><span class='line'>            <span class="n">resultMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">EXACTLY</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">childDimension</span> <span class="o">==</span> <span class="n">LayoutParams</span><span class="o">.</span><span class="na">MATCH_PARENT</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Child wants to be our size... find out how big it should</span>
</span><span class='line'>            <span class="c1">// be</span>
</span><span class='line'>            <span class="n">resultSize</span> <span class="o">=</span> <span class="n">View</span><span class="o">.</span><span class="na">sUseZeroUnspecifiedMeasureSpec</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>            <span class="n">resultMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">UNSPECIFIED</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">childDimension</span> <span class="o">==</span> <span class="n">LayoutParams</span><span class="o">.</span><span class="na">WRAP_CONTENT</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Child wants to determine its own size.... find out how</span>
</span><span class='line'>            <span class="c1">// big it should be</span>
</span><span class='line'>            <span class="n">resultSize</span> <span class="o">=</span> <span class="n">View</span><span class="o">.</span><span class="na">sUseZeroUnspecifiedMeasureSpec</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>            <span class="n">resultMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">UNSPECIFIED</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">//noinspection ResourceType</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">makeMeasureSpec</span><span class="o">(</span><span class="n">resultSize</span><span class="o">,</span> <span class="n">resultMode</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>单纯从spec角度来理解，与上面的是一样的，基本上WRAP_CONTENT会是AT_MOST，而其他都是EXACTLY。</p>

<p>后面会再详细讨论一下，父布局与子View的相互影响。</p>

<h3>View#measure和View#onMeasure</h3>

<p>performMeasure比较简单，只是调用根节点的measure方法，然后把计算出来的根节点的MeasureSpec传进去，就完事了，所以 重点要<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/View.java;l=25428;drc=master;bpv=0;bpt=1">View#measure</a>方法。这里需要注意的是整个View的设计体系里面一些主要的逻辑流程是不允许子类override的，可定制的部分作被动式的方法嵌入在主要逻辑流程中，如measure是不能被override的，它会调用可以被子类override的<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/View.java;l=25539;drc=master;bpv=1;bpt=1">onMeasure</a>。onMeasure是每个View必须实现的方法，用传入的父布局的约束来计算出自已的大小。</p>

<p>为了优化measure流程，还有一个cache机制，用从父布局传入的MeasureSpec作为key，从onMeasure得出的结果 作为value，保存在cache中，当后面再次调用measure时，如果MeasureSpec未发生变化，那么就直接从cache中取出结果，如果 有变化 那么再调用onMeasure去计算一次。光看View#measure和onMeasure这两个方法也没啥啊，或者说常见的view或者我们自己定义的view的onMeasure方法也没啥啊，都不算太复杂，有同学就会问，这里为啥这么费劲 非要搞出一个cache呢？这个也好理解，要明白任何一个view不光是你自己，还涉及到所有你的子view啊，如果你只是一个未端的view（叶子），那当然 无所谓了，但如果是一个ViewGroup，下面有很多个子view，那么 如果能少调用一次onMeasure，还是能节省不少CPU资源的。</p>

<h3>ViewGroup的onMeasure</h3>

<p>每个View的本身的onMeasure并不复杂，只需要关注好本身的尺寸就好了。</p>

<p>复杂的在于ViewGroup的onMeasure，简单来理解也并不复杂，它除了需要测量自己的宽与高之外，还需要逐个遍历子view以measure子view。如果ViewGroup自身是EACTLY的，那么onMeasure过程就会简单不少，因为它自身的宽与高是确定的，只需要挨个measure子View就可了，而且子View并不影响它本身。当然，要把padding和margin考虑进来。</p>

<p>最为复杂的就是AT_MOST，ViewGroup自身的宽与高是由其所有子View决定的，这才是最复杂的，也是各个ViewGroup子类布局器需要重点解决的，而且过程各不相同，因为每个布局器的特点不一样，所以过程并不相同，下面来各自讨论一下。</p>

<h3>几种常见的ViewGroup的measure逻辑</h3>

<p>下来来看一下一些非常常见的ViewGroup是如何measure的：</p>

<h4>LinearLayout</h4>

<p>它的方向只有两个，可以只分析一个方向，另外一个方向是差不多的，我们就看看measureVertical。</p>

<p>第1种情况，也就是height mode是EXACTLY的时候，这个时候LinearLayout布局本身的高度是已知的，挨个遍历子view然后measure一下就可以。</p>

<p>第2种情况，比较复杂的情况，是AT_MOST时，这其实也还好，理论上高度就是所有子view的高度之和。</p>

<p>对于LinearLayout，最为复杂的情况是处理weight，这需要很多复杂处理，要把剩余所有的空间按weight来分配，具体比较复杂，有兴趣的可以具体去看源码。这也说明了，为何在线性布局中使用weight会影响性能，代码中就可以看出当有weight要处理的时候，至少多遍历一遍子view以进行相关的计算。</p>

<p>虽然方向是VERTICAL时，重点只处理垂直方向，但是width也是需要计算的，但width的处理就要简单得多，如果其是EXACTLY的，那么就已知了；如果是AT_MOST的，就要找子view中width的最大值。</p>

<h4>FrameLayout</h4>

<p>FrameLayout其实是最简单的一个布局管理器，因为它对子view是没有约束的，无论水平方向还是垂直方向，对子view都是没有约束，所以它的measure过程最简单。</p>

<p>如果是EXACTLY的，它本身的高度与宽度是确定的，那么就遍历子view，measure一下就可以了，最后再把margin和padding加一下就完事了。</p>

<p>如果是AT_MOST的，那么也不难，遍历子View并measure，然后取子view中最大宽为它的宽度，取最大的高为其高度，再加上margin和padding，基本上就做完了。</p>

<p>因为，FrameLayout的measure过程最为简单，因此系统里很多地方默认用的就是FrameLayout，比如窗口里的root view。</p>

<h4>RelativeLayout</h4>

<p>这个是最为复杂的，从设计的目的来看，RelativeLayout要解决的问题也是提供了长与宽两个维度来约束子view。</p>

<p>总体过的过程就是要分别从vertical方向和horizontal方向，来进行两遍的measure，同时还要计算具体的坐标，实际上RelativeLayout的measure过程是把measure和layout一起做了。</p>

<h3>自定义View如何实现onMeasure</h3>

<p>如果是一个具体的View，那就相当简单了，默认的实现就可以了。</p>

<p>如果是ViewGroup会相对复杂一些，取决于如何从水平和垂直方向上约束子view，然后进行遍历，并把约束考虑进去。可以参考LinearLayout和RelativeLayout的onMeasure实现。</p>

<h2>渲染之layout</h2>

<p>measure是确定控件的尺寸，下一步就是layout，也就是对控件进行排列。</p>

<p>首先，需要理解现代GUI窗口的坐标系统，假设屏幕高为height，宽为width，那么屏幕左上角为坐标原点（0，0），右下角为（width, height），屏幕从上向下为Y轴方向，从左向右则是X轴方向。安卓当中，也是如此。每一个控件都是一个矩形区域，为了能知道如何渲染每一块矩形（每 一个控件）就需要知道它的坐标，在前一步measure中，能知道它的宽与高，如果再能确定它的起始坐标左上角，那么它在整个屏幕中的位置就可以确定了。</p>

<p>对于Android来说，view的渲染的第二步骤就是layout，其目的就是要确定好它的坐标，每一个View都有四个变量mLeft, mTop，mRight和mBottom，(mLeft, mTop)是它的左上角，(mRight, mBottom）是它的右下角，很明显width=mRight-mLeft，而height=mBottom-mTop。这些数值是相对于父布局来说的，每个View都是存在于view tree之中，知道相对于父布局的数值就足够在渲染时使用了，没必要用相对屏幕的绝对数值，而且用相对父布局的坐标数值再加上父布局的坐标，就可以得到在屏幕上的绝对数值，如果需要这样做的话。</p>

<p><img src="https://developervisits.files.wordpress.com/2017/11/androidscreencoordinates.jpg" alt="" /></p>

<p>layout过程依然是从根节点开始的，所以仍要从ViewRootImpl#performLayout作为起点来理顺layout的逻辑。performLayout的参数是一个LayoutParam，以及一个windowWidth和desiredWindowHeight，调用performLayout是在performTraversal当中，在做完performMeasure时，传入的参数其实就是窗口window的宽与高（因为毕竟是根节点嘛）。performLayout中会从根节点mView开开对整个view tree进行layout，其实就是调用mView.layout，传入的是0, 0和view的经过measure后宽与高。</p>

<p>单个View的layout方法实现较简单，把传入的参数保存到mLeft,mTop,mRight和mBottom变量，再调用onLayout就完事了，这个很好理解，因为子view是由父布局确定好的位置，只要在measure过程把自己需要的大小告诉父布局后，父布局会根据LayoutParam做安排，传给子view的就是计算过后的结果，每个子view记录一下结果就可以了，不需要做啥额外的事情。</p>

<p>ViewGroup稍复杂，因为它要处理其子view，并且要根据其设计的特点对子view进行约束排列。还是可以看看常见的三个ViewGroup是如何做layout的。</p>

<h4>LinearLayout</h4>

<p>依然是两个方向，因为LinearLayout的目的就是在某一个方向上对子view进行约束。看layoutVertical就可以了，水平方向上逻辑是一样的。</p>

<p>遍历一次子View即可，从父布局的left, top起始，考虑子view的height 以及上下的padding和margin，依次排列就可以了。需要注意的是，对于left的处理，理论上子view的left就应该等于父布局，因为这毕竟是vertical的，水平上是没有约束的，但是也要考虑Gravity，当然也要把padding和margin考虑进来。最后通过setChildFrame把排列好的坐标设置给子view。</p>

<p>总体来看，线性布局的layout过程比其measure过程要简单不少。</p>

<h4>FrameLayout</h4>

<p>FrameLayout对子view的排列其实是没有约束的，所以layout过程也不复杂，遍历子view，子view的left和top初始均为父布局，依据其Gravity来做一下排布即可，比如如果Gravity是right，那么子view就要从父布局的右侧开始计算，childRight=parentRight-margin-padding，childLeft=childRight-childWidth，以次类推，还是比较好理解的。</p>

<h4>RelativeLayout</h4>

<p>前面提到过RelativeLayout是在measure的时候就把坐标都计算好了，它的layout就是把坐标设置给子view，其余啥也没有。</p>

<h4>自定义View如何实现onLayout</h4>

<p>如果是自定义View的话，不需要做什么。</p>

<p>如果是自定义的ViewGroup的话，要看设计的目的，是如何排列子view的。</p>

<p>总之，layout过程相较measure过程还是比较好理解的，约束规则越复杂的view，其measure过程越复杂，但layout过程却不复杂。</p>

<h2>渲染之draw</h2>

<p>draw是整个渲染过程的核心也是最复杂的一步，前面的measure和layout只能算作准备，draw才会真正进行绘制。</p>

<h3>draw的整个逻辑流程</h3>

<p>与measure和layout的过程非常不一样，虽然在performTraversals中也会调用performDraw，也就是说看似draw流程的起点仍是ViewRootImpl#performDraw，但查看一下这个方法的实现就可以发现，这里面其实并没有调用到View#draw，就是说它其实也是做一些准备工作，整个View tree的draw触发，并不在这里。</p>

<p>从performDraw中并没有做直接与draw相关的事情，它会调用另外一个方法draw()来做此事情，在draw方法中，它会先计算需要渲染的区域（dirty区域），然后再针对 此区域做渲染，正常情况下会走硬件加速方式去渲染，这部分比较复杂，它直接与一个叫做ThreadedRenderer打交道，稍后再作分析。</p>

<p>由于各种原因，假如硬件加速未没有成功，那么会走到软件渲染，这部分逻辑相对清晰一些，可以先从这里看起，会直接调用到drawSoftware()，这个方法有助于我们看清楚渲染的流程。这个方法里面会创建一个Canvas对象，是由ViewRootImpl持有的一个Surface对象中创建出来的，并调用view tree根节点的mView.draw(canvas)，由此便把流程转移到了view tree上面。</p>

<h3>view tree的draw的过程</h3>

<p>ViewRootImpl是直接调用根节点的draw方法，那么这里便是整个view tree的入口。可先从View#draw(canvas）方法看起。主要分为四步：1）画背景drawBackground；2）画自己的内容通过onDraw来委派，具体的内容是在onDraw里面做的；3）画子view，通过dispatchDraw方法；4）画其他的东西，如scroll bar或者focus highlight等。可以重点关注一下这些操作的顺序，先画背景，然后画自己，然后画子view，最后画scroll bar和focus之类的东西。</p>

<p>重点来看看dispatchDraw方法，因为其他几个都相对非常好理解，这个方法主要要靠ViewGroup来实现，因为在View里面它是空的，节点自己只需要管自己就可以了，只有父节点才需要关注如何画子View。<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/ViewGroup.java;bpv=0;bpt=1">ViewGroup#dispatchDraw</a>这个方法做一些准备工作，如把padding考虑进来并进行clip，后会遍历子View，针对 每个子view调用drawChild方法，这实际上就 是调用回了View#draw(canvas，parent，drawingTime)方法，注意这个方法是package scope的，也就是说只能供view框架内部调用。这个方法并没有做具体的渲染工作（因为每个View的具体渲染都是在onDraw里面做的），这个方法里面做了大量与动画相关的各种变换。</p>

<h3>Canvas对象是从哪里来的</h3>

<p>View的渲染过程其实大都是GUI框架内部的逻辑流程控制，真正涉及graphics方面的具体的图形如何画出来，其实都是由Canvas对象来做的，比如如何画点，如何画线，如何画文字，如何画图片等等。一个Canvas对象从ViewRootImpl传给View tree，就在view tree中一层一层的传递，每个view都把其想要展示的内容渲染到Canvas对象中去。</p>

<p>那么，这个Canvas对象又是从何而来的呢？从view tree的一些方法中可以看到，都是从外面传进来的，view tree的各个方法（draw, dipsatchDraw和drawChild）都只接收Canvas对象，但并不创建它。</p>

<p>从上面的逻辑可以看到Canvas对象有二个来源：一是在ViewRootImpl中创建的，当走软件渲染时，会用Surface创建出一个Canvas对象，然后传给view tree。从ViewRootImpl的代码来看，它本身就会持有一个Surface对象，大概的逻辑就是每一个Window对象内，都会有一个用来渲染的Surface；</p>

<p>另外一个来源就是走硬件加速时，会由hwui创建出Canvas对象。</p>

<h3>draw过程的触发逻辑</h3>

<p>从上面的讨论中可以看出draw的触发逻辑有两条路：</p>

<p>一是，没有启用硬件加速时，走的软件draw流程，也是一条比较好理解的简单流程：performTraversal->performDraw->draw->drawSoftware->View#draw。</p>

<p>二是，启用了硬件加速时，走的是performTraversal->performDraw->draw->ThreadedRenderer#draw，到这里就走进了硬件加速相关的逻辑了。</p>

<h2>硬件加速</h2>

<p>硬件加速是从Android 4.0开始支持的，在此之前都是走的软件渲染，也就是从ViewRoot（4.0版本以前是叫ViewRoot，后来才是ViewRootImpl）中持有的Surface直接创建Canvas，然后传给view tree去做具体的渲染，与前面提到的drawSoftware过程类似。</p>

<p>硬件加速则要复杂得多，多了好多东西，它又搞出了一套渲染架构，但这套东西是直接与GPU联系，有点类似于OpenGL，把view tree的渲染转换成为一系列命令，直接传给GPU，软件渲染则是需要CPU把所有的运算都做了，最终生成graphic buffer送给屏幕（当然也是GPU）。</p>

<p>这一坨东西中最为核心就是RenderNode和RecordingCanvas。其中<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/graphics/java/android/graphics/RenderNode.java">RenderNode</a>是纯新的东西，它是为了构建 一个render tree（类似于view tree），用以构建复杂的渲染逻辑关系。<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/graphics/java/android/graphics/RecordingCanvas.java?q=recordingcanvas">RecordingCanvas</a>是Canvas的一个子类，它是专门用于硬件加速渲染的，但又为了兼容老的Canvas（软件渲染），为啥叫recording呢？因为硬件加速方式渲染，对于view tree的draw过程来说就是记录一系列的操作，这其实就是给GPU的指令，渲染的最后一步就是把整个render tree丢给GPU，就完了。</p>

<p>前面说的两个是数据结构，还不够，还有<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/graphics/java/android/graphics/HardwareRenderer.java">HardwareRenderer</a>和<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/ThreadedRenderer.java?q=threadedrenderer&amp;ss=android%2Fplatform%2Fsuperproject">ThreadedRenderer</a>，这两个用来建立和管理render tree的，也就是说它们内部管理着一组由RenderNode组成的render tree，并且做一些上下文环境的初始化与清理资源的工作。类似于OpenGL中GLSurfaceView的RenderThread做的事情。</p>

<p>硬件加速与原框架的切入点都是RenderNode和RecordingCanvas，View类中多了一个RenderNode成员，当draw的时候，从RenderNode中得到RecordingCanvas，其余操作都与原来一致，都是调用Canvas的方法进行graphics的绘制，这样整体渲染流程就走入到了硬件加速里面。</p>

<h2>Choreographer与vsync</h2>

<p>虽然在Android 4.0版本加入了硬件加速的支持，但这还是不够，因为它只是相当于具体的渲染时间可能快了一些，举例来说，可能是普通火车与高铁之间的差异，虽然确实行程所花时间变短了，但是对于整体的效率来说提升并不大。对于整体GUI的流畅度，响应度，特别是动画这一块的流程程度与其他平台（如水果）差距仍是巨大的。一个最重要的原因就在于，GUI整体的渲染流程是缺少协同的，仍是按需式渲染：应用层布局加载完了要渲染了，或者ViewRootImpl发现dirty了，需要重绘了，或者有用户事件了需要响应了，触发整体渲染流程，更新graphic buffer，屏幕刷新了。</p>

<p>这一过程其实也没有啥大问题，对于常规的UI显示，没有问题，我没有更新，没有变化 ，当然 不需要重绘了，如果有更新有变化时再按需重新渲染，这显然 没有什么问题。最大的问题在于动画，动画是要求连续不停的重绘，如果仅靠客户这一端（相较于graphic buffer和屏幕这一端来说）来触发，显然FPS（帧率）是不够的，由此造成流畅度肯定不够好。</p>

<p>于是在Android 4.1 （Jelly Bean）中就引入了<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/Choreographer.java?q=choreographer">Choreographer</a>以及vsync机制，来解决此问题，它们两个并不全完是一回事，Choreographer是纯软件的，vsync则是更为复杂的更底层的机制，有没有vsync，Choreographer都能很好的工作，只不过有了vsync会更好，就好比硬件加速之于View的渲染，没有硬件加速也可以渲染啊，有了硬件加速渲染会更加的快一些。</p>

<h4>Choreographer</h4>

<p>它的英文本意是歌舞的编舞者，有点类似于导演，但歌舞一般时间更短，所以对编舞者要求更高，需要在短时间内把精华全部展现出来。它的目的就是要协调整个View的渲染过程，对输入事件响应，动画和渲染进行时间上的把控。文档原文是说：Coordinates the timing of animations, input and drawing.，精华就在于timing这个词上。</p>

<p>但其实，这个类本身并不是很复杂，相较于其他frameworks层的东西来说它算简单的了，它就是负责定时回调，按照一定的FPS来给你回调，简单来说它就是做了这么一件事情。它公开的接口也特别少，就是postFrameCallback和removeFrameCallback，而<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/Choreographer.java;bpv=1;bpt=1?q=choreographer">FrameCallback</a>也是一个非常简单的接口doFrame(long frameTimeNanos)，里面的参数是当前帧开始渲染的时间序列。</p>

<p>所以，它的工作就是在计时，或者叫把控时间，到了每一帧该渲染的时候了，它会告诉你。有了它，那么GUI的渲染将不再是按需重绘了，而是有节奏的，可以以固定FPS定时刷新。ViewRootImpl那头也需要做调整，每当有主动重绘时（view tree有变化，用户有输入事件等），也并不是说立马就去做draw，而是往Choreographer里post一个FrameCallback，在里面做具体的draw。</p>

<h4>vsync（Vertical Synchronization）</h4>

<p>垂直同步，是另外一套更为底层的机制，简单来理解就是由屏幕显示系统直接向软件层派发定时的脉冲信号，用以提高整体的渲染流畅程度，屏幕刷新，graphic buffer和window GUI（view tree）三者在这个脉冲信号下，做到同步。</p>

<p><a href="https://source.android.com/devices/graphics/implement-vsync">vsync</a>是通过对Choreographer来发挥作用的。Choreographer有两套timing机制，一是靠它自己实现的一套，另外就是直接传导vsync的信号。通过<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/DisplayEventReceiver.java;bpv=1;bpt=1">DisplayEventReceiver</a>（这个类对于App层是完全不可见的被hide了）就可以接收到vsync的信号了，调用其sheduleVsync来告诉vsync说我想接收下一次同步的信号，然后在重载onVsync方法以接收信号，就能够与vsync系统连接起来了。</p>

<h2>渲染性能优化</h2>

<p>这是一个很大的话题</p>

<h4>保持简单</h4>

<p>最最重要的原则就是要保持简单，比如，UI页面尽可能的简洁，view tree的层级要尽可能的少，能用颜色就别用背景图片，能merge就merge。</p>

<p>动画也要尽可能的简单，并且使用标准的ValueAnimator接口，而不要简单粗暴的去修改LayoutParams（如height和width）。</p>

<h4>减少重绘</h4>

<p>这个要多用系统中开发者模式里面的重绘调试工具来做优化，尽可能的减少重绘。</p>

<h4>专项定制</h4>

<p>有些时候，对于一些特殊需求的view要进行定制优化。举个例子，比如一个巨复杂的页面（如某宝的首页），中有一个用于显示倒计时的view，实现起来并不复杂，一个TextView就搞定了，一个Timer来倒计时，不断的刷新数字 就可以了。但是，这通常会导致整个页面都跟着在重绘。因为数字在变化，会导致TextView的大小在变化，进而导致整个View tree都在不断的跟着重绘。</p>

<p>像这种case，如果遇到了，就需要自定义一个专门用于此的View，并针对数字不断刷新做专门的优化，以不让其影响整个view tree。</p>

<p>不要在意这个例子的真实性，要知道，当某个View演变成了整个页面的瓶颈的时候，就需要专门针对 其进行特殊定制以优化整体页面的渲染性能。</p>

<p>更多的技巧可以参考<a href="http://toughcoder.net/blog/2015/09/11/android-performance-profiling-made-easy/">这篇文章</a>和后面的参考资料。</p>

<h2>参考资料</h2>

<p>列举一下关于此话题的比较好的其他资源</p>

<ul>
<li><a href="https://blog.csdn.net/guolin_blog/article/details/16330267">Android视图绘制流程完全解析，带你一步步深入了解View</a></li>
<li><a href="https://www.jianshu.com/p/9ac245657127">Android性能优化第（四）篇&mdash;Android渲染机制
</a></li>
<li><a href="https://www.jianshu.com/p/1ef2a9e5aa91">深入Android渲染机制</a></li>
<li><a href="https://blog.csdn.net/CrazyMo_/article/details/80038948">Android进阶——性能优化之布局渲染原理和底层机制机详解及卡顿根源探究（四）</a></li>
<li><a href="https://blog.csdn.net/say_from_wen/article/details/79093883">View渲染机制</a></li>
<li><a href="https://blog.csdn.net/hfy8971613/article/details/108041504">Android屏幕刷新机制</a></li>
<li><a href="https://www.androidperformance.com/2019/10/22/Android-Choreographer">Android 基于 Choreographer 的渲染机制详解</a></li>
<li><a href="https://hningoba.github.io/2019/11/28/Android%20Choreographer%E5%8E%9F%E7%90%86/">Android图形渲染之Choreographer原理</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[理解安卓的视图体系结构]]></title>
    <link href="http://toughcoder.net/blog/2020/03/16/understanding-the-view-system-of-android/"/>
    <updated>2020-03-16T22:17:17+08:00</updated>
    <id>http://toughcoder.net/blog/2020/03/16/understanding-the-view-system-of-android</id>
    <content type="html"><![CDATA[<p>当我们想要写一个页面的时候，通过一个Activity，然后调用其setContentView方法，把一个布局文件当作一个参数传递过去，然后一个页面就好了，但是除此之外，我们还需要与一些组件打交道，比如像Window，WindowManager，那么这些东西到底 与我们的页面布局有什么关系，今天就来学习一下，以便对整体窗口有个更清楚的认知。</p>

<p><a href="http://toughcoder.net/blog/2020/03/16/understanding-the-view-system-of-android/"><img src="https://image.slidesharecdn.com/androiduisystem-151208024825-lva1-app6892/95/android-ui-system-5-638.jpg?cb=1449545828"></a></p>

<!-- more -->


<h2>布局是一颗View tree</h2>

<p>先从一个最简单的例子出发，平时我们写一个页面，都从一个布局文件出发。这其实是在构建一个View tree，为啥一定是tree呢，因为我们的布局文件，无论有多么的复杂，都是从一个根（通常是一个ViewGroup对象）开始的，父布局里面再写子布局，比如这样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;LinearLayout</span> <span class="na">id=</span><span class="s">&quot;app_root&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;TextView</span> <span class="na">id=</span><span class="s">&quot;label&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Button</span> <span class="na">id=</span><span class="s">&quot;submit&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/LinearLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这会形成一个树状结构：</p>

<p>| app_root<br/>
&nbsp;&nbsp;  |- label<br/>
&nbsp;&nbsp;  |- submit<br/>
作为一个开发者，写布局是我们再熟悉不过的了，主要就是用所熟悉的各种Layout和View一起来构建想要的页面。</p>

<p>所写的布局，最终会生成一颗View tree，是一个树状的数据结构，每一个节点都是一个View对象（ViewGroup和View）。因此，布局优化的一个是感觉重要的点就是要先减少View tree的深度（也即平时所说的减少布局的嵌套），再想办法减少广度（减少个数）。</p>

<p>那么，我们写的布局的父布局又是哪里呢？这就又涉及两个东西，一个叫做decorView和contentView的东西。</p>

<h3>DecorView与ContentView</h3>

<p>我们平常所见的屏幕窗口的根布局是一个叫做DecorView的东西，它是我们通常意义上整个屏幕的根节点，它包含了上面的Status bar和下方的Navigation bar，以及属于应用程序的中间部分。它的源码路径是<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/com/android/internal/policy/DecorView.java;drc=master;l=118">frameworks/base/core/java/com/android/internal/policy/DecorView.java</a>。它是一个真实的view，它是FrameLayout的子类。</p>

<p>它下面有一个id为android.R.id.content的FrameLayout，我们平时在Activity中调用setContent时所传过去的布局文件所生成的View tree都是添加在这个FrameLayout下面，所以，通常对于我们一个Activity来说，这个FrameLayout是直接意义上的根节点，我们所写的布局都是添加它下面的。</p>

<h3>ContentView所引申出来的奇技淫巧</h3>

<h4>布局优化技巧</h4>

<p>首先，一个是布局的优化技巧，可以减少View tree的层级：假如你写的布局中根节点也是一个FrameLayout，那么可以直接用merge节点，把子view全部都直接加挂到前面提到的系统创建的Activity的根布局上面。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;merge&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Text</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Button</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/merge&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这可以把View tree减少一个层级（深度减1）。</p>

<h4>页面内即插即用的弹窗</h4>

<p>每个Activity都被回挂在一个id是android.R.id.content的FrameLayout下面，利用这一点，可以做一些即插即用的弹窗，即插即用的意思是，不用写在布局里面，而且显示的时间是不固定的，可能很多时候都不显示，在某个特定的逻辑或者时间才显示。就好比某些电商特定节日的弹窗一样，这种东西，一年也显示不了几回，如果直接添加在布局里面（哪怕你用ViewStub），不够优雅，毕竟不是常规逻辑下会出现的页面，这时可以利用content来做一些即时弹窗：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">FrameLayout</span> <span class="n">container</span> <span class="o">=</span> <span class="n">activity</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">android</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">content</span><span class="o">);</span>
</span><span class='line'><span class="n">View</span> <span class="n">pop</span> <span class="o">=</span> <span class="o">&lt;</span><span class="n">create</span> <span class="n">or</span> <span class="n">inflate</span> <span class="n">your</span> <span class="n">own</span> <span class="n">view</span><span class="o">&gt;;</span>
</span><span class='line'><span class="n">container</span><span class="o">.</span><span class="na">addView</span><span class="o">(</span><span class="n">pop</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>只要你能获得到Activity的实例（这个并不难），那么就可以非常优雅的添加弹窗，逻辑代码和布局文件都会相当独立，甚至可以用插件形式来异步加载。再进一步，如果 添加一个WebView，那么就可以做得更加的前端化，实时化和定制化，好多电商的弹窗就是这么干的。</p>

<h2>Window与WindowManager</h2>

<p>作为应用开发者，我们看一个View tree其实就是一坨布局，这是站在一个非常小的角度去看的，但如果站在整体系统架构角度来看的话，就会发现应用程序所在的view tree仅是系统可视化窗口架构中的末端，View只是用来构建视图的基本砖块而已。对于整体View tree是如何渲染的，何时渲染，这就涉及到了整体系统架构层面的重量级组件了。</p>

<p>对于现化代的视图窗口架构(Modern GUI)，都有一个window server，作来管理视图窗口的核心组件，比如X11，Android当中也不例外。在Android里面，WindowManager就是专门用于管理视图窗口的，它是系统级别的server叫window manager server是一个系统级别的常驻进程，由init.rc启动。而Window则是一个基本的窗口的逻辑上的抽象。关于Window以及<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/services/core/java/com/android/server/wm/WindowManagerService.java;bpv=0;bpt=0">WindowManager</a>本身就是相当大的话题，都可以单独写本书，这时不做过多的探讨，对于我们应用开发者来说，了解一下基本的知识就够用了。</p>

<p>每一个Activity，都有一个Window对象，所有一切与GUI有关的事情，都委派给了Window对象，Actvity本身并不参与GUI的具体流程，比如像上面提到的DecorView，ContentView等View tree的构建与管理，View tree的渲染，以及像事件的处理，都是Window对象处理的。Window是WindowManager的基本对象，与其server之间通过IPC通信，Window是供应用程序端使用的，其实真正一切都掌握在window server手中。Activity和Dialog使用的对象都是PhoneWindow，它在<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/com/android/internal/policy/PhoneWindow.java;l=159;drc=master">frameworks/base/core/java/com/android/internal/policy/PhoneWindow.java</a>，Window对象会具体负责创建像DecorView之类的一些基础设施。最为关键的一个方法就是其PhoneWindow#installDecor()方法，这个方法里面会先调用generateDecor()创建mDecor，它就是前面讲到的DecorView对象，再通过generateLayout()创建mContentParent对象，它就是前面讲到的id是android.R.id.content的那个FrameLayout，Activity或者Dialog通过setContentView送过来的View tree就是加在它的下面的。</p>

<p>WindowManager是一个接口（Android系统的代码接口用的特别多，很多关键的架构层面的组件 都是接口，实际使用的都是其一个实现。)实际使用的是<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/WindowManagerImpl.java">WindowManagerImpl</a>对象，而它也没干啥，它把事情 又委派给另外一个叫做WindowManagerGlobal的对象，这个WindowManagerGlobal则是GUI端的最后一站，它负责与wms（WindowManagerServer）通信。它在<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/WindowManagerGlobal.java">frameworks/base/core/java/android/view/WindowManagerGlobal.java</a></p>

<p>需要注意WindowManagerGlobal是一个单例，也就是说每一个应用程序（严格来说是每一个进程只有一个实例，但安卓上面带有GUI的应用程序只能存活在一个进程，所以可以理解 为一个应用程序）只有一个实例，所以它管理着一个应用程序中的所有的View tree。从它的成员中便可看出，它有一坨ViewRootImpl对象（一个列表），而每一个ViewRoot对象管理着一颗View tree。</p>

<p>最为关键的一个方法就是WindowManagerGlobal#addView，每一个Window的持有者对象（如Activity或者Dialog）都是通过这个方法将其DecorView对象添加给WindowManager的。addView方法，会先创建一个ViewRootImpl对象，然后把要添加的view以及刚创建出来的<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/ViewRootImpl.java">ViewRootImpl</a>都放进它的列表中，最后再调用ViewRootImpl#setView(view)，这就把几大关键对象建立好了连接，接下来的事情就归ViewRootImpl了。这里还有一个相当关键的对象，那就是LayoutParams，WindowManagerGlobal也有一个列表里面存着每个Viewtree根节点（也就是Decor view）的LayoutParams。</p>

<p><img src="https://gss0.baidu.com/-4o3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/58ee3d6d55fbb2fb3f8cdfbe474a20a44723dcf3.jpg" alt="" /></p>

<h2>ViewRootImpl又是个啥</h2>

<p>Window是从手机系统角度来看待的窗口的概念，而View tree则是从应用程序角度构建GUI页面的概念，view tree是Window的一部分，Window对象持有mView，而这个mView就是上面提到的DecorView，也即是View tree的根节点。这里又要涉及另外一个对象ViewRootImpl，它并非是View tree的一部分，虽然名字上比较容易混淆，因为它并不是View的子类，所以它不是任何一个View tree的节点，它的职责是管理View tree，像渲染以及事件派发，都是Window直接通过ViewRootImpl来进行的。在代码中实际使用的是ViewRootImpl对象，它实现了ViewParent接口。</p>

<p>所以，ViewRootImpl对象是值得细细研究的，因为实际上是它在管理着GUI系统&ndash;view tree的管理，渲染的三大步(measure, layout和draw）以及事件的派发，最源头的逻辑都在这个对象里面，当然 它也是非常复杂的，源码大概有1万行左右。</p>

<h2>ViewParent又是个啥</h2>

<p>它是一个接口，行使的职责是管理子View，也就是说在View tree当中管理子View的行为的集合便是ViewParent接口。View tree的节点都是View的子类，所以，你看ViewRootImpl实现了ViewParent接口，它是负责管理Window里面的View tree的。另外一个就是ViewGroup，ViewGroup是View的子类，所以它是Viewtree的一部分，父节点都是ViewGroup，它核心就两样东西一个是子View的列表，另外就是ViewGroup也实现了ViewParent的接口，因为它也要管理它的子节点（也即子View）。</p>

<h2>Activity到底是个啥东西</h2>

<p>它是系统的四大核心组件之一，如果想构建GUI页面，则Activity是绕不开的。如果再详细一点，Activity是一个系统给你的融合了应用生命周期管理，组件级别复用（Intent相关）和窗口管理的组件，生命周期也即ActivityManager干的事情，它通过Activity的回调告诉你；而GUI则是通过Activity的Window对象帮你实现（Activity的布局和事件的处理都是委派给其持有的Window对象来处理）。</p>

<p>如果，把Activity的Window对象拿掉，那么它跟一个Service组件就基本上没有差别了。如果把Activity的Intent相关拿掉，那么它跟一个Dialog就没啥区别了。</p>

<h2>Fragment又是个啥</h2>

<p>坦白说，Fragment是Google挖的一个大坑，这玩意儿不符合Android的核心设计思想，因为Android出世的时候并没有它，是后来Google跟水果平台抄来的一个不伦不类的东西，结果全是坑。在它刚出来的一些年，Google极力的推荐使用Fragment，但是近一两年，又不推荐了。</p>

<p>Fragment本质上就是一个强加了生命周期函数回调的View，因为显示Fragmeng时，都是把它替换一个View或者添加到一个ViewGroup上面，所以它就是一个View，或者说一个View tree中的节点。但是强加了生命周期的回调。光是这两点，其实也没有啥，毕竟生命周期对于View是重要的，一般时候我们要在onResume与onPause之间才让View处于active状态。</p>

<p>Fragment最大的问题在于它的异步机制和状态恢复机制，也就是说用FragmentManager#commit了以后，具体啥时候Fragment会真正显示出来，我们是无法控制的，这是相当的坑；它的状态恢复机制就更加的坑，状态恢复这个东西如果全让程序员来负责也还好，就像Activity的设计一样，但是如果框架帮你做了一些事情，但又不完整，这就坑了，关于状态恢复的坑可以参考<a href="http://toughcoder.net/blog/2016/11/28/fear-android-fragment-state-loss-no-more/">这篇文章</a>来详细的了解。</p>

<h4>DialogFragment</h4>

<p>这个本质上是Dialog，但是被包了一层Fragment，所以它会有Fragment的特性，但是Window和View tree则是属于Dialog的。</p>

<p><strong>注意：</strong>FragmentTransaction#add(Fragment fragment, String tag)有一个方法是不需要提供父布局，这是为没有常规布局准备的，因为无法把布局添加到Activity的现有View tree之中。一般情况下，我们是不会使用这个方法的，目前看仅在DialogFramgment中使用这个方法，那是因为Dialog本身有Window和view tree。</p>

<h2>不在Activity view tree里面的窗口控件</h2>

<p>一般来讲，我们想要显示的页面都会放进布局里面，也就是说大部分时候我们的页面都由Activity的view tree来实现。但是有些特殊的场景，却不是在view tree里面，比如弹窗，像Dialog，PopupWindow以及Toast，这些东西一般是用于弹出式的页面，由特定的逻辑触发，它与常规页面最为显著的区别就是，它们与Activity的Window和View tree是独立开来的，它们并不是添加在当前Activity的view tree上面的。它们自己有独立的view tree，或者换句话说，它们是独立的Window。</p>

<p>我们这里重点探讨它们与Window和当前Activity之间的关系，至于它们的基本使用方法，可以参阅其他文章。</p>

<h3>Dialog</h3>

<p>这里不说基本使用方法。</p>

<p>通过查阅源码，可以发现Dialog与Activity的实现相当类似，它内部也有一个独立的Window，也是通过WindowManager#addView把其ContentView（我们提供的布局）加到屏幕上去的。因此，它与Activity也是相互独立的，是两个Window，两棵View tree。Dialog类里面还有getActionBar，OptionsMenu等相关的方法，但似乎在实际使用当中比较少用到。</p>

<p><a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/app/Dialog.java;l=207;bpv=0;bpt=1">Dialog</a>最为核心的两个方法一个是其构造方法，这其中会创建Window对象，另外一个就是#show，里面可以看到，它是通过WindowManager#addView()方法，来把它的mDecorView添加到窗口体系当中的，这与Activity其实是一样的。</p>

<h4>为啥显示Dialog一定需要Activity，一般Context却不可以</h4>

<p>使用过Dialog的人都知道，创建Dialog时一定要传递Activity为其参数，尽管构造方法里面声明的是Context。前面提到，Dialog有自己的Window和View tree，理论上它跟Activity是没有关系的。</p>

<p>如果，用一个非Activity作为Context传给Dialog，报错，是WindowManager抛出来的异常，说：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">android</span><span class="o">.</span><span class="na">view</span><span class="o">.</span><span class="na">WindowManager$BadTokenException</span><span class="o">:</span> <span class="n">Unable</span> <span class="n">to</span> <span class="n">add</span> <span class="n">window</span> <span class="o">--</span> <span class="n">token</span> <span class="kc">null</span> <span class="n">is</span> <span class="n">not</span> <span class="n">valid</span><span class="o">;</span> <span class="n">is</span> <span class="n">your</span> <span class="n">activity</span> <span class="n">running</span><span class="o">?</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">view</span><span class="o">.</span><span class="na">ViewRootImpl</span><span class="o">.</span><span class="na">setView</span><span class="o">(</span><span class="n">ViewRootImpl</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1093</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">view</span><span class="o">.</span><span class="na">WindowManagerGlobal</span><span class="o">.</span><span class="na">addView</span><span class="o">(</span><span class="n">WindowManagerGlobal</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">409</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">view</span><span class="o">.</span><span class="na">WindowManagerImpl</span><span class="o">.</span><span class="na">addView</span><span class="o">(</span><span class="n">WindowManagerImpl</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">110</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">android</span><span class="o">.</span><span class="na">app</span><span class="o">.</span><span class="na">Dialog</span><span class="o">.</span><span class="na">show</span><span class="o">(</span><span class="n">Dialog</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">342</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>而Dialog#setOwnerActivity(Activity)方法在创建Dialog之后再把相关Activity塞过去，也是不行的，必须传入的Context参数要是一个Activity实例才可以。</p>

<p>最初以为，可以从它的构造方法中看出为啥一定需要Activity，就是因为需要theme.但其实并不是，因为theme是可以通过resource id传进去的。</p>

<p>关键点仍在于ViewRootImpl对象，因为这个异常是ViewRootImpl在其setView方法中抛出的，前面讲过，向一个Window添加布局最终会走到WindowManagerGlobal#addView，而它又是通过ViewRootImpl#setView来做具体事情 的，这个方法里面，会先获取当前的WindowSession，然后再把当前的Viewtree转化为窗口对象，添加给wms。所以最核心的地方还得看WindowManagerService#addWindow()这个方法，这个方法也相当之复杂，但是还是能大概看懂它的意思。</p>

<p>通俗的来理解这是安卓系统本身加的限制，也就是说窗口本身也是有逻辑关系的，可以简单理解 为树状关系，一个Activity是主Window，而由此Activity衍生出来的属于此Window的子Window，因此在添加子Window的时候，必须 要知道它从属于哪个父Window，因此，你必须 传Activity实例给Dialog的构造方法，因为只有Activity才是有主Window的。但是这个具体的逻辑连接却比较奇怪，从上面的过程描述来看，WindowManager#addView到ViewRootImpl#setView，其实，都没有明确的把父Window，也就是Activity的Window传进来，那么WindowManagerService又是从哪里去找这个父Window呢？</p>

<p>WindowManagerService#addWindow方法，并没有传递父Window参数 进来，那就只能是它从传进来的参数获得的。这里一个很重要的东西就是token，它是一个IBinder对象，它是一个Window的标识，它存在Window的attris对象里面，这个就是WindowManager#LayoutParams对象，它的作用就是存储Window的特征参数，比如你要改变Window的一些特性（通俗来说就是定制一下Window），那么通过改变LayoutParams，就可以了。这个其实不难理解，我们对View不就是通过其LayoutParams来改变View的特征参数 么。都 是一样的。</p>

<p>Dialog对象在show()时会把其mDecor添加到WindowManagerService中去，其并未传父Window，只传了一个LayoutParams过去，其实玄机也就在LayoutParams之中，窗口的token，父token（标识着父窗口）以及像窗口的type都是在LayoutParams中。那么这个LayoutParams是哪里创建的呢？它是来自于Window对象的，而Dialog的mWindow成员实例是在构造时创建的，创建的是一个PhoneWindow对象，并且把构造Dialog传进来的Context对象传给了PhoneWindow的对象，LayoutParams对象则是通过mWindow.getAttributes()得来的。因此啊，可以断定，PhoneWindow在生成LayoutParams时，会从传给其构造的上下文对象mContext中获取一些信息，如窗口的类型或者父窗口信息，而只有Activity对象才有窗口信息，并且可以作为父窗口，而普通 的Context对象是没有窗口的，由此可以解答我们的疑惑了。</p>

<h4>也可以显示独立于任何Activity的Dialog</h4>

<p>窗口是有很类型的，WindowManagerService为了方便管理，所以针对Activity及其从属于子窗口（Dialog和PopWindow）做了类似tree结构的逻辑上的整理，所以普通 的Dialog必须要能找到其主窗口（或者叫父窗口）。</p>

<p>但其实，我们经常能见到一些非常牛逼的Dialog，可以显示 在任何Activity之上，如电源没了，或者音量调节，等等。这些是叫作system dialog，需要特殊权限 才能显示出来的。管理来理解，系统级别的组件 才有权限 显示system dialog。</p>

<p>其实，想一想也合理，作为一个应用程序，你在自己的生命周期内，显示内容给用户足够的信息就可以了。当用户离开了你的应用，你也没有必要再显示Dialog了。</p>

<p><strong>注</strong>：应用在后台时，想在前台显示信息有其他的方式，如Notification等，这属于另外的话题，不做过多讨论。</p>

<h4>可以弄个全屏的Dialog吗？</h4>

<p>一般来讲呢，Actiivty都是全屏的，Dialog一般是非全屏的，可以把一个Activity弄成非全屏的，长的像Dialog一样，当成Dialog来使用，就在设置Activity的Theme时，用Theme.Dialog就可以了。</p>

<p>那么，反过来搞可不可呢，就是可不可以把常规的Dialog弄成一个全屏的呢？</p>

<p>从Dialog的实现上来看，它有Window对象，甚至连Actionbar和OptionsMenu都有，所以从实现上来看，Dialog并不一定非要像我们平常所使用的那样是一个对话框，它能做的事情 不比Activity少。默认Dialog的style就是一个平常的对话框，但其实，设置不同的style，就可以得到全屏的dialog。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">private</span> <span class="kt">void</span> <span class="nf">showFullscreenDialog</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Theme_Material_NoActionBar_Fullscreen is real full screen, i.e. hide the status bar.</span>
</span><span class='line'>    <span class="n">Dialog</span> <span class="n">dialog</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Dialog</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">android</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">style</span><span class="o">.</span><span class="na">Theme_Material_NoActionBar</span><span class="o">);</span>
</span><span class='line'>    <span class="n">dialog</span><span class="o">.</span><span class="na">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">fullscreen_dialog</span><span class="o">);</span>
</span><span class='line'>    <span class="n">dialog</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">okay</span><span class="o">).</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="n">view</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">dialog</span><span class="o">.</span><span class="na">dismiss</span><span class="o">();</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'>    <span class="n">dialog</span><span class="o">.</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>注</strong>：这里有点歧义，全屏意思是指铺满整个父Activity，严格意义上的全屏是要把状态栏也要隐藏掉。</p>

<h3>PopupWindow</h3>

<p>PopupWindow是一个独立的类，并不是View的子类，因此，它跟常规的widget不一样，无法直接添加到现有的View tree之中，这也导致它的实现方式比较复杂。</p>

<p><a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/widget/PopupWindow.java;l=1497;drc=master;bpv=0;bpt=0">PopupWindow</a>它并没有创建Window对象，但是它有一个类似于Window对象的DecorView的东西，它的根节点是一个叫做PopupDectorView的东西，其实是一个FrameLayout，我们让PopupWindow显示的布局就是加在这个PopupDectorView下面。最重要的两个方法一个是preparePopup() 这个方法会创建根节点PopupDecorView，然后把我们需要显示的mContentView以及还有一个PopupBackgroundView（也是一个FrameLayout，包裹在要显示的ContentView外面），放在PopupDecorView的下面，所以真实的结构是根节点是PoupDecorView，包了PopupBackgroundView，再包上要显示的mContentView，一共三层。</p>

<p>另外，一个方法就是invokePopup，核心逻辑是调用WindowManager#addView，把mDecorView添加到窗口系统中以显示出来，后面的过程跟上面提到的Dialog的显示过程是一样的。那么PopupWindow又是如何找到Activity的主Window的呢？答案还是在LayoutParams中，方法preparePopup()的参数 是LayoutParams，如前面所述LayoutParams是最终会传递给WindowManagerService的，而这里面就包含了主窗口的信息。而这个LayoutParams对象是通过方法createPopupLayoutParams()得来的，而这个方法的参数 是一个IBinder对象，我们知道这个IBinder对象就标识着一个主窗口。那么PopupWindow的IBinder对象又从何而来呢？是通过View.getWindowToken()得来的，PopupWindow的显示 方法都要提供一个View如showAsDropDown，里面的参数是一个View，而这个View必须 是已显示的View tree中的一个节点，现在应该知道一个窗口有一颗View tree，那么此View tree中的节点肯定 知道自己属于哪个窗口啊，由此便找到了主窗口。</p>

<p>另注意，PopupMenu，也是基于PopupWindow的，只不过弄成了Menu的样子（其实就是一个ListView）。</p>

<h4>可以弄个全屏的PopupWindow吗？</h4>

<p>当然 可以，只需要在构造PopupWindow时传入MATCH_PARENT作为其宽和高就可以了，不过这样做以后后面再选择哪种show方式就不影响了，都是铺满Activity来显示。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">private</span> <span class="kt">void</span> <span class="nf">showFullscreenPopup</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">View</span> <span class="n">content</span> <span class="o">=</span> <span class="n">LayoutInflater</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="k">this</span><span class="o">).</span><span class="na">inflate</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">fullscreen_dialog</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>    <span class="n">PopupWindow</span> <span class="n">popup</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">PopupWindow</span><span class="o">(</span><span class="n">content</span><span class="o">,</span> <span class="n">ViewGroup</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">.</span><span class="na">MATCH_PARENT</span><span class="o">,</span> <span class="n">ViewGroup</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">.</span><span class="na">MATCH_PARENT</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">View</span> <span class="n">anchor</span> <span class="o">=</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">fullscreen_popup</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">// Key is the width and height passed to constructor, show does not affect anything.</span>
</span><span class='line'><span class="c1">//        popup.showAtLocation(anchor, Gravity.NO_GRAVITY, 0, 0);</span>
</span><span class='line'>    <span class="n">popup</span><span class="o">.</span><span class="na">showAsDropDown</span><span class="o">(</span><span class="n">anchor</span><span class="o">,</span> <span class="mi">100</span><span class="o">,</span> <span class="mi">200</span><span class="o">);</span>
</span><span class='line'>    <span class="n">content</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">okay</span><span class="o">).</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="n">view</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">popup</span><span class="o">.</span><span class="na">dismiss</span><span class="o">();</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Toast又是个啥</h3>

<p>这个大家都非常熟悉了，每天都用到，用以给出一些非常弱的提示。</p>

<p>它其实也是有独立Window的。<a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/widget/Toast.java;drc=master;bpv=0;bpt=0;l=348">Toast</a>类本身比较简单，但它也是有一个专门的Server的叫NotificationManager，Toast也是一个客户端，直接做工作的是另一端的服务，这也是为何即使我们的应用退到了后台依然可以show一个Toast。我们用的最多的就是让其显示一段文字，但其实那只是它的一个非常基础的用法。从Toast的方法就可以看出来，它是可以接受一个View的，所以把一个布局的根节点传进去，那这个布局不就可以显示了么？</p>

<h4>Toast可以显示复杂布局吗？</h4>

<p>虽然，通常我们都是使用Toast.makeText方法，但这并意味着它只能显示纯文字，它是可发接收一个View作为其Content的，就通过其setView方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">private</span> <span class="kt">void</span> <span class="nf">showComplexToast</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Toast</span> <span class="n">toast</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Toast</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">View</span> <span class="n">dialog</span> <span class="o">=</span> <span class="n">LayoutInflater</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="k">this</span><span class="o">).</span><span class="na">inflate</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">fullscreen_dialog</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>    <span class="n">toast</span><span class="o">.</span><span class="na">setDuration</span><span class="o">(</span><span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_LONG</span><span class="o">);</span>
</span><span class='line'>    <span class="n">toast</span><span class="o">.</span><span class="na">setView</span><span class="o">(</span><span class="n">dialog</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">// This does not work, Toast cannot receive focus, i.e. it won&#39;t receive events from WMS</span>
</span><span class='line'>    <span class="n">dialog</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">okay</span><span class="o">).</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="n">view</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">toast</span><span class="o">.</span><span class="na">cancel</span><span class="o">();</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'>    <span class="n">toast</span><span class="o">.</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>不过呢，虽然Toast可以展示更为复杂的布局，但是它是无法接收用户事件，也就是说它是无法处理点击事件的，你想有用户交互的话，是不可以的。</p>

<p>如此，假如你想显示一个类似Toast的，但是可以交互 的，那只能用PopupWindow或者Dialog来模拟，但这又只能是在应用在前台时显示；假如在后台时，又想要有交互行为，那只能用Notification和PendingIntent了。</p>

<h2>综合结论</h2>

<p>说了这么多，希望还没有看晕，总结一下：</p>

<ol>
<li>Window也是有结构 关系的，类似于View一样，像一样tree</li>
<li>每一个Window都有一颗View tree，DecorView是其根节点</li>
<li>ViewRootImpl是用来管理View tree的</li>
<li>Dialog和PopupWindow可以用以显示铺满Activity，甚至全屏的View</li>
<li>Toast也可以展示复杂布局</li>
</ol>


<h3>实战建议</h3>

<p>Activity应该只用于显示一个页面内的主要的，逻辑上都可以触达的布局，比如一上来用户就可见的所有东西，以及常规操作可以触发的（如折叠展开等）。</p>

<p>Activity的View tree要尽可能的小，这样才能保证最好的渲染性能，其余的，很多一次性的，即插即用的，鲜有逻辑才会有触发的，这种布局，要尽可能的独立于Activity的View tree之外，以保证其布局和逻辑上的独立，也更方便维护，更能减少Activity的view tree的体积。因为Dialog和PopupWindow也可以铺满整个Activity，所以，像一些用户引导，新人引导，运营活动，分享，等等一些常规逻辑走不到的页面，都可以考虑用Dialog和PopupWindow来实现。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何玩转安卓源代码]]></title>
    <link href="http://toughcoder.net/blog/2020/03/12/play-with-android-source-code/"/>
    <updated>2020-03-12T23:35:08+08:00</updated>
    <id>http://toughcoder.net/blog/2020/03/12/play-with-android-source-code</id>
    <content type="html"><![CDATA[<p>身为一个安卓开发者，除了学习<a href="https://developer.android.com/">应用开发</a>以外，安卓本身的源码也是必须要玩一玩的，因为安卓系统的源码中还有相当不错的东西值得去学习的。<a href="https://source.android.com/">官方的网站</a>（AOSP)就是专门为安卓源码相关而搭建的，换句话说想玩转安卓的源码，看这个网站就可以了。本篇重点讲一讲，如何玩转安卓源码，从环境搭建，到下载源码，到编译，以及源码的学习和查看。</p>

<p><a href="http://toughcoder.net/blog/2020/03/12/play-with-android-source-code/"><img src="https://qooah.com/wp-content/uploads/2014/06/Android-Open-Source-Project.jpg"></a></p>

<!-- more -->


<h2>好好的为啥折腾源码</h2>

<p>再多废话几句，安卓源码也即安卓操作系统的源码，它是由Google开发的移动智能设备的操作系统，完全开源，市面上的大部分手机都是安卓 手机，详细的可以看<a href="https://source.android.com/">官方网站的介绍</a>。</p>

<p>一般来说，除非是手机厂商或者ROM开发人员，否则作为一个应用开发者来说，跟源码直接打交道的时候比较少，更多是出于学习的目的才需要折腾源码，或者是出于折腾的目的，想搞一个自定义的ROM。因为源码文件非常大，几十个G，下载源码不但耗时而且消耗硬盘空间，编译也非常的慢，编译一个ROM需要二个小时左右。</p>

<h2>基础工具和开发环境搭建</h2>

<p>最基础的工具，常规的开发者应该都满足，这个可以参考<a href="https://source.android.com/setup">官方文档</a>，基本无大碍。像git和Python，开发者的电脑上应该都有，那么基础中的基础就够了。</p>

<h2>repo工具</h2>

<p>需要重点说一下repo工具，它的<a href="https://gerrit.googlesource.com/git-repo/+/refs/heads/master/README.md">官方文档在这里</a>。</p>

<p>因为安卓源码非常庞大，涉及几百个开源项目，如果像普通的项目那样，用一个git的仓库来管理不现实，因为文件特别特别多，如果直接用git，可能一下子就卡死了；除文件特别多以外，虽然有上百个项目，但是不同的项目之间的关系程度并不大，有些项目之间完全没有关系，有些虽然有依赖，但是也没有源方面的直接依赖。所以，其实每个项目都是一个独立的git仓库，单独版本管理，安卓整体的源码就是这些项目的集合，用一个配置文件(manifest.xml)来描述，这个文件里面写着有多少个项目，每个项目的仓库在哪里，以及使用哪个分支。</p>

<p>因为项目复杂，有单独的配置文件，所以也就是需要一个工具，这就是repo工具，它会根据manifest文件，来协助管理源码。repo的原理也不复杂，它就是一个Python脚本，操作git命令。如何使用repo就直接看它的<a href="https://source.android.com/setup/develop/repo">帮助文档</a>就可以了，文档相当详细，这里就不重复了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>repo --help
</span><span class='line'>repo <span class="nb">help </span>init<span class="p">|</span>start<span class="p">|</span>sync<span class="p">|</span>upload
</span></code></pre></td></tr></table></div></figure>


<h2>如何优雅的下载源码</h2>

<p>可以参考<a href="https://source.android.com/setup/build/downloading">官方文档</a>，就不重复了，输入以下命令，然后漫长等待就可以了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir aosp
</span><span class='line'><span class="nb">cd </span>aosp
</span><span class='line'>repo init -u https://android.googlesource.com/platform/manifest
</span><span class='line'>repo sync
</span></code></pre></td></tr></table></div></figure>


<p>如果网络都正常的情况下，执行上面的命令后，等待就可以了。但是不要too yong，too simple，因为『你懂得』的原因，上面的命令是无法成功的，即使你有梯子，也会很慢，而且源码几十个G，白白浪费这流量干嘛呢？要学会站在巨人肩膀上，不知尔等发现没有，凡是国外一些源码啊，软件库啊，在国内都是有镜像的，以应对一些网络不好的情况，比如像Ubuntu的软件库，像Ruby的源。是的，安卓源码，在国内也是有镜像的，我们直接从镜像网站下载，不但不会有网络连接问题，而且速度非常的快，十分钟就可以下完。</p>

<p>比较好的镜像有<a href="https://mirrors.tuna.tsinghua.edu.cn/help/AOSP/">清化大学的镜像</a>和<a href="https://lug.ustc.edu.cn/wiki/mirrors/help/aosp">中科大的镜像</a>。具体镜像怎么使用，看相应的主页上面就可以，都有介绍的。</p>

<h2>搭建OpenGrok来浏览代码</h2>

<p>如上面所说的安卓源码是非常庞大的，所以浏览源码是相当费劲的，光靠find+grep+vim也是可以，但是效率太低了，源码中的交叉索引，函数调用栈这些东西如果 没有像IDE一样专业的工具来看，还是相当的蛋痛的。当然 啦，也可以用Eclipse或者AndroidStudio或者SourceInsight把某些模块导入去来查看，这也是可以的，但是如果只看某个模块还是可以的。如果多了的话IDE也扛不住。</p>

<p>这里就需要用到专业级别的交叉索引工具了，比如<a href="https://github.com/OpenGrok/OpenGrok">OpenGrok</a>这是一个开源的代码交叉索引引挚，相当强大，特别适合像安卓源码这种超级庞大的项目。折腾起来也不算费劲，要先安装tomcat，可以考<a href="https://mazhuang.org/2016/12/14/rtfsc-with-opengrok/">这篇文章</a>，相当详细。</p>

<p>这里需要说一下可能遇到的坑，因为安卓 源码文件数量相当庞大，这里的意思是不但整体占用硬盘空间大，而且文件数量也非常非常的多，OpenGrok的安装运行时间特别长，因为它要过一遍源码生成交叉引用所需要的cache，综合起来的结果 就是，整体会占用非常大的磁盘空间(可能会上百G)，以及特别特别特别多的文件，你至少需要准备一个500G以上的硬盘，否则会出现一个致命的问题，不是简单的磁盘满了，而是文件系统的inode数满了，简单来理解就是每个文件在内核看来是一个inode，它与文件所占的空间类似，一块硬盘分区的空间是有限的，当达到一定限额后将无法再存储新的文件，文件系统的inode也是如此，当一块硬盘达到80%以后，便无法再添加新文件，整体文件系统将不可操作，对,连删除文件都无法进行，这个时候没有别的办法，只能重新装系统，相当麻烦。</p>

<h2>如何编译</h2>

<p>编译的话，最好选择Ubuntu的LTS版本，如LTS14.04，因为这个是用的比较多的，像Google自己以及很多厂商的编译服务器也都基于Ubuntu LTS来搭建的，这样可以避免很多烦人的问题。之后再安装一些交叉所需要的库就可以了，这个follow<a href="https://source.android.com/setup/build/initializing">官方文档</a>就可以了，比较详细。</p>

<p>具体的编译的话，也是一样的，直接follow<a href="https://source.android.com/setup/build/building">官方文档</a>就好了，人家写的非常详细也相当的专业，没有必要重复。</p>

<h2>如何刷机</h2>

<p>这个都是用fastboot这个工具，可以<a href="https://source.android.com/setup/build/running">参考官方文档</a>不过现在除非是厂商的工程机，否则折腾解锁也比较麻烦，可以到厂商的论坛以及像<a href="https://www.xda-developers.com/">XDA</a>上面多逛逛。</p>

<p>不过，如果有亲儿子的话，还是比较好折腾的，官方文档上面就有相应的方法，以及一些带有版权的BSP依赖包，可以刷起来玩一玩。</p>

<h2>优雅的读代码</h2>

<p>如果不想编译自定义的ROM，就是想看看源码的话，其实没有必要这么费劲的折腾，把代码下载下来不但费时费力，慢，而且还不是最新的代码。当然是有有更好的方式，有好多在线的源码查看工具。</p>

<ul>
<li><a href="https://android.googlesource.com/">官方source</a>. 这个是官方的版本管理的在线浏览，不是很方便，不够强大（比如没有交叉索引），而且速度不快，还需要翻墙</li>
<li><a href="http://androidxref.com/">androidXef</a>. 这个基于OpenGrok搭建的，在线浏览安桌源代码的在线工具，但是貌似2018年以后就不更新了，上面最新的版本是Android Pie。速度也不算快，但好在能查看好多个版本。</li>
<li><a href="https://cs.android.com/">官方code search</a>  这个是2019年Google新推出的查阅安卓源码的在线工具，速度非常快，貌似不是基于OpenGrok，相当好用，推荐直接看这个。</li>
</ul>


<h2>拓展资源</h2>

<p>除了安卓源代码以外，还有一坨资源可以看，像芯片厂商也会发布<a href="https://source.codeaurora.org/">相当多的源码</a>，比如像高通就有安卓源码相在的一坨源码，高通芯片的手机基本上也都有基于这些代码进行二次开发，所以也非常值得一看。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python字符串编码答疑]]></title>
    <link href="http://toughcoder.net/blog/2020/03/06/understanding-python-string-encoding/"/>
    <updated>2020-03-06T22:21:49+08:00</updated>
    <id>http://toughcoder.net/blog/2020/03/06/understanding-python-string-encoding</id>
    <content type="html"><![CDATA[<h2>Python 2中的字符串分类</h2>

<p>在Python 2中字符串，有两个类型，一个是str，一个是unicode。str可以理解为ASCII的字符列表，说白了，只能存储ASCII字符，如果赋个中文值，会报错；而unicode是支持非ASCII字符的。这个与C语言中的字符非常类似char[]只能存ASCII字符串，而wchar[]才可以存储Unidcode字符串。</p>

<p><a href="http://toughcoder.net/blog/2020/03/06/understanding-python-string-encoding/"><img src="https://www.kodefork.com/media/uploads/articles/2019/06/23/python-strings.png"></a></p>

<!-- more -->


<p>可以用如下方式来安全的转换两种字符串：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">to_str</span><span class="p">(</span><span class="n">foo</span><span class="p">):</span>
</span><span class='line'>   <span class="k">if</span> <span class="n">foo</span> <span class="n">instanceof</span> <span class="nb">unicode</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">str</span><span class="p">(</span><span class="n">foo</span><span class="p">)</span>
</span><span class='line'>   <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">foo</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">to_unicode</span><span class="p">(</span><span class="n">bar</span><span class="p">):</span>
</span><span class='line'>   <span class="k">if</span> <span class="n">bar</span> <span class="n">instanceof</span> <span class="nb">str</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">unicode</span><span class="p">(</span><span class="n">bar</span><span class="p">)</span>
</span><span class='line'>   <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">bar</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于字面字符串，前面加上u来标识是一个unicode，否则会当成str：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="s">&#39;this is a string&#39;</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="s">u&#39;nah, I am a unicode&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Python 3中的字符串分类</h2>

<p>由于Python 2中的混乱，所以到了Python 3里面，有了新的定义，字符串类型是str，支持Unicode，另外多了一个类型bytes，可以理解为byte的列表，也即是0&lt;=且&lt;=256的无符号整数，或者说是ASCII字符，简单来理解意思是一样的。这个就与Java语言类似了，如同Java中一样，String支持unicode，另专门有byte类型。另外，对于字面字符串也无需要再要标识了。</p>

<p>str与bytes之间的关系与区别是，str是给人看的，而bytes是给机器看的，bytes是str的底层实现。所以，bytes处理起来更快，效率更高，一些底层的IO库以及像网络IO，用的数据 一般都是bytes。它们之间是可以互转的：</p>

<ul>
<li>str转为bytes叫encode</li>
<li>bytes转为str叫decode</li>
</ul>


<p>在转换的时候还需要指定编码格式，这个编码格式就是unicode的编码方式，默认是&#8217;utf-8&#8217;，这里就涉及Unicode编码解码的相关知识了，常见的就是&#8217;utf-8&#8217;，&#8217;unicode&#8217;，以及&#8217;gbk&#8217;等。可以用如下方法来安全的转换：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">to_bytes</span><span class="p">(</span><span class="n">foo</span><span class="p">):</span>
</span><span class='line'>   <span class="k">if</span> <span class="n">foo</span> <span class="n">instanceof</span> <span class="nb">str</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">foo</span><span class="o">.</span><span class="n">encode</span><span class="p">()</span>
</span><span class='line'>   <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">foo</span>
</span><span class='line'><span class="k">def</span> <span class="nf">to_str</span><span class="p">(</span><span class="n">bar</span><span class="p">):</span>
</span><span class='line'>   <span class="k">if</span> <span class="n">bar</span> <span class="n">intanceof</span> <span class="nb">bytes</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">bar</span><span class="o">.</span><span class="n">decode</span><span class="p">()</span>
</span><span class='line'>   <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">bar</span>
</span></code></pre></td></tr></table></div></figure>


<h2>注意区分两个编码格式</h2>

<p>需要注意区分两个编码格式的设置，一个是指定程序里面字符串的编码，如在encode()和decode()时指定编码格式。</p>

<p>另外，一个就是程序源文件的编码格式，这个容易被忽略，要详细说下：程序的源码，其实就是一个文本文件，对吧，那么这个文本文件也是要指定编码格式的，常规来说，Python程序应该都是ASCII字符，所以默认的呢Python解释器，是按照ASCII文本的方式来处理代码源文件，但我们代码里面是会出现Unicode字符的，比如字面字符串，或者写的注释，如果 不进行特殊的设置解释器会报错的，因为出现了它不认识的字符。这时就需要对源码文件设置一下编码格式，把这句加在代码源文件的最上面，就好了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span></code></pre></td></tr></table></div></figure>


<h2>如何解决未知编码格式</h2>

<p>关于编码最容易遇到的就是UnicodeDecodeError，后面跟着一坨详细信息，这个错误就是告诉你编码时出问题了，通常有两类错误：</p>

<ul>
<li><p>UnicodeDecodeError: &lsquo;ascii&rsquo; codec can&rsquo;t decode byte 0xe4 in position 0: ordinal not in range(128)</p>

<p>这个通常是在Python 2时会遇到，原因简单的来说就是把unicode当成了string，或者源码文件的编码格式不对。解决的办法就是按照 上面介绍的安全转换方法，另外要设置一下源码文件的编码格式，这个问题自然可解。</p></li>
<li><p>Python3.6 UnicodeDecodeError: &lsquo;utf8&rsquo; codec can&rsquo;t decode byte 0xb2 in position 24137: invalid start byte</p>

<p>这个通常是在Python 3时面遇到的，后面的具体信息会不一样，这个问题会发生在bytes转化为string，decode时会报出，原因就是指定的解码方式与真实的不匹配，无法成功decode，比如，bytes是「gtk」的，但是用&#8217;utf-8&#8217;去decode肯定会失败。这个问题，在写爬虫或者一些文本处理时经常遇到，因为来源的编码方式不固定。</p>

<p>这个问题，如果想要根解，必须预知来源bytes的编码格式，但这通常不可能，所以可行的一条方案是，用一坨编码方式来不停的尝试：</p>

<pre><code class="python">def safe_decode(source):
   encodeings = ['utf-8', 'gbk', 'utf-16']
   for en in encodeings:
      try:
         return source.decode(en)
      except UnicodeDecodeError as e:
         print('Failed: ', e)
   return source
</code></pre></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 2升级到Python 3的指导建议]]></title>
    <link href="http://toughcoder.net/blog/2020/03/05/guide-of-upgrade-from-python-2-to-python-3/"/>
    <updated>2020-03-05T23:51:53+08:00</updated>
    <id>http://toughcoder.net/blog/2020/03/05/guide-of-upgrade-from-python-2-to-python-3</id>
    <content type="html"><![CDATA[<p>&ldquo;Life is short, we must upgrade to Python 3&rdquo;</p>

<p>Python是一个非常好用的工具语言，哪怕主业中用不到它，到处可见到一些非常实用的小的工具都是用Python来写的，即使再小的工具，也要做到小而美，这是工匠精神的体现。在社区里面Python 2已经停止开发新功能了，仅维护并修复一些bug，未来也将会停止维护，有些平台已经默认用python3了。除非有些无法替换的依赖必须强制使用Python 2以外，建议要升级到Python 3。本篇记录一些朕在升级到Python 3时遇到的一些问题，也即升级的时候的一些指导提示。</p>

<p><a href="http://toughcoder.net/blog/2020/03/05/guide-of-upgrade-from-python-2-to-python-3/"><img src="https://miro.medium.com/max/2156/1*HacaJfdu7HF8V4gIoA98ww.png"></a></p>

<!-- more -->


<h2>Python 2与Python 3的区别</h2>

<h3>两个版本并不兼容</h3>

<p>就像刚接触Python时，竟然发现它有两个版本，而且它们还不兼容，具体原因可能是因为时代的发展，编程语言也在不断的进步，而Python语言并不年轻，所以可能会导致新的编程语言设计思想在老的版本上面不好去兼容，很多软件都会有这样的问题，当有跨度比较大的升级时，相当于重新设计了，基本上是取代而非升级，因为老版本的设计架构等原因，是无法兼容的。</p>

<p>姑且不管啥原因吧，我们要明白一个事实就是Python 2与Python 3是不兼容的，意思就是，如果按照Python 2写的一段代码，用Python 3的解释器去运行，会报错，无法运行，反之亦然。</p>

<h3>两个版本的主要区别</h3>

<p>关于两方面的区别，可以看一看<a href="https://www.cnblogs.com/aguncn/p/3427531.html">这篇文章</a>，写的比较详细，这里就不重复了，只是罗列一些最常用的，也是最显著的一些需要注意的地方：</p>

<h4>print</h4>

<p>在Python 2里面啊，print是一个语言关键字，就像if when一样，它是一个独立的语句，想输出啥东西时，都是直接在print后面写就行了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">print</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;Security code is &#39;</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span>
</span></code></pre></td></tr></table></div></figure>


<p>而Python 3里面，print是一个内置函数，必须带有()才算函数调用，这里不纠结语句与函数的区别，只需要记得，现在要在print后面加上括号就可以了，下面的代码与上面效果等同：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">print</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&#39;Security code is &#39;</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>字符串编码</h4>

<p>这个可能是最复杂的和令人困惑的，根本的原因在于Python 2中的字符串与编码问题很绕，而Python 3中就清晰多了。</p>

<p>在Python 2里面字符串与字符的类型是不一样的，它与上一代的编程语言（C）有点类似，ASCII的与Unicode是不同的类型：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="s">&#39;abcd&#39;</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="s">u&#39;早上好&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里面a是一个string，而b是一个unicode str，如果 不加u，直接写unicode字符会报错的，可以通过unicode函数转化为unicode str，以及通过str函数转化为ASCII字符串。</p>

<p>而在Python 3中不再这么绕了，它就一种字符串类型str，支持unicode，所以你可以直接写了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="s">&#39;abcd&#39;</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="s">&#39;下午好&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以简单的来理解，把Python 2里的字串想像为C语言，而Python 3的字串相像为Java就可以了。</p>

<p><strong>注意</strong>： 关于字串与编码比较复杂，后面会单独的文章来介绍。</p>

<h4>重要模块的迁移</h4>

<p>大部分的模块是没有变动的，也即import时没有变化，但是有一些有比较大的变化，原因也是相关的代码在设计上有了重大变更，最明显的就是HTTP相关，原来比较乱有httplib, cookie, urllib2等一坨，现在都集中在了urllib里面。详细的可参见上面推荐的文章。</p>

<h4>遍历字典和列表</h4>

<p>字典遍历有变化 ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># data is a dictionary</span>
</span><span class='line'><span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">data</span><span class="o">.</span><span class="n">items</span><span class="p">():</span> <span class="c"># not iteritems()</span>
</span><span class='line'>   <span class="k">print</span><span class="p">(</span><span class="s">&#39;{} -&gt; {}.format(k, v))</span>
</span></code></pre></td></tr></table></div></figure>


<p>遍历平行列表时有变化 ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># sections, departments are lists</span>
</span><span class='line'><span class="k">for</span> <span class="n">s</span><span class="p">,</span> <span class="n">d</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">sections</span><span class="p">,</span> <span class="n">departments</span><span class="p">):</span>
</span><span class='line'>   <span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">d</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>而在Python 2里面必须 这样写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">itertools</span>
</span><span class='line'><span class="k">for</span> <span class="n">s</span><span class="p">,</span> <span class="n">d</span> <span class="ow">in</span> <span class="n">itertools</span><span class="o">.</span><span class="n">zip</span><span class="p">(</span><span class="n">sections</span><span class="p">,</span> <span class="n">departments</span><span class="p">):</span>
</span><span class='line'>   <span class="k">print</span> <span class="n">s</span><span class="p">,</span> <span class="n">d</span>
</span></code></pre></td></tr></table></div></figure>


<h2>解释器的选择</h2>

<p>上面是代码层面的区别和要注意的点，代码写好了要执行啊，执行的时候也需要注意，用错了解释器，还是跑不通的。</p>

<p>目前大部分的平台上面（Ubuntu和Mac OSX）的系统默认解释器还是2.7.x版本的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>-&gt; ~<span class="o">]</span> which python
</span><span class='line'>/usr/bin/python
</span><span class='line'><span class="o">[</span>-&gt; ~<span class="o">]</span> ll /usr/bin/python
</span><span class='line'>/usr/bin/python -&gt; python2.7
</span></code></pre></td></tr></table></div></figure>


<p>但是呢，不建议强行把系统的默认解释器换成Python 3，这可能会导致系统出问题，我们直接让我们的脚本用Python 3来运行就可以了，在shebang中改：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python3</span>
</span></code></pre></td></tr></table></div></figure>


<p>或者如果是使用PyCharm的话，在项目配置上直接选择Python 3的解释器就好了。</p>

<h2>用pip3安装依赖</h2>

<p>同时，安装需要的依赖时也使用pip3而非pip：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install python3-pip
</span><span class='line'>pip3 install --upgrade pip
</span><span class='line'>pip3 install pandas
</span></code></pre></td></tr></table></div></figure>


<h2>思维的转变</h2>

<p>这里仅是罗列出一些非常显著 的变化 ，实际上远不止这些，大版本的跳跃哪能就这么一点变化呢，还有想当多的细节问题可能会在日常使用中遇到。</p>

<p>这里想说的是如果遇到问题，比如在Python 3中报错了，或者某个问题不知道怎么搞，在搜索答案时，或者寻求帮助时记得直接搜索『Python 3』，这会比较明确的把范围限定 在Python 3里面。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://medium.com/@rajputankit22/upgrade-python-2-7-to-3-6-and-3-7-in-ubuntu-97d2727bf911">Upgrade python 2.7 to 3.6 and 3.7 in Ubuntu</a></li>
<li><a href="https://www.cnblogs.com/aguncn/p/3427531.html">使用2to3将代码移植到Python 3-转</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[年轻人的第一篇OpenGL ES 2.0教程]]></title>
    <link href="http://toughcoder.net/blog/2018/07/31/introduction-to-opengl-es-2-dot-0/"/>
    <updated>2018-07-31T22:36:29+08:00</updated>
    <id>http://toughcoder.net/blog/2018/07/31/introduction-to-opengl-es-2-dot-0</id>
    <content type="html"><![CDATA[<h2>Before we go</h2>

<p>在高性能graphics领域，特别是3D graphics领域，<a href="https://www.khronos.org/opengl/">OpenGL</a>无疑是目前的最佳选择，虽然，现在有很多集成度高的三方的库或者SDK，但是学习一下OpenGL仍然是非常有好处的，你可以了解基本的computer graphics的概念，这会让你在使用它们的时候更加的从容。</p>

<p>OpenGL是一个跨平台的高性能3D渲染API，<a href="https://www.khronos.org/opengles/">OpenGL ES</a>是它的嵌入式平台版本。<br/></p>

<p><a href="http://toughcoder.net/blog/2018/07/31/introduction-to-opengl-es-2-dot-0/"><img src="https://wx4.sinaimg.cn/mw690/870ad0baly1fttcpdw7u7j215o0dwgmk.jpg"></a></p>

<p>我们即将踏上学习OpenGL ES 2.0之旅，主要针对于Android平台，会有一系列文章来分享学习OpenGL ES的总结。<br/></p>

<p>主要编程语言将使用Kotlin，对于Kotlin还不熟悉的同学可以先看前面的<a href="http://toughcoder.net/blog/2018/05/17/introduction-to-kotlin-programming-language/">介绍</a>和<a href="http://toughcoder.net/blog/2018/06/09/kotlin-exercise-programmer-calendar/">实例</a>来快速的熟悉一下。</p>

<!-- more -->


<p>Android上面的OpenGL ES一共有三个版本，1.0，2.0以及现在的3.x(3.1, 3.2)，其中1.0是旧式的API，与桌面版本的OpenGL非常接近，但是却不太好用。从2.0开始，API有较大变化，具体的渲染相关使用专门的着色语言来表达
矩阵的处理放到一个单独的类Matrix中，这样解耦后，学习起来和理解起来相对容易，API也不会依赖于具体的对象，直接使用static式的GLES20或者GLES30就好了。3.0是向后兼容的，它完全兼容2.0。所以，从2.0开始学习，是一个
比较好的选择，而且2.0被Android 2.3以后的SDK支持，应该说目前所有的设备API上面都是支持OpenGL ES 2.0的（当然，具体的支持情况还看硬件GPU）。<br/></p>

<p>为了方便，在此系列文章中，OpenGL，或者OpenGL ES或者GL，都是指OpenGL ES 2.0。<br/>
关于平台，虽然我们是基于Android平台来学习，但是OpenGL是跨平台的，所有平台的GL的API（OpenGL, ES，或者WebGL，或者水果平台）长的都类似，方法名字，以及参数都差不多。虽然不可以直接使用，但是当作参考都没有问题。</p>

<h2>开发环境搭建</h2>

<p>首先是Android app的开发环境搭建，这个不多说了，大家自行Google。SDK版本最好高一点，至少要是5.0 (API 20)以上吧。<br/>
其次是Kotlin语言的支持，如是是Android Studio 3.0以上的版本，自带支持，不用折腾。否则可以参考<a href="https://kotlinlang.org/">官方网站的指导</a>。<br/>
涉及到SDK相关的东西就是Activity，我们是有页面显示的，所以必须要有一个Activity，这个都懂得。主要是widget就是<a href="https://developer.android.com/reference/android/opengl/GLSurfaceView">android.oepngl.GLSurfaceView</a>，
以及<a href="https://developer.android.com/reference/android/opengl/GLSurfaceView.Renderer">android.opengl.GLSurfaceView.Renderer</a>。GLSurfaceView是Android平台专门用于OpenGL绘制的组件，我们只需要创建一个
实例，然后做一些基本的配置就好了，每个例子的配置都是很类似。重点就是要实现一个GLSurfaceView.Renderer，这个是OpenGL开发的重点。</p>

<h3>Step by step guide</h3>

<p>首先，新建一个Android app项目，注意带上Kotlin支持，默认是钩上的。名字随意，比如叫EffectiveGL。<br/>
然后，在项目新建一个空白Activity，不用钩选backward compat和创建layout，因为我们只用一个GLSurfaceView，用不着layout文件，另外，我们是用Kotlin，Kotlin是用Anko来用代码写布局。<br/>
再有，在Activity里面，创建一个GLSurfaceView对象，然后当作Activity的布局。<br/>
最后，实现一个Renderer接口，塞给GLSurfaceView，并对其做简单的配置。<br/>
最终，一个准备好开发OpenGL的基本代码是这样子的，这些基础的准备工作，后面的示例中会略掉。<br/></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">HelloPoints</span> <span class="p">:</span> <span class="n">Activity</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="n">lateinit</span> <span class="k">var</span> <span class="py">glSurfaceView</span><span class="p">:</span> <span class="n">GLSurfaceView</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">super</span><span class="p">.</span><span class="n">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
</span><span class='line'>        <span class="n">title</span> <span class="p">=</span> <span class="s">&quot;Play with Points&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">glSurfaceView</span> <span class="p">=</span> <span class="n">GLSurfaceView</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span><span class='line'>        <span class="n">setContentView</span><span class="p">(</span><span class="n">glSurfaceView</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">glSurfaceView</span><span class="p">.</span><span class="n">setEGLContextClientVersion</span><span class="p">(</span><span class="m">2</span><span class="p">)</span>
</span><span class='line'>        <span class="n">glSurfaceView</span><span class="p">.</span><span class="n">setRenderer</span><span class="p">(</span><span class="n">PointsRender</span><span class="p">)</span>
</span><span class='line'>        <span class="n">glSurfaceView</span><span class="p">.</span><span class="n">renderMode</span> <span class="p">=</span> <span class="n">GLSurfaceView</span><span class="p">.</span><span class="n">RENDERMODE_CONTINUOUSLY</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onResume</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">super</span><span class="p">.</span><span class="n">onResume</span><span class="p">()</span>
</span><span class='line'>        <span class="n">glSurfaceView</span><span class="p">.</span><span class="n">onResume</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onPause</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">super</span><span class="p">.</span><span class="n">onPause</span><span class="p">()</span>
</span><span class='line'>        <span class="n">glSurfaceView</span><span class="p">.</span><span class="n">onPause</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">companion</span> <span class="k">object</span> <span class="nc">PointsRender</span> <span class="p">:</span> <span class="n">GLSurfaceView</span><span class="p">.</span><span class="n">Renderer</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">override</span> <span class="k">fun</span> <span class="nf">onDrawFrame</span><span class="p">(</span><span class="n">p0</span><span class="p">:</span> <span class="n">GL10</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">override</span> <span class="k">fun</span> <span class="nf">onSurfaceChanged</span><span class="p">(</span><span class="n">p0</span><span class="p">:</span> <span class="n">GL10</span><span class="p">?,</span> <span class="n">p1</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">p2</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">override</span> <span class="k">fun</span> <span class="nf">onSurfaceCreated</span><span class="p">(</span><span class="n">p0</span><span class="p">:</span> <span class="n">GL10</span><span class="p">?,</span> <span class="n">p1</span><span class="p">:</span> <span class="n">EGLConfig</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>基础概念理解</h2>

<p>有一些基础中的基础的概念需要理解一下，才能开始码代码。刚接触这么多概念，可能还没有理解它们，没有关系，先建立一个大概印象，随着学习的深入，就慢慢理解它们了。</p>

<h3>GL context</h3>

<p>GL API的调用，虽然都是static形式的，没有限制，在哪里都能直接call，但是实际上它是有一个上下文环境的，叫GL context（目前阶段先这么叫着吧，不是太严谨哈）。这有点听不懂，用人话说，
就是所有的GL API的调用都要在GLSurfaceView.Renderer的三个方法里面来call，就是方法的调用栈必须从这几个方法开始。在其他地方call是没有效果的：<br/>
onSurfaceCreated<br/>
onSurfaceChanged<br/>
onDrawFrame</p>

<h3>GL的坐标系</h3>

<p>OpenGL的坐标系是所谓的右手坐标系。<br/>
<img src="https://wx1.sinaimg.cn/mw690/870ad0baly1fttb78m52qj20m80cimy0.jpg" alt="Right hand" /><br/>
首先它是三维的笛卡尔坐标系：原点在屏幕正中，x轴从屏幕左向右，最左是-1，最右是1；y轴从屏幕下向上，最下是-1，最上是1；z轴从屏幕里面向外，最里面是-1，最外面是1。
<br/>
<img src="https://wx2.sinaimg.cn/mw690/870ad0baly1fttb78m40wj20dw07oaam.jpg" alt="Right hand 2" /></p>

<h3>shader</h3>

<p>GL ES 2.0与1.0版本最大的区别在于，把渲染相关的操作用一个专门的叫作着色语言的程序来表达，全名叫作<a href="https://de.wikipedia.org/wiki/OpenGL_ES_Shading_Language">OpenGL ES Shading language</a>，它是一个编程语言，与C语言非常类似，能够直接操作矩阵和向量，运行在GPU之上
专门用于图形渲染。它又分为两种，一个叫做顶点着色器（vertex shader），另一个叫做片元着色器（fragment shader）。前者用来指定几何形状的顶点；后者用于指定每个顶点的着色。
每个GL程序必须要有一个vertex shader和一个fragment shader，且它们是相互对应的。（相互对应，意思是vertex shader必须要有一个fragment shader，反之亦然，但并不一定是一一对应）。当然，也是可以复用的，
比如同一个vertex shader，可能会多个fragment shader来表达不同的着色方案。</p>

<h3>坐标值和颜色值</h3>

<p>坐标正常的取值范围都是-1到1，且是float类型。
颜色值是0到1，也是float类型，0是空（无的意思，比如黑色，或者全透明），1是有（全的意思，比如白色，或者不透明），有些API是使用0～255，这时就需要转换一下。
其实呢，写成超过此范围的值也是可以的，比如坐标传2，或者颜色写成5，OpenGL会处理成为它的合理的取值之内，用clamp的方式，超过的会被砍掉，如传5，相当于传1。</p>

<p>好了，准备工作差不多了，我们来撸代码吧。</p>

<h2>年轻人的第一个OpenGL程序</h2>

<p>我们的目标是画一个红色的点，就是这个样子的：
<img src="https://wx1.sinaimg.cn/mw690/870ad0baly1fttb78m3yhj20u01o0t9k.jpg" alt="Final result" />
<br/></p>

<p><strong>注意</strong>: 鉴于方便理解，我们暂时只做一些2D的渲染，也不调整view port，因为这会涉及比较复杂的Model View Projection矩阵的设置。</p>

<p>最终的代码就是这个样子的，重点看一下Renderer的实现，后面详细讲解：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">const</span> <span class="k">val</span> <span class="py">TAG</span> <span class="p">=</span> <span class="s">&quot;HelloPoints&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">HelloPoints</span> <span class="p">:</span> <span class="n">Activity</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="n">lateinit</span> <span class="k">var</span> <span class="py">glSurfaceView</span><span class="p">:</span> <span class="n">GLSurfaceView</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">super</span><span class="p">.</span><span class="n">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
</span><span class='line'>        <span class="n">title</span> <span class="p">=</span> <span class="s">&quot;Play with Points&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">glSurfaceView</span> <span class="p">=</span> <span class="n">GLSurfaceView</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span><span class='line'>        <span class="n">setContentView</span><span class="p">(</span><span class="n">glSurfaceView</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">glSurfaceView</span><span class="p">.</span><span class="n">setEGLContextClientVersion</span><span class="p">(</span><span class="m">2</span><span class="p">)</span>
</span><span class='line'>        <span class="n">glSurfaceView</span><span class="p">.</span><span class="n">setRenderer</span><span class="p">(</span><span class="n">PointsRender</span><span class="p">)</span>
</span><span class='line'>        <span class="n">glSurfaceView</span><span class="p">.</span><span class="n">renderMode</span> <span class="p">=</span> <span class="n">GLSurfaceView</span><span class="p">.</span><span class="n">RENDERMODE_CONTINUOUSLY</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onResume</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">super</span><span class="p">.</span><span class="n">onResume</span><span class="p">()</span>
</span><span class='line'>        <span class="n">glSurfaceView</span><span class="p">.</span><span class="n">onResume</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onPause</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">super</span><span class="p">.</span><span class="n">onPause</span><span class="p">()</span>
</span><span class='line'>        <span class="n">glSurfaceView</span><span class="p">.</span><span class="n">onPause</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">companion</span> <span class="k">object</span> <span class="nc">PointsRender</span> <span class="p">:</span> <span class="n">GLSurfaceView</span><span class="p">.</span><span class="n">Renderer</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">private</span> <span class="n">const</span> <span class="k">val</span> <span class="py">VERTEX_SHADER</span> <span class="p">=</span>
</span><span class='line'>                <span class="s">&quot;void main() {\n&quot;</span> <span class="p">+</span>
</span><span class='line'>                        <span class="s">&quot;gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\n&quot;</span> <span class="p">+</span>
</span><span class='line'>                        <span class="s">&quot;gl_PointSize = 20.0;\n&quot;</span> <span class="p">+</span>
</span><span class='line'>                        <span class="s">&quot;}\n&quot;</span>
</span><span class='line'>        <span class="k">private</span> <span class="n">const</span> <span class="k">val</span> <span class="py">FRAGMENT_SHADER</span> <span class="p">=</span>
</span><span class='line'>                <span class="s">&quot;void main() {\n&quot;</span> <span class="p">+</span>
</span><span class='line'>                        <span class="s">&quot;gl_FragColor = vec4(1., 0., 0.0, 1.0);\n&quot;</span> <span class="p">+</span>
</span><span class='line'>                        <span class="s">&quot;}\n&quot;</span>
</span><span class='line'>        <span class="k">private</span> <span class="k">var</span> <span class="py">mGLProgram</span><span class="p">:</span> <span class="n">Int</span> <span class="p">=</span> <span class="p">-</span><span class="m">1</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">override</span> <span class="k">fun</span> <span class="nf">onDrawFrame</span><span class="p">(</span><span class="n">p0</span><span class="p">:</span> <span class="n">GL10</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">GLES20</span><span class="p">.</span><span class="n">glClear</span><span class="p">(</span><span class="n">GLES20</span><span class="p">.</span><span class="n">GL_COLOR_BUFFER_BIT</span><span class="p">)</span>
</span><span class='line'>            <span class="n">GLES20</span><span class="p">.</span><span class="n">glUseProgram</span><span class="p">(</span><span class="n">mGLProgram</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">GLES20</span><span class="p">.</span><span class="n">glDrawArrays</span><span class="p">(</span><span class="n">GLES20</span><span class="p">.</span><span class="n">GL_POINTS</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">override</span> <span class="k">fun</span> <span class="nf">onSurfaceChanged</span><span class="p">(</span><span class="n">p0</span><span class="p">:</span> <span class="n">GL10</span><span class="p">?,</span> <span class="n">p1</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">p2</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">GLES20</span><span class="p">.</span><span class="n">glViewport</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="n">p1</span><span class="p">,</span> <span class="n">p2</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">override</span> <span class="k">fun</span> <span class="nf">onSurfaceCreated</span><span class="p">(</span><span class="n">p0</span><span class="p">:</span> <span class="n">GL10</span><span class="p">?,</span> <span class="n">p1</span><span class="p">:</span> <span class="n">EGLConfig</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">GLES20</span><span class="p">.</span><span class="n">glClearColor</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="m">0f</span><span class="p">,</span> <span class="m">0f</span><span class="p">,</span> <span class="m">1f</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">val</span> <span class="py">vsh</span> <span class="p">=</span> <span class="n">GLES20</span><span class="p">.</span><span class="n">glCreateShader</span><span class="p">(</span><span class="n">GLES20</span><span class="p">.</span><span class="n">GL_VERTEX_SHADER</span><span class="p">)</span>
</span><span class='line'>            <span class="n">GLES20</span><span class="p">.</span><span class="n">glShaderSource</span><span class="p">(</span><span class="n">vsh</span><span class="p">,</span> <span class="n">VERTEX_SHADER</span><span class="p">)</span>
</span><span class='line'>            <span class="n">GLES20</span><span class="p">.</span><span class="n">glCompileShader</span><span class="p">(</span><span class="n">vsh</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">val</span> <span class="py">fsh</span> <span class="p">=</span> <span class="n">GLES20</span><span class="p">.</span><span class="n">glCreateShader</span><span class="p">(</span><span class="n">GLES20</span><span class="p">.</span><span class="n">GL_FRAGMENT_SHADER</span><span class="p">)</span>
</span><span class='line'>            <span class="n">GLES20</span><span class="p">.</span><span class="n">glShaderSource</span><span class="p">(</span><span class="n">fsh</span><span class="p">,</span> <span class="n">FRAGMENT_SHADER</span><span class="p">)</span>
</span><span class='line'>            <span class="n">GLES20</span><span class="p">.</span><span class="n">glCompileShader</span><span class="p">(</span><span class="n">fsh</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">mGLProgram</span> <span class="p">=</span> <span class="n">GLES20</span><span class="p">.</span><span class="n">glCreateProgram</span><span class="p">()</span>
</span><span class='line'>            <span class="n">GLES20</span><span class="p">.</span><span class="n">glAttachShader</span><span class="p">(</span><span class="n">mGLProgram</span><span class="p">,</span> <span class="n">vsh</span><span class="p">)</span>
</span><span class='line'>            <span class="n">GLES20</span><span class="p">.</span><span class="n">glAttachShader</span><span class="p">(</span><span class="n">mGLProgram</span><span class="p">,</span> <span class="n">fsh</span><span class="p">)</span>
</span><span class='line'>            <span class="n">GLES20</span><span class="p">.</span><span class="n">glLinkProgram</span><span class="p">(</span><span class="n">mGLProgram</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">GLES20</span><span class="p">.</span><span class="n">glValidateProgram</span><span class="p">(</span><span class="n">mGLProgram</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">val</span> <span class="py">status</span> <span class="p">=</span> <span class="n">IntArray</span><span class="p">(</span><span class="m">1</span><span class="p">)</span>
</span><span class='line'>            <span class="n">GLES20</span><span class="p">.</span><span class="n">glGetProgramiv</span><span class="p">(</span><span class="n">mGLProgram</span><span class="p">,</span> <span class="n">GLES20</span><span class="p">.</span><span class="n">GL_VALIDATE_STATUS</span><span class="p">,</span> <span class="n">status</span><span class="p">,</span> <span class="m">0</span><span class="p">)</span>
</span><span class='line'>            <span class="n">Log</span><span class="p">.</span><span class="n">d</span><span class="p">(</span><span class="n">TAG</span><span class="p">,</span> <span class="s">&quot;validate shader program: &quot;</span> <span class="p">+</span> <span class="n">GLES20</span><span class="p">.</span><span class="n">glGetProgramInfoLog</span><span class="p">(</span><span class="n">mGLProgram</span><span class="p">))</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>示例代码讲解</h2>

<h3>基础设施</h3>

<p>先来看一下Activity的onCreate/onResume和onPause这三个方法。先是在onCreate里面创建一个GLSurfaceView实例，设置为content view，因为我们要使用OpenGL ES 2.0，所以要setEGLContextClientVersion(2)。然后，再
设置一个Renderer实例，渲染模式(render mode)分为两种，一个是GLSurfaceView主动刷新(continuously)，不停的回调Renderer的onDrawFrame，另外一种叫做被动刷新（when dirty），就是当请求刷新时才调一次onDrawFrame。<br/>
这里我们用continuously的方式。
<br/>
至于onResume/onPause，API要求是要调用一下GLSurfaceView的onResume和onPause，照做就好，对于我们的示例来说，其实调与不调看不出区别。这只是影响离开Activity页面时的性能，我们学习初期，可以不予关注。</p>

<h3>Renderer之onSurfaceCreated</h3>

<p>这个是最先被回调到的方法，告诉你系统层面，已经ready了，你可以开始做你的事情了。一般我们会在此方法里面做一些初始化工作，比如编译链接shader程序，初始化buffer等。我们一行一行的来分析：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">GLES20</span><span class="p">.</span><span class="n">glClearColor</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="m">0f</span><span class="p">,</span> <span class="m">0f</span><span class="p">,</span> <span class="m">1f</span><span class="p">)</span> <span class="c1">// 参数顺序 r, g, b, a</span>
</span></code></pre></td></tr></table></div></figure>


<p>这句是告诉OpenGL，给我把背景，或者叫作画布，画成黑色，不透明。比较绕人的说法是用参数指定的(r, g, b, a)这个颜色来初始化颜色缓冲区（color buffer）。目前就理解成为画面背景色就可以了。</p>

<p>接下来的这一坨是编译和链接shader程序：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">vsh</span> <span class="p">=</span> <span class="n">GLES20</span><span class="p">.</span><span class="n">glCreateShader</span><span class="p">(</span><span class="n">GLES20</span><span class="p">.</span><span class="n">GL_VERTEX_SHADER</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>创建一个vertex shader程序，返回的是它的句柄，此返回值会用在后续操作的参数，所以，要用变量记录下来。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">GLES20</span><span class="p">.</span><span class="n">glShaderSource</span><span class="p">(</span><span class="n">vsh</span><span class="p">,</span> <span class="n">VERTEX_SHADER</span><span class="p">)</span> <span class="c1">// 告诉OpenGL，这一坨字串里面是vertex shader的源码。</span>
</span><span class='line'><span class="n">GLES20</span><span class="p">.</span><span class="n">glCompileShader</span><span class="p">(</span><span class="n">vsh</span><span class="p">)</span> <span class="c1">// 编译vertex shader</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来的三行，是编译fragment shader，跟vertex shader是一样的。
然后是创建shader program并把shader链到上头去。同样的，先创建一个shader program句柄，后面要用，所以要记录一下，因为要在此方法外使用program句柄，所以要用全局变量来记录。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">mGLProgram</span> <span class="p">=</span> <span class="n">GLES20</span><span class="p">.</span><span class="n">glCreateProgram</span><span class="p">()</span> <span class="c1">// 创建shader program句柄</span>
</span><span class='line'><span class="n">GLES20</span><span class="p">.</span><span class="n">glAttachShader</span><span class="p">(</span><span class="n">mGLProgram</span><span class="p">,</span> <span class="n">vsh</span><span class="p">)</span> <span class="c1">// 把vertex shader添加到program</span>
</span><span class='line'><span class="n">GLES20</span><span class="p">.</span><span class="n">glAttachShader</span><span class="p">(</span><span class="n">mGLProgram</span><span class="p">,</span> <span class="n">fsh</span><span class="p">)</span> <span class="c1">// 把fragment shader添加到program</span>
</span><span class='line'><span class="n">GLES20</span><span class="p">.</span><span class="n">glLinkProgram</span><span class="p">(</span><span class="n">mGLProgram</span><span class="p">)</span> <span class="c1">// 做链接，可以理解为把两种shader进行融合，做好投入使用的最后准备工作</span>
</span></code></pre></td></tr></table></div></figure>


<p>到此，其实shader program的准备工作已经做完了，但是如果shader编译或者链接过程出错了怎么办呢？能不能提早发现呢？当然，有办法检查一下，就是用接下来的这几句：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">GLES20</span><span class="p">.</span><span class="n">glValidateProgram</span><span class="p">(</span><span class="n">mGLProgram</span><span class="p">)</span> <span class="c1">// 让OpenGL来验证一下我们的shader program，并获取验证的状态</span>
</span><span class='line'><span class="k">val</span> <span class="py">status</span> <span class="p">=</span> <span class="n">IntArray</span><span class="p">(</span><span class="m">1</span><span class="p">)</span>
</span><span class='line'><span class="n">GLES20</span><span class="p">.</span><span class="n">glGetProgramiv</span><span class="p">(</span><span class="n">mGLProgram</span><span class="p">,</span> <span class="n">GLES20</span><span class="p">.</span><span class="n">GL_VALIDATE_STATUS</span><span class="p">,</span> <span class="n">status</span><span class="p">,</span> <span class="m">0</span><span class="p">)</span> <span class="c1">// 获取验证的状态</span>
</span><span class='line'><span class="n">Log</span><span class="p">.</span><span class="n">d</span><span class="p">(</span><span class="n">TAG</span><span class="p">,</span> <span class="s">&quot;validate shader program: &quot;</span> <span class="p">+</span> <span class="n">GLES20</span><span class="p">.</span><span class="n">glGetProgramInfoLog</span><span class="p">(</span><span class="n">mGLProgram</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果有语法错误，编译错误，或者状态出错，这一步是能够检查出来的。如果一切正常，则取出来的status[0]为0。</p>

<h3>Renderer之onSurfaceChanged</h3>

<p>此回调，会在surface发生改变时，通常是size发生变化。这里我们改变一下视角。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">GLES20</span><span class="p">.</span><span class="n">glViewport</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="n">p1</span><span class="p">,</span> <span class="n">p2</span><span class="p">)</span> <span class="c1">// 参数是left, top, width, height</span>
</span></code></pre></td></tr></table></div></figure>


<p>就是要指定OpenGL的可视区域(view port)，（0, 0）是左上角，然后是width和height。
我们目前只学习2D绘制，所以，先不管三维视角的处理。</p>

<h3>Renderer之onDrawFrame</h3>

<p>这个是最重要的方法，没有之一。前面两个，只会在surface created时调一次。而此方法是用来绘制每帧的，所以每次刷新都会被调一次，所有的绘制都发生在这里。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">GLES20</span><span class="p">.</span><span class="n">glClear</span><span class="p">(</span><span class="n">GLES20</span><span class="p">.</span><span class="n">GL_COLOR_BUFFER_BIT</span><span class="p">)</span> <span class="c1">// 清除颜色缓冲区，因为我们要开始新一帧的绘制了，所以先清理，以免有脏数据。</span>
</span><span class='line'><span class="n">GLES20</span><span class="p">.</span><span class="n">glUseProgram</span><span class="p">(</span><span class="n">mGLProgram</span><span class="p">)</span> <span class="c1">// 告诉OpenGL，使用我们在onSurfaceCreated里面准备好了的shader program来渲染</span>
</span><span class='line'><span class="n">GLES20</span><span class="p">.</span><span class="n">glDrawArrays</span><span class="p">(</span><span class="n">GLES20</span><span class="p">.</span><span class="n">GL_POINTS</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span> <span class="c1">// 开始渲染，发送渲染点的指令， 第二个参数是offset，第三个参数是点的个数。目前只有一个点，所以是1。</span>
</span></code></pre></td></tr></table></div></figure>


<h3>vertex shader</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">private</span> <span class="n">const</span> <span class="k">val</span> <span class="py">VERTEX_SHADER</span> <span class="p">=</span>
</span><span class='line'>                <span class="s">&quot;void main() {\n&quot;</span> <span class="p">+</span>
</span><span class='line'>                        <span class="s">&quot;gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\n&quot;</span> <span class="p">+</span>
</span><span class='line'>                        <span class="s">&quot;gl_PointSize = 20.0;\n&quot;</span> <span class="p">+</span>
</span><span class='line'>                        <span class="s">&quot;}\n&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>shader语言跟C语言很像，它有一个主函数，也叫void main(){}。<br/>
gl_Position是一个内置变量，用于指定顶点，它是一个点，三维空间的点，所以用一个四维向量来赋值。vec4是四维向量的类型，vec4()是它的构造方法。等等，三维空间，不是（x, y, z）三个吗？咋用vec4呢？
四维是叫做<a href="https://en.wikipedia.org/wiki/Homogeneous_coordinates">齐次坐标</a>，它的几何意义仍是三维，先了解这么多，记得对于2D的话，第四位永远传1.0就可以了。这里，是指定原点(0, 0, 0)作为顶点，就是说想在原点位置画一个点。gl_PointSize是另外一个内置变量，用于指定点的大小。<br/>
这个shader就是想在原点画一个尺寸为20的点。</p>

<h3>fragment shader</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">private</span> <span class="n">const</span> <span class="k">val</span> <span class="py">FRAGMENT_SHADER</span> <span class="p">=</span>
</span><span class='line'>                <span class="s">&quot;void main() {\n&quot;</span> <span class="p">+</span>
</span><span class='line'>                        <span class="s">&quot;gl_FragColor = vec4(1., 0., 0.0, 1.0);\n&quot;</span> <span class="p">+</span>
</span><span class='line'>                        <span class="s">&quot;}\n&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>gl_FragColor是fragment shader的内置变量，用于指定当前顶点的颜色，四个分量（r, g, b, a）。这里是想指定为红色，不透明。</p>

<h2>Fun time</h2>

<p>更改一些参数，看看会发生什么:<br/></p>

<ol>
<li>改变onSurfaceCreated中的glClearColor的颜色值</li>
<li>改变gl_Position</li>
<li>改变gl_PointSize</li>
<li>改变gl_FragColor</li>
</ol>


<h2>One more thing</h2>

<p>此系列教程会共存在同一个Android app项目里面，所以我们会随着代码的增加而进行一系列的重构，但是这与我们的主题OpenGL无关，如果是单纯学习OpenGL，可以略过此节。</p>

<p>因为，每个教程会讲解不同的点，对Activity可能有不同的需求，所以，一个教程对应着一个Activity，这样就需要一个列表来作为路由目录页面：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">HomeActivity</span> <span class="p">:</span> <span class="n">Activity</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">super</span><span class="p">.</span><span class="n">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
</span><span class='line'>        <span class="n">title</span> <span class="p">=</span> <span class="s">&quot;Learn OpenGL ES Effectively&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">verticalLayout</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">textView</span><span class="p">(</span><span class="s">&quot;Welcome to the world of OpenGL ES&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">gravity</span> <span class="p">=</span> <span class="n">Gravity</span><span class="p">.</span><span class="n">CENTER</span>
</span><span class='line'>            <span class="p">}.</span><span class="n">onClick</span> <span class="p">{</span> <span class="n">startActivity</span><span class="p">&lt;</span><span class="n">HelloPoints</span><span class="p">&gt;()</span> <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参考资料</h2>

<ul>
<li><a href="https://sites.google.com/site/webglbook/">《WebGL Programming Guide》</a> <br/>
WebGL跟OpenGL ES 2.0相差无几，可以直接参考。这本书最大好处是讲解比较清晰，层次递进，代码完整，非常适合初学者上手。</li>
<li><a href="http://opengles-book.com/es2/index.html">《OpenGL® ES 2.0 Programming Guide》</a> <br/>
这本书比较啰嗦和枯燥，它更接近于规范，非常详尽严谨的讲述，但是讲解过少，示例也少。所以，它更适合于有一定基础，想要更深入的全面的理解某一概念时看，不适合入门。<br/>
所以，这两本书加起来看效果最佳，先入门，理解基本概念，然后再通过后者全面理解，巩固加强。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[金州王朝已经建立，老詹可以就此退役]]></title>
    <link href="http://toughcoder.net/blog/2018/06/11/golden-state-worriors-rule/"/>
    <updated>2018-06-11T22:42:00+08:00</updated>
    <id>http://toughcoder.net/blog/2018/06/11/golden-state-worriors-rule</id>
    <content type="html"><![CDATA[<p>2017-18NBA赛季总决赛金州勇士气势如虹连胜四场横扫老詹带领的骑士，成功卫冕，同时也标志着一个赛季结束了。</p>

<p><a href="http://toughcoder.net/blog/2018/06/11/golden-state-worriors-rule/"><img src="http://pic-bucket.nosdn.127.net/photo/0005/2018-06-09/DJS3KU0Q4TM10005NOS.jpg"></a></p>

<!-- more -->


<p><img src="http://puep.qpic.cn/coral/Q3auHgzwzM4fgQ41VTF2rNfzNxVA5l6bgzBOnVGAhnIhHVhKDIXvlg/0/" alt="cahp2" /></p>

<h3>王朝的根基稳</h3>

<p>但是我们却能看到金州王朝已经悄然建立。跟前几年，特别是15-16赛季，勇士输掉的那一年相比，今年的勇士显示出了强大的实力，很多人都说由于杜兰特的加入，但是如果仅是两年前的队伍即使加一个阿杜，也不见得能赢下今年的西决和总决赛，还有最关键的是，现在的库里，汤神，格林和阿杜都已升级了：</p>

<ol>
<li>库里补齐了对抗</li>
</ol>


<p>三分还是那样的日天，但最明显的变化是突破内线能力大大增强，能把球上进，以及防守不再是漏洞。以前，特别是15-16赛季，每当三分不灵光的时候，突破很费劲，即使杀进去了，不是被帽就是没能上进。但是今年好很多，在西决的时候，以及总决赛可以看到突破进去以后球很少丢，都能得分。</p>

<p><img src="http://pic-bucket.nosdn.127.net/photo/0005/2018-06-09/DJRPKB2O4TM10005NOS.jpg" alt="Steph" />
2. 汤神还是那个汤神</p>

<p>绝境我佛显慈悲，每逢绝境汤神必发威。汤神无球像机器一样准。另外，汤神也越来越持球攻了。</p>

<p><img src="http://pic-bucket.nosdn.127.net/photo/0005/2018-06-04/DJEQ42V84TM10005NOS.jpg" alt="Klay" /></p>

<ol>
<li>格林更加成熟</li>
</ol>


<p>防守还是那样凶悍，但是更加成熟了，脾气能控制一些了。
<img src="http://pic-bucket.nosdn.127.net/photo/0005/2018-06-07/DJMJAUD64TM10005NOS.jpg" alt="draymon" /></p>

<ol>
<li>阿杜更擅长要位硬扛了</li>
</ol>


<p>外线还是保持着变态的命中率，突破也很犀利，但是杜兰特最大的变化是，每当球队遇到困难，外线手感不好时，就会到三秒区外维要位，然后背身打，像传统的大前锋那样进攻，由于身高优势，脚步灵活，投篮技术好，所以成功率特别高，单打基本通吃，夹击时可以选择分球。与传统大前锋：邓肯，加内特，诺维茨基等很像。这个是很重要的，因为你外线手感不可能一直好，突破由于防守也不可能总有机会，当你一切的惯用得分手段都没有效果时，内线强打往往是得分的手段。所以，成功的球队，必须要有一个像邓肯和KG那样，能在内线要位强打的球员。而目前KD做的比以前好太多了。而像火箭，为什么G7会输，三分27中0,问题不大，问题在于，你三分手感不好的时候没有一个稳定的得分点了，假如有邓肯，加内特，能内线要位背身强打的球员在，就可以让他人来打，起码能保证分差不被拉大。
<img src="http://pic-bucket.nosdn.127.net/photo/0005/2018-06-09/DJRN39IF4TM10005NOS.jpg" alt="KD" /></p>

<h3>健康是最大的敌人</h3>

<p>四大天王，都处在职业的巅峰时期，而且他们化学反应很好，格林擅长防守和助攻，KD和汤神可以无球，所以，他们不会有球权的冲突。并不是所有的球星组合最后都能成功，就好比今年的雷霆，安东尼，乔治以及威少，哪个不是全明星级别的，甚至更高，但是常规赛战线不佳 ，首轮更是被浓眉哥横扫。球星在一起，一个必要条件是每个人必须要无私，要出让球权，要有擅长防守的，以及擅长无球，还要有内线强打的。所以，你看当年凯尔特人三巨头KG，皮皮和雷阿伦，组合一年就能夺冠。勇士目前来看至少球星之间可以完好共存，就差钱了，但这不是大问题，以勇士管理层的水平，不会轻易让王朝结束，通过合理运作，解决好薪资帽，至少未来三年内，勇士都是总冠军的强有力争夺者，最重要的是球员和教练都要保持健康。</p>

<p><img src="http://pic-bucket.nosdn.127.net/photo/0005/2018-06-09/DJRVEP224TM10005NOS.jpg" alt="big4" /></p>

<p>怀念一下我凯三老，他们是输给了时间，如果可以年轻三岁，他们还能再拿两冠，三老老去，也毁了隆指导和帕金斯。</p>

<p><img src="http://i1.hoopchina.com.cn/u/1107/05/091/4157091/960f1526.jpg" alt="big3" /></p>

<h3>老詹靠运气，但也不易</h3>

<p>再说说骑士和老詹，今年的骑士也是非常的不顺当，常规赛战绩平平，经过多次交易换人，最终以东部第四进入季后赛，第一轮很惊险与步行者大战七场，最终凭着老詹的最后一口气成功晋级。然后就遇到了不争气的猛龙，常规赛东部冠军啊，哪怕你赢个一场两场的也行啊，最正常的结局应该是猛龙4：2干掉骑士，但是，人有时候要信命，德罗赞和洛瑞可能没去拜佛，竟然被老詹一口气横扫回家了，四场打的一场比一场差，最后气势都没有了就回家钓鱼去了。所以，还是像上面讲的，一个没有内线强打的球队，光靠所谓后场双枪是难以走的远的，猛龙以及西步的开拓者都是此类，另外伊巴卡也是个软蛋，愧对四少的称号。东决倒是精彩，残阵绿杉拖了七场，当然，绿杉军不可能赢的，因为当球队遇到困难是需要球星来救场的，而绿凯的两个球星都在场下只能为兄弟们加油，所以今年老詹的运气相当好，一路到总决赛，但也不易，老詹也是脱了一层皮，场场四十多分钟，倒也刷了一堆好数据，得了老汉的意。
<img src="http://pic-bucket.nosdn.127.net/photo/0005/2018-06-09/DJRT1QG04TM10005NOS.jpg" alt="lbj" />
虽然，不是特别喜欢勇士，但更重要的是喜欢老詹，靠着牛的身体，推土机式的打法，投篮姿式僵尸一样难看。16年总决赛，蓄意跨人，是的，这本是比赛的一部分，你想激怒格林，但你可以演的入戏一点嘛，余光也看得到格林倒了，你何必先看一眼，又想一下，然后 再 跨呢？当然啦，那一年，勇士一是输给了自己，球队缺少硬支撑，当水花失准时，库里突破又被严防，没有现在杜兰特之类的人能够强硬得分;二是输给了厄文。事实也证明厄文才是真大腿。</p>

<h3>国内解说档次太低</h3>

<p>还要鄙视一下解说员杨毅，在第四场第四节，勇士确实胜利之时，另外解说问杨，有什么想法时，杨非要提杜兰特投敌一事，明知道这本就会引起球迷争论，真是哪壶不开提哪壶，讨厌这个人，身为解说员要公平公正的说人话。</p>

<h3>历史会证明阿杜离开是正确的</h3>

<p><img src="http://puep.qpic.cn/coral/Q3auHgzwzM4fgQ41VTF2rNAoia9tQWSkpfNVAOoFzYVU3FJLjLiaVqyg/0/" alt="KD" /></p>

<p>杜离开雷霆是正确的选择：威少是一介草莽，有勇无谋的人，球商低，拿到球一头往篮下冲，不管几个人在堵他，也不管别人位置如何，或者直接三分就扔，靠着身体天赋能得些分。所以威少成不了大事儿，因为处理关键球的能力太次了，又不会把球给其他人。16年西决，如果关键球多给杜兰特处理，也许一切都不一样了。所以威少不是一个能够争取总冠军的帮手，另外，雷霆的管理层太次，要不然，当然四少，也不会走了三个，从雷霆出来的人后来发展的相当 的不错，包括维特斯等人。杜兰特肯定是对管理寒了心，所以才出走的，勇士的气氛和现有的基础以及未来的希望吸引了他，只不过不巧的是刚刚勇士击败了雷霆而已，就是这么不巧，让好好的一个转会，弄得球迷和媒体口水快能把阿杜淹死了。所以，杜兰特肯定会留在勇士，多拿几个总冠军，把光芒放无限大，以压住说闲话的人。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kotlin实战学习：撸一个程序猿老黄历]]></title>
    <link href="http://toughcoder.net/blog/2018/06/09/kotlin-exercise-programmer-calendar/"/>
    <updated>2018-06-09T16:10:24+08:00</updated>
    <id>http://toughcoder.net/blog/2018/06/09/kotlin-exercise-programmer-calendar</id>
    <content type="html"><![CDATA[<h2>Talk is cheap, let&rsquo;s code</h2>

<p><a href="http://toughcoder.net/blog/2018/05/17/introduction-to-kotlin-programming-language/">前面一篇文章</a>介绍Kotlin的基础知识，但光有知识是不够的，最重要的是要能在实战中使用Kotlin，这才不枉我们学习一回。这里就用纯Kotlin来开发一个简单的Android应用，以展示如何在实际项目中使用Kotlin。</p>

<p><a href="http://toughcoder.net/blog/2018/06/09/kotlin-exercise-programmer-calendar/"><img src="https://www.rootinfosol.com/sites/default/files/2017-05/Android%20kotlin%20banner.jpg" width="640"></a></p>

<h2>走上Kotlin开发之路</h2>

<p>在前面文章的尾部，我们展示了如何创建一个基于Kotlin安卓应用，但是过于简单，因为仅是代码换成了Kotlin，布局还是在用XML，这并没有用到Kotlin的全部。为了更加方便的开发Android应用，发挥Kotlin语言的巨大优势，JetBrains在发布Kotlin的同时，也发布一个专门用于Android开发的配套的库Anko，它最大的优势就是以DSL的方式来创建UI，下面我们来介绍一下Anko。</p>

<!-- more -->


<h2><a href="https://github.com/Kotlin/anko">Anko</a></h2>

<h3>Anko是什么鬼，以及为何要用它</h3>

<p>Anko库的目的是提高Android开发的效率，用Kotlin语言的优势。它有四大部分：Anko commons，Anko layouts，Anko SQLite和Anko Coroutines，这里我们不复制官方的介绍了，关于这四部分可以看一下官方的<a href="https://github.com/Kotlin/anko">wiki</a>。
其实，最大的变化就是布局，常规的Android项目，我们一般都是用XML来写布局XML呢，其实也没有啥大问题，在各种开发工具和开源库的帮忙下，效率也不低，但XML最大的问题就是啰嗦，要不然现在也不会被JSON取代。
当然，我们可以像前面的KotlinHello，显示的那样，布局使用XML，代码使用Kotlin，这没有任何问题，但Kotlin语言最大的特点是简洁，所以，使用Anko可以，非常简洁的，用更少的代码来实现同样的功能，代码少了，效率也就高了。</p>

<h3>如何使用Anko</h3>

<p>重写KotlinHello，来展示一下如何在项目中使用Anko，继续打开上篇文章中的KotlinHello项目，在app下面的build.gradle中的dependencies中添加：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">implementation</span> <span class="s">&quot;org.jetbrains.anko:anko:$anko_version&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在其顶部定义anko_version变量：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">ext</span><span class="p">.</span><span class="n">anko_version</span> <span class="p">=</span> <span class="err">&#39;</span><span class="m">0.10</span><span class="p">.</span><span class="m">5</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>重新gradle sync一下，完成后，就可以使用了。</p>

<p>编辑HelloActivity.kt，在onCreate里面，把除了super.onCreate以外的都删除，然后添加：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'>    <span class="k">val</span> <span class="py">colorTable</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span><span class="s">&quot;#ff0000&quot;</span><span class="p">,</span> <span class="s">&quot;#00ff00&quot;</span><span class="p">,</span> <span class="s">&quot;#0000ff&quot;</span><span class="p">,</span> <span class="s">&quot;#ffff00&quot;</span><span class="p">,</span> <span class="s">&quot;#00ffff&quot;</span><span class="p">,</span> <span class="s">&quot;#ff00ff&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">verticalLayout</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">name</span> <span class="p">=</span> <span class="n">editText</span><span class="p">()</span>
</span><span class='line'>        <span class="n">button</span><span class="p">(</span><span class="s">&quot;Say Hello&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">onClick</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">val</span> <span class="py">randomIndex</span> <span class="p">=</span> <span class="p">(</span><span class="n">Math</span><span class="p">.</span><span class="n">random</span><span class="p">()</span> <span class="p">*</span> <span class="n">colorTable</span><span class="p">.</span><span class="n">size</span><span class="p">).</span><span class="n">toInt</span><span class="p">()</span>
</span><span class='line'>                <span class="n">setBackgroundColor</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">parseColor</span><span class="p">(</span><span class="n">colorTable</span><span class="p">[</span><span class="n">randomIndex</span><span class="p">]))</span>
</span><span class='line'>                <span class="n">toast</span><span class="p">(</span><span class="s">&quot;Hello, ${name.text}! with color ${colorTable[randomIndex]}&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行起来，就是这个样子的：</p>

<p><img src="https://wx3.sinaimg.cn/mw690/870ad0baly1fs57e1fmtpg20a00k0dgi.gif" alt="Kotlin Hello version 1" /></p>

<p>页面有点丑，稍美化下，展示如何添加布局的属性：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'>        <span class="n">padding</span> <span class="p">=</span> <span class="n">dip</span><span class="p">(</span><span class="m">20</span><span class="p">)</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">name</span> <span class="p">=</span> <span class="n">editText</span><span class="p">()</span>
</span><span class='line'>        <span class="n">name</span><span class="p">.</span><span class="n">lparams</span><span class="p">(</span><span class="n">width</span> <span class="p">=</span> <span class="n">matchParent</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">topMargin</span> <span class="p">=</span> <span class="n">dip</span><span class="p">(</span><span class="m">20</span><span class="p">)</span>
</span><span class='line'>            <span class="n">bottomMargin</span> <span class="p">=</span> <span class="n">dip</span><span class="p">(</span><span class="m">30</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最终就是这个样子了：</p>

<p><img src="https://wx4.sinaimg.cn/mw690/870ad0baly1fs57e1foj9g20a00k0js2.gif" alt="Kotlin Hello version 2" /></p>

<p>贴下完整代码：
app/build.gradle:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">apply</span> <span class="n">plugin</span><span class="p">:</span> <span class="err">&#39;</span><span class="n">com</span><span class="p">.</span><span class="n">android</span><span class="p">.</span><span class="n">application</span><span class="err">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">apply</span> <span class="n">plugin</span><span class="p">:</span> <span class="err">&#39;</span><span class="n">kotlin</span><span class="p">-</span><span class="n">android</span><span class="err">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">apply</span> <span class="n">plugin</span><span class="p">:</span> <span class="err">&#39;</span><span class="n">kotlin</span><span class="p">-</span><span class="n">android</span><span class="p">-</span><span class="n">extensions</span><span class="err">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">ext</span><span class="p">.</span><span class="n">anko_version</span> <span class="p">=</span> <span class="err">&#39;</span><span class="m">0.10</span><span class="p">.</span><span class="m">5</span><span class="err">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">android</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">compileSdkVersion</span> <span class="m">27</span>
</span><span class='line'>    <span class="n">defaultConfig</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">applicationId</span> <span class="s">&quot;net.toughcoder.kotlinhello&quot;</span>
</span><span class='line'>        <span class="n">minSdkVersion</span> <span class="m">21</span>
</span><span class='line'>        <span class="n">targetSdkVersion</span> <span class="m">27</span>
</span><span class='line'>        <span class="n">versionCode</span> <span class="m">1</span>
</span><span class='line'>        <span class="n">versionName</span> <span class="s">&quot;1.0&quot;</span>
</span><span class='line'>        <span class="n">testInstrumentationRunner</span> <span class="s">&quot;android.support.test.runner.AndroidJUnitRunner&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">buildTypes</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">release</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">minifyEnabled</span> <span class="k">false</span>
</span><span class='line'>            <span class="n">proguardFiles</span> <span class="n">getDefaultProguardFile</span><span class="p">(</span><span class="err">&#39;</span><span class="n">proguard</span><span class="p">-</span><span class="n">android</span><span class="p">.</span><span class="n">txt</span><span class="err">&#39;</span><span class="p">),</span> <span class="err">&#39;</span><span class="n">proguard</span><span class="p">-</span><span class="n">rules</span><span class="p">.</span><span class="n">pro</span><span class="err">&#39;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">dependencies</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">implementation</span> <span class="n">fileTree</span><span class="p">(</span><span class="n">dir</span><span class="p">:</span> <span class="err">&#39;</span><span class="n">libs</span><span class="err">&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">:</span> <span class="p">[</span><span class="err">&#39;</span><span class="p">*.</span><span class="n">jar</span><span class="err">&#39;</span><span class="p">])</span>
</span><span class='line'>    <span class="n">implementation</span><span class="s">&quot;org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version&quot;</span>
</span><span class='line'>    <span class="n">implementation</span> <span class="err">&#39;</span><span class="n">com</span><span class="p">.</span><span class="n">android</span><span class="p">.</span><span class="n">support</span><span class="p">:</span><span class="n">appcompat</span><span class="p">-</span><span class="n">v7</span><span class="p">:</span><span class="m">27.1</span><span class="p">.</span><span class="m">1</span><span class="err">&#39;</span>
</span><span class='line'>    <span class="n">implementation</span> <span class="err">&#39;</span><span class="n">com</span><span class="p">.</span><span class="n">android</span><span class="p">.</span><span class="n">support</span><span class="p">.</span><span class="n">constraint</span><span class="p">:</span><span class="n">constraint</span><span class="p">-</span><span class="n">layout</span><span class="p">:</span><span class="m">1.1</span><span class="p">.</span><span class="m">0</span><span class="err">&#39;</span>
</span><span class='line'>    <span class="n">implementation</span> <span class="s">&quot;org.jetbrains.anko:anko:$anko_version&quot;</span>
</span><span class='line'>    <span class="n">testImplementation</span> <span class="err">&#39;</span><span class="n">junit</span><span class="p">:</span><span class="n">junit</span><span class="p">:</span><span class="m">4.12</span><span class="err">&#39;</span>
</span><span class='line'>    <span class="n">androidTestImplementation</span> <span class="err">&#39;</span><span class="n">com</span><span class="p">.</span><span class="n">android</span><span class="p">.</span><span class="n">support</span><span class="p">.</span><span class="n">test</span><span class="p">:</span><span class="n">runner</span><span class="p">:</span><span class="m">1.0</span><span class="p">.</span><span class="m">2</span><span class="err">&#39;</span>
</span><span class='line'>    <span class="n">androidTestImplementation</span> <span class="err">&#39;</span><span class="n">com</span><span class="p">.</span><span class="n">android</span><span class="p">.</span><span class="n">support</span><span class="p">.</span><span class="n">test</span><span class="p">.</span><span class="n">espresso</span><span class="p">:</span><span class="n">espresso</span><span class="p">-</span><span class="n">core</span><span class="p">:</span><span class="m">3.0</span><span class="p">.</span><span class="m">2</span><span class="err">&#39;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>HelloActivity.kt:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">HelloActivity</span> <span class="p">:</span> <span class="n">AppCompatActivity</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">super</span><span class="p">.</span><span class="n">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="py">colorTable</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span><span class="s">&quot;#ff0000&quot;</span><span class="p">,</span> <span class="s">&quot;#00ff00&quot;</span><span class="p">,</span> <span class="s">&quot;#0000ff&quot;</span><span class="p">,</span> <span class="s">&quot;#ffff00&quot;</span><span class="p">,</span> <span class="s">&quot;#00ffff&quot;</span><span class="p">,</span> <span class="s">&quot;#ff00ff&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">verticalLayout</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">padding</span> <span class="p">=</span> <span class="n">dip</span><span class="p">(</span><span class="m">20</span><span class="p">)</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">name</span> <span class="p">=</span> <span class="n">editText</span><span class="p">()</span>
</span><span class='line'>            <span class="n">name</span><span class="p">.</span><span class="n">lparams</span><span class="p">(</span><span class="n">width</span> <span class="p">=</span> <span class="n">matchParent</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">topMargin</span> <span class="p">=</span> <span class="n">dip</span><span class="p">(</span><span class="m">20</span><span class="p">)</span>
</span><span class='line'>                <span class="n">bottomMargin</span> <span class="p">=</span> <span class="n">dip</span><span class="p">(</span><span class="m">30</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">button</span><span class="p">(</span><span class="s">&quot;Say Hello&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">onClick</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">val</span> <span class="py">randomIndex</span> <span class="p">=</span> <span class="p">(</span><span class="n">Math</span><span class="p">.</span><span class="n">random</span><span class="p">()</span> <span class="p">*</span> <span class="n">colorTable</span><span class="p">.</span><span class="n">size</span><span class="p">).</span><span class="n">toInt</span><span class="p">()</span>
</span><span class='line'>                    <span class="n">setBackgroundColor</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">parseColor</span><span class="p">(</span><span class="n">colorTable</span><span class="p">[</span><span class="n">randomIndex</span><span class="p">]))</span>
</span><span class='line'>                    <span class="n">toast</span><span class="p">(</span><span class="s">&quot;Hello, ${name.text}! with color ${colorTable[randomIndex]}&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>实战，撸一个程序猿老黄历</h2>

<p>一个KotlinHello，还是过于toy，我们再来一个稍复杂点的小项目，以练手，考虑到Kotlin带来最大变化就是用Anko来写布局，所以我们弄个布局稍复杂的，所以，可以撸一个程序猿老黄历，它功能比较简单，主要就是布局，又不涉及网络，所以适合初学者练手。</p>

<h3>需求理解</h3>

<p>动手之前，先理解一下需求。我们要撸的是这个版本的<a href="http://sandbox.runjs.cn/show/ydp3it7b/">程序员老黄历</a>。
原理呢很简单，预定义一些事件，工具，饮品，方位等，然后用当前日期算出一个随机index，从预定义中取出一批，然后展示出来。其实呢，对于逻辑部分的代码，我们照抄就好，不用太关心。重点，是布局如何用Anko来实现。</p>

<h3>上手开撸</h3>

<ol>
<li>新建一个package: calendar</li>
</ol>


<p><img src="https://wx4.sinaimg.cn/mw690/870ad0baly1fs57e1j897j20wb0e0q6f.jpg" alt="create package calendar" /></p>

<ol>
<li>在calendar中新建一个empty activity: CalendarActivity</li>
</ol>


<p><img src="https://wx4.sinaimg.cn/mw690/870ad0baly1fs57e1g2rbj20mc0ix75e.jpg" alt="create calendar activity" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">CalendarActivity</span> <span class="p">:</span> <span class="n">AppCompatActivity</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">super</span><span class="p">.</span><span class="n">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
</span><span class='line'>        <span class="n">title</span> <span class="p">=</span> <span class="s">&quot;Programmer Calendar&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>点击KotlinHello中的button时，跳到CalendarActivity</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">onClick</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// other codes</span>
</span><span class='line'>    <span class="n">startActivity</span><span class="p">&lt;</span><span class="n">CalendarActivity</span><span class="p">&gt;()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>开始撸布局
整体布局分五块：头部的日期，宜事抬头，宜事详细，坏事抬头，坏事详细，底部方向和指数。这其中，头部日期，可以用一个TextView来解决。宜和坏，是一样的，可以复用，宜（坏）事详细是一个列表，底部也是一个列表，但因为数目和每条内容是固定的，所以可以用三个View来解决。</li>
</ol>


<p>总结：</p>

<ol>
<li>根布局要是一个ScrollView，因为如果内容多时，或者屏幕太小时，可能会有超出屏幕的地方，所以根布局要能滑动。</li>
<li>中间好/坏， 以及好坏的具体事件，要用一个LinearLayout把两个包起来，因为好/坏的高度是由具体事件决定的，又要填充背景色，所以包上一层LinearLayout不可避免。</li>
<li>这样一来，从上到下，一个LinearLayout就可以了</li>
</ol>


<h3>运行效果</h3>

<p>最终运行效果：</p>

<p><img src="https://wx1.sinaimg.cn/mw690/870ad0baly1fs57e1i18vj20u01o0adk.jpg" height="720" width="360" alt="Final result of programmer calendar" /></p>

<h3>最终代码</h3>

<p>CalendarActivity，负责布局和展示</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">CalendarActivity</span> <span class="p">:</span> <span class="n">AppCompatActivity</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">super</span><span class="p">.</span><span class="n">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
</span><span class='line'>        <span class="n">title</span> <span class="p">=</span> <span class="s">&quot;程序猿老黄历&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="py">calendar</span> <span class="p">=</span> <span class="n">ProgrammerCalendar</span><span class="p">()</span>
</span><span class='line'>        <span class="n">scrollView</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">verticalLayout</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">val</span> <span class="py">dateString</span> <span class="p">=</span> <span class="n">buildSpanned</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">append</span><span class="p">(</span><span class="n">calendar</span><span class="p">.</span><span class="n">genTodayString</span><span class="p">(),</span> <span class="n">Bold</span><span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">val</span> <span class="py">dateLabel</span> <span class="p">=</span> <span class="n">textView</span><span class="p">(</span><span class="n">dateString</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">id</span> <span class="p">=</span> <span class="n">View</span><span class="p">.</span><span class="n">generateViewId</span><span class="p">()</span>
</span><span class='line'>                    <span class="n">textColor</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">BLACK</span>
</span><span class='line'>                    <span class="n">textSize</span> <span class="p">=</span> <span class="n">sp</span><span class="p">(</span><span class="m">6.4f</span><span class="p">).</span><span class="n">toFloat</span><span class="p">()</span>
</span><span class='line'>                    <span class="n">singleLine</span> <span class="p">=</span> <span class="k">true</span>
</span><span class='line'>                    <span class="n">textAlignment</span> <span class="p">=</span> <span class="n">View</span><span class="p">.</span><span class="n">TEXT_ALIGNMENT_CENTER</span>
</span><span class='line'>                <span class="p">}.</span><span class="n">lparams</span><span class="p">(</span><span class="n">width</span> <span class="p">=</span> <span class="n">matchParent</span><span class="p">,</span> <span class="n">height</span> <span class="p">=</span> <span class="n">wrapContent</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">topMargin</span> <span class="p">=</span> <span class="n">dip</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">bottomMargin</span> <span class="p">=</span> <span class="n">dip</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">val</span> <span class="err">(</span><span class="py">goodList</span><span class="p">,</span> <span class="n">badList</span><span class="p">)</span> <span class="p">=</span> <span class="n">calendar</span><span class="p">.</span><span class="n">genTodayLuck</span><span class="p">()</span>
</span><span class='line'>                <span class="n">generateLuck</span><span class="p">(</span><span class="s">&quot;宜&quot;</span><span class="p">,</span> <span class="n">Color</span><span class="p">.</span><span class="n">parseColor</span><span class="p">(</span><span class="s">&quot;#ffee44&quot;</span><span class="p">),</span> <span class="n">Color</span><span class="p">.</span><span class="n">parseColor</span><span class="p">(</span><span class="s">&quot;#dddddd&quot;</span><span class="p">),</span> <span class="n">goodList</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">generateLuck</span><span class="p">(</span><span class="s">&quot;忌&quot;</span><span class="p">,</span> <span class="n">Color</span><span class="p">.</span><span class="n">parseColor</span><span class="p">(</span><span class="s">&quot;#ff4444&quot;</span><span class="p">),</span> <span class="n">Color</span><span class="p">.</span><span class="n">parseColor</span><span class="p">(</span><span class="s">&quot;#aaaaaa&quot;</span><span class="p">),</span> <span class="n">badList</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// Direction</span>
</span><span class='line'>                <span class="k">val</span> <span class="py">directionDetail</span> <span class="p">=</span> <span class="n">buildSpanned</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">append</span><span class="p">(</span><span class="s">&quot;座位朝向：&quot;</span><span class="p">,</span> <span class="n">Bold</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">append</span><span class="p">(</span><span class="s">&quot;面向&quot;</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">append</span><span class="p">(</span><span class="n">calendar</span><span class="p">.</span><span class="n">genDirection</span><span class="p">(),</span> <span class="n">foregroundColor</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">GREEN</span><span class="p">))</span>
</span><span class='line'>                    <span class="n">append</span><span class="p">(</span><span class="s">&quot;写程序，BUG最少。&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">val</span> <span class="py">direction</span> <span class="p">=</span> <span class="n">extraLabel</span><span class="p">(</span><span class="n">directionDetail</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// Drink</span>
</span><span class='line'>                <span class="k">val</span> <span class="py">drinkDetail</span> <span class="p">=</span> <span class="n">buildSpanned</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">append</span><span class="p">(</span><span class="s">&quot;今日饮品：&quot;</span><span class="p">,</span> <span class="n">Bold</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">append</span><span class="p">(</span><span class="n">calendar</span><span class="p">.</span><span class="n">genDrinks</span><span class="p">())</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">val</span> <span class="py">drink</span> <span class="p">=</span> <span class="n">extraLabel</span><span class="p">(</span><span class="n">drinkDetail</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">val</span> <span class="py">girlDetail</span> <span class="p">=</span> <span class="n">buildSpanned</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">append</span><span class="p">(</span><span class="s">&quot;女神亲近指数：&quot;</span><span class="p">,</span> <span class="n">Bold</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">append</span><span class="p">(</span><span class="n">calendar</span><span class="p">.</span><span class="n">genGirlsIndex</span><span class="p">())</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">val</span> <span class="py">girl</span> <span class="p">=</span> <span class="n">extraLabel</span><span class="p">(</span><span class="n">girlDetail</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">fun</span> <span class="nf">@AnkoViewDslMarker</span> <span class="n">_LinearLayout</span><span class="p">.</span><span class="n">extraLabel</span><span class="p">(</span><span class="n">detail</span><span class="p">:</span> <span class="n">CharSequence</span><span class="p">):</span> <span class="n">TextView</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">textView</span><span class="p">(</span><span class="n">detail</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">textSize</span> <span class="p">=</span> <span class="n">sp</span><span class="p">(</span><span class="m">5</span><span class="p">).</span><span class="n">toFloat</span><span class="p">()</span>
</span><span class='line'>            <span class="n">horizontalPadding</span> <span class="p">=</span> <span class="n">dip</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>
</span><span class='line'>            <span class="n">verticalPadding</span> <span class="p">=</span> <span class="n">dip</span><span class="p">(</span><span class="m">6</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">fun</span> <span class="nf">@AnkoViewDslMarker</span> <span class="n">_LinearLayout</span><span class="p">.</span><span class="n">generateLuck</span><span class="p">(</span><span class="k">type</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'>                                                              <span class="n">typeColor</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span>
</span><span class='line'>                                                              <span class="n">detailColor</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span>
</span><span class='line'>                                                              <span class="n">eventList</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="p">&gt;&gt;)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">linearLayout</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">orientation</span> <span class="p">=</span> <span class="n">LinearLayout</span><span class="p">.</span><span class="n">HORIZONTAL</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">val</span> <span class="py">good</span> <span class="p">=</span> <span class="n">textView</span><span class="p">(</span><span class="k">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">id</span> <span class="p">=</span> <span class="n">View</span><span class="p">.</span><span class="n">generateViewId</span><span class="p">()</span>
</span><span class='line'>                <span class="n">textColor</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">WHITE</span>
</span><span class='line'>                <span class="n">textSize</span> <span class="p">=</span> <span class="n">sp</span><span class="p">(</span><span class="m">14</span><span class="p">).</span><span class="n">toFloat</span><span class="p">()</span>
</span><span class='line'>                <span class="n">textAlignment</span> <span class="p">=</span> <span class="n">View</span><span class="p">.</span><span class="n">TEXT_ALIGNMENT_CENTER</span>
</span><span class='line'>                <span class="n">gravity</span> <span class="p">=</span> <span class="n">Gravity</span><span class="p">.</span><span class="n">CENTER</span>
</span><span class='line'>                <span class="n">backgroundColor</span> <span class="p">=</span> <span class="n">typeColor</span>
</span><span class='line'>            <span class="p">}.</span><span class="n">lparams</span><span class="p">(</span><span class="n">width</span> <span class="p">=</span> <span class="n">dip</span><span class="p">(</span><span class="m">100</span><span class="p">),</span> <span class="n">height</span> <span class="p">=</span> <span class="n">matchParent</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">val</span> <span class="py">goodDetail</span> <span class="p">=</span> <span class="n">verticalLayout</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">id</span> <span class="p">=</span> <span class="n">View</span><span class="p">.</span><span class="n">generateViewId</span><span class="p">()</span>
</span><span class='line'>                <span class="n">eventList</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">val</span> <span class="py">caption</span> <span class="p">=</span> <span class="n">textView</span><span class="p">(</span><span class="n">it</span><span class="p">[</span><span class="n">ProgrammerCalendar</span><span class="p">.</span><span class="n">NAME</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">textColor</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">BLACK</span>
</span><span class='line'>                        <span class="n">textSize</span> <span class="p">=</span> <span class="n">sp</span><span class="p">(</span><span class="m">6</span><span class="p">).</span><span class="n">toFloat</span><span class="p">()</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="k">val</span> <span class="py">detail</span> <span class="p">=</span> <span class="n">textView</span><span class="p">(</span><span class="n">it</span><span class="p">[</span><span class="n">ProgrammerCalendar</span><span class="p">.</span><span class="n">DESCRIPTION</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">textColor</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">GRAY</span>
</span><span class='line'>                        <span class="n">textSize</span> <span class="p">=</span> <span class="n">sp</span><span class="p">(</span><span class="m">5</span><span class="p">).</span><span class="n">toFloat</span><span class="p">()</span>
</span><span class='line'>                        <span class="n">horizontalPadding</span> <span class="p">=</span> <span class="n">dip</span><span class="p">(</span><span class="m">2</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="n">horizontalPadding</span> <span class="p">=</span> <span class="n">dip</span><span class="p">(</span><span class="m">15</span><span class="p">)</span>
</span><span class='line'>                <span class="n">backgroundColor</span> <span class="p">=</span> <span class="n">detailColor</span>
</span><span class='line'>                <span class="n">verticalPadding</span> <span class="p">=</span> <span class="n">dip</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}.</span><span class="n">lparams</span><span class="p">(</span><span class="n">width</span> <span class="p">=</span> <span class="n">matchParent</span><span class="p">,</span> <span class="n">height</span> <span class="p">=</span> <span class="n">wrapContent</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ProgrammerCalendar，这里是业务逻辑</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">ProgrammerCalendar</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">companion</span> <span class="k">object</span> <span class="nc">EventKey</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">const</span> <span class="k">val</span> <span class="py">NAME</span> <span class="p">=</span> <span class="s">&quot;name&quot;</span>
</span><span class='line'>        <span class="n">const</span> <span class="k">val</span> <span class="py">GOOD</span> <span class="p">=</span> <span class="s">&quot;good&quot;</span>
</span><span class='line'>        <span class="n">const</span> <span class="k">val</span> <span class="py">BAD</span> <span class="p">=</span> <span class="s">&quot;bad&quot;</span>
</span><span class='line'>        <span class="n">const</span> <span class="k">val</span> <span class="py">WEEKEND</span> <span class="p">=</span> <span class="s">&quot;weekend&quot;</span>
</span><span class='line'>        <span class="n">const</span> <span class="k">val</span> <span class="py">DATE</span> <span class="p">=</span> <span class="s">&quot;date&quot;</span>
</span><span class='line'>        <span class="n">const</span> <span class="k">val</span> <span class="py">TYPE</span> <span class="p">=</span> <span class="s">&quot;type&quot;</span>
</span><span class='line'>        <span class="n">const</span> <span class="k">val</span> <span class="py">DESCRIPTION</span> <span class="p">=</span> <span class="s">&quot;description&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">weeks</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span> <span class="s">&quot;日&quot;</span><span class="p">,</span> <span class="s">&quot;一&quot;</span><span class="p">,</span> <span class="s">&quot;二&quot;</span><span class="p">,</span> <span class="s">&quot;三&quot;</span><span class="p">,</span> <span class="s">&quot;四&quot;</span><span class="p">,</span> <span class="s">&quot;五&quot;</span><span class="p">,</span> <span class="s">&quot;六&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">directions</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span><span class="s">&quot;北方&quot;</span><span class="p">,</span> <span class="s">&quot;东北方&quot;</span><span class="p">,</span> <span class="s">&quot;东方&quot;</span><span class="p">,</span> <span class="s">&quot;东南方&quot;</span><span class="p">,</span> <span class="s">&quot;南方&quot;</span><span class="p">,</span> <span class="s">&quot;西南方&quot;</span><span class="p">,</span> <span class="s">&quot;西方&quot;</span><span class="p">,</span> <span class="s">&quot;西北方&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">activities</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;写单元测试&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;写单元测试将减少出错&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;写单元测试会降低你的开发效率&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;洗澡&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;你几天没洗澡了？&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;会把设计方面的灵感洗掉&quot;</span><span class="p">,</span> <span class="n">WEEKEND</span> <span class="n">to</span> <span class="s">&quot;true&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;锻炼一下身体&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;能量没消耗多少，吃得却更多&quot;</span><span class="p">,</span> <span class="n">WEEKEND</span> <span class="n">to</span> <span class="s">&quot;true&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;抽烟&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;抽烟有利于提神，增加思维敏捷&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;除非你活够了，死得早点没关系&quot;</span><span class="p">,</span> <span class="n">WEEKEND</span> <span class="n">to</span> <span class="s">&quot;true&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;白天上线&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;今天白天上线是安全的&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;可能导致灾难性后果&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;重构&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;代码质量得到提高&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;你很有可能会陷入泥潭&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;使用%t&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;你看起来更有品位&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;别人会觉得你在装逼&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;跳槽&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;该放手时就放手&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;鉴于当前的经济形势，你的下一份工作未必比现在强&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;招人&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;你面前这位有成为牛人的潜质&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;这人会写程序吗？&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;面试&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;面试官今天心情Xiao很好&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;面试官不爽，会拿你出气&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;提交辞职申请&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;公司找到了一个比你更能干更便宜的家伙，巴不得你赶快滚蛋&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;鉴于当前的经济形势，你的下一份工作未必比现在强&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;申请加薪&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;老板今天心情很好&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;公司正在考虑裁员&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;晚上加班&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;晚上是程序员精神最好的时候&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;&quot;</span><span class="p">,</span> <span class="n">WEEKEND</span> <span class="n">to</span> <span class="s">&quot;true&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;在妹子面前吹牛&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;改善你矮穷挫的形象&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;会被识破&quot;</span><span class="p">,</span> <span class="n">WEEKEND</span> <span class="n">to</span> <span class="s">&quot;true&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;撸管&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;避免缓冲区溢出&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;强撸灰飞烟灭&quot;</span><span class="p">,</span> <span class="n">WEEKEND</span> <span class="n">to</span> <span class="s">&quot;true&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;浏览成人网站&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;重拾对生活的信心&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;你会心神不宁&quot;</span><span class="p">,</span> <span class="n">WEEKEND</span> <span class="n">to</span> <span class="s">&quot;true&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;命名变量\&quot;%v\&quot;&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;写超过%l行的方法&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;你的代码组织的很好，长一点没关系&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;你的代码将混乱不堪，你自己都看不懂&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;提交代码&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;遇到冲突的几率是最低的&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;你遇到的一大堆冲突会让你觉得自己是不是时间穿越了&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;代码复审&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;发现重要问题的几率大大增加&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;你什么问题都发现不了，白白浪费时间&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;开会&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;写代码之余放松一下打个盹，有益健康&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;小心被扣屎盆子背黑锅&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;打DOTA&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;你将有如神助&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;你会被虐的很惨&quot;</span><span class="p">,</span> <span class="n">WEEKEND</span> <span class="n">to</span> <span class="s">&quot;true&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;晚上上线&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;晚上是程序员精神最好的时候&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;你白天已经筋疲力尽了&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;修复BUG&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;你今天对BUG的嗅觉大大提高&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;新产生的BUG将比修复的更多&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;设计评审&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;设计评审会议将变成头脑风暴&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;人人筋疲力尽，评审就这么过了&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;需求评审&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;上微博&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;今天发生的事不能错过&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;今天的微博充满负能量&quot;</span><span class="p">,</span> <span class="n">WEEKEND</span> <span class="n">to</span> <span class="s">&quot;true&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;上AB站&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;还需要理由吗？&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;满屏兄贵亮瞎你的眼&quot;</span><span class="p">,</span> <span class="n">WEEKEND</span> <span class="n">to</span> <span class="s">&quot;true&quot;</span><span class="p">),</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;玩FlappyBird&quot;</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="s">&quot;今天破纪录的几率很高&quot;</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="s">&quot;除非你想玩到把手机砸了&quot;</span><span class="p">,</span> <span class="n">WEEKEND</span> <span class="n">to</span> <span class="s">&quot;true&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">specials</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span>
</span><span class='line'>            <span class="n">mapOf</span><span class="p">(</span><span class="n">DATE</span> <span class="n">to</span> <span class="s">&quot;20140214&quot;</span><span class="p">,</span> <span class="n">TYPE</span> <span class="n">to</span> <span class="s">&quot;BAD&quot;</span><span class="p">,</span> <span class="n">NAME</span> <span class="n">to</span> <span class="s">&quot;待在男（女）友身边&quot;</span><span class="p">,</span> <span class="n">DESCRIPTION</span> <span class="n">to</span> <span class="s">&quot;脱团火葬场，入团保平安。&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">tools</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span><span class="s">&quot;Eclipse写程序&quot;</span><span class="p">,</span> <span class="s">&quot;MSOffice写文档&quot;</span><span class="p">,</span> <span class="s">&quot;记事本写程序&quot;</span><span class="p">,</span> <span class="s">&quot;Windows8&quot;</span><span class="p">,</span> <span class="s">&quot;Linux&quot;</span><span class="p">,</span> <span class="s">&quot;MacOS&quot;</span><span class="p">,</span> <span class="s">&quot;IE&quot;</span><span class="p">,</span> <span class="s">&quot;Android设备&quot;</span><span class="p">,</span> <span class="s">&quot;iOS设备&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">varNames</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span><span class="s">&quot;jieguo&quot;</span><span class="p">,</span> <span class="s">&quot;huodong&quot;</span><span class="p">,</span> <span class="s">&quot;pay&quot;</span><span class="p">,</span> <span class="s">&quot;expire&quot;</span><span class="p">,</span> <span class="s">&quot;zhangdan&quot;</span><span class="p">,</span> <span class="s">&quot;every&quot;</span><span class="p">,</span> <span class="s">&quot;free&quot;</span><span class="p">,</span> <span class="s">&quot;i1&quot;</span><span class="p">,</span> <span class="s">&quot;a&quot;</span><span class="p">,</span> <span class="s">&quot;virtual&quot;</span><span class="p">,</span> <span class="s">&quot;ad&quot;</span><span class="p">,</span> <span class="s">&quot;spider&quot;</span><span class="p">,</span> <span class="s">&quot;mima&quot;</span><span class="p">,</span> <span class="s">&quot;pass&quot;</span><span class="p">,</span> <span class="s">&quot;ui&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">drinks</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span><span class="s">&quot;水&quot;</span><span class="p">,</span> <span class="s">&quot;茶&quot;</span><span class="p">,</span> <span class="s">&quot;红茶&quot;</span><span class="p">,</span> <span class="s">&quot;绿茶&quot;</span><span class="p">,</span> <span class="s">&quot;咖啡&quot;</span><span class="p">,</span> <span class="s">&quot;奶茶&quot;</span><span class="p">,</span> <span class="s">&quot;可乐&quot;</span><span class="p">,</span> <span class="s">&quot;鲜奶&quot;</span><span class="p">,</span> <span class="s">&quot;豆奶&quot;</span><span class="p">,</span> <span class="s">&quot;果汁&quot;</span><span class="p">,</span> <span class="s">&quot;果味汽水&quot;</span><span class="p">,</span> <span class="s">&quot;苏打水&quot;</span><span class="p">,</span> <span class="s">&quot;运动饮料&quot;</span><span class="p">,</span> <span class="s">&quot;酸奶&quot;</span><span class="p">,</span> <span class="s">&quot;酒&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">today</span> <span class="p">=</span> <span class="n">GregorianCalendar</span><span class="p">()</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="py">iday</span> <span class="p">=</span> <span class="n">today</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="n">Calendar</span><span class="p">.</span><span class="n">YEAR</span><span class="p">)</span> <span class="p">*</span> <span class="m">10000</span> <span class="p">+</span> <span class="p">(</span><span class="n">today</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="n">Calendar</span><span class="p">.</span><span class="n">MONTH</span><span class="p">)</span> <span class="p">+</span> <span class="m">1</span><span class="p">)</span> <span class="p">*</span> <span class="m">100</span> <span class="p">+</span> <span class="n">today</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="n">Calendar</span><span class="p">.</span><span class="n">DAY_OF_MONTH</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">fun</span> <span class="nf">random</span><span class="p">(</span><span class="n">seed</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">index</span><span class="p">:</span> <span class="n">Int</span><span class="p">):</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">var</span> <span class="py">n</span> <span class="p">=</span> <span class="n">seed</span> <span class="p">%</span> <span class="m">11117</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="k">in</span> <span class="m">0</span> <span class="n">until</span> <span class="m">100</span><span class="p">+</span><span class="n">index</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">n</span> <span class="p">*=</span> <span class="n">n</span>
</span><span class='line'>            <span class="n">n</span> <span class="p">%=</span> <span class="m">11117</span>   <span class="c1">// 11117 是个质数</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">n</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">fun</span> <span class="nf">isSomeday</span><span class="p">():</span> <span class="n">Boolean</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">today</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="n">Calendar</span><span class="p">.</span><span class="n">MONTH</span><span class="p">)</span> <span class="p">==</span> <span class="m">5</span> <span class="p">&amp;&amp;</span> <span class="n">today</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="n">Calendar</span><span class="p">.</span><span class="n">DAY_OF_MONTH</span><span class="p">)</span> <span class="p">==</span> <span class="m">4</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">fun</span> <span class="nf">star</span><span class="p">(</span><span class="n">num</span><span class="p">:</span> <span class="n">Int</span><span class="p">):</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">var</span> <span class="py">result</span> <span class="p">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>        <span class="k">var</span> <span class="py">i</span> <span class="p">=</span> <span class="m">0</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="p">&lt;</span> <span class="n">num</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">result</span> <span class="p">+=</span> <span class="s">&quot;★&quot;</span>
</span><span class='line'>            <span class="n">i</span><span class="p">++</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">while</span><span class="p">(</span><span class="n">i</span> <span class="p">&lt;</span> <span class="m">5</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">result</span> <span class="p">+=</span> <span class="s">&quot;☆&quot;</span>
</span><span class='line'>            <span class="n">i</span><span class="p">++</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">fun</span> <span class="nf">isWeekend</span><span class="p">():</span> <span class="n">Boolean</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">today</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="n">Calendar</span><span class="p">.</span><span class="n">DAY_OF_WEEK</span><span class="p">)</span> <span class="p">==</span> <span class="m">0</span> <span class="p">||</span> <span class="n">today</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="n">Calendar</span><span class="p">.</span><span class="n">DAY_OF_WEEK</span><span class="p">)</span> <span class="p">==</span> <span class="m">6</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 从 activities 中随机挑选 size 个</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">fun</span> <span class="nf">pickRandomActivity</span><span class="p">(</span><span class="n">activities</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="p">&gt;&gt;,</span> <span class="n">size</span><span class="p">:</span> <span class="n">Int</span><span class="p">):</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="p">&gt;&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">pickedEvents</span> <span class="p">=</span> <span class="n">activities</span><span class="p">.</span><span class="n">pickRandom</span><span class="p">(</span><span class="n">size</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">pickedEvents</span><span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">parse</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 从数组中随机挑选 size 个</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">fun</span> <span class="err">&lt;</span><span class="nf">T</span><span class="p">&gt;</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;.</span><span class="n">pickRandom</span><span class="p">(</span><span class="n">size</span><span class="p">:</span> <span class="n">Int</span><span class="p">):</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">var</span> <span class="py">result</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">toMutableList</span><span class="p">()</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="k">in</span> <span class="m">0</span> <span class="n">until</span> <span class="k">this</span><span class="p">.</span><span class="n">size</span> <span class="p">-</span> <span class="n">size</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">index</span> <span class="p">=</span> <span class="n">random</span><span class="p">(</span><span class="n">iday</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span> <span class="p">%</span> <span class="n">result</span><span class="p">.</span><span class="n">size</span>
</span><span class='line'>            <span class="n">result</span><span class="p">.</span><span class="n">removeAt</span><span class="p">(</span><span class="n">index</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 解析占位符并替换成随机内容</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">fun</span> <span class="nf">parse</span><span class="p">(</span><span class="n">event</span><span class="p">:</span> <span class="n">Map</span><span class="p">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="p">&gt;):</span> <span class="n">Map</span><span class="p">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">var</span> <span class="py">result</span> <span class="p">=</span> <span class="n">event</span><span class="p">.</span><span class="n">toMutableMap</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="p">[</span><span class="n">NAME</span><span class="p">]</span><span class="o">?.</span><span class="n">indexOf</span><span class="p">(</span><span class="s">&quot;%v&quot;</span><span class="p">)</span> <span class="p">!=</span> <span class="p">-</span><span class="m">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">result</span><span class="p">[</span><span class="n">NAME</span><span class="p">]</span> <span class="p">=</span> <span class="n">result</span><span class="p">[</span><span class="n">NAME</span><span class="p">]</span><span class="o">?.</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;%v&quot;</span><span class="p">,</span> <span class="n">varNames</span><span class="p">[</span><span class="n">random</span><span class="p">(</span><span class="n">iday</span><span class="p">,</span> <span class="m">12</span><span class="p">)</span> <span class="p">%</span> <span class="n">varNames</span><span class="p">.</span><span class="n">size</span><span class="p">])</span><span class="o">!!</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="p">[</span><span class="n">NAME</span><span class="p">]</span><span class="o">?.</span><span class="n">indexOf</span><span class="p">(</span><span class="s">&quot;%t&quot;</span><span class="p">)</span> <span class="p">!=</span> <span class="p">-</span><span class="m">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">result</span><span class="p">[</span><span class="n">NAME</span><span class="p">]</span> <span class="p">=</span> <span class="n">result</span><span class="p">[</span><span class="n">NAME</span><span class="p">]</span><span class="o">?.</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;%t&quot;</span><span class="p">,</span> <span class="n">tools</span><span class="p">[</span><span class="n">random</span><span class="p">(</span><span class="n">iday</span><span class="p">,</span> <span class="m">11</span><span class="p">)</span> <span class="p">%</span> <span class="n">tools</span><span class="p">.</span><span class="n">size</span><span class="p">])</span><span class="o">!!</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="p">[</span><span class="n">NAME</span><span class="p">]</span><span class="o">?.</span><span class="n">indexOf</span><span class="p">(</span><span class="s">&quot;%l&quot;</span><span class="p">)</span> <span class="p">!=</span> <span class="p">-</span><span class="m">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">result</span><span class="p">[</span><span class="n">NAME</span><span class="p">]</span> <span class="p">=</span> <span class="n">result</span><span class="p">[</span><span class="n">NAME</span><span class="p">]</span><span class="o">?.</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;%l&quot;</span><span class="p">,</span> <span class="p">(</span><span class="n">random</span><span class="p">(</span><span class="n">iday</span><span class="p">,</span> <span class="m">12</span><span class="p">)</span> <span class="p">%</span> <span class="m">247</span> <span class="p">+</span> <span class="m">30</span><span class="p">).</span><span class="n">toString</span><span class="p">())</span><span class="o">!!</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span><span class="p">.</span><span class="n">toMap</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 添加预定义事件</span>
</span><span class='line'>    <span class="c1">// Should return two lists: GOOD list and BAD list, the item of list is a map(dictionary)</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">fun</span> <span class="nf">pickSpecials</span><span class="p">(</span><span class="n">goodList</span><span class="p">:</span> <span class="n">MutableList</span><span class="p">&lt;</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="p">&gt;&gt;,</span> <span class="n">badList</span><span class="p">:</span> <span class="n">MutableList</span><span class="p">&lt;</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="p">&gt;&gt;)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">specials</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">iday</span><span class="p">.</span><span class="n">toString</span><span class="p">()</span> <span class="p">==</span> <span class="n">it</span><span class="p">[</span><span class="n">DATE</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">it</span><span class="p">[</span><span class="n">TYPE</span><span class="p">]</span> <span class="p">==</span> <span class="n">GOOD</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">goodList</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="n">it</span><span class="p">[</span><span class="n">NAME</span><span class="p">]</span><span class="o">!!</span><span class="p">,</span> <span class="n">GOOD</span> <span class="n">to</span> <span class="n">it</span><span class="p">[</span><span class="n">DESCRIPTION</span><span class="p">]</span><span class="o">!!</span><span class="p">))</span>
</span><span class='line'>                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">badList</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="n">it</span><span class="p">[</span><span class="n">NAME</span><span class="p">]</span><span class="o">!!</span><span class="p">,</span> <span class="n">BAD</span> <span class="n">to</span> <span class="n">it</span><span class="p">[</span><span class="n">DESCRIPTION</span><span class="p">]</span><span class="o">!!</span><span class="p">))</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 生成今日运势</span>
</span><span class='line'>    <span class="c1">// Two part: from specials events and random picked from activities</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">genTodayLuck</span><span class="p">():</span> <span class="n">Pair</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="p">&gt;&gt;,</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="p">&gt;&gt;&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">var</span> <span class="py">theActivities</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">isWeekend</span><span class="p">())</span> <span class="n">activities</span><span class="p">.</span><span class="n">filter</span> <span class="p">{</span> <span class="n">it</span><span class="p">[</span><span class="n">WEEKEND</span><span class="p">]</span> <span class="p">==</span> <span class="s">&quot;true&quot;</span> <span class="p">}</span> <span class="k">else</span> <span class="n">activities</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="py">goodList</span> <span class="p">=</span> <span class="n">ArrayList</span><span class="p">&lt;</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="p">&gt;&gt;()</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">badList</span> <span class="p">=</span> <span class="n">ArrayList</span><span class="p">&lt;</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="p">&gt;&gt;()</span>
</span><span class='line'>        <span class="n">pickSpecials</span><span class="p">(</span><span class="n">goodList</span><span class="p">,</span> <span class="n">badList</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="py">numGood</span> <span class="p">=</span> <span class="n">random</span><span class="p">(</span><span class="n">iday</span><span class="p">,</span> <span class="m">98</span><span class="p">)</span> <span class="p">%</span> <span class="m">3</span> <span class="p">+</span> <span class="m">2</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">numBad</span> <span class="p">=</span> <span class="n">random</span><span class="p">(</span><span class="n">iday</span><span class="p">,</span> <span class="m">87</span><span class="p">)</span> <span class="p">%</span> <span class="m">3</span> <span class="p">+</span> <span class="m">2</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">pickedEvents</span> <span class="p">=</span> <span class="n">pickRandomActivity</span><span class="p">(</span><span class="n">theActivities</span><span class="p">,</span> <span class="n">numGood</span> <span class="p">+</span> <span class="n">numBad</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Add random picked from activities to GOOD/BAD list</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="k">in</span> <span class="m">0</span> <span class="n">until</span> <span class="n">numGood</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">goodList</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="n">pickedEvents</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">NAME</span><span class="p">]</span><span class="o">!!</span><span class="p">,</span> <span class="n">DESCRIPTION</span> <span class="n">to</span> <span class="n">pickedEvents</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">GOOD</span><span class="p">]</span><span class="o">!!</span><span class="p">))</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="k">in</span> <span class="m">0</span> <span class="n">until</span> <span class="n">numBad</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">badList</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">mapOf</span><span class="p">(</span><span class="n">NAME</span> <span class="n">to</span> <span class="n">pickedEvents</span><span class="p">[</span><span class="n">numGood</span> <span class="p">+</span> <span class="n">i</span><span class="p">][</span><span class="n">NAME</span><span class="p">]</span><span class="o">!!</span><span class="p">,</span> <span class="n">DESCRIPTION</span> <span class="n">to</span> <span class="n">pickedEvents</span><span class="p">[</span><span class="n">numGood</span> <span class="p">+</span> <span class="n">i</span><span class="p">][</span><span class="n">BAD</span><span class="p">]</span><span class="o">!!</span><span class="p">))</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Pair</span><span class="p">(</span><span class="n">goodList</span><span class="p">,</span> <span class="n">badList</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">genTodayString</span><span class="p">():</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;今天是&quot;</span> <span class="p">+</span> <span class="n">today</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="n">Calendar</span><span class="p">.</span><span class="n">YEAR</span><span class="p">)</span> <span class="p">+</span>
</span><span class='line'>                <span class="s">&quot;年&quot;</span> <span class="p">+</span> <span class="p">(</span><span class="n">today</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="n">Calendar</span><span class="p">.</span><span class="n">MONTH</span><span class="p">)</span> <span class="p">+</span> <span class="m">1</span><span class="p">)</span> <span class="p">+</span>
</span><span class='line'>                <span class="s">&quot;月&quot;</span> <span class="p">+</span> <span class="n">today</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="n">Calendar</span><span class="p">.</span><span class="n">DAY_OF_MONTH</span><span class="p">)</span> <span class="p">+</span>
</span><span class='line'>                <span class="s">&quot;日 星期&quot;</span> <span class="p">+</span> <span class="n">weeks</span><span class="p">[</span><span class="n">today</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="n">Calendar</span><span class="p">.</span><span class="n">DAY_OF_WEEK</span><span class="p">)</span> <span class="p">-</span> <span class="m">1</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">genDirection</span><span class="p">():</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">index</span> <span class="p">=</span> <span class="n">random</span><span class="p">(</span><span class="n">iday</span><span class="p">,</span> <span class="m">2</span><span class="p">)</span> <span class="p">%</span> <span class="n">directions</span><span class="p">.</span><span class="n">size</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">directions</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">genGirlsIndex</span><span class="p">():</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">star</span><span class="p">(</span><span class="n">random</span><span class="p">(</span><span class="n">iday</span><span class="p">,</span> <span class="m">6</span><span class="p">)</span> <span class="p">%</span> <span class="m">5</span> <span class="p">+</span> <span class="m">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">genDrinks</span><span class="p">():</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">drinks</span><span class="p">.</span><span class="n">pickRandom</span><span class="p">(</span><span class="m">2</span><span class="p">).</span><span class="n">joinToString</span><span class="p">(</span><span class="s">&quot;, &quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>完整的代码可以到这里<a href="https://github.com/alexhilton/KotlinHello">下载</a>。</p>

<h3>用到的新特性</h3>

<p>从代码中看到，除了上一篇文章外，还用到了一些Kotlin语言的特性：</p>

<h4>Ranges</h4>

<p>可以理解为区间，用于按某些范围来迭代，看一下例子中genTodayLuck方法就能明白。下面也简单的补充下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="k">in</span> <span class="m">1.</span><span class="p">.</span><span class="m">10</span><span class="p">)</span> <span class="c1">// 等同于for (int i = 1; i &lt;= 10; i++)</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="k">in</span> <span class="m">0</span> <span class="n">until</span> <span class="m">10</span><span class="p">)</span> <span class="c1">// 等同于for (int i = 0; i &lt; 10; i++)</span>
</span></code></pre></td></tr></table></div></figure>


<p>自己可以体会上面的两个不同，还有就是还可以用于if判断：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="k">in</span> <span class="m">1.</span><span class="p">.</span><span class="m">10</span><span class="p">)</span> <span class="c1">// if (1 &lt;= a &amp;&amp; a &lt;= 10)</span>
</span></code></pre></td></tr></table></div></figure>


<p>默认步长是1, 当然也可以自定义：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="k">in</span> <span class="m">1.</span><span class="p">.</span><span class="m">10</span> <span class="n">step</span> <span class="m">2</span><span class="p">)</span> <span class="c1">// =&gt; for (int i = 1; i &lt;= 10; i += 2)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Extension function</h4>

<p>可以给已存在的类添加方法，非继承也非组合的方式，与Object-C中的Category很像。这会让在基于某个类，执行某种操作时，非常的简洁，比如此例中的pickRandom方法，如果常规实现是把列表作为一个参数传入，但是用了Extension function后，使用的时候就仿佛这是Collection本身提供的一个方法一样，可读性与简洁性大大提升。</p>

<h4>Companion object</h4>

<p>与内部类概念类似，就是想在一个类的内部再声明一个类，就要用companion object，引用companion object的成员时可以省略它的类的名字，如示例中，在CalendarActivity中引用ProgrammerCalendar的companion object EventKeys时可以省略:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">ProgrammerCalendar</span><span class="p">.</span><span class="n">DESCRIPTION</span>
</span></code></pre></td></tr></table></div></figure>


<h4>const关键字</h4>

<p>上一篇文章，介绍过变量用var声明，常量用val来声明，那关键字const又是什么鬼呢？原来它用于声明类的顶级属性（用人话说，就是非内部类），其作用相当于Java中的static final：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">const</span> <span class="k">val</span> <span class="py">NAME</span> <span class="p">=</span> <span class="s">&quot;name&quot;</span> <span class="c1">//相当于Java中的public static final String NAME = &quot;name&quot;;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参考资料</h2>

<ul>
<li><a href="https://www.sitepoint.com/building-a-ui-with-kotlin-and-anko/">Building a UI with Kotlin and Anko</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[学习Kotlin，看这一篇就够了]]></title>
    <link href="http://toughcoder.net/blog/2018/05/17/introduction-to-kotlin-programming-language/"/>
    <updated>2018-05-17T20:51:21+08:00</updated>
    <id>http://toughcoder.net/blog/2018/05/17/introduction-to-kotlin-programming-language</id>
    <content type="html"><![CDATA[<h2>人生苦短，要用Kotlin</h2>

<p>这是一种对程序猿更为友好的语言，可以减少开发者的工作量，原本由开发者干的事情，其实很多都可以由编译器实现了，这是一种更为高级的语言。Java虽然严谨，但却过于繁琐，太啰嗦了，一个小事情却要写大量的代码，而且有些代码又是非常机械式的，在实际编码过程中都是用IDE来自动生成。Java，C，C++，Object C这些都是上世纪的编程语言。</p>

<p><a href="http://toughcoder.net/blog/2018/05/17/introduction-to-kotlin-programming-language/"><img src="https://fossbytes.com/wp-content/uploads/2017/09/Kotlin-programming-language-course.png"></a></p>

<p>现在到了新时代了，编程也发展了很多，像lambda表达式，函数式编程，等等一些新的概念和范式在涌现。所以就有了新时代的编程语言，像水果的Swift，Groovy，Scala，以及Java阵营的Kotlin。Kotlin是新一代的编程语言，与Java完美融合，简洁，方便，可以大大提高程序可读性，特别是对于Android开发者来说。水果推出了Swift以解放水果平台的开发者，而Kotlin就是来解放Android开发者的。</p>

<!-- more -->


<p>虽然说Kotlin可以用在任何可以用Java的地方，但目前主要就是两大领域服务端，以及Android应用开发，特别是有了Google官方的支持，所以Kotlin对于Android开发者的意义更为重大，身为一个Android猿，是一定要学习一下这门现代的编程语言的，因为当你学过了之后 ，你会发现，之前写的代码都是在浪费生命。</p>

<h2>Development environment setup</h2>

<p>有三种方式</p>

<h3>命令行</h3>

<p>其实，这是最好的方式，因为配置起来非常的方便。到<a href="https://kotlinlang.org/docs/tutorials/command-line.html">官网</a>去下载编译器，解压，然后把kotlinc/bin/放到PATH环境变量里面，就可以了。如果要配置Vim，还需要安装一下插件，大神们早就把插件准备好了，只需要<a href="https://github.com/udalov/kotlin-vim">下载</a>，然后按照官方方法安装即可，其实就是把解压后的东西拷贝到相应的目录里面就好了。</p>

<h3>Idea IntellJ</h3>

<p>这个看<a href="https://kotlinlang.org/docs/tutorials/getting-started.html">官方文档</a>就可以了，孤未亲测，如遇困难请自行Google。</p>

<h3>Android Studio</h3>

<p>因为Kotlin官已支持了Android Studio，而Google也支持了，总而言之就是在Android Studio中可以直接使用Kotlin。所以， Android Stuido 3.0以后的版本无需特殊配置，就可以用例Kotlin了。</p>

<p>对于刚开始学习Kotlin而言呢，孤推荐使用命令行的方式，而不要使用Android Studio，特别是直接创建一个基于Kotlin的Android项目，因为此时对语言还不够熟悉，直接上项目，会迷失在项目配置，frameworks以及语言基础之中。刚学习一门语言的时候要先学习基本的语法以及语言本身的特性，这最好先绕开框架和项目，会更容易上手一些。</p>

<h2>Hello world</h2>

<p>这是所有编程语言的入门必学课程，目的是让学习者快速的体验一下一门语言，我们也不用多想，照着一个字母，一个字母的把示例敲进去就好了：</p>

<ol>
<li>选择喜欢的文本编辑器，如Vim hello.kt，Kotlin的文件扩展名是*.kt，我们遵循就好。<br/></li>
<li>一字不差的敲进去:</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">package</span> <span class="nn">hello</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">main</span><span class="p">(</span><span class="n">args</span><span class="p">:</span> <span class="n">Array</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Hello, world&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后，保存文件<br/>
3. 回到命令行，编译源码，如果一切顺利会得到一个叫hello.jar的文件，这就是kotlin的最终输出，也就是它的目标文件.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kotlinc hello.kt -include-runtime -d hello.jar
</span></code></pre></td></tr></table></div></figure>


<p><br/>
4. 运行，这里跟Kotlin其实已经没啥关系了，因为经过编译得到的是一个标准的Jar文件，像运行其他jar一样运行就好了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>java -jar hello.jar
</span></code></pre></td></tr></table></div></figure>


<p>就会得到输出Hello, world到此，第一个Kotlin程序已经完成，是不是很酷，已经迫不及待的想深入学习了！往下看吧。</p>

<h2>The basics</h2>

<h3>语句结构</h3>

<p>一行一个语句（先不纠结语句与表达式的区别），不用加分号，不用打分号，光这个就可以节省多少时间呢？是不是感觉人生都浪费在了分号上面。如果想在一行写多个语句，前面的要加上分号。</p>

<p>缩进规则与Java一致，用四个空格，也可以用tab，或者不加缩进，只要没人打你。</p>

<p>语句块需要加上花括号{}。总之，语句结构与Java很类似。</p>

<h3>变量</h3>

<p>用var来声明变量，用val来声明常量，因为Kotlin是静态强类型语言（也就是说每个变量在编译的时候必须知道类型）声明时需要带上类型，方法是在变量名的后面加冒号，空格跟上类型名字，与Pascal差不多。如果声明时直接定义，则可以不用指定类型，编译器会根据定义表达式来推测它的类型。示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">var</span> <span class="py">str</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'><span class="k">val</span> <span class="py">i</span><span class="p">:</span> <span class="n">Int</span>
</span><span class='line'><span class="k">var</span> <span class="py">str</span> <span class="p">=</span> <span class="s">&quot;Hello, world&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>语句和表达式</h3>

<p>主要想说一下语句和表达式的区别，简单来说就是表达式是有值的，可以放在变量赋值的右边，而语句是没有值的，不能放在赋值的右边</p>

<h3>基本运算</h3>

<p>不多说了，跟Java一样</p>

<h3>注释</h3>

<p>这个跟Java也一样：
// 单行注释
/<em> </em>/  多行注释
/<em>* </em>/ documentation</p>

<h3>函数</h3>

<p>以fun关键字来定义一个函数格式为：<em>fun 函数名(参数): 返回类型 {函数体}</em>，如:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">foo</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="p">):</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">name</span><span class="p">.</span><span class="n">length</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>命名参数和默认值，调用函数时可以把参数的名字带上，以增加可读性。声明函数时可以用默认值 ，以更好的支持函数的重载。如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">foo</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">number</span><span class="p">:</span> <span class="n">Int</span> <span class="p">=</span> <span class="m">42</span><span class="p">,</span> <span class="n">toUpper</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">):</span> <span class="n">String</span> <span class="p">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用时，可以指定参数的名字：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">foo</span><span class="p">(</span><span class="s">&quot;a)</span>
</span><span class='line'><span class="n">foo</span><span class="p">(</span><span class="s">&quot;b&quot;</span><span class="p">,</span> <span class="n">number</span> <span class="p">=</span> <span class="m">1</span><span class="p">)</span>
</span><span class='line'><span class="n">foo</span><span class="p">(</span><span class="s">&quot;c&quot;</span><span class="p">,</span> <span class="n">toUpper</span> <span class="p">=</span> <span class="k">true</span><span class="p">)</span>
</span><span class='line'><span class="n">foo</span><span class="p">(</span><span class="n">name</span> <span class="p">=</span> <span class="s">&quot;d&quot;</span><span class="p">,</span> <span class="n">number</span> <span class="p">=</span> <span class="m">2</span><span class="p">,</span> <span class="n">toUpper</span> <span class="p">=</span> <span class="k">false</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>表达式体如果一个函数体内只有一个表达式，且有返回值时，那么，可以直接把返回值放在函数 的后面，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">foo</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="p">):</span> <span class="n">String</span> <span class="p">=</span> <span class="n">name</span><span class="p">.</span><span class="n">toUpperCase</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>甚至还可以把返回类型的声明给省略掉，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">foo</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">=</span> <span class="n">name</span><span class="p">.</span><span class="n">toUpperCase</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>跟Java不一样的是，Kotlin的函数可以声明为toplevel也就是跟class一个级别，也就是说不必非放在类里面，也就是说跟C和C++是类似的。此外，还可以函数赋值给一个变量，这个变量就像其他变量一样。</p>

<h3>类与对象</h3>

<h4>类的声明与对象创建</h4>

<p>用class来声明一个类型，用:来继承父类或者实现接口，不需要使用new来创建对象：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">Person</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">var</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>   <span class="k">var</span> <span class="py">age</span><span class="p">:</span> <span class="n">Int</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>假如，一个类，是空的，没有内容，那么花括号{}是可以省略的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span></code></pre></td></tr></table></div></figure>


<p>创建对象：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">var</span> <span class="py">someone</span> <span class="p">=</span> <span class="n">Person</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Primary constructor</h4>

<p>构造方法，有所谓的primary constructor，可以直接写在类名的后面：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">Person</span> <span class="n">constructor</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>一般情况下，constructor 可以省略掉：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>初始化块因为primary constructor不能包含代码，所以，想要做些初始化工作就可以放在初始化块里面(initializer block)，也可以在定义属性时直接使用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">firstName</span><span class="p">:</span> <span class="n">String</span> <span class="p">=</span> <span class="n">name</span>
</span><span class='line'>    <span class="n">init</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;First initializer block that prints ${name}&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>一般情况下，如果声明的属性变量在primary constructor中都有赋值（通过initializer block）的话，可以有更简洁的表达方式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="k">var</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="k">var</span> <span class="py">age</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这相当于：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="n">theName</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">theAge</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">var</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span> <span class="p">=</span> <span class="n">theName</span>   <span class="k">var</span> <span class="py">age</span><span class="p">:</span> <span class="n">Int</span> <span class="p">=</span> <span class="n">theAge</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果primary construct前面要声明属性，或者有annotation的话，关键字constructor不能省略：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">Person</span> <span class="k">public</span> <span class="n">@Inect</span> <span class="n">constructor</span><span class="p">(</span><span class="k">var</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Secondary constructor</h4>

<p>如果primary constructor不能满足需求怎么办呢？还可以声明其他constructor，所谓的secondary constructor:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">Person</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">var</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span> <span class="n">constructor</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="err">）</span><span class="p">{</span>
</span><span class='line'>       <span class="k">this</span><span class="p">.</span><span class="n">name</span> <span class="p">=</span> <span class="n">name</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>是不是看起来舒服一些，因为跟Java一样了，可以把primary constfuctor和second constructor联合起来一起用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="k">var</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">constructor</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">parrent</span><span class="p">:</span> <span class="n">Person</span><span class="p">)</span> <span class="p">:</span> <span class="k">this</span><span class="p">(</span><span class="n">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">parrent</span><span class="p">.</span><span class="n">addChild</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里要把secondary construct尽可能delegate到primary constructor，这里的delegate的意思就是primary constructor会在second constructor之前 执行，还有就是initiailzer block都是在primary construct中执行的，这就能保证initiliazer block在second constructor之前执行。即使没有显示的声明primary constructor，编译器还是会生成一个默认的primary constructor以及把secondary constructor默认的delegate到primary constrcutor上面。也就是说，会保证primary constructor以及initializer block执行在second constructor前面：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">Constructors</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">init</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;Initializer block&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">constructor</span><span class="p">(</span><span class="n">i</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;second constructor&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fun</span> <span class="nf">main</span><span class="p">(</span><span class="n">args</span><span class="p">:</span> <span class="n">Array</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">c</span> <span class="p">=</span> <span class="n">Constructors</span><span class="p">(</span><span class="m">3</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Initializer block
</span><span class='line'>second constructor
</span></code></pre></td></tr></table></div></figure>


<h4>属性和访问方法</h4>

<p>Kotlin会为声明的属性生成默认的setter和getter：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="k">var</span> <span class="py">name</span><span class="p">:</span> <span class="n">Strring</span><span class="p">,</span> <span class="k">var</span> <span class="py">age</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="py">p</span> <span class="p">=</span> <span class="n">Person</span><span class="p">(</span><span class="s">&quot;Kevin&quot;</span><span class="p">,</span> <span class="m">24</span><span class="p">)</span>
</span><span class='line'><span class="n">p</span><span class="p">.</span><span class="n">getName</span><span class="p">()</span> <span class="c1">// 返回&quot;Kevin&quot;</span>
</span><span class='line'><span class="n">p</span><span class="p">.</span><span class="n">setAge</span><span class="p">(</span><span class="m">32</span><span class="p">)</span> <span class="c1">// age变成了32</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果想自定义setter和getter，也是可以的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">Person</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>        <span class="k">set</span><span class="p">(</span><span class="n">n</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="p">==</span> <span class="k">null</span> <span class="p">||</span> <span class="n">n</span> <span class="p">==</span> <span class="s">&quot;&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">name</span> <span class="p">=</span> <span class="s">&quot;Unkown&quot;</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">name</span> <span class="p">=</span> <span class="n">n</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">get</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">name</span> <span class="p">==</span> <span class="s">&quot;Unkwon&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="s">&quot;Nobody&quot;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">name</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>定义类的方法</h4>

<p>跟声明普通函数一样，只不过是放在了类里面：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="k">val</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="k">val</span> <span class="py">age</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">report</span><span class="p">()</span> <span class="p">=</span> <span class="s">&quot;My name is $name, and I&#39;m $age&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果，要覆写父类的方法，需要使用在方法声明时加上override关键字。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">Doggy</span><span class="p">(</span><span class="k">val</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">:</span> <span class="n">Animal</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">yell</span><span class="p">()</span> <span class="p">=</span> <span class="s">&quot;Barking from $name&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>访问权限</h4>

<p>访问权限也跟Java类似分为public，protected，private以及internal，前三个意义也都一样，只不过默认值不一样，在Java里，如果对成员没有指明，则是package scope，也就是同一个package可以访问，但是Kotlin默认是public的。</p>

<p>internal是module内部可见，有点类似于Java中的package，但是module定义跟package不一样，module是一组编译在一起的Kotlin文件，它跟编译打包有关系，简单的理解它的范围要比package要大。</p>

<p>还有就是类，默认是不可被继承的，相当于final class。如果想要允许继承就要在声明类的时候加上open。</p>

<h3>字串</h3>

<p>概念就不说了，大部分与Java一模一样的，像支持的方法等。唯一需要说的就是字串模板，就是说把其他类型转化为字串时，有较Java更为方便的方式：直接用$来把变量嵌入到字串之中，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">msg</span> <span class="p">=</span> <span class="s">&quot;Error 1&quot;</span>
</span><span class='line'><span class="k">val</span> <span class="py">count</span> <span class="p">=</span> <span class="m">32</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="s">&quot;We got message $msg&quot;</span><span class="p">)</span> <span class="c1">//等同于&quot;We got message &quot; + msg</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="s">&quot;Total is $count&quot;</span><span class="p">)</span> <span class="c1">// Total is 32</span>
</span></code></pre></td></tr></table></div></figure>


<h3>lambda表达式</h3>

<p>首先要介绍一个概念，高阶函数，其实就是把另外函数当作参数的函数，或者说产生一个函数，也即把函数作为返回值 的函数。前面说过，函数是一级对象，可以像常规变量一样来使用，所以，就能把函数作为参数或者返回值来使用高阶函数。lambda表达式就是为高阶函数更方便使用而生的。</p>

<h4>lambda 表达式</h4>

<p>作为新时代的编程语言，都会支持函数式编程，而lambda表达 式又是函数式编程里面必不可少的一份子。其实啥是lambda表达式呢？说的简单点就是没有名字的函数，非常简短的，通常都是一两句话的没有名字的函数。就是长这个样子{A, B -> C}，这里面A，B是参数，C是表达式，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">sum</span> <span class="p">=</span> <span class="p">{</span> <span class="n">x</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">y</span><span class="err">：</span> <span class="n">Int</span> <span class="p">-&gt;</span> <span class="n">x</span> <span class="p">+</span> <span class="n">y</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中，参数的类型是可以省略的，因为编译器能从上下文中推测出来:
max(strings, { a, b -> a.length &lt; b.length }
表达式部分，可以不止一个，最后一个表达式作为返回值。</p>

<p>当把一个lambda表达作为最后一参数，传给某个函数时，可以直接把lambda表达式写在参数的外面，比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">product</span> <span class="p">=</span> <span class="n">items</span><span class="p">.</span><span class="n">fold</span><span class="p">(</span><span class="m">1</span><span class="p">)</span> <span class="p">{</span> <span class="n">acc</span><span class="p">,</span> <span class="n">e</span> <span class="p">-&gt;</span> <span class="n">acc</span> <span class="p">*</span> <span class="n">e</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>而当lambda是唯一的参数时，也可以把参数的括号省略掉：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">run</span> <span class="p">{</span> <span class="n">println</span><span class="p">(</span><span class="s">&quot;Hello, world&quot;</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>还有就是，如果lambda表达中只有一个参数，那么参数也可以省略，直接写表达式:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">eval</span><span class="p">{</span> <span class="n">x</span> <span class="p">*</span> <span class="n">x</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>函数类型</h4>

<p>前面提到了函数是可以像普通变量一样使用的一级类，也就是说它是一个类型。它的具体形式是: (A, B)->C，其中括号内的是参数，C是返回类型，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">sum</span><span class="p">:</span> <span class="p">(</span><span class="n">Int</span><span class="p">,</span> <span class="n">Int</span><span class="p">)-&gt;</span><span class="n">Int</span> <span class="p">=</span> <span class="p">{</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="p">-&gt;</span> <span class="n">x</span> <span class="p">+</span> <span class="n">y</span> <span class="p">}</span>
</span><span class='line'><span class="k">val</span> <span class="py">square</span><span class="p">:</span> <span class="p">(</span><span class="n">Int</span><span class="p">)-&gt;</span><span class="n">Int</span> <span class="p">=</span> <span class="p">{</span> <span class="n">x</span> <span class="p">-&gt;</span> <span class="n">x</span> <span class="p">*</span> <span class="n">x</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>为啥要提一下函数类型呢，因为有时需要声明高阶函数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">walk</span><span class="p">(</span><span class="n">f</span><span class="p">:</span> <span class="p">(</span><span class="n">Int</span><span class="p">)-&gt;</span><span class="n">Int</span><span class="p">)</span>
</span><span class='line'><span class="k">fun</span> <span class="nf">run</span><span class="p">(</span><span class="n">f</span><span class="p">:</span> <span class="p">()-&gt;</span><span class="n">Unit</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Unit是一个特殊的返回值，相当于void，意思就是此函数没有返回值。</p>

<h3>集合</h3>

<p>其实大部分跟Java是一样的。只不过有一些函数式的操作，要多注意使用，从而让代码更简洁，如：</p>

<ul>
<li>遍历</li>
<li>过滤</li>
<li>映射</li>
<li>排序</li>
<li>折叠</li>
<li>分组</li>
<li>归类</li>
</ul>


<p>这些操作，对于大家应该都不难理解，就不一一解释了，来断代码就知道了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">collectionTests</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">list</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span><span class="s">&quot;Apple&quot;</span><span class="p">,</span> <span class="s">&quot;Google&quot;</span><span class="p">,</span> <span class="s">&quot;Microsoft&quot;</span><span class="p">,</span> <span class="s">&quot;Facebook&quot;</span><span class="p">,</span> <span class="s">&quot;Twitter&quot;</span><span class="p">,</span> <span class="s">&quot;Intel&quot;</span><span class="p">,</span> <span class="s">&quot;QualComm&quot;</span><span class="p">,</span> <span class="s">&quot;Tesla&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">// 遍历，以进行某种操作</span>
</span><span class='line'>    <span class="n">list</span><span class="p">.</span><span class="n">forEach</span><span class="p">{</span> <span class="n">println</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="c1">//按条件进行过滤，返回条件为true的</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">short</span> <span class="p">=</span> <span class="n">list</span><span class="p">.</span><span class="n">filter</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">length</span> <span class="p">&lt;</span> <span class="m">6</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="n">short</span><span class="p">)</span> <span class="c1">// [Apple, Intel, Tesla]</span>
</span><span class='line'>    <span class="c1">// 把列表元素映射成为另外一种元素</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">lenList</span> <span class="p">=</span> <span class="n">list</span><span class="p">.</span><span class="n">map</span><span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">length</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Length of each item $lenList&quot;</span><span class="p">)</span> <span class="c1">//Length of each item [5, 6, 9, 8, 7, 5, 8, 5]</span>
</span><span class='line'>    <span class="c1">// 按某种条件进行排序</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">ordered</span> <span class="p">=</span> <span class="n">list</span><span class="p">.</span><span class="n">sortedBy</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">length</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Sorted by length $ordered&quot;</span><span class="p">)</span> <span class="c1">// Sorted by length [Apple, Intel, Tesla, Google, Twitter, Facebook, QualComm, Microsoft]</span>
</span><span class='line'>    <span class="c1">// 折叠，用累积的结果继续遍历</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">joint</span> <span class="p">=</span> <span class="n">list</span><span class="p">.</span><span class="n">fold</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">partial</span><span class="p">,</span> <span class="n">item</span> <span class="p">-&gt;</span> <span class="k">if</span> <span class="p">(</span><span class="n">partial</span> <span class="p">!=</span> <span class="s">&quot;&quot;</span><span class="p">)</span>  <span class="s">&quot;$partial, $item&quot;</span> <span class="k">else</span> <span class="n">item</span> <span class="p">})</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Joint list with comma $joint&quot;</span><span class="p">)</span> <span class="c1">// Joint list with comma Apple, Google, Microsoft, Facebook, Twitter, Intel, QualComm, Tesla</span>
</span><span class='line'>    <span class="c1">//分组，用某种条件 把列表分成两组</span>
</span><span class='line'>    <span class="k">val</span> <span class="err">(</span><span class="py">first</span><span class="p">,</span> <span class="n">second</span><span class="p">)</span> <span class="p">=</span> <span class="n">list</span><span class="p">.</span><span class="n">partition</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">length</span> <span class="p">&lt;</span> <span class="m">6</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Length shorter than 6 $first&quot;</span><span class="p">)</span> <span class="c1">// Length shorter than 6 [Apple, Intel, Tesla]</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Longer than 6 $second&quot;</span><span class="p">)</span> <span class="c1">// Longer than 6 [Google, Microsoft, Facebook, Twitter, QualComm]</span>
</span><span class='line'>    <span class="c1">// 归类，按某种方法把元素归类，之后变成了一个Map</span>
</span><span class='line'>    <span class="k">val</span> <span class="py">bucket</span> <span class="p">=</span> <span class="n">list</span><span class="p">.</span><span class="n">groupBy</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">length</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;$bucket is a map now&quot;</span><span class="p">)</span> <span class="c1">//{5=[Apple, Intel, Tesla], 6=[Google], 9=[Microsoft], 8=[Facebook, QualComm], 7=[Twitter]} is a map now</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>null处理</h3>

<p>为了有效的减少空指针异常，Kotlin加入了Nullable类型，核心的原理是这样的：声明类型的时候要明确的告诉编译器，这个变量是否可能为null，如果可能为null，那么可以赋null给这个变量，并且在使用此变量时必须检查是否为null；假如这个变量不可能为null，那么是不可以赋null给此变量的。也就是说，编译器会帮忙做一些检查，以减少NullPointerException的发生。</p>

<h4>Nullable变量</h4>

<p>默认的变量声明都是不可为null的，如:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">var</span> <span class="py">safe</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'><span class="n">safe</span> <span class="p">=</span> <span class="k">null</span> <span class="c1">// 会有compile error</span>
</span></code></pre></td></tr></table></div></figure>


<p>要想允许变量为null，要在类型后面加一个问号，以告诉编译器这是一个nullable类型：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">var</span> <span class="py">danger</span><span class="p">:</span> <span class="n">String</span><span class="p">?</span>
</span><span class='line'><span class="n">danger</span> <span class="p">=</span> <span class="k">null</span> <span class="c1">// OKay</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用时，nullable不能直接使用，必须检查是否为null:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">safe</span><span class="p">.</span><span class="n">length</span> <span class="c1">// okay</span>
</span><span class='line'><span class="n">danger</span><span class="p">.</span><span class="n">length</span> <span class="c1">// compile error, danger could be null</span>
</span></code></pre></td></tr></table></div></figure>


<h4>检查Nullable的真伪</h4>

<p>可以用传统方式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">len</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">danger</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="n">danger</span><span class="p">.</span><span class="n">length</span> <span class="k">else</span> <span class="p">-</span><span class="m">1</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Safe call</h5>

<p>既然有Nullable类型，自然就有配套的方式来更方便的使用它：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">len</span> <span class="p">=</span> <span class="n">danger</span><span class="o">?.</span><span class="n">length</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果danger是null就返回null，否则返回长度，注意它的返回值是一个Int?（又是一个Nullable类型)。这个还能链起来：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">bob</span><span class="o">?.</span><span class="n">department</span><span class="o">?.</span><span class="n">head</span><span class="o">?.</span><span class="n">name</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果任何一环为null，则直接返回null。是不是感觉省了好多if (a == null)判断。</p>

<h5>Elvis operator</h5>

<p>假如不能接受safe call返回的null，咋办呢？想提供默认值的呢？也有方式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">len</span> <span class="p">=</span> <span class="n">danger</span><span class="o">?.</span><span class="n">length</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">len</span> <span class="o">?:</span> <span class="p">-</span><span class="m">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>稍有点绕哈，首先，danger?.length返回一个Int?吧，那么?:的作用就是如果len是null，那么就返回-1,否则返回它的值。</p>

<h5>强制取值符！！</h5>

<p>它的作用是如果Nullable变量为null就抛出NullPointerException，如果正常的话就取其值，返回的类型是一个non-null类型：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">len</span> <span class="p">=</span> <span class="n">danger</span><span class="o">!!</span><span class="p">.</span><span class="n">length</span> <span class="c1">// get length or NullPointerException</span>
</span></code></pre></td></tr></table></div></figure>


<p>尽管，编译器可以帮助我们做一些事情，但是现实的项目中的大量的NPE并不是直接来源于，可以方便追踪的赋值为null，而多是发生在多线程环境中，以及非常复杂的逻辑之中，编译器能否追踪到并警示，还有待考察。另外，就是虽有利器，但是要运用恰当，何时用允许null，何时不允许，还是要靠工程师的设计能力，比如尽可能返回空列表，空Map，或者空字串，而不是直接简单的返回null，这就能减少一定的NPE。</p>

<h2>Exercises</h2>

<p>光是看书或者看教程是比较乏味的，学习编程最重要的是要上手去练习，这样能加深印象，更好的理解书中或者教程中所讲的概念和知识点。官方也准备了一个非常好的练习项目叫Kotlin-koans，非常适配初学习者来练手。
下面说一下如何使用这个练习项目：</p>

<ol>
<li>到<a href="https://github.com/Kotlin/kotlin-koans">官网</a>去下载后，解压</li>
<li>用Android Studio打开此项目，一切提示都回答yes</li>
<li>要想运行测试前需要先编译一下项目，否则会提示找不到基础的测试类，找到Gradle窗口，一般在右侧，点开找到kotlin-koans->Tasks->build->build，运行它</li>
<li>现在就可以用先进的TDD方式来学习Kotlin了，在Project视图下面，可以看到kotlin-koans项目，里面有两个，一个是java，一个是tests，这两个目录里面的子目录都是一一对应的，先运行tests下面的，会失败，然后编辑java/下面的对应的代码，直到测试通过。</li>
</ol>


<h2>Essence of Kotlin</h2>

<p>致此，我们可以看出Kotlin这门语言的设计的核心理念：简洁，这是Kotlin的核心理念，所以我们看到，一些机械的，重复的，可以从上下文中推测 出来的都 可以省略，以增加可读性。我们在使用Kotlin的时候要践行此理念，把语言的特性发挥到最大。
当然，简洁，不是牺牲可读性的方式来缩短代码，而是要使用语言中的标准的简洁的表达方式，比如lambda表达式，省略参数等。</p>

<p>要注意参考<a href="http://kotlinlang.org/docs/reference/coding-conventions.html">Kotlin conventions</a>以及<a href="https://android.github.io/kotlin-guides/">Android Kotlin conventions</a>以写出更加简洁和容易理解的代码。</p>

<h2>Android dev setup</h2>

<p>我们来新建一个项目，用纯Kotlin实现一个Hello, world Android应用，来展示一下如何在Android中使用Kotlin:</p>

<p><strong>注意</strong>: 这里使用的是Android Studio 3.1.2版本，默认就支持Kotlin，如果使用小于3.0的版本需要安装Kotlin插件，可自行Google，孤还是建议先升级AS吧。</p>

<ol>
<li>新建一个项目，其实流程跟新建一个普通Android Studio项目是一样一样的，从Android Studio3.0起，新建项目时就会有一个Checkbox，问你要不要添加Kotlin。这里把它选上。
<img src="https://wx2.sinaimg.cn/mw690/870ad0baly1frgfq2b7odj20p40ixwfe.jpg" alt="Step 1" /></li>
<li>就直接下一步就好
<img src="https://wx2.sinaimg.cn/mw690/870ad0bagy1frfm0n9r38j20p40ixq4g.jpg" alt="Step 2" /></li>
<li>Next，创建一个empty activity
<img src="https://wx2.sinaimg.cn/mw690/870ad0baly1frgfqcxzruj20p40ixmy3.jpg" alt="Step 3" /></li>
<li>Finish<br/>
<img src="https://wx3.sinaimg.cn/mw690/870ad0baly1frgfqcz4tpj20p40ixdgr.jpg" alt="Step 4" /></li>
<li>布局跟其他新建的Android项目无差别
<img src="https://wx1.sinaimg.cn/mw690/870ad0baly1frgfqd39n2j20sp0io78b.jpg" alt="Step 5" /></li>
<li>代码已经是Kotlin的了
<img src="https://wx4.sinaimg.cn/mw690/870ad0baly1frgfqczcpmj20nz0cegmo.jpg" alt="Step 6" /></li>
<li>直接显示&#8221;Hello, world&#8221;略显无聊，所以加一下点击事件：</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nc">HelloActivity</span> <span class="p">:</span> <span class="n">AppCompatActivity</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="n">Bundle</span><span class="p">?)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">super</span><span class="p">.</span><span class="n">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
</span><span class='line'>        <span class="n">setContentView</span><span class="p">(</span><span class="n">R</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">activity_hello</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="py">colorTable</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span><span class="s">&quot;#ff0000&quot;</span><span class="p">,</span> <span class="s">&quot;#00ff00&quot;</span><span class="p">,</span> <span class="s">&quot;#0000ff&quot;</span><span class="p">,</span> <span class="s">&quot;#ffff00&quot;</span><span class="p">,</span> <span class="s">&quot;#00ffff&quot;</span><span class="p">,</span> <span class="s">&quot;#ff00ff&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">val</span> <span class="py">label</span> <span class="p">=</span> <span class="n">findViewById</span><span class="p">&lt;</span><span class="n">TextView</span><span class="p">&gt;(</span><span class="n">R</span><span class="p">.</span><span class="n">id</span><span class="p">.</span><span class="n">label</span><span class="p">)</span>
</span><span class='line'>        <span class="n">label</span><span class="p">.</span><span class="n">setOnClickListener</span> <span class="p">{</span> <span class="n">view</span> <span class="p">-&gt;</span>
</span><span class='line'>            <span class="k">val</span> <span class="py">randomIndex</span> <span class="p">=</span> <span class="p">(</span><span class="n">Math</span><span class="p">.</span><span class="n">random</span><span class="p">()</span> <span class="p">*</span> <span class="n">colorTable</span><span class="p">.</span><span class="n">size</span><span class="p">).</span><span class="n">toInt</span><span class="p">()</span>
</span><span class='line'>            <span class="n">view</span><span class="p">.</span><span class="n">setBackgroundColor</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">parseColor</span><span class="p">(</span><span class="n">colorTable</span><span class="p">[</span><span class="n">randomIndex</span><span class="p">]))</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实，整体来看，布局和项目的结构还是按照Android的方式来，唯一的不同是代码可以用Kotlin来写了。</p>

<h2>Good to go</h2>

<p>至此，Kotlin就算入门了，可以使用Kotlin来构建应用程序了，或者在你的项目中应用Kotlin了。</p>

<h2>参考资料和有用的资料分享</h2>

<ul>
<li><a href="https://kotlinlang.org/docs/reference/">官方文档</a></li>
<li><a href="https://www.kotlinresources.com/">Awesome Kotlin Resources</a></li>
<li><a href="https://developer.android.com/kotlin/">Kotlin and Android</a></li>
<li><a href="https://developer.android.com/kotlin/resources">Resources to Learn Kotlin</a></li>
<li><a href="https://learnxinyminutes.com/docs/kotlin/">Learn Kotlin in Y minutes</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初识微信小程序]]></title>
    <link href="http://toughcoder.net/blog/2017/01/16/mini-program-the-first-impression/"/>
    <updated>2017-01-16T22:03:35+08:00</updated>
    <id>http://toughcoder.net/blog/2017/01/16/mini-program-the-first-impression</id>
    <content type="html"><![CDATA[<p>微信小程序，可以说是最近比较火的一个话题了，到处都是小程序的新闻，于是孤也来凑一凑热闹，花了几个小时撸了一个程序员老黄历，来体验一下小程序。</p>

<p><a href="http://toughcoder.net/blog/2017/01/16/mini-program-the-first-impression/"><img src="https://img.alicdn.com/imgextra/i1/715978679/TB2Fuqbc4XlpuFjSsphXXbJOXXa_!!715978679.gif"></a></p>

<!-- more -->


<h2>体验小程序</h2>

<p>张小龙做事情还是很专业的，小程序的<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/index.html">开发文档</a>，注册流程，<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/devtools.html?t=2017112">开发工具</a>等都相当的完备，可与一些流行的开发平台媲美，不像其他国内的大厂，发布出来的东西，你按文档一步步操作都会出错。</p>

<p>所以，花几分钟时间读一读官文档就可以了，这里也不做准备重复文档。如何注册小程序，如何创建项目，如何搭建页面，照着文档做就可以了。作为体验官，从创建的基础项目开始就可以了，在app.json的pages列表中新添加一项时，开发工具就会自动创建page的目录，里面就有了标准的4个文件。然后分别修改就可以了。开发工具还是比较给力的，自动补全很强大，标准的JS以及平台的API都有自动补全，所以开发体验还是相当好的，所需要的知识就是标准的前端和微信平台的API。</p>

<p>代码在<a href="https://github.com/alexhilton/wechatminiprogram">这里</a>下载。</p>

<h2>小程序的本质</h2>

<p>脱去它那华丽的外衣，来看它的本质，其实体验过React Native的同学应该不会陌生，它的语法与RN很相似。可以这么说，没有非死不可的React Native可能就不会有今天的小程序。</p>

<p>最终在微信上看到的东西，都是由原生View来渲染的。这也是小程序与微信其他平台的最大区别。它的具体渲染原理，也与React native是一致的：编译完了，就是一个JS文件，交给微信来渲染，JS层有Virtual DOM，以及防止过多操作DOM的DOM diff。原生里面根据JS命令生成一个Node tree，由此再生成一个原生的View tree，把这个View tree渲染出来就是看到的页面了。至于平台API，理解成JSBridge就可以了。</p>

<p>关于更详细的小程序原理可参考<a href="https://mp.weixin.qq.com/s?__biz=MzIwNjQwMzUwMQ==&amp;mid=2247484837&amp;idx=1&amp;sn=29677c131aa6e2e68c1c47d3d847a9b4&amp;chksm=97236767a054ee718b08488c396bb342b90f28f11f68940d796c1f00f8cbac66cfb933121cb7&amp;mpshare=1&amp;scene=1&amp;srcid=0116a3fngVdcOBlquwBFfQEL&amp;key=7bdbb59233068edd2e9e41a905bb93bb630ea3bede3038db56d1479b415764dda35df9abf9015513b25eff1921c1791feda6e909b1c6ae05c3053de7bc272bba955c540a83b8a74d029d0ce370e01cd4&amp;ascene=0&amp;uin=MjQ2OTY4MDQ2NA%3D%3D&amp;devicetype=iMac+MacBookPro11%2C2+OSX+OSX+10.11.6+build&amp;lpar;15G1212&amp;rpar;&amp;version=12010210&amp;nettype=WIFI&amp;fontScale=100&amp;pass_ticket=7sJ42zJLD92bfTMSYrZSQCkU5DnK2xz4xhyYLRTGPrk6XIlr7thT07kjGSJYkQK1">这篇文章</a>。</p>

<h2>小程序的定位</h2>

<p>起初孤还想多撸几个小程序，但是在注册时却发现，小程序是不对个人开发者开放的，它只对政府，媒体，公司或者个体户开放注册，且认证审核非常严格，并且，一次注册只能开发一个小程序，换句话说，跟普通客户端的开发者帐号很大不同，客户端帐号注册后，可以开发任意多个应用。由此，可以看出小程序的定位，它只开放给服务提供商，目前服务在微信上有三种方式：订阅号，服务号和企业号。小程序，只是企业服务于用户的另外一种方式：它用最新的动态化技术，以前端开发的方式，用原生应用来渲染，提升开发体验和用户体验。它跟企业号本质上没有区别，能做的事情也不比企业号多。</p>

<p>其实，理解起来，小程序和现有的各种号的区别就是React Native与HTML5的区别，它们能做的事情是一样的，超过H5本身的东西，都需要原生应用来提供（React Native里叫API，H5里叫JSBridge）。它们的区别就在于开发体验&ndash;新的开发思想(react)，JFX；以及用户体验&ndash;渲染方式是原生 的方式，所以与原生 应用的体验是一样的。</p>

<h2>张小龙的克制</h2>

<p>一开始孤去注册，还很生气：这鸟东西竟然把个人开发者挡在外。但思考了一下，就明白了，这样做是非常正确的。为了防止小程序被滥用，失控，就好比安卓市场水果应用商店一样，各种应用参差不齐，病毒，木马，色情泛滥成灾，对微信平台本身也是一个威胁。可以看得出张小龙确实是一个非常出色的产品设计者，对于克制做得相当出色，全面放开小程序，可以迅速的出现大片大片的小程序，因为个人开发者的队伍是非常大的，这在数据上会非常的好看：看，小程序一开放就形成大平台了；看，程序有几十万的程序了，有近百万的下载量了；看，安卓和水果的猿们要失业了；看安卓市场们和水果应用商店要被小程序干掉了。</p>

<p>东西多了，不见得是好事，多了，就意味着杂了，乱了，不好管理了。从开发者注册入口严格把控，并且，每个注册的人只能开发一款小程序，这是非常聪明的决策，可以说是恰 到好处。另外一方面，只对团体开放，小程序就变成了一种插件，另外一种运营方式，而不是对安卓市场和水果应用商店 的一种竞争。如果对个人开发者开放注册，那么会有大量克隆安卓应用和水果应用的小程序出现，会对安卓市场和水果应用商店造成竞争，东西多了，杂了，对微信本身也是一种负担，微信会变得更加臃肿，更加耗费资源，更加的笨拙。</p>

<p>懂得产品和克制的张小龙做出的小程序对微信会有正向的促进作用。慢慢的其他大厂也会推出类似的东西，但我相信能对宿主应用产生正向促进的少。因为这东西会产生很多好看的数据，对KPI，对升官加薪都是大大的好。</p>

<p>多说一句，现在产品汪们都不敢拍脑袋了，因为会被开发challenge的很惨，于是现在流行用数据说话，但数据好就一定是好的产品设计么？很不一定，最简单的例子，16年支付宝多次的社交尝试（敬业福，校园日记，改密漏洞），数据上一定都非常好，但结果怎么样呢？这些超级app里（手机淘宝，微信，支付宝，UC等等），你随便做个功能，不用推广也可以达到DAU百万级，可以秒杀其他小厂辛苦砸钱的小app，但这又有何意义呢？就能说比小app做得好么？有种你离开超级app，做成独立app，再拿数据出来试试！好的产品一定是小而美，而非大而全，相信随着用户的科学素养的提升，这些臃肿的傻全黑粗，迟早被淘汰。</p>

<h2>安卓猿和水果猿大可不必担心</h2>

<p>小程序一发布，就有媒体说，<a href="http://news.mydrivers.com/1/500/500595.htm">好多应用可以卸载了</a>，<a href="http://it.sohu.com/20161228/n477174998.shtml">安卓和水果要失业了</a>，这些都是标题党，赚眼球，增加PV而已。其实大可不必担心。前面提到了，张小龙是懂得克制的人，他不可能让小程序泛滥，因为一旦泛滥，必然危及微信本身，会让微信本身变得非常难用，想想其他所谓的超级app（手机淘宝，支付宝等等），为什么难用，还不因为它里面有太多太多的东西（插件）了。另外，前面也提到，小程序之于公众号，就如React Native之于H5，它只是换了一种渲染方式而已，能做的事情没有变多，超出H5本身的东西都是需要宿主提供API的，所以小程序不可能提供超出微信本身功能的API，那样一来微信岂不是变成了一个操作系统了么？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为猿七年有余，痒否？痛否？]]></title>
    <link href="http://toughcoder.net/blog/2017/01/04/lessons-after-seven-years-of-programming/"/>
    <updated>2017-01-04T21:56:31+08:00</updated>
    <id>http://toughcoder.net/blog/2017/01/04/lessons-after-seven-years-of-programming</id>
    <content type="html"><![CDATA[<p>还未有感，已然岁末，犹叹时之箭逝去如斯也，稍纵命再减一。回首望，为猿七年有余已，虽不成气候，亦未全蹉跎。略做小结，以不惘逝去之时日，亦会大益于尔后路途。若博文能助足下之一二，孤将甚悦。</p>

<h2>职业是无数个连接起来的马拉松</h2>

<p>小学时，我们很清楚的知道5年后就毕业了（孤当年是五四制，现在貌似有的地方也是），无论多么讨厌老师或者 同学，或者学校，都知道最多忍5年就结束了；初中高中也一样，三四年样子，很快就过去了，多少欢乐悲喜都会很快的过去；大学更是如此，从入学进校园那天起你就开始倒计时，知道四年后的一天要离开，再怎么珍惜，再怎么蹉跎，时间仍然以它亘古不变的速度在向着一个方向跑着。</p>

<p><a href="http://toughcoder.net/blog/2017/01/04/lessons-after-seven-years-of-programming/"><img src="https://img.alicdn.com/imgextra/i2/715978679/TB2K0EEb8NkpuFjy0FaXXbRCVXa_!!715978679.jpg"></a></p>

<!-- more -->


<p>可职场呢？过了5年，你还在工作，还得工作；过了10年，过20年，30年甚至40年后，我们仍要工作。即使离职，也还要再入职，而且新工作跟之前没有本质的区别。明白了职场是一个40年的大周期，所以，这是一个超长的马拉松，没有中考冲刺，没有高考冲刺，更没有考个好大学，就可以随便玩了。没必要玩了命的冲刺，那样也没有好效果。更重要的是持续不断的学习，对，持续几十年的学习。</p>

<h2>成为高手，或者大牛的唯一途径是不断的学习</h2>

<p>不要梦想着进入大公司，进入牛逼的团队，坐在大牛旁边，或者多参加线下活动就可以成为大牛。这都是图样图奶衣物。大公司为什么要你？牛逼的团队为什么要你？首先你要是要有点本事才行；想要得到牛人的指点，是靠运气的。可能是电视剧看多了：你掉进山谷中，然后遇到了一个白猿，肚子里藏着九阳真经？或者滚下山谷，看到一个大雕，学会独孤九剑？芸芸众生全国数以百万计的程序猿，你觉得能遇到大神的机会有几成？大神愿意与你交流的机会又有多大？梦想大神手把手教你？除非你是他炮友。</p>

<p>当然，也确实有人足够幸运能够得到高人指点一二。但我们相信绝大多数人，即使牛人在你身边，你也没有足够的机会让他指点。公司雇我们来，是让我们干活的，让我们产生价值，为公司赚钱的。牛人的任务更重，事情更多，凭什么还让人指导你。</p>

<p>大公司资源和资料是多，培训的机会也多，但是也要你自己去看，去听去学习啊。各种线下活动，打广告的占大多数，其他的演讲也大都是提及皮毛，想要学到干货是不可能的，几十分钟他能讲出来多少？你又能领悟多少？所以线下活动是推广，开拓视野（能听到很多概念），拓宽人脉（确实能认识好多人，牛人和同水平的人）的好机会，而不是学习的机会。</p>

<p>一句话，想要成为高手，还是要去脚踏实地的学习，去啃书，去读代码，去撸代码，别无他法。关于这方面，可以参考一位大牛的<a href="http://www.techug.com/how-to-became-tech-giant">文章</a>，我觉得很在理。</p>

<h2>选择一个行业，或者一门技术，然后深耕</h2>

<p>虽然，不提倡像某些人那做什么五年计划，因为我们所处的行业，公司，项目，人事等变化的太快了，这些变化都是不确定因素，会打乱所有的计划，特别是长期计划。但是我们还是要有目标的，我相信对于大部分人，最终极的目标无非就是财务自由。如何才能财务自由，运气确实有一定作用，但更重要的还是要硬实力。什么是硬实力？也就是你能解决别人解决不了的问题，比如老板想作某一块的业务，你对业务规则特别熟悉，能带队帮老板搞定；再如，技术上遇到了问题，你能搞得定。没有实力，光有运气，即使你遇到了淘宝的崛起，现在也未必能财务自由。</p>

<p>硬实力从何而来？无非是积累。积累什么？才会越来越值钱？无非是行业或者技术。</p>

<p>什么是行业？汽车，是一个行业，金融是一个行业，服装是一个行业，旅游出行是一个行业等等；什么又是技术？安全，音频，Webkit，图像，深度学习等都是技术。身处一个行业，可能技术并不复杂用的都是常规技术，但是你能够对一一个行业深入的了解，它有哪些游戏规则，有什么坑，有什么政策法规，有什么风险，怎么样做才会有最大收益，这些都是只有从事行业有一定时间后才会知晓的。技术，就更好理解了，使用封装好的技术是容易的，比如像WebView，使用起来很方便，但它的技术实现—WebKit却是非常复杂的，没个几年时间是搞不清楚的。</p>

<p>当然，能始终在同一个领域（无论是行业还是技术）深耕是不容易的，要靠运气的。但是要明白，只有深耕一个行业，或者一门技术才会让自己的价值最大化。所以，当有选择时，尽可能的向着目标靠近。</p>

<h2>责任重于技术</h2>

<p>程序员的工作，无论是互联网，还是企业软件，都是工程，都是对技术的应用。大多数情况下，大多数人在工作中不会遇到技术上无法解决的问题，或者世界级的难题。换句话说，工作中遇到的问题，即使你不会，或者不知道怎么解决，通过查阅资料，书籍，网络和同事的帮助，很快就可以解决。再者，把代码写好，做足测试，加强健壮，这些事情，也并不是需要太高深，太前沿的技术。只要用心就能做的很不错。</p>

<p>相反，那些工作做的糟糕的人，并不是因为技术水平很差，别人对他的评价一定是不负责任，正所谓态度决定一切，态度产生的后果就是责任。即使技术水平一般，但是态度很认真，工作很负责，这就是优秀的员工，也是对公司更有价值的员工；而一些即使技术很强，但是却态度差，不负责任，这类人就是混吃混喝等死的人，是迟早要被拨掉的毒瘤。</p>

<h2>成为一个专业的程序猿</h2>

<p>这里的专业，更多的是指形式，做事的方法，解释什么是专业前，先看一些例子，什么叫不专业：</p>

<ul>
<li>电话面试时，不问对方能不能听清楚，就blahblahblah的开讲，结果讲了有十分钟，对方叹了一口气说，不好意思，信号不好，没听清。。。</li>
<li>比如电话面试时，候选人说我先找一个方便的地方，找到后，打电话过来，说找到了，然后就开始电面了，这是候选人打过来的电话啊。。。</li>
<li>比如开会迟到，比如开会时扯闲篇儿。。。</li>
<li>没弄清楚事情原委就妄下结论，特别是脾气急的人，甚至开始骂人。。。</li>
</ul>


<p>我相信这类事情举不胜举，我也非常肯定的相信，猿媛们在日常的工作也经常遇到这样的事情。我们针对此类事情常常会回应“不专业”，对，这就是不专业。反过来就是专业：
电面前，先都问清楚对方是否能听清楚，然后再blahblah；候选人告诉你，我现在方便了可以电面了，这是一个通知啊。你要挂掉，然后再打过去；开会有明确的主题，不要迟到；弄清原委后，再骂人。。。等等。</p>

<h2>闻道有先后，术业有专攻，如是而已。</h2>

<p>知识是无穷无尽的，总有你不知道的，总有你不会的，即使你当了几十年的程序猿，号称啥都会，人送外号万事通，但想把你问倒，也不是难事儿，一个学校里的孩子也有你不知道的知识。软件行业，分为众多领域，都说隔行如隔山，但是不同的领域也有鸿沟，比如做客户端，后端，前端，驱动，游戏引擎，图形图像，安全等等。所以，我们要保持一颗求知的心和一个谦虚的态度，即使你是前端大牛，但当你遇到驱动上的问题，你就是个白痴，就要虚心的去学习，去向别人请教。</p>

<p>另外，就是面试时，身为掌握生杀大权的面试官，更是要拿出对候选人的尊重，不能因为别人的出身（非科班或大专），经历（小公司，外包公司），经验（经验少，项目无亮点），不是很对口（你需要客户端，他大部分经验是前端）等非技术原因，而在面试时故意刁难，或者“明摆着不想要你，但是为了应付领导不得不面试”，或者因为其他原因来鄙视候选人（曾遇到过，一个外企的人，鄙视国内公司的人，说国内都是抄外企的）。正所谓疑人不用，用人不疑，身为面试官，你可以pass掉这个人，这是你的权利，但是你必须尊重别人，即使这个人能力确实不咋地。谁都有低头的时候，外企就牛么？国内的外企不也是总部的外包，竟干点杂活儿，Motorola当年多么牛逼，待遇也好，招人也挑得不行，现在不也都树倒猢孙散！老话讲不要装逼，迟早遭雷劈！</p>

<h2>如何停止迷茫的眼和沉降浮躁的心</h2>

<p>每当迷茫的时候，都是对未来想太多，当下做的太少导致的；每当浮躁的时候，都是期望的太多，做到的又太少时导致的。无论将来，你怎么样，将去向哪里，最关键的，是要从当前开始，你无法梦想着直接飞到那里，没有直升机，也没有热气球可以拨地而起，只能从当前开始，脚踏实地的，一步一个脚印的往前走。
这还是有点空，有点鸡汤，下面来说说具体如何做：</p>

<ul>
<li><p>首先，搞清楚你自己的做什么的？</p>

<p>  对，死写代码的。写哪一层代码的？安卓？水果？应用？Frameworks？驱动？哪一领域的？图形图像？Webkit?网络？BlueTooth?金融？安全？什么，不写代码，只是维护解bug（有相当部分的人，比如安卓整机方案的人都是只维护解解bug），也一样，哪一层的？哪一领域的，搞清楚；</p></li>
<li>然后，弄清楚自己是干啥的了，这就好办了，把你该做的事情，做好，做熟悉，做到你只用半天时间就能完成一天该做的事情。</li>
</ul>


<p> 写代码，要学习如何把代码写的又好又快，也就 是能快速的完成指定需求，bug又少，升华一下，又包括把代码写得清爽，易懂，结构合理，命名易懂等等，这个是基本功的修炼，且一直被人忽视，因为几乎所有公司的KPI里不会涉及到代码的好与坏，顶多是bug的多与少，crash率，性能和稳定性，这些是软件的指标，而非代码，衡量代码好与坏，最好的办法是看接手你代码的人的反应，看他骂你的次数。代码的修炼可以看《代码大全》《整洁代码之道》这些书，更重要的是看优秀的开源代码。</p>

<ul>
<li><p>另一个，就是熟悉现有的代码，争取做到，每当一个新需求过来时，你知道要改动哪些类，要在哪里添加新代码；改bug时，你想一想，就知道bug大概出现在什么位置，是哪个类，哪个方法导致 的了问题。</p></li>
<li><p>还有就是熟悉业务逻辑，任何软件都是为了实现业务而做的，熟悉业务逻辑，先是你负责的小模块的逻辑，然后是整个软件的业务逻辑，这对新评估需求，解bug，都非常有好处，你会站在一个整体的角度去思考。有一些具体的指标，比如你可以整理了需求文档，以及由此可以产生各种测试用例和场景，这对你验证代码的正确性很有帮助。</p></li>
<li><p>之后，就是准备好，并备份常用的测试环境，测试数据和测试用例，有新的需求，和解bug后，也都要整理并添加到测试库中，方便自测和回归。虽然有QA来保证软件质量，但是我们的软件，拿到给QA前起码要是能work的，需求要能满足的。总而言之，专业的程序员自己是要做足够的测试的。而测试，有时候不是那么的方便，比如，对于客户端而言，常发生的事情是，后端数据还没好，你需要mock数据；有些数据是少数场景才出现的，也需要mock着来测试；上线前要在测试环境里，用测试服务器来测试；等等。这里的意思是，如果你经常需要这些东西，比如mock数据啊，代理啊，等等，就要去花点心思，整理并备份，甚至想办法，写代码也好，用开源库也好，搭建好方便使用的测试环境，这对开发来说是很有帮助的。可能你会有印象，一个bug，改起来很容易，但是验证它却很困难，要挂代理，mock数据，模拟特殊场景，调整网络环境等等。</p></li>
<li><p>还要备份常用的环境配置，比如你的代码会针对不同的场景有不同的定制，这时，最好的方式是各拷贝一份，每一份都配置好，而不是用不同的分支，即使这也能做到。原因有二:</p>

<ul>
<li>代码分支虽然可以区分不同的代码，但是环境依赖配置往往不会在repo里，意味着你切了分支后，还是要去搞一下环境配置，弄一弄依赖；</li>
<li>另外一个原因是并行的问题，假设你在A版本的分支上正在开发新功能，这时B版本（假设A与B是给不同客户的，二个分支有差别）要修Bug，你说你是切分支方便，还是说到另外一个目录去搞方便，我觉得还是这种物理隔离的要好。</li>
</ul>
</li>
</ul>


<p> 混了几年的后，我们深知，环境配置也是开发的一部分，而这通常都很麻烦，会让一个看起来十分钟搞定的事情，最终变成搞了二天，可能还没有搞定。现在的代码都很复杂，复杂之处在于，它本身不复杂，但是依赖特别复杂。大家常折腾开源软件，应该知道，一个库本身本身可能不复杂，但想要用它，要安装配置一坨一坨的依赖，试想一下，如果不用包管理器(apt-get，brew，pip之类）的，你自己手动去装一个opencv试试，或者直接编译它的源码试试。</p>

<ul>
<li><p>上面这些做到了后，我相信份内的事情对于你来说，都不是事儿了。这时，就要去深入学习了，把你所依赖的东西搞清楚。比如你用到了网络库，像OkHttp，像Retrofit，它们为什么比原生的要好用？它主要的原理是什么？它的封装思想？再如图片加载库UIL，Picasso等，它的原理是什么？所依赖的底层库，封装的都特别好，用起来很方便，越是这样的库，如果你只知道怎么用，那就完了。因为即使没用过的人，花几分钟看下教程也都知道怎么用。只有深入了解实现细节，并学习使用高级用法，才能不惘你用过一回这些优秀的库。</p></li>
<li><p>此外，无论是哪个领域，哪一层，性能调优都是一个高手的象征，项目的性能调优工作一般都是由高手来负责的。所以，如果你学习，并实践过性能调优，对技能的提升绝对是一个大推力，面试时也会是一个大大的加分项。</p></li>
<li><p>最后，就是用心，认真的对待工作，认真对待每一行代码，每一个bug。即使你不喜欢现在的工作，即使你觉得你现在就是在浪费时间，浪费生命，每天都改改bug，毫无乐趣，但你也要认真对待，把工作做好。所谓拿人钱财替人消灾，你拿了公司的薪水，就要把工作做好，他日你能高就，那是另外一回事，是他日的事情，今天你在这儿，就要把该做的事情做好。如果特别浮躁，眼高手低，总是糊弄，你觉得你能高就么？老板会把更重要的事情交给你？虽然，这个世界千奇百怪，确实有人不是因为技能得到了更高的工资，更好的工作，但我相信大部分情况下，还是成正比的，待遇比你好的人还是有正面的理由的。如果你不服，那么就更要用心的去努力，他日高就时，证明给别人看：老子比你们都强！</p></li>
</ul>


<p>如果你能做上面建议的几点，略加坚持，不出半年，肯定会有质的变化。</p>

<h2>去他妈的职业规划和长期计划</h2>

<p>职业规划是一个方法论的东西，比他妈的设计模式还不靠谱。长期计划更是害人的东西，超过一年的计划，甚至 超过6个月都是扯蛋。你去问那些大牛，没几个有他妈的明确的职业规划和长期计划的。他们的共同特点 是：擅长深挖，能啃书，能读代码，思维活跃，思路清晰，解决问题时，人家的思路就比你的更优雅。
为什么说这玩意没卵用，是因为现实生活中变化真的太快了。项目，做几个月之后 可能就不做了；人员，今天张三离职了，明天李四转岗了；没等你做完呢？需求改了，或者这个运营活动不做了，因为老板经费不给批。。。。</p>

<p>说个具体的身边的例子吧：去年团队来了个实习生，是按安卓客户端招的，来了后，头一个星期也是安排的安卓的活儿，第二个星期，来了一个新的大需求，需要H5（Mobile HTML5），结果这孩子就要去做H5（要现从头学JavaScript），过了大概三个月，公司政策变化，用不了那么多实习生，结果这孩子 就得回学校了。如果你是这孩子，你连一个月的学习计划都没法实现，因为你都不知道下周，甚至明天会发生啥事情。</p>

<h2>想要获得一个更好的成长学习环境就是要去大公司</h2>

<p>去大公司还是小公司，这个可以列为与C和C++之争，GNOME和KDE之争以及Vim和Emacs之争同等的一个不朽的话题。孤认为，当你处在职场初期，比如刚毕业，或者毕业二三年之内，大厂无疑是一个非常好的选择，这里的大厂包括国内一流的公司比如BAT，网易等国内知名大厂，以及大的外企，如Intel，Microsoft，非死不可，谷哥等等。</p>

<p>接下来说原因：公司雇我们来是干活的，是为公司创造价值，是帮公司赚钱的，不是让你来学习，让你来开拓视野，让你来接近牛人，让你来讨论问题的。大厂，因为它很大，有稳定的收入来源和赢利能力，所以，它的节奏是有规律的，是相对宽松的，它的项目要么是成熟稳定的，要么不是为了短期赢利而开展的。所以，它在人才的培养方面，是有计划的，换句话说，能够容忍你去学习，甚至是稍微放慢一下工作任务（我说的是稍微放慢），因为公司也期望你去学习，提升自己的技术和能力，公司也有会有这样的空间来接纳更好的你，说白了，有足够的空间让你提高和上升，更会有时间和耐心来让你完成这一过程。小厂能有这样的空间吗？能允许你说，我先学几个月？没准几个月后，你学成归来时，公司可能都倒了。</p>

<p>另外，大厂里人多，好人多，牛人多，坏人也有，水货也不少，你可以认识更多的人，你可以了解大厂是如何运作的，大厂是靠什么发展成为这么大，以及大厂如何保持运转而不衰落，大厂里，你可以有时间和空间去学习，能开阔视野，能拓展人脉，这都是小厂无法做到的。</p>

<p>一句话，当你处在职业的快速学习期时，大厂是最佳选择；而当你感觉学有所成，或者遇到了新的瓶颈时，这时小厂就是你大展拳脚的好去处。所以，你看，从BAT出来的人，无论是创业还是加盟创业，都是一个非常好的归宿，这是双赢，对于我们，小厂里空间更大，人少事多，是你施展大好舞台；而小厂也恰恰需要这种以一当十，即是CTO又是程序猿，即是开发又是运维的复合型人才。</p>

<h2>沟通以及代码可维护性取决于作者是否能为他人着想</h2>

<p>如果一个人肯为他人着想，会换位思考，我相信，他的沟通能力一定不会差；他写代码的可读性也不会太差。如果你不顾别人，只管自己说，说完拉倒，这怎么沟也不会通；如果你想不到别人会维护你的代码，甚至想不到日后自己也得看现在写的代码（看，都不为自己着想），这代码要是可维护，算孤白活。</p>

<h2>攘外必先安内</h2>

<p>委座这句话还是相当有水平和内涵的，也具有指导意义。我对这句话的理解是，小到个人，团队，部门，大到公司和国家不能同时进行二个或多个大事情，只有把一个搞定了，才能去搞其他的，有点不好理解，待孤慢慢讲。</p>

<p>所谓温饱思淫欲，当你下个饭辙都没有时，你还考虑什么泡妞？当你一门技术，一个编程语言，一个平台都没学明白的时候，想什么跨端，想什么技术的广度？都是扯蛋。到外挖井，挖的也不深，最终一辈子也挖不到水，正所谓10个10%不等于一个100%；</p>

<p>再比如团队，每次发版本都搞得鸡飞狗跳的，还谈什么XP，搞什么技术创新？好好的把业务需要的技术搞熟悉，搞透彻，先把份内的事情做好，轻松的做好，当你每次发版本都能轻松应对时，甚至原本10个人的活5个人就能搞定时，这时才是你去搞技术创新，搞什么UT啊，什么XP，什么技术驱动，什么工程师文化啊；</p>

<p>大到公司，当前的领域内，都没有占有稳定的市场份额时，就学人家搞什么布局，人家搞金融，你也搞，人家搞汽车，你也搞，人家搞影业，你也搞，这早晚会把自己玩儿死，就比如当下的贾布斯，乐视的电视，手机，体育，哪个占有稳定的市场份额了？哪个能担起养家的重任？这个时候你去玩布局？搞什么汽车？这就叫No zuo，No die。马老师是擅长布局，但是都是在一个领域垄断了时：当年搞淘宝，是因为B2B站稳了脚跟，能养家了，换句话说B2B已经做的差不多了，且占了大部分的市场份额，能赚钱，即使淘宝失败了，赔了钱，都不是事儿。后来搞阿里云，现在的什么影业，菜鸟，双H，这都是要持续砸钱的，为啥，因为淘宝和天猫能养得起整个阿里，即使这些都赔了，也赔得起。</p>

<p>大到国家也是如此，当人民还吃不饱穿不暖时，谈什么精神文明建设，谈什么科技创新？比如七八十年代的中国，十几年前的东南亚（那几个比较弱的国家，不是四小龙），搞什么环境保护，对于人类来说，当面临人类的自身的生存和环境保护的选择时，只能选择前者。所以，在一个不发达国家向中等发达国家迈进的时候，经济发展始终是第一位的，人类发展过程都一样，都是先污染，求发展，再治理。</p>

<p>说到这里，我相信你已经明白孤的意思了。</p>

<h2>提高竞争力，以增值</h2>

<p>什么是竞争力，我觉得就是要多多培养那些不是Google一下就能解决的问题的能力。说白了，就是知识体系。Google一下能解决的问题，一定是一个点。StackOverFlow也好，博客也好，说的都是一个点的问题，不可能太大，因为大了的话一篇文章怎么能讲的清楚。多个点，且经过连接就成体系，这是需要长时间多次Google，外加思考总结而形成的，这就是竞争力。也是老鸟的价值所在。</p>

<p>很多人都在争论，30岁以后要不要写代码啊？40岁以后怎么办啊？确实，随着年龄的增长，人的身体，精力都会走下坡，不能再像年轻时那样熬夜，所以30多岁的一线人员的处境非常的不容易。刚毕业的前几年，是快速成长期，只要你肯努力学习，技能水平，收入都是直线上升的，但是接近30岁的一线码农，再想技能水平收入直升，就相当的困难。家庭，生活和身体原因让你没有那么 多时间去学习了。这时，你能做的事情，刚毕业二三年的人也能做，他们精力更旺，身体更好，所以很多人要么转管理，要么转行，剩下的也总是在琢磨啥时候转。</p>

<p>我觉得，造成这种尴尬的境遇最重要的原因还是未能持续学习，未形成足够多的竞争力。即使你没成为管理者，没成为大拿级别的人物（现实生活中不可能每个30岁后都成为管理者，都成为大拿），如果你持续学习，不断提升竞争力，你总是会增值的，即使每年公司仅给你普涨工资。</p>

<p>工资，我们要以单位时间来算，假设月薪2150块，这其实是21.5x100得来的，你请一天假，是要扣掉100块的，再换算，8x12.5＝100，也就是说你的时薪是12.5大洋。二个人的月薪假设都是2150，但是一个人水平高，一天的活，2小时搞定，一个月的活一个星期搞定；跟另外一个天天还得加班才搞的完。哪个薪水高？当然，这里是做了很多简化，现实生活要比这个复杂。虽然，都有快速成长期，公司也有快速膨胀期，但最终，都会达到稳定，所谓稳定，就是你遇到瓶颈。比如像BAT等大厂里的大部分人，拿阿里来举例，绝大部分人，升到P7后，肯定就止步于此，不当主管升P8是很困难，而且只会越来越困难。那么这些人，每年只能被普涨工资，要想提高工资水平，只能靠提升自身工作效率来增值。</p>

<p>有人也许会说，这不太现实啊，活儿不一定会平均 分配的，老油条可能会被分配更多的任务。其实，这个决定权在于自己，都已经是老油条了，看不到上升的希望了，为什么还要多干？这是一个屁股决定脑袋的时代，也可以理解为工资决定责任的时代，员工付出多少努力取决于给多少工资。说不好听的，给一个应届生的薪水，还指望着，干着架构师的活儿，担着CTO的责任，只有处在职业初期，快速学习成长的时候才会干，并且一旦感觉学有所成，立马高就。</p>

<p>总之，不断的学习和总结，多多培养竞争力，才能做到越老越值钱。</p>

<h2>要事不一定非优先</h2>

<p>当有多件大事情要做时，比如一个新功能，一个是已上线版本的几个bug，还有设计下个月的一个运营活动的技术方案，当这三个事情摆在面前时，只能先选择最重要的事情来做。这个确实是要应用要事为先的原则。</p>

<p>但假如，还有一些其他小事情要做：比如，充个话费；到网上买个东西；升级一个软件等，这些10分钟内可以搞定的小事情，最好还是先做了。这样你的头脑就清静了，不会老想着“要记得充话费啊”，这些小事情本来就容易被忘记了，所以大脑会潜意识的提醒我们。这会打扰正常的工作思维，影响思维的集中度，从而影响重要事情的效率。而且，按要事优先也会造成到晚上了这些小事情还没有做完，而推到第二天。</p>

<p>区分的原则就在于：如果一件小事情可以10分钟内搞定，那么就迅速搞定它。要明白，你的ToDo列表越短越好。那些需要半天或者一天才能搞定的事情，当然还是要按照要事优先的原则来办。</p>

<h2>不要努力加班做业务，而是要加班学习</h2>

<p>软件行业，加班是难免的，特别是互联网行业，现在的移动互联时代996更是一个普遍现象。也许会感觉到充实，也许会感觉到成就，也许会感觉到累？但是黄牛式的，天天加班做业务，起码对于个人的成长来说是最致命的。现在年底了，你回头想一下，这一年都做了什么？有哪些成长？你会发现，你做了很多事情，但是成长很少。遇到不会的东西，网上搜一搜，copy一下，就完了。业务做了那么多？你会有成就感 么？程序员的成就感更多是源于自己的成长，能够做到以前做不到的事情，而非天天搬砖。</p>

<p>举个例子，你会盖房子，但这一年，都是在盖同样差不多规格的房子，能有多大长进？什么时候来一个盖漂亮城堡的活，你能接得住么？公司给我们钱，是让我们产生价值的，对于公司来说房子就价值，只要我们能多产出房子就值了付给我们的薪水了，等哪天你老了，病了，不能盖房子了，他们立马会找一个更年轻力壮的人来替你。而你如何升级为盖城堡的人，公司根本不管。</p>

<p>所以，如果你感觉天天在搬砖，几个月了，甚至半年了，毫无进步，没学习新东西了，也没有搞清楚遇到的问题，这时就要注意了，要减慢搬砖的速度，哪怕不要KPI了，要停下来学习学习，总结思考一下，如何做得更好。比如，有些重复的工作，是不是可以用脚本，像打包，发布之类；比如对于产品和运营过来的需求，要合理的拒绝；比如对于重复性的运营活动，是不是可以搞些配置模板等等。</p>

<p>天天加班做业务，是不会有进步的。要想进步，只能学习。</p>

<h2>学会聪明的做事</h2>

<p>考试时，最好的方法是什么？不是瞎猜，不是自己做，而是抄正确的答案。一个活分配下来了，最好的方式是什么？不是自己干，即使你早已驾轻就熟，而是让别人替你完成。最省力，最轻松的做事方法是，让别人来做。完成一件事情的方法有很多，我们要选择成本最低的方式。</p>

<p>这里，不是说让大家投机取巧，把本该自己做的事情推给别人，当然如果你有那个本事推给别人，别人又愿意接也可以。而是说要聪明的做事，<strong>不要把精力耗在本该别人负责的事情上</strong>。比如，现在的软件依赖都比较复杂，问题通常都会通过上层来表现出来，如果你发现，这个是底层引起了，那就不要去查了（如果时间充实，为了学习和研究的情况除外），让相应的负责人来查就好了，他对此更加的熟悉，可能 你花一天功夫也没弄明白的，人家一眼就搞定了。</p>

<p>再有就是，一些烦人的手工操作，重复性操作，要写脚本来完成。计算机最大的优势是能够重复且不犯错的完成任务，它的最大优势 在于重复，人的重复性没有计算机好，而且会犯错，像拼写错误等。像打包，发布，等等很多事情都可以用脚本来完成。</p>

<h2>学会利用程序员的优势</h2>

<p>软件再也不是大学实验里，让人们琢磨不透，看起来很神秘的东西了，它已经融入了人们的生活，广场舞的大爷大妈们都也用上了智能手机，用上了微信，淘宝。我相信，问软件人员会修电脑的人会越来越少。这意味着我们每天都要跟软件打交道，离不开软件 了。身为会写软件 的人，就要利用好自身的优势，下面来举例来说一说：</p>

<ul>
<li>要能识别出各种钓鱼短信，欺诈短信电话；如果身为一个程序员还被电信诈骗骗了的话，只能说这个猿太失败了。</li>
<li><p>对于各种软件，也要能够识别出，哪个是真的，哪个山寨的，假的，哪个可能有病毒，哪个可能有木马。更要有安全意识，现在手机应用和网站的个人信息泄露非常严重，所以，更要注意管控手机应用的权限，能少注册网站就少注册等。除了自身要注意信息安全，更要提醒身边的人。</p></li>
<li><p>再比如，普通人获取信息的方式是上网站，用搜索引擎，但是猿媛是不是可以用爬虫呢？</p></li>
<li>再比如像抢红包，抢票，秒杀（不要去秒月饼哈）刷投票，刷评论等，普通人靠人肉，靠手工，靠发朋友圈，我们身为猿媛是一定要靠 技术的，写个脚本，写段代码来帮我们完成这些事情，这也是我们从事的职业所带来的一个优势。</li>
</ul>

]]></content>
  </entry>
  
</feed>
